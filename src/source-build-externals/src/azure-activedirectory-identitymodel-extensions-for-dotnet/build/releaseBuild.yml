trigger: none
pr: none

name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

# Create a daily midnight build for release builds on master to ensure our release builds function
schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - dev

variables:
  - group: Middleware
  - name: BuildPlatform
    value: 'any cpu'

    # The following variables are set in the release build UI:
    # BuildConfiguration: 'debug|release'
    # WilsonVersion: ''. Full version number

jobs:
- job: build
  pool:
    name: MwWilson1EsHostedPool
    demands:
    - msbuild
    - DotNetFramework
    - visualstudio
  timeoutInMinutes: 360

  steps:
  - script: echo $(BuildConfiguration)
    displayName: 'display Build Configuration'

  - script: echo $(WilsonVersion)
    displayName: 'display WilsonVersion'

  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk 2.x'
    inputs:
      version: 2.x
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk 6.x'
    inputs:
      version: 6.x
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk 8.x'
    inputs:
      version: 8.x
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: DotNetCoreCLI@2
    displayName: 'dotnet --list-sdks'
    inputs:
      command: custom
      custom: '--list-sdks'

  - task: CmdLine@1
    displayName: 'Run VerifyResourceUsage.pl'
    inputs:
      filename: perl
      arguments: '$(Agent.BuildDirectory)\s\src\VerifyResourceUsage.pl'

  - powershell: |
      regedit /s .\build\strongNameBypass.reg
    displayName: 'Strong Name Bypass'

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: 'build'
      projects: 'Product.proj'
      arguments: '/r:True /p:Configuration=$(BuildConfiguration) /p:Platform="Any CPU" /verbosity:m /p:SourceLinkCreate=true'

  - task: PowerShell@2
    displayName: 'Run Tests'
    inputs:
      targetType: filePath
      filePath: ./runTests.ps1
      arguments: '-buildType $(BuildConfiguration)'

  - task: CopyFiles@2
    displayName: 'Copy Files to: [staging]\ProductBinaries'
    inputs:
      SourceFolder: src
      Contents: |
        **\bin\$(BuildConfiguration)\**\Microsoft.IdentityModel.*.dll
        **\bin\$(BuildConfiguration)\**\Microsoft.IdentityModel.*.pdb
        **\bin\$(BuildConfiguration)\**\System.IdentityModel.Tokens.Jwt.dll
        **\bin\$(BuildConfiguration)\**\System.IdentityModel.Tokens.Jwt.pdb
      TargetFolder: '$(Build.ArtifactStagingDirectory)\ProductBinaries'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@2
    displayName: 'Run PoliCheck'
    inputs:
      targetType: F
      result: PoliCheck.xml
      optionsFC: 0
      optionsXS: 0
      optionsHMENABLE: 0

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@3
    displayName: 'Run CredScan'
    inputs:
      outputFormat: pre
      suppressionsFile: 'build/credscan-exclusion.json'
      debugMode: false

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-roslynanalyzers.RoslynAnalyzers@2
    displayName: 'Run Roslyn Analyzers'
    condition: eq(variables['TargetNet8'], 'False')

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@4
    displayName: 'Run BinSkim'
    inputs:
      AnalyzeSymPath: '$(Build.ArtifactStagingDirectory)\ProductBinaries'
      AnalyzeVerbose: true
      AnalyzeHashes: true

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@3
    displayName: 'Publish Security Analysis Logs'
    continueOnError: true

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@2
    displayName: 'Post SDL Analysis'
    continueOnError: true


  #Sign Wilson 7x task group
  - template: template-sign-wilson.yaml

  - task: DotNetCoreCLI@2
    displayName: 'Pack libraries'
    inputs:
      command: 'pack'
      arguments: '--no-restore'
      packDirectory: '$(Build.SourcesDirectory)\artifacts'
      nobuild: true
      verbosityPack: 'Minimal'
      configuration: $(BuildConfiguration)
      packagesToPack: 'Product.proj'
      feedsToUse: 'config'
      nugetConfigPath: Nuget.config
      externalFeedCredentials: 'Internal Analyzers'

  - task: EsrpCodeSigning@4
    displayName: 'Sign Nuget Packages'
    inputs:
      ConnectedServiceName: 'IDDP Code Signing'
      FolderPath: artifacts
      Pattern: '*.nupkg'
      signConfigType: inlineSignParams
      inlineOperation: |
        [
            {
                "keyCode": "CP-401405",
                "operationSetCode": "NuGetSign",
                "parameters": [ ],
                "toolName": "sign",
                "toolVersion": "1.0"
            },
            {
                "keyCode": "CP-401405",
                "operationSetCode": "NuGetVerify",
                "parameters": [ ],
                "toolName": "sign",
                "toolVersion": "1.0"
            }
        ]
      SessionTimeout: 20

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    inputs:
      scanType: 'Register'
      verbosity: 'Verbose'
      alertWarningLevel: 'High'

  - task: PublishSymbols@2
    displayName: 'Publish symbols on symweb (cross publish)'
    inputs:
      SearchPattern: '**\bin\**\*.IdentityModel.*'
      SymbolServerType: TeamServices
      TreatNotIndexedAsWarning: true

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-uploadtotsa.TSAUpload@2
    displayName: 'TSA upload to Codebase: WILSON Stamp: Azure'
    inputs:
      GdnPublishTsaOnboard: false 
      GdnPublishTsaConfigFile: '$(Build.SourcesDirectory)/build/tsaConfig.json'
    continueOnError: true

  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'Manifest Generator'
    inputs:
      BuildDropPath: '$(Build.SourcesDirectory)\src'
      ManifestDirPath: '$(Build.SourcesDirectory)\artifacts'

  - task: NuGetCommand@2
    displayName: 'Upload NuGet Package to VSTS NuGet'
    condition: eq(variables['NugetPackageType'], 'preview')
    inputs:
      command: push
      packagesToPush: '$(Build.Repository.LocalPath)\artifacts\*.nupkg'
      publishVstsFeed: '46419298-b96c-437f-bd4c-12c8df7f868d'
      allowPackageConflicts: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish NuGet Package Artifact'
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)\artifacts'
      ArtifactName: '$(Build.BuildNumber)-nuget-package'

  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
