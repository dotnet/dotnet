trigger: none
pr: none

name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

# Create a daily midnight build for release builds on master to ensure our release builds function
schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - dev

variables:
  - group: Middleware
  - name: BuildPlatform
    value: 'any cpu'
  - name: BuildConfiguration
    value: 'Release'

jobs:
- job: build
  pool:
    name: MwWilson1EsHostedPool
    demands:
    - msbuild
    - DotNetFramework
    - visualstudio
  timeoutInMinutes: 360

  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk 2.1.818'
    inputs:
      version: 2.1.818
      installationPath: 'c:\Program Files\dotnet'

  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk 2.1.x'
    inputs:
      version: 2.1.x
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: UseDotNet@2
    displayName: 'Use .Net Core SDK 6'
    inputs:
      version: 6.0.x

  - task: UseDotNet@2
    displayName: 'Use .Net Core SDK 8'
    inputs:
      includePreviewVersions: true
      version: 8.0.x
    condition: eq(variables['TargetNet8'], 'True')

  - task: DotNetCoreCLI@2
    displayName: 'dotnet --list-sdks '
    inputs:
      command: custom
      custom: '--list-sdks '

  - task: CmdLine@1
    displayName: 'Run VerifyResourceUsage.pl'
    inputs:
      filename: perl
      arguments: '$(Agent.BuildDirectory)\s\src\VerifyResourceUsage.pl'

  - powershell: |
      regedit /s .\build\strongNameBypass.reg
      regedit /s .\build\strongNameBypass2.reg
    displayName: 'Strong Name Bypass'

  - task: PowerShell@2
    displayName: 'Update Assembly Info'
    inputs:
      targetType: filePath
      filePath: ./updateAssemblyInfo.ps1
      arguments: '-packageType $(BuildConfiguration)'

  - task: PowerShell@2
    displayName: 'Prepare contract assemblies'
    inputs:
      targetType: 'filePath'
      filePath: $(Agent.BuildDirectory)\s\build\apiCompat.ps1
      arguments: >
        -feedLocation "NuGet" 
        -packageNames $(Wilson6xPackageList)
        -packageVersion: "latest"
        -adoFeedSource: $(AdoFeedSource)
        -adoFeedName: $(AdoFeedName)
        -adoAllowPrerelease: "false"
        -apiCompatRoot: $(ApiCompatRootWilson)
        -nugetPackageProviderVersion: "2.8.5.208"

  # - task: MSBuild@1
  #   displayName: Build
  #   inputs:
  #     solution: wilson.sln
  #     msbuildArchitecture: x64
  #     msbuildArguments: '/r:True /p:Configuration=$(BuildConfiguration) /p:Platform="Any CPU" /verbosity:m /p:SourceLinkCreate=true /p:RunApiCompat=true'

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: 'custom'
      projects: 'wilson.sln'
      custom: 'msbuild'
      arguments: '/r:True /p:Configuration=$(BuildConfiguration) /p:Platform="Any CPU" /verbosity:m /p:SourceLinkCreate=true /p:RunApiCompat=true'

  - task: PowerShell@2
    displayName: 'Run Tests'
    inputs:
      targetType: filePath
      filePath: ./runTests.ps1
      arguments: '-buildType $(BuildConfiguration)'

  - task: CopyFiles@2
    displayName: 'Copy Files to: [staging]\ProductBinaries'
    inputs:
      SourceFolder: src
      Contents: |
        **\bin\$(BuildConfiguration)\**\Microsoft.IdentityModel.*.dll
        **\bin\$(BuildConfiguration)\**\Microsoft.IdentityModel.*.pdb
        **\bin\$(BuildConfiguration)\**\System.IdentityModel.Tokens.Jwt.dll
        **\bin\$(BuildConfiguration)\**\System.IdentityModel.Tokens.Jwt.pdb
      TargetFolder: '$(Build.ArtifactStagingDirectory)\ProductBinaries'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
    displayName: 'Run PoliCheck'
    inputs:
      targetType: F
      optionsFC: 0
      optionsXS: 0
      optionsHMENABLE: 0

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
    displayName: 'Run CredScan'
    inputs:
      suppressionsFile: 'build/credscan-exclusion.json'
      debugMode: false

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-roslynanalyzers.RoslynAnalyzers@2
    displayName: 'Run Roslyn Analyzers'
    condition: eq(variables['TargetNet8'], 'False')

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
    displayName: 'Run BinSkim'
    inputs:
      InputType: Basic
      AnalyzeTarget: '$(Build.ArtifactStagingDirectory)\*.dll'
      AnalyzeSymPath: '$(Build.ArtifactStagingDirectory)\ProductBinaries'
      AnalyzeVerbose: true
      AnalyzeHashes: true

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
    displayName: 'Publish Security Analysis Logs'
    continueOnError: true

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
    displayName: 'Post SDL Analysis'
    inputs:
      BinSkim: true
      CredScan: true
      PoliCheck: true
    continueOnError: true


  #Sign Wilson 6x task group
  - template: template-sign-wilson-6x.yaml

  - task: PowerShell@2
    displayName: Pack
    inputs:
      targetType: filePath
      filePath: ./pack.ps1
      arguments: '-buildType $(BuildConfiguration) C:\hostedtoolcache\windows\dotnet'

  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'Sign Nuget Packages'
    inputs:
      ConnectedServiceName: 'IDDP Code Signing'
      FolderPath: artifacts
      Pattern: '*.nupkg'
      signConfigType: inlineSignParams
      inlineOperation: |
        [
            {
                "keyCode": "CP-401405",
                "operationSetCode": "NuGetSign",
                "parameters": [ ],
                "toolName": "sign",
                "toolVersion": "1.0"
            },
            {
                "keyCode": "CP-401405",
                "operationSetCode": "NuGetVerify",
                "parameters": [ ],
                "toolName": "sign",
                "toolVersion": "1.0"
            }
        ]
      SessionTimeout: 20

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    inputs:
      scanType: 'Register'
      verbosity: 'Verbose'
      alertWarningLevel: 'High'

  - task: PublishSymbols@2
    displayName: 'Publish symbols on symweb (cross publish)'
    inputs:
      SearchPattern: '**\bin\**\*.IdentityModel.*'
      SymbolServerType: TeamServices
      TreatNotIndexedAsWarning: true

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-uploadtotsa.TSAUpload@1
    displayName: 'TSA upload to Codebase: WILSON Stamp: Azure'
    inputs:
      tsaVersion: TsaV2
      codeBaseName: WILSON
      uploadAPIScan: false
      uploadFortifySCA: false
      uploadFxCop: false
      uploadModernCop: false
      uploadPREfast: false
      uploadTSLint: false

  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'Manifest Generator '
    inputs:
      BuildDropPath: '$(Build.SourcesDirectory)\src'
      ManifestDirPath: '$(Build.SourcesDirectory)\artifacts'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish NuGet Package Artifact'
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)\artifacts'
      ArtifactName: '$(Build.BuildNumber)-nuget-package'

  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
