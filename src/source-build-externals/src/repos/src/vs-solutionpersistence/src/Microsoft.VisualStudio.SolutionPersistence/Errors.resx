<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="NotSolution" xml:space="preserve">
    <value>Not a solution file.</value>
    <comment>Error message</comment>
  </data>
  <data name="MissingSectionName" xml:space="preserve">
    <value>Missing section name.</value>
    <comment>Error message</comment>
  </data>
  <data name="InvalidScope" xml:space="preserve">
    <value>Missing or invalid scope.</value>
    <comment>Error message</comment>
  </data>
  <data name="InvalidProjectType" xml:space="preserve">
    <value>Missing or invalid project type guid.</value>
    <comment>Error message</comment>
  </data>
  <data name="SyntaxError" xml:space="preserve">
    <value>Syntax error.</value>
    <comment>Error message</comment>
  </data>
  <data name="MissingDisplayName" xml:space="preserve">
    <value>Missing display name.</value>
    <comment>Error message</comment>
  </data>
  <data name="MissingPath" xml:space="preserve">
    <value>Missing project path.</value>
    <comment>Error message</comment>
  </data>
  <data name="MissingProjectId" xml:space="preserve">
    <value>Missing project id.</value>
    <comment>Error message</comment>
  </data>
  <data name="DuplicateExtension_Args2" xml:space="preserve">
    <value>Duplicate file extension '{0}' for project type '{1}'.</value>
    <comment>Error message. {0} is a file extension (e.g. .csproj). {1} is a project type name or guid (e.g. C#)</comment>
  </data>
  <data name="DuplicateName_Args2" xml:space="preserve">
    <value>Duplicate name '{0}' for project type '{1}'.</value>
    <comment>Error message. {0} is the name of an item in a project {1} is the name of the project that contains the items</comment>
  </data>
  <data name="DuplicateProjectTypeId_Args2" xml:space="preserve">
    <value>Duplicate project type id '{0}' for project type '{1}'.</value>
    <comment>Error message. {0} is a Guid (e.g. fae04ec0-301f-11d3-bf4b-00c04f79efbc). {1} is a name (e.g. C#)</comment>
  </data>
  <data name="DuplicateDefaultProjectType" xml:space="preserve">
    <value>Multiple default project types defined.</value>
    <comment>Error message</comment>
  </data>
  <data name="InvalidProjectTypeReference_Args1" xml:space="preserve">
    <value>ProjectType '{0}' not found.</value>
    <comment>Error message. {0} is the name of a project type.</comment>
  </data>
  <data name="InvalidLoop_Args1" xml:space="preserve">
    <value>Circular dependency found for '{0}'.</value>
    <comment>Error message. {0} is the name of item with a circular dependency.</comment>
  </data>
  <data name="InvalidItemRef_Args2" xml:space="preserve">
    <value>Missing or invalid '{0}' item in type '{1}'.</value>
    <comment>Error message. {0} is the name of the item provided. {1} is the type of item (e.g. Project)</comment>
  </data>
  <data name="DuplicateItemRef_Args2" xml:space="preserve">
    <value>Duplicate item '{0}' of type '{1}'.</value>
    <comment>Error message. {0} is the name of the item (e.g. FolderName). {1} is the type of item (e.g. Folder)</comment>
  </data>
  <data name="MissingProjectValue" xml:space="preserve">
    <value>Project attribute is empty.</value>
    <comment>Error message</comment>
  </data>
  <data name="InvalidConfiguration_Args1" xml:space="preserve">
    <value>Invalid syntax for solution configuration '{0}'.</value>
    <comment>Error message. {0} is the text provided.</comment>
  </data>
  <data name="InvalidFolderReference_Args1" xml:space="preserve">
    <value>Folder '{0}' not found.</value>
    <comment>Error message. {0} is the name of the folder.</comment>
  </data>
  <data name="InvalidProjectReference_Args1" xml:space="preserve">
    <value>"Project '{0}' not found."</value>
    <comment>Error message. {0} is a project file path.</comment>
  </data>
  <data name="InvalidName" xml:space="preserve">
    <value>Names cannot:
- contain any of the following characters: / ? : \ * " &lt; &gt; |
- contain control characters
- be system reserved names, including 'CON', 'AUX', 'PRN', 'COM1' or 'LPT2'
- be '.' or '..'</value>
    <comment>Error message</comment>
  </data>
  <data name="DuplicateProjectPath_Arg1" xml:space="preserve">
    <value>Project path '{0}' already exists in the solution.</value>
    <comment>Error message. {0} is the file path that already exists.</comment>
  </data>
  <data name="DuplicateProjectName_Arg1" xml:space="preserve">
    <value>Project name '{0}' already exists in the solution folder.</value>
    <comment>Error message. {0} is the name of the folder.</comment>
  </data>
  <data name="InvalidFolderPath_Args1" xml:space="preserve">
    <value>Solution folder path '{0}' must start and end with '/'.</value>
    <comment>Error message. {0} is the path provided.</comment>
  </data>
  <data name="CannotMoveFolderToChildFolder" xml:space="preserve">
    <value>Cannot move a folder to a child folder.</value>
    <comment>Error message</comment>
  </data>
  <data name="InvalidModelItem" xml:space="preserve">
    <value>Model does not belong to this solution.</value>
    <comment>Error message</comment>
  </data>
  <data name="InvalidEncoding" xml:space="preserve">
    <value>Only ASCII, UTF-8, and Unicode encodings are supported for serializing '.sln' files.</value>
    <comment>Error message</comment>
  </data>
  <data name="DuplicateKey" xml:space="preserve">
    <value>An element with the same key already exists.</value>
    <comment>Error message</comment>
  </data>
  <data name="InvalidVersion_Args1" xml:space="preserve">
    <value>Invalid version '{0}'.</value>
    <comment>Error message. {0} is the version provided.</comment>
  </data>
  <data name="UnsupportedVersion_Args1" xml:space="preserve">
    <value>The file version '{0}' is unsupported.</value>
    <comment>Error message. {0} is the file version not supported (e.g. 22.3)</comment>
  </data>
</root>