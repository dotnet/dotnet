trigger:
  batch: true
  branches:
    include:
    - main
    - release/*

pr: none

variables:
- template: /eng/common-variables.yml@self
- template: /eng/common/templates-official/variables/pool-providers.yml@self
- name: LinuxImage
  value: build.ubuntu.2204.amd64
- name: WindowsImage
  value: windows.vs2022.amd64
- name: MacImage
  value: macOS-13
- name: CheckNuGetSizesScript
  value: >-
    $nupkgs_large=(Get-ChildItem artifacts/packages/$(_BuildConfig)/Shipping -recurse -include "*.nupkg" | Select-Object Name,Length | Where-Object { $_.Length -gt 250*1MB });
    if ($nupkgs_large.Length -gt 0) { Write-Error "NuGet size exceeds 250MiB: $($nupkgs_large | Format-Table | Out-String)"; exit 1 }

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    sdl:
      tsa:
        enabled: true
      policheck:
        enabled: true
      binskim:
        scanOutputDirectoryOnly: true
      sourceAnalysisPool:
        name: $(DncEngInternalBuildPool)
        image: $(WindowsImage)
        os: windows
    stages:
    - stage: build
      displayName: Build
      jobs:
      - template: /eng/common/templates-official/jobs/jobs.yml@self
        parameters:
          enablePublishBuildArtifacts: true
          enablePublishBuildAssets: true
          enablePublishUsingPipelines: true
          enableMicrobuild: true
          enableSourceBuild: true

          jobs:
          ############ macOS BUILD ############
          - job: Build_macOS_x64
            displayName: macOS_x64
            timeoutInMinutes: 120
            pool:
              name: Azure Pipelines
              image: $(MacImage)
              os: macOS
            steps:
            - bash: |
                ./build.sh --arch x64 --restore --build --pack --ci --configuration $(_BuildConfig) /p:PackageRID=osx-x64 /p:AssetManifestOS=osx /p:PlatformName=x64 $(_InternalBuildArgs) $(_NonWindowsInternalPublishArg)
              displayName: Build
            - task: 1ES.PublishPipelineArtifact@1
              inputs:
                path: $(System.DefaultWorkingDirectory)/artifacts/packages
                artifact: Packages_macOS_x64
            - bash: |
                rm -rf binaryen node python llvm emscripten
              displayName: Remove temporary artifacts
            - powershell: $(CheckNuGetSizesScript)
              displayName: Check NuGet sizes

          - job: Build_macOS_arm64
            displayName: macOS_arm64
            timeoutInMinutes: 120
            pool:
              name: Azure Pipelines
              image: $(MacImage)
              os: macOS
            steps:
            - bash: |
                ./build.sh --arch arm64 --restore --build --pack --ci --configuration $(_BuildConfig) /p:PackageRID=osx-arm64 /p:AssetManifestOS=osx /p:PlatformName=arm64 $(_InternalBuildArgs) $(_NonWindowsInternalPublishArg)
              displayName: Build
            - task: 1ES.PublishPipelineArtifact@1
              inputs:
                path: $(System.DefaultWorkingDirectory)/artifacts/packages
                artifact: Packages_macOS_arm64
            - bash: |
                rm -rf binaryen node python llvm emscripten
              displayName: Remove temporary artifacts
            - powershell: $(CheckNuGetSizesScript)
              displayName: Check NuGet sizes
          
          ############ Linux BUILD ############
          - job: Build_linux_x64
            displayName: Linux_x64
            timeoutInMinutes: 120
            pool:
              name: $(DncEngInternalBuildPool)
              image: $(LinuxImage)
              os: linux
            steps:
            - bash: |
                ./build.sh --arch x64 --restore --build --pack --ci --configuration $(_BuildConfig) /p:PackageRID=linux-x64 /p:AssetManifestOS=linux /p:PlatformName=x64 $(_InternalBuildArgs) $(_NonWindowsInternalPublishArg)
              displayName: Build
            - task: 1ES.PublishPipelineArtifact@1
              inputs:
                path: $(System.DefaultWorkingDirectory)/artifacts/packages
                artifact: Packages_linux_x64
            - bash: |
                rm -rf binaryen node python llvm emscripten
              displayName: Remove temporary artifacts
            - powershell: $(CheckNuGetSizesScript)
              displayName: Check NuGet sizes
          
          - job: Build_linux_arm64
            displayName: Linux_arm64
            timeoutInMinutes: 120
            pool:
              name: $(DncEngInternalBuildPool)
              image: $(LinuxImage)
              os: linux
            steps:
            - bash: |
                ./build.sh --arch arm64 --restore --build --pack --ci --configuration $(_BuildConfig) /p:PackageRID=linux-arm64 /p:AssetManifestOS=linux /p:PlatformName=arm64 $(_InternalBuildArgs) $(_NonWindowsInternalPublishArg)
              displayName: Build
            - task: 1ES.PublishPipelineArtifact@1
              inputs:
                path: $(System.DefaultWorkingDirectory)/artifacts/packages
                artifact: Packages_linux_arm64
            - bash: |
                rm -rf binaryen node python llvm emscripten
              displayName: Remove temporary artifacts
            - powershell: $(CheckNuGetSizesScript)
              displayName: Check NuGet sizes

          - job: Build_linux_musl_x64
            displayName: Linux_musl_x64
            timeoutInMinutes: 120
            pool:
              name: $(DncEngInternalBuildPool)
              image: $(LinuxImage)
              os: linux
            steps:
            - bash: |
                ./build.sh --arch x64 --restore --build --pack --ci --configuration $(_BuildConfig) /p:PackageRID=linux-musl-x64 /p:AssetManifestOS=linux-musl /p:PlatformName=x64 $(_InternalBuildArgs) $(_NonWindowsInternalPublishArg)
              displayName: Build
            - task: 1ES.PublishPipelineArtifact@1
              inputs:
                path: $(System.DefaultWorkingDirectory)/artifacts/packages
                artifact: Packages_linux_musl_x64
            - bash: |
                rm -rf binaryen node python llvm emscripten
              displayName: Remove temporary artifacts
            - powershell: $(CheckNuGetSizesScript)
              displayName: Check NuGet sizes
          
          - job: Build_linux_musl_arm64
            displayName: Linux_musl_arm64
            timeoutInMinutes: 120
            pool:
              name: $(DncEngInternalBuildPool)
              image: $(LinuxImage)
              os: linux
            steps:
            - bash: |
                ./build.sh --arch arm64 --restore --build --pack --ci --configuration $(_BuildConfig) /p:PackageRID=linux-musl-arm64 /p:AssetManifestOS=linux-musl /p:PlatformName=arm64 $(_InternalBuildArgs) $(_NonWindowsInternalPublishArg)
              displayName: Build
            - task: 1ES.PublishPipelineArtifact@1
              inputs:
                path: $(System.DefaultWorkingDirectory)/artifacts/packages
                artifact: Packages_linux_musl_arm64
            - bash: |
                rm -rf binaryen node python llvm emscripten
              displayName: Remove temporary artifacts
            - powershell: $(CheckNuGetSizesScript)
              displayName: Check NuGet sizes
  
          ############ Windows BUILD ############
          - job: Build_win_x64
            displayName: Windows_x64
            timeoutInMinutes: 240
            pool:
              name: $(DncEngInternalBuildPool)
              image: $(WindowsImage)
              os: windows
            steps:
            - script: |
                .\build.cmd -arch x64 -restore -build -pack -sign -publish -ci -configuration $(_BuildConfig) /p:SkipWorkloads=true /p:PackageRID=win-x64 /p:AssetManifestOS=win /p:PlatformName=x64 /p:workloadPackagesPath=$(Build.SourcesDirectory)\artifacts\packages\$(_BuildConfig)\Shipping $(_InternalBuildArgs)
              displayName: Build
            - task: CopyFiles@2
              displayName: Prepare job-specific intermediate artifacts subdirectory
              inputs:
                SourceFolder: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)'
                Contents: |
                  Shipping/**/*
                  NonShipping/**/*
                TargetFolder: '$(Build.StagingDirectory)/IntermediateArtifacts/windows'
                CleanTargetFolder: false
                Overwrite: true
            - task: 1ES.PublishPipelineArtifact@1
              displayName: Publish intermediate artifacts
              inputs:
                targetPath: '$(Build.StagingDirectory)/IntermediateArtifacts'
                artifactName: Packages_win_x64
                artifactType: container
            - script: |
                rmdir /s /q binaryen node python llvm emscripten
              displayName: Remove temporary artifacts

          - job: Build_win_arm64
            displayName: Windows_arm64
            timeoutInMinutes: 240
            pool:
              name: $(DncEngInternalBuildPool)
              image: $(WindowsImage)
              os: windows
            steps:
            - script: |
                .\build.cmd -arch arm64 -restore -build -pack -sign -publish -ci -configuration $(_BuildConfig) /p:SkipWorkloads=true /p:PackageRID=win-arm64 /p:AssetManifestOS=win /p:PlatformName=arm64 /p:workloadPackagesPath=$(Build.SourcesDirectory)\artifacts\packages\$(_BuildConfig)\Shipping $(_InternalBuildArgs)
              displayName: Build
            - task: CopyFiles@2
              displayName: Prepare job-specific intermediate artifacts subdirectory
              inputs:
                SourceFolder: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)'
                Contents: |
                  Shipping/**/*
                  NonShipping/**/*
                TargetFolder: '$(Build.StagingDirectory)/IntermediateArtifacts/windows'
                CleanTargetFolder: false
                Overwrite: true
            - task: 1ES.PublishPipelineArtifact@1
              displayName: Publish intermediate artifacts
              inputs:
                targetPath: '$(Build.StagingDirectory)/IntermediateArtifacts'
                artifactName: Packages_win_arm64
                artifactType: container
            - script: |
                rmdir /s /q binaryen node python llvm emscripten
              displayName: Remove temporary artifacts

          # Only run in case of in-build signing
          - ${{ if and(ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['PostBuildSign'], 'true')) }}:
            ############ Signing BUILD ############
            - job: Sign_artifacts_win
              displayName: Sign Artifacts
              timeoutInMinutes: 120
              dependsOn:
              - Build_macOS_x64
              - Build_macOS_arm64
              - Build_linux_x64
              - Build_linux_arm64
              - Build_linux_musl_x64
              - Build_linux_musl_arm64
              pool:
                name: $(DncEngInternalBuildPool)
                image: $(WindowsImage)
                os: windows
              steps:
              - task: DownloadPipelineArtifact@2
                inputs:
                  artifact: Packages_macOS_x64
                  path: 'artifacts/packages'
              - task: DownloadPipelineArtifact@2
                inputs:
                  artifact: Packages_macOS_arm64
                  path: 'artifacts/packages'
              - task: DownloadPipelineArtifact@2
                inputs:
                  artifact: Packages_linux_x64
                  path: 'artifacts/packages'
              - task: DownloadPipelineArtifact@2
                inputs:
                  artifact: Packages_linux_arm64
                  path: 'artifacts/packages'
              - task: DownloadPipelineArtifact@2
                inputs:
                  artifact: Packages_linux_musl_x64
                  path: 'artifacts/packages'
              - task: DownloadPipelineArtifact@2
                inputs:
                  artifact: Packages_linux_musl_arm64
                  path: 'artifacts/packages'
              - powershell: |
                  ./eng/common/build.ps1 -ci -configuration $(_BuildConfig) -restore -sign -publish /p:AssetManifestFileName=unix-all.xml $(_InternalBuildArgs)

          ############ Workloads BUILD ############
          - job: Build_Workloads
            displayName: Workloads
            dependsOn:
            - Build_win_x64
            - Build_win_arm64
            - Build_linux_x64
            - Build_linux_arm64
            - Build_linux_musl_x64
            - Build_linux_musl_arm64
            - Build_macOS_x64
            - Build_macOS_arm64
            timeoutInMinutes: 120
            pool:
              name: $(DncEngInternalBuildPool)
              image: $(WindowsImage)
              os: windows
            steps:
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: Packages_win_x64
                path: 'artifacts/packages'
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: Packages_win_arm64
                path: 'artifacts/packages'
            - script: |
                .\build.cmd -arch x64 -restore -build -pack -ci -configuration $(_BuildConfig) -sign -publish /p:SkipBuild=true /p:PackageRID=win-x64 /p:AssetManifestFileName=win-workloads.xml /p:AssetManifestOS=win /p:PlatformName=x64 /p:workloadPackagesPath=$(Build.SourcesDirectory)\artifacts\packages\windows\Shipping $(_InternalBuildArgs)
              displayName: Build and Publish
            - task: CopyFiles@2
              displayName: Prepare job-specific intermediate artifacts subdirectory
              inputs:
                SourceFolder: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)'
                Contents: |
                  Shipping/**/*
                  NonShipping/**/*
                TargetFolder: '$(Build.StagingDirectory)/IntermediateArtifacts/windows'
                CleanTargetFolder: false
                Overwrite: true
            - task: 1ES.PublishPipelineArtifact@1
              displayName: Publish intermediate artifacts
              inputs:
                targetPath: '$(Build.StagingDirectory)/IntermediateArtifacts'
                artifactName: IntermediateArtifacts
                artifactType: container
            # Upload packages wrapping msis
            - task: CopyFiles@2
              displayName: Prepare job-specific intermediate artifacts subdirectory
              inputs:
                SourceFolder: '$(Build.SourcesDirectory)/artifacts/packages/windows'
                Contents: |
                  Shipping/**/*
                  NonShipping/**/*
                TargetFolder: '$(Build.StagingDirectory)/IntermediateArtifacts/workloads'
                CleanTargetFolder: true
            # Delete wixpdb files before they are uploaded to artifacts
            - task: DeleteFiles@1
              displayName: Delete wixpdb's
              inputs:
                SourceFolder: $(Build.SourcesDirectory)/artifacts/workloadPackages
                Contents: '*.wixpdb'
            # Upload artifacts to be used for generating VS components
            #- task: 1ES.PublishPipelineArtifact@1
            #  displayName: Publish workload artifacts
            #  inputs:
            #    targetPath: $(Build.SourcesDirectory)/artifacts/VSSetup/$(_BuildConfig)/Insertion/
            #    artifactName: 'Workloads'
            #  continueOnError: true
            - powershell: $(CheckNuGetSizesScript)
              displayName: Check NuGet sizes

    ############ POST BUILD ARCADE LOGIC ############
    - template: /eng/common/templates-official/post-build/post-build.yml@self
      parameters:
        enableSourceLinkValidation: false
        enableSigningValidation: true
        enableSymbolValidation: false
        enableNugetValidation: true
