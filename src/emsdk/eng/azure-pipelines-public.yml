trigger:
  batch: true
  branches:
    include:
    - main
    - release/*

pr:
  branches:
    include:
    - main
    - release/*

variables:
  - template: /eng/common-variables.yml
  - template: /eng/common/templates/variables/pool-providers.yml
  - name: CheckNuGetSizesScript
    value: >-
      $nupkgs_large=(Get-ChildItem artifacts/packages/$(_BuildConfig)/Shipping -recurse -include "*.nupkg" | Select-Object Name,Length | Where-Object { $_.Length -gt 250*1MB });
      if ($nupkgs_large.Length -gt 0) { Write-Error "NuGet size exceeds 250MiB: $($nupkgs_large | Format-Table | Out-String)"; exit 1 }

stages:
- stage: build
  displayName: Build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enablePublishBuildArtifacts: true
      enablePublishBuildAssets: true
      enablePublishUsingPipelines: true
      enableMicrobuild: true
      jobs:

      ############ macOS BUILD ############
      - job: Build_macOS
        displayName: macOS
        timeoutInMinutes: 120
        pool:
          vmImage: macOS-13
        strategy:
          matrix:
            x64:
              assetManifestOS: osx
              assetManifestPlatform: x64
              targetArchitecture: x64
            arm64:
              assetManifestOS: osx
              assetManifestPlatform: arm64
              targetArchitecture: arm64
        steps:
        - bash: ./build.sh
            --ci
            --prepareMachine
            --configuration $(_BuildConfig)
            --test
            --pack
            /p:TargetArchitecture=$(targetArchitecture)
            /p:TargetRid=$(assetManifestOS)-$(assetManifestPlatform)
            /p:AssetManifestOS=$(assetManifestOS)
            $(_InternalBuildArgs)
            $(_NonWindowsInternalPublishArg)
          displayName: Build
        - publish: artifacts/packages
          artifact: Packages_macOS_$(assetManifestPlatform)
        - bash: |
            rm -rf binaryen node python llvm emscripten
          displayName: Remove temporary artifacts
        - powershell: $(CheckNuGetSizesScript)
          displayName: Check NuGet sizes

      ############ Linux BUILD ############
      - job: Build_Linux
        displayName: Linux
        timeoutInMinutes: 120
        pool:
          name: $(DncEngPublicBuildPool)
          demands: ImageOverride -equals build.ubuntu.2204.amd64.open
        strategy:
          matrix:
            x64:
              assetManifestOS: linux
              assetManifestPlatform: x64
              targetArchitecture: x64
            arm64:
              assetManifestOS: linux
              assetManifestPlatform: arm64
              targetArchitecture: arm64
            x64_musl:
              assetManifestOS: linux-musl
              assetManifestPlatform: x64
              targetArchitecture: x64
            arm64_musl:
              assetManifestOS: linux-musl
              assetManifestPlatform: arm64
              targetArchitecture: arm64
        steps:
        - bash: ./build.sh
            --ci
            --prepareMachine
            --configuration $(_BuildConfig)
            --test
            --pack
            /p:TargetArchitecture=$(targetArchitecture)
            /p:TargetRid=$(assetManifestOS)-$(assetManifestPlatform)
            /p:AssetManifestOS=$(assetManifestOS)
            $(_InternalBuildArgs)
            $(_NonWindowsInternalPublishArg)
          displayName: Build
        - publish: artifacts/packages
          artifact: Packages_$(assetManifestOS)_$(assetManifestPlatform)
        - bash: |
            rm -rf binaryen node llvm emscripten
          displayName: Remove temporary artifacts
        - powershell: $(CheckNuGetSizesScript)
          displayName: Check NuGet sizes

      ############ Windows BUILD ############
      - job: Build_Windows
        displayName: Windows
        timeoutInMinutes: 120
        pool:
          name: $(DncEngPublicBuildPool)
          demands: ImageOverride -equals windows.vs2022.amd64.open
        strategy:
          matrix:
            x64:
              assetManifestOS: win
              assetManifestPlatform: x64
              targetArchitecture: x64
            arm64:
              assetManifestOS: win
              assetManifestPlatform: arm64
              targetArchitecture: arm64
        steps:
        - script: build.cmd
            -ci
            -prepareMachine
            -configuration $(_BuildConfig)
            -test
            -pack
            -sign
            -publish
            /p:TargetArchitecture=$(targetArchitecture)
            /p:SkipWorkloads=true
            /p:TargetRid=$(assetManifestOS)-$(assetManifestPlatform)
            /p:AssetManifestOS=$(assetManifestOS)
            /p:workloadPackagesPath=$(Build.SourcesDirectory)\artifacts\packages\$(_BuildConfig)\Shipping
            $(_InternalBuildArgs)
          displayName: Build and Publish
        - task: CopyFiles@2
          displayName: Prepare job-specific intermediate artifacts subdirectory
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)'
            Contents: |
              Shipping/**/*
              NonShipping/**/*
            TargetFolder: '$(Build.StagingDirectory)/IntermediateArtifacts/windows'
            CleanTargetFolder: false
            Overwrite: true
        - task: PublishBuildArtifacts@1
          displayName: Publish intermediate artifacts
          inputs:
            pathToPublish: '$(Build.StagingDirectory)/IntermediateArtifacts'
            artifactName: IntermediateArtifacts
            artifactType: container
        - script: |
            rmdir /s /q binaryen node python llvm emscripten
          displayName: Remove temporary artifacts

      - job: Build_Workloads
        displayName: Workloads
        dependsOn:
          - Build_Windows
        timeoutInMinutes: 120
        pool:
          name: $(DncEngPublicBuildPool)
          demands: ImageOverride -equals windows.vs2022.amd64.open
        strategy:
          matrix:
            x64:
              assetManifestOS: win
              assetManifestPlatform: x64
              targetArchitecture: x64
        steps:
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: IntermediateArtifacts
            path: 'artifacts/packages'
            patterns: |
              IntermediateArtifacts/windows/Shipping/*.*
        - script: build.cmd
            -ci
            -prepareMachine
            -configuration $(_BuildConfig)
            -test
            -pack
            -sign
            -publish
            /p:TargetArchitecture=$(targetArchitecture)
            /p:SkipBuild=true
            /p:TargetRid=$(assetManifestOS)-$(assetManifestPlatform)
            /p:AssetManifestFileName=win-workloads.xml
            /p:AssetManifestOS=$(assetManifestOS)
            /p:workloadPackagesPath=$(Build.SourcesDirectory)\artifacts\packages\windows\Shipping
            $(_InternalBuildArgs)
          displayName: Build and Publish
        - task: CopyFiles@2
          displayName: Prepare job-specific intermediate artifacts subdirectory
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)'
            Contents: |
              Shipping/**/*
              NonShipping/**/*
            TargetFolder: '$(Build.StagingDirectory)/IntermediateArtifacts/windows'
            CleanTargetFolder: false
            Overwrite: true
        - task: PublishBuildArtifacts@1
          displayName: Publish intermediate artifacts
          inputs:
            pathToPublish: '$(Build.StagingDirectory)/IntermediateArtifacts'
            artifactName: IntermediateArtifacts
            artifactType: container
        # Upload packages wrapping msis
        - task: CopyFiles@2
          displayName: Prepare job-specific intermediate artifacts subdirectory
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/artifacts/packages/windows'
            Contents: |
              Shipping/**/*
              NonShipping/**/*
            TargetFolder: '$(Build.StagingDirectory)/IntermediateArtifacts/workloads'
            CleanTargetFolder: true
        # Delete wixpdb files before they are uploaded to artifacts
        - task: DeleteFiles@1
          displayName: Delete wixpdb's
          inputs:
            SourceFolder: $(Build.SourcesDirectory)/artifacts/workloadPackages
            Contents: '*.wixpdb'
        # Upload artifacts to be used for generating VS components
        - task: PublishPipelineArtifact@1
          displayName: Publish workload artifacts
          inputs:
            targetPath: $(Build.SourcesDirectory)/artifacts/VSSetup/$(_BuildConfig)/Insertion/
            artifactName: 'Workloads'
          continueOnError: true
        - powershell: $(CheckNuGetSizesScript)
          displayName: Check NuGet sizes
