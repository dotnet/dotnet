steps:
- task: DownloadPipelineArtifact@2
  displayName: "Download NuGet.CommandLine.Test artifacts"
  inputs:
    artifactName: "NuGet.CommandLine.Test"
    downloadPath: "$(Build.Repository.LocalPath)/artifacts/NuGet.CommandLine.Test"
  condition: "and(succeeded(), eq(variables['TestRunDisplayName'], 'Mono Tests'))"

- task: ShellScript@2
  displayName: "Run $(TestRunDisplayName) (continue on error)"
  continueOnError: "true"
  inputs:
    scriptPath: "scripts/funcTests/runFuncTests.sh"
    args: $(TestRunCommandLineArguments)
    disableAutoCwd: "true"
    cwd: "$(Build.Repository.LocalPath)"
  condition: "and(succeeded(), eq(variables['IsOfficialBuild'], 'true'))"

- task: ShellScript@2
  displayName: "Run $(TestRunDisplayName) (stop on error)"
  continueOnError: "false"
  inputs:
    scriptPath: "scripts/funcTests/runFuncTests.sh"
    args: $(TestRunCommandLineArguments)
    disableAutoCwd: "true"
    cwd: "$(Build.Repository.LocalPath)"
  condition: "and(succeeded(), not(eq(variables['IsOfficialBuild'], 'true')))"

- task: PublishTestResults@2
  displayName: "Publish Test Results"
  inputs:
    testRunner: "VSTest"
    testResultsFiles: "*.trx"
    searchFolder: "$(Build.Repository.LocalPath)/build/TestResults"
    testRunTitle: "NuGet.Client $(TestRunDisplayName) On Mac"
  condition: "always()"

