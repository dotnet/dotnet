<Project Sdk="Microsoft.Build.NoTargets">

  <PropertyGroup>
    <TargetFramework>$(NetCurrent)</TargetFramework>
  </PropertyGroup>

  <Target Name="BuildNative"
          Condition="'$(TargetOS)' == 'windows'"
          AfterTargets="Build"
          DependsOnTargets="
            GetProductVersions;
            GenerateNativeVersionFile;
            BuildNativeProjects;
            CopyNativePDBsToSymStore" />

  <Target Name="GetLatestCommitHash"
          Condition="'$(LatestCommit)' == ''">
    <!-- Get the latest commit hash -->
    <Exec Command="git rev-parse HEAD 2>&amp;1" StandardOutputImportance="Low" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="LatestCommit" />
      <Output TaskParameter="ExitCode" PropertyName="LatestCommitExitCode" />
    </Exec>
    <!-- We shouldn't fail the build if we can't retreive the commit hash, so in this case just set it to N/A -->
    <PropertyGroup Condition="'$(LatestCommitExitCode)'!='0'">
      <LatestCommit>N/A</LatestCommit>
    </PropertyGroup>
  </Target>

  <Target Name="BuildNativeProjects"
          DependsOnTargets="GetLatestCommitHash">
    <MSBuild
      Projects="$(MSBuildProjectFullPath)"
      Properties="
        GenerateNativeVersionInfo=true;
        AssemblyName=%(NativeFiles.FileDescription);
        NativeVersionFile=$(IntermediateOutputRootPath)nativeResourceFiles\%(NativeFiles.Identity)\version_info.h"
      Targets="GenerateNativeVersionFile"
      Condition="
        '$(IncrementalNativeBuild)' != 'true' or
        !Exists('$(IntermediateOutputRootPath)nativeResourceFiles\%(NativeFiles.Identity)\version_info.h')"/>

    <PropertyGroup>
      <AppHostLibDir>$(NuGetPackageRoot)microsoft.netcore.app.host.win-$(TargetArchitecture)\$(BundledNETCoreAppPackageVersion)\runtimes\win-$(TargetArchitecture)\native</AppHostLibDir>
      <BuildArgs>$(Configuration) $(TargetArchitecture) nativever $(NativeVersion) netcorepkgver $(BundledNETCoreAppPackageVersion) commit $(LatestCommit) rid $(TargetRid)</BuildArgs>
      <BuildArgs Condition="'$(PortableBuild)' == 'true'">$(BuildArgs) portable</BuildArgs>
      <BuildArgs Condition="'$(IncrementalNativeBuild)' == 'true'">$(BuildArgs) incremental-native-build</BuildArgs>
      <BuildArgs>$(BuildArgs) dotnetInstallDir "$(DOTNET_INSTALL_DIR)" rootdir $(RepoRoot)</BuildArgs>
      <BuildArgs>$(BuildArgs) appHostLibDir "$(AppHostLibDir)"</BuildArgs>
    </PropertyGroup>

    <!--
      Run script that invokes Cmake to create VS files, and then calls msbuild to compile them. Use
      IgnoreStandardErrorWarningFormat because Arcade sets WarnAsError and there's an existing
      warning in the native build.
    -->
    <Message Text="$(MSBuildProjectDirectory)\build.cmd $(BuildArgs)" Importance="High"/>
    <Exec Command="$(MSBuildProjectDirectory)\build.cmd $(BuildArgs)" IgnoreStandardErrorWarningFormat="true"/>
  </Target>

  <Target Name="PrependWindowsHeaderIncludeToVersionHeaderFile"
          AfterTargets="GenerateNativeVersionFile">
    <PropertyGroup>
      <IncludeStatementLine>#include &lt;Windows.h&gt;</IncludeStatementLine>
      <NativeVersionFileContents>$([System.IO.File]::ReadAllText('$(NativeVersionFile)'))</NativeVersionFileContents>
    </PropertyGroup>

    <WriteLinesToFile
      File="$(NativeVersionFile)"
      Lines="$(IncludeStatementLine);$(NativeVersionFileContents)"
      Overwrite="true" />
  </Target>

  <!--
    Copy native PDBs to $(ArtifactsSymStoreDirectory) for publishing to symbols server.
    We need to this because regular DeployToSymStore target doesn't run unless the project
    is managed and uses default Build target.
  -->
  <Target Name="CopyNativePDBsToSymStore"
          Condition="'$(ContinuousIntegrationBuild)' == 'true'">
    <ItemGroup>
      <NativePDB Include="$(BaseOutputRootPath)\**\*.pdb"/>
    </ItemGroup>

    <PropertyGroup>
      <ArtifactsSymStoreRidDirectory>$(ArtifactsSymStoreDirectory)$(TargetRid)</ArtifactsSymStoreRidDirectory>
    </PropertyGroup>

    <MakeDir Directories="$(ArtifactsSymStoreRidDirectory)"/>

    <Copy SourceFiles="@(NativePDB)"
          DestinationFiles="@(NativePDB->'$(ArtifactsSymStoreRidDirectory)\%(RecursiveDir)%(Filename)%(Extension)')"
          UseHardlinksIfPossible="true"/>
  </Target>

</Project>
