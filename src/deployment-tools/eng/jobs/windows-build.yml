parameters:
  additionalMSBuildArguments: ''
  displayName: ''
  publishRidAgnosticPackages: false
  targetArchitecture: null
  timeoutInMinutes: 120
  codeql: false
jobs:
- job: ${{ parameters.name }}
  displayName: ${{ parameters.displayName }}
  timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
  strategy:
    matrix:
      release:
        _BuildConfig: Release
      ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
        debug:
          _BuildConfig: Debug
  workspace:
    clean: all
  variables:
    CommonMSBuildArgs: >-
      -c $(_BuildConfig) /p:TargetArchitecture=${{ parameters.targetArchitecture }} /p:DotNetSignType=$(_SignType)
    ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      InternalMSBuildArgs: >-
        /p:OfficialBuildId=$(Build.BuildNumber) /p:DotNetPublishUsingPipelines=true /p:Test=false
    ${{ else }}:
      InternalMSBuildArgs: ''
    Codeql.Enabled: ${{ parameters.codeql }}
  templateContext:
    outputs:
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), ne(variables['DisableVSPublish'], 'true'), eq(variables['_BuildConfig'], 'Release')) }}:
      - output: nuget
        displayName: 'Push Visual Studio NuPkgs'
        condition: succeeded()
        packageParentPath: '$(Build.ArtifactStagingDirectory)'
        packagesToPush: $(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)/*/VS.Redist.Common.NETCoreCheck.*.nupkg
        nuGetFeedType: external
        publishFeedCredentials: 'DevDiv - VS package feed'
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), eq(variables['_BuildConfig'], 'Release'), eq(parameters.targetArchitecture, 'x64')) }}:
      - output: nuget
        displayName: 'Push Visual Studio NuPkgs'
        condition: succeeded()
        packageParentPath: '$(Build.ArtifactStagingDirectory)'
        packagesToPush: $(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)/*/VS.Redist.Common.NetCore.Launcher.*.nupkg
        nuGetFeedType: external
        publishFeedCredentials: 'DevDiv - VS package feed'
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), eq(variables['_BuildConfig'], 'Release'), eq(variables['StagingArtifactsFolderExist'], True)) }}:
      - output: pipelineArtifact
        displayName: 'Publish Artifacts'
        condition: and(succeeded(), eq(variables._BuildConfig, 'Release'), eq(variables['StagingArtifactsFolderExist'], True))
        targetPath: '$(Build.StagingDirectory)/Artifacts'
        artifactName: IntermediateUnsignedArtifacts
        artifactType: container
    - output: pipelineArtifact
      displayName: 'Publish BuildLogs'
      condition: succeededOrFailed()
      targetPath: '$(Build.StagingDirectory)/BuildLogs'
      artifactName: Logs-${{ parameters.name }}-$(_BuildConfig)
  steps:
  - powershell: Remove-Item -Recurse -ErrorAction Ignore "$env:LocalAppData\NuGet\v3-cache"
    displayName: Clear NuGet http cache (if exists)
  - ${{ if ne(variables['System.TeamProject'], 'public') }}:
    - task: PowerShell@2
      displayName: Setup Private Feeds Credentials
      condition: eq(variables['Agent.OS'], 'Windows_NT')
      inputs:
        filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1
        arguments: -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
      env:
        Token: $(dn-bot-dnceng-artifact-feeds-rw)
    - task: NuGetAuthenticate@1
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
    - template: /eng/common/core-templates/steps/install-microbuild.yml
      parameters:
        enableMicrobuild: true
        microbuildUseESRP: true
        continueOnError: false
  - script: >-
      eng\common\cibuild.cmd $(CommonMSBuildArgs) $(InternalMSBuildArgs)
    displayName: Build
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
    - template: /eng/common/templates-official/steps/generate-sbom.yml@self
      parameters:
        name: Generate_SBOM_${{ parameters.name }}
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), ne(variables['DisableVSPublish'], 'true'), eq(variables['_BuildConfig'], 'Release')) }}:
    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet.exe'
    - ${{ if eq(parameters.targetArchitecture, 'x64') }}: []
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
    - powershell: |
        $folderExists = Test-Path -Path "$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)"
        Write-Output "##vso[task.setvariable variable=ArtifactsPackagesFolderExists]$folderExists"
      displayName: Detect Packages subdirectory
    - task: CopyFiles@2
      displayName: Prepare job-specific Artifacts subdirectory
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)'
        Contents: |
          Shipping/**/*
          NonShipping/**/*
        TargetFolder: '$(Build.StagingDirectory)/Artifacts/${{ parameters.name }}'
        CleanTargetFolder: true
      condition: and(succeeded(), eq(variables._BuildConfig, 'Release'), eq(variables['ArtifactsPackagesFolderExists'], True))
    - powershell: |
        $folderExists = Test-Path -Path "$(Build.StagingDirectory)/Artifacts"
        Write-Output "##vso[task.setvariable variable=StagingArtifactsFolderExist]$folderExists"
      displayName: Detect Staged Artifacts subdirectory
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
    - task: CopyFiles@2
      displayName: Prepare job-specific PdbArtifacts subdirectory
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/artifacts/SymStore/$(_BuildConfig)'
        Contents: |
          **/*
        TargetFolder: '$(Build.StagingDirectory)/PdbArtifacts/${{ parameters.name }}'
        CleanTargetFolder: true
      condition: and(succeeded(), eq(variables._BuildConfig, 'Release'))
  - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
    - task: PublishTestResults@2
      displayName: Publish Test Results
      inputs:
        testResultsFormat: 'xUnit'
        testResultsFiles: '*.xml'
        searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
        mergeTestResults: true
        testRunTitle: ${{ parameters.name }}-$(_BuildConfig)
      continueOnError: true
      condition: always()
  - task: CopyFiles@2
    displayName: Prepare BuildLogs staging directory
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: |
        **/*.log
        **/*.binlog
      TargetFolder: '$(Build.StagingDirectory)/BuildLogs'
      CleanTargetFolder: true
    continueOnError: true
    condition: succeededOrFailed()