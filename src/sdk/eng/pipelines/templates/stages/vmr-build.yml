### This stage builds https://github.com/dotnet/dotnet with varying parameters
### If run in a PR, new changes are applied to a local copy of the VMR, then it is built and tested

parameters:
# Branch of the VMR to use (to push to for internal builds)
- name: vmrBranch
  type: string
  default: $(Build.SourceBranch)

# Scope of jobs which are executed
- name: scope
  type: string
  values:
  # run 1 leg for smoke tests
  - ultralite
  # run several legs e.g. win/linux/mac for basic testing
  - lite
  # run everything
  - full

# True when build is running from dotnet/dotnet directly
- name: isBuiltFromVmr
  type: boolean
  default: false

# True when building the VMR in source-only mode
- name: isSourceOnlyBuild
  type: boolean
  default: false

# These are not expected to be passed it but rather just object variables reused below
- name: pool_Linux
  type: object
  default:
    name: $(defaultPoolName)
    image: $(poolImage_Linux)
    demands: ImageOverride -equals $(poolImage_Linux)
    os: linux

- name: pool_Windows
  type: object
  default:
    name: $(defaultPoolName)
    image: $(poolImage_Windows)
    demands: ImageOverride -equals $(poolImage_Windows)
    os: windows

- name: pool_LinuxArm64
  type: object
  default:
    name: $(poolName_LinuxArm64)
    image: $(poolImage_LinuxArm64)
    demands: ImageOverride -equals $(poolImage_LinuxArm64)
    hostArchitecture: Arm64
    os: linux

- name: pool_Mac
  type: object
  default:
    name: Azure Pipelines
    vmImage: $(poolImage_Mac)
    os: macOS


- name: pool_Linux_Shortstack
  type: object
  default:
    name: $(shortStackPoolName)
    image: $(poolImage_Linux)
    demands: ImageOverride -equals $(poolImage_Linux)
    os: linux

#### VERTICAL BUILD ####
stages:

- ${{ if not(parameters.isSourceOnlyBuild) }}:
  - stage: VMR_Vertical_Build
    displayName: VMR Vertical Build
    dependsOn: []
    variables:
    - template: ../variables/vmr-build.yml
      parameters:
        vmrBranch: ${{ parameters.vmrBranch }}
    jobs:
  
    - template: ../jobs/vmr-build.yml
      parameters:
        buildName: AzureLinux_x64_Cross_Mono1
        isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
        vmrBranch: ${{ variables.VmrBranch }}
        architecture: x64
        pool: ${{ parameters.pool_Linux }}
        container: ${{ variables.azurelinuxX64CrossContainer }}
        crossRootFs: '/crossrootfs/x64'
        useMonoRuntime: true
        targetOS: linux
        targetArchitecture: x64
  
    - template: ../jobs/vmr-build.yml
      parameters:
        buildName: AzureLinux_x64_Cross_Mono2
        isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
        vmrBranch: ${{ variables.VmrBranch }}
        architecture: x64
        pool: ${{ parameters.pool_Linux }}
        container: ${{ variables.azurelinuxX64CrossContainer }}
        crossRootFs: '/crossrootfs/x64'
        useMonoRuntime: true
        targetOS: linux
        targetArchitecture: x64
  
    - template: ../jobs/vmr-build.yml
      parameters:
        buildName: AzureLinux_x64_Cross_Mono3
        isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
        vmrBranch: ${{ variables.VmrBranch }}
        architecture: x64
        pool: ${{ parameters.pool_Linux }}
        container: ${{ variables.azurelinuxX64CrossContainer }}
        crossRootFs: '/crossrootfs/x64'
        useMonoRuntime: true
        targetOS: linux
        targetArchitecture: x64
  
    - template: ../jobs/vmr-build.yml
      parameters:
        buildName: AzureLinux_x64_Cross_Mono4
        isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
        vmrBranch: ${{ variables.VmrBranch }}
        architecture: x64
        pool: ${{ parameters.pool_Linux }}
        container: ${{ variables.azurelinuxX64CrossContainer }}
        crossRootFs: '/crossrootfs/x64'
        useMonoRuntime: true
        targetOS: linux
        targetArchitecture: x64
  
    - template: ../jobs/vmr-build.yml
      parameters:
        buildName: AzureLinux_x64_Cross_Mono5
        isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
        vmrBranch: ${{ variables.VmrBranch }}
        architecture: x64
        pool: ${{ parameters.pool_Linux }}
        container: ${{ variables.azurelinuxX64CrossContainer }}
        crossRootFs: '/crossrootfs/x64'
        useMonoRuntime: true
        targetOS: linux
        targetArchitecture: x64
  
    - template: ../jobs/vmr-build.yml
      parameters:
        buildName: AzureLinux_x64_Cross_Mono6
        isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
        vmrBranch: ${{ variables.VmrBranch }}
        architecture: x64
        pool: ${{ parameters.pool_Linux }}
        container: ${{ variables.azurelinuxX64CrossContainer }}
        crossRootFs: '/crossrootfs/x64'
        useMonoRuntime: true
        targetOS: linux
        targetArchitecture: x64
