
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.4.1.0
//   File : Envelope_types.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------


// suppress "Missing XML comment for publicly visible type or member"
#pragma warning disable 1591


#region ReSharper warnings
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable InconsistentNaming
// ReSharper disable CheckNamespace
// ReSharper disable UnusedParameter.Local
// ReSharper disable RedundantUsingDirective
#endregion

namespace Microsoft.ApplicationInsights.Extensibility.Implementation.External
{
    using System.Collections.Concurrent;
    using System.Collections.Generic;

    
    
    [System.CodeDom.Compiler.GeneratedCode("gbc", "0.4.1.0")]
    internal partial class Envelope
    {
        
        
        
        public int ver { get; set; }

        
        
        
        
        public string name { get; set; }

        
        
        
        
        
        
        
        
        
        public string time { get; set; }

        
        
        
        public double sampleRate { get; set; }

        
        
        
        
        public string seq { get; set; }

        
        
        
        
        public string iKey { get; set; }

        
        
        
        public long flags { get; set; }

        
        
        
        
        public IDictionary<string, string> tags { get; set; }

        
        
        
        public Base data { get; set; }

        public Envelope()
            : this("AI.Envelope", "Envelope")
        {}

        protected Envelope(string fullName, string name)
        {
            ver = 1;
            this.name = "";
            time = "";
            sampleRate = 100.0;
            seq = "";
            iKey = "";
            tags = new ConcurrentDictionary<string, string>();
            
        }
    }
} // AI
