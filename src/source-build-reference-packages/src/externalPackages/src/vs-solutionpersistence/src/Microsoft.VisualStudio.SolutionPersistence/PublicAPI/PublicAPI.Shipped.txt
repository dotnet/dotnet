#nullable enable
abstract Microsoft.VisualStudio.SolutionPersistence.Model.SolutionItemModel.ActualDisplayName.get -> string!
abstract Microsoft.VisualStudio.SolutionPersistence.Model.SolutionItemModel.TypeId.get -> System.Guid
Microsoft.VisualStudio.SolutionPersistence.ISolutionSerializer
Microsoft.VisualStudio.SolutionPersistence.ISolutionSerializer.CreateModelExtension() -> Microsoft.VisualStudio.SolutionPersistence.Model.ISerializerModelExtension!
Microsoft.VisualStudio.SolutionPersistence.ISolutionSerializer.IsSupported(string! moniker) -> bool
Microsoft.VisualStudio.SolutionPersistence.ISolutionSerializer.Name.get -> string!
Microsoft.VisualStudio.SolutionPersistence.ISolutionSerializer.OpenAsync(string! moniker, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel!>!
Microsoft.VisualStudio.SolutionPersistence.ISolutionSerializer.SaveAsync(string! moniker, Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel! model, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.VisualStudio.SolutionPersistence.ISolutionSerializer<TSettings>
Microsoft.VisualStudio.SolutionPersistence.ISolutionSerializer<TSettings>.CreateModelExtension(TSettings settings) -> Microsoft.VisualStudio.SolutionPersistence.Model.ISerializerModelExtension!
Microsoft.VisualStudio.SolutionPersistence.ISolutionSingleFileSerializer<TSettings>
Microsoft.VisualStudio.SolutionPersistence.ISolutionSingleFileSerializer<TSettings>.DefaultFileExtension.get -> string!
Microsoft.VisualStudio.SolutionPersistence.ISolutionSingleFileSerializer<TSettings>.OpenAsync(System.IO.Stream! stream, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel!>!
Microsoft.VisualStudio.SolutionPersistence.ISolutionSingleFileSerializer<TSettings>.SaveAsync(System.IO.Stream! stream, Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel! model, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Microsoft.VisualStudio.SolutionPersistence.Model.BuildDimension
Microsoft.VisualStudio.SolutionPersistence.Model.BuildDimension.Build = 2 -> Microsoft.VisualStudio.SolutionPersistence.Model.BuildDimension
Microsoft.VisualStudio.SolutionPersistence.Model.BuildDimension.BuildType = 0 -> Microsoft.VisualStudio.SolutionPersistence.Model.BuildDimension
Microsoft.VisualStudio.SolutionPersistence.Model.BuildDimension.Deploy = 3 -> Microsoft.VisualStudio.SolutionPersistence.Model.BuildDimension
Microsoft.VisualStudio.SolutionPersistence.Model.BuildDimension.Platform = 1 -> Microsoft.VisualStudio.SolutionPersistence.Model.BuildDimension
Microsoft.VisualStudio.SolutionPersistence.Model.ConfigurationRule
Microsoft.VisualStudio.SolutionPersistence.Model.ConfigurationRule.ConfigurationRule() -> void
Microsoft.VisualStudio.SolutionPersistence.Model.ConfigurationRule.ConfigurationRule(Microsoft.VisualStudio.SolutionPersistence.Model.BuildDimension dimension, string! solutionBuildType, string! solutionPlatform, string! projectValue) -> void
Microsoft.VisualStudio.SolutionPersistence.Model.ISerializerModelExtension
Microsoft.VisualStudio.SolutionPersistence.Model.ISerializerModelExtension.Serializer.get -> Microsoft.VisualStudio.SolutionPersistence.ISolutionSerializer!
Microsoft.VisualStudio.SolutionPersistence.Model.ISerializerModelExtension.Tarnished.get -> bool
Microsoft.VisualStudio.SolutionPersistence.Model.ISerializerModelExtension<TSettings>
Microsoft.VisualStudio.SolutionPersistence.Model.ISerializerModelExtension<TSettings>.Settings.get -> TSettings
Microsoft.VisualStudio.SolutionPersistence.Model.ProjectType
Microsoft.VisualStudio.SolutionPersistence.Model.ProjectType.BasedOn.get -> string?
Microsoft.VisualStudio.SolutionPersistence.Model.ProjectType.BasedOn.init -> void
Microsoft.VisualStudio.SolutionPersistence.Model.ProjectType.ConfigurationRules.get -> System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.SolutionPersistence.Model.ConfigurationRule>!
Microsoft.VisualStudio.SolutionPersistence.Model.ProjectType.Extension.get -> string?
Microsoft.VisualStudio.SolutionPersistence.Model.ProjectType.Extension.init -> void
Microsoft.VisualStudio.SolutionPersistence.Model.ProjectType.Name.get -> string?
Microsoft.VisualStudio.SolutionPersistence.Model.ProjectType.Name.init -> void
Microsoft.VisualStudio.SolutionPersistence.Model.ProjectType.ProjectType(System.Guid projectTypeId, System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.SolutionPersistence.Model.ConfigurationRule>! rules) -> void
Microsoft.VisualStudio.SolutionPersistence.Model.ProjectType.ProjectTypeId.get -> System.Guid
Microsoft.VisualStudio.SolutionPersistence.Model.PropertiesScope
Microsoft.VisualStudio.SolutionPersistence.Model.PropertiesScope.PostLoad = 1 -> Microsoft.VisualStudio.SolutionPersistence.Model.PropertiesScope
Microsoft.VisualStudio.SolutionPersistence.Model.PropertiesScope.PreLoad = 0 -> Microsoft.VisualStudio.SolutionPersistence.Model.PropertiesScope
Microsoft.VisualStudio.SolutionPersistence.Model.PropertyContainerModel
Microsoft.VisualStudio.SolutionPersistence.Model.PropertyContainerModel.AddProperties(string! id, Microsoft.VisualStudio.SolutionPersistence.Model.PropertiesScope scope = Microsoft.VisualStudio.SolutionPersistence.Model.PropertiesScope.PreLoad) -> Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag!
Microsoft.VisualStudio.SolutionPersistence.Model.PropertyContainerModel.FindProperties(string! id) -> Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag?
Microsoft.VisualStudio.SolutionPersistence.Model.PropertyContainerModel.Properties.get -> System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag!>!
Microsoft.VisualStudio.SolutionPersistence.Model.PropertyContainerModel.RemoveProperties(string! id) -> bool
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionException
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionException.Column.get -> int?
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionException.Column.init -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionException.File.get -> string?
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionException.File.init -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionException.Line.get -> int?
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionException.Line.init -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionException.SolutionException() -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionException.SolutionException(string! message) -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionException.SolutionException(string! message, System.Exception! inner) -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel.AddFile(string! file) -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel.Files.get -> System.Collections.Generic.IReadOnlyList<string!>?
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel.Name.get -> string!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel.Name.set -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel.Path.get -> string!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel.RemoveFile(string! file) -> bool
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionItemModel
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionItemModel.Id.get -> System.Guid
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionItemModel.Id.set -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionItemModel.IsDefaultId.get -> bool
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionItemModel.MoveToFolder(Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel? folder) -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionItemModel.Parent.get -> Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel?
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionItemModel.Solution.get -> Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.AddBuildType(string! buildType) -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.AddFolder(string! path) -> Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.AddPlatform(string! platform) -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.AddProject(string! filePath, string? projectTypeName = null, Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel? folder = null) -> Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.BuildTypes.get -> System.Collections.Generic.IReadOnlyList<string!>!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.Description.get -> string?
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.Description.set -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.DistillProjectConfigurations() -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.FindFolder(string! path) -> Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel?
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.FindItemById(System.Guid id) -> Microsoft.VisualStudio.SolutionPersistence.Model.SolutionItemModel?
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.FindProject(string! path) -> Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel?
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.Platforms.get -> System.Collections.Generic.IReadOnlyList<string!>!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.ProjectTypes.get -> System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.SolutionPersistence.Model.ProjectType!>!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.ProjectTypes.set -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.RemoveBuildType(string! buildType) -> bool
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.RemoveFolder(Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel! folder) -> bool
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.RemovePlatform(string! platform) -> bool
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.RemoveProject(Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel! project) -> bool
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.SerializerExtension.get -> Microsoft.VisualStudio.SolutionPersistence.Model.ISerializerModelExtension?
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.SerializerExtension.set -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.SolutionFolders.get -> System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel!>!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.SolutionItems.get -> System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.SolutionPersistence.Model.SolutionItemModel!>!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.SolutionModel() -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.SolutionModel(Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel! solutionModel) -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.SolutionProjects.get -> System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel!>!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.StringTable.get -> Microsoft.VisualStudio.SolutionPersistence.Model.StringTable!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.StringTable.set -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel.VisualStudioProperties.get -> Microsoft.VisualStudio.SolutionPersistence.Model.VisualStudioProperties
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel.AddDependency(Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel! dependency) -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel.AddProjectConfigurationRule(Microsoft.VisualStudio.SolutionPersistence.Model.ConfigurationRule rule) -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel.Dependencies.get -> System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel!>?
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel.DisplayName.get -> string?
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel.DisplayName.set -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel.Extension.get -> string!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel.FilePath.get -> string!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel.FilePath.set -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel.GetProjectConfiguration(string! solutionBuildType, string! solutionPlatform) -> (string? BuildType, string? Platform, bool Build, bool Deploy)
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel.ProjectConfigurationRules.get -> System.Collections.Generic.IReadOnlyList<Microsoft.VisualStudio.SolutionPersistence.Model.ConfigurationRule>?
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel.ProjectConfigurationRules.set -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel.RemoveDependency(Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel! dependency) -> bool
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel.Type.get -> string!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel.Type.set -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag.Add(string! name, string! value) -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag.AddRange(System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<string!, string!>>! properties) -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag.ContainsKey(string! key) -> bool
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag.Count.get -> int
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string!, string!>>!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag.Id.get -> string!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag.Keys.get -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag.PropertyNames.get -> System.Collections.Generic.IReadOnlyList<string!>!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag.Remove(string! name) -> bool
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag.Scope.get -> Microsoft.VisualStudio.SolutionPersistence.Model.PropertiesScope
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag.SolutionPropertyBag(string! id, Microsoft.VisualStudio.SolutionPersistence.Model.PropertiesScope scope = Microsoft.VisualStudio.SolutionPersistence.Model.PropertiesScope.PreLoad) -> void
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag.this[string! key].get -> string!
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag.TryGetValue(string! key, out string! value) -> bool
Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag.Values.get -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.VisualStudio.SolutionPersistence.Model.StringTable
Microsoft.VisualStudio.SolutionPersistence.Model.StringTable.GetString(string? str) -> string?
Microsoft.VisualStudio.SolutionPersistence.Model.StringTable.GetString(System.ReadOnlySpan<char> str) -> string!
Microsoft.VisualStudio.SolutionPersistence.Model.StringTable.StringTable() -> void
Microsoft.VisualStudio.SolutionPersistence.Model.VisualStudioProperties
Microsoft.VisualStudio.SolutionPersistence.Model.VisualStudioProperties.HideSolutionNode.get -> bool?
Microsoft.VisualStudio.SolutionPersistence.Model.VisualStudioProperties.HideSolutionNode.set -> void
Microsoft.VisualStudio.SolutionPersistence.Model.VisualStudioProperties.MinimumVersion.get -> System.Version?
Microsoft.VisualStudio.SolutionPersistence.Model.VisualStudioProperties.MinimumVersion.set -> void
Microsoft.VisualStudio.SolutionPersistence.Model.VisualStudioProperties.OpenWith.get -> string?
Microsoft.VisualStudio.SolutionPersistence.Model.VisualStudioProperties.OpenWith.set -> void
Microsoft.VisualStudio.SolutionPersistence.Model.VisualStudioProperties.SolutionId.get -> System.Guid?
Microsoft.VisualStudio.SolutionPersistence.Model.VisualStudioProperties.SolutionId.set -> void
Microsoft.VisualStudio.SolutionPersistence.Model.VisualStudioProperties.Version.get -> System.Version?
Microsoft.VisualStudio.SolutionPersistence.Model.VisualStudioProperties.Version.set -> void
Microsoft.VisualStudio.SolutionPersistence.Model.VisualStudioProperties.VisualStudioProperties() -> void
Microsoft.VisualStudio.SolutionPersistence.Serializer.SlnV12.SlnV12Extensions
Microsoft.VisualStudio.SolutionPersistence.Serializer.SlnV12.SlnV12SerializerSettings
Microsoft.VisualStudio.SolutionPersistence.Serializer.SlnV12.SlnV12SerializerSettings.Encoding.get -> System.Text.Encoding?
Microsoft.VisualStudio.SolutionPersistence.Serializer.SlnV12.SlnV12SerializerSettings.Encoding.init -> void
Microsoft.VisualStudio.SolutionPersistence.Serializer.SlnV12.SlnV12SerializerSettings.SlnV12SerializerSettings() -> void
Microsoft.VisualStudio.SolutionPersistence.Serializer.SlnV12.SlnV12SerializerSettings.SlnV12SerializerSettings(Microsoft.VisualStudio.SolutionPersistence.Serializer.SlnV12.SlnV12SerializerSettings settings) -> void
Microsoft.VisualStudio.SolutionPersistence.Serializer.SolutionSerializers
Microsoft.VisualStudio.SolutionPersistence.Serializer.Xml.SlnxSerializerSettings
Microsoft.VisualStudio.SolutionPersistence.Serializer.Xml.SlnxSerializerSettings.IndentChars.get -> string?
Microsoft.VisualStudio.SolutionPersistence.Serializer.Xml.SlnxSerializerSettings.IndentChars.init -> void
Microsoft.VisualStudio.SolutionPersistence.Serializer.Xml.SlnxSerializerSettings.NewLine.get -> string?
Microsoft.VisualStudio.SolutionPersistence.Serializer.Xml.SlnxSerializerSettings.NewLine.init -> void
Microsoft.VisualStudio.SolutionPersistence.Serializer.Xml.SlnxSerializerSettings.PreserveWhitespace.get -> bool?
Microsoft.VisualStudio.SolutionPersistence.Serializer.Xml.SlnxSerializerSettings.PreserveWhitespace.init -> void
Microsoft.VisualStudio.SolutionPersistence.Serializer.Xml.SlnxSerializerSettings.SlnxSerializerSettings() -> void
Microsoft.VisualStudio.SolutionPersistence.Serializer.Xml.SlnxSerializerSettings.SlnxSerializerSettings(Microsoft.VisualStudio.SolutionPersistence.Serializer.Xml.SlnxSerializerSettings settings) -> void
Microsoft.VisualStudio.SolutionPersistence.Serializer.Xml.SlnxSerializerSettings.TrimVisualStudioProperties.get -> bool?
Microsoft.VisualStudio.SolutionPersistence.Serializer.Xml.SlnxSerializerSettings.TrimVisualStudioProperties.init -> void
override Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel.ActualDisplayName.get -> string!
override Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel.TypeId.get -> System.Guid
override Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel.ActualDisplayName.get -> string!
override Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel.TypeId.get -> System.Guid
readonly Microsoft.VisualStudio.SolutionPersistence.Model.ConfigurationRule.Dimension -> Microsoft.VisualStudio.SolutionPersistence.Model.BuildDimension
readonly Microsoft.VisualStudio.SolutionPersistence.Model.ConfigurationRule.ProjectValue -> string!
readonly Microsoft.VisualStudio.SolutionPersistence.Model.ConfigurationRule.SolutionBuildType -> string!
readonly Microsoft.VisualStudio.SolutionPersistence.Model.ConfigurationRule.SolutionPlatform -> string!
static Microsoft.VisualStudio.SolutionPersistence.Serializer.SlnV12.SlnV12Extensions.AddSlnProject(this Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel! solution, string! filePath, System.Guid projectTypeId, Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel? folder) -> Microsoft.VisualStudio.SolutionPersistence.Model.SolutionProjectModel!
static Microsoft.VisualStudio.SolutionPersistence.Serializer.SlnV12.SlnV12Extensions.AddSlnProperties(this Microsoft.VisualStudio.SolutionPersistence.Model.SolutionItemModel! solutionItem, Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag? properties) -> bool
static Microsoft.VisualStudio.SolutionPersistence.Serializer.SlnV12.SlnV12Extensions.AddSlnProperties(this Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel! solution, Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag? properties) -> bool
static Microsoft.VisualStudio.SolutionPersistence.Serializer.SlnV12.SlnV12Extensions.CreateSlnFolder(this Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel! solution, string! name) -> Microsoft.VisualStudio.SolutionPersistence.Model.SolutionFolderModel!
static Microsoft.VisualStudio.SolutionPersistence.Serializer.SlnV12.SlnV12Extensions.GetSlnProperties(this Microsoft.VisualStudio.SolutionPersistence.Model.SolutionItemModel! solutionItem) -> System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag!>!
static Microsoft.VisualStudio.SolutionPersistence.Serializer.SlnV12.SlnV12Extensions.GetSlnProperties(this Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel! solution) -> System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.SolutionPersistence.Model.SolutionPropertyBag!>!
static Microsoft.VisualStudio.SolutionPersistence.Serializer.SlnV12.SlnV12Extensions.SuspendProjectValidation(this Microsoft.VisualStudio.SolutionPersistence.Model.SolutionModel! solution) -> System.IDisposable!
static Microsoft.VisualStudio.SolutionPersistence.Serializer.SolutionSerializers.GetSerializerByMoniker(string! moniker) -> Microsoft.VisualStudio.SolutionPersistence.ISolutionSerializer?
static Microsoft.VisualStudio.SolutionPersistence.Serializer.SolutionSerializers.Serializers.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.VisualStudio.SolutionPersistence.ISolutionSerializer!>!
static Microsoft.VisualStudio.SolutionPersistence.Serializer.SolutionSerializers.SlnFileV12.get -> Microsoft.VisualStudio.SolutionPersistence.ISolutionSingleFileSerializer<Microsoft.VisualStudio.SolutionPersistence.Serializer.SlnV12.SlnV12SerializerSettings>!
static Microsoft.VisualStudio.SolutionPersistence.Serializer.SolutionSerializers.SlnXml.get -> Microsoft.VisualStudio.SolutionPersistence.ISolutionSingleFileSerializer<Microsoft.VisualStudio.SolutionPersistence.Serializer.Xml.SlnxSerializerSettings>!
