<Project Sdk="Microsoft.Build.NoTargets" InitialTargets="ValidateRestoreCsvContentProperties">

  <PropertyGroup>
    <TargetFramework>$(NetCurrent)</TargetFramework>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <PackageSourceGeneratorTaskAssembly>$(ArtifactsBinDir)PackageSourceGeneratorTask\$(Configuration)\$(NetCurrent)\PackageSourceGeneratorTask.dll</PackageSourceGeneratorTaskAssembly>
    <!-- The packages output directory. -->
    <PackagesTargetDirectory Condition="'$(PackageType)' != 'text'">$(RepoRoot)src\referencePackages\src\</PackagesTargetDirectory>
    <PackagesTargetDirectory Condition="'$(PackageType)' == 'text'">$(RepoRoot)src\textOnlyPackages\src\</PackagesTargetDirectory>
    <!-- The following target frameworks aren't buildable with the current SDK and as they don't contribute to the set of
         source build target verticals, can be safely excluded. -->
    <ExcludeTargetFrameworks>monoandroid*;monotouch*;net20;net35;net4*;netcore50;netcoreapp2.*;portable*;uap*;win8;win81;wp8;wpa81;xamarin*</ExcludeTargetFrameworks>
    <!-- The following target frameworks should be excluded even though they are supported by the current SDK because there is no need to have them.
         Only exclude them when target frameworks to include aren't provided. -->
    <ExcludeTargetFrameworks Condition="'$(IncludeTargetFrameworks)' == ''">$(ExcludeTargetFrameworks);netcoreapp3.1</ExcludeTargetFrameworks>
  </PropertyGroup>

  <PropertyGroup Condition="'$(PackageName)' != '' and '$(PackageVersion)' != ''">
    <!-- Restored package directory. -->
    <RestoredPackageDirectory>$([MSBuild]::NormalizeDirectory('$(NuGetPackageRoot)', '$(PackageName.ToLowerInvariant())', '$(PackageVersion)'))</RestoredPackageDirectory>
    <!-- Restored package nuspec file path. -->
    <RestoredPackageNuspec>$(RestoredPackageDirectory)$(PackageName.ToLowerInvariant()).nuspec</RestoredPackageNuspec>
    <!-- The reference package output directory without the package version. -->
    <BasePackageTargetDirectory>$([MSBuild]::NormalizeDirectory('$(PackagesTargetDirectory)', '$(PackageName.ToLowerInvariant())'))</BasePackageTargetDirectory>
    <!-- The reference package output directory including the package version. -->
    <PackageTargetDirectory>$([MSBuild]::NormalizeDirectory('$(BasePackageTargetDirectory)', '$(PackageVersion)'))</PackageTargetDirectory>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="PackageSourceGeneratorTask\PackageSourceGeneratorTask.csproj"
                      ReferenceOutputAssembly="false"
                      UndefineProperties="PackageType;PackageCSV;PackageName;PackageVersion;PackageTargetFrameworks" />
  </ItemGroup>

  <!-- Download the specified packages as part of the project's restore. -->
  <ItemGroup>
    <PackageDownload Include="$(PackageName)"
                     Version="[$(PackageVersion)]"
                     Condition="'$(PackageName)' != '' and '$(PackageVersion)' != ''" />
  </ItemGroup>

  <!-- Validate that the required properties are passed in. -->
  <Target Name="ValidateRestoreCsvContentProperties">
    <Error Text="The 'PackageName' and 'PackageVersion' or 'PackageCSV' properties must be set!"
           Condition="('$(PackageName)' == '' or '$(PackageVersion)' == '') and '$(PackageCSV)' == ''" />
  </Target>

  <!-- Parse the passed in CSV file into PackageInfo items with metadata.
       An inline task is used beccause the PackageSourceGeneratorTask isn't build until after CollectPackageDownloads. -->
  <UsingTask TaskName="ParsePackagesCsv" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <CsvPath ParameterType="System.String" Required="true" />
      <PackageInfo ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
      <GroupedPackageInfo ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.Collections.Generic" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        string[] lines = File.ReadAllLines(CsvPath);
        if (lines.Length == 0)
        {
            Log.LogError($"CsvPath '{CsvPath}' is empty.");
            return false;
        }

        string[][] csvParts = lines.Select(line =>
            {
                string[] parts = line.Split(',');

                if (parts.Length != 2 && parts.Length != 3)
                {
                    Log.LogError($"CsvPath '{CsvPath}' contains an invalid line: '{line}'.");
                    return null;
                }

                return parts;
            })
            .Where(item => item is not null)
            .ToArray()!;

        PackageInfo = csvParts.Select(parts => new TaskItem(parts[0], new Dictionary<string, string>
            {
                { "PackageName", parts[0] },
                { "PackageVersion", parts[1] },
                { "TargetFrameworks", parts.Length == 3 ? parts[2] : string.Empty }
            }))
            .ToArray();

        GroupedPackageInfo = csvParts.GroupBy(parts => parts[0])
            .Select(group => new TaskItem(group.Key, new Dictionary<string, string>
                {
                    { "PackageName", group.Key },
                    { "PackageVersions", group.Select(parts => $"[{parts[1]}]").Aggregate((working, next) => $"{working};{next}") }
                }))
            .ToArray();

        return !Log.HasLoggedErrors;
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="ParseCsv"
          Condition="'$(PackageCSV)' != ''"
          AfterTargets="ValidateRestoreCsvContentProperties">
    <ParsePackagesCsv CsvPath="$(PackageCSV)">
      <Output TaskParameter="PackageInfo" ItemName="PackageInfo" />
      <Output TaskParameter="GroupedPackageInfo" ItemName="GroupedPackageInfo" />
    </ParsePackagesCsv>

    <ItemGroup>
      <PackageDownload Include="@(GroupedPackageInfo->Metadata('PackageName'))"
              Version="%(PackageVersions)"
              Condition="'@(GroupedPackageInfo)' != ''" />
    </ItemGroup>
  </Target>

  <!-- The entry point target that runs when a CSV file is provided which invokes the
       'GeneratePackageSource' target for each package. -->
  <Target Name="GeneratePackagesSource"
          AfterTargets="Build"
          Condition="'@(PackageInfo)' != ''">
    <MSBuild Projects="$(MSBuildProjectFile)"
             Properties="PackageName=%(PackageInfo.PackageName);
                         PackageVersion=%(PackageInfo.PackageVersion);
                         PackageTargetFrameworks=%(PackageInfo.PackageTargetFrameworks)"
             RemoveProperties="PackageCSV"
             BuildInParallel="false" />
  </Target>

  <!-- The entry point target that runs per package. -->
  <Target Name="GeneratePackageSource"
          AfterTargets="Build"
          Condition="'$(PackageName)' != '' and '$(PackageVersion)' != ''"
          DependsOnTargets="BeginGeneratePackageSource;
                            GetPackageItems;
                            GenerateReferencePackageSource;
                            GenerateTextOnlyPackageSource;
                            GeneratePackageProject;
                            RewriteNuspec;
                            EndGeneratePackageSource;
                            InvokePackageDependencies" />

  <!-- Initialize the package source generation. -->
  <Target Name="BeginGeneratePackageSource">
    <PropertyGroup>
      <PackageTargetFrameworksMessage Condition="'$(PackageTargetFrameworks)' != ''">, TFMs: $(PackageTargetFrameworks)</PackageTargetFrameworksMessage>
    </PropertyGroup>

    <Message Text="%0D%0A$(MSBuildProjectName) -> Generating package source for $(PackageName) (v$(PackageVersion)$(PackageTargetFrameworksMessage))..."
             Importance="high" />

    <!-- Remove the target directory to support regenerate scenario in case existing files are removed.
         Preserve the prescribed customization files. -->
    <ItemGroup>
      <FilesToRemove Include="$(PackageTargetDirectory)**\*.*"
                     Exclude="$(PackageTargetDirectory)\$(CustomizationsPropsFile);$(PackageTargetDirectory)**\$(CustomizationsSourceFile)" />
    </ItemGroup>
    <Delete Files="@(FilesToRemove)" />
  </Target>

  <!-- Retrieve compile items, placeholder files, package dependencies and framework references with their target framework. -->
  <UsingTask TaskName="GetPackageItems" AssemblyFile="$(PackageSourceGeneratorTaskAssembly)" />
  <Target Name="GetPackageItems">
    <PropertyGroup>
      <PackageNupkgPath>$(RestoredPackageDirectory)$(PackageName.ToLowerInvariant()).$(PackageVersion).nupkg</PackageNupkgPath>
    </PropertyGroup>

    <GetPackageItems PackagePath="$(PackageNupkgPath)"
                     IncludeTargetFrameworks="$(PackageTargetFrameworks)"
                     ExcludeTargetFrameworks="$(ExcludeTargetFrameworks)">
      <Output TaskParameter="CompileItems" ItemName="PackageCompileItem" />
      <Output TaskParameter="PlaceholderFiles" ItemName="PackagePlaceholderFile" />
      <Output TaskParameter="PackageDependencies" ItemName="PackageDependency" />
      <Output TaskParameter="FrameworkReferences" ItemName="PackageFrameworkReference" />
      <Output TaskParameter="PackageId" PropertyName="RealPackageId" />
    </GetPackageItems>
  </Target>

  <!-- The entry point for generating reference package source. -->
  <Target Name="GenerateReferencePackageSource"
          Condition="'@(PackageCompileItem)' != '' and '$(PackageType)' != 'text'"
          DependsOnTargets="GenerateAndInvokeGenerateSourceProject;
                            CopyPlaceholderFiles" />

  <!-- Generate an intermediate multi-targeting wrapper project that retrieves the reference assemblies and invokes GenAPI. -->
  <Target Name="GenerateAndInvokeGenerateSourceProject"
          DependsOnTargets="GetPackageItems">
    <ItemGroup>
      <PackageCompileItemsTargetFramework Include="@(PackageCompileItem->Metadata('TargetFramework')->Distinct())" />
    </ItemGroup>

    <PropertyGroup>
      <ReferencePackageSourceGeneratorDirectory>$(MSBuildThisFileDirectory)</ReferencePackageSourceGeneratorDirectory>
      <PackageCompileItemsTargetFrameworks>@(PackageCompileItemsTargetFramework, ';')</PackageCompileItemsTargetFrameworks>

      <GenerateSourceProjectTemplate>GenerateSourceProjectTemplate.xml</GenerateSourceProjectTemplate>
      <GenerateSourceProjectBaseOutputPath>$([MSBuild]::NormalizeDirectory('$(BaseOutputPath)', '$(PackageName.ToLowerInvariant())', '$(PackageVersion)'))</GenerateSourceProjectBaseOutputPath>
      <GenerateSourceProjectBaseIntermediateOutputPath>$([MSBuild]::NormalizeDirectory('$(BaseIntermediateOutputPath)', '$(PackageName.ToLowerInvariant())', '$(PackageVersion)'))</GenerateSourceProjectBaseIntermediateOutputPath>
      <GenerateSourceProjectTargetPath>$(GenerateSourceProjectBaseOutputPath)$(PackageName.ToLowerInvariant()).$(PackageVersion).csproj</GenerateSourceProjectTargetPath>
    </PropertyGroup>

    <!-- Generate wrapper project that restores the dependent package and all its dependencies in order for
         GenAPI to run successfully. -->
    <WriteLinesToFile File="$(GenerateSourceProjectTargetPath)"
                      Lines="$([System.IO.File]::ReadAllText('$(GenerateSourceProjectTemplate)')
                               .Replace('$$BaseOutputPath$$', '$(GenerateSourceProjectBaseOutputPath)')
                               .Replace('$$BaseIntermediateOutputPath$$', '$(GenerateSourceProjectBaseIntermediateOutputPath)')
                               .Replace('$$ReferencePackageSourceGeneratorDirectory$$', '$(ReferencePackageSourceGeneratorDirectory)')
                               .Replace('$$TargetFrameworks$$', '$(PackageCompileItemsTargetFrameworks)')
                               .Replace('$$PackageTargetDirectory$$', '$(PackageTargetDirectory)')
                               .Replace('$$PackageName$$', '$(RealPackageId)')
                               .Replace('$$PackageVersion$$', '$(PackageVersion)'))"
                      Overwrite="true"
                      Condition="'$(PackageCompileItemsTargetFrameworks)' != ''" />

    <Message Text="$(MSBuildProjectName) -> $(GenerateSourceProjectTargetPath)"
             Importance="low"
             Condition="'$(PackageCompileItemsTargetFrameworks)' != ''" />

    <!-- Restore the generated wrapper project. -->
    <MSBuild Projects="$(GenerateSourceProjectTargetPath)"
             Properties="MSBuildRestoreSessionId=$([System.Guid]::NewGuid())"
             Targets="Restore"
             RemoveProperties="PackageCSV;PackageName;PackageVersion;PackageCompileItemsTargetFrameworks"
             Condition="'$(PackageCompileItemsTargetFrameworks)' != ''" />

    <!-- Build the generated wrapper project. -->
    <MSBuild Projects="$(GenerateSourceProjectTargetPath)"
             Targets="Build"
             RemoveProperties="PackageCSV;PackageName;PackageVersion;PackageCompileItemsTargetFrameworks"
             Condition="'$(PackageCompileItemsTargetFrameworks)' != ''" />
  </Target>

  <!-- Copy placeholder files (_._) -->
  <Target Name="CopyPlaceholderFiles"
          DependsOnTargets="GetPackageItems">
    <Copy SourceFiles="@(PackagePlaceholderFile->'$(RestoredPackageDirectory)%(Identity)')"
          DestinationFiles="@(PackagePlaceholderFile->'$(PackageTargetDirectory)%(Identity)')"
          SkipUnchangedFiles="true" />

    <Message Text="$(MSBuildProjectName) -> $([MSBuild]::NormalizePath('$(PackageTargetDirectory)', '%(PackagePlaceholderFile.Identity)'))"
             Importance="high"
             Condition="'@(PackagePlaceholderFile)' != ''" />
  </Target>

  <Target Name="GenerateTextOnlyPackageSource"
          DependsOnTargets="GetPackageItems"
          Condition="'$(PackageType)' == 'text'">
    <ItemGroup>
      <TextOnlyPackageContent Include="$(RestoredPackageDirectory)**/*"
                              Exclude="$(RestoredPackageDirectory)**/.nupkg.metadata;
                                       $(RestoredPackageDirectory)**/.signature.p7s;
                                       $(RestoredPackageDirectory)**/*.nupkg;
                                       $(RestoredPackageDirectory)**/*.nupkg.sha512;
                                       $(RestoredPackageNuspec)" />
    </ItemGroup>

    <Error Text="Package $(PackageName) was not restored!"
           Condition="'@(TextOnlyPackageContent)' == ''" />

    <!-- Verify that invalid assets are not considered as text-only package sources. -->
    <ItemGroup>
      <!-- ttf, woff, woff2, eot are permissible font-related content -->
      <AllowedTextOnlyExtensions Include="
        .-;
        ._;
        .bowerrc;
        .config;
        .cs;
        .cshtml;
        .csproj;
        .css;
        .db;
        .editorconfig;
        .env;
        .env.development;
        .eot;
        .fs;
        .fsproj;
        .gitignore;
        .gitkeep;
        .html;
        .ico;
        .js;
        .json;
        .map;
        .md;
        .nuspec;
        .otf;
        .png;
        .props;
        .proto;
        .razor;
        .resx;
        .rtf;
        .sln;
        .svg;
        .targets;
        .ts;
        .ttf;
        .tsx;
        .txt;
        .vb;
        .vbproj;
        .woff;
        .woff2;
        .xlf;
        .xml;
        browserslist;
        browserslistrc;
        LICENSE;" />
      <UnsupportedTextOnlyPackageContent Include="@(TextOnlyPackageContent)" />
      <UnsupportedTextOnlyPackageContent Remove="$(RestoredPackageDirectory)**\*$([System.String]::Copy('%(AllowedTextOnlyExtensions.Identity)').ToLowerInvariant())" />
      <UnsupportedTextOnlyPackageContent Remove="$(RestoredPackageDirectory)**\*$([System.String]::Copy('%(AllowedTextOnlyExtensions.Identity)').ToUpperInvariant())" />
    </ItemGroup>

    <Error Text="Unsupported content found in text-only packages: @(UnsupportedTextOnlyPackageContent)"
           Condition="'@(UnsupportedTextOnlyPackageContent)' != ''" />

    <Copy SourceFiles="@(TextOnlyPackageContent)"
          DestinationFiles="@(TextOnlyPackageContent->'$(PackageTargetDirectory)%(RecursiveDir)%(Filename)%(Extension)')"
          SkipUnchangedFiles="true" />

    <Message Text="$(MSBuildProjectName) -> $([MSBuild]::NormalizePath('$(PackageTargetDirectory)', '%(TextOnlyPackageContent.RecursiveDir)%(TextOnlyPackageContent.Filename)%(TextOnlyPackageContent.Extension)'))"
             Importance="high"
             Condition="'@(TextOnlyPackageContent)' != ''" />
  </Target>

  <!-- Generate the final reference package project and write it to the package target directory. -->
  <UsingTask TaskName="GenerateProject" AssemblyFile="$(PackageSourceGeneratorTaskAssembly)" />
  <Target Name="GeneratePackageProject"
          DependsOnTargets="GetPackageItems"
          Condition="'@(PackageCompileItem)' != '' or '$(PackageType)' == 'text'">
    <PropertyGroup>
      <PackageProjectTemplate>PackageProjectTemplate.xml</PackageProjectTemplate>
      <PackageProjectTargetPath>$(PackageTargetDirectory)$(RealPackageId).$(PackageVersion).csproj</PackageProjectTargetPath>
    </PropertyGroup>

    <GenerateProject PackageId="$(RealPackageId)"
                     ProjectTemplate="$(PackageProjectTemplate)"
                     TargetPath="$(PackageProjectTargetPath)"
                     CompileItems="@(PackageCompileItem)"
                     PackageDependencies="@(PackageDependency)"
                     FrameworkReferences="@(PackageFrameworkReference)" />

    <Message Text="$(MSBuildProjectName) -> $(PackageProjectTargetPath)"
             Importance="high" />
  </Target>

  <!-- Rewrite nuspec and copy to target directory. -->
  <UsingTask TaskName="RewriteNuspec" AssemblyFile="$(PackageSourceGeneratorTaskAssembly)" />
  <Target Name="RewriteNuspec"
          Condition="'@(PackageCompileItem)' != '' or '$(PackageType)' == 'text'">
    <PropertyGroup>
      <NuspecTargetPath>$(PackageTargetDirectory)$([System.IO.Path]::GetFileName('$(RestoredPackageNuspec)'))</NuspecTargetPath>
    </PropertyGroup>

    <RewriteNuspec NuspecPath="$(RestoredPackageNuspec)"
                   TargetPath="$(NuspecTargetPath)"
                   IncludeTargetFrameworks="$(PackageTargetFrameworks)"
                   ExcludeTargetFrameworks="$(ExcludeTargetFrameworks)"
                   RemoveIcon="true"
                   RemoveReadMe="true"
                   RemoveRuntimeSpecificDependencies="true" />

    <Message Text="$(MSBuildProjectName) -> $(NuspecTargetPath)"
             Importance="high" />
  </Target>

  <!-- Emit a log message that indicates the end of the reference package source generation. -->
  <Target Name="EndGeneratePackageSource"
          DependsOnTargets="BeginGeneratePackageSource">
    <PropertyGroup>
      <EndGeneratePackageSourceMessage Condition="'@(PackageCompileItem)' != '' or '$(PackageType)' == 'text'">Package source successfully generated for $(PackageName) (v$(PackageVersion)$(PackageTargetFrameworksMessage)).</EndGeneratePackageSourceMessage>
      <EndGeneratePackageSourceMessage Condition="'$(EndGeneratePackageSourceMessage)' == ''">Package source generation skipped for $(PackageName) (v$(PackageVersion)$(PackageTargetFrameworksMessage)) as it doesn't contain any compile items.</EndGeneratePackageSourceMessage>
    </PropertyGroup>

    <Message Text="$(MSBuildProjectName) -> $(EndGeneratePackageSourceMessage)"
             Importance="high" />
  </Target>

  <!-- Invoke this project for every package dependency which results in recursively walking the dependency tree. -->
  <Target Name="InvokePackageDependencies"
          DependsOnTargets="GetPackageItems"
          Condition="'$(ExcludePackageDependencies)' != 'true'">
    <!-- Targeting packages aren't visited to minimize the dependency graph. -->
    <ItemGroup>
      <TargetingPackage Include="NETStandard.Library" />
      <TargetingPackage Include="NETStandard.Library.Ref" />
      <TargetingPackage Include="Microsoft.NETCore.App" />
      <TargetingPackage Include="Microsoft.NETCore.App.Ref" />
      <TargetingPackage Include="Microsoft.AspNetCore.App" />
      <TargetingPackage Include="Microsoft.AspNetCore.App.Ref" />
      <TargetingPackage Include="Microsoft.WindowsDesktop.App.Ref" />
    </ItemGroup>
    
    <!-- External packages aren't visited as they shouldn't be added to SBRP. --> 
    <ItemGroup>
      <ExternalPackage Include="Newtonsoft.Json" />
    </ItemGroup>

    <ItemGroup>
      <FilteredPackageDependency Include="@(PackageDependency)"
                                 Exclude="@(TargetingPackage);
                                          @(ExternalPackage)" />
    </ItemGroup>

    <MSBuild Projects="$(MSBuildThisFileFullPath)"
             Targets="BeginGeneratePackageSource;Restore;Build"
             Properties="PackageName=%(FilteredPackageDependency.Identity);PackageVersion=%(FilteredPackageDependency.Version)"
             RemoveProperties="PackageType;PackageCSV;PackageTargetFrameworks"
             BuildInParallel="false"
             Condition="'@(FilteredPackageDependency)' != ''" />
  </Target>

</Project>
