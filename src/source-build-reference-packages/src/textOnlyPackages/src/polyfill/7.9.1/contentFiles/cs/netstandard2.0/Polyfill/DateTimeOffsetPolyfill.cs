// <auto-generated />
#pragma warning disable

#nullable enable

namespace Polyfills;

using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;

[ExcludeFromCodeCoverage]
[DebuggerNonUserCode]
#if PolyPublic
public
#endif
static class DateTimeOffsetPolyfill
{
    /// <summary>
    /// Tries to parse a string into a value.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.tryparse#system-datetimeoffset-tryparse(system-string-system-iformatprovider-system-datetimeoffset@)
    public static bool TryParse(string? target, IFormatProvider? provider, out DateTimeOffset result) =>
#if NET7_0_OR_GREATER
        DateTimeOffset.TryParse(target, provider, out result);
#else
        DateTimeOffset.TryParse(target, provider, DateTimeStyles.None, out result);
#endif

#if FeatureMemory

    /// <summary>
    /// Tries to parse a span of characters into a value.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.tryparse#system-datetimeoffset-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-datetimeoffset@)
    public static bool TryParse(ReadOnlySpan<char> target, IFormatProvider? provider, out DateTimeOffset result) =>
#if NET8_0_OR_GREATER
        DateTimeOffset.TryParse(target, provider, out result);
#else
        DateTimeOffset.TryParse(target.ToString(), provider, DateTimeStyles.None, out result);
#endif

    /// <summary>
    /// Tries to parse a span of characters into a value.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.tryparse#system-datetimeoffset-tryparse(system-readonlyspan((system-char))-system-datetimeoffset@)
    public static bool TryParse(ReadOnlySpan<char> target, out DateTimeOffset result) =>
#if NETSTANDARD2_1 || NETSTANDARD2_1_OR_GREATER || NET5_0_OR_GREATER
        DateTimeOffset.TryParse(target, out result);
#else
        DateTimeOffset.TryParse(target.ToString(), null, DateTimeStyles.None, out result);
#endif

    /// <summary>
    /// Tries to parse a span of characters into a value.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.tryparse#system-datetimeoffset-tryparse(system-readonlyspan((system-char))-system-iformatprovider-system-globalization-datetimestyles-system-datetimeoffset@)
    public static bool TryParse(ReadOnlySpan<char> target, IFormatProvider? provider, DateTimeStyles styles, out DateTimeOffset result) =>
#if NETSTANDARD2_1 || NETSTANDARD2_1_OR_GREATER || NET5_0_OR_GREATER
        DateTimeOffset.TryParse(target, provider, styles, out result);
#else
        DateTimeOffset.TryParse(target.ToString(), provider, styles, out result);
#endif

    /// <summary>
    /// Tries to parse a span of characters into a value.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.tryparseexact#system-datetimeoffset-tryparseexact(system-readonlyspan((system-char))-system-readonlyspan((system-char))-system-iformatprovider-system-globalization-datetimestyles-system-datetimeoffset@)
    public static bool TryParseExact(ReadOnlySpan<char> target, string format, IFormatProvider? provider, DateTimeStyles styles, out DateTimeOffset result) =>
#if NETSTANDARD2_1 || NETSTANDARD2_1_OR_GREATER || NET5_0_OR_GREATER
        DateTimeOffset.TryParseExact(target, format, provider, styles, out result);
#else
        DateTimeOffset.TryParseExact(target.ToString(), format, provider, styles, out result);
#endif

    /// <summary>
    /// Tries to parse a span of characters into a value.
    /// </summary>
    //Link: https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.tryparseexact#system-datetimeoffset-tryparseexact(system-readonlyspan((system-char))-system-readonlyspan((system-char))-system-iformatprovider-system-globalization-datetimestyles-system-datetimeoffset@)
    public static bool TryParseExact(ReadOnlySpan<char> target, ReadOnlySpan<char> format, IFormatProvider? provider, DateTimeStyles styles, out DateTimeOffset result) =>
#if NETFRAMEWORK || NETSTANDARD2_0 || NETCOREAPP2_0
        DateTimeOffset.TryParseExact(target.ToString(), format.ToString(), provider, styles, out result);
#else
        DateTimeOffset.TryParseExact(target, format, provider, styles, out result);
#endif
#endif
}