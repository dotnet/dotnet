// <auto-generated />
#pragma warning disable

namespace Polyfills;

using System.Runtime.CompilerServices;
using System;

#if PolyPublic
public
#endif

static partial class Guard
{
    public static void NotWhiteSpace(
        string? value,
        [CallerArgumentExpression("value")] string argumentName = "")
    {
        if (value == null)
        {
            return;
        }
#if NET8_0_OR_GREATER
        ArgumentException.ThrowIfNullOrWhiteSpace(value, argumentName);
#else

        if (value.Length == 0)
        {
            throw new ArgumentException("Argument cannot be empty.", argumentName);
        }

        foreach (var ch in value)
        {
            if (!char.IsWhiteSpace(ch))
            {
                return;
            }
        }

        throw new ArgumentException("Argument cannot be whitespace.", argumentName);
#endif
    }
#if FeatureMemory

    public static void NotWhiteSpace(
        ReadOnlySpan<char> value,
        [CallerArgumentExpression("value")] string argumentName = "")
    {
        if (value.Length == 0)
        {
            throw new ArgumentException("Argument cannot be empty.", argumentName);
        }

        foreach (var ch in value)
        {
            if (!char.IsWhiteSpace(ch))
            {
                return;
            }
        }

        throw new ArgumentException("Argument cannot be whitespace.", argumentName);
    }

    public static void NotWhiteSpace(
        Memory<char>? value,
        [CallerArgumentExpression("value")] string argumentName = "")
    {
        if (value == null)
        {
            return;
        }

        if (value.Value.Length == 0)
        {
            throw new ArgumentException("Argument cannot be empty.", argumentName);
        }

        foreach (var ch in value.Value.Span)
        {
            if (!char.IsWhiteSpace(ch))
            {
                return;
            }
        }

        throw new ArgumentException("Argument cannot be whitespace.", argumentName);
    }

    public static void NotWhiteSpace(
        ReadOnlyMemory<char>? value,
        [CallerArgumentExpression("value")] string argumentName = "")
    {
        if (value == null)
        {
            return;
        }

        if (value.Value.Length == 0)
        {
            throw new ArgumentException("Argument cannot be empty.", argumentName);
        }

        foreach (var ch in value.Value.Span)
        {
            if (!char.IsWhiteSpace(ch))
            {
                return;
            }
        }

        throw new ArgumentException("Argument cannot be whitespace.", argumentName);
    }

    public static void NotWhiteSpace(
        Span<char> value,
        [CallerArgumentExpression("value")] string argumentName = "")
    {
        if (value.Length == 0)
        {
            throw new ArgumentException("Argument cannot be empty.", argumentName);
        }

        foreach (var ch in value)
        {
            if (!char.IsWhiteSpace(ch))
            {
                return;
            }
        }

        throw new ArgumentException("Argument cannot be whitespace.", argumentName);
    }
#endif
}