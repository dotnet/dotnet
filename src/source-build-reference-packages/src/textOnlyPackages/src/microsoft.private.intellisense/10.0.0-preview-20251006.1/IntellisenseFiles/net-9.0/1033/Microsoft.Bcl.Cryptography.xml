<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Bcl.Cryptography</name>
  </assembly>
  <members>
    <member name="T:System.Security.Cryptography.CompositeMLDsa">
      <summary>Represents a Composite ML-DSA key.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.#ctor(System.Security.Cryptography.CompositeMLDsaAlgorithm)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CompositeMLDsa" /> class.</summary>
      <param name="algorithm">The specific Composite ML-DSA algorithm for this key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Security.Cryptography.CompositeMLDsa" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.Dispose(System.Boolean)">
      <summary>
        <para>Called by the <see cref="M:System.Security.Cryptography.CompositeMLDsa.Dispose" /> method to release the managed and unmanaged resources used by the current instance of the <see cref="T:System.Security.Cryptography.CompositeMLDsa" /> class.</para>
      </summary>
      <param name="disposing">
        <para>
          <see langword="true" /> to release managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</para>
      </param>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ExportCompositeMLDsaPrivateKey">
      <summary>Exports the private-key portion of the current key.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The current instance cannot export a private key.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      <returns>The Composite ML-DSA private key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ExportCompositeMLDsaPrivateKey(System.Span{System.Byte})">
      <summary>Exports the private-key portion of the current key into the provided buffer.</summary>
      <param name="destination">The buffer to receive the Composite ML-DSA private key value.</param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="destination" /> wasn't large enough to hold the result.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>The number of bytes written to the <paramref name="destination" /> buffer.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ExportCompositeMLDsaPrivateKeyCore(System.Span{System.Byte})">
      <summary>When overridden in a derived class, exports the private key portion of the current key.</summary>
      <param name="destination">The buffer to receive the private key value.</param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>The number of bytes written to the <paramref name="destination" /> buffer.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ExportCompositeMLDsaPublicKey">
      <summary>Exports the public-key portion of the current key.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>An error occurred while exporting the key.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      <returns>The Composite ML-DSA public key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ExportCompositeMLDsaPublicKey(System.Span{System.Byte})">
      <summary>Exports the public-key portion of the current key into the provided buffer.</summary>
      <param name="destination">The buffer to receive the Composite ML-DSA public key value.</param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="destination" /> was too not large enough to hold the result.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>The number of bytes written to the <paramref name="destination" /> buffer.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ExportCompositeMLDsaPublicKeyCore(System.Span{System.Byte})">
      <summary>When overridden in a derived class, exports the public key portion of the current key.</summary>
      <param name="destination">The buffer to receive the public key value.</param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>The number of bytes written to the <paramref name="destination" /> buffer.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters)">
      <summary>Exports the current key in the PKCS#8 EncryptedPrivateKeyInfo format with a byte-based password.</summary>
      <param name="passwordBytes">The bytes to use as a password when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="pbeParameters" /> specifies a KDF that requires a char-based password.</para>
        <para>-or-</para>
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
        <para>-or-</para>
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>A byte array containing the PKCS#8 EncryptedPrivateKeyInfo representation of the this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters)">
      <summary>Exports the current key in the PKCS#8 EncryptedPrivateKeyInfo format with a char-based password.</summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
        <para>-or-</para>
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>A byte array containing the PKCS#8 EncryptedPrivateKeyInfo representation of the this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ExportEncryptedPkcs8PrivateKey(System.String,System.Security.Cryptography.PbeParameters)">
      <summary>Exports the current key in the PKCS#8 EncryptedPrivateKeyInfo format with a char-based password.</summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="password" /> or <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <returns>A byte array containing the PKCS#8 EncryptedPrivateKeyInfo representation of the this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ExportEncryptedPkcs8PrivateKeyPem(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters)">
      <summary>
        <para>Exports the current key in a PEM-encoded representation of the PKCS#8 EncryptedPrivateKeyInfo representation of this key, using a byte-based password.</para>
      </summary>
      <param name="passwordBytes">The bytes to use as a password when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="pbeParameters" /> specifies a KDF that requires a char-based password.</para>
        <para>-or-</para>
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
        <para>-or-</para>
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>A string containing the PEM-encoded PKCS#8 EncryptedPrivateKeyInfo.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ExportEncryptedPkcs8PrivateKeyPem(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters)">
      <summary>
        <para>Exports the current key in a PEM-encoded representation of the PKCS#8 EncryptedPrivateKeyInfo representation of this key, using a char-based password.</para>
      </summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
        <para>-or-</para>
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>A string containing the PEM-encoded PKCS#8 EncryptedPrivateKeyInfo.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ExportEncryptedPkcs8PrivateKeyPem(System.String,System.Security.Cryptography.PbeParameters)">
      <summary>
        <p>Exports the current key in a PEM-encoded representation of the PKCS#8 EncryptedPrivateKeyInfo representation of this key, using a char-based password.</p>
      </summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="password" /> or <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <returns>A string containing the PEM-encoded PKCS#8 EncryptedPrivateKeyInfo.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ExportPkcs8PrivateKey">
      <summary>Exports the current key in the PKCS#8 PrivateKeyInfo format.</summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>A byte array containing the PKCS#8 PrivateKeyInfo representation of the this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ExportPkcs8PrivateKeyPem">
      <summary>Exports the current key in a PEM-encoded representation of the PKCS#8 PrivateKeyInfo format.</summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>A string containing the PEM-encoded representation of the PKCS#8 PrivateKeyInfo representation of the public-key portion of this key.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ExportSubjectPublicKeyInfo">
      <summary>Exports the public-key portion of the current key in the X.509 SubjectPublicKeyInfo format.</summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>A byte array containing the X.509 SubjectPublicKeyInfo representation of the public-key portion of this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ExportSubjectPublicKeyInfoPem">
      <summary>
        <para>Exports the public-key portion of the current key in a PEM-encoded representation of the X.509 SubjectPublicKeyInfo format.</para>
      </summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>A string containing the PEM-encoded representation of the X.509 SubjectPublicKeyInfo representation of the public-key portion of this key.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.GenerateKey(System.Security.Cryptography.CompositeMLDsaAlgorithm)">
      <summary>Generates a new Composite ML-DSA key.</summary>
      <param name="algorithm">An algorithm identifying what kind of Composite ML-DSA key to generate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is <see langword="null" /></exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred generating the Composite ML-DSA key.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support the specified Composite ML-DSA algorithm. Callers can use <see cref="M:System.Security.Cryptography.CompositeMLDsa.IsAlgorithmSupported(System.Security.Cryptography.CompositeMLDsaAlgorithm)" /> to determine if the algorithm is supported.</para>
      </exception>
      <returns>The generated key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ImportCompositeMLDsaPrivateKey(System.Security.Cryptography.CompositeMLDsaAlgorithm,System.Byte[])">
      <summary>Imports a Composite ML-DSA private key.</summary>
      <param name="algorithm">The specific Composite ML-DSA algorithm for this key.</param>
      <param name="source">The bytes of the public key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> or <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ImportCompositeMLDsaPrivateKey(System.Security.Cryptography.CompositeMLDsaAlgorithm,System.ReadOnlySpan{System.Byte})">
      <summary>Imports a Composite ML-DSA private key.</summary>
      <param name="algorithm">The specific Composite ML-DSA algorithm for this key.</param>
      <param name="source">The bytes of the public key.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="source" /> length is the wrong size for the specified algorithm.</para>
        <para>-or-</para>
        <para>An error occurred while importing the key.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support the specified Composite ML-DSA algorithm. Callers can use <see cref="M:System.Security.Cryptography.CompositeMLDsa.IsAlgorithmSupported(System.Security.Cryptography.CompositeMLDsaAlgorithm)" /> to determine if the algorithm is supported.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ImportCompositeMLDsaPublicKey(System.Security.Cryptography.CompositeMLDsaAlgorithm,System.Byte[])">
      <summary>Imports a Composite ML-DSA public key.</summary>
      <param name="algorithm">The specific Composite ML-DSA algorithm for this key.</param>
      <param name="source">The bytes of the public key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> or <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ImportCompositeMLDsaPublicKey(System.Security.Cryptography.CompositeMLDsaAlgorithm,System.ReadOnlySpan{System.Byte})">
      <summary>Imports a Composite ML-DSA public key.</summary>
      <param name="algorithm">The specific Composite ML-DSA algorithm for this key.</param>
      <param name="source">The bytes of the public key.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="source" /> length is the wrong size for the specified algorithm.</para>
        <para>-or-</para>
        <para>An error occurred while importing the key.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support the specified Composite ML-DSA algorithm. Callers can use <see cref="M:System.Security.Cryptography.CompositeMLDsa.IsAlgorithmSupported(System.Security.Cryptography.CompositeMLDsaAlgorithm)" /> to determine if the algorithm is supported.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Imports a Composite ML-DSA private key from a PKCS#8 EncryptedPrivateKeyInfo structure.</summary>
      <param name="passwordBytes">The bytes to use as a password when decrypting the key material.</param>
      <param name="source">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The specified password is incorrect.</para>
        <para>-or-</para>
        <para>The EncryptedPrivateKeyInfo indicates the Key Derivation Function (KDF) to apply is the legacy PKCS#12 KDF, which requires <see cref="T:System.Char" />-based passwords.</para>
        <para>-or-</para>
        <para>The value does not represent a Composite ML-DSA key.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains trailing data after the ASN.1 structure.</para>
        <para>-or-</para>
        <para>The algorithm-specific import failed.</para>
        <para>-or-</para>
        <para>The specified Composite ML-DSA algorithm is not supported.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support Composite ML-DSA. Callers can use the <see cref="P:System.Security.Cryptography.CompositeMLDsa.IsSupported" /> property to determine if the platform supports Composite ML-DSA.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Imports a Composite ML-DSA private key from a PKCS#8 EncryptedPrivateKeyInfo structure.</summary>
      <param name="password">The password to use when decrypting the key material.</param>
      <param name="source">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The specified password is incorrect.</para>
        <para>-or-</para>
        <para>The value does not represent a Composite ML-DSA key.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains trailing data after the ASN.1 structure.</para>
        <para>-or-</para>
        <para>The algorithm-specific import failed.</para>
        <para>-or-</para>
        <para>The specified Composite ML-DSA algorithm is not supported.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support Composite ML-DSA. Callers can use the <see cref="P:System.Security.Cryptography.CompositeMLDsa.IsSupported" /> property to determine if the platform supports Composite ML-DSA.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ImportEncryptedPkcs8PrivateKey(System.String,System.Byte[])">
      <summary>Imports a Composite ML-DSA private key from a PKCS#8 EncryptedPrivateKeyInfo structure.</summary>
      <param name="password">The password to use when decrypting the key material.</param>
      <param name="source">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="password" /> or <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Imports a Composite ML-DSA key from an encrypted RFC 7468 PEM-encoded string.</summary>
      <param name="source">The PEM text of the encrypted key to import.</param>
      <param name="passwordBytes">The bytes to use as a password when decrypting the key material.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="source" /> does not contain a PEM-encoded key with a recognized label.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains multiple PEM-encoded keys with a recognized label.</para>
      </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The password is incorrect.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> represent the key in a format that is not supported.</para>
        <para>-or-</para>
        <para>An error occurred while importing the key.</para>
        <para>-or-</para>
        <para>The specified Composite ML-DSA algorithm is not supported.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support Composite ML-DSA. Callers can use the <see cref="P:System.Security.Cryptography.CompositeMLDsa.IsSupported" /> property to determine if the platform supports Composite ML-DSA.</para>
      </exception>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Imports a Composite ML-DSA key from an encrypted RFC 7468 PEM-encoded string.</summary>
      <param name="source">The PEM text of the encrypted key to import.</param>
      <param name="password">The password to use for decrypting the key material.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="source" /> does not contain a PEM-encoded key with a recognized label.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains multiple PEM-encoded keys with a recognized label.</para>
      </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The password is incorrect.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> represent the key in a format that is not supported.</para>
        <para>-or-</para>
        <para>An error occurred while importing the key.</para>
        <para>-or-</para>
        <para>The specified Composite ML-DSA algorithm is not supported.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support Composite ML-DSA. Callers can use the <see cref="P:System.Security.Cryptography.CompositeMLDsa.IsSupported" /> property to determine if the platform supports Composite ML-DSA.</para>
      </exception>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ImportFromEncryptedPem(System.String,System.Byte[])">
      <summary>Imports a Composite ML-DSA key from an encrypted RFC 7468 PEM-encoded string.</summary>
      <param name="source">The PEM text of the encrypted key to import.</param>
      <param name="passwordBytes">The bytes to use as a password when decrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="passwordBytes" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ImportFromEncryptedPem(System.String,System.String)">
      <summary>Imports a Composite ML-DSA key from an encrypted RFC 7468 PEM-encoded string.</summary>
      <param name="source">The PEM text of the encrypted key to import.</param>
      <param name="password">The password to use for decrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="password" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>Imports a Composite ML-DSA key from an RFC 7468 PEM-encoded string.</summary>
      <param name="source">The text of the PEM key to import.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="source" /> contains an encrypted PEM-encoded key.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains multiple PEM-encoded Composite ML-DSA keys.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains no PEM-encoded Composite ML-DSA keys.</para>
      </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>An error occurred while importing the key.</para>
        <para>-or-</para>
        <para>The specified Composite ML-DSA algorithm is not supported.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support Composite ML-DSA. Callers can use the <see cref="P:System.Security.Cryptography.CompositeMLDsa.IsSupported" /> property to determine if the platform supports Composite ML-DSA.</para>
      </exception>
      <returns>The imported Composite ML-DSA key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ImportFromPem(System.String)">
      <summary>Imports a Composite ML-DSA key from an RFC 7468 PEM-encoded string.</summary>
      <param name="source">The text of the PEM key to import.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>The imported Composite ML-DSA key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ImportPkcs8PrivateKey(System.Byte[])">
      <summary>Imports a Composite ML-DSA private key from a PKCS#8 PrivateKeyInfo structure.</summary>
      <param name="source">The bytes of a PKCS#8 PrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte})">
      <summary>Imports a Composite ML-DSA private key from a PKCS#8 PrivateKeyInfo structure.</summary>
      <param name="source">The bytes of a PKCS#8 PrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 PrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The PrivateKeyInfo value does not represent a Composite ML-DSA key.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains trailing data after the ASN.1 structure.</para>
        <para>-or-</para>
        <para>The algorithm-specific import failed.</para>
        <para>-or-</para>
        <para>The specified Composite ML-DSA algorithm is not supported.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support Composite ML-DSA. Callers can use the <see cref="P:System.Security.Cryptography.CompositeMLDsa.IsSupported" /> property to determine if the platform supports Composite ML-DSA.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ImportSubjectPublicKeyInfo(System.Byte[])">
      <summary>Imports a Composite ML-DSA public key from an X.509 SubjectPublicKeyInfo structure.</summary>
      <param name="source">The bytes of an X.509 SubjectPublicKeyInfo structure in the ASN.1-DER encoding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte})">
      <summary>Imports a Composite ML-DSA public key from an X.509 SubjectPublicKeyInfo structure.</summary>
      <param name="source">The bytes of an X.509 SubjectPublicKeyInfo structure in the ASN.1-DER encoding.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The contents of <paramref name="source" /> do not represent an ASN.1-DER-encoded X.509 SubjectPublicKeyInfo structure.</para>
        <para>-or-</para>
        <para>The SubjectPublicKeyInfo value does not represent a Composite ML-DSA key.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains trailing data after the ASN.1 structure.</para>
        <para>-or-</para>
        <para>The algorithm-specific import failed.</para>
        <para>-or-</para>
        <para>The specified Composite ML-DSA algorithm is not supported.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support Composite ML-DSA. Callers can use the <see cref="P:System.Security.Cryptography.CompositeMLDsa.IsSupported" /> property to determine if the platform supports Composite ML-DSA.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.IsAlgorithmSupported(System.Security.Cryptography.CompositeMLDsaAlgorithm)">
      <summary>Determines whether the specified algorithm is supported by the current platform.</summary>
      <param name="algorithm">The <see cref="T:System.Security.Cryptography.CompositeMLDsaAlgorithm" /> to check for support.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the algorithm is supported; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.SignData(System.Byte[],System.Byte[])">
      <summary>Signs the specified data.</summary>
      <param name="data">The data to sign.</param>
      <param name="context">
        <para>An optional context-specific value to limit the scope of the signature.</para>
        <para>The default value is <see langword="null" />.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="context" /> has a length in excess of 255 bytes.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The instance represents only a public key.</para>
        <para>-or-</para>
        <para>An error occurred while signing the data.</para>
      </exception>
      <returns>The Composite ML-DSA signature of the specified data.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.SignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Signs the specified data, writing the signature into the provided buffer.</summary>
      <param name="data">The data to sign.</param>
      <param name="destination">The buffer to receive the signature. Its length must be at least <see cref="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MaxSignatureSizeInBytes" />.</param>
      <param name="context">
        <para>An optional context-specific value to limit the scope of the signature.</para>
        <para>The default value is an empty buffer.</para>
      </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> is less than <see cref="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MaxSignatureSizeInBytes" /> in length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="context" /> has a <see cref="P:System.ReadOnlySpan`1.Length" /> in excess of 255 bytes.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The instance represents only a public key.</para>
        <para>-or-</para>
        <para>An error occurred while signing the data.</para>
      </exception>
      <returns>The number of bytes written to the <paramref name="destination" /> buffer.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.SignDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>
        <para>When overridden in a derived class, computes the signature of the specified data and context, writing it into the provided buffer.</para>
      </summary>
      <param name="data">The data to sign.</param>
      <param name="context">The signature context.</param>
      <param name="destination">The buffer to receive the signature, whose length will be exactly <see cref="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MaxSignatureSizeInBytes" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while signing the data.</exception>
      <returns>The number of bytes written to the <paramref name="destination" /> buffer.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.TryExportCompositeMLDsaPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Attempts to export private key portion of the current key into the provided buffer.</summary>
      <param name="destination">The buffer to receive the private key value.</param>
      <param name="bytesWritten">
        <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
        <para>This parameter is treated as uninitialized.</para>
      </param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.TryExportCompositeMLDsaPublicKey(System.Span{System.Byte},System.Int32@)">
      <summary>Attempts to export public key portion of the current key into the provided buffer.</summary>
      <param name="destination">The buffer to receive the public key value.</param>
      <param name="bytesWritten">
        <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
        <para>This parameter is treated as uninitialized.</para>
      </param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a byte-based password.</para>
      </summary>
      <param name="passwordBytes">The bytes to use as a password when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <param name="destination">The buffer to receive the PKCS#8 EncryptedPrivateKeyInfo value.</param>
      <param name="bytesWritten">
        <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
        <para>This parameter is treated as uninitialized.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="pbeParameters" /> specifies a KDF that requires a char-based password.</para>
        <para>-or-</para>
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
        <para>-or-</para>
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a char-based password.</para>
      </summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <param name="destination">The buffer to receive the PKCS#8 EncryptedPrivateKeyInfo value.</param>
      <param name="bytesWritten">
        <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
        <para>This parameter is treated as uninitialized.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
        <para>-or-</para>
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.TryExportEncryptedPkcs8PrivateKey(System.String,System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>
        <p>Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a char-based password.</p>
      </summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <param name="destination">The buffer to receive the PKCS#8 EncryptedPrivateKeyInfo value.</param>
      <param name="bytesWritten">
        <p>When this method returns, contains the number of bytes written to the <code data-dev-comment-type="paramref">destination</code> buffer.</p>
        <p>This parameter is treated as uninitialized.</p>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="password" /> or <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <returns>
        <p>
          <code data-dev-comment-type="langword">true</code> if <code data-dev-comment-type="paramref">destination</code> was large enough to hold the result; otherwise, <code data-dev-comment-type="langword">false</code>.</p>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>Attempts to export the current key in the PKCS#8 PrivateKeyInfo format into the provided buffer.</para>
      </summary>
      <param name="destination">The buffer to receive the PKCS#8 PrivateKeyInfo value.</param>
      <param name="bytesWritten">
        <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
        <para>This parameter is treated as uninitialized.</para>
      </param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.TryExportPkcs8PrivateKeyCore(System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>When overridden in a derived class, attempts to export the current key in the PKCS#8 PrivateKeyInfo format into the provided buffer.</para>
      </summary>
      <param name="destination">The buffer to receive the PKCS#8 PrivateKeyInfo value.</param>
      <param name="bytesWritten">When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>Attempts to export the public-key portion of the current key in the X.509 SubjectPublicKeyInfo format into the provided buffer.</para>
      </summary>
      <param name="destination">The buffer to receive the X.509 SubjectPublicKeyInfo value.</param>
      <param name="bytesWritten">
        <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
        <para>This parameter is treated as uninitialized.</para>
      </param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.VerifyData(System.Byte[],System.Byte[],System.Byte[])">
      <summary>Verifies that the specified signature is valid for this key and the provided data.</summary>
      <param name="data">The data to verify.</param>
      <param name="signature">The signature to verify.</param>
      <param name="context">
        <para>The context value which was provided during signing.</para>
        <para>The default value is <see langword="null" />.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="signature" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="context" /> has a length in excess of 255 bytes.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>An error occurred while verifying the data.</para>
      </exception>
      <returns>
        <see langword="true" /> if the signature validates the data; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Verifies that the specified signature is valid for this key and the provided data.</summary>
      <param name="data">The data to verify.</param>
      <param name="signature">The signature to verify.</param>
      <param name="context">
        <para>The context value which was provided during signing.</para>
        <para>The default value is an empty buffer.</para>
      </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="context" /> has a <see cref="P:System.ReadOnlySpan`1.Length" /> in excess of 255 bytes.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>An error occurred while verifying the data.</para>
      </exception>
      <returns>
        <see langword="true" /> if the signature validates the data; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsa.VerifyDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>When overridden in a derived class, verifies the signature of the specified data and context.</summary>
      <param name="data">The data to verify.</param>
      <param name="context">The signature context.</param>
      <param name="signature">The signature to verify.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while verifying the data.</exception>
      <returns>
        <see langword="true" /> if the signature validates the data; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsa.Algorithm">
      <summary>Gets the specific Composite ML-DSA algorithm for this key.</summary>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsa.IsSupported">
      <summary>Gets a value indicating whether the current platform supports Composite ML-DSA.</summary>
      <returns>
        <see langword="true" /> if the current platform supports Composite ML-DSA; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CompositeMLDsaAlgorithm">
      <summary>Represents a composite ML-DSA algorithm identifier, combining ML-DSA with a traditional algorithm.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsaAlgorithm.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <code data-dev-comment-type="langword">true</code> if the specified object  is equal to the current object; otherwise, <code data-dev-comment-type="langword">false</code>.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsaAlgorithm.Equals(System.Security.Cryptography.CompositeMLDsaAlgorithm)">
      <summary>Compares two <see cref="T:System.Security.Cryptography.CompositeMLDsaAlgorithm" /> objects.</summary>
      <param name="other">An object to be compared to the current <see cref="T:System.Security.Cryptography.CompositeMLDsaAlgorithm" /> object.</param>
      <returns>
        <see langword="true" /> if the objects are considered equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsaAlgorithm.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsaAlgorithm.op_Equality(System.Security.Cryptography.CompositeMLDsaAlgorithm,System.Security.Cryptography.CompositeMLDsaAlgorithm)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CompositeMLDsaAlgorithm" /> objects specify the same algorithm name.</summary>
      <param name="left">An object that specifies an algorithm name.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
      <returns>
        <see langword="true" /> if the objects are considered equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsaAlgorithm.op_Inequality(System.Security.Cryptography.CompositeMLDsaAlgorithm,System.Security.Cryptography.CompositeMLDsaAlgorithm)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.CompositeMLDsaAlgorithm" /> objects do not specify the same algorithm name.</summary>
      <param name="left">An object that specifies an algorithm name.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
      <returns>
        <see langword="true" /> if the objects are not considered equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsaAlgorithm.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MaxSignatureSizeInBytes">
      <summary>Gets the maximum signature size in bytes for the composite algorithm.</summary>
      <returns>The maximum signature size in bytes for the composite algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MLDsa44WithECDsaP256">
      <summary>Gets a Composite ML-DSA algorithm identifier for the ML-DSA-44 and ECDSA P-256 with SHA256 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-44 and ECDSA P-256 with SHA256 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MLDsa44WithEd25519">
      <summary>Gets a Composite ML-DSA algorithm identifier for the ML-DSA-44 and Ed25519 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-44 and Ed25519 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MLDsa44WithRSA2048Pkcs15">
      <summary>Gets a Composite ML-DSA algorithm identifier for the ML-DSA-44 and 2048-bit RSASSA-PKCS1-v1_5 with SHA256 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-44 and 2048-bit RSASSA-PKCS1-v1_5 with SHA256 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MLDsa44WithRSA2048Pss">
      <summary>Gets a Composite ML-DSA algorithm identifier for the ML-DSA-44 and 2048-bit RSASSA-PSS with SHA256 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-44 and 2048-bit RSASSA-PSS with SHA256 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MLDsa65WithECDsaBrainpoolP256r1">
      <summary>Gets a Composite ML-DSA algorithm identifier for the ML-DSA-65 and ECDSA BrainpoolP256r1 with SHA512 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-65 and ECDSA BrainpoolP256r1 with SHA512 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MLDsa65WithECDsaP256">
      <summary>Gets a Composite ML-DSA algorithm identifier for the ML-DSA-65 and ECDSA P-256 with SHA512 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-65 and ECDSA P-256 with SHA512 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MLDsa65WithECDsaP384">
      <summary>Gets a Composite ML-DSA algorithm identifier for the ML-DSA-65 and ECDSA P-384 with SHA512 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-65 and ECDSA P-384 with SHA512 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MLDsa65WithEd25519">
      <summary>Gets a Composite ML-DSA algorithm identifier for the ML-DSA-65 and Ed25519 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-65 and Ed25519 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MLDsa65WithRSA3072Pkcs15">
      <summary>Gets a Composite ML-DSA algorithm identifier for the ML-DSA-65 and 3072-bit RSASSA-PKCS1-v1_5 with SHA512 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-65 and 3072-bit RSASSA-PKCS1-v1_5 with SHA512 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MLDsa65WithRSA3072Pss">
      <summary>Gets a Composite ML-DSA algorithm identifier for the ML-DSA-65 and 3072-bit RSASSA-PSS with SHA512 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-65 and 3072-bit RSASSA-PSS with SHA512 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MLDsa65WithRSA4096Pkcs15">
      <summary>Gets a Composite ML-DSA algorithm identifier for the ML-DSA-65 and 4096-bit RSASSA-PKCS1-v1_5 with SHA512 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-65 and 4096-bit RSASSA-PKCS1-v1_5 with SHA512 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MLDsa65WithRSA4096Pss">
      <summary>Gets a Composite ML-DSA algorithm identifier for the ML-DSA-65 and 4096-bit RSASSA-PSS with SHA512 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-65 and 4096-bit RSASSA-PSS with SHA512 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MLDsa87WithECDsaBrainpoolP384r1">
      <summary>Gets a Composite ML-DSA algorithm identifier for the ML-DSA-87 and ECDSA BrainpoolP384r1 with SHA512 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-87 and ECDSA BrainpoolP384r1 with SHA512 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MLDsa87WithECDsaP384">
      <summary>Gets a Composite ML-DSA algorithm identifier for the ML-DSA-87 and ECDSA P-384 with SHA512 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-87 and ECDSA P-384 with SHA512 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MLDsa87WithECDsaP521">
      <summary>Gets a Composite ML-DSA algorithm identifier for the ML-DSA-87 and ECDSA P-521 with SHA512 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-87 and ECDSA P-521 with SHA512 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MLDsa87WithEd448">
      <summary>Gets a Composite ML-DSA algorithm identifier for the ML-DSA-87 and Ed448 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-87 and Ed448 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MLDsa87WithRSA3072Pss">
      <summary>Gets a Composite ML-DSA algorithm identifier for the ML-DSA-87 and 3072-bit RSASSA-PSS with SHA512 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-87 and 3072-bit RSASSA-PSS with SHA512 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.MLDsa87WithRSA4096Pss">
      <summary>Gets a Composite ML-DSA algorithm identifier for the ML-DSA-87 and 4096-bit RSASSA-PSS with SHA512 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-87 and 4096-bit RSASSA-PSS with SHA512 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CompositeMLDsaAlgorithm.Name">
      <summary>Gets the name of the algorithm.</summary>
      <returns>A string representing the algorithm name.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CompositeMLDsaCng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of Composite ML-DSA.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsaCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.CompositeMLDsaCng" /> class by using the specified <see cref="T:System.Security.Cryptography.CngKey" />.</summary>
      <param name="key">The key that will be used as input to the cryptographic operations performed by the current object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> does not specify a Composite ML-DSA group.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) classes are not supported on this system.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CompositeMLDsaCng.GetKey">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngKey" /> representing the key used by the current instance.</summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
    </member>
    <member name="T:System.Security.Cryptography.MLDsa">
      <summary>Represents an ML-DSA key.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.#ctor(System.Security.Cryptography.MLDsaAlgorithm)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.MLDsa" /> class.</summary>
      <param name="algorithm">The specific ML-DSA algorithm for this key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Security.Cryptography.MLDsa" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.Dispose(System.Boolean)">
      <summary>
        <para>Called by the <c>Dispose()</c> and <c>Finalize()</c> methods to release the managed and unmanaged resources used by the current instance of the <see cref="T:System.Security.Cryptography.MLDsa" /> class.</para>
      </summary>
      <param name="disposing">
        <para>
          <see langword="true" /> to release managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</para>
      </param>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters)">
      <summary>Exports the current key in the PKCS#8 EncryptedPrivateKeyInfo format with a byte-based password.</summary>
      <param name="passwordBytes">The bytes to use as a password when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="pbeParameters" /> specifies a KDF that requires a char-based password.</para>
        <para>-or-</para>
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
        <para>-or-</para>
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>A byte array containing the PKCS#8 EncryptedPrivateKeyInfo representation of the this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters)">
      <summary>Exports the current key in the PKCS#8 EncryptedPrivateKeyInfo format with a char-based password.</summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
        <para>-or-</para>
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>A byte array containing the PKCS#8 EncryptedPrivateKeyInfo representation of the this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ExportEncryptedPkcs8PrivateKey(System.String,System.Security.Cryptography.PbeParameters)">
      <summary>Exports the current key in the PKCS#8 EncryptedPrivateKeyInfo format with a char-based password.</summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="password" /> or <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <returns>A byte array containing the PKCS#8 EncryptedPrivateKeyInfo representation of the this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ExportEncryptedPkcs8PrivateKeyPem(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters)">
      <summary>
        <para>Exports the current key in a PEM-encoded representation of the PKCS#8 EncryptedPrivateKeyInfo representation of this key, using a byte-based password.</para>
      </summary>
      <param name="passwordBytes">The bytes to use as a password when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="pbeParameters" /> specifies a KDF that requires a char-based password.</para>
        <para>-or-</para>
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
        <para>-or-</para>
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>A string containing the PEM-encoded PKCS#8 EncryptedPrivateKeyInfo.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ExportEncryptedPkcs8PrivateKeyPem(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters)">
      <summary>
        <para>Exports the current key in a PEM-encoded representation of the PKCS#8 EncryptedPrivateKeyInfo representation of this key, using a char-based password.</para>
      </summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
        <para>-or-</para>
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>A string containing the PEM-encoded PKCS#8 EncryptedPrivateKeyInfo.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ExportEncryptedPkcs8PrivateKeyPem(System.String,System.Security.Cryptography.PbeParameters)">
      <summary>
        <p>Exports the current key in a PEM-encoded representation of the PKCS#8 EncryptedPrivateKeyInfo representation of this key, using a char-based password.</p>
      </summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="password" /> or <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <returns>A string containing the PEM-encoded PKCS#8 EncryptedPrivateKeyInfo.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ExportMLDsaPrivateKey">
      <summary>Exports the current key in the FIPS 204 private key format.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The current instance cannot export a private key.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      <returns>The FIPS 204 private key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ExportMLDsaPrivateKey(System.Span{System.Byte})">
      <summary>Exports the current key in the FIPS 204 private key format.</summary>
      <param name="destination">
        <para>The buffer to receive the private key. Its length must be exactly <see cref="P:System.Security.Cryptography.MLDsaAlgorithm.PrivateKeySizeInBytes" />.</para>
      </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> is the incorrect length to receive the private key.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ExportMLDsaPrivateKeyCore(System.Span{System.Byte})">
      <summary>When overridden in a derived class, exports the FIPS 204 private key to the specified buffer.</summary>
      <param name="destination">The buffer to receive the private key.</param>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ExportMLDsaPrivateSeed">
      <summary>Exports the private seed in the FIPS 204 private seed format.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>An error occurred while exporting the key.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      <returns>The FIPS 204 private seed.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ExportMLDsaPrivateSeed(System.Span{System.Byte})">
      <summary>Exports the private seed of the current key.</summary>
      <param name="destination">
        <para>The buffer to receive the private seed. Its length must be exactly <see cref="P:System.Security.Cryptography.MLDsaAlgorithm.PrivateSeedSizeInBytes" />.</para>
      </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> is the incorrect length to receive the private seed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the private seed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ExportMLDsaPrivateSeedCore(System.Span{System.Byte})">
      <summary>When overridden in a derived class, exports the private seed to the specified buffer.</summary>
      <param name="destination">The buffer to receive the private seed.</param>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ExportMLDsaPublicKey">
      <summary>Exports the public-key portion of the current key in the FIPS 204 public key format.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>An error occurred while exporting the key.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      <returns>The FIPS 204 public key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ExportMLDsaPublicKey(System.Span{System.Byte})">
      <summary>Exports the public-key portion of the current key in the FIPS 204 public key format.</summary>
      <param name="destination">
        <para>The buffer to receive the public key. Its length must be exactly <see cref="P:System.Security.Cryptography.MLDsaAlgorithm.PublicKeySizeInBytes" />.</para>
      </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> is the incorrect length to receive the public key.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>An error occurred while exporting the key.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ExportMLDsaPublicKeyCore(System.Span{System.Byte})">
      <summary>When overridden in a derived class, exports the FIPS 204 public key to the specified buffer.</summary>
      <param name="destination">The buffer to receive the public key.</param>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ExportPkcs8PrivateKey">
      <summary>Exports the current key in the PKCS#8 PrivateKeyInfo format.</summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>A byte array containing the PKCS#8 PrivateKeyInfo representation of the this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ExportPkcs8PrivateKeyPem">
      <summary>Exports the current key in a PEM-encoded representation of the PKCS#8 PrivateKeyInfo format.</summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>A string containing the PEM-encoded representation of the PKCS#8 PrivateKeyInfo representation of the public-key portion of this key.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ExportSubjectPublicKeyInfo">
      <summary>Exports the public-key portion of the current key in the X.509 SubjectPublicKeyInfo format.</summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>A byte array containing the X.509 SubjectPublicKeyInfo representation of the public-key portion of this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ExportSubjectPublicKeyInfoPem">
      <summary>
        <para>Exports the public-key portion of the current key in a PEM-encoded representation of the X.509 SubjectPublicKeyInfo format.</para>
      </summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>A string containing the PEM-encoded representation of the X.509 SubjectPublicKeyInfo representation of the public-key portion of this key.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.GenerateKey(System.Security.Cryptography.MLDsaAlgorithm)">
      <summary>Generates a new ML-DSA key.</summary>
      <param name="algorithm">An algorithm identifying what kind of ML-DSA key to generate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is <see langword="null" /></exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occured generating the ML-DSA key.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support ML-DSA. Callers can use the <see cref="P:System.Security.Cryptography.MLDsa.IsSupported" /> property to determine if the platform supports ML-DSA.</para>
      </exception>
      <returns>The generated key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Imports an ML-DSA private key from a PKCS#8 EncryptedPrivateKeyInfo structure.</summary>
      <param name="passwordBytes">The bytes to use as a password when decrypting the key material.</param>
      <param name="source">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The specified password is incorrect.</para>
        <para>-or-</para>
        <para>The EncryptedPrivateKeyInfo indicates the Key Derivation Function (KDF) to apply is the legacy PKCS#12 KDF, which requires <see cref="T:System.Char" />-based passwords.</para>
        <para>-or-</para>
        <para>The value does not represent an ML-DSA key.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains trailing data after the ASN.1 structure.</para>
        <para>-or-</para>
        <para>The algorithm-specific import failed.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support ML-DSA. Callers can use the <see cref="P:System.Security.Cryptography.MLDsa.IsSupported" /> property to determine if the platform supports ML-DSA.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Imports an ML-DSA private key from a PKCS#8 EncryptedPrivateKeyInfo structure.</summary>
      <param name="password">The password to use when decrypting the key material.</param>
      <param name="source">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The specified password is incorrect.</para>
        <para>-or-</para>
        <para>The value does not represent an ML-DSA key.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains trailing data after the ASN.1 structure.</para>
        <para>-or-</para>
        <para>The algorithm-specific import failed.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support ML-DSA. Callers can use the <see cref="P:System.Security.Cryptography.MLDsa.IsSupported" /> property to determine if the platform supports ML-DSA.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ImportEncryptedPkcs8PrivateKey(System.String,System.Byte[])">
      <summary>Imports an ML-DSA private key from a PKCS#8 EncryptedPrivateKeyInfo structure.</summary>
      <param name="password">The password to use when decrypting the key material.</param>
      <param name="source">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="password" /> or <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Imports an ML-DSA key from an encrypted RFC 7468 PEM-encoded string.</summary>
      <param name="source">The PEM text of the encrypted key to import.</param>
      <param name="passwordBytes">The bytes to use as a password when decrypting the key material.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="source" /> does not contain a PEM-encoded key with a recognized label.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains multiple PEM-encoded keys with a recognized label.</para>
      </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The password is incorrect.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> represent the key in a format that is not supported.</para>
        <para>-or-</para>
        <para>An error occurred while importing the key.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support ML-DSA. Callers can use the <see cref="P:System.Security.Cryptography.MLDsa.IsSupported" /> property to determine if the platform supports ML-DSA.</para>
      </exception>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Imports an ML-DSA key from an encrypted RFC 7468 PEM-encoded string.</summary>
      <param name="source">The PEM text of the encrypted key to import.</param>
      <param name="password">The password to use for decrypting the key material.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="source" /> does not contain a PEM-encoded key with a recognized label.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains multiple PEM-encoded keys with a recognized label.</para>
      </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The password is incorrect.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> represent the key in a format that is not supported.</para>
        <para>-or-</para>
        <para>An error occurred while importing the key.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support ML-DSA. Callers can use the <see cref="P:System.Security.Cryptography.MLDsa.IsSupported" /> property to determine if the platform supports ML-DSA.</para>
      </exception>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ImportFromEncryptedPem(System.String,System.Byte[])">
      <summary>Imports an ML-DSA key from an encrypted RFC 7468 PEM-encoded string.</summary>
      <param name="source">The PEM text of the encrypted key to import.</param>
      <param name="passwordBytes">The bytes to use as a password when decrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="passwordBytes" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ImportFromEncryptedPem(System.String,System.String)">
      <summary>Imports an ML-DSA key from an encrypted RFC 7468 PEM-encoded string.</summary>
      <param name="source">The PEM text of the encrypted key to import.</param>
      <param name="password">The password to use for decrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="password" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>Imports an ML-DSA key from an RFC 7468 PEM-encoded string.</summary>
      <param name="source">The text of the PEM key to import.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="source" /> contains an encrypted PEM-encoded key.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains multiple PEM-encoded ML-DSA keys.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains no PEM-encoded ML-DSA keys.</para>
      </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while importing the key.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
          The platform does not support ML-DSA. Callers can use the <see cref="P:System.Security.Cryptography.MLDsa.IsSupported" /> property to determine if the platform supports ML-DSA.</exception>
      <returns>The imported ML-DSA key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ImportFromPem(System.String)">
      <summary>Imports an ML-DSA key from an RFC 7468 PEM-encoded string.</summary>
      <param name="source">The text of the PEM key to import.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>The imported ML-DSA key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ImportMLDsaPrivateKey(System.Security.Cryptography.MLDsaAlgorithm,System.Byte[])">
      <summary>Imports an ML-DSA private key in the FIPS 204 private key format.</summary>
      <param name="algorithm">The specific ML-DSA algorithm for this key.</param>
      <param name="source">The bytes of a FIPS 204 private key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> or <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ImportMLDsaPrivateKey(System.Security.Cryptography.MLDsaAlgorithm,System.ReadOnlySpan{System.Byte})">
      <summary>Imports an ML-DSA private key in the FIPS 204 private key format.</summary>
      <param name="algorithm">The specific ML-DSA algorithm for this key.</param>
      <param name="source">The bytes of a FIPS 204 private key.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="algorithm" /> is not a valid ML-DSA algorithm identifier.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> is not the correct size for the specified algorithm.</para>
        <para>-or-</para>
        <para>An error occurred while importing the key.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ImportMLDsaPrivateSeed(System.Security.Cryptography.MLDsaAlgorithm,System.Byte[])">
      <summary>Imports an ML-DSA private key from its private seed value.</summary>
      <param name="algorithm">The specific ML-DSA algorithm for this key.</param>
      <param name="source">The bytes the key seed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> or <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ImportMLDsaPrivateSeed(System.Security.Cryptography.MLDsaAlgorithm,System.ReadOnlySpan{System.Byte})">
      <summary>Imports an ML-DSA private key from its private seed value.</summary>
      <param name="algorithm">The specific ML-DSA algorithm for this key.</param>
      <param name="source">The bytes the key seed.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="algorithm" /> is not a valid ML-DSA algorithm identifier.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> is not the correct size for the specified algorithm.</para>
        <para>-or-</para>
        <para>An error occurred while importing the key.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ImportMLDsaPublicKey(System.Security.Cryptography.MLDsaAlgorithm,System.Byte[])">
      <summary>Imports an ML-DSA public key in the FIPS 204 public key format.</summary>
      <param name="algorithm">The specific ML-DSA algorithm for this key.</param>
      <param name="source">The bytes of a FIPS 204 public key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> or <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ImportMLDsaPublicKey(System.Security.Cryptography.MLDsaAlgorithm,System.ReadOnlySpan{System.Byte})">
      <summary>Imports an ML-DSA public key in the FIPS 204 public key format.</summary>
      <param name="algorithm">The specific ML-DSA algorithm for this key.</param>
      <param name="source">The bytes of a FIPS 204 public key.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="algorithm" /> is not a valid ML-DSA algorithm identifier.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> is not the correct size for the specified algorithm.</para>
        <para>-or-</para>
        <para>An error occurred while importing the key.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ImportPkcs8PrivateKey(System.Byte[])">
      <summary>Imports an ML-DSA private key from a PKCS#8 PrivateKeyInfo structure.</summary>
      <param name="source">The bytes of a PKCS#8 PrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte})">
      <summary>Imports an ML-DSA private key from a PKCS#8 PrivateKeyInfo structure.</summary>
      <param name="source">The bytes of a PKCS#8 PrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 PrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The PrivateKeyInfo value does not represent an ML-DSA key.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains trailing data after the ASN.1 structure.</para>
        <para>-or-</para>
        <para>The algorithm-specific import failed.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support ML-DSA. Callers can use the <see cref="P:System.Security.Cryptography.MLDsa.IsSupported" /> property to determine if the platform supports ML-DSA.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ImportSubjectPublicKeyInfo(System.Byte[])">
      <summary>Imports an ML-DSA public key from an X.509 SubjectPublicKeyInfo structure.</summary>
      <param name="source">The bytes of an X.509 SubjectPublicKeyInfo structure in the ASN.1-DER encoding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte})">
      <summary>Imports an ML-DSA public key from an X.509 SubjectPublicKeyInfo structure.</summary>
      <param name="source">The bytes of an X.509 SubjectPublicKeyInfo structure in the ASN.1-DER encoding.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The contents of <paramref name="source" /> do not represent an ASN.1-DER-encoded X.509 SubjectPublicKeyInfo structure.</para>
        <para>-or-</para>
        <para>The SubjectPublicKeyInfo value does not represent an ML-DSA key.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains trailing data after the ASN.1 structure.</para>
        <para>-or-</para>
        <para>The algorithm-specific import failed.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support ML-DSA. Callers can use the <see cref="P:System.Security.Cryptography.MLDsa.IsSupported" /> property to determine if the platform supports ML-DSA.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.SignData(System.Byte[],System.Byte[])">
      <summary>Signs the specified data.</summary>
      <param name="data">The data to sign.</param>
      <param name="context">
        <para>An optional context-specific value to limit the scope of the signature.</para>
        <para>The default value is <see langword="null" />.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="context" /> has a length in excess of 255 bytes.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The instance represents only a public key.</para>
        <para>-or-</para>
        <para>An error occurred while signing the data.</para>
      </exception>
      <returns>ML-DSA signature for the specified data.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.SignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Signs the specified data, writing the signature into the provided buffer.</summary>
      <param name="data">The data to sign.</param>
      <param name="destination">
        <para>The buffer to receive the signature. Its length must be exactly <see cref="P:System.Security.Cryptography.MLDsaAlgorithm.SignatureSizeInBytes" />.</para>
      </param>
      <param name="context">
        <para>An optional context-specific value to limit the scope of the signature.</para>
        <para>The default value is an empty buffer.</para>
      </param>
      <exception cref="T:System.ArgumentException">The buffer in <paramref name="destination" /> is the incorrect length to receive the signature.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="context" /> has a <see cref="P:System.ReadOnlySpan`1.Length" /> in excess of 255 bytes.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The instance represents only a public key.</para>
        <para>-or-</para>
        <para>An error occurred while signing the data.</para>
      </exception>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.SignDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>
        <para>When overridden in a derived class, computes the signature of the specified data and context, writing it into the provided buffer.</para>
      </summary>
      <param name="data">The data to sign.</param>
      <param name="context">The signature context.</param>
      <param name="destination">The buffer to receive the signature, which will always be the exactly correct size for the algorithm.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while signing the data.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.SignMu(System.Byte[])">
      <summary>Signs the specified externally computed signature mu (μ) value.</summary>
      <param name="externalMu">The signature mu value to sign.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="externalMu" /> is <see langword="null" />.</exception>
      <returns>ML-DSA signature for the specified mu value.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.SignMu(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>
        <para>Signs the specified externally computed signature mu (μ) value, writing the signature into the provided buffer.</para>
      </summary>
      <param name="externalMu">The signature mu value to sign.</param>
      <param name="destination">
        <para>The buffer to receive the signature. Its length must be exactly <see cref="P:System.Security.Cryptography.MLDsaAlgorithm.SignatureSizeInBytes" />.</para>
      </param>
      <exception cref="T:System.ArgumentException">
        <para>The buffer in <paramref name="externalMu" /> is the incorrect length for the signature mu value.</para>
        <para>-or-</para>
        <para>The buffer in <paramref name="destination" /> is the incorrect length to receive the signature.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The instance represents only a public key.</para>
        <para>-or-</para>
        <para>An error occurred while signing the hash.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current platform does not support signing with an externally computed mu value.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.SignMu(System.ReadOnlySpan{System.Byte})">
      <summary>Signs the specified externally computed signature mu (μ) value.</summary>
      <param name="externalMu">The signature mu value to sign.</param>
      <exception cref="T:System.ArgumentException">The buffer in <paramref name="externalMu" /> is the incorrect length for the signature mu value.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The instance represents only a public key.</para>
        <para>-or-</para>
        <para>An error occurred while signing the hash.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">The current platform does not support signing with an externally computed mu value.</exception>
      <returns>ML-DSA signature for the specified mu value.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.SignMuCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>
        <para>When overridden in a derived class, computes the remainder of the signature from the precomputed mu (μ) value, writing it into the provided buffer.</para>
      </summary>
      <param name="externalMu">The signature mu value to sign.</param>
      <param name="destination">The buffer to receive the signature, which will always be the exactly correct size for the algorithm.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while computing the signature.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.SignPreHash(System.Byte[],System.String,System.Byte[])">
      <summary>Signs the specified hash using the FIPS 204 pre-hash signing algorithm.</summary>
      <param name="hash">The hash to sign.</param>
      <param name="hashAlgorithmOid">The OID of the hash algorithm used to create the hash.</param>
      <param name="context">
        <para>An optional context-specific value to limit the scope of the signature.</para>
        <para>The default value is <see langword="null" />.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="hash" /> or <paramref name="hashAlgorithmOid" /> is <see langword="null" />.</para>
        <para>An error occurred while verifying the data.</para>
        <para>
          <paramref name="hashAlgorithmOid" /> is not a well-formed OID.</para>
        <para>-or-</para>
        <para>
          <paramref name="hashAlgorithmOid" /> is a well-known algorithm and <paramref name="hash" /> does not have the expected length.</para>
        <para>-or-</para>
        <para>The instance represents only a public key.</para>
        <para>-or-</para>
        <para>An error occurred while signing the hash.</para>
      </exception>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.SignPreHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.String,System.ReadOnlySpan{System.Byte})">
      <summary>Signs the specified hash using the FIPS 204 pre-hash signing algorithm, writing the signature into the provided buffer.</summary>
      <param name="hash">The hash to sign.</param>
      <param name="destination">
        <para>The buffer to receive the signature. Its length must be exactly <see cref="P:System.Security.Cryptography.MLDsaAlgorithm.SignatureSizeInBytes" />.</para>
      </param>
      <param name="hashAlgorithmOid">The OID of the hash algorithm used to create the hash.</param>
      <param name="context">
        <para>An optional context-specific value to limit the scope of the signature.</para>
        <para>The default value is an empty buffer.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hashAlgorithmOid" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The buffer in <paramref name="destination" /> is the incorrect length to receive the signature.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="context" /> has a <see cref="P:System.ReadOnlySpan`1.Length" /> in excess of 255 bytes.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="hashAlgorithmOid" /> is not a well-formed OID.</para>
        <para>-or-</para>
        <para>
          <paramref name="hashAlgorithmOid" /> is a well-known algorithm and <paramref name="hash" /> does not have the expected length.</para>
        <para>-or-</para>
        <para>The instance represents only a public key.</para>
        <para>-or-</para>
        <para>An error occurred while signing the hash.</para>
      </exception>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.SignPreHashCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.String,System.Span{System.Byte})">
      <summary>
        <para>When overridden in a derived class, computes the pre-hash signature of the specified hash and context, writing it into the provided buffer.</para>
      </summary>
      <param name="hash">The hash to sign.</param>
      <param name="context">The signature context.</param>
      <param name="hashAlgorithmOid">The OID of the hash algorithm used to create the hash.</param>
      <param name="destination">The buffer to receive the signature, which will always be the exactly correct size for the algorithm.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while signing the hash.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a byte-based password.</para>
      </summary>
      <param name="passwordBytes">The bytes to use as a password when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <param name="destination">The buffer to receive the PKCS#8 EncryptedPrivateKeyInfo value.</param>
      <param name="bytesWritten">
        <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
        <para>This parameter is treated as uninitialized.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="pbeParameters" /> specifies a KDF that requires a char-based password.</para>
        <para>-or-</para>
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
        <para>-or-</para>
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a char-based password.</para>
      </summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <param name="destination">The buffer to receive the PKCS#8 EncryptedPrivateKeyInfo value.</param>
      <param name="bytesWritten">
        <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
        <para>This parameter is treated as uninitialized.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
        <para>-or-</para>
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.TryExportEncryptedPkcs8PrivateKey(System.String,System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>
        <p>Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a char-based password.</p>
      </summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <param name="destination">The buffer to receive the PKCS#8 EncryptedPrivateKeyInfo value.</param>
      <param name="bytesWritten">
        <p>When this method returns, contains the number of bytes written to the <code data-dev-comment-type="paramref">destination</code> buffer.</p>
        <p>This parameter is treated as uninitialized.</p>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="password" /> or <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <returns>
        <p>
          <code data-dev-comment-type="langword">true</code> if <code data-dev-comment-type="paramref">destination</code> was large enough to hold the result; otherwise, <code data-dev-comment-type="langword">false</code>.</p>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>Attempts to export the current key in the PKCS#8 PrivateKeyInfo format into the provided buffer.</para>
      </summary>
      <param name="destination">The buffer to receive the PKCS#8 PrivateKeyInfo value.</param>
      <param name="bytesWritten">
        <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
        <para>This parameter is treated as uninitialized.</para>
      </param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.TryExportPkcs8PrivateKeyCore(System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>When overridden in a derived class, attempts to export the current key in the PKCS#8 PrivateKeyInfo format into the provided buffer.</para>
      </summary>
      <param name="destination">The buffer to receive the PKCS#8 PrivateKeyInfo value.</param>
      <param name="bytesWritten">When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>Attempts to export the public-key portion of the current key in the X.509 SubjectPublicKeyInfo format into the provided buffer.</para>
      </summary>
      <param name="destination">The buffer to receive the X.509 SubjectPublicKeyInfo value.</param>
      <param name="bytesWritten">
        <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
        <para>This parameter is treated as uninitialized.</para>
      </param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.VerifyData(System.Byte[],System.Byte[],System.Byte[])">
      <summary>Verifies that the specified signature is valid for this key and the provided data.</summary>
      <param name="data">The data to verify.</param>
      <param name="signature">The signature to verify.</param>
      <param name="context">
        <para>The context value which was provided during signing.</para>
        <para>The default value is <see langword="null" />.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="signature" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="context" /> has a length in excess of 255 bytes.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>An error occurred while verifying the data.</para>
      </exception>
      <returns>
        <see langword="true" /> if the signature validates the data; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Verifies that the specified signature is valid for this key and the provided data.</summary>
      <param name="data">The data to verify.</param>
      <param name="signature">The signature to verify.</param>
      <param name="context">
        <para>The context value which was provided during signing.</para>
        <para>The default value is an empty buffer.</para>
      </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="context" /> has a <see cref="P:System.ReadOnlySpan`1.Length" /> in excess of 255 bytes.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The instance represents only a public key.</para>
        <para>-or-</para>
        <para>An error occurred while verifying the data.</para>
      </exception>
      <returns>
        <see langword="true" /> if the signature validates the data; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.VerifyDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>When overridden in a derived class, verifies the signature of the specified data and context.</summary>
      <param name="data">The data to verify.</param>
      <param name="context">The signature context.</param>
      <param name="signature">The signature to verify.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while verifying the data.</exception>
      <returns>
        <see langword="true" /> if the signature validates the data; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.VerifyMu(System.Byte[],System.Byte[])">
      <summary>Verifies that a digital signature is valid for the provided externally computed signature mu (μ) value.</summary>
      <param name="externalMu">The signature mu value.</param>
      <param name="signature">The signature to verify.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="externalMu" /> or <paramref name="signature" /> is <see langword="null" />.</exception>
      <returns>
        <p>
          <code data-dev-comment-type="langword">true</code> if the digital signature is valid for the provided mu value; otherwise, <code data-dev-comment-type="langword">false</code>.</p>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.VerifyMu(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Verifies that a digital signature is valid for the provided externally computed signature mu (μ) value.</summary>
      <param name="externalMu">The signature mu value.</param>
      <param name="signature">The signature to verify.</param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while verifying the mu value.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current platform does not support verification with an externally computed mu value.</exception>
      <returns>
        <para>
          <see langword="true" /> if the digital signature is valid for the provided mu value; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.VerifyMuCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>
        <para>When overridden in a derived class, verifies that a digital signature is valid for the provided externally computed signature mu (μ) value.</para>
      </summary>
      <param name="externalMu">The signature mu value.</param>
      <param name="signature">The signature to verify.</param>
      <returns>
        <see langword="true" /> if the mu value is valid; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.VerifyPreHash(System.Byte[],System.Byte[],System.String,System.Byte[])">
      <summary>Verifies that the specified FIPS 204 pre-hash signature is valid for this key and the provided hash.</summary>
      <param name="hash">The hash to verify.</param>
      <param name="signature">The signature to verify.</param>
      <param name="hashAlgorithmOid">The OID of the hash algorithm used to create the hash.</param>
      <param name="context">
        <para>The context value which was provided during signing.</para>
        <para>The default value is <see langword="null" />.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> or <paramref name="signature" /> or <paramref name="hashAlgorithmOid" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="context" /> has a length in excess of 255 bytes.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="hashAlgorithmOid" /> is not a well-formed OID.</para>
        <para>-or-</para>
        <para>
          <paramref name="hashAlgorithmOid" /> is a well-known algorithm and <paramref name="hash" /> does not have the expected length.</para>
        <para>-or-</para>
        <para>An error occurred while verifying the hash.</para>
      </exception>
      <returns>
        <see langword="true" /> if the signature validates the hash; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.VerifyPreHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.String,System.ReadOnlySpan{System.Byte})">
      <summary>Verifies that the specified FIPS 204 pre-hash signature is valid for this key and the provided hash.</summary>
      <param name="hash">The hash to verify.</param>
      <param name="signature">The signature to verify.</param>
      <param name="hashAlgorithmOid">The OID of the hash algorithm used to create the hash.</param>
      <param name="context">
        <para>The context value which was provided during signing.</para>
        <para>The default value is an empty buffer.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hashAlgorithmOid" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="context" /> has a <see cref="P:System.ReadOnlySpan`1.Length" /> in excess of 255 bytes.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="hashAlgorithmOid" /> is not a well-formed OID.</para>
        <para>-or-</para>
        <para>
          <paramref name="hashAlgorithmOid" /> is a well-known algorithm and <paramref name="hash" /> does not have the expected length.</para>
        <para>-or-</para>
        <para>An error occurred while verifying the hash.</para>
      </exception>
      <returns>
        <see langword="true" /> if the signature validates the hash; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsa.VerifyPreHashCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.String,System.ReadOnlySpan{System.Byte})">
      <summary>When overridden in a derived class, verifies the pre-hash signature of the specified hash and context.</summary>
      <param name="hash">The data to verify.</param>
      <param name="context">The signature context.</param>
      <param name="hashAlgorithmOid">The OID of the hash algorithm used to create the hash.</param>
      <param name="signature">The signature to verify.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while verifying the hash.</exception>
      <returns>
        <see langword="true" /> if the signature validates the hash; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLDsa.Algorithm">
      <summary>Gets the specific ML-DSA algorithm for this key.</summary>
      <returns>The specific ML-DSA algorithm for this key.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLDsa.IsSupported">
      <summary>Gets a value indicating whether the current platform supports ML-DSA.</summary>
      <returns>
        <see langword="true" /> if the current platform supports ML-DSA; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.MLDsaAlgorithm">
      <summary>Represents a specific algorithm within the ML-DSA family.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MLDsaAlgorithm.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <code data-dev-comment-type="langword">true</code> if the specified object  is equal to the current object; otherwise, <code data-dev-comment-type="langword">false</code>.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsaAlgorithm.Equals(System.Security.Cryptography.MLDsaAlgorithm)">
      <summary>Compares two <see cref="T:System.Security.Cryptography.MLDsaAlgorithm" /> objects.</summary>
      <param name="other">An object to be compared to the current <see cref="T:System.Security.Cryptography.MLDsaAlgorithm" /> object.</param>
      <returns>
        <see langword="true" /> if the objects are considered equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsaAlgorithm.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsaAlgorithm.op_Equality(System.Security.Cryptography.MLDsaAlgorithm,System.Security.Cryptography.MLDsaAlgorithm)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.MLDsaAlgorithm" /> objects specify the same algorithm name.</summary>
      <param name="left">An object that specifies an algorithm name.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
      <returns>
        <see langword="true" /> if the objects are considered equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsaAlgorithm.op_Inequality(System.Security.Cryptography.MLDsaAlgorithm,System.Security.Cryptography.MLDsaAlgorithm)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.MLDsaAlgorithm" /> objects do not specify the same algorithm name.</summary>
      <param name="left">An object that specifies an algorithm name.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
      <returns>
        <see langword="true" /> if the objects are not considered equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLDsaAlgorithm.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLDsaAlgorithm.MLDsa44">
      <summary>Gets an ML-DSA algorithm identifier for the ML-DSA-44 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-44 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLDsaAlgorithm.MLDsa65">
      <summary>Gets an ML-DSA algorithm identifier for the ML-DSA-65 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-65 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLDsaAlgorithm.MLDsa87">
      <summary>Gets an ML-DSA algorithm identifier for the ML-DSA-87 algorithm.</summary>
      <returns>An ML-DSA algorithm identifier for the ML-DSA-87 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLDsaAlgorithm.MuSizeInBytes">
      <summary>Gets the size, in bytes, of the mu (μ) value for the current ML-DSA algorithm.</summary>
      <returns>The size, in bytes, of the mu (μ) value for the current ML-DSA algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLDsaAlgorithm.Name">
      <summary>Gets the underlying string representation of the algorithm name.</summary>
      <returns>The underlying string representation of the algorithm name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLDsaAlgorithm.PrivateKeySizeInBytes">
      <summary>Gets the size, in bytes, of the ML-DSA private key for the current ML-DSA algorithm.</summary>
      <returns>The size, in bytes, of the ML-DSA private key for the current ML-DSA algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLDsaAlgorithm.PrivateSeedSizeInBytes">
      <summary>Gets the size, in bytes, of the ML-DSA private seed for the current ML-DSA algorithm.</summary>
      <returns>The size, in bytes, of the ML-DSA private seed for the current ML-DSA algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLDsaAlgorithm.PublicKeySizeInBytes">
      <summary>Gets the size of the ML-DSA public key for the current ML-DSA algorithm.</summary>
      <returns>The size, in bytes, of the ML-DSA public key for the current ML-DSA algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLDsaAlgorithm.SignatureSizeInBytes">
      <summary>Gets the size, in bytes, of the signature for the current ML-DSA algorithm.</summary>
      <returns>The size, in bytes, of the signature for the current ML-DSA algorithm.</returns>
    </member>
    <member name="T:System.Security.Cryptography.MLDsaCng">
      <summary>Provides a Cryptography Next Generation (CNG) implementation of the Module-Lattice-Based Digital Signature Algorithm (ML-DSA).</summary>
    </member>
    <member name="M:System.Security.Cryptography.MLDsaCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.MLDsaCng" /> class by using the specified <see cref="T:System.Security.Cryptography.CngKey" />.</summary>
      <param name="key">The key that will be used as input to the cryptographic operations performed by the current object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> does not specify a Module-Lattice-Based Digital Signature Algorithm (ML-DSA) group.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) classes are not supported on this system.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLDsaCng.GetKey">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngKey" /> representing the key used by the current instance.</summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
    </member>
    <member name="T:System.Security.Cryptography.MLKem">
      <summary>Represents an ML-KEM key.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.#ctor(System.Security.Cryptography.MLKemAlgorithm)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.MLKem" /> class.</summary>
      <param name="algorithm">The specific ML-KEM algorithm for this key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.Decapsulate(System.Byte[])">
      <summary>Decapsulates a shared secret from a provided ciphertext.</summary>
      <param name="ciphertext">The ciphertext.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred during decapsulation.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ciphertext" /> is not the correct size.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ciphertext" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      <returns>The shared secret.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.Decapsulate(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>Decapsulates a shared secret from a provided ciphertext.</summary>
      <param name="ciphertext">The ciphertext.</param>
      <param name="sharedSecret">The buffer to receive the shared secret.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred during decapsulation.</exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="ciphertext" /> is not the correct size.</para>
        <para>-or-</para>
        <para>
          <paramref name="sharedSecret" /> is not the correct size.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.DecapsulateCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>When overridden in a derived class, decapsulates a shared secret from a provided ciphertext.</summary>
      <param name="ciphertext">The ciphertext.</param>
      <param name="sharedSecret">The buffer to receive the shared secret.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred during decapsulation.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Security.Cryptography.MLKem" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.Dispose(System.Boolean)">
      <summary>
        <para>Called by the <c>Dispose()</c> and <c>Finalize()</c> methods to release the managed and unmanaged resources used by the current instance of the <see cref="T:System.Security.Cryptography.MLKem" /> class.</para>
      </summary>
      <param name="disposing">
        <para>
          <see langword="true" /> to release managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</para>
      </param>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.Encapsulate(System.Byte[]@,System.Byte[]@)">
      <summary>Creates an encapsulation ciphertext and shared secret.</summary>
      <param name="ciphertext">When this method returns, contains the ciphertext.</param>
      <param name="sharedSecret">When this method returns, contains the shared secret.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>An error occurred during encapsulation.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.Encapsulate(System.Span{System.Byte},System.Span{System.Byte})">
      <summary>Creates an encapsulation ciphertext and shared secret, writing them into the provided buffers.</summary>
      <param name="ciphertext">The buffer to receive the ciphertext.</param>
      <param name="sharedSecret">The buffer to receive the shared secret.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>An error occurred during encapsulation.</para>
        <para>-or -</para>
        <para>
          <paramref name="ciphertext" /> overlaps with <paramref name="sharedSecret" />.</para>
      </exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="ciphertext" /> is not the correct size.</para>
        <para>-or-</para>
        <para>
          <paramref name="sharedSecret" /> is not the correct size.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.EncapsulateCore(System.Span{System.Byte},System.Span{System.Byte})">
      <summary>
        <para>When overridden in a derived class, creates an encapsulation ciphertext and shared secret, writing them into the provided buffers.</para>
      </summary>
      <param name="ciphertext">The buffer to receive the ciphertext.</param>
      <param name="sharedSecret">The buffer to receive the shared secret.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred during encapsulation.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ExportDecapsulationKey">
      <summary>Exports the decapsulation key.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The current instance cannot export a decapsulation key.</para>
        <para>-or-</para>
        <para>An error occurred while importing the key.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      <returns>The decapsulation key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ExportDecapsulationKey(System.Span{System.Byte})">
      <summary>Exports the decapsulation key into the provided buffer.</summary>
      <param name="destination">The buffer to receive the decapsulation key.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> is the incorrect length to receive the decapsulation key.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The current instance cannot export a decapsulation key.</para>
        <para>-or-</para>
        <para>An error occurred while importing the key.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ExportDecapsulationKeyCore(System.Span{System.Byte})">
      <summary>When overridden in a derived class, exports the decapsulation key into the provided buffer.</summary>
      <param name="destination">The buffer to receive the decapsulation key.</param>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ExportEncapsulationKey">
      <summary>Exports the encapsulation key.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred exporting the encapsulation key.</exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      <returns>The encapsulation key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ExportEncapsulationKey(System.Span{System.Byte})">
      <summary>Exports the encapsulation key into the provided buffer.</summary>
      <param name="destination">The buffer to receive the encapsulation key.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> is the incorrect length to receive the encapsulation key.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred exporting the encapsulation key.</exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ExportEncapsulationKeyCore(System.Span{System.Byte})">
      <summary>When overridden in a derived class, exports the encapsulation key into the provided buffer.</summary>
      <param name="destination">The buffer to receive the encapsulation key.</param>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters)">
      <summary>Exports the current key in the PKCS#8 EncryptedPrivateKeyInfo format with a byte-based password.</summary>
      <param name="passwordBytes">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
        <para>-or-</para>
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
      </exception>
      <returns>A byte array containing the PKCS#8 EncryptedPrivateKeyInfo representation of this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters)">
      <summary>Exports the current key in the PKCS#8 EncryptedPrivateKeyInfo format with a char-based password.</summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
        <para>-or-</para>
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
      </exception>
      <returns>A byte array containing the PKCS#8 EncryptedPrivateKeyInfo representation of this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ExportEncryptedPkcs8PrivateKey(System.String,System.Security.Cryptography.PbeParameters)">
      <summary>Exports the current key in the PKCS#8 EncryptedPrivateKeyInfo format with a char-based password.</summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> or <paramref name="password" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
        <para>-or-</para>
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
      </exception>
      <returns>A byte array containing the PKCS#8 EncryptedPrivateKeyInfo representation of this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ExportEncryptedPkcs8PrivateKeyPem(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters)">
      <summary>
        <para>Exports the current key in a PEM-encoded representation of the PKCS#8 EncryptedPrivateKeyInfo representation of this key, using a byte-based password.</para>
      </summary>
      <param name="passwordBytes">The bytes to use as a password when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="pbeParameters" /> specifies a KDF that requires a char-based password.</para>
        <para>-or-</para>
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>A string containing the PEM-encoded PKCS#8 EncryptedPrivateKeyInfo.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ExportEncryptedPkcs8PrivateKeyPem(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters)">
      <summary>
        <para>Exports the current key in a PEM-encoded representation of the PKCS#8 EncryptedPrivateKeyInfo representation of this key, using a char-based password.</para>
      </summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>A string containing the PEM-encoded PKCS#8 EncryptedPrivateKeyInfo.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ExportEncryptedPkcs8PrivateKeyPem(System.String,System.Security.Cryptography.PbeParameters)">
      <summary>
        <para>Exports the current key in a PEM-encoded representation of the PKCS#8 EncryptedPrivateKeyInfo representation of this key, using a string password.</para>
      </summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="password" /> or <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>A string containing the PEM-encoded PKCS#8 EncryptedPrivateKeyInfo.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ExportPkcs8PrivateKey">
      <summary>Export the current key in the PKCS#8 PrivateKeyInfo format.</summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>A byte array containing the PKCS#8 PrivateKeyInfo representation of this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ExportPkcs8PrivateKeyPem">
      <summary>Exports the current key in a PEM-encoded representation of the PKCS#8 PrivateKeyInfo format.</summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>A string containing the PEM-encoded representation of the PKCS#8 PrivateKeyInfo.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ExportPrivateSeed">
      <summary>Exports the private seed.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The current instance cannot export a seed.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      <returns>The private seed.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ExportPrivateSeed(System.Span{System.Byte})">
      <summary>Exports the private seed into the provided buffer.</summary>
      <param name="destination">The buffer to receive the private seed.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> is the incorrect length to receive the private seed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The current instance cannot export a seed.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ExportPrivateSeedCore(System.Span{System.Byte})">
      <summary>When overridden in a derived class, exports the private seed into the provided buffer.</summary>
      <param name="destination">The buffer to receive the private seed.</param>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ExportSubjectPublicKeyInfo">
      <summary>Exports the public-key portion of the current key in the X.509 SubjectPublicKeyInfo format.</summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>A byte array containing the X.509 SubjectPublicKeyInfo representation of the public-key portion of this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ExportSubjectPublicKeyInfoPem">
      <summary>
        <para>Exports the public-key portion of the current key in a PEM-encoded representation of the X.509 SubjectPublicKeyInfo format.</para>
      </summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>A string containing the PEM-encoded representation of the X.509 SubjectPublicKeyInfo representation of the public-key portion of this key.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.GenerateKey(System.Security.Cryptography.MLKemAlgorithm)">
      <summary>Generates a new ML-KEM key.</summary>
      <param name="algorithm">An algorithm identifying what kind of ML-KEM key to generate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred generating the ML-KEM key.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support ML-KEM. Callers can use the <see cref="P:System.Security.Cryptography.MLKem.IsSupported" /> property to determine if the platform supports ML-KEM.</para>
      </exception>
      <returns>The generated key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ImportDecapsulationKey(System.Security.Cryptography.MLKemAlgorithm,System.Byte[])">
      <summary>Imports an ML-KEM key from a decapsulation key.</summary>
      <param name="algorithm">The specific ML-KEM algorithm for this key.</param>
      <param name="source">The decapsulation key.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> has a length that is not valid for the ML-KEM algorithm.</exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="algorithm" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while importing the key.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support ML-KEM. Callers can use the <see cref="P:System.Security.Cryptography.MLKem.IsSupported" /> property to determine if the platform supports ML-KEM.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ImportDecapsulationKey(System.Security.Cryptography.MLKemAlgorithm,System.ReadOnlySpan{System.Byte})">
      <summary>Imports an ML-KEM key from a decapsulation key.</summary>
      <param name="algorithm">The specific ML-KEM algorithm for this key.</param>
      <param name="source">The decapsulation key.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> has a length that is not valid for the ML-KEM algorithm.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while importing the key.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support ML-KEM. Callers can use the <see cref="P:System.Security.Cryptography.MLKem.IsSupported" /> property to determine if the platform supports ML-KEM.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ImportEncapsulationKey(System.Security.Cryptography.MLKemAlgorithm,System.Byte[])">
      <summary>Imports an ML-KEM key from a encapsulation key.</summary>
      <param name="algorithm">The specific ML-KEM algorithm for this key.</param>
      <param name="source">The encapsulation key.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> has a length that is not valid for the ML-KEM algorithm.</exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="algorithm" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while importing the key.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support ML-KEM. Callers can use the <see cref="P:System.Security.Cryptography.MLKem.IsSupported" /> property to determine if the platform supports ML-KEM.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ImportEncapsulationKey(System.Security.Cryptography.MLKemAlgorithm,System.ReadOnlySpan{System.Byte})">
      <summary>Imports an ML-KEM key from a encapsulation key.</summary>
      <param name="algorithm">The specific ML-KEM algorithm for this key.</param>
      <param name="source">The encapsulation key.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> has a length that is not valid for the ML-KEM algorithm.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is <see langword="null" /></exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while importing the key.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support ML-KEM. Callers can use the <see cref="P:System.Security.Cryptography.MLKem.IsSupported" /> property to determine if the platform supports ML-KEM.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Imports an ML-KEM private key from a PKCS#8 EncryptedPrivateKeyInfo structure.</summary>
      <param name="passwordBytes">The bytes to use as a password when decrypting the key material.</param>
      <param name="source">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The specified password is incorrect.</para>
        <para>-or-</para>
        <para>The EncryptedPrivateKeyInfo indicates the Key Derivation Function (KDF) to apply is the legacy PKCS#12 KDF, which requires <see cref="T:System.Char" />-based passwords.</para>
        <para>-or-</para>
        <para>The value does not represent an ML-KEM key.</para>
        <para>-or-</para>
        <para>The algorithm-specific import failed.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support ML-KEM. Callers can use the <see cref="P:System.Security.Cryptography.MLKem.IsSupported" /> property to determine if the platform supports ML-KEM.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Imports an ML-KEM private key from a PKCS#8 EncryptedPrivateKeyInfo structure.</summary>
      <param name="password">The password to use when decrypting the key material.</param>
      <param name="source">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The specified password is incorrect.</para>
        <para>-or-</para>
        <para>The value does not represent an ML-KEM key.</para>
        <para>-or-</para>
        <para>The algorithm-specific import failed.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support ML-KEM. Callers can use the <see cref="P:System.Security.Cryptography.MLKem.IsSupported" /> property to determine if the platform supports ML-KEM.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ImportEncryptedPkcs8PrivateKey(System.String,System.Byte[])">
      <summary>Imports an ML-KEM private key from a PKCS#8 EncryptedPrivateKeyInfo structure.</summary>
      <param name="password">The password to use when decrypting the key material.</param>
      <param name="source">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="password" /> or <paramref name="source" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The specified password is incorrect.</para>
        <para>-or-</para>
        <para>The value does not represent an ML-KEM key.</para>
        <para>-or-</para>
        <para>The algorithm-specific import failed.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support ML-KEM. Callers can use the <see cref="P:System.Security.Cryptography.MLKem.IsSupported" /> property to determine if the platform supports ML-KEM.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Imports an ML-KEM key from an encrypted RFC 7468 PEM-encoded string.</summary>
      <param name="source">The PEM text of the encrypted key to import.</param>
      <param name="passwordBytes">The password to use for decrypting the key material.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="source" /> does not contain a PEM-encoded key with a recognized label.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains multiple PEM-encoded keys with a recognized label.</para>
      </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The password is incorrect.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> represent the key in a format that is not supported.</para>
        <para>-or-</para>
        <para>An error occurred while importing the key.</para>
      </exception>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Imports an ML-KEM key from an encrypted RFC 7468 PEM-encoded string.</summary>
      <param name="source">The PEM text of the encrypted key to import.</param>
      <param name="password">The password to use for decrypting the key material.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="source" /> does not contain a PEM-encoded key with a recognized label.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains multiple PEM-encoded keys with a recognized label.</para>
      </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The password is incorrect.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> represent the key in a format that is not supported.</para>
        <para>-or-</para>
        <para>An error occurred while importing the key.</para>
      </exception>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ImportFromEncryptedPem(System.String,System.Byte[])">
      <summary>Imports an ML-KEM key from an encrypted RFC 7468 PEM-encoded string.</summary>
      <param name="source">The PEM text of the encrypted key to import.</param>
      <param name="passwordBytes">The password to use for decrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="passwordBytes" /> is <see langword="null" /></exception>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ImportFromEncryptedPem(System.String,System.String)">
      <summary>Imports an ML-KEM key from an encrypted RFC 7468 PEM-encoded string.</summary>
      <param name="source">The PEM text of the encrypted key to import.</param>
      <param name="password">The password to use for decrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="password" /> is <see langword="null" /></exception>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>Imports an ML-KEM key from an RFC 7468 PEM-encoded string.</summary>
      <param name="source">The text of the PEM key to import.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="source" /> contains an encrypted PEM-encoded key.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains multiple PEM-encoded ML-KEM keys.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains no PEM-encoded ML-KEM keys.</para>
      </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while importing the key.</exception>
      <returns>The imported ML-KEM key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ImportFromPem(System.String)">
      <summary>Imports an ML-KEM key from an RFC 7468 PEM-encoded string.</summary>
      <param name="source">The text of the PEM key to import.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" /></exception>
      <returns>The imported ML-KEM key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ImportPkcs8PrivateKey(System.Byte[])">
      <summary>Imports an ML-KEM private key from a PKCS#8 PrivateKeyInfo structure.</summary>
      <param name="source">The bytes of a PKCS#8 PrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" /></exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte})">
      <summary>Imports an ML-KEM private key from a PKCS#8 PrivateKeyInfo structure.</summary>
      <param name="source">The bytes of a PKCS#8 PrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 PrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The PrivateKeyInfo value does not represent an ML-KEM key.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains trailing data after the ASN.1 structure.</para>
        <para>-or-</para>
        <para>The algorithm-specific import failed.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support ML-KEM. Callers can use the <see cref="P:System.Security.Cryptography.MLKem.IsSupported" /> property to determine if the platform supports ML-KEM.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ImportPrivateSeed(System.Security.Cryptography.MLKemAlgorithm,System.Byte[])">
      <summary>Imports an ML-KEM key from its private seed value.</summary>
      <param name="algorithm">The specific ML-KEM algorithm for this key.</param>
      <param name="source">The private seed.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="source" /> has a length that is not the <see cref="P:System.Security.Cryptography.MLKemAlgorithm.PrivateSeedSizeInBytes" /> from <paramref name="algorithm" />.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <paramref name="algorithm" /> is <see langword="null" />.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> is <see langword="null" />.</para>
      </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while importing the key.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support ML-KEM. Callers can use the <see cref="P:System.Security.Cryptography.MLKem.IsSupported" /> property to determine if the platform supports ML-KEM.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ImportPrivateSeed(System.Security.Cryptography.MLKemAlgorithm,System.ReadOnlySpan{System.Byte})">
      <summary>Imports an ML-KEM key from its private seed value.</summary>
      <param name="algorithm">The specific ML-KEM algorithm for this key.</param>
      <param name="source">The private seed.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="source" /> has a length that is not the <see cref="P:System.Security.Cryptography.MLKemAlgorithm.PrivateSeedSizeInBytes" /> from <paramref name="algorithm" />.</para>
      </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while importing the key.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support ML-KEM. Callers can use the <see cref="P:System.Security.Cryptography.MLKem.IsSupported" /> property to determine if the platform supports ML-KEM.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ImportSubjectPublicKeyInfo(System.Byte[])">
      <summary>Imports an ML-KEM encapsulation key from an X.509 SubjectPublicKeyInfo structure.</summary>
      <param name="source">The bytes of an X.509 SubjectPublicKeyInfo structure in the ASN.1-DER encoding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" /></exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte})">
      <summary>Imports an ML-KEM encapsulation key from an X.509 SubjectPublicKeyInfo structure.</summary>
      <param name="source">The bytes of an X.509 SubjectPublicKeyInfo structure in the ASN.1-DER encoding.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The contents of <paramref name="source" /> do not represent an ASN.1-DER-encoded X.509 SubjectPublicKeyInfo structure.</para>
        <para>-or-</para>
        <para>The SubjectPublicKeyInfo value does not represent an ML-KEM key.</para>
        <para>-or-</para>
        <para>The algorithm-specific import failed.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support ML-KEM. Callers can use the <see cref="P:System.Security.Cryptography.MLKem.IsSupported" /> property to determine if the platform supports ML-KEM.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a byte-based password.</para>
      </summary>
      <param name="passwordBytes">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <param name="destination">The buffer to receive the PKCS#8 EncryptedPrivateKeyInfo value.</param>
      <param name="bytesWritten">
        <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
        <para>This parameter is treated as uninitialized.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
        <para>-or-</para>
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
      </exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a char-based password.</para>
      </summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <param name="destination">The buffer to receive the PKCS#8 EncryptedPrivateKeyInfo value.</param>
      <param name="bytesWritten">
        <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
        <para>This parameter is treated as uninitialized.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
        <para>-or-</para>
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
      </exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.TryExportEncryptedPkcs8PrivateKey(System.String,System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a char-based password.</para>
      </summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <param name="destination">The buffer to receive the PKCS#8 EncryptedPrivateKeyInfo value.</param>
      <param name="bytesWritten">
        <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
        <para>This parameter is treated as uninitialized.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="password" /> or <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
        <para>-or-</para>
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
      </exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>Attempts to export the current key in the PKCS#8 PrivateKeyInfo format into the provided buffer.</para>
      </summary>
      <param name="destination">The buffer to receive the PKCS#8 PrivateKeyInfo value.</param>
      <param name="bytesWritten">
        <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
        <para>This parameter is treated as uninitialized.</para>
      </param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.TryExportPkcs8PrivateKeyCore(System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>When overridden in a derived class, attempts to export the current key in the PKCS#8 PrivateKeyInfo format into the provided buffer.</para>
      </summary>
      <param name="destination">The buffer to receive the PKCS#8 PrivateKeyInfo value.</param>
      <param name="bytesWritten">When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKem.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>Attempts to export the public-key portion of the current key in the X.509 SubjectPublicKeyInfo format into the provided buffer.</para>
      </summary>
      <param name="destination">The buffer to receive the X.509 SubjectPublicKeyInfo value.</param>
      <param name="bytesWritten">
        <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
        <para>This parameter is treated as uninitialized.</para>
      </param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="P:System.Security.Cryptography.MLKem.Algorithm">
      <summary>Gets the specific ML-KEM algorithm for this key.</summary>
      <returns>The specific ML-KEM algorithm for this key.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLKem.IsSupported">
      <summary>Gets a value that indicates whether the algorithm is supported on the current platform.</summary>
      <returns>
        <see langword="true" /> if the algorithm is supported; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.MLKemAlgorithm">
      <summary>Represents a specific algorithm within the ML-KEM family.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MLKemAlgorithm.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <code data-dev-comment-type="langword">true</code> if the specified object  is equal to the current object; otherwise, <code data-dev-comment-type="langword">false</code>.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKemAlgorithm.Equals(System.Security.Cryptography.MLKemAlgorithm)">
      <summary>Compares two <see cref="T:System.Security.Cryptography.MLKemAlgorithm" /> objects.</summary>
      <param name="other">An object to be compared to the current <see cref="T:System.Security.Cryptography.MLKemAlgorithm" /> object.</param>
      <returns>
        <see langword="true" /> if the objects are considered equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKemAlgorithm.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKemAlgorithm.op_Equality(System.Security.Cryptography.MLKemAlgorithm,System.Security.Cryptography.MLKemAlgorithm)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.MLKemAlgorithm" /> objects specify the same algorithm name.</summary>
      <param name="left">An object that specifies an algorithm name.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
      <returns>
        <see langword="true" /> if the objects are considered equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKemAlgorithm.op_Inequality(System.Security.Cryptography.MLKemAlgorithm,System.Security.Cryptography.MLKemAlgorithm)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.MLKemAlgorithm" /> objects do not specify the same algorithm name.</summary>
      <param name="left">An object that specifies an algorithm name.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
      <returns>
        <see langword="true" /> if the objects are not considered equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MLKemAlgorithm.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLKemAlgorithm.CiphertextSizeInBytes">
      <summary>Gets the size of the ciphertext for the algorithm, in bytes.</summary>
      <returns>The size of the ciphertext for the algorithm, in bytes.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLKemAlgorithm.DecapsulationKeySizeInBytes">
      <summary>Gets the size of the decapsulation key for the algorithm, in bytes.</summary>
      <returns>The size of the decapsulation key for the algorithm, in bytes.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLKemAlgorithm.EncapsulationKeySizeInBytes">
      <summary>Gets the size of the encapsulation key for the algorithm, in bytes.</summary>
      <returns>The size of the encapsulation key for the algorithm, in bytes.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLKemAlgorithm.MLKem1024">
      <summary>Gets an ML-KEM algorithm identifier for the ML-KEM-1024 algorithm.</summary>
      <returns>An ML-KEM algorithm identifier for the ML-KEM-1024 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLKemAlgorithm.MLKem512">
      <summary>Gets an ML-KEM algorithm identifier for the ML-KEM-512 algorithm.</summary>
      <returns>An ML-KEM algorithm identifier for the ML-KEM-512 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLKemAlgorithm.MLKem768">
      <summary>Gets an ML-KEM algorithm identifier for the ML-KEM-768 algorithm.</summary>
      <returns>An ML-KEM algorithm identifier for the ML-KEM-768 algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLKemAlgorithm.Name">
      <summary>Gets the name of the algorithm.</summary>
      <returns>The algorithm name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLKemAlgorithm.PrivateSeedSizeInBytes">
      <summary>Gets the size of the private seed for the algorithm, in bytes.</summary>
      <returns>The size of the private seed for the algorithm, in bytes.</returns>
    </member>
    <member name="P:System.Security.Cryptography.MLKemAlgorithm.SharedSecretSizeInBytes">
      <summary>Gets the size of the shared secret for the algorithm, in bytes.</summary>
      <returns>The size of the shared secret for the algorithm, in bytes.</returns>
    </member>
    <member name="T:System.Security.Cryptography.MLKemCng">
      <summary>
        <para>Provides a Cryptography Next Generation (CNG) implementation of the Module-Lattice-Based Key-Encapsulation Mechanism (ML-KEM).</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.MLKemCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.MLKemCng" /> class by using the specified <see cref="T:System.Security.Cryptography.CngKey" />.</summary>
      <param name="key">The key that will be used as input to the cryptographic operations performed by the current object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="key" /> does not specify a Module-Lattice-Based Key-Encapsulation Mechanism (ML-KEM) algorithm group.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) classes are not supported on this system.</exception>
    </member>
    <member name="M:System.Security.Cryptography.MLKemCng.GetKey">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngKey" /> representing the key used by the current instance.</summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
    </member>
    <member name="T:System.Security.Cryptography.SlhDsa">
      <summary>Represents an SLH-DSA key.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.#ctor(System.Security.Cryptography.SlhDsaAlgorithm)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SlhDsa" /> class.</summary>
      <param name="algorithm">The specific SLH-DSA algorithm for this key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Security.Cryptography.SlhDsa" /> class.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.Dispose(System.Boolean)">
      <summary>
        <para>Called by the <c>Dispose()</c> and <c>Finalize()</c> methods to release the managed and unmanaged resources used by the current instance of the <see cref="T:System.Security.Cryptography.SlhDsa" /> class.</para>
      </summary>
      <param name="disposing">
        <para>
          <see langword="true" /> to release managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</para>
      </param>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters)">
      <summary>Exports the current key in the PKCS#8 EncryptedPrivateKeyInfo format with a byte-based password.</summary>
      <param name="passwordBytes">The bytes to use as a password when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="pbeParameters" /> specifies a KDF that requires a char-based password.</para>
        <para>-or-</para>
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
        <para>-or-</para>
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>A byte array containing the PKCS#8 EncryptedPrivateKeyInfo representation of the this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters)">
      <summary>Exports the current key in the PKCS#8 EncryptedPrivateKeyInfo format with a char-based password.</summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
        <para>-or-</para>
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>A byte array containing the PKCS#8 EncryptedPrivateKeyInfo representation of the this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ExportEncryptedPkcs8PrivateKey(System.String,System.Security.Cryptography.PbeParameters)">
      <summary>Exports the current key in the PKCS#8 EncryptedPrivateKeyInfo format with a char-based password.</summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="password" /> or <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <returns>A byte array containing the PKCS#8 EncryptedPrivateKeyInfo representation of the this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ExportEncryptedPkcs8PrivateKeyPem(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters)">
      <summary>
        <para>Exports the current key in a PEM-encoded representation of the PKCS#8 EncryptedPrivateKeyInfo representation of this key, using a byte-based password.</para>
      </summary>
      <param name="passwordBytes">The bytes to use as a password when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="pbeParameters" /> specifies a KDF that requires a char-based password.</para>
        <para>-or-</para>
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
        <para>-or-</para>
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>A string containing the PEM-encoded PKCS#8 EncryptedPrivateKeyInfo.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ExportEncryptedPkcs8PrivateKeyPem(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters)">
      <summary>
        <para>Exports the current key in a PEM-encoded representation of the PKCS#8 EncryptedPrivateKeyInfo representation of this key, using a char-based password.</para>
      </summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
        <para>-or-</para>
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>A string containing the PEM-encoded PKCS#8 EncryptedPrivateKeyInfo.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ExportEncryptedPkcs8PrivateKeyPem(System.String,System.Security.Cryptography.PbeParameters)">
      <summary>
        <p>Exports the current key in a PEM-encoded representation of the PKCS#8 EncryptedPrivateKeyInfo representation of this key, using a char-based password.</p>
      </summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="password" /> or <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <returns>A string containing the PEM-encoded PKCS#8 EncryptedPrivateKeyInfo.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ExportPkcs8PrivateKey">
      <summary>Exports the current key in the PKCS#8 PrivateKeyInfo format.</summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>A byte array containing the PKCS#8 PrivateKeyInfo representation of the this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ExportPkcs8PrivateKeyPem">
      <summary>Exports the current key in a PEM-encoded representation of the PKCS#8 PrivateKeyInfo format.</summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>A string containing the PEM-encoded representation of the PKCS#8 PrivateKeyInfo.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ExportSlhDsaPrivateKey">
      <summary>Exports the current key in the FIPS 205 private key format.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The current instance cannot export a private key.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      <returns>The FIPS 205 private key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ExportSlhDsaPrivateKey(System.Span{System.Byte})">
      <summary>Exports the current key in the FIPS 205 private key format.</summary>
      <param name="destination">
        <para>The buffer to receive the private key. Its length must be exactly <see cref="P:System.Security.Cryptography.SlhDsaAlgorithm.PrivateKeySizeInBytes" />.</para>
      </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> is the incorrect length to receive the private key.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The current instance cannot export a private key.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ExportSlhDsaPrivateKeyCore(System.Span{System.Byte})">
      <summary>When overridden in a derived class, exports the FIPS 205 private key to the specified buffer.</summary>
      <param name="destination">The buffer to receive the private key.</param>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ExportSlhDsaPublicKey">
      <summary>Exports the public-key portion of the current key in the FIPS 205 public key format.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>An error occurred while exporting the key.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
      <returns>The FIPS 205 public key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ExportSlhDsaPublicKey(System.Span{System.Byte})">
      <summary>Exports the public-key portion of the current key in the FIPS 205 public key format.</summary>
      <param name="destination">
        <para>The buffer to receive the public key. Its length must be exactly <see cref="P:System.Security.Cryptography.SlhDsaAlgorithm.PublicKeySizeInBytes" />.</para>
      </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> is the incorrect length to receive the public key.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>An error occurred while exporting the key.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ExportSlhDsaPublicKeyCore(System.Span{System.Byte})">
      <summary>When overridden in a derived class, exports the FIPS 205 public key to the specified buffer.</summary>
      <param name="destination">The buffer to receive the public key.</param>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ExportSubjectPublicKeyInfo">
      <summary>Exports the public-key portion of the current key in the X.509 SubjectPublicKeyInfo format.</summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>A byte array containing the X.509 SubjectPublicKeyInfo representation of the public-key portion of this key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ExportSubjectPublicKeyInfoPem">
      <summary>
        <para>Exports the public-key portion of the current key in a PEM-encoded representation of the X.509 SubjectPublicKeyInfo format.</para>
      </summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>A string containing the PEM-encoded representation of the X.509 SubjectPublicKeyInfo representation of the public-key portion of this key.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.GenerateKey(System.Security.Cryptography.SlhDsaAlgorithm)">
      <summary>Generates a new SLH-DSA key for the specified algorithm.</summary>
      <param name="algorithm">An algorithm identifying what kind of SLH-DSA key to generate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred generating the SLH-DSA key.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
      </exception>
      <returns>The generated object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Imports an SLH-DSA private key from a PKCS#8 EncryptedPrivateKeyInfo structure.</summary>
      <param name="passwordBytes">The bytes to use as a password when decrypting the key material.</param>
      <param name="source">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The specified password is incorrect.</para>
        <para>-or-</para>
        <para>The EncryptedPrivateKeyInfo indicates the Key Derivation Function (KDF) to apply is the legacy PKCS#12 KDF, which requires <see cref="T:System.Char" />-based passwords.</para>
        <para>-or-</para>
        <para>The value does not represent an SLH-DSA key.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains trailing data after the ASN.1 structure.</para>
        <para>-or-</para>
        <para>The algorithm-specific import failed.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Imports an SLH-DSA private key from a PKCS#8 EncryptedPrivateKeyInfo structure.</summary>
      <param name="password">The password to use when decrypting the key material.</param>
      <param name="source">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The specified password is incorrect.</para>
        <para>-or-</para>
        <para>The value does not represent an SLH-DSA key.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains trailing data after the ASN.1 structure.</para>
        <para>-or-</para>
        <para>The algorithm-specific import failed.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ImportEncryptedPkcs8PrivateKey(System.String,System.Byte[])">
      <summary>Imports an SLH-DSA private key from a PKCS#8 EncryptedPrivateKeyInfo structure.</summary>
      <param name="password">The password to use when decrypting the key material.</param>
      <param name="source">The bytes of a PKCS#8 EncryptedPrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="password" /> or <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Imports an SLH-DSA key from an encrypted RFC 7468 PEM-encoded string.</summary>
      <param name="source">The PEM text of the encrypted key to import.</param>
      <param name="passwordBytes">The bytes to use as a password when decrypting the key material.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="source" /> does not contain a PEM-encoded key with a recognized label.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains multiple PEM-encoded keys with a recognized label.</para>
      </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The password is incorrect.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> represent the key in a format that is not supported.</para>
        <para>-or-</para>
        <para>An error occurred while importing the key.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
      </exception>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Imports an SLH-DSA key from an encrypted RFC 7468 PEM-encoded string.</summary>
      <param name="source">The PEM text of the encrypted key to import.</param>
      <param name="password">The password to use for decrypting the key material.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="source" /> does not contain a PEM-encoded key with a recognized label.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains multiple PEM-encoded keys with a recognized label.</para>
      </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The password is incorrect.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 EncryptedPrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> indicate the key is for an algorithm other than the algorithm represented by this instance.</para>
        <para>-or-</para>
        <para>The base-64 decoded contents of the PEM text from <paramref name="source" /> represent the key in a format that is not supported.</para>
        <para>-or-</para>
        <para>An error occurred while importing the key.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
      </exception>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ImportFromEncryptedPem(System.String,System.Byte[])">
      <summary>Imports an SLH-DSA key from an encrypted RFC 7468 PEM-encoded string.</summary>
      <param name="source">The PEM text of the encrypted key to import.</param>
      <param name="passwordBytes">The bytes to use as a password when decrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="passwordBytes" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ImportFromEncryptedPem(System.String,System.String)">
      <summary>Imports an SLH-DSA key from an encrypted RFC 7468 PEM-encoded string.</summary>
      <param name="source">The PEM text of the encrypted key to import.</param>
      <param name="password">The password to use for decrypting the key material.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="password" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>Imports an SLH-DSA key from an RFC 7468 PEM-encoded string.</summary>
      <param name="source">The text of the PEM key to import.</param>
      <exception cref="T:System.ArgumentException">
        <para>
          <paramref name="source" /> contains an encrypted PEM-encoded key.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains multiple PEM-encoded SLH-DSA keys.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains no PEM-encoded SLH-DSA keys.</para>
      </exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while importing the key.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
      </exception>
      <returns>The imported SLH-DSA key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ImportFromPem(System.String)">
      <summary>Imports an SLH-DSA key from an RFC 7468 PEM-encoded string.</summary>
      <param name="source">The text of the PEM key to import.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>The imported SLH-DSA key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ImportPkcs8PrivateKey(System.Byte[])">
      <summary>Imports an SLH-DSA private key from a PKCS#8 PrivateKeyInfo structure.</summary>
      <param name="source">The bytes of a PKCS#8 PrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte})">
      <summary>Imports an SLH-DSA private key from a PKCS#8 PrivateKeyInfo structure.</summary>
      <param name="source">The bytes of a PKCS#8 PrivateKeyInfo structure in the ASN.1-BER encoding.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The contents of <paramref name="source" /> do not represent an ASN.1-BER-encoded PKCS#8 PrivateKeyInfo structure.</para>
        <para>-or-</para>
        <para>The PrivateKeyInfo value does not represent an SLH-DSA key.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains trailing data after the ASN.1 structure.</para>
        <para>-or-</para>
        <para>The algorithm-specific import failed.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ImportSlhDsaPrivateKey(System.Security.Cryptography.SlhDsaAlgorithm,System.Byte[])">
      <summary>Imports an SLH-DSA private key in the FIPS 205 private key format.</summary>
      <param name="algorithm">The specific SLH-DSA algorithm for this key.</param>
      <param name="source">The bytes of a FIPS 205 private key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> or <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ImportSlhDsaPrivateKey(System.Security.Cryptography.SlhDsaAlgorithm,System.ReadOnlySpan{System.Byte})">
      <summary>Imports an SLH-DSA private key in the FIPS 205 private key format.</summary>
      <param name="algorithm">The specific SLH-DSA algorithm for this key.</param>
      <param name="source">The bytes of a FIPS 205 private key.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> has a length that is not valid for the SLH-DSA algorithm.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while importing the key.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ImportSlhDsaPublicKey(System.Security.Cryptography.SlhDsaAlgorithm,System.Byte[])">
      <summary>Imports an SLH-DSA public key in the FIPS 205 public key format.</summary>
      <param name="algorithm">The specific SLH-DSA algorithm for this key.</param>
      <param name="source">The bytes of a FIPS 205 public key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> or <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ImportSlhDsaPublicKey(System.Security.Cryptography.SlhDsaAlgorithm,System.ReadOnlySpan{System.Byte})">
      <summary>Imports an SLH-DSA public key in the FIPS 205 public key format.</summary>
      <param name="algorithm">The specific SLH-DSA algorithm for this key.</param>
      <param name="source">The bytes of a FIPS 205 public key.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> has a length that is not valid for the SLH-DSA algorithm.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> is <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while importing the key.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ImportSubjectPublicKeyInfo(System.Byte[])">
      <summary>Imports an SLH-DSA public key from an X.509 SubjectPublicKeyInfo structure.</summary>
      <param name="source">The bytes of an X.509 SubjectPublicKeyInfo structure in the ASN.1-DER encoding.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is <see langword="null" />.</exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte})">
      <summary>Imports an SLH-DSA public key from an X.509 SubjectPublicKeyInfo structure.</summary>
      <param name="source">The bytes of an X.509 SubjectPublicKeyInfo structure in the ASN.1-DER encoding.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The contents of <paramref name="source" /> do not represent an ASN.1-DER-encoded X.509 SubjectPublicKeyInfo structure.</para>
        <para>-or-</para>
        <para>The SubjectPublicKeyInfo value does not represent an SLH-DSA key.</para>
        <para>-or-</para>
        <para>
          <paramref name="source" /> contains trailing data after the ASN.1 structure.</para>
        <para>-or-</para>
        <para>The algorithm-specific import failed.</para>
      </exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <para>The platform does not support SLH-DSA. Callers can use the <see cref="P:System.Security.Cryptography.SlhDsa.IsSupported" /> property to determine if the platform supports SLH-DSA.</para>
      </exception>
      <returns>The imported key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.SignData(System.Byte[],System.Byte[])">
      <summary>Signs the specified data.</summary>
      <param name="data">The data to sign.</param>
      <param name="context">
        <para>An optional context-specific value to limit the scope of the signature.</para>
        <para>The default value is <see langword="null" />.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="context" /> has a length in excess of 255 bytes.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The instance represents only a public key.</para>
        <para>-or-</para>
        <para>An error occurred while signing the data.</para>
      </exception>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.SignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Signs the specified data, writing the signature into the provided buffer.</summary>
      <param name="data">The data to sign.</param>
      <param name="destination">
        <para>The buffer to receive the signature. Its length must be exactly <see cref="P:System.Security.Cryptography.SlhDsaAlgorithm.SignatureSizeInBytes" />.</para>
      </param>
      <param name="context">
        <para>An optional context-specific value to limit the scope of the signature.</para>
        <para>The default value is an empty buffer.</para>
      </param>
      <exception cref="T:System.ArgumentException">The buffer in <paramref name="destination" /> is the incorrect length to receive the signature.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="context" /> has a <see cref="P:System.ReadOnlySpan`1.Length" /> in excess of 255 bytes.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>The instance represents only a public key.</para>
        <para>-or-</para>
        <para>An error occurred while signing the data.</para>
      </exception>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.SignDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>
        <para>When overridden in a derived class, computes the signature of the specified data and context, writing it into the provided buffer.</para>
      </summary>
      <param name="data">The data to sign.</param>
      <param name="context">The signature context.</param>
      <param name="destination">The buffer to receive the signature, which will always be the exactly correct size for the algorithm.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while signing the data.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.SignPreHash(System.Byte[],System.String,System.Byte[])">
      <summary>Signs the specified hash using the FIPS 205 pre-hash signing algorithm.</summary>
      <param name="hash">The hash to sign.</param>
      <param name="hashAlgorithmOid">The OID of the hash algorithm used to create the hash.</param>
      <param name="context">
        <para>An optional context-specific value to limit the scope of the signature.</para>
        <para>The default value is <see langword="null" />.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> or <paramref name="hashAlgorithmOid" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="context" /> has a length in excess of 255 bytes.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="hashAlgorithmOid" /> is not a well-formed OID.</para>
        <para>-or-</para>
        <para>
          <paramref name="hashAlgorithmOid" /> is a well-known algorithm and <paramref name="hash" /> does not have the expected length.</para>
        <para>-or-</para>
        <para>The instance represents only a public key.</para>
        <para>-or-</para>
        <para>An error occurred while signing the hash.</para>
      </exception>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.SignPreHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.String,System.ReadOnlySpan{System.Byte})">
      <summary>Signs the specified hash using the FIPS 205 pre-hash signing algorithm, writing the signature into the provided buffer.</summary>
      <param name="hash">The hash to sign.</param>
      <param name="destination">
        <para>The buffer to receive the signature. Its length must be exactly <see cref="P:System.Security.Cryptography.SlhDsaAlgorithm.SignatureSizeInBytes" />.</para>
      </param>
      <param name="hashAlgorithmOid">The OID of the hash algorithm used to create the hash.</param>
      <param name="context">
        <para>An optional context-specific value to limit the scope of the signature.</para>
        <para>The default value is an empty buffer.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hashAlgorithmOid" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The buffer in <paramref name="destination" /> is the incorrect length to receive the signature.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="context" /> has a <see cref="P:System.ReadOnlySpan`1.Length" /> in excess of 255 bytes.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="hashAlgorithmOid" /> is not a well-formed OID.</para>
        <para>-or-</para>
        <para>
          <paramref name="hashAlgorithmOid" /> is a well-known algorithm and <paramref name="hash" /> does not have the expected length.</para>
        <para>-or-</para>
        <para>The instance represents only a public key.</para>
        <para>-or-</para>
        <para>An error occurred while signing the hash.</para>
      </exception>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.SignPreHashCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.String,System.Span{System.Byte})">
      <summary>
        <para>When overridden in a derived class, computes the pre-hash signature of the specified hash and context, writing it into the provided buffer.</para>
      </summary>
      <param name="hash">The hash to sign.</param>
      <param name="context">The signature context.</param>
      <param name="hashAlgorithmOid">The OID of the hash algorithm used to create the hash.</param>
      <param name="destination">The buffer to receive the signature, which will always be the exactly correct size for the algorithm.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while signing the hash.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a byte-based password.</para>
      </summary>
      <param name="passwordBytes">The bytes to use as a password when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <param name="destination">The buffer to receive the PKCS#8 EncryptedPrivateKeyInfo value.</param>
      <param name="bytesWritten">
        <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
        <para>This parameter is treated as uninitialized.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="pbeParameters" /> specifies a KDF that requires a char-based password.</para>
        <para>-or-</para>
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
        <para>-or-</para>
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a char-based password.</para>
      </summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <param name="destination">The buffer to receive the PKCS#8 EncryptedPrivateKeyInfo value.</param>
      <param name="bytesWritten">
        <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
        <para>This parameter is treated as uninitialized.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="pbeParameters" /> does not represent a valid password-based encryption algorithm.</para>
        <para>-or-</para>
        <para>This instance only represents a public key.</para>
        <para>-or-</para>
        <para>The private key is not exportable.</para>
        <para>-or-</para>
        <para>An error occurred while exporting the key.</para>
      </exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.TryExportEncryptedPkcs8PrivateKey(System.String,System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>
        <p>Attempts to export the current key in the PKCS#8 EncryptedPrivateKeyInfo format into a provided buffer, using a char-based password.</p>
      </summary>
      <param name="password">The password to use when encrypting the key material.</param>
      <param name="pbeParameters">The password-based encryption (PBE) parameters to use when encrypting the key material.</param>
      <param name="destination">The buffer to receive the PKCS#8 EncryptedPrivateKeyInfo value.</param>
      <param name="bytesWritten">
        <p>When this method returns, contains the number of bytes written to the <code data-dev-comment-type="paramref">destination</code> buffer.</p>
        <p>This parameter is treated as uninitialized.</p>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="password" /> or <paramref name="pbeParameters" /> is <see langword="null" />.</exception>
      <returns>
        <p>
          <code data-dev-comment-type="langword">true</code> if <code data-dev-comment-type="paramref">destination</code> was large enough to hold the result; otherwise, <code data-dev-comment-type="langword">false</code>.</p>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>Attempts to export the current key in the PKCS#8 PrivateKeyInfo format into the provided buffer.</para>
      </summary>
      <param name="destination">The buffer to receive the PKCS#8 PrivateKeyInfo value.</param>
      <param name="bytesWritten">
        <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
        <para>This parameter is treated as uninitialized.</para>
      </param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.TryExportPkcs8PrivateKeyCore(System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>When overridden in a derived class, attempts to export the current key in the PKCS#8 PrivateKeyInfo format into the provided buffer.</para>
      </summary>
      <param name="destination">The buffer to receive the PKCS#8 PrivateKeyInfo value.</param>
      <param name="bytesWritten">When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>
        <para>Attempts to export the public-key portion of the current key in the X.509 SubjectPublicKeyInfo format into the provided buffer.</para>
      </summary>
      <param name="destination">The buffer to receive the X.509 SubjectPublicKeyInfo value.</param>
      <param name="bytesWritten">
        <para>When this method returns, contains the number of bytes written to the <paramref name="destination" /> buffer.</para>
        <para>This parameter is treated as uninitialized.</para>
      </param>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while exporting the key.</exception>
      <returns>
        <para>
          <see langword="true" /> if <paramref name="destination" /> was large enough to hold the result; otherwise, <see langword="false" />.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.VerifyData(System.Byte[],System.Byte[],System.Byte[])">
      <summary>Verifies that the specified signature is valid for this key and the provided data.</summary>
      <param name="data">The data to verify.</param>
      <param name="signature">The signature to verify.</param>
      <param name="context">
        <para>The context value which was provided during signing.</para>
        <para>The default value is <see langword="null" />.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> or <paramref name="signature" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="context" /> has a length in excess of 255 bytes.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>An error occurred while verifying the data.</para>
      </exception>
      <returns>
        <see langword="true" /> if the signature validates the data; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Verifies that the specified signature is valid for this key and the provided data.</summary>
      <param name="data">The data to verify.</param>
      <param name="signature">The signature to verify.</param>
      <param name="context">
        <para>The context value which was provided during signing.</para>
        <para>The default value is an empty buffer.</para>
      </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="context" /> has a <see cref="P:System.ReadOnlySpan`1.Length" /> in excess of 255 bytes.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>An error occurred while verifying the data.</para>
      </exception>
      <returns>
        <see langword="true" /> if the signature validates the data; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.VerifyDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>When overridden in a derived class, verifies the signature of the specified data and context.</summary>
      <param name="data">The data to verify.</param>
      <param name="context">The signature context.</param>
      <param name="signature">The signature to verify.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while verifying the data.</exception>
      <returns>
        <see langword="true" /> if the signature validates the data; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.VerifyPreHash(System.Byte[],System.Byte[],System.String,System.Byte[])">
      <summary>Verifies that the specified FIPS 205 pre-hash signature is valid for this key and the provided hash.</summary>
      <param name="hash">The hash to verify.</param>
      <param name="signature">The signature to verify.</param>
      <param name="hashAlgorithmOid">The OID of the hash algorithm used to create the hash.</param>
      <param name="context">
        <para>The context value which was provided during signing.</para>
        <para>The default value is <see langword="null" />.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> or <paramref name="signature" /> or <paramref name="hashAlgorithmOid" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="context" /> has a length in excess of 255 bytes.</exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="hashAlgorithmOid" /> is not a well-formed OID.</para>
        <para>-or-</para>
        <para>
          <paramref name="hashAlgorithmOid" /> is a well-known algorithm and <paramref name="hash" /> does not have the expected length.</para>
        <para>-or-</para>
        <para>An error occurred while verifying the hash.</para>
      </exception>
      <returns>
        <see langword="true" /> if the signature validates the hash; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.VerifyPreHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.String,System.ReadOnlySpan{System.Byte})">
      <summary>Verifies that the specified FIPS 205 pre-hash signature is valid for this key and the provided hash.</summary>
      <param name="hash">The hash to verify.</param>
      <param name="signature">The signature to verify.</param>
      <param name="hashAlgorithmOid">The OID of the hash algorithm used to create the hash.</param>
      <param name="context">
        <para>The context value which was provided during signing.</para>
        <para>The default value is an empty buffer.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hashAlgorithmOid" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="context" /> has a <see cref="P:System.ReadOnlySpan`1.Length" /> in excess of 255 bytes.</para>
      </exception>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <para>
          <paramref name="hashAlgorithmOid" /> is not a well-formed OID.</para>
        <para>-or-</para>
        <para>
          <paramref name="hashAlgorithmOid" /> is a well-known algorithm and <paramref name="hash" /> does not have the expected length.</para>
        <para>-or-</para>
        <para>An error occurred while verifying the hash.</para>
      </exception>
      <returns>
        <see langword="true" /> if the signature validates the hash; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsa.VerifyPreHashCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.String,System.ReadOnlySpan{System.Byte})">
      <summary>When overridden in a derived class, verifies the pre-hash signature of the specified hash and context.</summary>
      <param name="hash">The data to verify.</param>
      <param name="context">The signature context.</param>
      <param name="hashAlgorithmOid">The OID of the hash algorithm used to create the hash.</param>
      <param name="signature">The signature to verify.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while verifying the hash.</exception>
      <returns>
        <see langword="true" /> if the signature validates the hash; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SlhDsa.Algorithm">
      <summary>Gets the specific SLH-DSA algorithm for this key.</summary>
      <returns>The specific SLH-DSA algorithm for this key.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SlhDsa.IsSupported">
      <summary>Gets a value indicating whether the current platform supports SLH-DSA.</summary>
      <returns>
        <see langword="true" /> if the current platform supports SLH-DSA; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.SlhDsaAlgorithm">
      <summary>Represents a specific algorithm within the SHL-DSA family.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsaAlgorithm.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current object.</summary>
      <param name="obj">The object to compare with the current object.</param>
      <returns>
        <code data-dev-comment-type="langword">true</code> if the specified object  is equal to the current object; otherwise, <code data-dev-comment-type="langword">false</code>.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsaAlgorithm.Equals(System.Security.Cryptography.SlhDsaAlgorithm)">
      <summary>Compares two <see cref="T:System.Security.Cryptography.SlhDsaAlgorithm" /> objects.</summary>
      <param name="other">An object to be compared to the current <see cref="T:System.Security.Cryptography.SlhDsaAlgorithm" /> object.</param>
      <returns>
        <see langword="true" /> if the objects are considered equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsaAlgorithm.GetHashCode">
      <summary>Serves as the default hash function.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsaAlgorithm.op_Equality(System.Security.Cryptography.SlhDsaAlgorithm,System.Security.Cryptography.SlhDsaAlgorithm)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.SlhDsaAlgorithm" /> objects specify the same algorithm name.</summary>
      <param name="left">An object that specifies an algorithm name.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
      <returns>
        <see langword="true" /> if the objects are considered equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsaAlgorithm.op_Inequality(System.Security.Cryptography.SlhDsaAlgorithm,System.Security.Cryptography.SlhDsaAlgorithm)">
      <summary>Determines whether two <see cref="T:System.Security.Cryptography.SlhDsaAlgorithm" /> objects do not specify the same algorithm name.</summary>
      <param name="left">An object that specifies an algorithm name.</param>
      <param name="right">A second object, to be compared to the object that is identified by the <paramref name="left" /> parameter.</param>
      <returns>
        <see langword="true" /> if the objects are not considered equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsaAlgorithm.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SlhDsaAlgorithm.Name">
      <summary>Gets the underlying string representation of the algorithm name.</summary>
      <returns>The underlying string representation of the algorithm name.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SlhDsaAlgorithm.PrivateKeySizeInBytes">
      <summary>Gets the size of the private key in bytes for this algorithm.</summary>
      <returns>The size of the private key in bytes for this algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SlhDsaAlgorithm.PublicKeySizeInBytes">
      <summary>Gets the size of the public key in bytes for this algorithm.</summary>
      <returns>The size of the public key in bytes for this algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SlhDsaAlgorithm.SignatureSizeInBytes">
      <summary>Gets the size of the signature in bytes for this algorithm.</summary>
      <returns>The size of the signature in bytes for this algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SlhDsaAlgorithm.SlhDsaSha2_128f">
      <summary>Gets an SLH-DSA algorithm identifier for the SLH-DSA-SHA2-128f algorithm.</summary>
      <returns>An SLH-DSA algorithm identifier for the SLH-DSA-SHA2-128f algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SlhDsaAlgorithm.SlhDsaSha2_128s">
      <summary>Gets an SLH-DSA algorithm identifier for the SLH-DSA-SHA2-128s algorithm.</summary>
      <returns>An SLH-DSA algorithm identifier for the SLH-DSA-SHA2-128s algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SlhDsaAlgorithm.SlhDsaSha2_192f">
      <summary>Gets an SLH-DSA algorithm identifier for the SLH-DSA-SHA2-192f algorithm.</summary>
      <returns>An SLH-DSA algorithm identifier for the SLH-DSA-SHA2-192f algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SlhDsaAlgorithm.SlhDsaSha2_192s">
      <summary>Gets an SLH-DSA algorithm identifier for the SLH-DSA-SHA2-192s algorithm.</summary>
      <returns>An SLH-DSA algorithm identifier for the SLH-DSA-SHA2-192s algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SlhDsaAlgorithm.SlhDsaSha2_256f">
      <summary>Gets an SLH-DSA algorithm identifier for the SLH-DSA-SHA2-256f algorithm.</summary>
      <returns>An SLH-DSA algorithm identifier for the SLH-DSA-SHA2-256f algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SlhDsaAlgorithm.SlhDsaSha2_256s">
      <summary>Gets an SLH-DSA algorithm identifier for the SLH-DSA-SHA2-256s algorithm.</summary>
      <returns>An SLH-DSA algorithm identifier for the SLH-DSA-SHA2-256s algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SlhDsaAlgorithm.SlhDsaShake128f">
      <summary>Gets an SLH-DSA algorithm identifier for the SLH-DSA-SHAKE-128f algorithm.</summary>
      <returns>An SLH-DSA algorithm identifier for the SLH-DSA-SHAKE-128f algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SlhDsaAlgorithm.SlhDsaShake128s">
      <summary>Gets an SLH-DSA algorithm identifier for the SLH-DSA-SHAKE-128s algorithm.</summary>
      <returns>An SLH-DSA algorithm identifier for the SLH-DSA-SHAKE-128s algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SlhDsaAlgorithm.SlhDsaShake192f">
      <summary>Gets an SLH-DSA algorithm identifier for the SLH-DSA-SHAKE-192f algorithm.</summary>
      <returns>An SLH-DSA algorithm identifier for the SLH-DSA-SHAKE-192f algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SlhDsaAlgorithm.SlhDsaShake192s">
      <summary>Gets an SLH-DSA algorithm identifier for the SLH-DSA-SHAKE-192s algorithm.</summary>
      <returns>An SLH-DSA algorithm identifier for the SLH-DSA-SHAKE-192s algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SlhDsaAlgorithm.SlhDsaShake256f">
      <summary>Gets an SLH-DSA algorithm identifier for the SLH-DSA-SHAKE-256f algorithm.</summary>
      <returns>An SLH-DSA algorithm identifier for the SLH-DSA-SHAKE-256f algorithm.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SlhDsaAlgorithm.SlhDsaShake256s">
      <summary>Gets an SLH-DSA algorithm identifier for the SLH-DSA-SHAKE-256s algorithm.</summary>
      <returns>An SLH-DSA algorithm identifier for the SLH-DSA-SHAKE-256s algorithm.</returns>
    </member>
    <member name="T:System.Security.Cryptography.SlhDsaCng">
      <summary>
        <para>Provides a Cryptography Next Generation (CNG) implementation of the Stateless Hash-Based Digital Signature Algorithm (SLH-DSA).</para>
      </summary>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsaCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.Cryptography.SlhDsaCng" /> class by using the specified <see cref="T:System.Security.Cryptography.CngKey" />.</summary>
      <param name="key">The key that will be used as input to the cryptographic operations performed by the current object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> does not specify a Stateless Hash-Based Digital Signature Algorithm (SLH-DSA) group.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Cryptography Next Generation (CNG) classes are not supported on this system.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SlhDsaCng.GetKey">
      <summary>Gets a new <see cref="T:System.Security.Cryptography.CngKey" /> representing the key used by the current instance.</summary>
      <exception cref="T:System.ObjectDisposedException">This instance has been disposed.</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509CertificateKeyAccessors">
      <summary>Provides helper methods to access keys on <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateKeyAccessors.CopyWithPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.CompositeMLDsa)">
      <summary>
        <para>Combines a private key with a certificate containing the associated public key into a new instance that can access the private key.</para>
      </summary>
      <param name="certificate">The X.509 certificate that contains the public key.</param>
      <param name="privateKey">The Composite ML-DSA private key that corresponds to the Composite ML-DSA public key in this certificate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> or <paramref name="privateKey" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The specified private key doesn't match the public key for this certificate.</exception>
      <exception cref="T:System.InvalidOperationException">The certificate already has an associated private key.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Combining a certificate and a Composite ML-DSA private key is not supported on this platform.</exception>
      <returns>
        <para>A new certificate with the <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey" /> property set to <see langword="true" />.</para>
        <para>The current certificate isn't modified.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateKeyAccessors.CopyWithPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.MLDsa)">
      <summary>
        <para>Combines a private key with a certificate containing the associated public key into a new instance that can access the private key.</para>
      </summary>
      <param name="certificate">The X.509 certificate that contains the public key.</param>
      <param name="privateKey">The ML-DSA private key that corresponds to the ML-DSA public key in this certificate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> or <paramref name="privateKey" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The specified private key doesn't match the public key for this certificate.</exception>
      <exception cref="T:System.InvalidOperationException">The certificate already has an associated private key.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Combining a certificate and an ML-DSA private key is not supported on this platform.</exception>
      <returns>
        <para>A new certificate with the <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey" /> property set to <see langword="true" />.</para>
        <para>The current certificate isn't modified.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateKeyAccessors.CopyWithPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.MLKem)">
      <summary>
        <para>Combines a private key with a certificate containing the associated public key into a new instance that can access the private key.</para>
      </summary>
      <param name="certificate">The X.509 certificate that contains the public key.</param>
      <param name="privateKey">The ML-KEM private key that corresponds to the ML-KEM public key in this certificate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> or <paramref name="privateKey" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The specified private key doesn't match the public key for this certificate.</exception>
      <exception cref="T:System.InvalidOperationException">The certificate already has an associated private key.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Combining a certificate and an ML-KEM private key is not supported on this platform.</exception>
      <returns>
        <para>A new certificate with the <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey" /> property set to <see langword="true" />.</para>
        <para>The current certificate isn't modified.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateKeyAccessors.CopyWithPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.SlhDsa)">
      <summary>
        <para>Combines a private key with a certificate containing the associated public key into a new instance that can access the private key.</para>
      </summary>
      <param name="certificate">The X509 certificate that contains the public key.</param>
      <param name="privateKey">The SLH-DSA private key that corresponds to the SLH-DSA public key in this certificate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> or <paramref name="privateKey" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The specified private key doesn't match the public key for this certificate.</exception>
      <exception cref="T:System.InvalidOperationException">The certificate already has an associated private key.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Combining a certificate and an SLH-DSA private key is not supported on this platform.</exception>
      <returns>
        <para>A new certificate with the <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey" /> property set to <see langword="true" />.</para>
        <para>The current certificate isn't modified.</para>
      </returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateKeyAccessors.GetCompositeMLDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Gets the <see cref="T:System.Security.Cryptography.CompositeMLDsa" /> private key from this certificate.</summary>
      <param name="certificate">The X.509 certificate that contains the private key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Retrieving a Composite ML-DSA private key from a certificate is not supported on this platform.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred accessing the private key.</exception>
      <returns>The private key, or <see langword="null" /> if this certificate does not have a Composite ML-DSA private key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateKeyAccessors.GetCompositeMLDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Gets the <see cref="T:System.Security.Cryptography.CompositeMLDsa" /> public key from this certificate.</summary>
      <param name="certificate">The X.509 certificate that contains the public key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The certificate has a Composite ML-DSA public key, but the platform does not support Composite ML-DSA.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The public key was invalid, or otherwise could not be imported.</exception>
      <returns>The public key, or <see langword="null" /> if this certificate does not have a Composite ML-DSA public key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateKeyAccessors.GetMLDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Gets the <see cref="T:System.Security.Cryptography.MLDsa" /> private key from this certificate.</summary>
      <param name="certificate">The X.509 certificate that contains the private key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Retrieving an ML-DSA private key from a certificate is not supported on this platform.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred accessing the private key.</exception>
      <returns>The private key, or <see langword="null" /> if this certificate does not have an ML-DSA private key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateKeyAccessors.GetMLDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Gets the <see cref="T:System.Security.Cryptography.MLDsa" /> public key from this certificate.</summary>
      <param name="certificate">The X.509 certificate that contains the public key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The certificate has an ML-DSA public key, but the platform does not support ML-DSA.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The public key was invalid, or otherwise could not be imported.</exception>
      <returns>The public key, or <see langword="null" /> if this certificate does not have an ML-DSA public key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateKeyAccessors.GetMLKemPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Gets the <see cref="T:System.Security.Cryptography.MLKem" /> private key from this certificate.</summary>
      <param name="certificate">The X.509 certificate that contains the private key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Retrieving an ML-KEM private key from a certificate is not supported on this platform.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred accessing the private key.</exception>
      <returns>The private key, or <see langword="null" /> if this certificate does not have an ML-KEM private key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateKeyAccessors.GetMLKemPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Gets the <see cref="T:System.Security.Cryptography.MLKem" /> public key from this certificate.</summary>
      <param name="certificate">The X.509 certificate that contains the public key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The certificate has an ML-KEM public key, but the platform does not support ML-KEM.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The public key was invalid, or otherwise could not be imported.</exception>
      <returns>The public key, or <see langword="null" /> if this certificate does not have an ML-KEM public key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateKeyAccessors.GetSlhDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Gets the <see cref="T:System.Security.Cryptography.SlhDsa" /> private key from this certificate.</summary>
      <param name="certificate">The X509 certificate that contains the private key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Retrieving an SLH-DSA private key from a certificate is not supported on this platform.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred accessing the private key.</exception>
      <returns>The private key, or <see langword="null" /> if this certificate does not have an SLH-DSA private key.</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateKeyAccessors.GetSlhDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>Gets the <see cref="T:System.Security.Cryptography.SlhDsa" /> public key from this certificate.</summary>
      <param name="certificate">The X509 certificate that contains the public key.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The certificate has an SLH-DSA public key, but the platform does not support SLH-DSA.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The public key was invalid, or otherwise could not be imported.</exception>
      <returns>The public key, or <see langword="null" /> if this certificate does not have an SLH-DSA public key.</returns>
    </member>
  </members>
</doc>