<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Extensions.TimeProvider.Testing</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Extensions.Time.Testing.FakeTimeProvider">
      <summary>
            Represents a synthetic time provider that can be used to enable deterministic behavior in tests.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Time.Testing.FakeTimeProvider" /> class.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.#ctor(System.DateTimeOffset)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Time.Testing.FakeTimeProvider" /> class.</summary>
      <param name="startDateTime">The initial time and date reported by the provider.</param>
    </member>
    <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.AdjustTime(System.DateTimeOffset)">
      <summary>
            Sets the date and time in the UTC time zone.</summary>
      <param name="value">The date and time in the UTC time zone.</param>
    </member>
    <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.Advance(System.TimeSpan)">
      <summary>
            Advances time by a specific amount.</summary>
      <param name="delta">The amount of time to advance the clock by.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The time value is less than <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.CreateTimer(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
      <summary>Creates a new <xref data-throw-if-not-resolved="true" uid="System.Threading.ITimer"></xref> instance, using <xref data-throw-if-not-resolved="true" uid="System.TimeSpan"></xref> values to measure time intervals.</summary>
      <param name="callback">A delegate representing a method to be executed when the timer fires. The method specified for callback should be reentrant,
as it may be invoked simultaneously on two threads if the timer fires again before or while a previous callback is still being handled.</param>
      <param name="state">An object to be passed to the <code data-dev-comment-type="paramref">callback</code>. This may be null.</param>
      <param name="dueTime">The amount of time to delay before <code data-dev-comment-type="paramref">callback</code> is invoked. Specify <xref data-throw-if-not-resolved="true" uid="System.Threading.Timeout.InfiniteTimeSpan"></xref> to prevent the timer from starting. Specify <xref data-throw-if-not-resolved="true" uid="System.TimeSpan.Zero"></xref> to start the timer immediately.</param>
      <param name="period">The time interval between invocations of <code data-dev-comment-type="paramref">callback</code>. Specify <xref data-throw-if-not-resolved="true" uid="System.Threading.Timeout.InfiniteTimeSpan"></xref> to disable periodic signaling.</param>
      <returns>The newly created <xref data-throw-if-not-resolved="true" uid="System.Threading.ITimer"></xref> instance.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.GetTimestamp">
      <summary>Gets the current high-frequency value designed to measure small time intervals with high accuracy in the timer mechanism.</summary>
      <returns>A long integer representing the high-frequency counter value of the underlying timer mechanism.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.GetUtcNow">
      <summary>Gets a <xref data-throw-if-not-resolved="true" uid="System.DateTimeOffset"></xref> value whose date and time are set to the current
Coordinated Universal Time (UTC) date and time and whose offset is Zero,
all according to this <xref data-throw-if-not-resolved="true" uid="System.TimeProvider"></xref>'s notion of time.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.SetLocalTimeZone(System.TimeZoneInfo)">
      <summary>
            Sets the local time zone.</summary>
      <param name="localTimeZone">The local time zone.</param>
    </member>
    <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.SetUtcNow(System.DateTimeOffset)">
      <summary>
            Advances the date and time in the UTC time zone.</summary>
      <param name="value">The date and time in the UTC time zone.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The supplied time value is before the current time.</exception>
    </member>
    <member name="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.ToString">
      <summary>
            Returns a string representation this provider's idea of current time.</summary>
      <returns>A string representing the provider's current time.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Time.Testing.FakeTimeProvider.AutoAdvanceAmount">
      <summary>
            Gets or sets the amount of time by which time advances whenever the clock is read.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The time value is less than <see cref="F:System.TimeSpan.Zero" />.</exception>
    </member>
    <member name="P:Microsoft.Extensions.Time.Testing.FakeTimeProvider.LocalTimeZone">
      <summary>Gets a <xref data-throw-if-not-resolved="true" uid="System.TimeZoneInfo"></xref> object that represents the local time zone according to this <xref data-throw-if-not-resolved="true" uid="System.TimeProvider"></xref>'s notion of time.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Time.Testing.FakeTimeProvider.Start">
      <summary>
            Gets the starting date and time for this provider.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Time.Testing.FakeTimeProvider.TimestampFrequency">
      <summary>
            Gets the amount by which the value from <see cref="M:Microsoft.Extensions.Time.Testing.FakeTimeProvider.GetTimestamp" /> increments per second.</summary>
    </member>
  </members>
</doc>