<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Extensions.Caching.Memory</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache">
      <summary>
            Implements <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" /> using <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" />.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions},Microsoft.Extensions.Logging.ILoggerFactory)">
      <summary>
            Creates a new <see cref="T:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache" /> instance.</summary>
      <param name="optionsAccessor">The options of the cache.</param>
      <param name="loggerFactory">The logger factory to create <see cref="T:Microsoft.Extensions.Logging.ILogger" /> used to log messages.</param>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions})">
      <summary>
            Creates a new <see cref="T:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache" /> instance.</summary>
      <param name="optionsAccessor">The options of the cache.</param>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.Get(System.String)">
      <summary>
            Gets the specified item associated with a key from the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> as a byte array.</summary>
      <param name="key">The key of the item to get.</param>
      <returns>The byte array value of the key.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.GetAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously gets the specified item associated with a key from the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> as a byte array.</summary>
      <param name="key">The key of the item to get.</param>
      <param name="token">The <see cref="T:System.Threading.CancellationToken" /> to use to cancel operation.</param>
      <exception cref="T:System.OperationCanceledException">The cancellation token was canceled. This exception is stored into the returned task.</exception>
      <returns>The task for getting the byte array value associated with the specified key from the cache.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.Refresh(System.String)">
      <summary>
            Refreshes the specified item associated with a key from the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" />.</summary>
      <param name="key">The key of the item to refresh.</param>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.RefreshAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously refreshes the specified item associated with a key from the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" />.</summary>
      <param name="key">The key of the item to refresh.</param>
      <param name="token">The <see cref="T:System.Threading.CancellationToken" /> to use to cancel operation.</param>
      <exception cref="T:System.OperationCanceledException">The cancellation token was canceled. This exception is stored into the returned task.</exception>
      <returns>The task for refreshing the specified key in the cache.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.Remove(System.String)">
      <summary>
            Removes the specified item associated with a key from the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" />.</summary>
      <param name="key">The key of the item to remove.</param>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.RemoveAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously removes the specified item associated with a key from the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" />.</summary>
      <param name="key">The key of the item to remove.</param>
      <param name="token">The <see cref="T:System.Threading.CancellationToken" /> to use to cancel operation.</param>
      <exception cref="T:System.OperationCanceledException">The cancellation token was canceled. This exception is stored into the returned task.</exception>
      <returns>The task for removing the specified key from the cache.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.Set(System.String,System.Byte[],Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions)">
      <summary>
            Sets the specified item associated with a key in the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> as a byte array.</summary>
      <param name="key">The key of the item to set.</param>
      <param name="value">The byte array value of the item to set.</param>
      <param name="options">The cache options for the item to set.</param>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Distributed.MemoryDistributedCache.SetAsync(System.String,System.Byte[],Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions,System.Threading.CancellationToken)">
      <summary>
            Asynchronously sets the specified item associated with a key in the <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> as a byte array.</summary>
      <param name="key">The key of the item to set.</param>
      <param name="value">The byte array value of the item to set.</param>
      <param name="options">The cache options for the item to set.</param>
      <param name="token">The <see cref="T:System.Threading.CancellationToken" /> to use to cancel operation.</param>
      <exception cref="T:System.OperationCanceledException">The cancellation token was canceled. This exception is stored into the returned task.</exception>
      <returns>The task for setting the byte array value associated with the specified key in the cache.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Caching.Memory.MemoryCache">
      <summary>
            Implements <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> using a dictionary to
            store its entries.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions},Microsoft.Extensions.Logging.ILoggerFactory)">
      <summary>
            Creates a new <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCache" /> instance.</summary>
      <param name="optionsAccessor">The options of the cache.</param>
      <param name="loggerFactory">The factory used to create loggers.</param>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions})">
      <summary>
            Creates a new <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCache" /> instance.</summary>
      <param name="optionsAccessor">The options of the cache.</param>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.Clear">
      <summary>
            Removes all keys and values from the cache.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.Compact(System.Double)">
      <param name="percentage" />
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.CreateEntry(System.Object)">
      <summary>Creates or overwrites an entry in the cache.</summary>
      <param name="key">An object identifying the entry.</param>
      <returns>The newly created <xref data-throw-if-not-resolved="true" uid="Microsoft.Extensions.Caching.Memory.ICacheEntry"></xref> instance.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.Dispose(System.Boolean)">
      <summary>
            Disposes the cache and clears all entries.</summary>
      <param name="disposing">
        <see langword="true" /> to dispose the object resources; <see langword="false" /> to take no action.</param>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.Finalize">
      <summary>
            Cleans up the background collection events.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.GetCurrentStatistics">
      <summary>
            Gets a snapshot of the current statistics for the memory cache.</summary>
      <returns>Returns <see langword="null" /> if statistics are not being tracked because <see cref="P:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions.TrackStatistics" /> is <see langword="false" />.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.Remove(System.Object)">
      <summary>Removes the object associated with the given key.</summary>
      <param name="key">An object identifying the entry.</param>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCache.TryGetValue(System.Object,System.Object@)">
      <summary>Gets the item associated with this key if present.</summary>
      <param name="key">An object identifying the requested entry.</param>
      <param name="result" />
      <returns>
        <code data-dev-comment-type="langword">true</code> if the key was found.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCache.Count">
      <summary>
            Gets the count of the current entries for diagnostic purposes.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCache.Keys">
      <summary>
            Gets an enumerable of the all the keys in the <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCache" />.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions">
      <summary>
            Specifies options for <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCache" />.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions.#ctor" />
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions.Clock">
      <summary>
            Gets or sets the clock used by the cache for expiration.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions.CompactionPercentage">
      <summary>
            Gets or sets the amount the cache is compacted by when the maximum size is exceeded.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions.CompactOnMemoryPressure">
      <summary>
            Gets or sets a value that indicates whether the cache is compacted when the maximum size is exceeded.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions.ExpirationScanFrequency">
      <summary>
            Gets or sets the minimum length of time between successive scans for expired items.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions.Microsoft#Extensions#Options#IOptions{Microsoft#Extensions#Caching#Memory#MemoryCacheOptions}#Value">
      <summary>Gets the default configured <typeparamref name="TOptions" /> instance.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions.SizeLimit">
      <summary>
            Gets or sets the maximum size of the cache.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions.TrackLinkedCacheEntries">
      <summary>
            Gets or sets a value that indicates whether linked entries are tracked.</summary>
      <returns>
        <see langword="true" /> if linked entries are tracked; otherwise, <see langword="false" />.
            The default is <see langword="false" />.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions.TrackStatistics">
      <summary>
            Gets or sets a value that indicates whether memory cache statistics are tracked.</summary>
      <returns>
        <see langword="true" /> if memory cache statistics are tracked; otherwise, <see langword="false" />.
            The default is <see langword="false" />.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions">
      <summary>
            Specifies options for <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions" />.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions" />.</summary>
    </member>
    <member name="T:Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions">
      <summary>
            Extension methods for setting up memory cache related services in an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions.AddDistributedMemoryCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions})">
      <summary>
            Adds a default implementation of <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" /> that stores items in memory
            to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />. Frameworks that require a distributed cache to work
            can safely add this dependency as part of their dependency list to ensure that there is at least
            one implementation available.</summary>
      <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
      <param name="setupAction">
            The <see cref="T:System.Action`1" /> to configure the provided <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryDistributedCacheOptions" />.</param>
      <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> so that additional calls can be chained.</returns>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions.AddDistributedMemoryCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
      <summary>
            Adds a default implementation of <see cref="T:Microsoft.Extensions.Caching.Distributed.IDistributedCache" /> that stores items in memory
            to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />. Frameworks that require a distributed cache to work
            can safely add this dependency as part of their dependency list to ensure that there is at least
            one implementation available.</summary>
      <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
      <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> so that additional calls can be chained.</returns>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions.AddMemoryCache(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions})">
      <summary>
            Adds a non distributed in-memory implementation of <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> to the
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
      <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
      <param name="setupAction">
            The <see cref="T:System.Action`1" /> to configure the provided <see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions" />.</param>
      <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> so that additional calls can be chained.</returns>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.MemoryCacheServiceCollectionExtensions.AddMemoryCache(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
      <summary>
            Adds a non distributed in-memory implementation of <see cref="T:Microsoft.Extensions.Caching.Memory.IMemoryCache" /> to the
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</summary>
      <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
      <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> so that additional calls can be chained.</returns>
    </member>
  </members>
</doc>