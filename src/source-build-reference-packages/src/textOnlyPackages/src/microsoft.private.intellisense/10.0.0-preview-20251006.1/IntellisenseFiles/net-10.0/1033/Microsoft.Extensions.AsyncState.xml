<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Extensions.AsyncState</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Extensions.AsyncState.AsyncStateToken">
      <summary>
            Async state token representing a registered context within the asynchronous state.</summary>
    </member>
    <member name="M:Microsoft.Extensions.AsyncState.AsyncStateToken.Equals(Microsoft.Extensions.AsyncState.AsyncStateToken)">
      <summary>
            Determines whether this async state token and a specified async state token are identical.</summary>
      <param name="other">The other async state token.</param>
      <returns>
        <see langword="true" /> if the two async state tokens are identical; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Microsoft.Extensions.AsyncState.AsyncStateToken.Equals(System.Object)">
      <summary>
            Determines whether the specified object is equal to the current async state token.</summary>
      <param name="obj">The object to compare.</param>
      <returns>
        <see langword="true" /> if the specified object is identical to the current async state token; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:Microsoft.Extensions.AsyncState.AsyncStateToken.GetHashCode">
      <summary>
            Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:Microsoft.Extensions.AsyncState.AsyncStateToken.op_Equality(Microsoft.Extensions.AsyncState.AsyncStateToken,Microsoft.Extensions.AsyncState.AsyncStateToken)">
      <summary>
            Compares two instances.</summary>
      <param name="left">Left argument of the comparison.</param>
      <param name="right">Right argument of the comparison.</param>
      <returns>
        <see langword="true" /> when equal, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:Microsoft.Extensions.AsyncState.AsyncStateToken.op_Inequality(Microsoft.Extensions.AsyncState.AsyncStateToken,Microsoft.Extensions.AsyncState.AsyncStateToken)">
      <summary>
            Compares two instances.</summary>
      <param name="left">Left argument of the comparison.</param>
      <param name="right">Right argument of the comparison.</param>
      <returns>
        <see langword="true" /> when not equal, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="T:Microsoft.Extensions.AsyncState.IAsyncContext`1">
      <summary>
            Provides access to the current async context.
            Some implementations of this interface may not be thread safe.</summary>
      <typeparam name="T">The type of the asynchronous state.</typeparam>
    </member>
    <member name="M:Microsoft.Extensions.AsyncState.IAsyncContext`1.Get">
      <summary>
            Gets current async context.</summary>
      <exception cref="T:System.InvalidOperationException">Context is not initialized.</exception>
      <returns>Current async context.</returns>
    </member>
    <member name="M:Microsoft.Extensions.AsyncState.IAsyncContext`1.Set(`0)">
      <summary>
            Sets async context.</summary>
      <param name="context">Context to be set.</param>
      <exception cref="T:System.InvalidOperationException">Context is not initialized.</exception>
    </member>
    <member name="M:Microsoft.Extensions.AsyncState.IAsyncContext`1.TryGet(`0@)">
      <summary>
            Tries to get the current async context.</summary>
      <param name="context">Receives the context.</param>
      <returns>
        <see langword="true" /> if the context is initialized; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:Microsoft.Extensions.AsyncState.IAsyncState">
      <summary>
            Encapsulates all information within the asynchronous flow in an <see cref="T:System.Threading.AsyncLocal`1" /> variable.
            Some implementations of this interface may not be thread safe.</summary>
    </member>
    <member name="M:Microsoft.Extensions.AsyncState.IAsyncState.Get(Microsoft.Extensions.AsyncState.AsyncStateToken)">
      <summary>
            Gets the stored async context from the state.</summary>
      <param name="token">The token representing the state to extract.</param>
      <exception cref="T:System.InvalidOperationException">The context is not initialized.</exception>
      <returns>The asynchronous state corresponding to the token.</returns>
    </member>
    <member name="M:Microsoft.Extensions.AsyncState.IAsyncState.Initialize">
      <summary>
            Initializes async state in current asynchronous flow.</summary>
    </member>
    <member name="M:Microsoft.Extensions.AsyncState.IAsyncState.RegisterAsyncContext">
      <summary>
            Registers new async context with the state.</summary>
      <returns>Token that gives access to the reserved context.</returns>
    </member>
    <member name="M:Microsoft.Extensions.AsyncState.IAsyncState.Reset">
      <summary>
            Resets async state after usage.</summary>
    </member>
    <member name="M:Microsoft.Extensions.AsyncState.IAsyncState.Set(Microsoft.Extensions.AsyncState.AsyncStateToken,System.Object)">
      <summary>
            Stores async context.</summary>
      <param name="token">The token representing the state to store.</param>
      <param name="value">New state value.</param>
      <exception cref="T:System.InvalidOperationException">Context is not initialized.</exception>
    </member>
    <member name="M:Microsoft.Extensions.AsyncState.IAsyncState.TryGet(Microsoft.Extensions.AsyncState.AsyncStateToken,System.Object@)">
      <summary>
            Tries to get the stored async context from the state.</summary>
      <param name="token">The token representing the state to extract.</param>
      <param name="value">
            Receives the value associated with the specified token, if the context is initialized;
            otherwise, the default value for the type of the <paramref name="value" /> parameter.</param>
      <returns>
        <see langword="true" /> if the context is initialized; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:Microsoft.Extensions.DependencyInjection.AsyncStateExtensions">
      <summary>
            Extensions to manipulate async state.</summary>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.AsyncStateExtensions.AddAsyncState(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
      <summary>
            Adds default implementations for <see cref="T:Microsoft.Extensions.AsyncState.IAsyncState" />, <see cref="T:Microsoft.Extensions.AsyncState.IAsyncContext`1" />, and <see cref="T:Microsoft.Extensions.AsyncState.IAsyncLocalContext`1" /> services.
            Please note that implementations of these interfaces are not thread safe.</summary>
      <param name="services">The dependency injection container to add the implementations to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="services" /> is <see langword="null" />.</exception>
      <returns>The value of <paramref name="services" />.</returns>
    </member>
  </members>
</doc>