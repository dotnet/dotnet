<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Extensions.Diagnostics.Testing</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Extensions.DependencyInjection.FakeLoggerServiceCollectionExtensions">
      <summary>
            Extensions for configuring fake logging, used in unit tests.</summary>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.FakeLoggerServiceCollectionExtensions.AddFakeLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfigurationSection)">
      <summary>
            Configures fake logging.</summary>
      <param name="services">Service collection.</param>
      <param name="section">Configuration section that contains <see cref="T:Microsoft.Extensions.Logging.Testing.FakeLogCollectorOptions" />.</param>
      <returns>The value of <paramref name="services" />.</returns>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.FakeLoggerServiceCollectionExtensions.AddFakeLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.Logging.Testing.FakeLogCollectorOptions})">
      <summary>
            Configures fake logging.</summary>
      <param name="services">Service collection.</param>
      <param name="configure">Logging configuration options.</param>
      <returns>The value of <paramref name="services" />.</returns>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.FakeLoggerServiceCollectionExtensions.AddFakeLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
      <summary>
            Configures fake logging with default options.</summary>
      <param name="services">Service collection.</param>
      <returns>The value of <paramref name="services" />.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement`1">
      <summary>
            Represents a single measurement performed by an instrument.</summary>
      <typeparam name="T">The type of metric measurement value.</typeparam>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement`1.ContainsTags(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks that the measurement includes a specific set of tags with specific values.</summary>
      <param name="tags">The set of tags to check.</param>
      <returns>
        <see langword="true" /> if all the tags exist in the measurement with matching values, otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement`1.ContainsTags(System.String[])">
      <summary>
            Checks that the measurement includes a specific set of tags with any value.</summary>
      <param name="tags">The set of tag names to check.</param>
      <returns>
        <see langword="true" /> if all the tags exist in the measurement, otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement`1.MatchesTags(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Checks that the measurement has an exactly matching set of tags with specific values.</summary>
      <param name="tags">The set of tags to check.</param>
      <returns>
        <see langword="true" /> if all the tags exist in the measurement with matching values, otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement`1.MatchesTags(System.String[])">
      <summary>
            Checks that the measurement has a exactly matching set of tags with any value.</summary>
      <param name="tags">The set of tag names to check.</param>
      <returns>
        <see langword="true" /> if all the tag names exist in the measurement, otherwise <see langword="false" />.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement`1.Tags">
      <summary>
            Gets the measurement's dimensions.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement`1.Timestamp">
      <summary>
            Gets a timestamp indicating when the measurement was recorded.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement`1.Value">
      <summary>
            Gets a measurement's value.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Metrics.Testing.MeasurementExtensions">
      <summary>
            Extensions to simplify working with lists of measurements.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MeasurementExtensions.ContainsTags``1(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement{``0}},System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Filters a list of measurements based on subset tags matching.</summary>
      <param name="measurements">The original full list of measurements.</param>
      <param name="tags">The set of tags to match against. Only measurements that have at least these matching tags are returned.</param>
      <typeparam name="T">The type of measurement value.</typeparam>
      <returns>A list of matching measurements.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MeasurementExtensions.ContainsTags``1(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement{``0}},System.String[])">
      <summary>
            Filters a list of measurements based on subset tag matching.</summary>
      <param name="measurements">The original full list of measurements.</param>
      <param name="tags">The set of tags to match against. Only measurements that have at least these matching tag names are returned.</param>
      <typeparam name="T">The type of measurement value.</typeparam>
      <returns>A list of matching measurements.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MeasurementExtensions.EvaluateAsCounter``1(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement{``0}})">
      <summary>
            Process the series of measurements adding all values together to produce a final count, identical to what a <see cref="T:System.Diagnostics.Metrics.Counter`1" /> instrument would produce.</summary>
      <param name="measurements">The list of measurements to process.</param>
      <typeparam name="T">The type of measurement value.</typeparam>
      <returns>The resulting count.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MeasurementExtensions.MatchesTags``1(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement{``0}},System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
      <summary>
            Filters a list of measurements based on exact tag matching.</summary>
      <param name="measurements">The original full list of measurements.</param>
      <param name="tags">The set of tags to match against. Only measurements that have exactly those matching tags are returned.</param>
      <typeparam name="T">The type of measurement value.</typeparam>
      <returns>A list of matching measurements.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MeasurementExtensions.MatchesTags``1(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Diagnostics.Metrics.Testing.CollectedMeasurement{``0}},System.String[])">
      <summary>
            Filters a list of measurements based on exact tag name matching.</summary>
      <param name="measurements">The original full list of measurements.</param>
      <param name="tags">The set of tags to match against. Only measurements that have exactly those matching tag names are returned.</param>
      <typeparam name="T">The type of measurement value.</typeparam>
      <returns>A list of matching measurements.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Metrics.Testing.MetricCollector`1">
      <summary>
            Collects the measurements published from an <see cref="T:System.Diagnostics.Metrics.Instrument`1" /> or <see cref="T:System.Diagnostics.Metrics.ObservableInstrument`1" />.</summary>
      <typeparam name="T">The type of metric data being recorded.</typeparam>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MetricCollector`1.#ctor(System.Diagnostics.Metrics.Instrument{`0},System.TimeProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.Testing.MetricCollector`1" /> class.</summary>
      <param name="instrument">The <see cref="T:System.Diagnostics.Metrics.Instrument`1" /> to record measurements from.</param>
      <param name="timeProvider">The time provider to use, or <see langword="null" /> to use the system time provider.</param>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MetricCollector`1.#ctor(System.Diagnostics.Metrics.Meter,System.String,System.TimeProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.Testing.MetricCollector`1" /> class.</summary>
      <param name="meter">The meter that publishes the instrument to record.</param>
      <param name="instrumentName">The name of the instrument to record.</param>
      <param name="timeProvider">The time provider to use, or <see langword="null" /> to use the system time provider.</param>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MetricCollector`1.#ctor(System.Diagnostics.Metrics.ObservableInstrument{`0},System.TimeProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.Testing.MetricCollector`1" /> class.</summary>
      <param name="instrument">The <see cref="T:System.Diagnostics.Metrics.ObservableInstrument`1" /> to record measurements from.</param>
      <param name="timeProvider">The time provider to use, or <see langword="null" /> to use the system time provider.</param>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MetricCollector`1.#ctor(System.Object,System.String,System.String,System.TimeProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.Testing.MetricCollector`1" /> class.</summary>
      <param name="meterScope">The scope of the meter that publishes the instrument to record.
            Take caution when using Meters in the global scope (scope == null). This interacts with
            static mutable data and tests doing this should not be run in parallel with each other.</param>
      <param name="meterName">The name of the meter that publishes the instrument to record.</param>
      <param name="instrumentName">The name of the instrument to record.</param>
      <param name="timeProvider">The time provider to use, or <see langword="null" /> to use the system time provider.</param>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MetricCollector`1.Clear">
      <summary>
            Removes all accumulated measurements from the collector.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MetricCollector`1.Dispose">
      <summary>
            Disposes the <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.Testing.MetricCollector`1" /> and stops recording measurements.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MetricCollector`1.GetMeasurementSnapshot(System.Boolean)">
      <summary>
            Gets a snapshot of measurements collected by this collector.</summary>
      <param name="clear">Setting this to <see langword="true" /> will atomically clear the set of accumulated measurements.</param>
      <returns>The measurements recorded by this collector, ordered by recording time.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MetricCollector`1.RecordObservableInstruments">
      <summary>
            Scan all registered observable instruments.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MetricCollector`1.WaitForMeasurementsAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>
            Returns a task that completes when the collector has collected a minimum number of measurements.</summary>
      <param name="minCount">The minimum number of measurements to wait for.</param>
      <param name="cancellationToken">The cancellation token.</param>
      <returns>A task that completes when the collector has collected the requisite number of measurements.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.Testing.MetricCollector`1.WaitForMeasurementsAsync(System.Int32,System.TimeSpan)">
      <summary>
            Returns a task that completes when the collector has collected a minimum number of measurements.</summary>
      <param name="minCount">The minimum number of measurements to wait for.</param>
      <param name="timeout">How long to wait.</param>
      <returns>A task that completes when the collector has collected the requisite number of measurements.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.Testing.MetricCollector`1.Instrument">
      <summary>
            Gets the <see cref="P:Microsoft.Extensions.Diagnostics.Metrics.Testing.MetricCollector`1.Instrument" /> that is being recorded.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.Testing.MetricCollector`1.LastMeasurement">
      <summary>
            Gets the latest measurement collected, if any.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Logging.FakeLoggerBuilderExtensions">
      <summary>
            Extensions for configuring fake logging, used in unit tests.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.FakeLoggerBuilderExtensions.AddFakeLogging(Microsoft.Extensions.Logging.ILoggingBuilder,Microsoft.Extensions.Configuration.IConfigurationSection)">
      <summary>
            Configures fake logging.</summary>
      <param name="builder">Logging builder.</param>
      <param name="section">Configuration section that contains <see cref="T:Microsoft.Extensions.Logging.Testing.FakeLogCollectorOptions" />.</param>
      <returns>Logging <paramref name="builder" />.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Logging.FakeLoggerBuilderExtensions.AddFakeLogging(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Microsoft.Extensions.Logging.Testing.FakeLogCollectorOptions})">
      <summary>
            Configures fake logging.</summary>
      <param name="builder">Logging builder.</param>
      <param name="configure">Logging configuration options.</param>
      <returns>Logging <paramref name="builder" />.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Logging.FakeLoggerBuilderExtensions.AddFakeLogging(Microsoft.Extensions.Logging.ILoggingBuilder)">
      <summary>
            Configures fake logging with default options.</summary>
      <param name="builder">Logging builder.</param>
      <returns>Logging <paramref name="builder" />.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Logging.Testing.FakeLogCollector">
      <summary>
            Collects log records sent to the fake logger.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLogCollector.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Logging.Testing.FakeLogCollector" /> class.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLogCollector.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.Extensions.Logging.Testing.FakeLogCollectorOptions})">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Logging.Testing.FakeLogCollector" /> class.</summary>
      <param name="options">The options to control which log records to retain.</param>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLogCollector.Clear">
      <summary>
            Removes all accumulated log records from the collector.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLogCollector.Create(Microsoft.Extensions.Logging.Testing.FakeLogCollectorOptions)">
      <summary>
            Creates a new instance of the <see cref="T:Microsoft.Extensions.Logging.Testing.FakeLogCollector" /> class.</summary>
      <param name="options">The options to control which log records to retain.</param>
      <returns>The collector.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLogCollector.GetSnapshot(System.Boolean)">
      <summary>
            Gets the records that are held by the collector.</summary>
      <param name="clear">
        <see langword="true" /> to atomically clear the set of accumulated log records; otherwise, <see langword="false" />.</param>
      <returns>
            The list of records tracked to date by the collector.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogCollector.Count">
      <summary>
            Gets the number of log records captured by this collector.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogCollector.LatestRecord">
      <summary>
            Gets the latest record that was created.</summary>
      <exception cref="T:System.InvalidOperationException">No records have been captured.</exception>
      <returns>
            The latest log record created.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Logging.Testing.FakeLogCollectorOptions">
      <summary>
            Options for the fake logger.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLogCollectorOptions.#ctor" />
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogCollectorOptions.CollectRecordsForDisabledLogLevels">
      <summary>
            Gets or sets a value indicating whether to collect records that are logged when the associated log level is currently disabled.</summary>
      <returns>
        <see langword="true" /> if records that are logged when the associated log level is
            disabled are collected. The default is <see langword="true" />.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogCollectorOptions.CustomFilter">
      <summary>
            Gets or sets custom filter for which records are collected.</summary>
      <returns>The default is <see langword="null" />.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogCollectorOptions.FilteredCategories">
      <summary>
            Gets or sets the logger categories for which records are collected.</summary>
      <returns>The default is an empty set.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogCollectorOptions.FilteredLevels">
      <summary>
            Gets or sets the logging levels for which records are collected.</summary>
      <returns>The default is an empty set.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogCollectorOptions.OutputFormatter">
      <summary>
            Gets or sets a delegate that is used to format log records in a specialized way before sending them to the registered output sink.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogCollectorOptions.OutputSink">
      <summary>
            Gets or sets an output sink where every record harvested by the collector is sent.</summary>
      <returns>The default is <see langword="null" />.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogCollectorOptions.TimeProvider">
      <summary>
            Gets or sets the time provider to use when time-stamping log records.</summary>
      <returns>The default is <see cref="P:System.TimeProvider.System" />.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Logging.Testing.FakeLogger">
      <summary>
            A logger which captures everything logged to it and enables inspection.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLogger.#ctor(Microsoft.Extensions.Logging.Testing.FakeLogCollector,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Logging.Testing.FakeLogger" /> class.</summary>
      <param name="collector">Where to push all log state. If this is <see langword="null" /> then a fresh collector is allocated automatically.</param>
      <param name="category">The logger's category, which indicates the origin of the logger and is captured in each record.</param>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLogger.#ctor(System.Action{System.String},System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Logging.Testing.FakeLogger" /> class that copies all log records to the given output sink.</summary>
      <param name="outputSink">Where to emit individual log records.</param>
      <param name="category">The logger's category, which indicates the origin of the logger and is captured in each record.</param>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLogger.BeginScope``1(``0)">
      <summary>
            Begins a logical operation scope.</summary>
      <param name="state">The identifier for the scope.</param>
      <typeparam name="TState">The type of the state to begin scope for.</typeparam>
      <returns>A disposable object that ends the logical operation scope on dispose.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLogger.ControlLevel(Microsoft.Extensions.Logging.LogLevel,System.Boolean)">
      <summary>
            Controls the enabled state of a log level.</summary>
      <param name="logLevel">The log level to affect.</param>
      <param name="enabled">Whether the log level is enabled or not.</param>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
      <summary>
            Checks if the given log level is enabled.</summary>
      <param name="logLevel">Level to be checked.</param>
      <returns>
        <see langword="true" /> if enabled; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
      <summary>
            Creates a new log record.</summary>
      <param name="logLevel">Entry will be written on this level.</param>
      <param name="eventId">Id of the event.</param>
      <param name="state">The entry to be written. Can be also an object.</param>
      <param name="exception">The exception related to this entry.</param>
      <param name="formatter">Function to create a string message of the state and exception.</param>
      <typeparam name="TState">The type of the object to be written.</typeparam>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLogger.LogRecords(System.Collections.Generic.IEnumerable{Microsoft.Extensions.Logging.Abstractions.BufferedLogRecord})">
      <summary>Delivers a batch of buffered log records to a logging provider.</summary>
      <param name="records">The buffered log records to log.</param>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogger.Category">
      <summary>
            Gets this logger's category, as specified when the logger was created.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogger.Collector">
      <summary>
            Gets the logger collector associated with this logger, as specified when the logger was created.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogger.LatestRecord">
      <summary>
            Gets the latest record logged to this logger.</summary>
      <exception cref="T:System.InvalidOperationException">No records have been captured.</exception>
    </member>
    <member name="T:Microsoft.Extensions.Logging.Testing.FakeLogger`1">
      <summary>
            A logger which captures everything logged to it and enables inspection.</summary>
      <typeparam name="T">The type whose name to use as a logger category.</typeparam>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLogger`1.#ctor(Microsoft.Extensions.Logging.Testing.FakeLogCollector)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Logging.Testing.FakeLogger`1" /> class.</summary>
      <param name="collector">Where to push all log state.</param>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLogger`1.#ctor(System.Action{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Logging.Testing.FakeLogger`1" /> class that copies all log records to the given output sink.</summary>
      <param name="outputSink">Where to emit individual log records.</param>
    </member>
    <member name="T:Microsoft.Extensions.Logging.Testing.FakeLoggerProvider">
      <summary>
            Provides fake loggers.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLoggerProvider.#ctor(Microsoft.Extensions.Logging.Testing.FakeLogCollector)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Logging.Testing.FakeLoggerProvider" /> class.</summary>
      <param name="collector">The collector that will receive all log records emitted to fake loggers.</param>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLoggerProvider.CreateLogger(System.String)">
      <summary>
            Creates a new <see cref="T:Microsoft.Extensions.Logging.Testing.FakeLogger" /> instance.</summary>
      <param name="categoryName">The category name for messages produced by the logger.</param>
      <returns>The instance of <see cref="T:Microsoft.Extensions.Logging.ILogger" /> that was created.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLoggerProvider.Dispose">
      <summary>
            Cleans up resources held by this object.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLoggerProvider.Dispose(System.Boolean)">
      <summary>
            Cleans up resources held by this object.</summary>
      <param name="disposing">
        <see langword="true" /> when called from the <see cref="M:Microsoft.Extensions.Logging.Testing.FakeLoggerProvider.Dispose" /> method, <see langword="false" /> when called from a finalizer.</param>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLoggerProvider.Finalize">
      <summary>
            Finalizes an instance of the <see cref="T:Microsoft.Extensions.Logging.Testing.FakeLoggerProvider" /> class.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLoggerProvider.Microsoft#Extensions#Logging#ILoggerProvider#CreateLogger(System.String)">
      <summary>
            Creates a new <see cref="T:Microsoft.Extensions.Logging.ILogger" /> instance.</summary>
      <param name="categoryName">The category name for messages produced by the logger.</param>
      <returns>The instance of <see cref="T:Microsoft.Extensions.Logging.ILogger" /> that was created.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLoggerProvider.SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider)">
      <summary>
            Sets external scope information source for logger provider.</summary>
      <param name="scopeProvider">The provider of scope data.</param>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLoggerProvider.Collector">
      <summary>
            Gets the log record collector for all loggers created by this provider.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Logging.Testing.FakeLogRecord">
      <summary>
            A single log record tracked by <see cref="T:Microsoft.Extensions.Logging.Testing.FakeLogger" />.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLogRecord.#ctor(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.Object,System.Exception,System.String,System.Collections.Generic.IReadOnlyList{System.Object},System.String,System.Boolean,System.DateTimeOffset)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Logging.Testing.FakeLogRecord" /> class.</summary>
      <param name="level">The level used when producing the log record.</param>
      <param name="id">The ID representing the specific log statement.</param>
      <param name="state">The opaque state supplied by the caller when creating the log record.</param>
      <param name="exception">An optional exception associated with the log record.</param>
      <param name="message">The formatted message text for the record.</param>
      <param name="scopes">List of active scopes active for this log record.</param>
      <param name="category">The optional category for this record, which corresponds to the T in <see cref="T:Microsoft.Extensions.Logging.ILogger`1" />.</param>
      <param name="enabled">Whether the log level was enabled or not when the <see cref="M:Microsoft.Extensions.Logging.Testing.FakeLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})" /> method was called.</param>
      <param name="timestamp">The time at which the log record was created.</param>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLogRecord.GetStructuredStateValue(System.String)">
      <summary>
            Gets the value of a particular key value pair in the record's structured state.</summary>
      <param name="key">The key to search for in the record's structured state.</param>
      <returns>
            The value associated with the key, or <see langword="null" /> if the key was not found. If the structured
            state contains multiple entries with the same key, the value associated with the first matching key encountered is returned.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Logging.Testing.FakeLogRecord.ToString">
      <summary>
            Returns a string representing this object.</summary>
      <returns>A string that helps identity this object.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogRecord.Category">
      <summary>
            Gets the optional category of this record.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogRecord.Exception">
      <summary>
            Gets an optional exception associated with the log record.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogRecord.Id">
      <summary>
            Gets the ID representing the specific log statement.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogRecord.Level">
      <summary>
            Gets the level used when producing the log record.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogRecord.LevelEnabled">
      <summary>
            Gets a value indicating whether the log level was enabled or disabled when this record was collected.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogRecord.Message">
      <summary>
            Gets the formatted message text for the record.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogRecord.Scopes">
      <summary>
            Gets the logging scopes active when the log record was created.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogRecord.State">
      <summary>
            Gets the opaque state supplied by the caller when creating the log record.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogRecord.StructuredState">
      <summary>
             Gets the opaque state supplied by the caller when creating the log record as a read-only list.</summary>
      <exception cref="T:System.InvalidCastException">The state object is not compatible with supported logging model and is not a read-only list.</exception>
    </member>
    <member name="P:Microsoft.Extensions.Logging.Testing.FakeLogRecord.Timestamp">
      <summary>
            Gets the time at which the log record was created.</summary>
    </member>
    <member name="T:System.FakeLoggerServiceProviderExtensions">
      <summary>
            Extensions for configuring fake logging, used in unit tests.</summary>
    </member>
    <member name="M:System.FakeLoggerServiceProviderExtensions.GetFakeLogCollector(System.IServiceProvider)">
      <summary>
            Gets the object that collects log records sent to the fake logger.</summary>
      <param name="services">The service provider containing the logger.</param>
      <exception cref="T:System.InvalidOperationException">No collector exists in the provider.</exception>
      <returns>The collector that tracks records logged to fake loggers.</returns>
    </member>
  </members>
</doc>