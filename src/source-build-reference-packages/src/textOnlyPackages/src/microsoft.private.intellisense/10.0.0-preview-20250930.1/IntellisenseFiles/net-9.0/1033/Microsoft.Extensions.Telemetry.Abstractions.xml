<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Extensions.Telemetry.Abstractions</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Extensions.DependencyInjection.EnrichmentServiceCollectionExtensions">
      <summary>
            Lets you register telemetry enrichers in a dependency injection container.</summary>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.EnrichmentServiceCollectionExtensions.AddLogEnricher(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Diagnostics.Enrichment.ILogEnricher)">
      <summary>
            Registers a log enricher instance.</summary>
      <param name="services">The dependency injection container to add the enricher instance to.</param>
      <param name="enricher">The enricher instance to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="services" /> or <paramref name="enricher" /> is <see langword="null" />.</exception>
      <returns>The value of <paramref name="services" />.</returns>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.EnrichmentServiceCollectionExtensions.AddLogEnricher``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
      <summary>
            Registers a log enricher type.</summary>
      <param name="services">The dependency injection container to add the enricher type to.</param>
      <typeparam name="T">Enricher type.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="services" /> is <see langword="null" />.</exception>
      <returns>The value of <paramref name="services" />.</returns>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.EnrichmentServiceCollectionExtensions.AddStaticLogEnricher(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Diagnostics.Enrichment.IStaticLogEnricher)">
      <summary>
            Registers a static log enricher instance.</summary>
      <param name="services">The dependency injection container to add the enricher instance to.</param>
      <param name="enricher">The enricher instance to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="services" /> or <paramref name="enricher" /> is <see langword="null" />.</exception>
      <returns>The value of <paramref name="services" />.</returns>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.EnrichmentServiceCollectionExtensions.AddStaticLogEnricher``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
      <summary>
            Registers a static log enricher type.</summary>
      <param name="services">The dependency injection container to add the enricher type to.</param>
      <typeparam name="T">Enricher type.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="services" /> is <see langword="null" />.</exception>
      <returns>The value of <paramref name="services" />.</returns>
    </member>
    <member name="T:Microsoft.Extensions.DependencyInjection.LatencyRegistryServiceCollectionExtensions">
      <summary>
            Extensions to configure a latency context.</summary>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.LatencyRegistryServiceCollectionExtensions.RegisterCheckpointNames(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String[])">
      <summary>
            Registers a set of checkpoint names for a latency context.</summary>
      <param name="services">The dependency injection container to add the names to.</param>
      <param name="names">Set of checkpoint names.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="services" /> or <paramref name="names" /> is <see langword="null" />.</exception>
      <returns>The value of <paramref name="services" />.</returns>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.LatencyRegistryServiceCollectionExtensions.RegisterMeasureNames(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String[])">
      <summary>
            Registers a set of measure names for a latency context.</summary>
      <param name="services">The dependency injection container to add the names to.</param>
      <param name="names">Set of measure names.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="services" /> or <paramref name="names" /> is <see langword="null" />.</exception>
      <returns>The value of <paramref name="services" />.</returns>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.LatencyRegistryServiceCollectionExtensions.RegisterTagNames(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String[])">
      <summary>
            Registers a set of tag names for a latency context.</summary>
      <param name="services">The dependency injection container to add the names to.</param>
      <param name="names">Set of tag names.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="services" /> or <paramref name="names" /> is <see langword="null" />.</exception>
      <returns>The value of <paramref name="services" />.</returns>
    </member>
    <member name="T:Microsoft.Extensions.DependencyInjection.NullLatencyContextServiceCollectionExtensions">
      <summary>
            Extensions to add a no-op latency context.</summary>
    </member>
    <member name="M:Microsoft.Extensions.DependencyInjection.NullLatencyContextServiceCollectionExtensions.AddNullLatencyContext(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
      <summary>
            Adds a no-op latency context to a dependency injection container.</summary>
      <param name="services">The dependency injection container to add the context to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="services" /> is <see langword="null" />.</exception>
      <returns>The value of <paramref name="services" />.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Buffering.GlobalLogBuffer">
      <summary>
            Buffers logs into global circular buffers and drops them after some time if not flushed.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Buffering.GlobalLogBuffer.#ctor" />
    <member name="T:Microsoft.Extensions.Diagnostics.Buffering.LogBuffer">
      <summary>
            Buffers logs into circular buffers and drops them after some time if not flushed.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Buffering.LogBuffer.#ctor" />
    <member name="M:Microsoft.Extensions.Diagnostics.Buffering.LogBuffer.Flush">
      <summary>
            Flushes the buffer and emits all buffered logs.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Buffering.LogBuffer.TryEnqueue``1(Microsoft.Extensions.Logging.Abstractions.IBufferedLogger,Microsoft.Extensions.Logging.Abstractions.LogEntry{``0}@|System.Runtime.InteropServices.InAttribute)">
      <summary>
            Enqueues a log record in the underlying buffer, if available.</summary>
      <param name="bufferedLogger">A logger capable of logging buffered log records.</param>
      <param name="logEntry">A log entry to be buffered.</param>
      <typeparam name="TState">Type of the log state in the <paramref name="logEntry" /> instance.</typeparam>
      <returns>
        <see langword="true" /> if the log record was buffered; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Buffering.PerRequestLogBuffer">
      <summary>
            Buffers logs into per-request circular buffers and drops them after some time if not flushed or when the request ends.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Buffering.PerRequestLogBuffer.#ctor" />
    <member name="T:Microsoft.Extensions.Diagnostics.Enrichment.IEnrichmentTagCollector">
      <summary>
            Allows enrichers to report enrichment properties.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Enrichment.IEnrichmentTagCollector.Add(System.String,System.Object)">
      <summary>
            Adds a tag in form of a key/value pair.</summary>
      <param name="tagName">Enrichment property key.</param>
      <param name="tagValue">Enrichment property value.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tagName" /> is an empty string.</exception>
      <exception cref="T:System.ArgumentNullException">
            Either <paramref name="tagName" /> or <paramref name="tagValue" /> is <see langword="null" />.</exception>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Enrichment.ILogEnricher">
      <summary>
            Represents a component that augments log records with additional properties.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Enrichment.ILogEnricher.Enrich(Microsoft.Extensions.Diagnostics.Enrichment.IEnrichmentTagCollector)">
      <summary>
            Collects tags for a log record.</summary>
      <param name="collector">Where the enricher puts the tags it produces.</param>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Enrichment.IStaticLogEnricher">
      <summary>
            Augments log records with additional properties that are unchanging over the life of the object.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Enrichment.IStaticLogEnricher.Enrich(Microsoft.Extensions.Diagnostics.Enrichment.IEnrichmentTagCollector)">
      <summary>
            Collects tags for a log record.</summary>
      <param name="collector">The collector where the enricher puts the tags it produces.</param>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Latency.Checkpoint">
      <summary>
            Represents an event and the time it occurred relative to a well-known starting point.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.Checkpoint.#ctor(System.String,System.Int64,System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Latency.Checkpoint" /> struct.</summary>
      <param name="name">Name of the checkpoint.</param>
      <param name="elapsed">Elapsed time since start.</param>
      <param name="frequency">Frequency of the elapsed time.</param>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.Checkpoint.Equals(Microsoft.Extensions.Diagnostics.Latency.Checkpoint)">
      <summary>
            Determines whether this and a specified checkpoint are identical.</summary>
      <param name="other">The other checkpoint.</param>
      <returns>
        <see langword="true" /> if identical; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.Checkpoint.Equals(System.Object)">
      <summary>
            Determines whether this and a specified object are identical.</summary>
      <param name="obj">The object to compare.</param>
      <returns>
        <see langword="true" /> if identical; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.Checkpoint.GetHashCode">
      <summary>
            Gets a hash code for this object.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.Checkpoint.op_Equality(Microsoft.Extensions.Diagnostics.Latency.Checkpoint,Microsoft.Extensions.Diagnostics.Latency.Checkpoint)">
      <summary>
            Equality operator.</summary>
      <param name="left">First value.</param>
      <param name="right">Second value.</param>
      <returns>
        <see langword="true" /> if the operands are equal, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.Checkpoint.op_Inequality(Microsoft.Extensions.Diagnostics.Latency.Checkpoint,Microsoft.Extensions.Diagnostics.Latency.Checkpoint)">
      <summary>
            Inequality operator.</summary>
      <param name="left">First value.</param>
      <param name="right">Second value.</param>
      <returns>
        <see langword="true" /> if the operands are unequal, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.Checkpoint.Elapsed">
      <summary>
            Gets the relative time since the beginning of the associated operation at which the checkpoint was created.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.Checkpoint.Frequency">
      <summary>
            Gets the frequency of the timestamp value.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.Checkpoint.Name">
      <summary>
            Gets the name of the checkpoint.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Latency.CheckpointToken">
      <summary>
            Represents a registered checkpoint.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.CheckpointToken.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Latency.CheckpointToken" /> struct.</summary>
      <param name="name">Name of the checkpoint.</param>
      <param name="position">Position of the token in the token table.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.CheckpointToken.Name">
      <summary>
            Gets the name of the checkpoint.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.CheckpointToken.Position">
      <summary>
            Gets the position of token in the token table.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext">
      <summary>
            Abstraction that provides the context for latency measurement and diagnostics.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.AddCheckpoint(Microsoft.Extensions.Diagnostics.Latency.CheckpointToken)">
      <summary>
            Adds a checkpoint to the context.</summary>
      <param name="token">The checkpoint token.</param>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.AddMeasure(Microsoft.Extensions.Diagnostics.Latency.MeasureToken,System.Int64)">
      <summary>
            Adds to a measure.</summary>
      <param name="token">The measure token.</param>
      <param name="value">The value to add.</param>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.Freeze">
      <summary>
            Stops the latency measurement.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.RecordMeasure(Microsoft.Extensions.Diagnostics.Latency.MeasureToken,System.Int64)">
      <summary>
            Sets a measure to an absolute value.</summary>
      <param name="token">The measure token.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.SetTag(Microsoft.Extensions.Diagnostics.Latency.TagToken,System.String)">
      <summary>
            Adds a tag to the context.</summary>
      <param name="token">The tag token.</param>
      <param name="value">The value of the tag.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.LatencyData">
      <summary>
            Gets the accumulated latency data.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Latency.ILatencyContextProvider">
      <summary>
            A factory of latency contexts.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.ILatencyContextProvider.CreateContext">
      <summary>
            Creates a new <see cref="T:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext" />.</summary>
      <returns>A new latency context.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Latency.ILatencyContextTokenIssuer">
      <summary>
            Issues tokens for various object types.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.ILatencyContextTokenIssuer.GetCheckpointToken(System.String)">
      <summary>
            Gets a token for a named checkpoint.</summary>
      <param name="name">Name of the checkpoint.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <returns>Token to use with <see cref="M:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.AddCheckpoint(Microsoft.Extensions.Diagnostics.Latency.CheckpointToken)" />.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.ILatencyContextTokenIssuer.GetMeasureToken(System.String)">
      <summary>
            Gets a token for a named measure.</summary>
      <param name="name">Name of the measure.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <returns>Token to use with <see cref="M:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.AddMeasure(Microsoft.Extensions.Diagnostics.Latency.MeasureToken,System.Int64)" />
            and <see cref="M:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.RecordMeasure(Microsoft.Extensions.Diagnostics.Latency.MeasureToken,System.Int64)" />.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.ILatencyContextTokenIssuer.GetTagToken(System.String)">
      <summary>
            Gets a token for a named tag.</summary>
      <param name="name">Name of the tag.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
      <returns>Token to use with <see cref="M:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.SetTag(Microsoft.Extensions.Diagnostics.Latency.TagToken,System.String)" />.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Latency.ILatencyDataExporter">
      <summary>
            Abstraction that is used to export latency data.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.ILatencyDataExporter.ExportAsync(Microsoft.Extensions.Diagnostics.Latency.LatencyData,System.Threading.CancellationToken)">
      <summary>
            Exports latency data.</summary>
      <param name="data">The latency context's latency data.</param>
      <param name="cancellationToken">The cancellation token.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the export operation.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Latency.LatencyContextRegistrationOptions">
      <summary>
            Registered names for <see cref="T:Microsoft.Extensions.Diagnostics.Latency.ILatencyContext" />.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.LatencyContextRegistrationOptions.#ctor" />
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.LatencyContextRegistrationOptions.CheckpointNames">
      <summary>
            Gets or sets the list of registered checkpoint names.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.LatencyContextRegistrationOptions.MeasureNames">
      <summary>
            Gets or sets the list of registered measure names.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.LatencyContextRegistrationOptions.TagNames">
      <summary>
            Gets or sets the list of registered tag names.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Latency.LatencyData">
      <summary>
            Encapsulates the state accumulated while measuring the latency of an operation.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.LatencyData.#ctor(System.ArraySegment{Microsoft.Extensions.Diagnostics.Latency.Tag},System.ArraySegment{Microsoft.Extensions.Diagnostics.Latency.Checkpoint},System.ArraySegment{Microsoft.Extensions.Diagnostics.Latency.Measure},System.Int64,System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Latency.LatencyData" /> struct.</summary>
      <param name="tags">List of tags.</param>
      <param name="checkpoints">List of checkpoints.</param>
      <param name="measures">List of measures.</param>
      <param name="durationTimestamp">Total duration of the operation that is represented by this data.</param>
      <param name="durationTimestampFrequency">Frequency of the duration timestamp.</param>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.LatencyData.Checkpoints">
      <summary>
            Gets the list of checkpoints added while measuring the operation's latency.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.LatencyData.DurationTimestamp">
      <summary>
            Gets the total time measured by the latency context.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.LatencyData.DurationTimestampFrequency">
      <summary>
            Gets the frequency of the duration timestamp.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.LatencyData.Measures">
      <summary>
            Gets the list of measures added.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.LatencyData.Tags">
      <summary>
            Gets the list of tags added to provide metadata about the operation being measured.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Latency.Measure">
      <summary>
            Represents a measure.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.Measure.#ctor(System.String,System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Latency.Measure" /> struct.</summary>
      <param name="name">Name of the counter.</param>
      <param name="value">Value of the counter.</param>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.Measure.Equals(Microsoft.Extensions.Diagnostics.Latency.Measure)">
      <summary>
            Determines whether this and a specified measure are identical.</summary>
      <param name="other">The other measure.</param>
      <returns>
        <see langword="true" /> if identical; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.Measure.Equals(System.Object)">
      <summary>
            Determines whether this and a specified object are identical.</summary>
      <param name="obj">The object to compare.</param>
      <returns>
        <see langword="true" /> if identical; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.Measure.GetHashCode">
      <summary>
            Gets a hash code for this object.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.Measure.op_Equality(Microsoft.Extensions.Diagnostics.Latency.Measure,Microsoft.Extensions.Diagnostics.Latency.Measure)">
      <summary>
            Equality operator.</summary>
      <param name="left">First value.</param>
      <param name="right">Second value.</param>
      <returns>
        <see langword="true" /> if the operands are equal, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.Measure.op_Inequality(Microsoft.Extensions.Diagnostics.Latency.Measure,Microsoft.Extensions.Diagnostics.Latency.Measure)">
      <summary>
            Inequality operator.</summary>
      <param name="left">First value.</param>
      <param name="right">Second value.</param>
      <returns>
        <see langword="true" /> if the operands are unequal, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.Measure.Name">
      <summary>
            Gets the name of the measure.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.Measure.Value">
      <summary>
            Gets the value of the measure.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Latency.MeasureToken">
      <summary>
            Represents a registered measure.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.MeasureToken.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Latency.MeasureToken" /> struct.</summary>
      <param name="name">Name of the measure.</param>
      <param name="position">Position of the token in the token table.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.MeasureToken.Name">
      <summary>
            Gets the name of the measure.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.MeasureToken.Position">
      <summary>
            Gets the position of the token in the token table.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Latency.Tag">
      <summary>
            Represents a name and value pair to provide metadata about an operation being measured.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.Tag.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Latency.Tag" /> struct.</summary>
      <param name="name">Name of the tag.</param>
      <param name="value">Value of the tag.</param>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.Tag.Name">
      <summary>
            Gets the name of the tag.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.Tag.Value">
      <summary>
            Gets the value of the tag.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Latency.TagToken">
      <summary>
            Represents a registered tag.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Latency.TagToken.#ctor(System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Latency.TagToken" /> struct.</summary>
      <param name="name">Name of the tag.</param>
      <param name="position">Position of the token in the token table.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.TagToken.Name">
      <summary>
            Gets the name of the tag.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Latency.TagToken.Position">
      <summary>
            Gets the position of the token in the token table.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Metrics.CounterAttribute">
      <summary>
            Provides information to guide the production of a strongly typed 64 bit integer counter metric factory method and associated type.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.CounterAttribute.#ctor(System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.CounterAttribute" /> class.</summary>
      <param name="tagNames">Dimension names.</param>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.CounterAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.CounterAttribute" /> class.</summary>
      <param name="type">A type providing the metric tag names. The tag values are taken from the type's public fields and properties.</param>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.CounterAttribute.Name">
      <summary>
            Gets or sets the name of the metric.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.CounterAttribute.TagNames">
      <summary>
            Gets the metric's tag names.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.CounterAttribute.Type">
      <summary>
            Gets the type that supplies metric tags values.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Metrics.CounterAttribute`1">
      <summary>
            Provides information to guide the production of a strongly typed 64 bit integer counter metric factory method and associated type.</summary>
      <typeparam name="T">
            The type of value the counter will hold, which is limited to <see cref="T:System.Byte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />,
            <see cref="T:System.Single" />, <see cref="T:System.Double" />, or <see cref="T:System.Decimal" />.</typeparam>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.CounterAttribute`1.#ctor(System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.CounterAttribute`1" /> class.</summary>
      <param name="tagNames">variable array of tag names.</param>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.CounterAttribute`1.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.CounterAttribute`1" /> class.</summary>
      <param name="type">A type providing the metric tag names. The tag values are taken from the type's public fields and properties.</param>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.CounterAttribute`1.Name">
      <summary>
            Gets or sets the name of the metric.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.CounterAttribute`1.TagNames">
      <summary>
            Gets the metric's tag names.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.CounterAttribute`1.Type">
      <summary>
            Gets the type that supplies metric tag values.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Metrics.GaugeAttribute">
      <summary>
            Provides information to guide the production of a strongly typed gauge metric factory method and associated type.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.GaugeAttribute.#ctor(System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.GaugeAttribute" /> class.</summary>
      <param name="tagNames">Variable array of tag names.</param>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.GaugeAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.GaugeAttribute" /> class.</summary>
      <param name="type">A type providing the metric tag names. The tag values are taken from the type's public fields and properties.</param>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.GaugeAttribute.Name">
      <summary>
            Gets or sets the name of the metric.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.GaugeAttribute.TagNames">
      <summary>
            Gets the metric's tag names.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.GaugeAttribute.Type">
      <summary>
            Gets the type that supplies metric tag values.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Metrics.HistogramAttribute">
      <summary>
            Provides information to guide the production of a strongly typed histogram metric factory method and associated type.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.HistogramAttribute.#ctor(System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.HistogramAttribute" /> class.</summary>
      <param name="tagNames">variable array of tag names.</param>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.HistogramAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.HistogramAttribute" /> class.</summary>
      <param name="type">A type providing the metric tag names. The tag values are taken from the type's public fields and properties.</param>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.HistogramAttribute.Name">
      <summary>
            Gets or sets the name of the metric.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.HistogramAttribute.TagNames">
      <summary>
            Gets the metric's tags.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.HistogramAttribute.Type">
      <summary>
            Gets the type that supplies metric tag values.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Metrics.HistogramAttribute`1">
      <summary>
            Provides information to guide the production of a strongly typed histogram metric factory method and associated type.</summary>
      <typeparam name="T">
            The type of value the histogram will hold, which is limited to <see cref="T:System.Byte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />,
            <see cref="T:System.Single" />, <see cref="T:System.Double" />, or <see cref="T:System.Decimal" />.</typeparam>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.HistogramAttribute`1.#ctor(System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.HistogramAttribute`1" /> class.</summary>
      <param name="tagNames">A variable array of tag names.</param>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.HistogramAttribute`1.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.HistogramAttribute`1" /> class.</summary>
      <param name="type">A type providing the metric tag names. The tag values are taken from the type's public fields and properties.</param>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.HistogramAttribute`1.Name">
      <summary>
            Gets or sets the name of the metric.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.HistogramAttribute`1.TagNames">
      <summary>
            Gets the metric's tag names.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.HistogramAttribute`1.Type">
      <summary>
            Gets the type that supplies metric tag values.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Diagnostics.Metrics.TagNameAttribute">
      <summary>
             Provides tag information for strongly typed metrics.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Diagnostics.Metrics.TagNameAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Diagnostics.Metrics.TagNameAttribute" /> class.</summary>
      <param name="name">Tag name.</param>
    </member>
    <member name="P:Microsoft.Extensions.Diagnostics.Metrics.TagNameAttribute.Name">
      <summary>
            Gets the name of the tag.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Http.Diagnostics.HttpRouteParameterRedactionMode">
      <summary>
            Strategy to decide how HTTP request path parameters are redacted.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Http.Diagnostics.HttpRouteParameterRedactionMode.Loose">
      <summary>
            All parameters are considered as non-sensitive and included as-is by default.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Http.Diagnostics.HttpRouteParameterRedactionMode.None">
      <summary>
            Route parameters are not redacted regardless of the presence of data classification annotations.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Http.Diagnostics.HttpRouteParameterRedactionMode.Strict">
      <summary>
            All parameters are considered as sensitive and are required to be explicitly annotated with a data classification.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Http.Diagnostics.IDownstreamDependencyMetadata">
      <summary>
            Interface for passing dependency metadata.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Http.Diagnostics.IDownstreamDependencyMetadata.DependencyName">
      <summary>
            Gets the name of the dependent service.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Http.Diagnostics.IDownstreamDependencyMetadata.RequestMetadata">
      <summary>
            Gets the list of all metadata for all routes to the dependency service.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Http.Diagnostics.IDownstreamDependencyMetadata.UniqueHostNameSuffixes">
      <summary>
            Gets the list of host name suffixes that can uniquely identify a host as this dependency.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Http.Diagnostics.IOutgoingRequestContext">
      <summary>
            Interface to represent outgoing request context.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Http.Diagnostics.IOutgoingRequestContext.SetRequestMetadata(Microsoft.Extensions.Http.Diagnostics.RequestMetadata)">
      <summary>
            Sets metadata for outgoing requests to be used for telemetry purposes.</summary>
      <param name="metadata">Metadata for the request.</param>
    </member>
    <member name="P:Microsoft.Extensions.Http.Diagnostics.IOutgoingRequestContext.RequestMetadata">
      <summary>
            Gets metadata for outgoing requests to be used for telemetry purposes.</summary>
      <returns>request metadata.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Http.Diagnostics.RequestMetadata">
      <summary>
            Holds request metadata for use by the telemetry system.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Http.Diagnostics.RequestMetadata.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Http.Diagnostics.RequestMetadata" /> class.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Http.Diagnostics.RequestMetadata.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Http.Diagnostics.RequestMetadata" /> class.</summary>
      <param name="methodType">HTTP method type of the request.</param>
      <param name="requestRoute">Route of the request.</param>
      <param name="requestName">Name of the request.</param>
      <exception cref="T:System.ArgumentNullException">Any argument is <see langword="null" />.</exception>
    </member>
    <member name="P:Microsoft.Extensions.Http.Diagnostics.RequestMetadata.DependencyName">
      <summary>
            Gets or sets name of the dependency to which the outgoing request is being made.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Http.Diagnostics.RequestMetadata.MethodType">
      <summary>
            Gets or sets the HTTP method type of the request.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Http.Diagnostics.RequestMetadata.RequestName">
      <summary>
            Gets or sets name to be logged for the request.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Http.Diagnostics.RequestMetadata.RequestRoute">
      <summary>
            Gets or sets request's route template.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Http.Diagnostics.TelemetryConstants">
      <summary>
            Common telemetry constants used by various telemetry libraries.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Http.Diagnostics.TelemetryConstants.ClientApplicationNameHeader">
      <summary>
            Represents the header for client application name, sent on an outgoing HTTP call.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Http.Diagnostics.TelemetryConstants.Redacted">
      <summary>
            Represents the placeholder text used for redacted data where needed.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Http.Diagnostics.TelemetryConstants.RequestMetadataKey">
      <summary>
            Request metadata key that is used when storing request metadata object.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Http.Diagnostics.TelemetryConstants.ServerApplicationNameHeader">
      <summary>
            Represents the header for server application name, sent on a HTTP request.</summary>
    </member>
    <member name="F:Microsoft.Extensions.Http.Diagnostics.TelemetryConstants.Unknown">
      <summary>
            Represents the placeholder text for an unknown request name or dependency name in telemetry.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Logging.ITagCollector">
      <summary>
            Interface given to custom tag providers, enabling them to emit tags.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.ITagCollector.Add(System.String,System.Object,Microsoft.Extensions.Compliance.Classification.DataClassificationSet)">
      <summary>
            Adds a tag.</summary>
      <param name="tagName">The name of the tag to add.</param>
      <param name="tagValue">The value of the tag to add.</param>
      <param name="classifications">The data classifications of the tag value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tagName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tagName" /> is empty or contains exclusively whitespace,
            or when a tag of the same name has already been added.</exception>
    </member>
    <member name="M:Microsoft.Extensions.Logging.ITagCollector.Add(System.String,System.Object)">
      <summary>
            Adds a tag.</summary>
      <param name="tagName">The name of the tag to add.</param>
      <param name="tagValue">The value of the tag to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tagName" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tagName" /> is empty or contains exclusively whitespace,
            or when a tag of the same name has already been added.</exception>
    </member>
    <member name="T:Microsoft.Extensions.Logging.LoggingSampler">
      <summary>
            Controls the number of samples of log records collected and sent to the backend.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.LoggingSampler.#ctor" />
    <member name="M:Microsoft.Extensions.Logging.LoggingSampler.ShouldSample``1(Microsoft.Extensions.Logging.Abstractions.LogEntry{``0}@|System.Runtime.InteropServices.InAttribute)">
      <summary>
            Makes a sampling decision for the provided <paramref name="logEntry" />.</summary>
      <param name="logEntry">The log entry used to make the sampling decision for.</param>
      <typeparam name="TState">The type of the log entry state.</typeparam>
      <returns>
        <see langword="true" /> if the log record should be sampled; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Logging.LogPropertiesAttribute">
      <summary>
            Marks a logging method parameter whose public properties need to be logged as log tags.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.LogPropertiesAttribute.#ctor" />
    <member name="P:Microsoft.Extensions.Logging.LogPropertiesAttribute.OmitReferenceName">
      <summary>
            Gets or sets a value indicating whether to prefix the name of the parameter or property to the generated name of each tag being logged.</summary>
      <returns>
            Defaults to <see langword="false" />.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Logging.LogPropertiesAttribute.SkipNullProperties">
      <summary>
            Gets or sets a value indicating whether <see langword="null" /> properties are logged.</summary>
      <returns>
            Defaults to <see langword="false" />.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Logging.LogPropertiesAttribute.Transitive">
      <summary>
            Gets or sets a value indicating whether to transitively visit properties which are complex objects.</summary>
      <returns>
            Defaults to <see langword="false" />.</returns>
    </member>
    <member name="T:Microsoft.Extensions.Logging.LogPropertyIgnoreAttribute">
      <summary>
            Indicates that a tag should not be logged.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.LogPropertyIgnoreAttribute.#ctor" />
    <member name="T:Microsoft.Extensions.Logging.TagNameAttribute">
      <summary>
            Defines the tag name to use for a logged parameter or property.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.TagNameAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.Logging.TagNameAttribute" /> class.</summary>
      <param name="name">The tag name to use when logging the annotated parameter or property.</param>
    </member>
    <member name="P:Microsoft.Extensions.Logging.TagNameAttribute.Name">
      <summary>
            Gets the name of the tag to be used when logging the parameter or property.</summary>
    </member>
    <member name="T:Microsoft.Extensions.Logging.TagProviderAttribute">
      <summary>
            Defines a method to invoke to generate logging tags for a referenced object.</summary>
    </member>
    <member name="M:Microsoft.Extensions.Logging.TagProviderAttribute.#ctor(System.Type,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Extensions.Logging.TagProviderAttribute" /> class with custom tags provider.</summary>
      <param name="providerType">A type containing a method that provides a custom set of tags to log.</param>
      <param name="providerMethod">The name of a method on the provider type that generates a custom set of tags to log.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerMethod" /> or <paramref name="providerType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerMethod" /> is either an empty string or contains only whitespace.</exception>
    </member>
    <member name="P:Microsoft.Extensions.Logging.TagProviderAttribute.OmitReferenceName">
      <summary>
            Gets or sets a value indicating whether to prefix the name of the parameter or property to the generated name of each tag being logged.</summary>
      <returns>
            Defaults to <see langword="false" />.</returns>
    </member>
    <member name="P:Microsoft.Extensions.Logging.TagProviderAttribute.ProviderMethod">
      <summary>
            Gets the name of the method that provides tags to be logged.</summary>
    </member>
    <member name="P:Microsoft.Extensions.Logging.TagProviderAttribute.ProviderType">
      <summary>
            Gets the <see cref="T:System.Type" /> containing the method that provides tags to be logged.</summary>
    </member>
  </members>
</doc>