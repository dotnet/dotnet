<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Numerics.Vectors</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.Matrix3x2">
      <summary>Represents a 3x2 matrix.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M11">
      <summary>The first element of the first row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M12">
      <summary>The second element of the first row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M21">
      <summary>The first element of the second row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M22">
      <summary>The second element of the second row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M31">
      <summary>The first element of the third row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M32">
      <summary>The second element of the third row.</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a 3x2 matrix from the specified components.</summary>
      <param name="m11">The value to assign to the first element in the first row.</param>
      <param name="m12">The value to assign to the second element in the first row.</param>
      <param name="m21">The value to assign to the first element in the second row.</param>
      <param name="m22">The value to assign to the second element in the second row.</param>
      <param name="m31">The value to assign to the first element in the third row.</param>
      <param name="m32">The value to assign to the second element in the third row.</param>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Add(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Adds each element in one matrix with its corresponding element in a second matrix.</summary>
      <param name="value1">The first matrix.</param>
      <param name="value2">The second matrix.</param>
      <returns>The matrix that contains the summed values of <paramref name="value1" /> and <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Create(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="x" />
      <param name="y" />
      <param name="z" />
    </member>
    <member name="M:System.Numerics.Matrix3x2.Create(System.Numerics.Vector2)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Matrix3x2.Create(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <param name="m11" />
      <param name="m12" />
      <param name="m21" />
      <param name="m22" />
      <param name="m31" />
      <param name="m32" />
    </member>
    <member name="M:System.Numerics.Matrix3x2.Create(System.Single)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single,System.Numerics.Vector2)">
      <summary>Creates a rotation matrix using the specified rotation in radians and a center point.</summary>
      <param name="radians">The amount of rotation, in radians.</param>
      <param name="centerPoint">The center point.</param>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single)">
      <summary>Creates a rotation matrix using the given rotation in radians.</summary>
      <param name="radians">The amount of rotation, in radians.</param>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Creates a scaling matrix from the specified vector scale with an offset from the specified center point.</summary>
      <param name="scales">The scale to use.</param>
      <param name="centerPoint">The center offset.</param>
      <returns>The scaling matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2)">
      <summary>Creates a scaling matrix from the specified vector scale.</summary>
      <param name="scales">The scale to use.</param>
      <returns>The scaling matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Numerics.Vector2)">
      <summary>Creates a scaling matrix that scales uniformly with the specified scale with an offset from the specified center.</summary>
      <param name="scale">The uniform scale to use.</param>
      <param name="centerPoint">The center offset.</param>
      <returns>The scaling matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single,System.Numerics.Vector2)">
      <summary>Creates a scaling matrix that is offset by a given center point.</summary>
      <param name="xScale">The value to scale by on the X axis.</param>
      <param name="yScale">The value to scale by on the Y axis.</param>
      <param name="centerPoint">The center point.</param>
      <returns>The scaling matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single)">
      <summary>Creates a scaling matrix from the specified X and Y components.</summary>
      <param name="xScale">The value to scale by on the X axis.</param>
      <param name="yScale">The value to scale by on the Y axis.</param>
      <returns>The scaling matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single)">
      <summary>Creates a scaling matrix that scales uniformly with the given scale.</summary>
      <param name="scale">The uniform scale to use.</param>
      <returns>The scaling matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single,System.Numerics.Vector2)">
      <summary>Creates a skew matrix from the specified angles in radians and a center point.</summary>
      <param name="radiansX">The X angle, in radians.</param>
      <param name="radiansY">The Y angle, in radians.</param>
      <param name="centerPoint">The center point.</param>
      <returns>The skew matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single)">
      <summary>Creates a skew matrix from the specified angles in radians.</summary>
      <param name="radiansX">The X angle, in radians.</param>
      <param name="radiansY">The Y angle, in radians.</param>
      <returns>The skew matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Numerics.Vector2)">
      <summary>Creates a translation matrix from the specified 2-dimensional vector.</summary>
      <param name="position">The translation position.</param>
      <returns>The translation matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Single,System.Single)">
      <summary>Creates a translation matrix from the specified X and Y components.</summary>
      <param name="xPosition">The X position.</param>
      <param name="yPosition">The Y position.</param>
      <returns>The translation matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Numerics.Matrix3x2)">
      <summary>Returns a value that indicates whether this instance and another 3x2 matrix are equal.</summary>
      <param name="other">The other matrix.</param>
      <returns>
        <see langword="true" /> if the two matrices are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if the current instance and <paramref name="obj" /> are equal; otherwise, <see langword="false" />. If <paramref name="obj" /> is <see langword="null" />, the method returns <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetDeterminant">
      <summary>Calculates the determinant for this matrix.</summary>
      <returns>The determinant.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetElement(System.Int32,System.Int32)">
      <param name="row" />
      <param name="column" />
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetRow(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Numerics.Matrix3x2.Invert(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2@)">
      <summary>Inverts the specified matrix. The return value indicates whether the operation succeeded.</summary>
      <param name="matrix">The matrix to invert.</param>
      <param name="result">When this method returns, contains the inverted matrix if the operation succeeded.</param>
      <returns>
        <see langword="true" /> if <paramref name="matrix" /> was converted successfully; otherwise,  <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Lerp(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2,System.Single)">
      <summary>Performs a linear interpolation from one matrix to a second matrix based on a value that specifies the weighting of the second matrix.</summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <param name="amount">The relative weighting of <paramref name="matrix2" />.</param>
      <returns>The interpolated matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Returns the matrix that results from multiplying two matrices together.</summary>
      <param name="value1">The first matrix.</param>
      <param name="value2">The second matrix.</param>
      <returns>The product matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary>Returns the matrix that results from scaling all the elements of a specified matrix by a scalar factor.</summary>
      <param name="value1">The matrix to scale.</param>
      <param name="value2">The scaling value to use.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Negate(System.Numerics.Matrix3x2)">
      <summary>Negates the specified matrix by multiplying all its values by -1.</summary>
      <param name="value">The matrix to negate.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Addition(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Adds each element in one matrix with its corresponding element in a second matrix.</summary>
      <param name="value1">The first matrix.</param>
      <param name="value2">The second matrix.</param>
      <returns>The matrix that contains the summed values.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Equality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Returns a value that indicates whether the specified matrices are equal.</summary>
      <param name="value1">The first matrix to compare.</param>
      <param name="value2">The second matrix to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> and <paramref name="value2" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Inequality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Returns a value that indicates whether the specified matrices are not equal.</summary>
      <param name="value1">The first matrix to compare.</param>
      <param name="value2">The second matrix to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> and <paramref name="value2" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Returns the matrix that results from multiplying two matrices together.</summary>
      <param name="value1">The first matrix.</param>
      <param name="value2">The second matrix.</param>
      <returns>The product matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary>Returns the matrix that results from scaling all the elements of a specified matrix by a scalar factor.</summary>
      <param name="value1">The matrix to scale.</param>
      <param name="value2">The scaling value to use.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Subtraction(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Subtracts each element in a second matrix from its corresponding element in a first matrix.</summary>
      <param name="value1">The first matrix.</param>
      <param name="value2">The second matrix.</param>
      <returns>The matrix containing the values that result from subtracting each element in <paramref name="value2" /> from its corresponding element in <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_UnaryNegation(System.Numerics.Matrix3x2)">
      <summary>Negates the specified matrix by multiplying all its values by -1.</summary>
      <param name="value">The matrix to negate.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Subtract(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Subtracts each element in a second matrix from its corresponding element in a first matrix.</summary>
      <param name="value1">The first matrix.</param>
      <param name="value2">The second matrix.</param>
      <returns>The matrix containing the values that result from subtracting each element in <paramref name="value2" /> from its corresponding element in <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.ToString">
      <summary>Returns a string that represents this matrix.</summary>
      <returns>The string representation of this matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.WithElement(System.Int32,System.Int32,System.Single)">
      <param name="row" />
      <param name="column" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Matrix3x2.WithRow(System.Int32,System.Numerics.Vector2)">
      <param name="index" />
      <param name="value" />
    </member>
    <member name="P:System.Numerics.Matrix3x2.Identity">
      <summary>Gets the multiplicative identity matrix.</summary>
      <returns>The multiplicative identify matrix.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.IsIdentity">
      <summary>Indicates whether the current matrix is the identity matrix.</summary>
      <returns>
        <see langword="true" /> if the current matrix is the identity matrix; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Item(System.Int32,System.Int32)">
      <summary>Gets or sets the element at the specified indices.</summary>
      <param name="row">The index of the row containing the element to get or set.</param>
      <param name="column">The index of the column containing the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="row" /> was less than zero or greater than the number of rows.</para>
        <para>-or-</para>
        <para>
          <paramref name="column" /> was less than zero or greater than the number of columns.</para>
      </exception>
      <returns>The element at [<paramref name="row" />][<paramref name="column" />].</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Item(System.Int32)">
      <param name="row" />
    </member>
    <member name="P:System.Numerics.Matrix3x2.Translation">
      <summary>Gets or sets the translation component of this matrix.</summary>
      <returns>The translation component of the current instance.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.X" />
    <member name="P:System.Numerics.Matrix3x2.Y" />
    <member name="P:System.Numerics.Matrix3x2.Z" />
    <member name="T:System.Numerics.Matrix4x4">
      <summary>Represents a 4x4 matrix.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M11">
      <summary>The first element of the first row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M12">
      <summary>The second element of the first row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M13">
      <summary>The third element of the first row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M14">
      <summary>The fourth element of the first row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M21">
      <summary>The first element of the second row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M22">
      <summary>The second element of the second row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M23">
      <summary>The third element of the second row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M24">
      <summary>The fourth element of the second row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M31">
      <summary>The first element of the third row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M32">
      <summary>The second element of the third row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M33">
      <summary>The third element of the third row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M34">
      <summary>The fourth element of the third row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M41">
      <summary>The first element of the fourth row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M42">
      <summary>The second element of the fourth row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M43">
      <summary>The third element of the fourth row.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M44">
      <summary>The fourth element of the fourth row.</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Numerics.Matrix3x2)">
      <summary>Creates a <see cref="T:System.Numerics.Matrix4x4" /> object from a specified <see cref="T:System.Numerics.Matrix3x2" /> object.</summary>
      <param name="value">A 3x2 matrix.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a 4x4 matrix from the specified components.</summary>
      <param name="m11">The value to assign to the first element in the first row.</param>
      <param name="m12">The value to assign to the second element in the first row.</param>
      <param name="m13">The value to assign to the third element in the first row.</param>
      <param name="m14">The value to assign to the fourth element in the first row.</param>
      <param name="m21">The value to assign to the first element in the second row.</param>
      <param name="m22">The value to assign to the second element in the second row.</param>
      <param name="m23">The value to assign to the third element in the second row.</param>
      <param name="m24">The value to assign to the fourth element in the second row.</param>
      <param name="m31">The value to assign to the first element in the third row.</param>
      <param name="m32">The value to assign to the second element in the third row.</param>
      <param name="m33">The value to assign to the third element in the third row.</param>
      <param name="m34">The value to assign to the fourth element in the third row.</param>
      <param name="m41">The value to assign to the first element in the fourth row.</param>
      <param name="m42">The value to assign to the second element in the fourth row.</param>
      <param name="m43">The value to assign to the third element in the fourth row.</param>
      <param name="m44">The value to assign to the fourth element in the fourth row.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Add(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Adds each element in one matrix with its corresponding element in a second matrix.</summary>
      <param name="value1">The first matrix.</param>
      <param name="value2">The second matrix.</param>
      <returns>The matrix that contains the summed values of <paramref name="value1" /> and <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Create(System.Numerics.Matrix3x2)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Matrix4x4.Create(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="x" />
      <param name="y" />
      <param name="z" />
      <param name="w" />
    </member>
    <member name="M:System.Numerics.Matrix4x4.Create(System.Numerics.Vector4)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Matrix4x4.Create(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <param name="m11" />
      <param name="m12" />
      <param name="m13" />
      <param name="m14" />
      <param name="m21" />
      <param name="m22" />
      <param name="m23" />
      <param name="m24" />
      <param name="m31" />
      <param name="m32" />
      <param name="m33" />
      <param name="m34" />
      <param name="m41" />
      <param name="m42" />
      <param name="m43" />
      <param name="m44" />
    </member>
    <member name="M:System.Numerics.Matrix4x4.Create(System.Single)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Creates a spherical billboard that rotates around a specified object position.</summary>
      <param name="objectPosition">The position of the object that the billboard will rotate around.</param>
      <param name="cameraPosition">The position of the camera.</param>
      <param name="cameraUpVector">The up vector of the camera.</param>
      <param name="cameraForwardVector">The forward vector of the camera.</param>
      <returns>The created billboard.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateBillboardLeftHanded(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="objectPosition" />
      <param name="cameraPosition" />
      <param name="cameraUpVector" />
      <param name="cameraForwardVector" />
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateConstrainedBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Creates a cylindrical billboard that rotates around a specified axis.</summary>
      <param name="objectPosition">The position of the object that the billboard will rotate around.</param>
      <param name="cameraPosition">The position of the camera.</param>
      <param name="rotateAxis">The axis to rotate the billboard around.</param>
      <param name="cameraForwardVector">The forward vector of the camera.</param>
      <param name="objectForwardVector">The forward vector of the object.</param>
      <returns>The billboard matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateConstrainedBillboardLeftHanded(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="objectPosition" />
      <param name="cameraPosition" />
      <param name="rotateAxis" />
      <param name="cameraForwardVector" />
      <param name="objectForwardVector" />
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary>Creates a matrix that rotates around an arbitrary vector.</summary>
      <param name="axis">The axis to rotate around.</param>
      <param name="angle">The angle to rotate around <paramref name="axis" />, in radians.</param>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromQuaternion(System.Numerics.Quaternion)">
      <summary>Creates a rotation matrix from the specified Quaternion rotation value.</summary>
      <param name="quaternion">The source Quaternion.</param>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Creates a rotation matrix from the specified yaw, pitch, and roll.</summary>
      <param name="yaw">The angle of rotation, in radians, around the Y axis.</param>
      <param name="pitch">The angle of rotation, in radians, around the X axis.</param>
      <param name="roll">The angle of rotation, in radians, around the Z axis.</param>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateLookAt(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Creates a view matrix.</summary>
      <param name="cameraPosition">The position of the camera.</param>
      <param name="cameraTarget">The target towards which the camera is pointing.</param>
      <param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
      <returns>The view matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateLookAtLeftHanded(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Creates a left-handed view matrix.</summary>
      <param name="cameraPosition">The position of the camera.</param>
      <param name="cameraTarget">The target towards which the camera is pointing.</param>
      <param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
      <returns>The left-handed view matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateLookTo(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Creates a right-handed view matrix.</summary>
      <param name="cameraPosition">The position of the camera.</param>
      <param name="cameraDirection">The direction in which the camera is pointing.</param>
      <param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
      <returns>The right-handed view matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateLookToLeftHanded(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Creates a left-handed view matrix.</summary>
      <param name="cameraPosition">The position of the camera.</param>
      <param name="cameraDirection">The direction in which the camera is pointing.</param>
      <param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
      <returns>The left-handed view matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates an orthographic perspective matrix from the given view volume dimensions.</summary>
      <param name="width">The width of the view volume.</param>
      <param name="height">The height of the view volume.</param>
      <param name="zNearPlane">The minimum Z-value of the view volume.</param>
      <param name="zFarPlane">The maximum Z-value of the view volume.</param>
      <returns>The orthographic projection matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographicLeftHanded(System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a left-handed orthographic perspective matrix from the given view volume dimensions.</summary>
      <param name="width">The width of the view volume.</param>
      <param name="height">The height of the view volume.</param>
      <param name="zNearPlane">The minimum Z-value of the view volume.</param>
      <param name="zFarPlane">The maximum Z-value of the view volume.</param>
      <returns>The left-handed orthographic projection matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a customized orthographic projection matrix.</summary>
      <param name="left">The minimum X-value of the view volume.</param>
      <param name="right">The maximum X-value of the view volume.</param>
      <param name="bottom">The minimum Y-value of the view volume.</param>
      <param name="top">The maximum Y-value of the view volume.</param>
      <param name="zNearPlane">The minimum Z-value of the view volume.</param>
      <param name="zFarPlane">The maximum Z-value of the view volume.</param>
      <returns>The orthographic projection matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographicOffCenterLeftHanded(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a left-handed customized orthographic projection matrix.</summary>
      <param name="left">The minimum X-value of the view volume.</param>
      <param name="right">The maximum X-value of the view volume.</param>
      <param name="bottom">The minimum Y-value of the view volume.</param>
      <param name="top">The maximum Y-value of the view volume.</param>
      <param name="zNearPlane">The minimum Z-value of the view volume.</param>
      <param name="zFarPlane">The maximum Z-value of the view volume.</param>
      <returns>The left-handed orthographic projection matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a perspective projection matrix from the given view volume dimensions.</summary>
      <param name="width">The width of the view volume at the near view plane.</param>
      <param name="height">The height of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">The distance to the near view plane.</param>
      <param name="farPlaneDistance">The distance to the far view plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nearPlaneDistance" /> is less than or equal to zero.  
  
 -or-  
  
 <paramref name="farPlaneDistance" /> is less than or equal to zero.  
  
 -or-  
  
 <paramref name="nearPlaneDistance" /> is greater than or equal to <paramref name="farPlaneDistance" />.</exception>
      <returns>The perspective projection matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a perspective projection matrix based on a field of view, aspect ratio, and near and far view plane distances.</summary>
      <param name="fieldOfView">The field of view in the y direction, in radians.</param>
      <param name="aspectRatio">The aspect ratio, defined as view space width divided by height.</param>
      <param name="nearPlaneDistance">The distance to the near view plane.</param>
      <param name="farPlaneDistance">The distance to the far view plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfView" /> is less than or equal to zero.  
  
 -or-  
  
 <paramref name="fieldOfView" /> is greater than or equal to <see cref="F:System.Math.PI" />.  
  
 <paramref name="nearPlaneDistance" /> is less than or equal to zero.  
  
 -or-  
  
 <paramref name="farPlaneDistance" /> is less than or equal to zero.  
  
 -or-  
  
 <paramref name="nearPlaneDistance" /> is greater than or equal to <paramref name="farPlaneDistance" />.</exception>
      <returns>The perspective projection matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveFieldOfViewLeftHanded(System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a left-handed perspective projection matrix based on a field of view, aspect ratio, and near and far view plane distances.</summary>
      <param name="fieldOfView">The field of view in the y direction, in radians.</param>
      <param name="aspectRatio">The aspect ratio, defined as view space width divided by height.</param>
      <param name="nearPlaneDistance">The distance to the near view plane.</param>
      <param name="farPlaneDistance">The distance to the far view plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfView" /> is less than or equal to zero.

-or-

<paramref name="fieldOfView" /> is greater than or equal to <see cref="F:System.Math.PI" />.

-or-

<paramref name="nearPlaneDistance" /> is less than or equal to zero.

-or-

<paramref name="farPlaneDistance" /> is less than or equal to zero.

-or-

<paramref name="nearPlaneDistance" /> is greater than or equal to <paramref name="farPlaneDistance" />.</exception>
      <returns>The left-handed perspective projection matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveLeftHanded(System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a left-handed perspective projection matrix from the given view volume dimensions.</summary>
      <param name="width">The width of the view volume at the near view plane.</param>
      <param name="height">The height of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">The distance to the near view plane.</param>
      <param name="farPlaneDistance">The distance to the far view plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nearPlaneDistance" /> is less than or equal to zero.

-or-

<paramref name="farPlaneDistance" /> is less than or equal to zero.

-or-

<paramref name="nearPlaneDistance" /> is greater than or equal to <paramref name="farPlaneDistance" />.</exception>
      <returns>The left-handed perspective projection matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a customized perspective projection matrix.</summary>
      <param name="left">The minimum x-value of the view volume at the near view plane.</param>
      <param name="right">The maximum x-value of the view volume at the near view plane.</param>
      <param name="bottom">The minimum y-value of the view volume at the near view plane.</param>
      <param name="top">The maximum y-value of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">The distance to the near view plane.</param>
      <param name="farPlaneDistance">The distance to the far view plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nearPlaneDistance" /> is less than or equal to zero.  
  
 -or-  
  
 <paramref name="farPlaneDistance" /> is less than or equal to zero.  
  
 -or-  
  
 <paramref name="nearPlaneDistance" /> is greater than or equal to <paramref name="farPlaneDistance" />.</exception>
      <returns>The perspective projection matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveOffCenterLeftHanded(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a left-handed customized perspective projection matrix.</summary>
      <param name="left">The minimum x-value of the view volume at the near view plane.</param>
      <param name="right">The maximum x-value of the view volume at the near view plane.</param>
      <param name="bottom">The minimum y-value of the view volume at the near view plane.</param>
      <param name="top">The maximum y-value of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">The distance to the near view plane.</param>
      <param name="farPlaneDistance">The distance to the far view plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nearPlaneDistance" /> is less than or equal to zero.

-or-

<paramref name="farPlaneDistance" /> is less than or equal to zero.

-or-

<paramref name="nearPlaneDistance" /> is greater than or equal to <paramref name="farPlaneDistance" />.</exception>
      <returns>The left-handed perspective projection matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateReflection(System.Numerics.Plane)">
      <summary>Creates a matrix that reflects the coordinate system about a specified plane.</summary>
      <param name="value">The plane about which to create a reflection.</param>
      <returns>A new matrix expressing the reflection.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single,System.Numerics.Vector3)">
      <summary>Creates a matrix for rotating points around the X axis from a center point.</summary>
      <param name="radians">The amount, in radians, by which to rotate around the X axis.</param>
      <param name="centerPoint">The center point.</param>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single)">
      <summary>Creates a matrix for rotating points around the X axis.</summary>
      <param name="radians">The amount, in radians, by which to rotate around the X axis.</param>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single,System.Numerics.Vector3)">
      <summary>The amount, in radians, by which to rotate around the Y axis from a center point.</summary>
      <param name="radians">The amount, in radians, by which to rotate around the Y-axis.</param>
      <param name="centerPoint">The center point.</param>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single)">
      <summary>Creates a matrix for rotating points around the Y axis.</summary>
      <param name="radians">The amount, in radians, by which to rotate around the Y-axis.</param>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single,System.Numerics.Vector3)">
      <summary>Creates a matrix for rotating points around the Z axis from a center point.</summary>
      <param name="radians">The amount, in radians, by which to rotate around the Z-axis.</param>
      <param name="centerPoint">The center point.</param>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single)">
      <summary>Creates a matrix for rotating points around the Z axis.</summary>
      <param name="radians">The amount, in radians, by which to rotate around the Z-axis.</param>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Creates a scaling matrix with a center point.</summary>
      <param name="scales">The vector that contains the amount to scale on each axis.</param>
      <param name="centerPoint">The center point.</param>
      <returns>The scaling matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3)">
      <summary>Creates a scaling matrix from the specified vector scale.</summary>
      <param name="scales">The scale to use.</param>
      <returns>The scaling matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Numerics.Vector3)">
      <summary>Creates a uniform scaling matrix that scales equally on each axis with a center point.</summary>
      <param name="scale">The uniform scaling factor.</param>
      <param name="centerPoint">The center point.</param>
      <returns>The scaling matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single,System.Numerics.Vector3)">
      <summary>Creates a scaling matrix that is offset by a given center point.</summary>
      <param name="xScale">The value to scale by on the X axis.</param>
      <param name="yScale">The value to scale by on the Y axis.</param>
      <param name="zScale">The value to scale by on the Z axis.</param>
      <param name="centerPoint">The center point.</param>
      <returns>The scaling matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single)">
      <summary>Creates a scaling matrix from the specified X, Y, and Z components.</summary>
      <param name="xScale">The value to scale by on the X axis.</param>
      <param name="yScale">The value to scale by on the Y axis.</param>
      <param name="zScale">The value to scale by on the Z axis.</param>
      <returns>The scaling matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single)">
      <summary>Creates a uniform scaling matrix that scale equally on each axis.</summary>
      <param name="scale">The uniform scaling factor.</param>
      <returns>The scaling matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateShadow(System.Numerics.Vector3,System.Numerics.Plane)">
      <summary>Creates a matrix that flattens geometry into a specified plane as if casting a shadow from a specified light source.</summary>
      <param name="lightDirection">The direction from which the light that will cast the shadow is coming.</param>
      <param name="plane">The plane onto which the new matrix should flatten geometry so as to cast a shadow.</param>
      <returns>A new matrix that can be used to flatten geometry onto the specified plane from the specified direction.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Numerics.Vector3)">
      <summary>Creates a translation matrix from the specified 3-dimensional vector.</summary>
      <param name="position">The amount to translate in each axis.</param>
      <returns>The translation matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Single,System.Single,System.Single)">
      <summary>Creates a translation matrix from the specified X, Y, and Z components.</summary>
      <param name="xPosition">The amount to translate on the X axis.</param>
      <param name="yPosition">The amount to translate on the Y axis.</param>
      <param name="zPosition">The amount to translate on the Z axis.</param>
      <returns>The translation matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateViewport(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a right-handed viewport matrix from the specified parameters.</summary>
      <param name="x">X coordinate of the viewport upper left corner.</param>
      <param name="y">Y coordinate of the viewport upper left corner.</param>
      <param name="width">Viewport width.</param>
      <param name="height">Viewport height.</param>
      <param name="minDepth">Viewport minimum depth.</param>
      <param name="maxDepth">Viewport maximum depth.</param>
      <returns>The right-handed viewport matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateViewportLeftHanded(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a left-handed viewport matrix from the specified parameters.</summary>
      <param name="x">X coordinate of the viewport upper left corner.</param>
      <param name="y">Y coordinate of the viewport upper left corner.</param>
      <param name="width">Viewport width.</param>
      <param name="height">Viewport height.</param>
      <param name="minDepth">Viewport minimum depth.</param>
      <param name="maxDepth">Viewport maximum depth.</param>
      <returns>The left-handed viewport matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateWorld(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Creates a world matrix with the specified parameters.</summary>
      <param name="position">The position of the object.</param>
      <param name="forward">The forward direction of the object.</param>
      <param name="up">The upward direction of the object. Its value is usually <c>[0, 1, 0]</c>.</param>
      <returns>The world matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Decompose(System.Numerics.Matrix4x4,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.Numerics.Vector3@)">
      <summary>Attempts to extract the scale, translation, and rotation components from the given scale, rotation, or translation matrix. The return value indicates whether the operation succeeded.</summary>
      <param name="matrix">The source matrix.</param>
      <param name="scale">When this method returns, contains the scaling component of the transformation matrix if the operation succeeded.</param>
      <param name="rotation">When this method returns, contains the rotation component of the transformation matrix if the operation succeeded.</param>
      <param name="translation">When the method returns, contains the translation component of the transformation matrix if the operation succeeded.</param>
      <returns>
        <see langword="true" /> if <paramref name="matrix" /> was decomposed successfully; otherwise,  <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Numerics.Matrix4x4)">
      <summary>Returns a value that indicates whether this instance and another 4x4 matrix are equal.</summary>
      <param name="other">The other matrix.</param>
      <returns>
        <see langword="true" /> if the two matrices are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if the current instance and <paramref name="obj" /> are equal; otherwise, <see langword="false" />. If <paramref name="obj" /> is <see langword="null" />, the method returns <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetDeterminant">
      <summary>Calculates the determinant of the current 4x4 matrix.</summary>
      <returns>The determinant.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetElement(System.Int32,System.Int32)">
      <param name="row" />
      <param name="column" />
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetRow(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Numerics.Matrix4x4.Invert(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4@)">
      <summary>Inverts the specified matrix. The return value indicates whether the operation succeeded.</summary>
      <param name="matrix">The matrix to invert.</param>
      <param name="result">When this method returns, contains the inverted matrix if the operation succeeded.</param>
      <returns>
        <see langword="true" /> if <paramref name="matrix" /> was converted successfully; otherwise,  <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Lerp(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Single)">
      <summary>Performs a linear interpolation from one matrix to a second matrix based on a value that specifies the weighting of the second matrix.</summary>
      <param name="matrix1">The first matrix.</param>
      <param name="matrix2">The second matrix.</param>
      <param name="amount">The relative weighting of <paramref name="matrix2" />.</param>
      <returns>The interpolated matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Returns the matrix that results from multiplying two matrices together.</summary>
      <param name="value1">The first matrix.</param>
      <param name="value2">The second matrix.</param>
      <returns>The product matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary>Returns the matrix that results from scaling all the elements of a specified matrix by a scalar factor.</summary>
      <param name="value1">The matrix to scale.</param>
      <param name="value2">The scaling value to use.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Negate(System.Numerics.Matrix4x4)">
      <summary>Negates the specified matrix by multiplying all its values by -1.</summary>
      <param name="value">The matrix to negate.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Addition(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Adds each element in one matrix with its corresponding element in a second matrix.</summary>
      <param name="value1">The first matrix.</param>
      <param name="value2">The second matrix.</param>
      <returns>The matrix that contains the summed values.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Equality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Returns a value that indicates whether the specified matrices are equal.</summary>
      <param name="value1">The first matrix to compare.</param>
      <param name="value2">The second matrix to care.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> and <paramref name="value2" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Inequality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Returns a value that indicates whether the specified matrices are not equal.</summary>
      <param name="value1">The first matrix to compare.</param>
      <param name="value2">The second matrix to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> and <paramref name="value2" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Returns the matrix that results from multiplying two matrices together.</summary>
      <param name="value1">The first matrix.</param>
      <param name="value2">The second matrix.</param>
      <returns>The product matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary>Returns the matrix that results from scaling all the elements of a specified matrix by a scalar factor.</summary>
      <param name="value1">The matrix to scale.</param>
      <param name="value2">The scaling value to use.</param>
      <returns>The scaled matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Subtraction(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Subtracts each element in a second matrix from its corresponding element in a first matrix.</summary>
      <param name="value1">The first matrix.</param>
      <param name="value2">The second matrix.</param>
      <returns>The matrix containing the values that result from subtracting each element in <paramref name="value2" /> from its corresponding element in <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_UnaryNegation(System.Numerics.Matrix4x4)">
      <summary>Negates the specified matrix by multiplying all its values by -1.</summary>
      <param name="value">The matrix to negate.</param>
      <returns>The negated matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Subtract(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Subtracts each element in a second matrix from its corresponding element in a first matrix.</summary>
      <param name="value1">The first matrix.</param>
      <param name="value2">The second matrix.</param>
      <returns>The matrix containing the values that result from subtracting each element in <paramref name="value2" /> from its corresponding element in <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.ToString">
      <summary>Returns a string that represents this matrix.</summary>
      <returns>The string representation of this matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transform(System.Numerics.Matrix4x4,System.Numerics.Quaternion)">
      <summary>Transforms the specified matrix by applying the specified Quaternion rotation.</summary>
      <param name="value">The matrix to transform.</param>
      <param name="rotation">The rotation t apply.</param>
      <returns>The transformed matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transpose(System.Numerics.Matrix4x4)">
      <summary>Transposes the rows and columns of a matrix.</summary>
      <param name="matrix">The matrix to transpose.</param>
      <returns>The transposed matrix.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.WithElement(System.Int32,System.Int32,System.Single)">
      <param name="row" />
      <param name="column" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Matrix4x4.WithRow(System.Int32,System.Numerics.Vector4)">
      <param name="index" />
      <param name="value" />
    </member>
    <member name="P:System.Numerics.Matrix4x4.Identity">
      <summary>Gets the multiplicative identity matrix.</summary>
      <returns>Gets the multiplicative identity matrix.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.IsIdentity">
      <summary>Indicates whether the current matrix is the identity matrix.</summary>
      <returns>
        <see langword="true" /> if the current matrix is the identity matrix; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Item(System.Int32,System.Int32)">
      <summary>Gets or sets the element at the specified indices.</summary>
      <param name="row">The index of the row containing the element to get or set.</param>
      <param name="column">The index of the column containing the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <para>
          <paramref name="row" /> was less than zero or greater than the number of rows.</para>
        <para>-or-</para>
        <para>
          <paramref name="column" /> was less than zero or greater than the number of columns.</para>
      </exception>
      <returns>The element at [<paramref name="row" />][<paramref name="column" />].</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Item(System.Int32)">
      <param name="row" />
    </member>
    <member name="P:System.Numerics.Matrix4x4.Translation">
      <summary>Gets or sets the translation component of this matrix.</summary>
      <returns>The translation component of the current instance.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.W" />
    <member name="P:System.Numerics.Matrix4x4.X" />
    <member name="P:System.Numerics.Matrix4x4.Y" />
    <member name="P:System.Numerics.Matrix4x4.Z" />
    <member name="T:System.Numerics.Plane">
      <summary>Represents a plane in three-dimensional space.</summary>
    </member>
    <member name="F:System.Numerics.Plane.D">
      <summary>The distance of the plane along its normal from the origin.</summary>
    </member>
    <member name="F:System.Numerics.Plane.Normal">
      <summary>The normal vector of the plane.</summary>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Creates a <see cref="T:System.Numerics.Plane" /> object from a specified normal and the distance along the normal from the origin.</summary>
      <param name="normal">The plane's normal vector.</param>
      <param name="d">The plane's distance from the origin along its normal vector.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector4)">
      <summary>Creates a <see cref="T:System.Numerics.Plane" /> object from a specified four-dimensional vector.</summary>
      <param name="value">A vector whose first three elements describe the normal vector, and whose <see cref="F:System.Numerics.Vector4.W" /> defines the distance along that normal from the origin.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a <see cref="T:System.Numerics.Plane" /> object from the X, Y, and Z components of its normal, and its distance from the origin on that normal.</summary>
      <param name="x">The X component of the normal.</param>
      <param name="y">The Y component of the normal.</param>
      <param name="z">The Z component of the normal.</param>
      <param name="d">The distance of the plane along its normal from the origin.</param>
    </member>
    <member name="M:System.Numerics.Plane.Create(System.Numerics.Vector3,System.Single)">
      <param name="normal" />
      <param name="d" />
    </member>
    <member name="M:System.Numerics.Plane.Create(System.Numerics.Vector4)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Plane.Create(System.Single,System.Single,System.Single,System.Single)">
      <param name="x" />
      <param name="y" />
      <param name="z" />
      <param name="d" />
    </member>
    <member name="M:System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Creates a <see cref="T:System.Numerics.Plane" /> object that contains three specified points.</summary>
      <param name="point1">The first point defining the plane.</param>
      <param name="point2">The second point defining the plane.</param>
      <param name="point3">The third point defining the plane.</param>
      <returns>The plane containing the three points.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)">
      <summary>Calculates the dot product of a plane and a 4-dimensional vector.</summary>
      <param name="plane">The plane.</param>
      <param name="value">The four-dimensional vector.</param>
      <returns>The dot product.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary>Returns the dot product of a specified three-dimensional vector and the normal vector of this plane plus the distance (<see cref="F:System.Numerics.Plane.D" />) value of the plane.</summary>
      <param name="plane">The plane.</param>
      <param name="value">The 3-dimensional vector.</param>
      <returns>The dot product.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary>Returns the dot product of a specified three-dimensional vector and the <see cref="F:System.Numerics.Plane.Normal" /> vector of this plane.</summary>
      <param name="plane">The plane.</param>
      <param name="value">The three-dimensional vector.</param>
      <returns>The dot product.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Numerics.Plane)">
      <summary>Returns a value that indicates whether this instance and another plane object are equal.</summary>
      <param name="other">The other plane.</param>
      <returns>
        <see langword="true" /> if the two planes are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if the current instance and <paramref name="obj" /> are equal; otherwise, <see langword="false" />. If <paramref name="obj" /> is <see langword="null" />, the method returns <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Normalize(System.Numerics.Plane)">
      <summary>Creates a new <see cref="T:System.Numerics.Plane" /> object whose normal vector is the source plane's normal vector normalized.</summary>
      <param name="value">The source plane.</param>
      <returns>The normalized plane.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary>Returns a value that indicates whether two planes are equal.</summary>
      <param name="value1">The first plane to compare.</param>
      <param name="value2">The second plane to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> and <paramref name="value2" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary>Returns a value that indicates whether two planes are not equal.</summary>
      <param name="value1">The first plane to compare.</param>
      <param name="value2">The second plane to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> and <paramref name="value2" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.ToString">
      <summary>Returns the string representation of this plane object.</summary>
      <returns>A string that represents this <see cref="T:System.Numerics.Plane" /> object.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)">
      <summary>Transforms a normalized plane by a 4x4 matrix.</summary>
      <param name="plane">The normalized plane to transform.</param>
      <param name="matrix">The transformation matrix to apply to <paramref name="plane" />.</param>
      <returns>The transformed plane.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)">
      <summary>Transforms a normalized plane by a Quaternion rotation.</summary>
      <param name="plane">The normalized plane to transform.</param>
      <param name="rotation">The Quaternion rotation to apply to the plane.</param>
      <returns>A new plane that results from applying the Quaternion rotation.</returns>
    </member>
    <member name="T:System.Numerics.Quaternion">
      <summary>Represents a vector that is used to encode three-dimensional physical rotations.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.W">
      <summary>The rotation component of the quaternion.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.X">
      <summary>The X value of the vector component of the quaternion.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Y">
      <summary>The Y value of the vector component of the quaternion.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Z">
      <summary>The Z value of the vector component of the quaternion.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Creates a quaternion from the specified vector and rotation parts.</summary>
      <param name="vectorPart">The vector part of the quaternion.</param>
      <param name="scalarPart">The rotation part of the quaternion.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Constructs a quaternion from the specified components.</summary>
      <param name="x">The value to assign to the X component of the quaternion.</param>
      <param name="y">The value to assign to the Y component of the quaternion.</param>
      <param name="z">The value to assign to the Z component of the quaternion.</param>
      <param name="w">The value to assign to the W component of the quaternion.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Adds each element in one quaternion with its corresponding element in a second quaternion.</summary>
      <param name="value1">The first quaternion.</param>
      <param name="value2">The second quaternion.</param>
      <returns>The quaternion that contains the summed values of <paramref name="value1" /> and <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Concatenates two quaternions.</summary>
      <param name="value1">The first quaternion rotation in the series.</param>
      <param name="value2">The second quaternion rotation in the series.</param>
      <returns>A new quaternion representing the concatenation of the <paramref name="value1" /> rotation followed by the <paramref name="value2" /> rotation.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)">
      <summary>Returns the conjugate of a specified quaternion.</summary>
      <param name="value">The quaternion.</param>
      <returns>A new quaternion that is the conjugate of <see langword="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Create(System.Numerics.Vector3,System.Single)">
      <param name="vectorPart" />
      <param name="scalarPart" />
    </member>
    <member name="M:System.Numerics.Quaternion.Create(System.Single,System.Single,System.Single,System.Single)">
      <param name="x" />
      <param name="y" />
      <param name="z" />
      <param name="w" />
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary>Creates a quaternion from a unit vector and an angle to rotate around the vector.</summary>
      <param name="axis">The unit vector to rotate around.</param>
      <param name="angle">The angle, in radians, to rotate around the vector.</param>
      <returns>The newly created quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)">
      <summary>Creates a quaternion from the specified rotation matrix.</summary>
      <param name="matrix">The rotation matrix.</param>
      <returns>The newly created quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Creates a new quaternion from the given yaw, pitch, and roll.</summary>
      <param name="yaw">The yaw angle, in radians, around the Y axis.</param>
      <param name="pitch">The pitch angle, in radians, around the X axis.</param>
      <param name="roll">The roll angle, in radians, around the Z axis.</param>
      <returns>The resulting quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Divides one quaternion by a second quaternion.</summary>
      <param name="value1">The dividend.</param>
      <param name="value2">The divisor.</param>
      <returns>The quaternion that results from dividing <paramref name="value1" /> by <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Calculates the dot product of two quaternions.</summary>
      <param name="quaternion1">The first quaternion.</param>
      <param name="quaternion2">The second quaternion.</param>
      <returns>The dot product.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)">
      <summary>Returns a value that indicates whether this instance and another quaternion are equal.</summary>
      <param name="other">The other quaternion.</param>
      <returns>
        <see langword="true" /> if the two quaternions are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if the current instance and <paramref name="obj" /> are equal; otherwise, <see langword="false" />. If <paramref name="obj" /> is <see langword="null" />, the method returns <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)">
      <summary>Returns the inverse of a quaternion.</summary>
      <param name="value">The quaternion.</param>
      <returns>The inverted quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Length">
      <summary>Calculates the length of the quaternion.</summary>
      <returns>The computed length of the quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.LengthSquared">
      <summary>Calculates the squared length of the quaternion.</summary>
      <returns>The length squared of the quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>Performs a linear interpolation between two quaternions based on a value that specifies the weighting of the second quaternion.</summary>
      <param name="quaternion1">The first quaternion.</param>
      <param name="quaternion2">The second quaternion.</param>
      <param name="amount">The relative weight of <paramref name="quaternion2" /> in the interpolation.</param>
      <returns>The interpolated quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Returns the quaternion that results from multiplying two quaternions together.</summary>
      <param name="value1">The first quaternion.</param>
      <param name="value2">The second quaternion.</param>
      <returns>The product quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>Returns the quaternion that results from scaling all the components of a specified quaternion by a scalar factor.</summary>
      <param name="value1">The source quaternion.</param>
      <param name="value2">The scalar value.</param>
      <returns>The scaled quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)">
      <summary>Reverses the sign of each component of the quaternion.</summary>
      <param name="value">The quaternion to negate.</param>
      <returns>The negated quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)">
      <summary>Divides each component of a specified <see cref="T:System.Numerics.Quaternion" /> by its length.</summary>
      <param name="value">The quaternion to normalize.</param>
      <returns>The normalized quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Adds each element in one quaternion with its corresponding element in a second quaternion.</summary>
      <param name="value1">The first quaternion.</param>
      <param name="value2">The second quaternion.</param>
      <returns>The quaternion that contains the summed values of <paramref name="value1" /> and <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Divides one quaternion by a second quaternion.</summary>
      <param name="value1">The dividend.</param>
      <param name="value2">The divisor.</param>
      <returns>The quaternion that results from dividing <paramref name="value1" /> by <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Returns a value that indicates whether two quaternions are equal.</summary>
      <param name="value1">The first quaternion to compare.</param>
      <param name="value2">The second quaternion to compare.</param>
      <returns>
        <see langword="true" /> if the two quaternions are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Returns a value that indicates whether two quaternions are not equal.</summary>
      <param name="value1">The first quaternion to compare.</param>
      <param name="value2">The second quaternion to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="value1" /> and <paramref name="value2" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Returns the quaternion that results from multiplying two quaternions together.</summary>
      <param name="value1">The first quaternion.</param>
      <param name="value2">The second quaternion.</param>
      <returns>The product quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>Returns the quaternion that results from scaling all the components of a specified quaternion by a scalar factor.</summary>
      <param name="value1">The source quaternion.</param>
      <param name="value2">The scalar value.</param>
      <returns>The scaled quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Subtracts each element in a second quaternion from its corresponding element in a first quaternion.</summary>
      <param name="value1">The first quaternion.</param>
      <param name="value2">The second quaternion.</param>
      <returns>The quaternion containing the values that result from subtracting each element in <paramref name="value2" /> from its corresponding element in <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)">
      <summary>Reverses the sign of each component of the quaternion.</summary>
      <param name="value">The quaternion to negate.</param>
      <returns>The negated quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>Interpolates between two quaternions, using spherical linear interpolation.</summary>
      <param name="quaternion1">The first quaternion.</param>
      <param name="quaternion2">The second quaternion.</param>
      <param name="amount">The relative weight of the second quaternion in the interpolation.</param>
      <returns>The interpolated quaternion.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Subtracts each element in a second quaternion from its corresponding element in a first quaternion.</summary>
      <param name="value1">The first quaternion.</param>
      <param name="value2">The second quaternion.</param>
      <returns>The quaternion containing the values that result from subtracting each element in <paramref name="value2" /> from its corresponding element in <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.ToString">
      <summary>Returns a string that represents this quaternion.</summary>
      <returns>The string representation of this quaternion.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.Identity">
      <summary>Gets a quaternion that represents no rotation.</summary>
      <returns>A quaternion whose values are <c>(0, 0, 0, 1)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.IsIdentity">
      <summary>Gets a value that indicates whether the current instance is the identity quaternion.</summary>
      <returns>
        <see langword="true" /> if the current instance is the identity quaternion; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> was less than zero or greater than the number of elements.</exception>
      <returns>The element at <paramref name="index" />.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.Zero">
      <summary>Gets a quaternion that represents a zero.</summary>
      <returns>A quaternion whose values are <c>(0, 0, 0, 0)</c>.</returns>
    </member>
    <member name="T:System.Numerics.Vector">
      <summary>Provides a collection of static methods for creating, manipulating, and otherwise operating on generic vectors.</summary>
    </member>
    <member name="M:System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})">
      <summary>Returns a new vector whose elements are the absolute values of the given vector's elements.</summary>
      <param name="value">The source vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The absolute value vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a new vector whose values are the sum of each pair of elements from two given vectors.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The summed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AddSaturate``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <param name="left" />
      <param name="right" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.All``1(System.Numerics.Vector{``0},``0)">
      <param name="vector" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.AllWhereAllBitsSet``1(System.Numerics.Vector{``0})">
      <param name="vector" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a new vector by performing a bitwise And Not operation on each pair of corresponding elements in two vectors.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The resulting vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Any``1(System.Numerics.Vector{``0},``0)">
      <param name="vector" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.AnyWhereAllBitsSet``1(System.Numerics.Vector{``0})">
      <param name="vector" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.As``2(System.Numerics.Vector{``0})">
      <summary>Reinterprets a <see cref="T:System.Numerics.Vector`1" /> as a new <see cref="T:System.Numerics.Vector`1" />.</summary>
      <param name="vector">The vector to reinterpret.</param>
      <typeparam name="TFrom">The type of the input vector.</typeparam>
      <typeparam name="TTo">The type of the vector <paramref name="vector" /> should be reinterpreted as.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="TFrom" />) or the type of the target (<typeparamref name="TTo" />) is not supported.</exception>
      <returns>
        <paramref name="vector" /> reinterpreted as a new <see cref="T:System.Numerics.Vector`1" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsPlane(System.Numerics.Vector4)">
      <summary>Reinterprets a <see cref="T:System.Numerics.Vector4" /> as a new <see cref="T:System.Numerics.Plane" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Numerics.Plane" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsQuaternion(System.Numerics.Vector4)">
      <summary>Reinterprets a <see cref="T:System.Numerics.Vector4" /> as a new <see cref="T:System.Numerics.Quaternion" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Numerics.Quaternion" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVector2(System.Numerics.Vector3)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector.AsVector2(System.Numerics.Vector4)">
      <summary>Reinterprets a <see cref="T:System.Numerics.Vector4" /> as a new <see cref="T:System.Numerics.Vector2" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Numerics.Vector2" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVector3(System.Numerics.Vector2)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector.AsVector3(System.Numerics.Vector4)">
      <summary>Reinterprets a <see cref="T:System.Numerics.Vector4" /> as a new <see cref="T:System.Numerics.Vector3" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Numerics.Vector3" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVector3Unsafe(System.Numerics.Vector2)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector.AsVector4(System.Numerics.Plane)">
      <summary>Reinterprets a <see cref="T:System.Numerics.Plane" /> as a new <see cref="T:System.Numerics.Vector4" />.</summary>
      <param name="value">The plane to reinterpret.</param>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Numerics.Vector4" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVector4(System.Numerics.Quaternion)">
      <summary>Reinterprets a <see cref="T:System.Numerics.Quaternion" /> as a new <see cref="T:System.Numerics.Vector4" />.</summary>
      <param name="value">The quaternion to reinterpret.</param>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Numerics.Quaternion" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVector4(System.Numerics.Vector2)">
      <summary>Reinterprets a <see cref="T:System.Numerics.Vector2" /> to a new <see cref="T:System.Numerics.Vector4" /> with the new elements zeroed.</summary>
      <param name="value">The vector to reinterpret.</param>
      <returns>
        <paramref name="value" /> reinterpreted to a new <see cref="T:System.Numerics.Vector4" /> with the new elements zeroed.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVector4(System.Numerics.Vector3)">
      <summary>Converts a <see cref="T:System.Numerics.Vector3" /> to a new <see cref="T:System.Numerics.Vector4" /> with the new elements zeroed.</summary>
      <param name="value">The vector to convert.</param>
      <returns>
        <paramref name="value" /> converted to a new <see cref="T:System.Numerics.Vector4" /> with the new elements zeroed.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVector4Unsafe(System.Numerics.Vector2)">
      <summary>Reinterprets a <see cref="T:System.Numerics.Vector2" /> to a new <see cref="T:System.Numerics.Vector4" /> with the new elements undefined.</summary>
      <param name="value">The vector to reinterpret.</param>
      <returns>
        <paramref name="value" /> reinterpreted to a new <see cref="T:System.Numerics.Vector4" /> with the new elements undefined.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVector4Unsafe(System.Numerics.Vector3)">
      <summary>Converts a <see cref="T:System.Numerics.Vector3" /> to a new <see cref="T:System.Numerics.Vector4" /> with the new elements undefined.</summary>
      <param name="value">The vector to convert.</param>
      <returns>
        <paramref name="value" /> converted to a new <see cref="T:System.Numerics.Vector4" /> with the new elements undefined.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})">
      <summary>Reinterprets the bits of a specified vector into those of a vector of unsigned bytes.</summary>
      <param name="value">The source vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="value" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})">
      <summary>Reinterprets the bits of a specified vector into those of a double-precision floating-point vector.</summary>
      <param name="value">The source vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="value" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})">
      <summary>Reinterprets the bits of a specified vector into those of a vector of 16-bit integers.</summary>
      <param name="value">The source vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="value" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})">
      <summary>Reinterprets the bits of a specified vector into those of a vector of integers.</summary>
      <param name="value">The source vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="value" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})">
      <summary>Reinterprets the bits of a specified vector into those of a vector of long integers.</summary>
      <param name="value">The source vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="value" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorNInt``1(System.Numerics.Vector{``0})">
      <summary>Reinterprets the bits of a specified vector into those of a vector of native-sized integers.</summary>
      <param name="value">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="value" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Numerics.Vector`1" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorNUInt``1(System.Numerics.Vector{``0})">
      <summary>Reinterprets the bits of a specified vector into those of a vector of native-sized, unsigned integers.</summary>
      <param name="value">The vector to reinterpret.</param>
      <typeparam name="T">The type of the input vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="value" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Numerics.Vector`1" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})">
      <summary>Reinterprets the bits of a specified vector into those of a vector of signed bytes.</summary>
      <param name="value">The source vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="value" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})">
      <summary>Reinterprets the bits of a specified vector into those of a single-precision floating-point vector.</summary>
      <param name="value">The source vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="value" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})">
      <summary>Reinterprets the bits of a specified vector into those of a vector of unsigned 16-bit integers.</summary>
      <param name="value">The source vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="value" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})">
      <summary>Reinterprets the bits of a specified vector into those of a vector of unsigned integers.</summary>
      <param name="value">The source vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="value" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})">
      <summary>Reinterprets the bits of a specified vector into those of a vector of unsigned long integers.</summary>
      <param name="value">The source vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="value" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a new vector by performing a bitwise <see langword="And" /> operation on each pair of elements in two vectors.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The resulting vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a new vector by performing a bitwise <see langword="Or" /> operation on each pair of elements in two vectors.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The resulting vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Ceiling(System.Numerics.Vector{System.Double})">
      <summary>Returns a new vector whose elements are the smallest integral values that are greater than or equal to the given vector's elements.</summary>
      <param name="value">The source vector.</param>
      <returns>The vector whose elements are the smallest integral values that are greater than or equal to the given vector's elements.
            If a value is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Ceiling(System.Numerics.Vector{System.Single})">
      <summary>Returns a new vector whose elements are the smallest integral values that are greater than or equal to the given vector's elements.</summary>
      <param name="value">The source vector.</param>
      <returns>The vector whose elements are the smallest integral values that are greater than or equal to the given vector's elements.
            If a value is equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" />, or <see cref="F:System.Single.PositiveInfinity" />, that value is returned.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Clamp``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restricts a vector between a minimum and a maximum value.</summary>
      <param name="value">The vector to restrict.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <typeparam name="T">The type of the elements in the vector.</typeparam>
      <returns>The restricted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ClampNative``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restricts a vector between a minimum and a maximum value using platform specific behavior for <code data-dev-comment-type="c">NaN</code> and <code data-dev-comment-type="c">NegativeZero</code>..</summary>
      <param name="value">The vector to restrict.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <typeparam name="T" />
      <returns>The restricted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Creates a new single-precision vector with elements selected between two specified single-precision source vectors based on an integral mask vector.</summary>
      <param name="condition">The integral mask vector used to drive selection.</param>
      <param name="left">The first source vector.</param>
      <param name="right">The second source vector.</param>
      <returns>The new vector with elements selected based on the mask.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Creates a new double-precision vector with elements selected between two specified double-precision source vectors based on an integral mask vector.</summary>
      <param name="condition">The integral mask vector used to drive selection.</param>
      <param name="left">The first source vector.</param>
      <param name="right">The second source vector.</param>
      <returns>The new vector with elements selected based on the mask.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Creates a new vector of a specified type with elements selected between two specified source vectors of the same type based on an integral mask vector.</summary>
      <param name="condition">The integral mask vector used to drive selection.</param>
      <param name="left">The first source vector.</param>
      <param name="right">The second source vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The new vector with elements selected based on the mask.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.Int64})">
      <summary>Converts a <c>Vector&lt;Int64&gt;</c> to a <c>Vector&lt;Double&gt;</c>.</summary>
      <param name="value">The source vector.</param>
      <returns>The converted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.UInt64})">
      <summary>Converts a <c>Vector&lt;UInt64&gt;</c> to a <c>Vector&lt;Double&gt;</c>.</summary>
      <param name="value">The source vector.</param>
      <returns>The converted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector{System.Single})">
      <summary>Converts a <c>Vector&lt;Single&gt;</c> to a <c>Vector&lt;Int32&gt;</c>.</summary>
      <param name="value">The source vector.</param>
      <returns>The converted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt32Native(System.Numerics.Vector{System.Single})">
      <summary>Converts a <see cref="T:System.Numerics.Vector`1" /> to a <see cref="T:System.Numerics.Vector`1" /> using platform specific behavior on overflow.</summary>
      <param name="value">The vector to convert.</param>
      <returns>The converted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector{System.Double})">
      <summary>Converts a <c>Vector&lt;Double&gt;</c> to a <c>Vector&lt;Int64&gt;</c>.</summary>
      <param name="value">The source vector.</param>
      <returns>The converted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt64Native(System.Numerics.Vector{System.Double})">
      <summary>Converts a <see langword="System.Numerics.Vector&lt;System.Double&gt;" /> to a <see langword="System.Numerics.Vector&lt;System.Int64&gt;" /> using platform specific behavior on overflow.</summary>
      <param name="value">The vector to convert.</param>
      <returns>The converted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.Int32})">
      <summary>Converts a <c>Vector&lt;Int32&gt;</c> to a <c>Vector&lt;Single&gt;</c>.</summary>
      <param name="value">The source vector.</param>
      <returns>The converted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.UInt32})">
      <summary>Converts a <c>Vector&lt;UInt32&gt;</c> to a <c>Vector&lt;Single&gt;</c>.</summary>
      <param name="value">The source vector.</param>
      <returns>The converted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector{System.Single})">
      <summary>Converts a <c>Vector&lt;Single&gt;</c> to a <c>Vector&lt;UInt32&gt;</c>.</summary>
      <param name="value">The source vector.</param>
      <returns>The converted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt32Native(System.Numerics.Vector{System.Single})">
      <summary>Converts a <see langword="System.Numerics.Vector&lt;System.Single&gt;" /> to a <see langword="System.Numerics.Vector&lt;System.UInt32&gt;" /> using platform specific behavior on overflow.</summary>
      <param name="value">The vector to convert.</param>
      <returns>The converted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector{System.Double})">
      <summary>Converts a <c>Vector&lt;Double&gt;</c> to a <c>Vector&lt;UInt64&gt;</c>.</summary>
      <param name="value">The source vector.</param>
      <returns>The converted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt64Native(System.Numerics.Vector{System.Double})">
      <summary>Converts a <see langword="System.Numerics.Vector&lt;System.Double&gt;" /> to a <see langword="System.Numerics.Vector&lt;System.UInt64&gt;" /> using platform specific behavior on overflow.</summary>
      <param name="value">The vector to convert.</param>
      <returns>The converted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.CopySign``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Copies the per-element sign of a vector to the per-element sign of another vector.</summary>
      <param name="value">The vector whose magnitude is used in the result.</param>
      <param name="sign">The vector whose sign is used in the result.</param>
      <typeparam name="T" />
      <returns>A vector with the magnitude of <code data-dev-comment-type="paramref">value</code> and the sign of <code data-dev-comment-type="paramref">sign</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Cos(System.Numerics.Vector{System.Double})">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.Cos(System.Numerics.Vector{System.Single})">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.Count``1(System.Numerics.Vector{``0},``0)">
      <param name="vector" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.CountWhereAllBitsSet``1(System.Numerics.Vector{``0})">
      <param name="vector" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.Create``1(``0)">
      <summary>Creates a new <see cref="T:System.Numerics.Vector`1" /> instance with all elements initialized to the specified value.</summary>
      <param name="value">The value that all elements will be initialized to.</param>
      <typeparam name="T">The type of the elements in the vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="value" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>A new <see cref="T:System.Numerics.Vector`1" /> with all elements initialized to <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Create``1(System.ReadOnlySpan{``0})">
      <summary>Creates a new <see cref="T:System.Numerics.Vector`1" /> from a given readonly span.</summary>
      <param name="values">The readonly span from which the vector is created.</param>
      <typeparam name="T">The type of the elements in the vector.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="values" /> is less than <see cref="P:System.Runtime.Intrinsics.Vector128`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="values" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>A new <see cref="T:System.Numerics.Vector`1" /> with its elements set to the first <see cref="P:System.Numerics.Vector`1.Count" /> elements from <paramref name="values" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.CreateScalar``1(``0)">
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.CreateScalarUnsafe``1(``0)">
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.CreateSequence``1(``0,``0)">
      <summary>Creates a new <see cref="T:System.Numerics.Vector`1" /> instance where the elements begin at a specified value and which are spaced apart according to another specified value.</summary>
      <param name="start">The value that element 0 will be initialized to.</param>
      <param name="step">The value that indicates how far apart each element should be from the previous.</param>
      <typeparam name="T">The type of the elements in the vector.</typeparam>
      <returns>A new <see cref="T:System.Numerics.Vector`1" /> instance with the first element initialized to <paramref name="start" /> and each subsequent element initialized to the value of the previous element plus <paramref name="step" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.DegreesToRadians(System.Numerics.Vector{System.Double})">
      <param name="degrees" />
    </member>
    <member name="M:System.Numerics.Vector.DegreesToRadians(System.Numerics.Vector{System.Single})">
      <param name="degrees" />
    </member>
    <member name="M:System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},``0)">
      <summary>Divides a vector by a scalar to compute the per-element quotient.</summary>
      <param name="left">The vector that will be divided by <paramref name="right" />.</param>
      <param name="right">The scalar that will divide <paramref name="left" />.</param>
      <typeparam name="T">The type of the elements in the vector.</typeparam>
      <returns>The quotient of <paramref name="left" /> divided by <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a new vector whose values are the result of dividing the first vector's elements by the corresponding elements in the second vector.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The divided vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns the dot product of two vectors.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The dot product.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Returns a new integral vector whose elements signal whether the elements in two specified double-precision vectors are equal.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting integral vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Returns a new integral vector whose elements signal whether the elements in two specified integral vectors are equal.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting integral vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Returns a new vector whose elements signal whether the elements in two specified long integer vectors are equal.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting long integer vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Returns a new integral vector whose elements signal whether the elements in two specified single-precision vectors are equal.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting integral vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a new vector of a specified type whose elements signal whether the elements in two specified vectors of the same type are equal.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The resulting vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a value that indicates whether each pair of elements in the given vectors is equal.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>
        <see langword="true" /> if all elements in <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a value that indicates whether any single pair of elements in the given vectors is equal.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>
        <see langword="true" /> if any element pair in <paramref name="left" /> and <paramref name="right" /> is equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Exp(System.Numerics.Vector{System.Double})">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.Exp(System.Numerics.Vector{System.Single})">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.ExtractMostSignificantBits(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.ExtractMostSignificantBits(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.ExtractMostSignificantBits(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.Floor(System.Numerics.Vector{System.Double})">
      <summary>Returns a new vector whose elements are the largest integral values that are less than or equal to the given vector's elements.</summary>
      <param name="value">The source vector.</param>
      <returns>The vector whose elements are the largest integral values that are less than or equal to the given vector's elements.
            If a value is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Floor(System.Numerics.Vector{System.Single})">
      <summary>Returns a new vector whose elements are the largest integral values that are less than or equal to the given vector's elements.</summary>
      <param name="value">The source vector.</param>
      <returns>The vector whose elements are the largest integral values that are less than or equal to the given vector's elements.
            If a value is equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" />, or <see cref="F:System.Single.PositiveInfinity" />, that value is returned.</returns>
    </member>
    <member name="M:System.Numerics.Vector.FusedMultiplyAdd(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Computes (<paramref name="left" /> * <paramref name="right" />) + <paramref name="addend" />, rounded as one ternary operation.</summary>
      <param name="left">The vector to be multiplied with <paramref name="right" />.</param>
      <param name="right">The vector to be multiplied with <paramref name="left" />.</param>
      <param name="addend">The vector to be added to the result of <paramref name="left" /> multiplied by <paramref name="right" />.</param>
      <returns>(<paramref name="left" /> * <paramref name="right" />) + <paramref name="addend" />, rounded as one ternary operation.</returns>
    </member>
    <member name="M:System.Numerics.Vector.FusedMultiplyAdd(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Computes (<paramref name="left" /> * <paramref name="right" />) + <paramref name="addend" />, rounded as one ternary operation.</summary>
      <param name="left">The vector to be multiplied with <paramref name="right" />.</param>
      <param name="right">The vector to be multiplied with <paramref name="left" />.</param>
      <param name="addend">The vector to be added to the result of <paramref name="left" /> multiplied by <paramref name="right" />.</param>
      <returns>(<paramref name="left" /> * <paramref name="right" />) + <paramref name="addend" />, rounded as one ternary operation.</returns>
    </member>
    <member name="M:System.Numerics.Vector.get_E``1">
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.get_Epsilon``1">
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.get_NaN``1">
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.get_NegativeInfinity``1">
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.get_NegativeOne``1">
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.get_NegativeZero``1">
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.get_Pi``1">
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.get_PositiveInfinity``1">
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.get_Tau``1">
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.GetElement(System.Numerics.Vector2,System.Int32)">
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Numerics.Vector.GetElement(System.Numerics.Vector3,System.Int32)">
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Numerics.Vector.GetElement(System.Numerics.Vector4,System.Int32)">
      <param name="vector" />
      <param name="index" />
    </member>
    <member name="M:System.Numerics.Vector.GetElement``1(System.Numerics.Vector{``0},System.Int32)">
      <summary>Gets the element at the specified index.</summary>
      <param name="vector">The vector to get the element from.</param>
      <param name="index">The index of the element to get.</param>
      <typeparam name="T">The type of the elements in the vector.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> was less than zero or greater than the number of elements.</exception>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The value of the element at <paramref name="index" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are greater than their corresponding elements in a second double-precision floating-point vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting integral vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Returns a new integral vector whose elements signal whether the elements in one integral vector are greater than their corresponding elements in a second integral vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting integral vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Returns a new long integer vector whose elements signal whether the elements in one long integer vector are greater than their corresponding elements in a second long integer vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting long integer vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Returns a new integral vector whose elements signal whether the elements in one single-precision floating-point vector are greater than their corresponding elements in a second single-precision floating-point vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting integral vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a new vector whose elements signal whether the elements in one vector of a specified type are greater than their corresponding elements in the second vector of the same time.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The resulting vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a value that indicates whether all elements in the first vector are greater than the corresponding elements in the second vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>
        <see langword="true" /> if all elements in <paramref name="left" /> are greater than the corresponding elements in <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a value that indicates whether any element in the first vector is greater than the corresponding element in the second vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>
        <see langword="true" /> if any element in <paramref name="left" /> is greater than the corresponding element in <paramref name="right" />; otherwise,  <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Returns a new integral vector whose elements signal whether the elements in one vector are greater than or equal to their corresponding elements in the second double-precision floating-point vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting integral vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Returns a new integral vector whose elements signal whether the elements in one integral vector are greater than or equal to their corresponding elements in the second integral vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting integral vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Returns a new long integer vector whose elements signal whether the elements in one long integer vector are greater than or equal to their corresponding elements in the second long integer vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting long integer vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Returns a new integral vector whose elements signal whether the elements in one vector are greater than or equal to their corresponding elements in the single-precision floating-point second vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting integral vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a new vector whose elements signal whether the elements in one vector of a specified type are greater than or equal to their corresponding elements in the second vector of the same type.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The resulting vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a value that indicates whether all elements in the first vector are greater than or equal to all the corresponding elements in the second vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>
        <see langword="true" /> if all elements in <paramref name="left" /> are greater than or equal to the corresponding elements in <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a value that indicates whether any element in the first vector is greater than or equal to the corresponding element in the second vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>
        <see langword="true" /> if any element in <paramref name="left" /> is greater than or equal to the corresponding element in <paramref name="right" />; otherwise,  <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Hypot(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <param name="x" />
      <param name="y" />
    </member>
    <member name="M:System.Numerics.Vector.Hypot(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <param name="x" />
      <param name="y" />
    </member>
    <member name="M:System.Numerics.Vector.IndexOf``1(System.Numerics.Vector{``0},``0)">
      <param name="vector" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.IndexOfWhereAllBitsSet``1(System.Numerics.Vector{``0})">
      <param name="vector" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.IsEvenInteger``1(System.Numerics.Vector{``0})">
      <param name="vector" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.IsFinite``1(System.Numerics.Vector{``0})">
      <param name="vector" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.IsInfinity``1(System.Numerics.Vector{``0})">
      <param name="vector" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.IsInteger``1(System.Numerics.Vector{``0})">
      <param name="vector" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.IsNaN``1(System.Numerics.Vector{``0})">
      <summary>Determines which elements in a vector are NaN.</summary>
      <param name="vector">The vector to be checked.</param>
      <typeparam name="T" />
      <returns>A vector whose elements are all-bits-set or zero, depending on if the corresponding elements in <code data-dev-comment-type="paramref">vector</code> were NaN.</returns>
    </member>
    <member name="M:System.Numerics.Vector.IsNegative``1(System.Numerics.Vector{``0})">
      <summary>Determines which elements in a vector represents negative real numbers.</summary>
      <param name="vector">The vector to be checked.</param>
      <typeparam name="T" />
      <returns>A vector whose elements are all-bits-set or zero, depending on if the corresponding elements in <code data-dev-comment-type="paramref">vector</code> were negative.</returns>
    </member>
    <member name="M:System.Numerics.Vector.IsNegativeInfinity``1(System.Numerics.Vector{``0})">
      <param name="vector" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.IsNormal``1(System.Numerics.Vector{``0})">
      <param name="vector" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.IsOddInteger``1(System.Numerics.Vector{``0})">
      <param name="vector" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.IsPositive``1(System.Numerics.Vector{``0})">
      <summary>Determines which elements in a vector represents positive real numbers.</summary>
      <param name="vector">The vector to be checked.</param>
      <typeparam name="T" />
      <returns>A vector whose elements are all-bits-set or zero, depending on if the corresponding elements in <code data-dev-comment-type="paramref">vector</code> were positive.</returns>
    </member>
    <member name="M:System.Numerics.Vector.IsPositiveInfinity``1(System.Numerics.Vector{``0})">
      <summary>Determines which elements in a vector are positive infinity.</summary>
      <param name="vector">The vector to be checked.</param>
      <typeparam name="T" />
      <returns>A vector whose elements are all-bits-set or zero, depending on if the corresponding elements in <code data-dev-comment-type="paramref">vector</code> were positive infinity.</returns>
    </member>
    <member name="M:System.Numerics.Vector.IsSubnormal``1(System.Numerics.Vector{``0})">
      <param name="vector" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.IsZero``1(System.Numerics.Vector{``0})">
      <summary>Determines which elements in a vector are zero.</summary>
      <param name="vector">The vector to be checked.</param>
      <typeparam name="T" />
      <returns>A vector whose elements are all-bits-set or zero, depending on if the corresponding elements in <code data-dev-comment-type="paramref">vector</code> were zero.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LastIndexOf``1(System.Numerics.Vector{``0},``0)">
      <param name="vector" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.LastIndexOfWhereAllBitsSet``1(System.Numerics.Vector{``0})">
      <param name="vector" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.Lerp(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Performs a linear interpolation between two vectors based on the given weighting.</summary>
      <param name="x">The first vector.</param>
      <param name="y">The second vector.</param>
      <param name="amount">A value between 0 and 1 that indicates the weight of <paramref name="y" />.</param>
      <returns>The interpolated vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Lerp(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Performs a linear interpolation between two vectors based on the given weighting.</summary>
      <param name="x">The first vector.</param>
      <param name="y">The second vector.</param>
      <param name="amount">A value between 0 and 1 that indicates the weight of <paramref name="y" />.</param>
      <returns>The interpolated vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are less than their corresponding elements in a second double-precision floating-point vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting integral vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Returns a new integral vector whose elements signal whether the elements in one integral vector are less than their corresponding elements in a second integral vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting integral vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Returns a new long integer vector whose elements signal whether the elements in one long integer vector are less than their corresponding elements in a second long integer vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting long integer vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Returns a new integral vector whose elements signal whether the elements in one single-precision vector are less than their corresponding elements in a second single-precision vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting integral vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a new vector of a specified type whose elements signal whether the elements in one vector are less than their corresponding elements in the second vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The resulting vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a value that indicates whether all of the elements in the first vector are less than their corresponding elements in the second vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>
        <see langword="true" /> if all of the elements in <paramref name="left" /> are less than the corresponding elements in <paramref name="right" />; otherwise,  <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a value that indicates whether any element in the first vector is less than the corresponding element in the second vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>
        <see langword="true" /> if any element in <paramref name="left" /> is less than the corresponding element in <paramref name="right" />; otherwise,  <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Returns a new integral vector whose elements signal whether the elements in one double-precision floating-point vector are less than or equal to their corresponding elements in a second double-precision floating-point vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting integral vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Returns a new integral vector whose elements signal whether the elements in one integral vector are less than or equal to their corresponding elements in a second integral vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting integral vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Returns a new long integer vector whose elements signal whether the elements in one long integer vector are less or equal to their corresponding elements in a second long integer vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting long integer vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Returns a new integral vector whose elements signal whether the elements in one single-precision floating-point vector are less than or equal to their corresponding elements in a second single-precision floating-point vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>The resulting integral vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a new vector whose elements signal whether the elements in one vector are less than or equal to their corresponding elements in the second vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The resulting vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a value that indicates whether all elements in the first vector are less than or equal to their corresponding elements in the second vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>
        <see langword="true" /> if all of the elements in <paramref name="left" /> are less than or equal to the corresponding elements in <paramref name="right" />; otherwise,  <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a value that indicates whether any element in the first vector is less than or equal to the corresponding element in the second vector.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>
        <see langword="true" /> if any element in <paramref name="left" /> is less than or equal to the corresponding element in <paramref name="right" />; otherwise,  <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Load``1(``0*)">
      <summary>Loads a vector from the given source.</summary>
      <param name="source">The source from which the vector will be loaded.</param>
      <typeparam name="T">The type of the elements in the vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="source" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The vector loaded from <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LoadAligned``1(``0*)">
      <summary>Loads a vector from the given aligned source.</summary>
      <param name="source">The aligned source from which the vector will be loaded.</param>
      <typeparam name="T">The type of the elements in the vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="source" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The vector loaded from <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LoadAlignedNonTemporal``1(``0*)">
      <summary>Loads a vector from the given aligned source.</summary>
      <param name="source">The aligned source from which the vector will be loaded.</param>
      <typeparam name="T">The type of the elements in the vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="source" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The vector loaded from <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LoadUnsafe``1(``0@,System.UIntPtr)">
      <summary>Loads a vector from the given source and element offset.</summary>
      <param name="source">The source to which <paramref name="elementOffset" /> will be added before loading the vector.</param>
      <param name="elementOffset">The element offset from <paramref name="source" /> from which the vector will be loaded.</param>
      <typeparam name="T">The type of the elements in the vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="source" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The vector loaded from <paramref name="source" /> plus <paramref name="elementOffset" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LoadUnsafe``1(``0@)">
      <summary>Loads a vector from the given source.</summary>
      <param name="source">The source from which the vector will be loaded.</param>
      <typeparam name="T">The type of the elements in the vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="source" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>The vector loaded from <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Log(System.Numerics.Vector{System.Double})">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.Log(System.Numerics.Vector{System.Single})">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.Log2(System.Numerics.Vector{System.Double})">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.Log2(System.Numerics.Vector{System.Single})">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a new vector whose elements are the maximum of each pair of elements in the two given vectors.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <typeparam name="T">The vector type. <code data-dev-comment-type="c">T</code> can be any primitive numeric type.</typeparam>
      <returns>The maximum vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.MaxMagnitude``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Compares two vectors to compute which has the greater magnitude on a per-element basis.</summary>
      <param name="left">The vector to compare with <code data-dev-comment-type="paramref">right</code>.</param>
      <param name="right">The vector to compare with <code data-dev-comment-type="paramref">left</code>.</param>
      <typeparam name="T" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a greater magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector.MaxMagnitudeNumber``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Compares two vectors, on a per-element basis, to compute which has the greater magnitude and returning the other value if an input is <code data-dev-comment-type="c">NaN</code>.</summary>
      <param name="left">The vector to compare with <code data-dev-comment-type="paramref">right</code>.</param>
      <param name="right">The vector to compare with <code data-dev-comment-type="paramref">left</code>.</param>
      <typeparam name="T" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a greater magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector.MaxNative``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Compare two vectors to determine which is greater on a per-element basis using platform specific behavior for <code data-dev-comment-type="c">NaN</code> and <code data-dev-comment-type="c">NegativeZero</code>.</summary>
      <param name="left">The vector to compare with <code data-dev-comment-type="paramref">right</code>.</param>
      <param name="right">The vector to compare with <code data-dev-comment-type="paramref">left</code>.</param>
      <typeparam name="T" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is greater than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector.MaxNumber``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Compares two vectors, on a per-element basis, to compute which is greater and returning the other value if an element is <code data-dev-comment-type="c">NaN</code>.</summary>
      <param name="left">The vector to compare with <code data-dev-comment-type="paramref">right</code>.</param>
      <param name="right">The vector to compare with <code data-dev-comment-type="paramref">left</code>.</param>
      <typeparam name="T" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is greater than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a new vector whose elements are the minimum of each pair of elements in the two given vectors.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <typeparam name="T">The vector type. <code data-dev-comment-type="c">T</code> can be any primitive numeric type.</typeparam>
      <returns>The minimum vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.MinMagnitude``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Compares two vectors to compute which has the lesser magnitude on a per-element basis.</summary>
      <param name="left">The vector to compare with <code data-dev-comment-type="paramref">right</code>.</param>
      <param name="right">The vector to compare with <code data-dev-comment-type="paramref">left</code>.</param>
      <typeparam name="T" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a lesser magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector.MinMagnitudeNumber``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Compares two vectors, on a per-element basis, to compute which has the lesser magnitude and returning the other value if an input is <code data-dev-comment-type="c">NaN</code>.</summary>
      <param name="left">The vector to compare with <code data-dev-comment-type="paramref">right</code>.</param>
      <param name="right">The vector to compare with <code data-dev-comment-type="paramref">left</code>.</param>
      <typeparam name="T" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a lesser magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector.MinNative``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Compare two vectors to determine which is lesser on a per-element basis using platform specific behavior for <code data-dev-comment-type="c">NaN</code> and <code data-dev-comment-type="c">NegativeZero</code>.</summary>
      <param name="left">The vector to compare with <code data-dev-comment-type="paramref">right</code>.</param>
      <param name="right">The vector to compare with <code data-dev-comment-type="paramref">left</code>.</param>
      <typeparam name="T" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is lesser than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector.MinNumber``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Compares two vectors, on a per-element basis, to compute which is lesser and returning the other value if an element is <code data-dev-comment-type="c">NaN</code>.</summary>
      <param name="left">The vector to compare with <code data-dev-comment-type="paramref">right</code>.</param>
      <param name="right">The vector to compare with <code data-dev-comment-type="paramref">left</code>.</param>
      <typeparam name="T" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is lesser than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})">
      <summary>Returns a new vector whose values are a scalar value multiplied by each of the values of a specified vector.</summary>
      <param name="left">The scalar value.</param>
      <param name="right">The vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)">
      <summary>Returns a new vector whose values are the values of a specified vector each multiplied by a scalar value.</summary>
      <param name="left">The vector.</param>
      <param name="right">The scalar value.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a new vector whose values are the product of each pair of elements in two specified vectors.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The element-wise product vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.MultiplyAddEstimate(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <param name="left" />
      <param name="right" />
      <param name="addend" />
    </member>
    <member name="M:System.Numerics.Vector.MultiplyAddEstimate(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <param name="left" />
      <param name="right" />
      <param name="addend" />
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Narrows two <c>Vector&lt;Double&gt;</c> instances into one <c>Vector&lt;Single&gt;</c>.</summary>
      <param name="low">The source vector that will be narrowed to the lower half of the result vector.</param>
      <param name="high">The source vector that will be narrowed to the upper half of the result vector.</param>
      <returns>A <c>Vector&lt;Single&gt;</c> containing elements narrowed from the source vectors.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})">
      <summary>Narrows two <c>Vector&lt;Int16&gt;</c> instances into one <c>Vector&lt;SByte&gt;</c>.</summary>
      <param name="low">The source vector that will be narrowed to the lower half of the result vector.</param>
      <param name="high">The source vector that will be narrowed to the upper half of the result vector.</param>
      <returns>A <c>Vector&lt;SByte&gt;</c> containing elements narrowed from the source vectors.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Narrows two <c>Vector&lt;Int32&gt;</c> instances into one <c>Vector&lt;Int16&gt;</c>.</summary>
      <param name="low">The source vector that will be narrowed to the lower half of the result vector.</param>
      <param name="high">The source vector that will be narrowed to the upper half of the result vector.</param>
      <returns>A <c>Vector&lt;Int16&gt;</c> containing elements narrowed from the source vectors.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Narrows two <c>Vector&lt;Int64&gt;</c> instances into one <c>Vector&lt;Int32&gt;</c>.</summary>
      <param name="low">The source vector that will be narrowed to the lower half of the result vector.</param>
      <param name="high">The source vector that will be narrowed to the upper half of the result vector.</param>
      <returns>A <c>Vector&lt;Int32&gt;</c> containing elements narrowed from the source vectors.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})">
      <summary>Narrows two <c>Vector&lt;UInt16&gt;</c> instances into one <c>Vector&lt;Byte&gt;</c>.</summary>
      <param name="low">The source vector that will be narrowed to the lower half of the result vector.</param>
      <param name="high">The source vector that will be narrowed to the upper half of the result vector.</param>
      <returns>A <c>Vector&lt;Byte&gt;</c> containing elements narrowed from the source vectors.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})">
      <summary>Narrows two <c>Vector&lt;UInt32&gt;</c> instances into one <c>Vector&lt;UInt16&gt;</c>.</summary>
      <param name="low">The source vector that will be narrowed to the lower half of the result vector.</param>
      <param name="high">The source vector that will be narrowed to the upper half of the result vector.</param>
      <returns>A <c>Vector&lt;UInt16&gt;</c> containing elements narrowed from the source vectors.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})">
      <summary>Narrows two <c>Vector&lt;UInt64&gt;</c> instances into one <c>Vector&lt;UInt32&gt;</c>.</summary>
      <param name="low">The source vector that will be narrowed to the lower half of the result vector.</param>
      <param name="high">The source vector that will be narrowed to the upper half of the result vector.</param>
      <returns>A <c>Vector&lt;UInt32&gt;</c> containing elements narrowed from the source vectors.</returns>
    </member>
    <member name="M:System.Numerics.Vector.NarrowWithSaturation(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <param name="low" />
      <param name="high" />
    </member>
    <member name="M:System.Numerics.Vector.NarrowWithSaturation(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})">
      <param name="low" />
      <param name="high" />
    </member>
    <member name="M:System.Numerics.Vector.NarrowWithSaturation(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <param name="low" />
      <param name="high" />
    </member>
    <member name="M:System.Numerics.Vector.NarrowWithSaturation(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <param name="low" />
      <param name="high" />
    </member>
    <member name="M:System.Numerics.Vector.NarrowWithSaturation(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})">
      <param name="low" />
      <param name="high" />
    </member>
    <member name="M:System.Numerics.Vector.NarrowWithSaturation(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})">
      <param name="low" />
      <param name="high" />
    </member>
    <member name="M:System.Numerics.Vector.NarrowWithSaturation(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})">
      <param name="low" />
      <param name="high" />
    </member>
    <member name="M:System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})">
      <summary>Returns a new vector whose elements are the negation of the corresponding element in the specified vector.</summary>
      <param name="value">The source vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.None``1(System.Numerics.Vector{``0},``0)">
      <param name="vector" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.NoneWhereAllBitsSet``1(System.Numerics.Vector{``0})">
      <param name="vector" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})">
      <summary>Returns a new vector whose elements are obtained by taking the one's complement of a specified vector's elements.</summary>
      <param name="value">The source vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The resulting vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.RadiansToDegrees(System.Numerics.Vector{System.Double})">
      <param name="radians" />
    </member>
    <member name="M:System.Numerics.Vector.RadiansToDegrees(System.Numerics.Vector{System.Single})">
      <param name="radians" />
    </member>
    <member name="M:System.Numerics.Vector.Round(System.Numerics.Vector{System.Double},System.MidpointRounding)">
      <param name="vector" />
      <param name="mode" />
    </member>
    <member name="M:System.Numerics.Vector.Round(System.Numerics.Vector{System.Double})">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.Round(System.Numerics.Vector{System.Single},System.MidpointRounding)">
      <param name="vector" />
      <param name="mode" />
    </member>
    <member name="M:System.Numerics.Vector.Round(System.Numerics.Vector{System.Single})">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.ShiftLeft(System.Numerics.Vector{System.Byte},System.Int32)">
      <summary>Shifts each element of a vector left by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted left by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftLeft(System.Numerics.Vector{System.Int16},System.Int32)">
      <summary>Shifts each element of a vector left by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted left by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftLeft(System.Numerics.Vector{System.Int32},System.Int32)">
      <summary>Shifts each element of a vector left by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted left by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftLeft(System.Numerics.Vector{System.Int64},System.Int32)">
      <summary>Shifts each element of a vector left by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted left by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftLeft(System.Numerics.Vector{System.IntPtr},System.Int32)">
      <summary>Shifts each element of a vector left by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted left by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftLeft(System.Numerics.Vector{System.SByte},System.Int32)">
      <summary>Shifts each element of a vector left by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted left by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftLeft(System.Numerics.Vector{System.UInt16},System.Int32)">
      <summary>Shifts each element of a vector left by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted left by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftLeft(System.Numerics.Vector{System.UInt32},System.Int32)">
      <summary>Shifts each element of a vector left by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted left by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftLeft(System.Numerics.Vector{System.UInt64},System.Int32)">
      <summary>Shifts each element of a vector left by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted left by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftLeft(System.Numerics.Vector{System.UIntPtr},System.Int32)">
      <summary>Shifts each element of a vector left by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted left by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftRightArithmetic(System.Numerics.Vector{System.Int16},System.Int32)">
      <summary>Shifts (signed) each element of a vector right by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted right by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftRightArithmetic(System.Numerics.Vector{System.Int32},System.Int32)">
      <summary>Shifts (signed) each element of a vector right by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted right by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftRightArithmetic(System.Numerics.Vector{System.Int64},System.Int32)">
      <summary>Shifts (signed) each element of a vector right by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted right by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftRightArithmetic(System.Numerics.Vector{System.IntPtr},System.Int32)">
      <summary>Shifts (signed) each element of a vector right by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted right by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftRightArithmetic(System.Numerics.Vector{System.SByte},System.Int32)">
      <summary>Shifts (signed) each element of a vector right by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted right by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftRightLogical(System.Numerics.Vector{System.Byte},System.Int32)">
      <summary>Shifts (unsigned) each element of a vector right by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted right by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftRightLogical(System.Numerics.Vector{System.Int16},System.Int32)">
      <summary>Shifts (unsigned) each element of a vector right by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted right by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftRightLogical(System.Numerics.Vector{System.Int32},System.Int32)">
      <summary>Shifts (unsigned) each element of a vector right by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted right by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftRightLogical(System.Numerics.Vector{System.Int64},System.Int32)">
      <summary>Shifts (unsigned) each element of a vector right by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted right by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftRightLogical(System.Numerics.Vector{System.IntPtr},System.Int32)">
      <summary>Shifts (unsigned) each element of a vector right by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted right by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftRightLogical(System.Numerics.Vector{System.SByte},System.Int32)">
      <summary>Shifts (unsigned) each element of a vector right by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted right by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftRightLogical(System.Numerics.Vector{System.UInt16},System.Int32)">
      <summary>Shifts (unsigned) each element of a vector right by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted right by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftRightLogical(System.Numerics.Vector{System.UInt32},System.Int32)">
      <summary>Shifts (unsigned) each element of a vector right by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted right by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftRightLogical(System.Numerics.Vector{System.UInt64},System.Int32)">
      <summary>Shifts (unsigned) each element of a vector right by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted right by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ShiftRightLogical(System.Numerics.Vector{System.UIntPtr},System.Int32)">
      <summary>Shifts (unsigned) each element of a vector right by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted right by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Sin(System.Numerics.Vector{System.Double})">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.Sin(System.Numerics.Vector{System.Single})">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.SinCos(System.Numerics.Vector{System.Double})">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.SinCos(System.Numerics.Vector{System.Single})">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})">
      <summary>Returns a new vector whose elements are the square roots of a specified vector's elements.</summary>
      <param name="value">The source vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The square root vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Store(System.Numerics.Vector2,System.Single*)">
      <param name="source" />
      <param name="destination" />
    </member>
    <member name="M:System.Numerics.Vector.Store(System.Numerics.Vector3,System.Single*)">
      <param name="source" />
      <param name="destination" />
    </member>
    <member name="M:System.Numerics.Vector.Store(System.Numerics.Vector4,System.Single*)">
      <param name="source" />
      <param name="destination" />
    </member>
    <member name="M:System.Numerics.Vector.Store``1(System.Numerics.Vector{``0},``0*)">
      <summary>Stores a vector at the given destination.</summary>
      <param name="source">The vector that will be stored.</param>
      <param name="destination">The destination at which <paramref name="source" /> will be stored.</param>
      <typeparam name="T">The type of the elements in the vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="source" /> (<typeparamref name="T" />) is not supported.</exception>
    </member>
    <member name="M:System.Numerics.Vector.StoreAligned(System.Numerics.Vector2,System.Single*)">
      <param name="source" />
      <param name="destination" />
    </member>
    <member name="M:System.Numerics.Vector.StoreAligned(System.Numerics.Vector3,System.Single*)">
      <param name="source" />
      <param name="destination" />
    </member>
    <member name="M:System.Numerics.Vector.StoreAligned(System.Numerics.Vector4,System.Single*)">
      <param name="source" />
      <param name="destination" />
    </member>
    <member name="M:System.Numerics.Vector.StoreAligned``1(System.Numerics.Vector{``0},``0*)">
      <summary>Stores a vector at the given aligned destination.</summary>
      <param name="source">The vector that will be stored.</param>
      <param name="destination">The aligned destination at which <paramref name="source" /> will be stored.</param>
      <typeparam name="T">The type of the elements in the vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="source" /> (<typeparamref name="T" />) is not supported.</exception>
    </member>
    <member name="M:System.Numerics.Vector.StoreAlignedNonTemporal(System.Numerics.Vector2,System.Single*)">
      <param name="source" />
      <param name="destination" />
    </member>
    <member name="M:System.Numerics.Vector.StoreAlignedNonTemporal(System.Numerics.Vector3,System.Single*)">
      <param name="source" />
      <param name="destination" />
    </member>
    <member name="M:System.Numerics.Vector.StoreAlignedNonTemporal(System.Numerics.Vector4,System.Single*)">
      <param name="source" />
      <param name="destination" />
    </member>
    <member name="M:System.Numerics.Vector.StoreAlignedNonTemporal``1(System.Numerics.Vector{``0},``0*)">
      <summary>Stores a vector at the given aligned destination.</summary>
      <param name="source">The vector that will be stored.</param>
      <param name="destination">The aligned destination at which <paramref name="source" /> will be stored.</param>
      <typeparam name="T">The type of the elements in the vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="source" /> (<typeparamref name="T" />) is not supported.</exception>
    </member>
    <member name="M:System.Numerics.Vector.StoreUnsafe(System.Numerics.Vector2,System.Single@,System.UIntPtr)">
      <param name="source" />
      <param name="destination" />
      <param name="elementOffset" />
    </member>
    <member name="M:System.Numerics.Vector.StoreUnsafe(System.Numerics.Vector2,System.Single@)">
      <param name="source" />
      <param name="destination" />
    </member>
    <member name="M:System.Numerics.Vector.StoreUnsafe(System.Numerics.Vector3,System.Single@,System.UIntPtr)">
      <param name="source" />
      <param name="destination" />
      <param name="elementOffset" />
    </member>
    <member name="M:System.Numerics.Vector.StoreUnsafe(System.Numerics.Vector3,System.Single@)">
      <param name="source" />
      <param name="destination" />
    </member>
    <member name="M:System.Numerics.Vector.StoreUnsafe(System.Numerics.Vector4,System.Single@,System.UIntPtr)">
      <param name="source" />
      <param name="destination" />
      <param name="elementOffset" />
    </member>
    <member name="M:System.Numerics.Vector.StoreUnsafe(System.Numerics.Vector4,System.Single@)">
      <param name="source" />
      <param name="destination" />
    </member>
    <member name="M:System.Numerics.Vector.StoreUnsafe``1(System.Numerics.Vector{``0},``0@,System.UIntPtr)">
      <summary>Stores a vector at the given destination.</summary>
      <param name="source">The vector that will be stored.</param>
      <param name="destination">The destination to which <paramref name="elementOffset" /> will be added before the vector will be stored.</param>
      <param name="elementOffset">The element offset from <paramref name="destination" /> from which the vector will be stored.</param>
      <typeparam name="T">The type of the elements in the vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="source" /> (<typeparamref name="T" />) is not supported.</exception>
    </member>
    <member name="M:System.Numerics.Vector.StoreUnsafe``1(System.Numerics.Vector{``0},``0@)">
      <summary>Stores a vector at the given destination.</summary>
      <param name="source">The vector that will be stored.</param>
      <param name="destination">The destination at which <paramref name="source" /> will be stored.</param>
      <typeparam name="T">The type of the elements in the vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="source" /> (<typeparamref name="T" />) is not supported.</exception>
    </member>
    <member name="M:System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a new vector whose values are the difference between the elements in the second vector and their corresponding elements in the first vector.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The difference vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.SubtractSaturate``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <param name="left" />
      <param name="right" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Numerics.Vector.Sum``1(System.Numerics.Vector{``0})">
      <summary>Returns the sum of all the elements inside the specified vector.</summary>
      <param name="value">A vector containing the objects of type <typeparamref name="T" /> to sum.</param>
      <typeparam name="T">The type of the elements to sum..</typeparam>
      <returns>The sum of all elements inside the vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ToScalar(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.ToScalar(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.ToScalar(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.ToScalar``1(System.Numerics.Vector{``0})">
      <summary>Converts the given vector to a scalar containing the value of the first element.</summary>
      <param name="vector">The vector to get the first element from.</param>
      <typeparam name="T">The type of the elements in the vector.</typeparam>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>A scalar <typeparamref name="T" /> containing the value of the first element.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Truncate(System.Numerics.Vector{System.Double})">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.Truncate(System.Numerics.Vector{System.Single})">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Byte},System.Numerics.Vector{System.UInt16}@,System.Numerics.Vector{System.UInt16}@)">
      <summary>Widens a <c>Vector&lt;Byte&gt;</c> into two <c>Vector&lt;UInt16&gt;</c> instances.</summary>
      <param name="source">The source vector whose elements are widened into the outputs.</param>
      <param name="low">When this method returns, contains the widened result of the lower half of <paramref name="source" />.</param>
      <param name="high">When this method returns, contains the widened result of the upper half of <paramref name="source" />.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int32}@,System.Numerics.Vector{System.Int32}@)">
      <summary>Widens a <c>Vector&lt;Int16&gt;</c> into two <c>Vector&lt;Int32&gt;</c> instances.</summary>
      <param name="source">The source vector whose elements are widened into the outputs.</param>
      <param name="low">When this method returns, contains the widened result of the lower half of <paramref name="source" />.</param>
      <param name="high">When this method returns, contains the widened result of the upper half of <paramref name="source" />.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int64}@,System.Numerics.Vector{System.Int64}@)">
      <summary>Widens a <c>Vector&lt;Int32&gt;</c> into two <c>Vector&lt;Int64&gt;</c> instances.</summary>
      <param name="source">The source vector whose elements are widened into the outputs.</param>
      <param name="low">When this method returns, contains the widened result of the lower half of <paramref name="source" />.</param>
      <param name="high">When this method returns, contains the widened result of the upper half of <paramref name="source" />.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.SByte},System.Numerics.Vector{System.Int16}@,System.Numerics.Vector{System.Int16}@)">
      <summary>Widens a <c>Vector&lt;SByte&gt;</c> into two <c>Vector&lt;Int16&gt;</c> instances.</summary>
      <param name="source">The source vector whose elements are widened into the outputs.</param>
      <param name="low">When this method returns, contains the widened result of the lower half of <paramref name="source" />.</param>
      <param name="high">When this method returns, contains the widened result of the upper half of <paramref name="source" />.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Double}@,System.Numerics.Vector{System.Double}@)">
      <summary>Widens a <c>Vector&lt;Single&gt;</c> into two <c>Vector&lt;Double&gt;</c> instances.</summary>
      <param name="source">The source vector whose elements are widened into the outputs.</param>
      <param name="low">When this method returns, contains the widened result of the lower half of <paramref name="source" />.</param>
      <param name="high">When this method returns, contains the widened result of the upper half of <paramref name="source" />.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt32}@,System.Numerics.Vector{System.UInt32}@)">
      <summary>Widens a <c>Vector&lt;UInt16&gt;</c> into two <c>Vector&lt;UInt32&gt;</c> instances.</summary>
      <param name="source">The source vector whose elements are widened into the outputs.</param>
      <param name="low">When this method returns, contains the widened result of the lower half of <paramref name="source" />.</param>
      <param name="high">When this method returns, contains the widened result of the upper half of <paramref name="source" />.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt64}@,System.Numerics.Vector{System.UInt64}@)">
      <summary>Widens a <c>Vector&lt;UInt32&gt;</c> into two <c>Vector&lt;UInt64&gt;</c> instances.</summary>
      <param name="source">The source vector whose elements are widened into the outputs.</param>
      <param name="low">When this method returns, contains the widened result of the lower half of <paramref name="source" />.</param>
      <param name="high">When this method returns, contains the widened result of the upper half of <paramref name="source" />.</param>
    </member>
    <member name="M:System.Numerics.Vector.WidenLower(System.Numerics.Vector{System.Byte})">
      <summary>Widens the lower half of a <see cref="T:System.Numerics.Vector`1" /> into a <see cref="T:System.Numerics.Vector`1" />.</summary>
      <param name="source">The vector whose elements are to be widened.</param>
      <returns>A vector that contains the widened lower half of <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.WidenLower(System.Numerics.Vector{System.Int16})">
      <summary>Widens the lower half of a <see cref="T:System.Numerics.Vector`1" /> into a <see cref="T:System.Numerics.Vector`1" />.</summary>
      <param name="source">The vector whose elements are to be widened.</param>
      <returns>A vector that contains the widened lower half of <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.WidenLower(System.Numerics.Vector{System.Int32})">
      <summary>Widens the lower half of a <see cref="T:System.Numerics.Vector`1" /> into a <see cref="T:System.Numerics.Vector`1" />.</summary>
      <param name="source">The vector whose elements are to be widened.</param>
      <returns>A vector that contains the widened lower half of <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.WidenLower(System.Numerics.Vector{System.SByte})">
      <summary>Widens the lower half of a <see cref="T:System.Numerics.Vector`1" /> into a <see cref="T:System.Numerics.Vector`1" />.</summary>
      <param name="source">The vector whose elements are to be widened.</param>
      <returns>A vector that contains the widened lower half of <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.WidenLower(System.Numerics.Vector{System.Single})">
      <summary>Widens the lower half of a <see cref="T:System.Numerics.Vector`1" /> into a <see cref="T:System.Numerics.Vector`1" />.</summary>
      <param name="source">The vector whose elements are to be widened.</param>
      <returns>A vector that contains the widened lower half of <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.WidenLower(System.Numerics.Vector{System.UInt16})">
      <summary>Widens the lower half of a <see cref="T:System.Numerics.Vector`1" /> into a <see cref="T:System.Numerics.Vector`1" />.</summary>
      <param name="source">The vector whose elements are to be widened.</param>
      <returns>A vector that contains the widened lower half of <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.WidenLower(System.Numerics.Vector{System.UInt32})">
      <summary>Widens the lower half of a <see cref="T:System.Numerics.Vector`1" /> into a <see cref="T:System.Numerics.Vector`1" />.</summary>
      <param name="source">The vector whose elements are to be widened.</param>
      <returns>A vector that contains the widened lower half of <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.WidenUpper(System.Numerics.Vector{System.Byte})">
      <summary>Widens the upper half of a <see cref="T:System.Numerics.Vector`1" /> into a <see cref="T:System.Numerics.Vector`1" />.</summary>
      <param name="source">The vector whose elements are to be widened.</param>
      <returns>A vector that contains the widened upper half of <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.WidenUpper(System.Numerics.Vector{System.Int16})">
      <summary>Widens the upper half of a <see cref="T:System.Numerics.Vector`1" /> into a <see cref="T:System.Numerics.Vector`1" />.</summary>
      <param name="source">The vector whose elements are to be widened.</param>
      <returns>A vector that contains the widened upper half of <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.WidenUpper(System.Numerics.Vector{System.Int32})">
      <summary>Widens the upper half of a <see cref="T:System.Numerics.Vector`1" /> into a <see cref="T:System.Numerics.Vector`1" />.</summary>
      <param name="source">The vector whose elements are to be widened.</param>
      <returns>A vector that contains the widened upper half of <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.WidenUpper(System.Numerics.Vector{System.SByte})">
      <summary>Widens the upper half of a <see cref="T:System.Numerics.Vector`1" /> into a <see cref="T:System.Numerics.Vector`1" />.</summary>
      <param name="source">The vector whose elements are to be widened.</param>
      <returns>A vector that contains the widened upper half of <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.WidenUpper(System.Numerics.Vector{System.Single})">
      <summary>Widens the upper half of a <see cref="T:System.Numerics.Vector`1" /> into a <see cref="T:System.Numerics.Vector`1" />.</summary>
      <param name="source">The vector whose elements are to be widened.</param>
      <returns>A vector that contains the widened upper half of <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.WidenUpper(System.Numerics.Vector{System.UInt16})">
      <summary>Widens the upper half of a <see cref="T:System.Numerics.Vector`1" /> into a <see cref="T:System.Numerics.Vector`1" />.</summary>
      <param name="source">The vector whose elements are to be widened.</param>
      <returns>A vector that contains the widened upper half of <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.WidenUpper(System.Numerics.Vector{System.UInt32})">
      <summary>Widens the upper half of a <see cref="T:System.Numerics.Vector`1" /> into a <see cref="T:System.Numerics.Vector`1" />.</summary>
      <param name="source">The vector whose elements are to be widened.</param>
      <returns>A vector that contains the widened upper half of <paramref name="source" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.WithElement(System.Numerics.Vector2,System.Int32,System.Single)">
      <param name="vector" />
      <param name="index" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector.WithElement(System.Numerics.Vector3,System.Int32,System.Single)">
      <param name="vector" />
      <param name="index" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector.WithElement(System.Numerics.Vector4,System.Int32,System.Single)">
      <param name="vector" />
      <param name="index" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector.WithElement``1(System.Numerics.Vector{``0},System.Int32,``0)">
      <summary>Creates a new <see cref="T:System.Numerics.Vector`1" /> with the element at the specified index set to the specified value and the remaining elements set to the same value as that in the given vector.</summary>
      <param name="vector">The vector to get the remaining elements from.</param>
      <param name="index">The index of the element to set.</param>
      <param name="value">The value to set the element to.</param>
      <typeparam name="T">The type of the elements in the vector.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> was less than zero or greater than the number of elements.</exception>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="vector" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>A <see cref="T:System.Numerics.Vector`1" /> with the value of the element at <paramref name="index" /> set to <paramref name="value" /> and the remaining elements set to the same value as that in <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Returns a new vector by performing a bitwise exclusive Or (<see langword="XOr" />) operation on each pair of elements in two vectors.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <typeparam name="T">The vector type. <c>T</c> can be any primitive numeric type.</typeparam>
      <returns>The resulting vector.</returns>
    </member>
    <member name="P:System.Numerics.Vector.IsHardwareAccelerated">
      <summary>Gets a value that indicates whether vector operations are subject to hardware acceleration through JIT intrinsic support.</summary>
      <returns>
        <see langword="true" /> if vector operations are subject to hardware acceleration; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Numerics.Vector`1">
      <summary>Represents a single vector of a specified numeric type that is suitable for low-level optimization of parallel algorithms.</summary>
      <typeparam name="T">The type of the elements in the vector. <typeparamref name="T" /> can be any primitive numeric type.</typeparam>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0)">
      <summary>Creates a vector whose components are of a specified type.</summary>
      <param name="value">The numeric type that defines the type of the components in the vector.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
      <summary>Creates a vector from a specified array starting at a specified index position.</summary>
      <param name="values">The values to add to the vector, as an array of objects of type T. The array must contain at least <see cref="P:System.Numerics.Vector`1.Count" /> elements from the specified index and only the first <see cref="P:System.Numerics.Vector`1.Count" /> elements are used.</param>
      <param name="index">The starting index position from which to create the vector.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.  
  
 -or-  
  
 The length of <paramref name="values" /> minus <paramref name="index" /> is less than <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="values" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="values" />, starting from <paramref name="index" />, is less than <see cref="P:System.Runtime.Intrinsics.Vector128`1.Count" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[])">
      <summary>Creates a vector from a specified array.</summary>
      <param name="values">The values to add to the vector, as an array of objects of type T. The array must contain at least <see cref="P:System.Numerics.Vector`1.Count" /> elements and only the first <see cref="P:System.Numerics.Vector`1.Count" /> elements are used.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="values" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="values" /> is less than <see cref="P:System.Runtime.Intrinsics.Vector128`1.Count" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{`0})">
      <summary>Constructs a vector from the given <see cref="T:System.ReadOnlySpan`1" />.</summary>
      <param name="values">The values to add to the vector, as a read-only span of objects of type <see langword="T" />. The span must contain at least <see cref="P:System.Numerics.Vector`1.Count" /> elements and only the first <see cref="P:System.Numerics.Vector`1.Count" /> elements are used.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="values" /> did not contain at least <see cref="P:System.Numerics.Vector`1.Count" /> elements.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="values" /> is less than <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>Constructs a vector from the given read-only span of bytes.</summary>
      <param name="values">A read-only span of bytes that contains the values to add to the vector. The span must contain at least <see cref="P:System.Numerics.Vector`1.Count" /> elements and only the first <see cref="P:System.Numerics.Vector`1.Count" /> elements are used.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="values" /> did not contain at least <see cref="P:System.Numerics.Vector`1.Count" /> elements.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="values" /> is less than <c>sizeof(<see cref="T:System.Numerics.Vector`1" />)</c>.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.Span{`0})">
      <summary>Constructs a vector from the given <see cref="T:System.Span`1" />.</summary>
      <param name="values">The values to add to the vector, as a span of objects of type T. The span must contain at least <see cref="P:System.Numerics.Vector`1.Count" /> elements and only the first <see cref="P:System.Numerics.Vector`1.Count" /> elements are used.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="values" /> did not contain at least <see cref="P:System.Numerics.Vector`1.Count" /> elements.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length of <paramref name="values" /> is less than <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the vector instance to a specified destination array starting at a specified index position.</summary>
      <param name="destination">The array to receive a copy of the vector values.</param>
      <param name="startIndex">The starting index in <paramref name="destination" /> at which to begin the copy operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the current instance is greater than the number of elements available from <paramref name="startIndex" /> to the end of the <paramref name="destination" /> array.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than the last index in <paramref name="destination" />.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="destination" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[])">
      <summary>Copies the vector instance to a specified destination array.</summary>
      <param name="destination">The array to receive a copy of the vector values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the current vector is greater than the number of elements available in the <paramref name="destination" /> array.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="destination" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{`0})">
      <summary>Copies the vector to the given span. .</summary>
      <param name="destination">The destination span to which the values are copied. The destination span must be at least size <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.ArgumentException">The number of elements in the source vector is greater than those available in the destination span.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{System.Byte})">
      <summary>Copies the vector to the given <see cref="T:System.Span`1" />.</summary>
      <param name="destination">The destination span to which the values are copied. The destination span must be at least size <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.ArgumentException">The number of elements in the source vector is greater than those available in the destination span.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})">
      <summary>Returns a value that indicates whether this instance is equal to a specified vector.</summary>
      <param name="other">The vector to compare with this instance.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>
        <see langword="true" /> if the current instance and <paramref name="other" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
      <param name="obj">The object to compare with this instance.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>
        <see langword="true" /> if the current instance and <paramref name="obj" /> are equal; otherwise, <see langword="false" />. The method returns <see langword="false" /> if <paramref name="obj" /> is null, or if <paramref name="obj" /> is a vector of a different type than the current instance.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The hash code.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Adds two vectors together.</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The summed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Returns a new vector by performing a bitwise <see langword="And" /> operation on each of the elements in two vectors.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The vector that results from the bitwise <see langword="And" /> of <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Returns a new vector by performing a bitwise <see langword="Or" /> operation on each of the elements in two vectors.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The vector that results from the bitwise <see langword="Or" /> of the elements in <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},`0)">
      <summary>Divides a vector by a scalar to compute the per-element quotient.</summary>
      <param name="left">The vector that will be divided by <paramref name="right" />.</param>
      <param name="right">The scalar that will divide <paramref name="left" />.</param>
      <returns>The quotient of <paramref name="left" /> divided by <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Divides the first vector by the second.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The vector that results from dividing <paramref name="left" /> by <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Returns a value that indicates whether each pair of elements in two specified vectors are equal.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Returns a new vector by performing a bitwise <see langword="XOr" /> operation on each of the elements in two vectors.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The vector that results from the bitwise <see langword="XOr" /> of the elements in <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}">
      <summary>Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.Byte" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}">
      <summary>Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.Double" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}">
      <summary>Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.Int16" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}">
      <summary>Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.Int32" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}">
      <summary>Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.Int64" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.IntPtr}">
      <summary>Reinterprets the bits of a source vector into a vector of native-sized integers.</summary>
      <param name="value">The vector to reinterpret.</param>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="value" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Numerics.Vector`1" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}">
      <summary>Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.SByte" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}">
      <summary>Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.Single" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}">
      <summary>Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.UInt16" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}">
      <summary>Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.UInt32" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}">
      <summary>Reinterprets the bits of the specified vector into a vector of type <see cref="T:System.UInt64" />.</summary>
      <param name="value">The vector to reinterpret.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The reinterpreted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UIntPtr}">
      <summary>Reinterprets the bits of a source vector into a vector of native-sized, unsigned integers.</summary>
      <param name="value">The vector to reinterpret.</param>
      <exception cref="T:System.NotSupportedException">The type of <paramref name="value" /> (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="value" /> reinterpreted as a new <see cref="T:System.Numerics.Vector`1" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Returns a value that indicates whether any single pair of elements in the specified vectors is equal.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>
        <see langword="true" /> if any element pairs in left and right are equal. <see langword="false" /> if no element pairs are equal.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_LeftShift(System.Numerics.Vector{`0},System.Int32)">
      <summary>Shifts each element of a vector left by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted left by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})">
      <summary>Multiplies a vector by a specified scalar value.</summary>
      <param name="factor">The scalar value.</param>
      <param name="value">The source vector.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)">
      <summary>Multiplies a vector by a specified scalar value.</summary>
      <param name="value">The source vector.</param>
      <param name="factor">A scalar value.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Returns a new vector whose values are the product of each pair of elements in two specified vectors.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The element-wise product vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})">
      <summary>Returns a new vector whose elements are obtained by taking the one's complement of a specified vector's elements.</summary>
      <param name="value">The source vector.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The one's complement vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_RightShift(System.Numerics.Vector{`0},System.Int32)">
      <summary>Shifts (signed) each element of a vector right by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted right by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Subtracts the second vector from the first.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The vector that results from subtracting <paramref name="right" /> from <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})">
      <summary>Negates a given vector.</summary>
      <param name="value">The vector to negate.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_UnaryPlus(System.Numerics.Vector{`0})">
      <summary>Returns a given vector unchanged.</summary>
      <param name="value">The vector.</param>
      <exception cref="T:System.NotSupportedException">The type of the vector (<typeparamref name="T" />) is not supported.</exception>
      <returns>
        <paramref name="value" />
      </returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_UnsignedRightShift(System.Numerics.Vector{`0},System.Int32)">
      <summary>Shifts (unsigned) each element of a vector right by the specified amount.</summary>
      <param name="value">The vector whose elements are to be shifted.</param>
      <param name="shiftCount">The number of bits by which to shift each element.</param>
      <returns>A vector whose elements where shifted right by <paramref name="shiftCount" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString">
      <summary>Returns the string representation of this vector using default formatting.</summary>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The string representation of this vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)">
      <summary>Returns the string representation of this vector using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.</summary>
      <param name="format">The format of individual elements.</param>
      <param name="formatProvider">A format provider that supplies culture-specific formatting information.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The string representation of the current instance.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String)">
      <summary>Returns the string representation of this vector using the specified format string to format individual elements.</summary>
      <param name="format">The format of individual elements.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The string representation of the current instance.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{`0})">
      <summary>Attempts to copy the vector to the given <see cref="T:System.Span`1" />.</summary>
      <param name="destination">The destination span to which the values are copied. The destination span must be at least size <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>
        <see langword="true" /> if the source vector was successfully copied to <paramref name="destination" />. <see langword="false" /> if <paramref name="destination" /> is not large enough to hold the source vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{System.Byte})">
      <summary>Attempts to copy the vector to the given byte span.</summary>
      <param name="destination">The destination span to which the values are copied. The destination span must be at least size <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>
        <see langword="true" /> if the source vector was successfully copied to <paramref name="destination" />. <see langword="false" /> if <paramref name="destination" /> is not large enough to hold the source vector.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.AllBitsSet">
      <summary>Gets a new <see cref="T:System.Numerics.Vector`1" /> with all bits set to 1.</summary>
      <exception cref="T:System.NotSupportedException">The type of the current instance (<typeparamref name="T" />) is not supported.</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.Count">
      <summary>Returns the number of elements stored in the vector.</summary>
      <exception cref="T:System.NotSupportedException">Access to the property getter via reflection is not supported.
        
-or-
        
.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>The number of elements stored in the vector.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Indices">
      <summary>Gets a new <see cref="T:System.Numerics.Vector`1" /> with the elements set to their index.</summary>
      <exception cref="T:System.NotSupportedException">The type of the vector (<typeparamref name="T" />) is not supported.</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.IsSupported">
      <summary>Gets a value that indicates whether <typeparamref name="T" /> is supported.</summary>
      <returns>
        <see langword="true" /> if <typeparamref name="T" /> is supported; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Item(System.Int32)">
      <summary>Gets the element at a specified index.</summary>
      <param name="index">The index of the element to return.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> is greater than or equal to <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> was less than zero or greater than the number of elements.</exception>
      <returns>The element at index <paramref name="index" />.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.One">
      <summary>Returns a vector containing all ones.</summary>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>A vector containing all ones.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Zero">
      <summary>Returns a vector containing all zeroes.</summary>
      <exception cref="T:System.NotSupportedException">.NET 5 and later: Type <see langword="T" /> is not supported.</exception>
      <returns>A vector containing all zeroes.</returns>
    </member>
    <member name="T:System.Numerics.Vector2">
      <summary>Represents a vector with two single-precision floating-point values.</summary>
    </member>
    <member name="F:System.Numerics.Vector2.X">
      <summary>The X component of the vector.</summary>
    </member>
    <member name="F:System.Numerics.Vector2.Y">
      <summary>The Y component of the vector.</summary>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.ReadOnlySpan{System.Single})">
      <summary>Constructs a vector from the given <see cref="T:System.ReadOnlySpan`1" />. The span must contain at least two elements.</summary>
      <param name="values">The span of elements to assign to the vector.</param>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single,System.Single)">
      <summary>Creates a vector whose elements have the specified values.</summary>
      <param name="x">The value to assign to the <see cref="F:System.Numerics.Vector2.X" /> field.</param>
      <param name="y">The value to assign to the <see cref="F:System.Numerics.Vector2.Y" /> field.</param>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single)">
      <summary>Creates a new <see cref="T:System.Numerics.Vector2" /> object whose two elements have the same value.</summary>
      <param name="value">The value to assign to both elements.</param>
    </member>
    <member name="M:System.Numerics.Vector2.Abs(System.Numerics.Vector2)">
      <summary>Returns a vector whose elements are the absolute values of each of the specified vector's elements.</summary>
      <param name="value">A vector.</param>
      <returns>The absolute value vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Add(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Adds two vectors together.</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The summed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.All(System.Numerics.Vector2,System.Single)">
      <param name="vector" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector2.AllWhereAllBitsSet(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.AndNot(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.Any(System.Numerics.Vector2,System.Single)">
      <param name="vector" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector2.AnyWhereAllBitsSet(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.BitwiseAnd(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.BitwiseOr(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Restricts a vector between a minimum and a maximum value.</summary>
      <param name="value1">The vector to restrict.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The restricted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ClampNative(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Restricts a vector between a minimum and a maximum value using platform specific behavior for <code data-dev-comment-type="c">NaN</code> and <code data-dev-comment-type="c">NegativeZero</code>..</summary>
      <param name="value1" />
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The restricted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ConditionalSelect(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="condition" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.CopySign(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Copies the per-element sign of a vector to the per-element sign of another vector.</summary>
      <param name="value">The vector whose magnitude is used in the result.</param>
      <param name="sign">The vector whose sign is used in the result.</param>
      <returns>A vector with the magnitude of <code data-dev-comment-type="paramref">value</code> and the sign of <code data-dev-comment-type="paramref">sign</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[],System.Int32)">
      <summary>Copies the elements of the vector to a specified array starting at a specified index position.</summary>
      <param name="array">The destination array.</param>
      <param name="index">The index at which to copy the first element of the vector.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the current instance is greater than in the array.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.

 -or-

 <paramref name="index" /> is greater than or equal to the array length.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="array" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[])">
      <summary>Copies the elements of the vector to a specified array.</summary>
      <param name="array">The destination array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the current instance is greater than in the array.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="array" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Span{System.Single})">
      <summary>Copies the vector to the given <see cref="T:System.Span`1" />.The length of the destination span must be at least 2.</summary>
      <param name="destination">The destination span into which the values are copied.</param>
      <exception cref="T:System.ArgumentException">The number of elements in the source vector is greater than the number of elements available in destination span.</exception>
    </member>
    <member name="M:System.Numerics.Vector2.Cos(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.Count(System.Numerics.Vector2,System.Single)">
      <param name="vector" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector2.CountWhereAllBitsSet(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.Create(System.ReadOnlySpan{System.Single})">
      <summary>Constructs a vector from the given <see cref="T:System.ReadOnlySpan`1" />. The span must contain at least 2 elements.</summary>
      <param name="values">The span of elements to assign to the vector.</param>
      <returns>A new <see cref="T:System.Numerics.Vector2" /> whose elements have the specified values.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Create(System.Single,System.Single)">
      <summary>Creates a vector whose elements have the specified values.</summary>
      <param name="x">The value to assign to the <see cref="F:System.Numerics.Vector2.X" /> field.</param>
      <param name="y">The value to assign to the <see cref="F:System.Numerics.Vector2.Y" /> field.</param>
      <returns>A new <see cref="T:System.Numerics.Vector2" /> whose elements have the specified values.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Create(System.Single)">
      <summary>Creates a new <see cref="T:System.Numerics.Vector2" /> object whose two elements have the same value.</summary>
      <param name="value">The value to assign to all two elements.</param>
      <returns>A new <see cref="T:System.Numerics.Vector2" /> whose two elements have the same value.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.CreateScalar(System.Single)">
      <param name="x" />
    </member>
    <member name="M:System.Numerics.Vector2.CreateScalarUnsafe(System.Single)">
      <param name="x" />
    </member>
    <member name="M:System.Numerics.Vector2.Cross(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="value1" />
      <param name="value2" />
    </member>
    <member name="M:System.Numerics.Vector2.DegreesToRadians(System.Numerics.Vector2)">
      <param name="degrees" />
    </member>
    <member name="M:System.Numerics.Vector2.Distance(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Computes the Euclidean distance between the two given points.</summary>
      <param name="value1">The first point.</param>
      <param name="value2">The second point.</param>
      <returns>The distance.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Returns the Euclidean distance squared between two specified points.</summary>
      <param name="value1">The first point.</param>
      <param name="value2">The second point.</param>
      <returns>The distance squared.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Divides the first vector by the second.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <returns>The vector resulting from the division.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Single)">
      <summary>Divides the specified vector by a specified scalar value.</summary>
      <param name="left">The vector.</param>
      <param name="divisor">The scalar value.</param>
      <returns>The vector that results from the division.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Returns the dot product of two vectors.</summary>
      <param name="value1">The first vector.</param>
      <param name="value2">The second vector.</param>
      <returns>The dot product.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Numerics.Vector2)">
      <summary>Returns a value that indicates whether this instance and another vector are equal.</summary>
      <param name="other">The other vector.</param>
      <returns>
        <see langword="true" /> if the two vectors are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if the current instance and <paramref name="obj" /> are equal; otherwise, <see langword="false" />. If <paramref name="obj" /> is <see langword="null" />, the method returns <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.EqualsAll(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.EqualsAny(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.Exp(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.FusedMultiplyAdd(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
      <param name="addend" />
    </member>
    <member name="M:System.Numerics.Vector2.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.GreaterThan(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.GreaterThanAll(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.GreaterThanAny(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.GreaterThanOrEqual(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.GreaterThanOrEqualAll(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.GreaterThanOrEqualAny(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.Hypot(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="x" />
      <param name="y" />
    </member>
    <member name="M:System.Numerics.Vector2.IndexOf(System.Numerics.Vector2,System.Single)">
      <param name="vector" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector2.IndexOfWhereAllBitsSet(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.IsEvenInteger(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.IsFinite(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.IsInfinity(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.IsInteger(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.IsNaN(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.IsNegative(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.IsNegativeInfinity(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.IsNormal(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.IsOddInteger(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.IsPositive(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.IsPositiveInfinity(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.IsSubnormal(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.IsZero(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.LastIndexOf(System.Numerics.Vector2,System.Single)">
      <param name="vector" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector2.LastIndexOfWhereAllBitsSet(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.Length">
      <summary>Returns the length of the vector.</summary>
      <returns>The vector's length.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.LengthSquared">
      <summary>Returns the length of the vector squared.</summary>
      <returns>The vector's length squared.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="value1" />
      <param name="value2" />
      <param name="amount" />
    </member>
    <member name="M:System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
      <summary>Performs a linear interpolation between two vectors based on the given weighting.</summary>
      <param name="value1">The first vector.</param>
      <param name="value2">The second vector.</param>
      <param name="amount">A value between 0 and 1 that indicates the weight of <code data-dev-comment-type="paramref">value2</code>.</param>
      <returns>The interpolated vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.LessThan(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.LessThanAll(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.LessThanAny(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.LessThanOrEqual(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.LessThanOrEqualAll(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.LessThanOrEqualAny(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.Load(System.Single*)">
      <param name="source" />
    </member>
    <member name="M:System.Numerics.Vector2.LoadAligned(System.Single*)">
      <param name="source" />
    </member>
    <member name="M:System.Numerics.Vector2.LoadAlignedNonTemporal(System.Single*)">
      <param name="source" />
    </member>
    <member name="M:System.Numerics.Vector2.LoadUnsafe(System.Single@,System.UIntPtr)">
      <param name="source" />
      <param name="elementOffset" />
    </member>
    <member name="M:System.Numerics.Vector2.LoadUnsafe(System.Single@)">
      <param name="source" />
    </member>
    <member name="M:System.Numerics.Vector2.Log(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.Log2(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.Max(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors.</summary>
      <param name="value1">The first vector.</param>
      <param name="value2">The second vector.</param>
      <returns>The maximized vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.MaxMagnitude(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Compares two vectors to compute which has the greater magnitude on a per-element basis.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a greater magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.MaxMagnitudeNumber(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Compares two vectors, on a per-element basis, to compute which has the greater magnitude and returning the other value if an input is <code data-dev-comment-type="c">NaN</code>.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a greater magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.MaxNative(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Compare two vectors to determine which is greater on a per-element basis using platform specific behavior for <code data-dev-comment-type="c">NaN</code> and <code data-dev-comment-type="c">NegativeZero</code>.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is greater than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.MaxNumber(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Compares two vectors, on a per-element basis, to compute which is greater and returning the other value if an element is <code data-dev-comment-type="c">NaN</code>.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is greater than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Min(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors.</summary>
      <param name="value1">The first vector.</param>
      <param name="value2">The second vector.</param>
      <returns>The minimized vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.MinMagnitude(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Compares two vectors to compute which has the lesser magnitude on a per-element basis.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a lesser magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.MinMagnitudeNumber(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Compares two vectors, on a per-element basis, to compute which has the lesser magnitude and returning the other value if an input is <code data-dev-comment-type="c">NaN</code>.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a lesser magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.MinNative(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Compare two vectors to determine which is lesser on a per-element basis using platform specific behavior for <code data-dev-comment-type="c">NaN</code> and <code data-dev-comment-type="c">NegativeZero</code>.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is lesser than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.MinNumber(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Compares two vectors, on a per-element basis, to compute which is lesser and returning the other value if an element is <code data-dev-comment-type="c">NaN</code>.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is lesser than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Returns a new vector whose values are the product of each pair of elements in two specified vectors.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <returns>The element-wise product vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Single)">
      <summary>Multiplies a vector by a specified scalar.</summary>
      <param name="left">The vector to multiply.</param>
      <param name="right">The scalar value.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Single,System.Numerics.Vector2)">
      <summary>Multiplies a scalar value by a specified vector.</summary>
      <param name="left">The scaled value.</param>
      <param name="right">The vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.MultiplyAddEstimate(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
      <param name="addend" />
    </member>
    <member name="M:System.Numerics.Vector2.Negate(System.Numerics.Vector2)">
      <summary>Negates a specified vector.</summary>
      <param name="value">The vector to negate.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.None(System.Numerics.Vector2,System.Single)">
      <param name="vector" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector2.NoneWhereAllBitsSet(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.Normalize(System.Numerics.Vector2)">
      <summary>Returns a vector with the same direction as the specified vector, but with a length of one.</summary>
      <param name="value">The vector to normalize.</param>
      <returns>The normalized vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.OnesComplement(System.Numerics.Vector2)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Adds two vectors together.</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The summed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_BitwiseAnd(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.op_BitwiseOr(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Divides the first vector by the second.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <returns>The vector that results from dividing <paramref name="left" /> by <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Single)">
      <summary>Divides the specified vector by a specified scalar value.</summary>
      <param name="value1">The vector.</param>
      <param name="value2">The scalar value.</param>
      <returns>The result of the division.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Returns a value that indicates whether each pair of elements in two specified vectors is equal.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_ExclusiveOr(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector2.op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Returns a value that indicates whether two specified vectors are not equal.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_LeftShift(System.Numerics.Vector2,System.Int32)">
      <param name="value" />
      <param name="shiftAmount" />
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Returns a new vector whose values are the product of each pair of elements in two specified vectors.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <returns>The element-wise product vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Single)">
      <summary>Multiples the specified vector by the specified scalar value.</summary>
      <param name="left">The vector.</param>
      <param name="right">The scalar value.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Single,System.Numerics.Vector2)">
      <summary>Multiples the scalar value by the specified vector.</summary>
      <param name="left">The vector.</param>
      <param name="right">The scalar value.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_OnesComplement(System.Numerics.Vector2)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector2.op_RightShift(System.Numerics.Vector2,System.Int32)">
      <param name="value" />
      <param name="shiftAmount" />
    </member>
    <member name="M:System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Subtracts the second vector from the first.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <returns>The vector that results from subtracting <paramref name="right" /> from <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)">
      <summary>Negates the specified vector.</summary>
      <param name="value">The vector to negate.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_UnaryPlus(System.Numerics.Vector2)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector2.op_UnsignedRightShift(System.Numerics.Vector2,System.Int32)">
      <param name="value" />
      <param name="shiftAmount" />
    </member>
    <member name="M:System.Numerics.Vector2.RadiansToDegrees(System.Numerics.Vector2)">
      <param name="radians" />
    </member>
    <member name="M:System.Numerics.Vector2.Reflect(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Returns the reflection of a vector off a surface that has the specified normal.</summary>
      <param name="vector">The source vector.</param>
      <param name="normal">The normal of the surface being reflected off.</param>
      <returns>The reflected vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Round(System.Numerics.Vector2,System.MidpointRounding)">
      <param name="vector" />
      <param name="mode" />
    </member>
    <member name="M:System.Numerics.Vector2.Round(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.Shuffle(System.Numerics.Vector2,System.Byte,System.Byte)">
      <param name="vector" />
      <param name="xIndex" />
      <param name="yIndex" />
    </member>
    <member name="M:System.Numerics.Vector2.Sin(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.SinCos(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)">
      <summary>Returns a vector whose elements are the square root of each of a specified vector's elements.</summary>
      <param name="value">A vector.</param>
      <returns>The square root vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Subtract(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Subtracts the second vector from the first.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <returns>The difference vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Sum(System.Numerics.Vector2)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector2.ToString">
      <summary>Returns the string representation of the current instance using default formatting.</summary>
      <returns>The string representation of the current instance.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String,System.IFormatProvider)">
      <summary>Returns the string representation of the current instance using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.</summary>
      <param name="format">A standard or custom numeric format string that defines the format of individual elements.</param>
      <param name="formatProvider">A format provider that supplies culture-specific formatting information.</param>
      <returns>The string representation of the current instance.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String)">
      <summary>Returns the string representation of the current instance using the specified format string to format individual elements.</summary>
      <param name="format">A standard or custom numeric format string that defines the format of individual elements.</param>
      <returns>The string representation of the current instance.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary>Transforms a vector by a specified 3x2 matrix.</summary>
      <param name="position">The vector to transform.</param>
      <param name="matrix">The transformation matrix.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Transforms a vector by a specified 4x4 matrix.</summary>
      <param name="position">The vector to transform.</param>
      <param name="matrix">The transformation matrix.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary>Transforms a vector by the specified Quaternion rotation value.</summary>
      <param name="value">The vector to rotate.</param>
      <param name="rotation">The rotation to apply.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary>Transforms a vector normal by the given 3x2 matrix.</summary>
      <param name="normal">The source vector.</param>
      <param name="matrix">The matrix.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Transforms a vector normal by the given 4x4 matrix.</summary>
      <param name="normal">The source vector.</param>
      <param name="matrix">The matrix.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Truncate(System.Numerics.Vector2)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector2.TryCopyTo(System.Span{System.Single})">
      <summary>Attempts to copy the vector to the given <see cref="T:System.Span`1" />. The length of the destination span must be at least 2.</summary>
      <param name="destination">The destination span into which the values are copied.</param>
      <returns>
        <see langword="true" /> if the source vector was successfully copied to <paramref name="destination" />. <see langword="false" /> if <paramref name="destination" /> is not large enough to hold the source vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Xor(System.Numerics.Vector2,System.Numerics.Vector2)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="P:System.Numerics.Vector2.AllBitsSet" />
    <member name="P:System.Numerics.Vector2.E">
      <summary>Gets a vector whose elements are equal to <see cref="P:System.Single.E" />.</summary>
      <returns>A vector whose elements are equal to <see cref="P:System.Single.E" /> (that is, it returns the vector <code data-dev-comment-type="c">Create(float.E)</code>).</returns>
    </member>
    <member name="P:System.Numerics.Vector2.Epsilon">
      <summary>Gets a vector whose elements are equal to <see cref="P:System.Single.Epsilon" />.</summary>
      <returns>A vector whose elements are equal to <see cref="P:System.Single.Epsilon" /> (that is, it returns the vector <code data-dev-comment-type="c">Create(float.Epsilon)</code>).</returns>
    </member>
    <member name="P:System.Numerics.Vector2.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> was less than zero or greater than the number of elements.</exception>
      <returns>The the element at <paramref name="index" />.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.NaN">
      <summary>Gets a vector whose elements are equal to <see cref="P:System.Single.NaN" />.</summary>
      <returns>A vector whose elements are equal to <see cref="P:System.Single.NaN" /> (that is, it returns the vector <code data-dev-comment-type="c">Create(float.NaN)</code>).</returns>
    </member>
    <member name="P:System.Numerics.Vector2.NegativeInfinity">
      <summary>Gets a vector whose elements are equal to <see cref="P:System.Single.NegativeInfinity" />.</summary>
      <returns>A vector whose elements are equal to <see cref="P:System.Single.NegativeInfinity" /> (that is, it returns the vector <code data-dev-comment-type="c">Create(float.NegativeInfinity)</code>).</returns>
    </member>
    <member name="P:System.Numerics.Vector2.NegativeZero">
      <summary>Gets a vector whose elements are equal to <see cref="P:System.Single.NegativeZero" />.</summary>
      <returns>A vector whose elements are equal to <see cref="P:System.Single.NegativeZero" /> (that is, it returns the vector <code data-dev-comment-type="c">Create(float.NegativeZero)</code>).</returns>
    </member>
    <member name="P:System.Numerics.Vector2.One">
      <summary>Gets a vector whose 2 elements are equal to one.</summary>
      <returns>A vector whose two elements are equal to one (that is, it returns the vector <code data-dev-comment-type="c">(1,1)</code>).</returns>
    </member>
    <member name="P:System.Numerics.Vector2.Pi">
      <summary>Gets a vector whose elements are equal to <see cref="P:System.Single.Pi" />.</summary>
      <returns>A vector whose elements are equal to <see cref="P:System.Single.Pi" /> (that is, it returns the vector <code data-dev-comment-type="c">Create(float.Pi)</code>).</returns>
    </member>
    <member name="P:System.Numerics.Vector2.PositiveInfinity">
      <summary>Gets a vector whose elements are equal to <see cref="P:System.Single.PositiveInfinity" />.</summary>
      <returns>A vector whose elements are equal to <see cref="P:System.Single.PositiveInfinity" /> (that is, it returns the vector <code data-dev-comment-type="c">Create(float.PositiveInfinity)</code>).</returns>
    </member>
    <member name="P:System.Numerics.Vector2.Tau">
      <summary>Gets a vector whose elements are equal to <see cref="P:System.Single.Tau" />.</summary>
      <returns>A vector whose elements are equal to <see cref="P:System.Single.Tau" /> (that is, it returns the vector <code data-dev-comment-type="c">Create(float.Tau)</code>).</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitX">
      <summary>Gets the vector (1,0).</summary>
      <returns>The vector <c>(1,0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitY">
      <summary>Gets the vector (0,1).</summary>
      <returns>The vector <c>(0,1)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.Zero">
      <summary>Returns a vector whose 2 elements are equal to zero.</summary>
      <returns>A vector whose two elements are equal to zero (that is, it returns the vector <code data-dev-comment-type="c">(0,0)</code>).</returns>
    </member>
    <member name="T:System.Numerics.Vector3">
      <summary>Represents a vector with three  single-precision floating-point values.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.X">
      <summary>The X component of the vector.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Y">
      <summary>The Y component of the vector.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Z">
      <summary>The Z component of the vector.</summary>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)">
      <summary>Creates a   new <see cref="T:System.Numerics.Vector3" /> object from the specified <see cref="T:System.Numerics.Vector2" /> object and the specified value.</summary>
      <param name="value">The vector with two elements.</param>
      <param name="z">The additional value to assign to the <see cref="F:System.Numerics.Vector3.Z" /> field.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.ReadOnlySpan{System.Single})">
      <summary>Constructs a vector from the given <see cref="T:System.ReadOnlySpan`1" />. The span must contain at least 3 elements.</summary>
      <param name="values">The span of elements to assign to the vector.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>Creates a vector whose elements have the specified values.</summary>
      <param name="x">The value to assign to the <see cref="F:System.Numerics.Vector3.X" /> field.</param>
      <param name="y">The value to assign to the <see cref="F:System.Numerics.Vector3.Y" /> field.</param>
      <param name="z">The value to assign to the <see cref="F:System.Numerics.Vector3.Z" /> field.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single)">
      <summary>Creates a new <see cref="T:System.Numerics.Vector3" /> object whose three elements have the same value.</summary>
      <param name="value">The value to assign to all three elements.</param>
    </member>
    <member name="M:System.Numerics.Vector3.Abs(System.Numerics.Vector3)">
      <summary>Returns a vector whose elements are the absolute values of each of the specified vector's elements.</summary>
      <param name="value">A vector.</param>
      <returns>The absolute value vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Adds two vectors together.</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The summed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.All(System.Numerics.Vector3,System.Single)">
      <param name="vector" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector3.AllWhereAllBitsSet(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.AndNot(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.Any(System.Numerics.Vector3,System.Single)">
      <param name="vector" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector3.AnyWhereAllBitsSet(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.BitwiseAnd(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.BitwiseOr(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Restricts a vector between a minimum and a maximum value.</summary>
      <param name="value1">The vector to restrict.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The restricted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ClampNative(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Restricts a vector between a minimum and a maximum value using platform specific behavior for <code data-dev-comment-type="c">NaN</code> and <code data-dev-comment-type="c">NegativeZero</code>..</summary>
      <param name="value1" />
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The restricted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ConditionalSelect(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="condition" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.CopySign(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Copies the per-element sign of a vector to the per-element sign of another vector.</summary>
      <param name="value">The vector whose magnitude is used in the result.</param>
      <param name="sign">The vector whose sign is used in the result.</param>
      <returns>A vector with the magnitude of <code data-dev-comment-type="paramref">value</code> and the sign of <code data-dev-comment-type="paramref">sign</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)">
      <summary>Copies the elements of the vector to a specified array starting at a specified index position.</summary>
      <param name="array">The destination array.</param>
      <param name="index">The index at which to copy the first element of the vector.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the current instance is greater than in the array.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.

 -or-

 <paramref name="index" /> is greater than or equal to the array length.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="array" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[])">
      <summary>Copies the elements of the vector to a specified array.</summary>
      <param name="array">The destination array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the current instance is greater than in the array.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="array" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Span{System.Single})">
      <summary>Copies the vector to the given <see cref="T:System.Span`1" />. The length of the destination span must be at least 3.</summary>
      <param name="destination">The destination span into which the values are copied.</param>
      <exception cref="T:System.ArgumentException">The number of elements in the source vector is greater than the number of elements available in the destination span.</exception>
    </member>
    <member name="M:System.Numerics.Vector3.Cos(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.Count(System.Numerics.Vector3,System.Single)">
      <param name="vector" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector3.CountWhereAllBitsSet(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.Create(System.Numerics.Vector2,System.Single)">
      <summary>Creates a new <see cref="T:System.Numerics.Vector3" /> object from the specified <see cref="T:System.Numerics.Vector2" /> object and a Z component.</summary>
      <param name="vector">The vector to use for the X and Y components.</param>
      <param name="z">The Z component.</param>
      <returns>A new <see cref="T:System.Numerics.Vector3" /> from the specified <see cref="T:System.Numerics.Vector2" /> object and a Z component.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Create(System.ReadOnlySpan{System.Single})">
      <summary>Constructs a vector from the given <see cref="T:System.ReadOnlySpan`1" />. The span must contain at least 3 elements.</summary>
      <param name="values">The span of elements to assign to the vector.</param>
      <returns>A new <see cref="T:System.Numerics.Vector3" /> whose elements have the specified values.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Create(System.Single,System.Single,System.Single)">
      <summary>Creates a vector whose elements have the specified values.</summary>
      <param name="x">The value to assign to the <see cref="F:System.Numerics.Vector3.X" /> field.</param>
      <param name="y">The value to assign to the <see cref="F:System.Numerics.Vector3.Y" /> field.</param>
      <param name="z">The value to assign to the <see cref="F:System.Numerics.Vector3.Z" /> field.</param>
      <returns>A new <see cref="T:System.Numerics.Vector3" /> whose elements have the specified values.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Create(System.Single)">
      <summary>Creates a new <see cref="T:System.Numerics.Vector3" /> object whose three elements have the same value.</summary>
      <param name="value">The value to assign to all three elements.</param>
      <returns>A new <see cref="T:System.Numerics.Vector3" /> whose three elements have the same value.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.CreateScalar(System.Single)">
      <param name="x" />
    </member>
    <member name="M:System.Numerics.Vector3.CreateScalarUnsafe(System.Single)">
      <param name="x" />
    </member>
    <member name="M:System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Computes the cross product of two vectors.</summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The cross product.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.DegreesToRadians(System.Numerics.Vector3)">
      <param name="degrees" />
    </member>
    <member name="M:System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Computes the Euclidean distance between the two given points.</summary>
      <param name="value1">The first point.</param>
      <param name="value2">The second point.</param>
      <returns>The distance.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Returns the Euclidean distance squared between two specified points.</summary>
      <param name="value1">The first point.</param>
      <param name="value2">The second point.</param>
      <returns>The distance squared.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Divides the first vector by the second.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <returns>The vector resulting from the division.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)">
      <summary>Divides the specified vector by a specified scalar value.</summary>
      <param name="left">The vector.</param>
      <param name="divisor">The scalar value.</param>
      <returns>The vector that results from the division.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Returns the dot product of two vectors.</summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The dot product.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Numerics.Vector3)">
      <summary>Returns a value that indicates whether this instance and another vector are equal.</summary>
      <param name="other">The other vector.</param>
      <returns>
        <see langword="true" /> if the two vectors are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if the current instance and <paramref name="obj" /> are equal; otherwise, <see langword="false" />. If <paramref name="obj" /> is <see langword="null" />, the method returns <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.EqualsAll(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.EqualsAny(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.Exp(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.FusedMultiplyAdd(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
      <param name="addend" />
    </member>
    <member name="M:System.Numerics.Vector3.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.GreaterThan(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.GreaterThanAll(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.GreaterThanAny(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.GreaterThanOrEqual(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.GreaterThanOrEqualAll(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.GreaterThanOrEqualAny(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.Hypot(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="x" />
      <param name="y" />
    </member>
    <member name="M:System.Numerics.Vector3.IndexOf(System.Numerics.Vector3,System.Single)">
      <param name="vector" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector3.IndexOfWhereAllBitsSet(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.IsEvenInteger(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.IsFinite(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.IsInfinity(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.IsInteger(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.IsNaN(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.IsNegative(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.IsNegativeInfinity(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.IsNormal(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.IsOddInteger(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.IsPositive(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.IsPositiveInfinity(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.IsSubnormal(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.IsZero(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.LastIndexOf(System.Numerics.Vector3,System.Single)">
      <param name="vector" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector3.LastIndexOfWhereAllBitsSet(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.Length">
      <summary>Returns the length of this vector object.</summary>
      <returns>The vector's length.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.LengthSquared">
      <summary>Returns the length of the vector squared.</summary>
      <returns>The vector's length squared.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="value1" />
      <param name="value2" />
      <param name="amount" />
    </member>
    <member name="M:System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
      <summary>Performs a linear interpolation between two vectors based on the given weighting.</summary>
      <param name="value1">The first vector.</param>
      <param name="value2">The second vector.</param>
      <param name="amount">A value between 0 and 1 that indicates the weight of <code data-dev-comment-type="paramref">value2</code>.</param>
      <returns>The interpolated vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.LessThan(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.LessThanAll(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.LessThanAny(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.LessThanOrEqual(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.LessThanOrEqualAll(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.LessThanOrEqualAny(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.Load(System.Single*)">
      <param name="source" />
    </member>
    <member name="M:System.Numerics.Vector3.LoadAligned(System.Single*)">
      <param name="source" />
    </member>
    <member name="M:System.Numerics.Vector3.LoadAlignedNonTemporal(System.Single*)">
      <param name="source" />
    </member>
    <member name="M:System.Numerics.Vector3.LoadUnsafe(System.Single@,System.UIntPtr)">
      <param name="source" />
      <param name="elementOffset" />
    </member>
    <member name="M:System.Numerics.Vector3.LoadUnsafe(System.Single@)">
      <param name="source" />
    </member>
    <member name="M:System.Numerics.Vector3.Log(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.Log2(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors.</summary>
      <param name="value1">The first vector.</param>
      <param name="value2">The second vector.</param>
      <returns>The maximized vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.MaxMagnitude(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Compares two vectors to compute which has the greater magnitude on a per-element basis.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a greater magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.MaxMagnitudeNumber(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Compares two vectors, on a per-element basis, to compute which has the greater magnitude and returning the other value if an input is <code data-dev-comment-type="c">NaN</code>.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a greater magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.MaxNative(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Compare two vectors to determine which is greater on a per-element basis using platform specific behavior for <code data-dev-comment-type="c">NaN</code> and <code data-dev-comment-type="c">NegativeZero</code>.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is greater than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.MaxNumber(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Compares two vectors, on a per-element basis, to compute which is greater and returning the other value if an element is <code data-dev-comment-type="c">NaN</code>.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is greater than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors.</summary>
      <param name="value1">The first vector.</param>
      <param name="value2">The second vector.</param>
      <returns>The minimized vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.MinMagnitude(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Compares two vectors to compute which has the lesser magnitude on a per-element basis.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a lesser magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.MinMagnitudeNumber(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Compares two vectors, on a per-element basis, to compute which has the lesser magnitude and returning the other value if an input is <code data-dev-comment-type="c">NaN</code>.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a lesser magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.MinNative(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Compare two vectors to determine which is lesser on a per-element basis using platform specific behavior for <code data-dev-comment-type="c">NaN</code> and <code data-dev-comment-type="c">NegativeZero</code>.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is lesser than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.MinNumber(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Compares two vectors, on a per-element basis, to compute which is lesser and returning the other value if an element is <code data-dev-comment-type="c">NaN</code>.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is lesser than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Returns a new vector whose values are the product of each pair of elements in two specified vectors.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <returns>The element-wise product vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)">
      <summary>Multiplies a vector by a specified scalar.</summary>
      <param name="left">The vector to multiply.</param>
      <param name="right">The scalar value.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)">
      <summary>Multiplies a scalar value by a specified vector.</summary>
      <param name="left">The scaled value.</param>
      <param name="right">The vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.MultiplyAddEstimate(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
      <param name="addend" />
    </member>
    <member name="M:System.Numerics.Vector3.Negate(System.Numerics.Vector3)">
      <summary>Negates a specified vector.</summary>
      <param name="value">The vector to negate.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.None(System.Numerics.Vector3,System.Single)">
      <param name="vector" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector3.NoneWhereAllBitsSet(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.Normalize(System.Numerics.Vector3)">
      <summary>Returns a vector with the same direction as the specified vector, but with a length of one.</summary>
      <param name="value">The vector to normalize.</param>
      <returns>The normalized vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.OnesComplement(System.Numerics.Vector3)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Adds two vectors together.</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The summed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_BitwiseAnd(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.op_BitwiseOr(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Divides the first vector by the second.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <returns>The vector that results from dividing <paramref name="left" /> by <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)">
      <summary>Divides the specified vector by a specified scalar value.</summary>
      <param name="value1">The vector.</param>
      <param name="value2">The scalar value.</param>
      <returns>The result of the division.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Returns a value that indicates whether each pair of elements in two specified vectors is equal.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_ExclusiveOr(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Returns a value that indicates whether two specified vectors are not equal.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_LeftShift(System.Numerics.Vector3,System.Int32)">
      <param name="value" />
      <param name="shiftAmount" />
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Returns a new vector whose values are the product of each pair of elements in two specified vectors.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <returns>The element-wise product vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)">
      <summary>Multiples the specified vector by the specified scalar value.</summary>
      <param name="left">The vector.</param>
      <param name="right">The scalar value.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)">
      <summary>Multiples the scalar value by the specified vector.</summary>
      <param name="left">The vector.</param>
      <param name="right">The scalar value.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_OnesComplement(System.Numerics.Vector3)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector3.op_RightShift(System.Numerics.Vector3,System.Int32)">
      <param name="value" />
      <param name="shiftAmount" />
    </member>
    <member name="M:System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Subtracts the second vector from the first.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <returns>The vector that results from subtracting <paramref name="right" /> from <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)">
      <summary>Negates the specified vector.</summary>
      <param name="value">The vector to negate.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_UnaryPlus(System.Numerics.Vector3)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector3.op_UnsignedRightShift(System.Numerics.Vector3,System.Int32)">
      <param name="value" />
      <param name="shiftAmount" />
    </member>
    <member name="M:System.Numerics.Vector3.RadiansToDegrees(System.Numerics.Vector3)">
      <param name="radians" />
    </member>
    <member name="M:System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Returns the reflection of a vector off a surface that has the specified normal.</summary>
      <param name="vector">The source vector.</param>
      <param name="normal">The normal of the surface being reflected off.</param>
      <returns>The reflected vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Round(System.Numerics.Vector3,System.MidpointRounding)">
      <param name="vector" />
      <param name="mode" />
    </member>
    <member name="M:System.Numerics.Vector3.Round(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.Shuffle(System.Numerics.Vector3,System.Byte,System.Byte,System.Byte)">
      <param name="vector" />
      <param name="xIndex" />
      <param name="yIndex" />
      <param name="zIndex" />
    </member>
    <member name="M:System.Numerics.Vector3.Sin(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.SinCos(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)">
      <summary>Returns a vector whose elements are the square root of each of a specified vector's elements.</summary>
      <param name="value">A vector.</param>
      <returns>The square root vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Subtracts the second vector from the first.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <returns>The difference vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Sum(System.Numerics.Vector3)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector3.ToString">
      <summary>Returns the string representation of the current instance using default formatting.</summary>
      <returns>The string representation of the current instance.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)">
      <summary>Returns the string representation of the current instance using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.</summary>
      <param name="format">A standard or custom numeric format string that defines the format of individual elements.</param>
      <param name="formatProvider">A format provider that supplies culture-specific formatting information.</param>
      <returns>The string representation of the current instance.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String)">
      <summary>Returns the string representation of the current instance using the specified format string to format individual elements.</summary>
      <param name="format">A standard or custom numeric format string that defines the format of individual elements.</param>
      <returns>The string representation of the current instance.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Transforms a vector by a specified 4x4 matrix.</summary>
      <param name="position">The vector to transform.</param>
      <param name="matrix">The transformation matrix.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary>Transforms a vector by the specified Quaternion rotation value.</summary>
      <param name="value">The vector to rotate.</param>
      <param name="rotation">The rotation to apply.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Transforms a vector normal by the given 4x4 matrix.</summary>
      <param name="normal">The source vector.</param>
      <param name="matrix">The matrix.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Truncate(System.Numerics.Vector3)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector3.TryCopyTo(System.Span{System.Single})">
      <summary>Attempts to copy the vector to the given <see cref="T:System.Span`1" />. The length of the destination span must be at least 3.</summary>
      <param name="destination">The destination span into which the values are copied.</param>
      <returns>
        <see langword="true" /> if the source vector was successfully copied to <paramref name="destination" />. <see langword="false" /> if <paramref name="destination" /> is not large enough to hold the source vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Xor(System.Numerics.Vector3,System.Numerics.Vector3)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="P:System.Numerics.Vector3.AllBitsSet" />
    <member name="P:System.Numerics.Vector3.E">
      <summary>Gets a vector whose elements are equal to <xref data-throw-if-not-resolved="true" uid="System.Single.E" />.</summary>
      <returns>A vector whose elements are equal to <see cref="P:System.Single.E" /> (that is, it returns the vector <code data-dev-comment-type="c">Create(float.E)</code>).</returns>
    </member>
    <member name="P:System.Numerics.Vector3.Epsilon">
      <summary>Gets a vector whose elements are equal to <xref data-throw-if-not-resolved="true" uid="System.Single.Epsilon" />.</summary>
      <returns>A vector whose elements are equal to <see cref="P:System.Single.Epsilon" /> (that is, it returns the vector <code data-dev-comment-type="c">Create(float.Epsilon)</code>).</returns>
    </member>
    <member name="P:System.Numerics.Vector3.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> was less than zero or greater than the number of elements.</exception>
      <returns>The the element at <paramref name="index" />.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.NaN">
      <summary>Gets a vector whose elements are equal to <xref data-throw-if-not-resolved="true" uid="System.Single.NaN" />.</summary>
      <returns>A vector whose elements are equal to <see cref="P:System.Single.NaN" /> (that is, it returns the vector <code data-dev-comment-type="c">Create(float.NaN)</code>).</returns>
    </member>
    <member name="P:System.Numerics.Vector3.NegativeInfinity">
      <summary>Gets a vector whose elements are equal to <xref data-throw-if-not-resolved="true" uid="System.Single.NegativeInfinity" />.</summary>
      <returns>A vector whose elements are equal to <see cref="P:System.Single.NegativeInfinity" /> (that is, it returns the vector <code data-dev-comment-type="c">Create(float.NegativeInfinity)</code>).</returns>
    </member>
    <member name="P:System.Numerics.Vector3.NegativeZero">
      <summary>Gets a vector whose elements are equal to <xref data-throw-if-not-resolved="true" uid="System.Single.NegativeZero" />.</summary>
      <returns>A vector whose elements are equal to <see cref="P:System.Single.NegativeZero" /> (that is, it returns the vector <code data-dev-comment-type="c">Create(float.NegativeZero)</code>).</returns>
    </member>
    <member name="P:System.Numerics.Vector3.One">
      <summary>Gets a vector whose 3 elements are equal to one.</summary>
      <returns>A vector whose three elements are equal to one (that is, it returns the vector <code data-dev-comment-type="c">(1,1,1)</code>).</returns>
    </member>
    <member name="P:System.Numerics.Vector3.Pi">
      <summary>Gets a vector whose elements are equal to <xref data-throw-if-not-resolved="true" uid="System.Single.Pi" />.</summary>
      <returns>A vector whose elements are equal to <see cref="P:System.Single.Pi" /> (that is, it returns the vector <code data-dev-comment-type="c">Create(float.Pi)</code>).</returns>
    </member>
    <member name="P:System.Numerics.Vector3.PositiveInfinity">
      <summary>Gets a vector whose elements are equal to <xref data-throw-if-not-resolved="true" uid="System.Single.PositiveInfinity" />.</summary>
      <returns>A vector whose elements are equal to <see cref="P:System.Single.PositiveInfinity" /> (that is, it returns the vector <code data-dev-comment-type="c">Create(float.PositiveInfinity)</code>).</returns>
    </member>
    <member name="P:System.Numerics.Vector3.Tau">
      <summary>Gets a vector whose elements are equal to <xref data-throw-if-not-resolved="true" uid="System.Single.Tau" />.</summary>
      <returns>A vector whose elements are equal to <see cref="P:System.Single.Tau" /> (that is, it returns the vector <code data-dev-comment-type="c">Create(float.Tau)</code>).</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitX">
      <summary>Gets the vector (1,0,0).</summary>
      <returns>The vector <c>(1,0,0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitY">
      <summary>Gets the vector (0,1,0).</summary>
      <returns>The vector <c>(0,1,0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitZ">
      <summary>Gets the vector (0,0,1).</summary>
      <returns>The vector <c>(0,0,1)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.Zero">
      <summary>Gets a vector whose 3 elements are equal to zero.</summary>
      <returns>A vector whose three elements are equal to zero (that is, it returns the vector <code data-dev-comment-type="c">(0,0,0)</code>).</returns>
    </member>
    <member name="T:System.Numerics.Vector4">
      <summary>Represents a vector with four single-precision floating-point values.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.W">
      <summary>The W component of the vector.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.X">
      <summary>The X component of the vector.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Y">
      <summary>The Y component of the vector.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Z">
      <summary>The Z component of the vector.</summary>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector2,System.Single,System.Single)">
      <summary>Creates a   new <see cref="T:System.Numerics.Vector4" /> object from the specified <see cref="T:System.Numerics.Vector2" /> object and a Z and a W component.</summary>
      <param name="value">The vector to use for the X and Y components.</param>
      <param name="z">The Z component.</param>
      <param name="w">The W component.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Constructs a new <see cref="T:System.Numerics.Vector4" /> object from the specified <see cref="T:System.Numerics.Vector3" /> object and a W component.</summary>
      <param name="value">The vector to use for the X, Y, and Z components.</param>
      <param name="w">The W component.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.ReadOnlySpan{System.Single})">
      <summary>Constructs a vector from the given <see cref="T:System.ReadOnlySpan`1" />. The span must contain at least 4 elements.</summary>
      <param name="values">The span of elements to assign to the vector.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a vector whose elements have the specified values.</summary>
      <param name="x">The value to assign to the <see cref="F:System.Numerics.Vector4.X" /> field.</param>
      <param name="y">The value to assign to the <see cref="F:System.Numerics.Vector4.Y" /> field.</param>
      <param name="z">The value to assign to the <see cref="F:System.Numerics.Vector4.Z" /> field.</param>
      <param name="w">The value to assign to the <see cref="F:System.Numerics.Vector4.W" /> field.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single)">
      <summary>Creates a new <see cref="T:System.Numerics.Vector4" /> object whose four elements have the same value.</summary>
      <param name="value">The value to assign to all four elements.</param>
    </member>
    <member name="M:System.Numerics.Vector4.Abs(System.Numerics.Vector4)">
      <summary>Returns a vector whose elements are the absolute values of each of the specified vector's elements.</summary>
      <param name="value">A vector.</param>
      <returns>The absolute value vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Add(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Adds two vectors together.</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The summed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.All(System.Numerics.Vector4,System.Single)">
      <param name="vector" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector4.AllWhereAllBitsSet(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.AndNot(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.Any(System.Numerics.Vector4,System.Single)">
      <param name="vector" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector4.AnyWhereAllBitsSet(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.BitwiseAnd(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.BitwiseOr(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.Clamp(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Restricts a vector between a minimum and a maximum value.</summary>
      <param name="value1">The vector to restrict.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The restricted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ClampNative(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Restricts a vector between a minimum and a maximum value using platform specific behavior for <code data-dev-comment-type="c">NaN</code> and <code data-dev-comment-type="c">NegativeZero</code>..</summary>
      <param name="value1" />
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The restricted vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ConditionalSelect(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="condition" />
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.CopySign(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Copies the per-element sign of a vector to the per-element sign of another vector.</summary>
      <param name="value">The vector whose magnitude is used in the result.</param>
      <param name="sign">The vector whose sign is used in the result.</param>
      <returns>A vector with the magnitude of <code data-dev-comment-type="paramref">value</code> and the sign of <code data-dev-comment-type="paramref">sign</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[],System.Int32)">
      <summary>Copies the elements of the vector to a specified array starting at a specified index position.</summary>
      <param name="array">The destination array.</param>
      <param name="index">The index at which to copy the first element of the vector.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the current instance is greater than in the array.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.  
  
 -or-  
  
 <paramref name="index" /> is greater than or equal to the array length.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="array" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[])">
      <summary>Copies the elements of the vector to a specified array.</summary>
      <param name="array">The destination array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the current instance is greater than in the array.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> is multidimensional.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="array" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Span{System.Single})">
      <summary>Copies the vector to the given <see cref="T:System.Span`1" />. The length of the destination span must be at least 4.</summary>
      <param name="destination">The destination span which the values are copied into.</param>
      <exception cref="T:System.ArgumentException">The number of elements in the source vector is greater than the number of elements available in the destination span.</exception>
    </member>
    <member name="M:System.Numerics.Vector4.Cos(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.Count(System.Numerics.Vector4,System.Single)">
      <param name="vector" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector4.CountWhereAllBitsSet(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.Create(System.Numerics.Vector2,System.Single,System.Single)">
      <summary>Creates a new <see cref="T:System.Numerics.Vector4" /> object from the specified <see cref="T:System.Numerics.Vector2" /> object and a Z and a W component.</summary>
      <param name="vector">The vector to use for the X and Y components.</param>
      <param name="z">The Z component.</param>
      <param name="w">The W component.</param>
      <returns>A new <see cref="T:System.Numerics.Vector4" /> from the specified <see cref="T:System.Numerics.Vector2" /> object and a Z and a W component.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Create(System.Numerics.Vector3,System.Single)">
      <summary>Constructs a new <see cref="T:System.Numerics.Vector4" /> object from the specified <see cref="T:System.Numerics.Vector3" /> object and a W component.</summary>
      <param name="vector">The vector to use for the X, Y, and Z components.</param>
      <param name="w">The W component.</param>
      <returns>A new <see cref="T:System.Numerics.Vector4" /> from the specified <see cref="T:System.Numerics.Vector3" /> object and a W component.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Create(System.ReadOnlySpan{System.Single})">
      <summary>Constructs a vector from the given <see cref="T:System.ReadOnlySpan`1" />. The span must contain at least 4 elements.</summary>
      <param name="values">The span of elements to assign to the vector.</param>
      <returns>A new <see cref="T:System.Numerics.Vector4" /> whose elements have the specified values.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Create(System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a vector whose elements have the specified values.</summary>
      <param name="x">The value to assign to the <see cref="F:System.Numerics.Vector4.X" /> field.</param>
      <param name="y">The value to assign to the <see cref="F:System.Numerics.Vector4.Y" /> field.</param>
      <param name="z">The value to assign to the <see cref="F:System.Numerics.Vector4.Z" /> field.</param>
      <param name="w">The value to assign to the <see cref="F:System.Numerics.Vector4.W" /> field.</param>
      <returns>A new <see cref="T:System.Numerics.Vector4" /> whose elements have the specified values.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Create(System.Single)">
      <summary>Creates a new <see cref="T:System.Numerics.Vector4" /> object whose four elements have the same value.</summary>
      <param name="value">The value to assign to all four elements.</param>
      <returns>A new <see cref="T:System.Numerics.Vector4" /> whose four elements have the same value.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.CreateScalar(System.Single)">
      <param name="x" />
    </member>
    <member name="M:System.Numerics.Vector4.CreateScalarUnsafe(System.Single)">
      <param name="x" />
    </member>
    <member name="M:System.Numerics.Vector4.Cross(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="vector1" />
      <param name="vector2" />
    </member>
    <member name="M:System.Numerics.Vector4.DegreesToRadians(System.Numerics.Vector4)">
      <param name="degrees" />
    </member>
    <member name="M:System.Numerics.Vector4.Distance(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Computes the Euclidean distance between the two given points.</summary>
      <param name="value1">The first point.</param>
      <param name="value2">The second point.</param>
      <returns>The distance.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.DistanceSquared(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Returns the Euclidean distance squared between two specified points.</summary>
      <param name="value1">The first point.</param>
      <param name="value2">The second point.</param>
      <returns>The distance squared.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Divides the first vector by the second.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <returns>The vector resulting from the division.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Single)">
      <summary>Divides the specified vector by a specified scalar value.</summary>
      <param name="left">The vector.</param>
      <param name="divisor">The scalar value.</param>
      <returns>The vector that results from the division.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Dot(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Returns the dot product of two vectors.</summary>
      <param name="vector1">The first vector.</param>
      <param name="vector2">The second vector.</param>
      <returns>The dot product.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Numerics.Vector4)">
      <summary>Returns a value that indicates whether this instance and another vector are equal.</summary>
      <param name="other">The other vector.</param>
      <returns>
        <see langword="true" /> if the two vectors are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Object)">
      <summary>Returns a value that indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <returns>
        <see langword="true" /> if the current instance and <paramref name="obj" /> are equal; otherwise, <see langword="false" />. If <paramref name="obj" /> is <see langword="null" />, the method returns <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.EqualsAll(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.EqualsAny(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.Exp(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.FusedMultiplyAdd(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
      <param name="addend" />
    </member>
    <member name="M:System.Numerics.Vector4.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.GreaterThan(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.GreaterThanAll(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.GreaterThanAny(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.GreaterThanOrEqual(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.GreaterThanOrEqualAll(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.GreaterThanOrEqualAny(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.Hypot(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="x" />
      <param name="y" />
    </member>
    <member name="M:System.Numerics.Vector4.IndexOf(System.Numerics.Vector4,System.Single)">
      <param name="vector" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector4.IndexOfWhereAllBitsSet(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.IsEvenInteger(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.IsFinite(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.IsInfinity(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.IsInteger(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.IsNaN(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.IsNegative(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.IsNegativeInfinity(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.IsNormal(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.IsOddInteger(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.IsPositive(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.IsPositiveInfinity(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.IsSubnormal(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.IsZero(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.LastIndexOf(System.Numerics.Vector4,System.Single)">
      <param name="vector" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector4.LastIndexOfWhereAllBitsSet(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.Length">
      <summary>Returns the length of this vector object.</summary>
      <returns>The vector's length.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.LengthSquared">
      <summary>Returns the length of the vector squared.</summary>
      <returns>The vector's length squared.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Lerp(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="value1" />
      <param name="value2" />
      <param name="amount" />
    </member>
    <member name="M:System.Numerics.Vector4.Lerp(System.Numerics.Vector4,System.Numerics.Vector4,System.Single)">
      <summary>Performs a linear interpolation between two vectors based on the given weighting.</summary>
      <param name="value1">The first vector.</param>
      <param name="value2">The second vector.</param>
      <param name="amount">A value between 0 and 1 that indicates the weight of <code data-dev-comment-type="paramref">value2</code>.</param>
      <returns>The interpolated vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.LessThan(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.LessThanAll(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.LessThanAny(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.LessThanOrEqual(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.LessThanOrEqualAll(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.LessThanOrEqualAny(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.Load(System.Single*)">
      <param name="source" />
    </member>
    <member name="M:System.Numerics.Vector4.LoadAligned(System.Single*)">
      <param name="source" />
    </member>
    <member name="M:System.Numerics.Vector4.LoadAlignedNonTemporal(System.Single*)">
      <param name="source" />
    </member>
    <member name="M:System.Numerics.Vector4.LoadUnsafe(System.Single@,System.UIntPtr)">
      <param name="source" />
      <param name="elementOffset" />
    </member>
    <member name="M:System.Numerics.Vector4.LoadUnsafe(System.Single@)">
      <param name="source" />
    </member>
    <member name="M:System.Numerics.Vector4.Log(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.Log2(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.Max(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Returns a vector whose elements are the maximum of each of the pairs of elements in two specified vectors.</summary>
      <param name="value1">The first vector.</param>
      <param name="value2">The second vector.</param>
      <returns>The maximized vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.MaxMagnitude(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Compares two vectors to compute which has the greater magnitude on a per-element basis.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a greater magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.MaxMagnitudeNumber(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Compares two vectors, on a per-element basis, to compute which has the greater magnitude and returning the other value if an input is <code data-dev-comment-type="c">NaN</code>.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a greater magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.MaxNative(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Compare two vectors to determine which is greater on a per-element basis using platform specific behavior for <code data-dev-comment-type="c">NaN</code> and <code data-dev-comment-type="c">NegativeZero</code>.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is greater than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.MaxNumber(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Compares two vectors, on a per-element basis, to compute which is greater and returning the other value if an element is <code data-dev-comment-type="c">NaN</code>.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is greater than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Min(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Returns a vector whose elements are the minimum of each of the pairs of elements in two specified vectors.</summary>
      <param name="value1">The first vector.</param>
      <param name="value2">The second vector.</param>
      <returns>The minimized vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.MinMagnitude(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Compares two vectors to compute which has the lesser magnitude on a per-element basis.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a lesser magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.MinMagnitudeNumber(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Compares two vectors, on a per-element basis, to compute which has the lesser magnitude and returning the other value if an input is <code data-dev-comment-type="c">NaN</code>.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it has a lesser magnitude than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.MinNative(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Compare two vectors to determine which is lesser on a per-element basis using platform specific behavior for <code data-dev-comment-type="c">NaN</code> and <code data-dev-comment-type="c">NegativeZero</code>.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is lesser than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.MinNumber(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Compares two vectors, on a per-element basis, to compute which is lesser and returning the other value if an element is <code data-dev-comment-type="c">NaN</code>.</summary>
      <param name="value1" />
      <param name="value2" />
      <returns>A vector where the corresponding element comes from <code data-dev-comment-type="paramref">left</code> if it is lesser than <code data-dev-comment-type="paramref">right</code>; otherwise, <code data-dev-comment-type="paramref">right</code>.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Returns a new vector whose values are the product of each pair of elements in two specified vectors.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <returns>The element-wise product vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Single)">
      <summary>Multiplies a vector by a specified scalar.</summary>
      <param name="left">The vector to multiply.</param>
      <param name="right">The scalar value.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Single,System.Numerics.Vector4)">
      <summary>Multiplies a scalar value by a specified vector.</summary>
      <param name="left">The scaled value.</param>
      <param name="right">The vector.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.MultiplyAddEstimate(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
      <param name="addend" />
    </member>
    <member name="M:System.Numerics.Vector4.Negate(System.Numerics.Vector4)">
      <summary>Negates a specified vector.</summary>
      <param name="value">The vector to negate.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.None(System.Numerics.Vector4,System.Single)">
      <param name="vector" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector4.NoneWhereAllBitsSet(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.Normalize(System.Numerics.Vector4)">
      <summary>Returns a vector with the same direction as the specified vector, but with a length of one.</summary>
      <param name="vector">The vector to normalize.</param>
      <returns>The normalized vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.OnesComplement(System.Numerics.Vector4)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector4.op_Addition(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Adds two vectors together.</summary>
      <param name="left">The first vector to add.</param>
      <param name="right">The second vector to add.</param>
      <returns>The summed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_BitwiseAnd(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.op_BitwiseOr(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Divides the first vector by the second.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <returns>The vector that results from dividing <paramref name="left" /> by <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Single)">
      <summary>Divides the specified vector by a specified scalar value.</summary>
      <param name="value1">The vector.</param>
      <param name="value2">The scalar value.</param>
      <returns>The result of the division.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Equality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Returns a value that indicates whether each pair of elements in two specified vectors is equal.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_ExclusiveOr(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Numerics.Vector4.op_Inequality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Returns a value that indicates whether two specified vectors are not equal.</summary>
      <param name="left">The first vector to compare.</param>
      <param name="right">The second vector to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_LeftShift(System.Numerics.Vector4,System.Int32)">
      <param name="value" />
      <param name="shiftAmount" />
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Returns a new vector whose values are the product of each pair of elements in two specified vectors.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <returns>The element-wise product vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Single)">
      <summary>Multiples the specified vector by the specified scalar value.</summary>
      <param name="left">The vector.</param>
      <param name="right">The scalar value.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Single,System.Numerics.Vector4)">
      <summary>Multiples the scalar value by the specified vector.</summary>
      <param name="left">The vector.</param>
      <param name="right">The scalar value.</param>
      <returns>The scaled vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_OnesComplement(System.Numerics.Vector4)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector4.op_RightShift(System.Numerics.Vector4,System.Int32)">
      <param name="value" />
      <param name="shiftAmount" />
    </member>
    <member name="M:System.Numerics.Vector4.op_Subtraction(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Subtracts the second vector from the first.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <returns>The vector that results from subtracting <paramref name="right" /> from <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_UnaryNegation(System.Numerics.Vector4)">
      <summary>Negates the specified vector.</summary>
      <param name="value">The vector to negate.</param>
      <returns>The negated vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_UnaryPlus(System.Numerics.Vector4)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector4.op_UnsignedRightShift(System.Numerics.Vector4,System.Int32)">
      <param name="value" />
      <param name="shiftAmount" />
    </member>
    <member name="M:System.Numerics.Vector4.RadiansToDegrees(System.Numerics.Vector4)">
      <param name="radians" />
    </member>
    <member name="M:System.Numerics.Vector4.Round(System.Numerics.Vector4,System.MidpointRounding)">
      <param name="vector" />
      <param name="mode" />
    </member>
    <member name="M:System.Numerics.Vector4.Round(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.Shuffle(System.Numerics.Vector4,System.Byte,System.Byte,System.Byte,System.Byte)">
      <param name="vector" />
      <param name="xIndex" />
      <param name="yIndex" />
      <param name="zIndex" />
      <param name="wIndex" />
    </member>
    <member name="M:System.Numerics.Vector4.Sin(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.SinCos(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.SquareRoot(System.Numerics.Vector4)">
      <summary>Returns a vector whose elements are the square root of each of a specified vector's elements.</summary>
      <param name="value">A vector.</param>
      <returns>The square root vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Subtract(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Subtracts the second vector from the first.</summary>
      <param name="left">The first vector.</param>
      <param name="right">The second vector.</param>
      <returns>The difference vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Sum(System.Numerics.Vector4)">
      <param name="value" />
    </member>
    <member name="M:System.Numerics.Vector4.ToString">
      <summary>Returns the string representation of the current instance using default formatting.</summary>
      <returns>The string representation of the current instance.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String,System.IFormatProvider)">
      <summary>Returns the string representation of the current instance using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.</summary>
      <param name="format">A standard or custom numeric format string that defines the format of individual elements.</param>
      <param name="formatProvider">A format provider that supplies culture-specific formatting information.</param>
      <returns>The string representation of the current instance.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String)">
      <summary>Returns the string representation of the current instance using the specified format string to format individual elements.</summary>
      <param name="format">A standard or custom numeric format string that defines the format of individual elements.</param>
      <returns>The string representation of the current instance.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Transforms a two-dimensional vector by a specified 4x4 matrix.</summary>
      <param name="position">The vector to transform.</param>
      <param name="matrix">The transformation matrix.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary>Transforms a two-dimensional vector by the specified Quaternion rotation value.</summary>
      <param name="value">The vector to rotate.</param>
      <param name="rotation">The rotation to apply.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Transforms a three-dimensional vector by a specified 4x4 matrix.</summary>
      <param name="position">The vector to transform.</param>
      <param name="matrix">The transformation matrix.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary>Transforms a three-dimensional vector by the specified Quaternion rotation value.</summary>
      <param name="value">The vector to rotate.</param>
      <param name="rotation">The rotation to apply.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Matrix4x4)">
      <summary>Transforms a four-dimensional vector by a specified 4x4 matrix.</summary>
      <param name="vector">The vector to transform.</param>
      <param name="matrix">The transformation matrix.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Quaternion)">
      <summary>Transforms a four-dimensional vector by the specified Quaternion rotation value.</summary>
      <param name="value">The vector to rotate.</param>
      <param name="rotation">The rotation to apply.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Truncate(System.Numerics.Vector4)">
      <param name="vector" />
    </member>
    <member name="M:System.Numerics.Vector4.TryCopyTo(System.Span{System.Single})">
      <summary>Attempts to copy the vector to the given <see cref="T:System.Span`1" />. The length of the destination span must be at least 4.</summary>
      <param name="destination">The destination span which the values are copied into.</param>
      <returns>
        <see langword="true" /> if the source vector was successfully copied to <paramref name="destination" />. <see langword="false" /> if <paramref name="destination" /> is not large enough to hold the source vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Xor(System.Numerics.Vector4,System.Numerics.Vector4)">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="P:System.Numerics.Vector4.AllBitsSet" />
    <member name="P:System.Numerics.Vector4.E">
      <summary>Gets a vector whose elements are equal to <see cref="F:System.Single.E" />.</summary>
      <returns>A vector whose elements are equal to <see cref="F:System.Single.E" /> (that is, it returns the vector <c>Create(float.E)</c>).</returns>
    </member>
    <member name="P:System.Numerics.Vector4.Epsilon">
      <summary>Gets a vector whose elements are equal to <see cref="F:System.Single.Epsilon" />.</summary>
      <returns>A vector whose elements are equal to <see cref="F:System.Single.Epsilon" /> (that is, it returns the vector <c>Create(float.Epsilon)</c>).</returns>
    </member>
    <member name="P:System.Numerics.Vector4.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> was less than zero or greater than the number of elements.</exception>
      <returns>The the element at <paramref name="index" />.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.NaN">
      <summary>Gets a vector whose elements are equal to <see cref="F:System.Single.NaN" />.</summary>
      <returns>A vector whose elements are equal to <see cref="F:System.Single.NaN" /> (that is, it returns the vector <c>Create(float.NaN)</c>).</returns>
    </member>
    <member name="P:System.Numerics.Vector4.NegativeInfinity">
      <summary>Gets a vector whose elements are equal to <see cref="F:System.Single.NegativeInfinity" />.</summary>
      <returns>A vector whose elements are equal to <see cref="F:System.Single.NegativeInfinity" /> (that is, it returns the vector <c>Create(float.NegativeInfinity)</c>).</returns>
    </member>
    <member name="P:System.Numerics.Vector4.NegativeZero">
      <summary>Gets a vector whose elements are equal to <see cref="F:System.Single.NegativeZero" />.</summary>
      <returns>A vector whose elements are equal to <see cref="F:System.Single.NegativeZero" /> (that is, it returns the vector <c>Create(float.NegativeZero)</c>).</returns>
    </member>
    <member name="P:System.Numerics.Vector4.One">
      <summary>Gets a vector whose 4 elements are equal to one.</summary>
      <returns>Returns <see cref="T:System.Numerics.Vector4" />.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.Pi">
      <summary>Gets a vector whose elements are equal to <see cref="F:System.Single.Pi" />.</summary>
      <returns>A vector whose elements are equal to <see cref="F:System.Single.Pi" /> (that is, it returns the vector <c>Create(float.Pi)</c>).</returns>
    </member>
    <member name="P:System.Numerics.Vector4.PositiveInfinity">
      <summary>Gets a vector whose elements are equal to <see cref="F:System.Single.PositiveInfinity" />.</summary>
      <returns>A vector whose elements are equal to <see cref="F:System.Single.PositiveInfinity" /> (that is, it returns the vector <c>Create(float.PositiveInfinity)</c>).</returns>
    </member>
    <member name="P:System.Numerics.Vector4.Tau">
      <summary>Gets a vector whose elements are equal to <see cref="F:System.Single.Tau" />.</summary>
      <returns>A vector whose elements are equal to <see cref="F:System.Single.Tau" /> (that is, it returns the vector <c>Create(float.Tau)</c>).</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitW">
      <summary>Gets the vector (0,0,0,1).</summary>
      <returns>The vector <c>(0,0,0,1)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitX">
      <summary>Gets the vector (1,0,0,0).</summary>
      <returns>The vector <c>(1,0,0,0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitY">
      <summary>Gets the vector (0,1,0,0).</summary>
      <returns>The vector <c>(0,1,0,0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitZ">
      <summary>Gets the vector (0,0,1,0).</summary>
      <returns>The vector <c>(0,0,1,0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.Zero">
      <summary>Gets a vector whose 4 elements are equal to zero.</summary>
      <returns>A vector whose four elements are equal to zero (that is, it returns the vector <c>(0,0,0,0)</c>).</returns>
    </member>
  </members>
</doc>