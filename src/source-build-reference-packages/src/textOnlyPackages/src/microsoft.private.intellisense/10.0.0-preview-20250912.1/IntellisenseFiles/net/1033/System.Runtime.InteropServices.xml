<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.InteropServices</name>
  </assembly>
  <members>
    <member name="T:System.DataMisalignedException">
      <summary>The exception that is thrown when a unit of data is read from or written to an address that is not a multiple of the data size. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DataMisalignedException" /> class.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.DataMisalignedException" /> class using the specified error message and underlying exception.</summary>
      <param name="message">A <see cref="T:System.String" /> object that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
      <param name="innerException">The exception that is the cause of the current <see cref="T:System.DataMisalignedException" />. If the <paramref name="innerException" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DataMisalignedException" /> class using the specified error message.</summary>
      <param name="message">A <see cref="T:System.String" /> object that describes the error. The content of <paramref name="message" /> is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary>The exception that is thrown when a DLL specified in a DLL import cannot be found.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> class with default properties.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.DllNotFoundException" /> class with a specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="T:System.IO.UnmanagedMemoryAccessor">
      <summary>Provides random access to unmanaged blocks of memory from managed code.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryAccessor" /> class.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryAccessor" /> class with a specified buffer, offset, capacity, and access right.</summary>
      <param name="buffer">The buffer to contain the accessor.</param>
      <param name="offset">The byte at which to start the accessor.</param>
      <param name="capacity">The size, in bytes, of memory to allocate.</param>
      <param name="access">The type of access allowed to the memory. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> plus <paramref name="capacity" /> is greater than <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="capacity" /> is less than zero.

 -or-

 <paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> plus <paramref name="capacity" /> would wrap around the high end of the address space.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.UnmanagedMemoryAccessor" /> class with a specified buffer, offset, and capacity.</summary>
      <param name="buffer">The buffer to contain the accessor.</param>
      <param name="offset">The byte at which to start the accessor.</param>
      <param name="capacity">The size, in bytes, of memory to allocate.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> plus <paramref name="capacity" /> is greater than <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="capacity" /> is less than zero.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> plus <paramref name="capacity" /> would wrap around the high end of the address space.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.UnmanagedMemoryAccessor" />.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.UnmanagedMemoryAccessor" /> and optionally releases the managed resources.</summary>
      <param name="disposing">
        <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Sets the initial values for the accessor.</summary>
      <param name="buffer">The buffer to contain the accessor.</param>
      <param name="offset">The byte at which to start the accessor.</param>
      <param name="capacity">The size, in bytes, of memory to allocate.</param>
      <param name="access">The type of access allowed to the memory. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> plus <paramref name="capacity" /> is greater than <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="capacity" /> is less than zero.

 -or-

 <paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> plus <paramref name="capacity" /> would wrap around the high end of the address space.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)">
      <summary>Reads a structure of type <typeparamref name="T" /> from the accessor into a provided reference.</summary>
      <param name="position">The position in the accessor at which to begin reading.</param>
      <param name="structure">The structure to contain the read data.</param>
      <typeparam name="T">The type of structure.</typeparam>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read in a structure of type <typeparamref name="T" />.

 -or-

 <see langword="T" /> is a value type that contains one or more reference types.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary>Reads structures of type <typeparamref name="T" /> from the accessor into an array of type <typeparamref name="T" />.</summary>
      <param name="position">The number of bytes in the accessor at which to begin reading.</param>
      <param name="array">The array to contain the structures read from the accessor.</param>
      <param name="offset">The index in <paramref name="array" /> in which to place the first copied structure.</param>
      <param name="count">The number of structures of type <c>T</c> to read from the accessor.</param>
      <typeparam name="T">The type of structure.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is not large enough to contain <paramref name="count" /> of structures (starting from <paramref name="position" />).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
      <returns>The number of structures read into <paramref name="array" />. This value can be less than <paramref name="count" /> if there are fewer structures available, or zero if the end of the accessor is reached.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)">
      <summary>Reads a Boolean value from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
      <returns>
        <see langword="true" /> or <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)">
      <summary>Reads a byte value from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
      <returns>The value that was read.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)">
      <summary>Reads a character from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
      <returns>The value that was read.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)">
      <summary>Reads a decimal value from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.

 -or-

 The decimal to read is invalid.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
      <returns>The value that was read.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)">
      <summary>Reads a double-precision floating-point value from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
      <returns>The value that was read.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)">
      <summary>Reads a 16-bit integer from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
      <returns>The value that was read.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)">
      <summary>Reads a 32-bit integer from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
      <returns>The value that was read.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)">
      <summary>Reads a 64-bit integer from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
      <returns>The value that was read.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)">
      <summary>Reads an 8-bit signed integer from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
      <returns>The value that was read.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)">
      <summary>Reads a single-precision floating-point value from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
      <returns>The value that was read.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)">
      <summary>Reads an unsigned 16-bit integer from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
      <returns>The value that was read.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)">
      <summary>Reads an unsigned 32-bit integer from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
      <returns>The value that was read.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)">
      <summary>Reads an unsigned 64-bit integer from the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin reading.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to read a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support reading.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
      <returns>The value that was read.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)">
      <summary>Writes a Boolean value into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)">
      <summary>Writes a byte value into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)">
      <summary>Writes a character into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)">
      <summary>Writes a decimal value into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.

 -or-

 The decimal is invalid.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)">
      <summary>Writes a <see cref="T:System.Double" /> value into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)">
      <summary>Writes a 16-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)">
      <summary>Writes a 32-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)">
      <summary>Writes a 64-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after position to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)">
      <summary>Writes an 8-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)">
      <summary>Writes a <see cref="T:System.Single" /> into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)">
      <summary>Writes an unsigned 16-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)">
      <summary>Writes an unsigned 32-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)">
      <summary>Writes an unsigned 64-bit integer into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="value">The value to write.</param>
      <exception cref="T:System.ArgumentException">There are not enough bytes after <paramref name="position" /> to write a value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)">
      <summary>Writes a structure into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="structure">The structure to write.</param>
      <typeparam name="T">The type of structure.</typeparam>
      <exception cref="T:System.ArgumentException">There are not enough bytes in the accessor after <paramref name="position" /> to write a structure of type <typeparamref name="T" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary>Writes structures from an array of type <typeparamref name="T" /> into the accessor.</summary>
      <param name="position">The number of bytes into the accessor at which to begin writing.</param>
      <param name="array">The array to write into the accessor.</param>
      <param name="offset">The index in <paramref name="array" /> to start writing from.</param>
      <param name="count">The number of structures in <paramref name="array" /> to write.</param>
      <typeparam name="T">The type of structure.</typeparam>
      <exception cref="T:System.ArgumentException">There are not enough bytes in the accessor after <paramref name="position" /> to write the number of structures specified by <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> is less than zero or greater than the capacity of the accessor.

 -or-

 <paramref name="offset" /> or <paramref name="count" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The accessor does not support writing.</exception>
      <exception cref="T:System.ObjectDisposedException">The accessor has been disposed.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanRead">
      <summary>Determines whether the accessor is readable.</summary>
      <returns>
        <see langword="true" /> if the accessor is readable; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanWrite">
      <summary>Determines whether the accessory is writable.</summary>
      <returns>
        <see langword="true" /> if the accessor is writable; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.Capacity">
      <summary>Gets the capacity of the accessor.</summary>
      <returns>The capacity of the accessor.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.IsOpen">
      <summary>Determines whether the accessor is currently open by a process.</summary>
      <returns>
        <see langword="true" /> if the accessor is open; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IDispatchConstantAttribute">
      <summary>Indicates that the default value for the attributed field or parameter is an instance of <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />, where the <see cref="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject" /> is <see langword="null" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IDispatchConstantAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.IDispatchConstantAttribute" /> class.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IDispatchConstantAttribute.Value">
      <summary>Gets the <see langword="IDispatch" /> constant stored in this attribute.</summary>
      <returns>The <see langword="IDispatch" /> constant stored in this attribute. Only <see langword="null" /> is allowed for an <see langword="IDispatch" /> constant value.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IUnknownConstantAttribute">
      <summary>Indicates that the default value for the attributed field or parameter is an instance of <see cref="T:System.Runtime.InteropServices.UnknownWrapper" />, where the <see cref="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject" /> is <see langword="null" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IUnknownConstantAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.IUnknownConstantAttribute" /> class.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IUnknownConstantAttribute.Value">
      <summary>Gets the <see langword="IUnknown" /> constant stored in this attribute.</summary>
      <returns>The <see langword="IUnknown" /> constant stored in this attribute. Only <see langword="null" /> is allowed for an <see langword="IUnknown" /> constant value.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
      <summary>Allows an unmanaged method to call a managed method.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary>Encapsulates an array and an offset within the specified array.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> structure.</summary>
      <param name="array">A managed array.</param>
      <param name="offset">The offset in bytes, of the element to be passed through platform invoke.</param>
      <exception cref="T:System.ArgumentException">The array is larger than 2 gigabytes (GB).</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary>Indicates whether the specified object matches the current <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object.</summary>
      <param name="obj">Object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the object matches this <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>Indicates whether the specified <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object matches the current instance.</summary>
      <param name="obj">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if the specified <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object matches the current instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary>Returns the managed array referenced by this <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</summary>
      <returns>The managed array this instance references.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary>Returns a hash code for this value type.</summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary>Returns the offset provided when this <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> was constructed.</summary>
      <returns>The offset for this instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>Determines whether two specified <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> objects have the same value.</summary>
      <param name="a">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object to compare with the <paramref name="b" /> parameter.</param>
      <param name="b">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object to compare with the <paramref name="a" /> parameter.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>Determines whether two specified <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> objects no not have the same value.</summary>
      <param name="a">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object to compare with the <paramref name="b" /> parameter.</param>
      <param name="b">An <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object to compare with the <paramref name="a" /> parameter.</param>
      <returns>
        <see langword="true" /> if the value of <paramref name="a" /> is not the same as the value of <paramref name="b" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AutomationProxyAttribute">
      <summary>Specifies whether the type should be marshaled using the Automation marshaler or a custom proxy and stub.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AutomationProxyAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.AutomationProxyAttribute" /> class.</summary>
      <param name="val">
        <see langword="true" /> if the class should be marshaled using the Automation Marshaler; <see langword="false" /> if a proxy stub marshaler should be used.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.AutomationProxyAttribute.Value">
      <summary>Gets a value indicating the type of marshaler to use.</summary>
      <returns>
        <see langword="true" /> if the class should be marshaled using the Automation Marshaler; <see langword="false" /> if a proxy stub marshaler should be used.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BestFitMappingAttribute">
      <summary>Controls whether Unicode characters are converted to the closest matching ANSI characters.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BestFitMappingAttribute.ThrowOnUnmappableChar">
      <summary>Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI '?' character.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" /> class set to the value of the <see cref="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping" /> property.</summary>
      <param name="BestFitMapping">
        <see langword="true" /> to indicate that best-fit mapping is enabled; otherwise, <see langword="false" />. The default is <see langword="true" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping">
      <summary>Gets the best-fit mapping behavior when converting Unicode characters to ANSI characters.</summary>
      <returns>
        <see langword="true" /> if best-fit mapping is enabled; otherwise, <see langword="false" />. The default is <see langword="true" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BStrWrapper">
      <summary>Marshals data of type <see langword="VT_BSTR" /> from managed to unmanaged code. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> class with the specified <see cref="T:System.Object" /> object.</summary>
      <param name="value">The object to wrap and marshal as <see langword="VT_BSTR" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> class with the specified <see cref="T:System.String" /> object.</summary>
      <param name="value">The object to wrap and marshal as <see langword="VT_BSTR" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BStrWrapper.WrappedObject">
      <summary>Gets the wrapped <see cref="T:System.String" /> object to marshal as type <see langword="VT_BSTR" />.</summary>
      <returns>The object that is wrapped by <see cref="T:System.Runtime.InteropServices.BStrWrapper" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary>Specifies the calling convention required to call methods implemented in unmanaged code.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary>The caller cleans the stack. This enables calling functions with <see langword="varargs" />, which makes it appropriate to use for methods that accept a variable number of parameters, such as <see langword="Printf" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary>This calling convention is not supported.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary>The callee cleans the stack.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary>The first parameter is the <see langword="this" /> pointer and is stored in register ECX. Other parameters are pushed on the stack. This calling convention is used to call methods on classes exported from an unmanaged DLL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary>This member is not actually a calling convention, but instead uses the default platform calling convention.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary>Indicates the type of class interface to be generated for a class exposed to COM, if an interface is generated at all.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> enumeration value.</summary>
      <param name="classInterfaceType">Describes the type of interface that is generated for a class.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> enumeration member.</summary>
      <param name="classInterfaceType">One of the <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> values that describes the type of interface that is generated for a class.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> value that describes which type of interface should be generated for the class.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> value that describes which type of interface should be generated for the class.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary>Identifies the type of class interface that is generated for a class.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary>
        <para>Indicates that the class only supports late binding for COM clients. A <see langword="dispinterface" /> for the class is automatically exposed to COM clients on request. The type library produced by Tlbexp.exe (Type Library Exporter) does not contain type information for the <see langword="dispinterface" /> in order to prevent clients from caching the DISPIDs of the interface. The <see langword="dispinterface" /> does not exhibit the versioning problems described in <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> because clients can only late-bind to the interface.</para>
        <para>This is the default setting for <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary>Indicates that a dual class interface is automatically generated for the class and exposed to COM. Type information is produced for the class interface and published in the type library. Using <see langword="AutoDual" /> is strongly discouraged because of the versioning limitations described in <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary>
        <para>Indicates that no class interface is generated for the class. If no interfaces are implemented explicitly, the class can only provide late-bound access through the <see langword="IDispatch" /> interface. This is the recommended setting for <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />. Using <see langword="ClassInterfaceType.None" /> is the only way to expose functionality through interfaces implemented explicitly by the class.</para>
        <para>Tlbexp.exe (Type Library Exporter) exposes the first public, COM-visible interface implemented by the class as the default interface of the coclass. In .NET Framework 2.0 and later versions, you can specify the default interface exposed to COM by using the <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> attribute. If the class implements no interfaces, the first public, COM-visible interface implemented by a base class becomes the default interface (starting with the most recently derived base class and working backward). Tlbexp.exe exposes <see langword="_Object" /> as the default interface if neither the class nor its base classes implement interfaces.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CLong">
      <summary>
        <see cref="T:System.Runtime.InteropServices.CLong" /> is an immutable value type that represents the <c>long</c> type in C and C++.
      It is meant to be used as an exchange type at the managed/unmanaged boundary to accurately represent in managed code unmanaged APIs that use the <c>long</c> type.
      This type has 32-bits of storage on all Windows platforms and 32-bit Unix-based platforms.
      It has 64-bits of storage on 64-bit Unix platforms.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CLong.#ctor(System.Int32)">
      <summary>Constructs an instance from a 32-bit integer.</summary>
      <param name="value">The integer value.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CLong.#ctor(System.IntPtr)">
      <summary>Constructs an instance from a native-sized integer.</summary>
      <param name="value">The integer value.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is outside the range of the underlying storage type.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.CLong.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="o">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="o" /> is an instance of <see cref="T:System.Runtime.InteropServices.CLong" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CLong.Equals(System.Runtime.InteropServices.CLong)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Runtime.InteropServices.CLong" /> value.</summary>
      <param name="other">A <see cref="T:System.Runtime.InteropServices.CLong" /> value to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="other" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CLong.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CLong.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.CLong.Value">
      <summary>The underlying integer value of this instance.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary>Specifies the class identifier of a coclass imported from a type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary>Initializes new instance of the <see cref="T:System.Runtime.InteropServices.CoClassAttribute" /> with the class identifier of the original coclass.</summary>
      <param name="coClass">A <see cref="T:System.Type" /> that contains the class identifier of the original coclass.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary>Gets the class identifier of the original coclass.</summary>
      <returns>A <see cref="T:System.Type" /> containing the class identifier of the original coclass.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CollectionsMarshal">
      <summary>An unsafe class that provides a set of methods to access the underlying data representations of collections.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CollectionsMarshal.AsBytes(System.Collections.BitArray)">
      <param name="array" />
    </member>
    <member name="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})">
      <summary>Gets a <see cref="T:System.Span`1" /> view over the data in a list.
 Items should not be added or removed from the <see cref="T:System.Collections.Generic.List`1" /> while the <see cref="T:System.Span`1" /> is in use.</summary>
      <param name="list">List from which to create the <see cref="T:System.Span`1" />.</param>
      <typeparam name="T">The type of items in the list.</typeparam>
      <returns>A <see cref="T:System.Span`1" /> instance over the <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CollectionsMarshal.GetValueRefOrAddDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Boolean@)">
      <summary>Gets a reference to a <typeparamref name="TValue" /> in the specified dictionary, adding a new entry with a default value if the key does not exist.</summary>
      <param name="dictionary">The dictionary to get the reference to <typeparamref name="TValue" /> from.</param>
      <param name="key">The key used for lookup.</param>
      <param name="exists">When this method returns, contains <see langword="true" /> if <paramref name="key" /> already existed in the dictionary, and <see langword="false" /> if a new entry was added.</param>
      <typeparam name="TKey">The type of a key.</typeparam>
      <typeparam name="TValue">The type of a value.</typeparam>
      <returns>A reference to a <typeparamref name="TValue" /> in the specified dictionary.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CollectionsMarshal.GetValueRefOrAddDefault``3(System.Collections.Generic.Dictionary{``0,``1}.AlternateLookup{``2},``2,System.Boolean@)">
      <summary>Gets a ref to a <typeparamref name="TValue" /> in the <see cref="T:System.Collections.Generic.Dictionary`2.AlternateLookup`1" />, adding a new entry with a default value if it does not exist in the <paramref name="dictionary" />.</summary>
      <param name="dictionary">The dictionary to get the ref to <typeparamref name="TValue" /> from.</param>
      <param name="key">The key used for lookup.</param>
      <param name="exists">Whether or not a new entry for the given key was added to the dictionary.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <typeparam name="TAlternateKey">The type of the alternate key in the dictionary lookup.</typeparam>
      <returns>A reference to a <typeparamref name="TValue" /> in the specified <see cref="T:System.Collections.Generic.Dictionary`2.AlternateLookup`1" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CollectionsMarshal.GetValueRefOrNullRef``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
      <summary>Gets either a reference to a <typeparamref name="TValue" /> in the <see cref="T:System.Collections.Generic.Dictionary`2" /> or a reference <see langword="null" /> if it does not exist in the <paramref name="dictionary" />.</summary>
      <param name="dictionary">The dictionary to get the ref to <typeparamref name="TValue" /> from.</param>
      <param name="key">The key used for lookup.</param>
      <typeparam name="TKey">The type of a key.</typeparam>
      <typeparam name="TValue">The type of a value.</typeparam>
      <returns>A reference to a <typeparamref name="TValue" /> in the <see cref="T:System.Collections.Generic.Dictionary`2" /> or a reference <see langword="null" /> if it does not exist in the <paramref name="dictionary" />..</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CollectionsMarshal.GetValueRefOrNullRef``3(System.Collections.Generic.Dictionary{``0,``1}.AlternateLookup{``2},``2)">
      <summary>Gets either a ref to a <typeparamref name="TValue" /> in the <see cref="T:System.Collections.Generic.Dictionary`2" /> or a ref null if it does not exist in the <paramref name="dictionary" />.</summary>
      <param name="dictionary">The dictionary to get the ref to <typeparamref name="TValue" /> from.</param>
      <param name="key">The key used for lookup.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <typeparam name="TAlternateKey">The type of an alternate key for lookups in the dictionary.</typeparam>
      <returns>A reference to a <typeparamref name="TValue" /> in the <see cref="T:System.Collections.Generic.Dictionary`2" /> or a reference <see langword="null" /> if it does not exist in the <paramref name="dictionary" />..</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CollectionsMarshal.SetCount``1(System.Collections.Generic.List{``0},System.Int32)">
      <summary>Sets the count of the <see cref="T:System.Collections.Generic.List`1" /> to the specified value.</summary>
      <param name="list">The list to set the count of.</param>
      <param name="count">The value to set the list's count to.</param>
      <typeparam name="T">The type of the elements in the list.</typeparam>
      <exception cref="T:System.NullReferenceException">
        <paramref name="list" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAliasNameAttribute">
      <summary>Indicates the COM alias for a parameter or field type.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAliasNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComAliasNameAttribute" /> class with the alias for the attributed field or parameter.</summary>
      <param name="alias">The alias for the field or parameter as found in the type library when it was imported.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAliasNameAttribute.Value">
      <summary>Gets the alias for the field or parameter as found in the type library when it was imported.</summary>
      <returns>The alias for the field or parameter as found in the type library when it was imported.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary>Permits late-bound registration of an event handler.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> class by using the specified type and a name of the event on the type.</summary>
      <param name="type">The type of object.</param>
      <param name="eventName">The name of an event on <paramref name="type" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>Attaches an event handler to a COM object.</summary>
      <param name="target">The target object that the event delegate should bind to.</param>
      <param name="handler">The event delegate.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary>Gets the method that was used to add an event handler delegate to the event source.</summary>
      <param name="nonPublic">
        <see langword="true" /> to return non-public methods; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> is <see langword="true" /> and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.</exception>
      <returns>The method that was used to add an event handler delegate to the event source.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary>When overridden in a derived class, gets an array that contains all the custom attributes that are applied to this member.</summary>
      <param name="inherit">
        <see langword="true" /> to search this member's inheritance chain to find the attributes; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.InvalidOperationException">This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
      <returns>An array that contains all the custom attributes, or an array that has no elements if no attributes were defined.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>When overridden in a derived class, gets an array that contains all the custom attributes of the specified type that are applied to this member.</summary>
      <param name="attributeType">The attribute type to search for. Only attributes that are assignable to this type can be returned.</param>
      <param name="inherit">
        <see langword="true" /> to search this member's inheritance chain to find the attributes; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context</exception>
      <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
      <returns>An array that contains all the custom attributes of the specified type, or an array that has no elements if no attributes were defined.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributesData">
      <summary>Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects for the current <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" />.</summary>
      <returns>A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the current <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetOtherMethods(System.Boolean)">
      <summary>Returns the public or non-public methods that have been associated with an event in metadata.</summary>
      <param name="nonPublic">
        <see langword="true" /> to include non-public methods; otherwise, <see langword="false" />.</param>
      <returns>An array representing the methods that have been associated with the event in metadata. If there are no such methods, an empty array is returned.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary>When overridden in a derived class, returns the method that was called when the event was raised.</summary>
      <param name="nonPublic">
        <see langword="true" /> to return non-public methods; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> is <see langword="true" /> and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.</exception>
      <returns>The object that was called when the event was raised.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary>When overridden in a derived class, retrieves the <see cref="T:System.Reflection.MethodInfo" /> object for removing a method of the event.</summary>
      <param name="nonPublic">
        <see langword="true" /> to return non-public methods; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> is <see langword="true" /> and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.</exception>
      <returns>The method that was used to remove an event handler delegate from the event source.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether one or more instances of the specified attribute are applied to this member.</summary>
      <param name="attributeType">The attribute type to search for.</param>
      <param name="inherit">
        <see langword="true" /> to search this member's inheritance chain to find the attributes; otherwise, <see langword="false" />.</param>
      <returns>
        <see langword="true" /> if the specified attribute has been applied to this member; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>Detaches an event handler from a COM object.</summary>
      <param name="target">The target object that the event delegate is bound to.</param>
      <param name="handler">The event delegate.</param>
      <exception cref="T:System.InvalidOperationException">The event does not have a public <see langword="remove" /> accessor.</exception>
      <exception cref="T:System.ArgumentException">The handler that was passed in cannot be used.</exception>
      <exception cref="T:System.Reflection.TargetException">The <paramref name="target" /> parameter is <see langword="null" /> and the event is not static.

 -or-

 The <see cref="T:System.Reflection.EventInfo" /> is not declared on the target.

Note: In .NET for Windows Store apps or the Portable Class Library, catch <see cref="T:System.Exception" /> instead.</exception>
      <exception cref="T:System.MethodAccessException">The caller does not have access permission to the member.

Note: In .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.MemberAccessException" />, instead.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary>Gets the attributes for this event.</summary>
      <returns>The read-only attributes for this event.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary>Gets the class that declares this member.</summary>
      <returns>The <see cref="T:System.Type" /> object for the class that declares this member.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.MetadataToken">
      <summary>Gets the metadata token associated with the current <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> object.</summary>
      <returns>A 32-bit Integer that represents the metadata token.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Module">
      <summary>Gets the module associated with the current <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> object.</summary>
      <returns>The module associated with the current <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> object.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary>Gets the name of the current member.</summary>
      <returns>The name of this member.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary>Gets the class object that was used to initialize this instance.</summary>
      <returns>The <see cref="T:System.Type" /> object that was used to initialize the current object.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute">
      <summary>Indicates to a COM client that all classes in the current version of an assembly are compatible with classes in an earlier version of the assembly.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute" /> class with the major version, minor version, build, and revision numbers of the assembly.</summary>
      <param name="major">The major version number of the assembly.</param>
      <param name="minor">The minor version number of the assembly.</param>
      <param name="build">The build number of the assembly.</param>
      <param name="revision">The revision number of the assembly.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.BuildNumber">
      <summary>Gets the build number of the assembly.</summary>
      <returns>The build number of the assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MajorVersion">
      <summary>Gets the major version number of the assembly.</summary>
      <returns>The major version number of the assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MinorVersion">
      <summary>Gets the minor version number of the assembly.</summary>
      <returns>The minor version number of the assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.RevisionNumber">
      <summary>Gets the revision number of the assembly.</summary>
      <returns>The revision number of the assembly.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComConversionLossAttribute">
      <summary>Indicates that information was lost about a class or interface when it was imported from a type library to an assembly.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComConversionLossAttribute.#ctor">
      <summary>Initializes a new instance of the <see langword="ComConversionLossAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary>Specifies a default interface to expose to COM. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> class with the specified <see cref="T:System.Type" /> object as the default interface exposed to COM.</summary>
      <param name="defaultInterface">A <see cref="T:System.Type" /> value indicating the default interface to expose to COM.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary>Gets the <see cref="T:System.Type" /> object that specifies the default interface to expose to COM.</summary>
      <returns>The <see cref="T:System.Type" /> object that specifies the default interface to expose to COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary>Identifies the source interface and the class that implements the methods of the event interface that is generated when a coclass is imported from a COM type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" /> class with the source interface and event provider class.</summary>
      <param name="SourceInterface">A <see cref="T:System.Type" /> that contains the original source interface from the type library. COM uses this interface to call back to the managed class.</param>
      <param name="EventProvider">A <see cref="T:System.Type" /> that contains the class that implements the methods of the event interface.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary>Gets the class that implements the methods of the event interface.</summary>
      <returns>A <see cref="T:System.Type" /> that contains the class that implements the methods of the event interface.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary>Gets the original source interface from the type library.</summary>
      <returns>A <see cref="T:System.Type" /> containing the source interface.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventsHelper">
      <summary>Provides methods that enable .NET delegates that handle events to be added and removed from COM objects.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>Adds a delegate to the invocation list of events originating from a COM object.</summary>
      <param name="rcw">The COM object that triggers the events the caller would like to respond to.</param>
      <param name="iid">The identifier of the source interface used by the COM object to trigger events.</param>
      <param name="dispid">The dispatch identifier of the method on the source interface.</param>
      <param name="d">The delegate to invoke when the COM event is fired.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>Removes a delegate from the invocation list of events originating from a COM object.</summary>
      <param name="rcw">The COM object the delegate is attached to.</param>
      <param name="iid">The identifier of the source interface used by the COM object to trigger events.</param>
      <param name="dispid">The dispatch identifier of the method on the source interface.</param>
      <param name="d">The delegate to remove from the invocation list.</param>
      <returns>The delegate that was removed from the invocation list.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary>The exception that is thrown when an unrecognized HRESULT is returned from a COM method call.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException" /> class with default values.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException" /> class from serialization data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that supplies the contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException" /> class with a specified message and error code.</summary>
      <param name="message">The message that indicates the reason the exception occurred.</param>
      <param name="errorCode">The error code (HRESULT) value associated with this exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.COMException" /> class with a specified message.</summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary>Converts the contents of the exception to a string.</summary>
      <returns>A string containing the <see cref="P:System.Exception.HResult" />, <see cref="P:System.Exception.Message" />, <see cref="P:System.Exception.InnerException" />, and <see cref="P:System.Exception.StackTrace" /> properties of the exception.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary>Indicates that the attributed type was previously defined in COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary>Identifies how to expose an interface to COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary>Indicates that the interface is exposed to COM as a dual interface, which enables both early and late binding. <see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" /> is the default value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary>Indicates that an interface is exposed to COM as a dispinterface, which enables late binding only.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIInspectable">
      <summary>Indicates that an interface is exposed to COM as a Windows Runtime interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary>Indicates that an interface is exposed to COM as an interface that is derived from IUnknown, which enables only early binding.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary>Describes the type of a COM member.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary>The member is a normal method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary>The member gets properties.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary>The member sets properties.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute">
      <summary>Specifies the method to call when you register an assembly for use from COM; this enables the execution of user-written code during the registration process.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComRegisterFunctionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary>Identifies a list of interfaces that are exposed as COM event sources for the attributed class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> class with the name of the event source interface.</summary>
      <param name="sourceInterfaces">A null-delimited list of fully qualified event source interface names.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> class with the types to use as source interfaces.</summary>
      <param name="sourceInterface1">The <see cref="T:System.Type" /> of the default source interface.</param>
      <param name="sourceInterface2">The <see cref="T:System.Type" /> of a source interface.</param>
      <param name="sourceInterface3">The <see cref="T:System.Type" /> of a source interface.</param>
      <param name="sourceInterface4">The <see cref="T:System.Type" /> of a source interface.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary>Initializes a new instance of the <see langword="ComSourceInterfacesAttribute" /> class with the types to use as source interfaces.</summary>
      <param name="sourceInterface1">The <see cref="T:System.Type" /> of the default source interface.</param>
      <param name="sourceInterface2">The <see cref="T:System.Type" /> of a source interface.</param>
      <param name="sourceInterface3">The <see cref="T:System.Type" /> of a source interface.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> class with the types to use as source interfaces.</summary>
      <param name="sourceInterface1">The <see cref="T:System.Type" /> of the default source interface.</param>
      <param name="sourceInterface2">The <see cref="T:System.Type" /> of a source interface.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> class with the type to use as a source interface.</summary>
      <param name="sourceInterface">The <see cref="T:System.Type" /> of the source interface.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary>Gets the fully qualified name of the event source interface.</summary>
      <returns>The fully qualified name of the event source interface.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ADVF">
      <summary>Specifies the requested behavior when setting up an advise sink or a caching connection with an object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_DATAONSTOP">
      <summary>For data advisory connections, assures accessibility to data.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_NODATA">
      <summary>For data advisory connections (<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> or <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />), this flag requests the data object not to send data when it calls <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_ONLYONCE">
      <summary>Requests that the object make only one change notification or cache update before deleting the connection.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_PRIMEFIRST">
      <summary>Requests that the object not wait for the data or view to change before making an initial call to <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> (for data or view advisory connections) or updating the cache (for cache connections).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN">
      <summary>This value is used by DLL object applications and object handlers that perform the drawing of their objects.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_NOHANDLER">
      <summary>Synonym for <see cref="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN" />, which is used more often.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_ONSAVE">
      <summary>For cache connections, this flag updates the cached representation only when the object containing the cache is saved.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BIND_OPTS">
      <summary>Stores the parameters that are used during a moniker binding operation.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.cbStruct">
      <summary>Specifies the size, in bytes, of the <see langword="BIND_OPTS" /> structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.dwTickCountDeadline">
      <summary>Indicates the amount of time (clock time in milliseconds, as returned by the <see langword="GetTickCount" /> function) that the caller specified to complete the binding operation.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfFlags">
      <summary>Controls aspects of moniker binding operations.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfMode">
      <summary>Represents flags that should be used when opening the file that contains the object identified by the moniker.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BINDPTR">
      <summary>Contains a pointer to a bound-to <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> structure, <see cref="T:System.Runtime.InteropServices.VARDESC" /> structure, or an <see langword="ITypeComp" /> interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpfuncdesc">
      <summary>Represents a pointer to a <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lptcomp">
      <summary>Represents a pointer to an <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeComp" /> interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpvardesc">
      <summary>Represents a pointer to a <see cref="T:System.Runtime.InteropServices.VARDESC" /> structure.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CALLCONV">
      <summary>Identifies the calling convention used by a method described in a METHODDATA structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_CDECL">
      <summary>Indicates that the C declaration (CDECL) calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MACPASCAL">
      <summary>Indicates that the Macintosh Pascal (MACPASCAL) calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MAX">
      <summary>Indicates the end of the <see cref="T:System.Runtime.InteropServices.ComTypes.CALLCONV" /> enumeration.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWCDECL">
      <summary>Indicates that the Macintosh Programmers' Workbench (MPW) CDECL calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWPASCAL">
      <summary>Indicates that the Macintosh Programmers' Workbench (MPW) PASCAL calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MSCPASCAL">
      <summary>Indicates that the MSC Pascal (MSCPASCAL) calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_PASCAL">
      <summary>Indicates that the Pascal calling convention is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_RESERVED">
      <summary>This value is reserved for future use.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_STDCALL">
      <summary>Indicates that the standard calling convention (STDCALL) is used for a method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_SYSCALL">
      <summary>Indicates that the standard SYSCALL calling convention is used for a method.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CONNECTDATA">
      <summary>Describes a connection that exists to a given connection point.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.dwCookie">
      <summary>Represents a connection token that is returned from a call to <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.pUnk">
      <summary>Represents a pointer to the <see langword="IUnknown" /> interface on a connected advisory sink. The caller must call <see langword="IUnknown::Release" /> on this pointer when the <see langword="CONNECTDATA" /> structure is no longer needed.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DATADIR">
      <summary>Specifies the direction of the data flow in the <paramref name="dwDirection" /> parameter of the <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> method. This determines the formats that the resulting enumerator can enumerate.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_GET">
      <summary>Requests that <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> supply an enumerator for the formats that can be specified in <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_SET">
      <summary>Requests that <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> supply an enumerator for the formats that can be specified in <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DESCKIND">
      <summary>Identifies the type description being bound to.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_FUNCDESC">
      <summary>Indicates that a <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> structure was returned.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary>Indicates that an <see langword="IMPLICITAPPOBJ" /> was returned.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_MAX">
      <summary>Indicates an end-of-enumeration marker.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_NONE">
      <summary>Indicates that no match was found.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_TYPECOMP">
      <summary>Indicates that a <see langword="TYPECOMP" /> was returned.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_VARDESC">
      <summary>Indicates that a <see langword="VARDESC" /> was returned.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DISPPARAMS">
      <summary>Contains the arguments passed to a method or property by <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cArgs">
      <summary>Represents the count of arguments.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cNamedArgs">
      <summary>Represents the count of named arguments.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgdispidNamedArgs">
      <summary>Represents the dispatch IDs of named arguments.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgvarg">
      <summary>Represents a reference to the array of arguments.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DVASPECT">
      <summary>Specifies the desired data or view aspect of the object when drawing or getting data.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT">
      <summary>A representation of an object that lets that object be displayed as an embedded object inside a container. This value is typically specified for compound document objects. The presentation can be provided for the screen or printer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_DOCPRINT">
      <summary>A representation of an object on the screen as though it were printed to a printer using the Print command from the File menu. The described data may represent a sequence of pages.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_ICON">
      <summary>An iconic representation of an object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_THUMBNAIL">
      <summary>A thumbnail representation of an object that lets that object be displayed in a browsing tool. The thumbnail is approximately a 120 by 120 pixel, 16-color (recommended), device-independent bitmap potentially wrapped in a metafile.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC">
      <summary>Contains the type description and process transfer information for a variable, function, or a function parameter.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.desc">
      <summary>Contains information about an element.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.tdesc">
      <summary>Identifies the type of the element.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION">
      <summary>Contains information about an element.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.idldesc">
      <summary>Contains information for remoting the element.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.paramdesc">
      <summary>Contains information about the parameter.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.EXCEPINFO">
      <summary>Describes the exceptions that occur during <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrDescription">
      <summary>Describes the error intended for the customer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrHelpFile">
      <summary>Contains the fully-qualified drive, path, and file name of a Help file that contains more information about the error.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrSource">
      <summary>Indicates the name of the source of the exception. Typically, this is an application name.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.dwHelpContext">
      <summary>Indicates the Help context ID of the topic within the Help file.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pfnDeferredFillIn">
      <summary>Represents a pointer to a function that takes an <see cref="T:System.Runtime.InteropServices.EXCEPINFO" /> structure as an argument and returns an HRESULT value. If deferred fill-in is not desired, this field is set to <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pvReserved">
      <summary>This field is reserved; it must be set to <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.scode">
      <summary>A return value describing the error.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wCode">
      <summary>Represents an error code identifying the error.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wReserved">
      <summary>This field is reserved; it must be set to 0.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FILETIME">
      <summary>Represents the number of 100-nanosecond intervals since January 1, 1601. This structure is a 64-bit value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwHighDateTime">
      <summary>Specifies the high 32 bits of the <see langword="FILETIME" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwLowDateTime">
      <summary>Specifies the low 32 bits of the <see langword="FILETIME" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FORMATETC">
      <summary>Represents a generalized Clipboard format.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.cfFormat">
      <summary>Specifies the particular clipboard format of interest.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect">
      <summary>Specifies one of the <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> enumeration constants that indicates how much detail should be contained in the rendering.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex">
      <summary>Specifies part of the aspect when the data must be split across page boundaries.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.ptd">
      <summary>Specifies a pointer to a <see langword="DVTARGETDEVICE" /> structure containing information about the target device that the data is being composed for.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed">
      <summary>Specifies one of the <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> enumeration constants, which indicates the type of storage medium used to transfer the object's data.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCDESC">
      <summary>Defines a function description.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.callconv">
      <summary>Specifies the calling convention of a function.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParams">
      <summary>Counts the total number of parameters.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParamsOpt">
      <summary>Counts the optional parameters.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cScodes">
      <summary>Counts the permitted return values.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.elemdescFunc">
      <summary>Contains the return type of the function.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.funckind">
      <summary>Specifies whether the function is virtual, static, or dispatch-only.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.invkind">
      <summary>Specifies the type of a property function.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgelemdescParam">
      <summary>Indicates the array of <see cref="F:System.Runtime.InteropServices.ELEMDESC" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgscode">
      <summary>Stores the count of errors a function can return on a 16-bit system.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.memid">
      <summary>Identifies the function member ID.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.oVft">
      <summary>Specifies the offset in the VTBL for <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.wFuncFlags">
      <summary>Indicates the <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> of a function.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCFLAGS">
      <summary>Identifies the constants that define the properties of a function.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary>The function that supports data binding.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary>The function that best represents the object. Only one function in a type can have this attribute.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary>Permits an optimization in which the compiler looks for a member named "xyz" on the type of "abc". If such a member is found, and is flagged as an accessor function for an element of the default collection, a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary>The function that is displayed to the user as bindable. <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE" /> must also be set.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary>The function should not be displayed to the user, although it exists and is bindable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary>Mapped as individual bindable properties.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary>The property appears in an object browser, but not in a properties browser.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary>Tags the interface as having default behaviors.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary>When set, any call to a method that sets the property results first in a call to <see langword="IPropertyNotifySink::OnRequestEdit" />. The implementation of <see langword="OnRequestEdit" /> determines if the call is allowed to set the property.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary>The function should not be accessible from macro languages. This flag is intended for system-level functions or functions that type browsers should not display.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary>The function returns an object that is a source of events.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary>The type information member is the default member for display in the user interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary>The function supports <see langword="GetLastError" />. If an error occurs during the function, the caller can call <see langword="GetLastError" /> to retrieve the error code.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCKIND">
      <summary>Defines how to access a function.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_DISPATCH">
      <summary>The function can be accessed only through <see langword="IDispatch" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_NONVIRTUAL">
      <summary>The function is accessed by <see langword="static" /> address and takes an implicit <see langword="this" /> pointer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary>The function is accessed through the virtual function table (VTBL), and takes an implicit <see langword="this" /> pointer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_STATIC">
      <summary>The function is accessed by <see langword="static" /> address and does not take an implicit <see langword="this" /> pointer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_VIRTUAL">
      <summary>The function is accessed in the same way as <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL" />, except the function has an implementation.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IAdviseSink">
      <summary>Provides a managed definition of the <see langword="IAdviseSink" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnClose">
      <summary>Notifies all registered advisory sinks that the object has changed from the running state to the loaded state.  This method is called by a server.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Notifies all data objects currently registered advisory sinks that data in the object has changed.</summary>
      <param name="format">A <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passed by reference, which describes the format, target device, rendering, and storage information of the calling data object.</param>
      <param name="stgmedium">A <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, passed by reference, which defines the storage medium (global memory, disk file, storage object, stream object, Graphics Device Interface (GDI) object, or undefined) and ownership of that medium for the calling data object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Notifies all registered advisory sinks that the object has been renamed. This method is called by a server.</summary>
      <param name="moniker">A pointer to the <see langword="IMoniker" /> interface on the new full moniker of the object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnSave">
      <summary>Notifies all registered advisory sinks that the object has been saved. This method is called by a server.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnViewChange(System.Int32,System.Int32)">
      <summary>Notifies an object's registered advisory sinks that its view has changed. This method is called by a server.</summary>
      <param name="aspect">The aspect, or view, of the object. Contains a value taken from the <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> enumeration.</param>
      <param name="index">The portion of the view that has changed. Currently, only -1 is valid.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IBindCtx">
      <summary>Provides the managed definition of the <see langword="IBindCtx" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>Enumerates the strings that are the keys of the internally maintained table of contextual object parameters.</summary>
      <param name="ppenum">When this method returns, contains a reference to the object parameter enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>Returns the current binding options stored in the current bind context.</summary>
      <param name="pbindopts">A pointer to the structure to receive the binding options.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetObjectParam(System.String,System.Object@)">
      <summary>Looks up the given key in the internally maintained table of contextual object parameters and returns the corresponding object, if one exists.</summary>
      <param name="pszKey">The name of the object to search for.</param>
      <param name="ppunk">When this method returns, contains the object interface pointer. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetRunningObjectTable(System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)">
      <summary>Returns access to the Running Object Table (ROT) relevant to this binding process.</summary>
      <param name="pprot">When this method returns, contains a reference to the Running Object Table (ROT). This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)">
      <summary>Registers the passed object as one of the objects that has been bound during a moniker operation and that should be released when the operation is complete.</summary>
      <param name="punk">The object to register for release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectParam(System.String,System.Object)">
      <summary>Registers the specified object pointer under the specified name in the internally maintained table of object pointers.</summary>
      <param name="pszKey">The name to register <paramref name="punk" /> with.</param>
      <param name="punk">The object to register.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.ReleaseBoundObjects">
      <summary>Releases all the objects currently registered with the bind context by using the <see cref="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)" /> method.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectBound(System.Object)">
      <summary>Removes the object from the set of registered objects that need to be released.</summary>
      <param name="punk">The object to unregister for release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectParam(System.String)">
      <summary>Revokes the registration of the object currently found under the specified key in the internally maintained table of contextual object parameters, if that key is currently registered.</summary>
      <param name="pszKey">The key to unregister.</param>
      <returns>An <see langword="S_OK" /><see langword="HRESULT" /> value if the specified key was successfully removed from the table; otherwise, an <see langword="S_FALSE" /><see langword="HRESULT" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.SetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>Stores a block of parameters in the bind context. These parameters will apply to later <see langword="UCOMIMoniker" /> operations that use this bind context.</summary>
      <param name="pbindopts">The structure containing the binding options to set.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPoint">
      <summary>Provides the managed definition of the <see langword="IConnectionPoint" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)">
      <summary>Establishes an advisory connection between the connection point and the caller's sink object.</summary>
      <param name="pUnkSink">A reference to the sink to receive calls for the outgoing interface managed by this connection point.</param>
      <param name="pdwCookie">When this method returns, contains the connection cookie. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.EnumConnections(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>Creates an enumerator object for iteration through the connections that exist to this connection point.</summary>
      <param name="ppEnum">When this method returns, contains the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionInterface(System.Guid@)">
      <summary>Returns the IID of the outgoing interface managed by this connection point.</summary>
      <param name="pIID">When this parameter returns, contains the IID of the outgoing interface managed by this connection point. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionPointContainer(System.Runtime.InteropServices.ComTypes.IConnectionPointContainer@)">
      <summary>Retrieves the <see langword="IConnectionPointContainer" /> interface pointer to the connectable object that conceptually owns this connection point.</summary>
      <param name="ppCPC">When this parameter returns, contains the connectable object's <see langword="IConnectionPointContainer" /> interface. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Unadvise(System.Int32)">
      <summary>Terminates an advisory connection previously established through the <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> method.</summary>
      <param name="dwCookie">The connection cookie previously returned from the <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> method.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer">
      <summary>Provides the managed definition of the <see langword="IConnectionPointContainer" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.EnumConnectionPoints(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>Creates an enumerator of all the connection points supported in the connectable object, one connection point per IID.</summary>
      <param name="ppEnum">When this method returns, contains the interface pointer of the enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.FindConnectionPoint(System.Guid@,System.Runtime.InteropServices.ComTypes.IConnectionPoint@)">
      <summary>Asks the connectable object if it has a connection point for a particular IID, and if so, returns the <see langword="IConnectionPoint" /> interface pointer to that connection point.</summary>
      <param name="riid">A reference to the outgoing interface IID whose connection point is being requested.</param>
      <param name="ppCP">When this method returns, contains the connection point that manages the outgoing interface <paramref name="riid" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDataObject">
      <summary>Provides the managed definition of the <see langword="IDataObject" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary>Creates a connection between a data object and an advisory sink. This method is called by an object that supports an advisory sink and enables the advisory sink to be notified of changes in the object's data.</summary>
      <param name="pFormatetc">A <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, target device, aspect, and medium that will be used for future notifications.</param>
      <param name="advf">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> values that specifies a group of flags for controlling the advisory connection.</param>
      <param name="adviseSink">A pointer to the <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> interface on the advisory sink that will receive the change notification.</param>
      <param name="connection">When this method returns, contains a pointer to a DWORD token that identifies this connection. You can use this token later to delete the advisory connection by passing it to <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)" />. If this value is zero, the connection was not established. This parameter is passed uninitialized.</param>
      <returns>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:

 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> S_OK</term><description> The advisory connection was created.</description></item><item><term> E_NOTIMPL</term><description> This method is not implemented on the data object.</description></item><item><term> DV_E_LINDEX</term><description> There is an invalid value for <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; currently, only -1 is supported.</description></item><item><term> DV_E_FORMATETC</term><description> There is an invalid value for the <paramref name="pFormatetc" /> parameter.</description></item><item><term> OLE_E_ADVISENOTSUPPORTED</term><description> The data object does not support change notification.</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)">
      <summary>Destroys a notification connection that had been previously established.</summary>
      <param name="connection">A DWORD token that specifies the connection to remove. Use the value returned by <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> when the connection was originally established.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>Creates an object that can be used to enumerate the current advisory connections.</summary>
      <param name="enumAdvise">When this method returns, contains an <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" /> that receives the interface pointer to the new enumerator object. If the implementation sets <paramref name="enumAdvise" /> to <see langword="null" />, there are no connections to advisory sinks at this time. This parameter is passed uninitialized.</param>
      <returns>This method supports the standard return value E_OUTOFMEMORY, as well as the following:

 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> S_OK</term><description> The enumerator object is successfully instantiated or there are no connections.</description></item><item><term> OLE_E_ADVISENOTSUPPORTED</term><description> This object does not support advisory notifications.</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary>Creates an object for enumerating the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structures for a data object. These structures are used in calls to <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> or <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />.</summary>
      <param name="direction">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" /> values that specifies the direction of the data.</param>
      <returns>This method supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following:

 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> S_OK</term><description> The enumerator object was successfully created.</description></item><item><term> E_NOTIMPL</term><description> The direction specified by the <paramref name="direction" /> parameter is not supported.</description></item><item><term> OLE_S_USEREG</term><description> Requests that OLE enumerate the formats from the registry.</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>Provides a standard <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure that is logically equivalent to a more complex structure. Use this method to determine whether two different <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structures would return the same data, removing the need for duplicate rendering.</summary>
      <param name="formatIn">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call such as <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. The <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> member is not significant in this case and should be ignored.</param>
      <param name="formatOut">When this method returns, contains a pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure that contains the most general information possible for a specific rendering, making it canonically equivalent to <c>formatetcIn</c>. The caller must allocate this structure and the <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)" /> method must fill in the data. To retrieve data in a subsequent call such as <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />, the caller uses the supplied value of <paramref name="formatOut" />, unless the value supplied is <see langword="null" />. This value is <see langword="null" /> if the method returns <see langword="DATA_S_SAMEFORMATETC" />. The <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> member is not significant in this case and should be ignored. This parameter is passed uninitialized.</param>
      <returns>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:

 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> S_OK</term><description> The returned <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure is different from the one that was passed.</description></item><item><term> DATA_S_SAMEFORMATETC</term><description> The <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structures are the same and <see langword="null" /> is returned in the <paramref name="formatOut" /> parameter.</description></item><item><term> DV_E_LINDEX</term><description> There is an invalid value for <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; currently, only -1 is supported.</description></item><item><term> DV_E_FORMATETC</term><description> There is an invalid value for the <paramref name="formatIn" /> parameter.</description></item><item><term> OLE_E_NOTRUNNING</term><description> The application is not running.</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Obtains data from a source data object. The <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> method, which is called by a data consumer, renders the data described in the specified <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure and transfers it through the specified <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure. The caller then assumes responsibility for releasing the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure.</summary>
      <param name="format">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use when passing the data. It is possible to specify more than one medium by using the Boolean OR operator, allowing the method to choose the best medium among those specified.</param>
      <param name="medium">When this method returns, contains a pointer to the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure that indicates the storage medium containing the returned data through its <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" /> member, and the responsibility for releasing the medium through the value of its <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> member. If <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> is <see langword="null" />, the receiver of the medium is responsible for releasing it; otherwise, <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> points to the <see langword="IUnknown" /> interface on the appropriate object so its <see langword="Release" /> method can be called. The medium must be allocated and filled in by <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Obtains data from a source data object. This method, which is called by a data consumer, differs from the <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> method in that the caller must allocate and free the specified storage medium.</summary>
      <param name="format">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />, and only the following <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> values are valid: <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL" />, or <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE" />.</param>
      <param name="medium">A <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, passed by reference, that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. The caller must also free the medium. The implementation of this method must always supply a value of <see langword="null" /> for the <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> member of the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure that this parameter points to.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>Determines whether the data object is capable of rendering the data described in the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure. Objects attempting a paste or drop operation can call this method before calling <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> to get an indication of whether the operation may be successful.</summary>
      <param name="format">A pointer to a <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format, medium, and target device to use for the query.</param>
      <returns>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:

 <list type="table"><listheader><term> Value</term><description> Description</description></listheader><item><term> S_OK</term><description> A subsequent call to <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> would probably be successful.</description></item><item><term> DV_E_LINDEX</term><description> An invalid value for <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; currently, only -1 is supported.</description></item><item><term> DV_E_FORMATETC</term><description> An invalid value for the <paramref name="format" /> parameter.</description></item><item><term> DV_E_TYMED</term><description> An invalid <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> value.</description></item><item><term> DV_E_DVASPECT</term><description> An invalid <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" /> value.</description></item><item><term> OLE_E_NOTRUNNING</term><description> The application is not running.</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary>Transfers data to the object that implements this method. This method is called by an object that contains a data source.</summary>
      <param name="formatIn">A <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium.</param>
      <param name="medium">A <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> structure, passed by reference, that defines the storage medium in which the data is being passed.</param>
      <param name="release">
        <see langword="true" /> to specify that the data object called, which implements <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />, owns the storage medium after the call returns. This means that the data object must free the medium after it has been used by calling the <see langword="ReleaseStgMedium" /> function. <see langword="false" /> to specify that the caller retains ownership of the storage medium, and the data object called uses the storage medium for the duration of the call only.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLDESC">
      <summary>Contains information needed for transferring a structure element, parameter, or function return value between processes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.dwReserved">
      <summary>Reserved; set to <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.wIDLFlags">
      <summary>Indicates an <see cref="T:System.Runtime.InteropServices.IDLFLAG" /> value describing the type.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLFLAG">
      <summary>Describes how to transfer a structure element, parameter, or function return value between processes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FIN">
      <summary>The parameter passes information from the caller to the callee.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FLCID">
      <summary>The parameter is the local identifier of a client application.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FOUT">
      <summary>The parameter returns information from the callee to the caller.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FRETVAL">
      <summary>The parameter is the return value of the member.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_NONE">
      <summary>Does not specify whether the parameter passes or receives information.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints">
      <summary>Manages the definition of the <see langword="IEnumConnectionPoints" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>Creates a new enumerator that contains the same enumeration state as the current one.</summary>
      <param name="ppenum">When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IConnectionPoint[],System.IntPtr)">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of <see langword="IConnectionPoint" /> references to return in <paramref name="rgelt" />.</param>
      <param name="rgelt">When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this method returns, contains a reference to the actual number of connections enumerated in <paramref name="rgelt" />.</param>
      <returns>
        <see langword="S_OK" /> if the <paramref name="pceltFetched" /> parameter equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>
        <see langword="S_OK" /> if the number of elements skipped equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnections">
      <summary>Manages the definition of the <see langword="IEnumConnections" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>Creates a new enumerator that contains the same enumeration state as the current one.</summary>
      <param name="ppenum">When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Next(System.Int32,System.Runtime.InteropServices.ComTypes.CONNECTDATA[],System.IntPtr)">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of <see cref="T:System.Runtime.InteropServices.CONNECTDATA" /> structures to return in <paramref name="rgelt" />.</param>
      <param name="rgelt">When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this method returns, contains a reference to the actual number of connections enumerated in <paramref name="rgelt" />.</param>
      <returns>
        <see langword="S_OK" /> if the <paramref name="pceltFetched" /> parameter equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>
        <see langword="S_OK" /> if the number of elements skipped equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC">
      <summary>Provides the managed definition of the <see langword="IEnumFORMATETC" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
      <summary>Creates a new enumerator that contains the same enumeration state as the current enumerator.</summary>
      <param name="newEnum">When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> references to return in <paramref name="rgelt" />.</param>
      <param name="rgelt">When this method returns, contains a reference to the enumerated <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> references. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this method returns, contains a reference to the actual number of references enumerated in <paramref name="rgelt" />. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="S_OK" /> if the <paramref name="pceltFetched" /> parameter equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>An HRESULT with the value <see langword="S_OK" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>
        <see langword="S_OK" /> if the number of elements skipped equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumMoniker">
      <summary>Manages the definition of the <see langword="IEnumMoniker" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Clone(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>Creates a new enumerator that contains the same enumeration state as the current one.</summary>
      <param name="ppenum">When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker[],System.IntPtr)">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of monikers to return in <paramref name="rgelt" />.</param>
      <param name="rgelt">When this method returns, contains a reference to the enumerated monikers. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this method returns, contains a reference to the actual number of monikers enumerated in <paramref name="rgelt" />.</param>
      <returns>
        <see langword="S_OK" /> if the <paramref name="pceltFetched" /> parameter equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>
        <see langword="S_OK" /> if the number of elements skipped equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA">
      <summary>Provides the managed definition of the <see langword="IEnumSTATDATA" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Clone(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>Creates a new enumerator that contains the same enumeration state as the current enumerator.</summary>
      <param name="newEnum">When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATDATA[],System.Int32[])">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> references to return in <paramref name="rgelt" />.</param>
      <param name="rgelt">When this method returns, contains a reference to the enumerated <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> references. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this parameter returns, contains a reference to the actual number of references enumerated in <paramref name="rgelt" />. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="S_OK" /> if the <paramref name="pceltFetched" /> parameter equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>An HRESULT with the value <see langword="S_OK" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>
        <see langword="S_OK" /> if the number of elements skipped equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumString">
      <summary>Manages the definition of the <see langword="IEnumString" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Clone(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>Creates a new enumerator that contains the same enumeration state as the current one.</summary>
      <param name="ppenum">When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Next(System.Int32,System.String[],System.IntPtr)">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of strings to return in <paramref name="rgelt" />.</param>
      <param name="rgelt">When this method returns, contains a reference to the enumerated strings. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this method returns, contains a reference to the actual number of strings enumerated in <paramref name="rgelt" />.</param>
      <returns>
        <see langword="S_OK" /> if the <paramref name="pceltFetched" /> parameter equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>
        <see langword="S_OK" /> if the number of elements skipped equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT">
      <summary>Manages the definition of the <see langword="IEnumVARIANT" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone">
      <summary>Creates a new enumerator that contains the same enumeration state as the current one.</summary>
      <returns>An <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT" /> reference to the newly created enumerator.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)">
      <summary>Retrieves a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to return in <c>rgelt</c>.</param>
      <param name="rgVar">When this method returns, contains a reference to the enumerated elements. This parameter is passed uninitialized.</param>
      <param name="pceltFetched">When this method returns, contains a reference to the actual number of elements enumerated in <c>rgelt</c>.</param>
      <returns>
        <see langword="S_OK" /> if the <paramref name="pceltFetched" /> parameter equals the <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>An HRESULT with the value <see langword="S_OK" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)">
      <summary>Skips a specified number of items in the enumeration sequence.</summary>
      <param name="celt">The number of elements to skip in the enumeration.</param>
      <returns>
        <see langword="S_OK" /> if the number of elements skipped equals <paramref name="celt" /> parameter; otherwise, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMoniker">
      <summary>Provides the managed definition of the <see langword="IMoniker" /> interface, with COM functionality from <see langword="IPersist" /> and <see langword="IPersistStream" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>Uses the moniker to bind to the object that it identifies.</summary>
      <param name="pbc">A reference to the <see langword="IBindCtx" /> interface on the bind context object used in this binding operation.</param>
      <param name="pmkToLeft">A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.</param>
      <param name="riidResult">The interface identifier (IID) of the interface that the client intends to use to communicate with the object that the moniker identifies.</param>
      <param name="ppvResult">When this method returns, contains a reference to the interface requested by <paramref name="riidResult" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>Retrieves an interface pointer to the storage that contains the object identified by the moniker.</summary>
      <param name="pbc">A reference to the <see langword="IBindCtx" /> interface on the bind context object used during this binding operation.</param>
      <param name="pmkToLeft">A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.</param>
      <param name="riid">The interface identifier (IID) of the storage interface requested.</param>
      <param name="ppvObj">When this method returns, contains a reference to the interface requested by <paramref name="riid" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Creates a new moniker based on the common prefix that this moniker shares with another moniker.</summary>
      <param name="pmkOther">A reference to the <see langword="IMoniker" /> interface on another moniker to compare with the current moniker for a common prefix.</param>
      <param name="ppmkPrefix">When this method returns, contains the moniker that is the common prefix of the current moniker and <paramref name="pmkOther" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Boolean,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Combines the current moniker with another moniker, creating a new composite moniker.</summary>
      <param name="pmkRight">A reference to the <see langword="IMoniker" /> interface on a moniker to append to the end of the current moniker.</param>
      <param name="fOnlyIfNotGeneric">
        <see langword="true" /> to indicate that the caller requires a nongeneric composition. The operation proceeds only if <paramref name="pmkRight" /> is a moniker class that the current moniker can combine with in some way other than forming a generic composite. <see langword="false" /> to indicate that the method can create a generic composite if necessary.</param>
      <param name="ppmkComposite">When this method returns, contains a reference to the resulting composite moniker. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Enum(System.Boolean,System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>Supplies a pointer to an enumerator that can enumerate the components of a composite moniker.</summary>
      <param name="fForward">
        <see langword="true" /> to enumerate the monikers from left to right. <see langword="false" /> to enumerate from right to left.</param>
      <param name="ppenumMoniker">When this method returns, contains a reference to the enumerator object for the moniker. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetClassID(System.Guid@)">
      <summary>Retrieves the class identifier (CLSID) of an object.</summary>
      <param name="pClassID">When this method returns, contains the CLSID. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String@)">
      <summary>Gets the display name, which is a user-readable representation of the current moniker.</summary>
      <param name="pbc">A reference to the bind context to use in this operation.</param>
      <param name="pmkToLeft">A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.</param>
      <param name="ppszDisplayName">When this method returns, contains the display name string. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetSizeMax(System.Int64@)">
      <summary>Returns the size, in bytes, of the stream needed to save the object.</summary>
      <param name="pcbSize">When this method returns, contains a <see langword="long" /> value indicating the size, in bytes, of the stream needed to save this object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>Provides a number representing the time that the object identified by the current moniker was last changed.</summary>
      <param name="pbc">A reference to the bind context to use in this binding operation.</param>
      <param name="pmkToLeft">A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.</param>
      <param name="pFileTime">When this method returns, contains the time of the last change. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Hash(System.Int32@)">
      <summary>Calculates a 32-bit integer using the internal state of the moniker.</summary>
      <param name="pdwHash">When this method returns, contains the hash value for this moniker. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Inverse(System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Provides a moniker that, when composed to the right of the current moniker or one of similar structure, composes to nothing.</summary>
      <param name="ppmk">When this method returns, contains a moniker that is the inverse of the current moniker. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsDirty">
      <summary>Checks the object for changes since it was last saved.</summary>
      <returns>An <see langword="S_OK" /><see langword="HRESULT" /> value if the object has changed; otherwise, an <see langword="S_FALSE" /><see langword="HRESULT" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Compares the current moniker with a specified moniker and indicates whether they are identical.</summary>
      <param name="pmkOtherMoniker">A reference to the moniker to use for comparison.</param>
      <returns>An <see langword="S_OK" /><see langword="HRESULT" /> value if the monikers are identical; otherwise, an <see langword="S_FALSE" /><see langword="HRESULT" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Determines whether the object that is identified by the current moniker is currently loaded and running.</summary>
      <param name="pbc">A reference to the bind context to use in this binding operation.</param>
      <param name="pmkToLeft">A reference to the moniker to the left of the current moniker if the current moniker is part of a composite.</param>
      <param name="pmkNewlyRunning">A reference to the moniker most recently added to the Running Object Table (ROT).</param>
      <returns>An <see langword="S_OK" /><see langword="HRESULT" /> value if the moniker is running; an <see langword="S_FALSE" /><see langword="HRESULT" /> value if the moniker is not running; or an <see langword="E_UNEXPECTED" /><see langword="HRESULT" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsSystemMoniker(System.Int32@)">
      <summary>Indicates whether this moniker is of one of the system-supplied moniker classes.</summary>
      <param name="pdwMksys">When this method returns, contains a pointer to an integer that is one of the values from the <see langword="MKSYS" /> enumeration, and refers to one of the COM moniker classes. This parameter is passed uninitialized.</param>
      <returns>An <see langword="S_OK" /><see langword="HRESULT" /> value if the moniker is a system moniker; otherwise, an <see langword="S_FALSE" /><see langword="HRESULT" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Load(System.Runtime.InteropServices.ComTypes.IStream)">
      <summary>Initializes an object from the stream where it was previously saved.</summary>
      <param name="pStm">The stream that the object is loaded from.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Reads as many characters of the specified display name as the <see cref="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)" /> understands and builds a moniker corresponding to the portion read.</summary>
      <param name="pbc">A reference to the bind context to use in this binding operation.</param>
      <param name="pmkToLeft">A reference to the moniker that has been built from the display name up to this point.</param>
      <param name="pszDisplayName">A reference to the string containing the remaining display name to parse.</param>
      <param name="pchEaten">When this method returns, contains the number of characters that were consumed in parsing <paramref name="pszDisplayName" />. This parameter is passed uninitialized.</param>
      <param name="ppmkOut">When this method returns, contains a reference to the moniker that was built from <paramref name="pszDisplayName" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Returns a reduced moniker, which is another moniker that refers to the same object as the current moniker but can be bound with equal or greater efficiency.</summary>
      <param name="pbc">A reference to the <see langword="IBindCtx" /> interface on the bind context to use in this binding operation.</param>
      <param name="dwReduceHowFar">A value that specifies how far the current moniker should be reduced.</param>
      <param name="ppmkToLeft">A reference to the moniker to the left of the current moniker.</param>
      <param name="ppmkReduced">When this method returns, contains a reference to the reduced form of the current moniker, which can be <see langword="null" /> if an error occurs or if the current moniker is reduced to nothing. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Supplies a moniker that, when appended to the current moniker (or one with a similar structure), yields the specified moniker.</summary>
      <param name="pmkOther">A reference to the moniker to which a relative path should be taken.</param>
      <param name="ppmkRelPath">When this method returns, contains a reference to the relative moniker. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
      <summary>Saves an object to the specified stream.</summary>
      <param name="pStm">The stream to which the object is saved.</param>
      <param name="fClearDirty">
        <see langword="true" /> to clear the modified flag after the save is complete; otherwise <see langword="false" />.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS">
      <summary>Defines the attributes of an implemented or inherited interface of a type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary>The interface or dispinterface represents the default for the source or sink.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary>Sinks receive events through the virtual function table (VTBL).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary>The member should not be displayed or programmable by users.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary>This member of a coclass is called rather than implemented.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND">
      <summary>Specifies how to invoke a function by <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_FUNC">
      <summary>The member is called using a normal function invocation syntax.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary>The function is invoked using a normal property access syntax.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary>The function is invoked using a property value assignment syntax.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary>The function is invoked using a property reference assignment syntax.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IPersistFile">
      <summary>Provides the managed definition of the <see langword="IPersistFile" /> interface, with functionality from <see langword="IPersist" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetClassID(System.Guid@)">
      <summary>Retrieves the class identifier (CLSID) of an object.</summary>
      <param name="pClassID">When this method returns, contains a reference to the CLSID. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetCurFile(System.String@)">
      <summary>Retrieves either the absolute path to the current working file of the object or, if there is no current working file, the default file name prompt of the object.</summary>
      <param name="ppszFileName">When this method returns, contains the address of a pointer to a zero-terminated string containing the path for the current file, or the default file name prompt (such as *.txt). This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.IsDirty">
      <summary>Checks an object for changes since it was last saved to its current file.</summary>
      <returns>
        <see langword="S_OK" /> if the file has changed since it was last saved; <see langword="S_FALSE" /> if the file has not changed since it was last saved.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Load(System.String,System.Int32)">
      <summary>Opens the specified file and initializes an object from the file contents.</summary>
      <param name="pszFileName">A zero-terminated string containing the absolute path of the file to open.</param>
      <param name="dwMode">A combination of values from the <see langword="STGM" /> enumeration to indicate the access mode in which to open <paramref name="pszFileName" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Save(System.String,System.Boolean)">
      <summary>Saves a copy of the object into the specified file.</summary>
      <param name="pszFileName">A zero-terminated string containing the absolute path of the file to which the object is saved.</param>
      <param name="fRemember">
        <see langword="true" /> to used the <paramref name="pszFileName" /> parameter as the current working file; otherwise <see langword="false" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.SaveCompleted(System.String)">
      <summary>Notifies the object that it can write to its file.</summary>
      <param name="pszFileName">The absolute path of the file where the object was previously saved.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IRunningObjectTable">
      <summary>Provides the managed definition of the <see langword="IRunningObjectTable" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.EnumRunning(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>Enumerates the objects currently registered as running.</summary>
      <param name="ppenumMoniker">When this method returns, contains the new enumerator for the Running Object Table (ROT). This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetObject(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object@)">
      <summary>Returns the registered object if the supplied object name is registered as running.</summary>
      <param name="pmkObjectName">A reference to the moniker to search for in the Running Object Table (ROT).</param>
      <param name="ppunkObject">When this method returns, contains the requested running object. This parameter is passed uninitialized.</param>
      <returns>An <see langword="HRESULT" /> value that indicates the success or failure of the operation.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>Searches for this moniker in the Running Object Table (ROT) and reports the recorded time of change, if present.</summary>
      <param name="pmkObjectName">A reference to the moniker to search for in the Running Object Table (ROT).</param>
      <param name="pfiletime">When this object returns, contains the objects last change time. This parameter is passed uninitialized.</param>
      <returns>An <see langword="HRESULT" /> value that indicates the success or failure of the operation.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Determines whether the specified moniker is currently registered in the Running Object Table (ROT).</summary>
      <param name="pmkObjectName">A reference to the moniker to search for in the Running Object Table (ROT).</param>
      <returns>An <see langword="HRESULT" /> value that indicates the success or failure of the operation.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>Notes the time that a particular object changed so <see langword="IMoniker::GetTimeOfLastChange" /> can report an appropriate change time.</summary>
      <param name="dwRegister">The Running Object Table (ROT) entry of the changed object.</param>
      <param name="pfiletime">A reference to the object's last change time.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Registers that the supplied object has entered the running state.</summary>
      <param name="grfFlags">Specifies whether the Running Object Table's (ROT) reference to <paramref name="punkObject" /> is weak or strong, and controls access to the object through its entry in the ROT.</param>
      <param name="punkObject">A reference to the object being registered as running.</param>
      <param name="pmkObjectName">A reference to the moniker that identifies <paramref name="punkObject" />.</param>
      <returns>A value that can be used to identify this ROT entry in subsequent calls to <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)" /> or <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)">
      <summary>Unregisters the specified object from the Running Object Table (ROT).</summary>
      <param name="dwRegister">The Running Object Table (ROT) entry to revoke.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IStream">
      <summary>Provides the managed definition of the <see langword="IStream" /> interface, with <see langword="ISequentialStream" /> functionality.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
      <summary>Creates a new stream object with its own seek pointer that references the same bytes as the original stream.</summary>
      <param name="ppstm">When this method returns, contains the new stream object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)">
      <summary>Ensures that any changes made to a stream object that is open in transacted mode are reflected in the parent storage.</summary>
      <param name="grfCommitFlags">A value that controls how the changes for the stream object are committed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
      <summary>Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.</summary>
      <param name="pstm">A reference to the destination stream.</param>
      <param name="cb">The number of bytes to copy from the source stream.</param>
      <param name="pcbRead">On successful return, contains the actual number of bytes read from the source.</param>
      <param name="pcbWritten">On successful return, contains the actual number of bytes written to the destination.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>Restricts access to a specified range of bytes in the stream.</summary>
      <param name="libOffset">The byte offset for the beginning of the range.</param>
      <param name="cb">The length of the range, in bytes, to restrict.</param>
      <param name="dwLockType">The requested restrictions on accessing the range.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Read(System.Byte[],System.Int32,System.IntPtr)">
      <summary>Reads a specified number of bytes from the stream object into memory starting at the current seek pointer.</summary>
      <param name="pv">When this method returns, contains the data read from the stream. This parameter is passed uninitialized.</param>
      <param name="cb">The number of bytes to read from the stream object.</param>
      <param name="pcbRead">A pointer to an <see langword="uint" /> variable that receives the actual number of bytes read from the stream object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Revert">
      <summary>Discards all changes that have been made to a transacted stream since the last <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)" /> call.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)">
      <summary>Changes the seek pointer to a new location relative to the beginning of the stream, to the end of the stream, or to the current seek pointer.</summary>
      <param name="dlibMove">The displacement to add to <paramref name="dwOrigin" />.</param>
      <param name="dwOrigin">The origin of the seek. The origin can be the beginning of the file, the current seek pointer, or the end of the file.</param>
      <param name="plibNewPosition">On successful return, contains the offset of the seek pointer from the beginning of the stream.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.SetSize(System.Int64)">
      <summary>Changes the size of the stream object.</summary>
      <param name="libNewSize">The new size of the stream as a number of bytes.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
      <summary>Retrieves the <see cref="T:System.Runtime.InteropServices.STATSTG" /> structure for this stream.</summary>
      <param name="pstatstg">When this method returns, contains a <see langword="STATSTG" /> structure that describes this stream object. This parameter is passed uninitialized.</param>
      <param name="grfStatFlag">Members in the <see langword="STATSTG" /> structure that this method does not return, thus saving some memory allocation operations.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>Removes the access restriction on a range of bytes previously restricted with the <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)" /> method.</summary>
      <param name="libOffset">The byte offset for the beginning of the range.</param>
      <param name="cb">The length, in bytes, of the range to restrict.</param>
      <param name="dwLockType">The access restrictions previously placed on the range.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Write(System.Byte[],System.Int32,System.IntPtr)">
      <summary>Writes a specified number of bytes into the stream object starting at the current seek pointer.</summary>
      <param name="pv">The buffer to write this stream to.</param>
      <param name="cb">The number of bytes to write to the stream.</param>
      <param name="pcbWritten">A pointer to a <see langword="uint" /> variable where this method writes the actual number of bytes written to the stream object. The caller can set this pointer to <see cref="F:System.IntPtr.Zero" />, in which case this method does not provide the actual number of bytes written.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeComp">
      <summary>Provides the managed definition of the <see langword="ITypeComp" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.Bind(System.String,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.DESCKIND@,System.Runtime.InteropServices.ComTypes.BINDPTR@)">
      <summary>Maps a name to a member of a type, or binds global variables and functions contained in a type library.</summary>
      <param name="szName">The name to bind.</param>
      <param name="lHashVal">A hash value for <paramref name="szName" /> computed by <see langword="LHashValOfNameSys" />.</param>
      <param name="wFlags">A flags word containing one or more of the invoke flags defined in the <see langword="INVOKEKIND" /> enumeration.</param>
      <param name="ppTInfo">When this method returns, contains a reference to the type description that contains the item to which it is bound, if a <see langword="FUNCDESC" /> or <see langword="VARDESC" /> was returned. This parameter is passed uninitialized.</param>
      <param name="pDescKind">When this method returns, contains a reference to a <see langword="DESCKIND" /> enumerator that indicates whether the name bound-to is a <see langword="VARDESC" />, <see langword="FUNCDESC" />, or <see langword="TYPECOMP" />. This parameter is passed uninitialized.</param>
      <param name="pBindPtr">When this method returns, contains a reference to the bound-to <see langword="VARDESC" />, <see langword="FUNCDESC" />, or <see langword="ITypeComp" /> interface. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.BindType(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Binds to the type descriptions contained within a type library.</summary>
      <param name="szName">The name to bind.</param>
      <param name="lHashVal">A hash value for <paramref name="szName" /> determined by <see langword="LHashValOfNameSys" />.</param>
      <param name="ppTInfo">When this method returns, contains a reference to an <see langword="ITypeInfo" /> of the type to which <paramref name="szName" /> was bound. This parameter is passed uninitialized.</param>
      <param name="ppTComp">When this method returns, contains a reference to an <see langword="ITypeComp" /> variable. This parameter is passed uninitialized.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo">
      <summary>Provides the managed definition of the Component Automation ITypeInfo interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>Retrieves the addresses of static functions or variables, such as those defined in a DLL.</summary>
      <param name="memid">The member ID of the <see langword="static" /> member's address to retrieve.</param>
      <param name="invKind">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> values that specifies whether the member is a property, and if so, what kind.</param>
      <param name="ppv">When this method returns, contains a reference to the <see langword="static" /> member. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>Creates a new instance of a type that describes a component class (coclass).</summary>
      <param name="pUnkOuter">The object that acts as the controlling <see langword="IUnknown" />.</param>
      <param name="riid">The IID of the interface that the caller uses to communicate with the resulting object.</param>
      <param name="ppvObj">When this method returns, contains a reference to the created object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>Retrieves the type library that contains this type description and its index within that type library.</summary>
      <param name="ppTLB">When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.</param>
      <param name="pIndex">When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Retrieves a description or specification of an entry point for a function in a DLL.</summary>
      <param name="memid">The ID of the member function whose DLL entry description is to be returned.</param>
      <param name="invKind">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> values that specifies the kind of member identified by <paramref name="memid" />.</param>
      <param name="pBstrDllName">If not <see langword="null" />, the function sets <paramref name="pBstrDllName" /> to a <see langword="BSTR" /> that contains the name of the DLL.</param>
      <param name="pBstrName">If not <see langword="null" />, the function sets <c>lpbstrName</c> to a <see langword="BSTR" /> that contains the name of the entry point.</param>
      <param name="pwOrdinal">If not <see langword="null" />, and the function is defined by an ordinal, then <c>lpwOrdinal</c> is set to point to the ordinal.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.</summary>
      <param name="index">The ID of the member whose documentation is to be returned.</param>
      <param name="strName">When this method returns, contains the name of the item method. This parameter is passed uninitialized.</param>
      <param name="strDocString">When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.</param>
      <param name="dwHelpContext">When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.</param>
      <param name="strHelpFile">When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>Retrieves the <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> structure that contains information about a specified function.</summary>
      <param name="index">The index of the function description to return.</param>
      <param name="ppFuncDesc">When this method returns, contains a reference to a <see langword="FUNCDESC" /> structure that describes the specified function. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>Maps between member names and member IDs, and parameter names and parameter IDs.</summary>
      <param name="rgszNames">An array of names to map.</param>
      <param name="cNames">The count of names to map.</param>
      <param name="pMemId">When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>Retrieves the <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> value for one implemented interface or base interface in a type description.</summary>
      <param name="index">The index of the implemented interface or base interface.</param>
      <param name="pImplTypeFlags">When this method returns, contains a reference to the <see langword="IMPLTYPEFLAGS" /> enumeration. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetMops(System.Int32,System.String@)">
      <summary>Retrieves marshaling information.</summary>
      <param name="memid">The member ID that indicates which marshaling information is needed.</param>
      <param name="pBstrMops">When this method returns, contains a reference to the <see langword="opcode" /> string used in marshaling the fields of the structure described by the referenced type description, or returns <see langword="null" /> if there is no information to return. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.</summary>
      <param name="memid">The ID of the member whose name (or names) is to be returned.</param>
      <param name="rgBstrNames">When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.</param>
      <param name="cMaxNames">The length of the <paramref name="rgBstrNames" /> array.</param>
      <param name="pcNames">When this method returns, contains the number of names in the <paramref name="rgBstrNames" /> array. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Retrieves the referenced type descriptions if a type description references other type descriptions.</summary>
      <param name="hRef">A handle to the referenced type description to return.</param>
      <param name="ppTI">When this method returns, contains the referenced type description. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>Retrieves the type description of the implemented interface types if a type description describes a COM class.</summary>
      <param name="index">The index of the implemented type whose handle is returned.</param>
      <param name="href">When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)">
      <summary>Retrieves a <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> structure that contains the attributes of the type description.</summary>
      <param name="ppTypeAttr">When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Retrieves the <see langword="ITypeComp" /> interface for the type description, which enables a client compiler to bind to the type description's members.</summary>
      <param name="ppTComp">When this method returns, contains a reference to the <see langword="ITypeComp" /> interface of the containing type library. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>Retrieves a <see langword="VARDESC" /> structure that describes the specified variable.</summary>
      <param name="index">The index of the variable description to return.</param>
      <param name="ppVarDesc">When this method returns, contains a reference to the <see langword="VARDESC" /> structure that describes the specified variable. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>Invokes a method, or accesses a property of an object, that implements the interface described by the type description.</summary>
      <param name="pvInstance">A reference to the interface described by this type description.</param>
      <param name="memid">A value that identifies the interface member.</param>
      <param name="wFlags">Flags that describe the context of the invoke call.</param>
      <param name="pDispParams">A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.</param>
      <param name="pVarResult">A reference to the location at which the result is to be stored. If <paramref name="wFlags" /> specifies <see langword="DISPATCH_PROPERTYPUT" /> or <see langword="DISPATCH_PROPERTYPUTREF" />, <paramref name="pVarResult" /> is ignored. Set to <see langword="null" /> if no result is desired.</param>
      <param name="pExcepInfo">A pointer to an exception information structure, which is filled in only if <see langword="DISP_E_EXCEPTION" /> is returned.</param>
      <param name="puArgErr">If <see langword="Invoke" /> returns <see langword="DISP_E_TYPEMISMATCH" />, <paramref name="puArgErr" /> indicates the index within <c>rgvarg</c> of the argument with the incorrect type. If more than one argument returns an error, <paramref name="puArgErr" /> indicates only the first argument with an error. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseFuncDesc(System.IntPtr)">
      <summary>Releases a <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> structure previously returned by the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> method.</summary>
      <param name="pFuncDesc">A reference to the <see langword="FUNCDESC" /> structure to release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseTypeAttr(System.IntPtr)">
      <summary>Releases a <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> structure previously returned by the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> method.</summary>
      <param name="pTypeAttr">A reference to the <see langword="TYPEATTR" /> structure to release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseVarDesc(System.IntPtr)">
      <summary>Releases a <see langword="VARDESC" /> structure previously returned by the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> method.</summary>
      <param name="pVarDesc">A reference to the <see langword="VARDESC" /> structure to release.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo2">
      <summary>Provides the managed definition of the <see langword="ITypeInfo2" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>Retrieves the addresses of static functions or variables, such as those defined in a DLL.</summary>
      <param name="memid">The member ID of the <see langword="static" /> member's address to retrieve.</param>
      <param name="invKind">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> values that specifies whether the member is a property, and if so, what kind.</param>
      <param name="ppv">When this method returns, contains a reference to the <see langword="static" /> member. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>Creates a new instance of a type that describes a component class (coclass).</summary>
      <param name="pUnkOuter">An object that acts as the controlling <see langword="IUnknown" />.</param>
      <param name="riid">The IID of the interface that the caller uses to communicate with the resulting object.</param>
      <param name="ppvObj">When this method returns, contains a reference to the created object. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllCustData(System.IntPtr)">
      <summary>Gets all custom data items for the library.</summary>
      <param name="pCustData">A pointer to <see langword="CUSTDATA" />, which holds all custom data items.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllFuncCustData(System.Int32,System.IntPtr)">
      <summary>Gets all custom data from the specified function.</summary>
      <param name="index">The index of the function to get the custom data for.</param>
      <param name="pCustData">A pointer to <see langword="CUSTDATA" />, which holds all custom data items.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllImplTypeCustData(System.Int32,System.IntPtr)">
      <summary>Gets all custom data for the specified implementation type.</summary>
      <param name="index">The index of the implementation type for the custom data.</param>
      <param name="pCustData">A pointer to <see langword="CUSTDATA" /> that holds all custom data items.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllParamCustData(System.Int32,System.Int32,System.IntPtr)">
      <summary>Gets all of the custom data for the specified function parameter.</summary>
      <param name="indexFunc">The index of the function to get the custom data for.</param>
      <param name="indexParam">The index of the parameter of this function to get the custom data for.</param>
      <param name="pCustData">A pointer to <see langword="CUSTDATA" />, which holds all custom data items.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllVarCustData(System.Int32,System.IntPtr)">
      <summary>Gets the variable for the custom data.</summary>
      <param name="index">The index of the variable to get the custom data for.</param>
      <param name="pCustData">A pointer to <see langword="CUSTDATA" />, which holds all custom data items.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>Retrieves the type library that contains this type description and its index within that type library.</summary>
      <param name="ppTLB">When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.</param>
      <param name="pIndex">When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetCustData(System.Guid@,System.Object@)">
      <summary>Gets the custom data.</summary>
      <param name="guid">The GUID used to identify the data.</param>
      <param name="pVarVal">When this method returns, contains an <see langword="Object" /> that specifies where to put the retrieved data. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Retrieves a description or specification of an entry point for a function in a DLL.</summary>
      <param name="memid">The ID of the member function whose DLL entry description is to be returned.</param>
      <param name="invKind">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> values that specifies the kind of member identified by <paramref name="memid" />.</param>
      <param name="pBstrDllName">If not <see langword="null" />, the function sets <paramref name="pBstrDllName" /> to a <see langword="BSTR" /> that contains the name of the DLL.</param>
      <param name="pBstrName">If not <see langword="null" />, the function sets <c>lpbstrName</c> to a <see langword="BSTR" /> that contains the name of the entry point.</param>
      <param name="pwOrdinal">If not <see langword="null" />, and the function is defined by an ordinal, then <c>lpwOrdinal</c> is set to point to the ordinal.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.</summary>
      <param name="index">The ID of the member whose documentation is to be returned.</param>
      <param name="strName">When this method returns, contains the name of the item method. This parameter is passed uninitialized.</param>
      <param name="strDocString">When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.</param>
      <param name="dwHelpContext">When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.</param>
      <param name="strHelpFile">When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>Retrieves the documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.</summary>
      <param name="memid">The member identifier for the type description.</param>
      <param name="pbstrHelpString">When this method returns, contains a <see langword="BSTR" /> that contains the name of the specified item. If the caller does not need the item name, <paramref name="pbstrHelpString" /> can be <see langword="null" />. This parameter is passed uninitialized.</param>
      <param name="pdwHelpStringContext">When this method returns, contains the Help localization context. If the caller does not need the Help context, <paramref name="pdwHelpStringContext" /> can be <see langword="null" />. This parameter is passed uninitialized.</param>
      <param name="pbstrHelpStringDll">When this method returns, contains a <see langword="BSTR" /> that contains the fully qualified name of the file containing the DLL used for the Help file. If the caller does not need the file name, <paramref name="pbstrHelpStringDll" /> can be <see langword="null" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>Gets the custom data from the specified function.</summary>
      <param name="index">The index of the function to get the custom data for.</param>
      <param name="guid">The GUID used to identify the data.</param>
      <param name="pVarVal">When this method returns, contains an <see langword="Object" /> that specified where to put the data. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>Retrieves the <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> structure that contains information about a specified function.</summary>
      <param name="index">The index of the function description to return.</param>
      <param name="ppFuncDesc">When this method returns, contains a reference to a <see langword="FUNCDESC" /> structure that describes the specified function. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncIndexOfMemId(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.Int32@)">
      <summary>Binds to a specific member based on a known DISPID, where the member name is not known (for example, when binding to a default member).</summary>
      <param name="memid">The member identifier.</param>
      <param name="invKind">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> values that specifies the kind of member identified by memid.</param>
      <param name="pFuncIndex">When this method returns, contains an index into the function. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>Maps between member names and member IDs, and parameter names and parameter IDs.</summary>
      <param name="rgszNames">An array of names to map.</param>
      <param name="cNames">The count of names to map.</param>
      <param name="pMemId">When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>Gets the implementation type of the custom data.</summary>
      <param name="index">The index of the implementation type for the custom data.</param>
      <param name="guid">The GUID used to identify the data.</param>
      <param name="pVarVal">When this method returns, contains an <see langword="Object" /> that specifies where to put the retrieved data. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>Retrieves the <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> value for one implemented interface or base interface in a type description.</summary>
      <param name="index">The index of the implemented interface or base interface.</param>
      <param name="pImplTypeFlags">When this method returns, contains a reference to the <see langword="IMPLTYPEFLAGS" /> enumeration. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetMops(System.Int32,System.String@)">
      <summary>Retrieves marshaling information.</summary>
      <param name="memid">The member ID that indicates which marshaling information is needed.</param>
      <param name="pBstrMops">When this method returns, contains a reference to the <see langword="opcode" /> string used in marshaling the fields of the structure described by the referenced type description, or returns <see langword="null" /> if there is no information to return. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.</summary>
      <param name="memid">The ID of the member whose name (or names) is to be returned.</param>
      <param name="rgBstrNames">When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.</param>
      <param name="cMaxNames">The length of the <paramref name="rgBstrNames" /> array.</param>
      <param name="pcNames">When this method returns, contains the number of names in the <paramref name="rgBstrNames" /> array. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetParamCustData(System.Int32,System.Int32,System.Guid@,System.Object@)">
      <summary>Gets the specified custom data parameter.</summary>
      <param name="indexFunc">The index of the function to get the custom data for.</param>
      <param name="indexParam">The index of the parameter of this function to get the custom data for.</param>
      <param name="guid">The GUID used to identify the data.</param>
      <param name="pVarVal">When this method returns, contains an <see langword="Object" /> that specifies where to put the retrieved data. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Retrieves the referenced type descriptions, if a type description references other type descriptions.</summary>
      <param name="hRef">A handle to the referenced type description to return.</param>
      <param name="ppTI">When this method returns, contains the referenced type description. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>Retrieves the type description of the implemented interface types, if a type description describes a COM class.</summary>
      <param name="index">The index of the implemented type whose handle is returned.</param>
      <param name="href">When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeAttr(System.IntPtr@)">
      <summary>Retrieves a <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> structure that contains the attributes of the type description.</summary>
      <param name="ppTypeAttr">When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Retrieves the <see langword="ITypeComp" /> interface for the type description, which enables a client compiler to bind to the type description's members.</summary>
      <param name="ppTComp">When this method returns, contains a reference to the <see langword="ITypeComp" /> of the containing type library. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeFlags(System.Int32@)">
      <summary>Returns the type flags without any allocations. This method returns a <see langword="DWORD" /> type flag, which expands the type flags without growing the <see langword="TYPEATTR" /> (type attribute).</summary>
      <param name="pTypeFlags">When this method returns, contains a <see langword="DWORD" /> reference to a <see langword="TYPEFLAG" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeKind(System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>Returns the <see langword="TYPEKIND" /> enumeration quickly, without doing any allocations.</summary>
      <param name="pTypeKind">When this method returns, contains a reference to a <see langword="TYPEKIND" /> enumeration. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>Gets the variable for the custom data.</summary>
      <param name="index">The index of the variable to get the custom data for.</param>
      <param name="guid">The GUID used to identify the data.</param>
      <param name="pVarVal">When this method returns, contains an <see langword="Object" /> that specifies where to put the retrieved data. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>Retrieves a <see langword="VARDESC" /> structure that describes the specified variable.</summary>
      <param name="index">The index of the variable description to return.</param>
      <param name="ppVarDesc">When this method returns, contains a reference to the <see langword="VARDESC" /> structure that describes the specified variable. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarIndexOfMemId(System.Int32,System.Int32@)">
      <summary>Binds to a specific member based on a known <see langword="DISPID" />, where the member name is not known (for example, when binding to a default member).</summary>
      <param name="memid">The member identifier.</param>
      <param name="pVarIndex">When this method returns, contains an index of <paramref name="memid" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>Invokes a method, or accesses a property of an object, that implements the interface described by the type description.</summary>
      <param name="pvInstance">A reference to the interface described by this type description.</param>
      <param name="memid">Identifier of the interface member.</param>
      <param name="wFlags">Flags describing the context of the invoke call.</param>
      <param name="pDispParams">A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.</param>
      <param name="pVarResult">A reference to the location at which the result is to be stored. If <paramref name="wFlags" /> specifies <see langword="DISPATCH_PROPERTYPUT" /> or <see langword="DISPATCH_PROPERTYPUTREF" />, <paramref name="pVarResult" /> is ignored. Set to <see langword="null" /> if no result is desired.</param>
      <param name="pExcepInfo">A pointer to an exception information structure, which is filled in only if <see langword="DISP_E_EXCEPTION" /> is returned.</param>
      <param name="puArgErr">If <see langword="Invoke" /> returns <see langword="DISP_E_TYPEMISMATCH" />, <paramref name="puArgErr" /> indicates the index of the argument with incorrect type. If more than one argument returns an error, <paramref name="puArgErr" /> indicates only the first argument with an error.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseFuncDesc(System.IntPtr)">
      <summary>Releases a <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> structure previously returned by the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> method.</summary>
      <param name="pFuncDesc">A reference to the <see langword="FUNCDESC" /> structure to release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseTypeAttr(System.IntPtr)">
      <summary>Releases a <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> structure previously returned by the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> method.</summary>
      <param name="pTypeAttr">A reference to the <see langword="TYPEATTR" /> structure to release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseVarDesc(System.IntPtr)">
      <summary>Releases a <see langword="VARDESC" /> structure previously returned by the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> method.</summary>
      <param name="pVarDesc">A reference to the <see langword="VARDESC" /> structure to release.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib">
      <summary>Provides the managed definition of the <see langword="ITypeLib" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>Finds occurrences of a type description in a type library.</summary>
      <param name="szNameBuf">The name to search for. This is an in/out parameter.</param>
      <param name="lHashVal">A hash value to speed up the search, computed by the <see langword="LHashValOfNameSys" /> function. If <paramref name="lHashVal" /> is 0, a value is computed.</param>
      <param name="ppTInfo">When this method returns, contains an array of pointers to the type descriptions that contain the name specified in <paramref name="szNameBuf" />. This parameter is passed uninitialized.</param>
      <param name="rgMemId">An array of the <see langword="MEMBERID" /> 's of the found items; <paramref name="rgMemId" /> [i] is the <see langword="MEMBERID" /> that indexes into the type description specified by <paramref name="ppTInfo" /> [i]. Cannot be <see langword="null" />.</param>
      <param name="pcFound">On entry, indicates how many instances to look for. For example, <paramref name="pcFound" /> = 1 can be called to find the first occurrence. The search stops when one instance is found.  
  
 On exit, indicates the number of instances that were found. If the <see langword="in" /> and <see langword="out" /> values of <paramref name="pcFound" /> are identical, there might be more type descriptions that contain the name.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.</summary>
      <param name="index">The index of the type description whose documentation is to be returned.</param>
      <param name="strName">When this method returns, contains a string that represents the name of the specified item. This parameter is passed uninitialized.</param>
      <param name="strDocString">When this method returns, contains a string that represents the documentation string for the specified item. This parameter is passed uninitialized.</param>
      <param name="dwHelpContext">When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.</param>
      <param name="strHelpFile">When this method returns, contains a string that represents the fully qualified name of the Help file. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)">
      <summary>Retrieves the structure that contains the library's attributes.</summary>
      <param name="ppTLibAttr">When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Enables a client compiler to bind to a library's types, variables, constants, and global functions.</summary>
      <param name="ppTComp">When this method returns, contains an instance of a <see langword="ITypeComp" /> instance for this <see langword="ITypeLib" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Retrieves the specified type description in the library.</summary>
      <param name="index">The index of the <see langword="ITypeInfo" /> interface to return.</param>
      <param name="ppTI">When this method returns, contains an <see langword="ITypeInfo" /> describing the type referenced by <paramref name="index" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoCount">
      <summary>Returns the number of type descriptions in the type library.</summary>
      <returns>The number of type descriptions in the type library.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Retrieves the type description that corresponds to the specified GUID.</summary>
      <param name="guid">The IID of the interface or CLSID of the class whose type info is requested.</param>
      <param name="ppTInfo">When this method returns, contains the requested <see langword="ITypeInfo" /> interface. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>Retrieves the type of a type description.</summary>
      <param name="index">The index of the type description within the type library.</param>
      <param name="pTKind">When this method returns, contains a reference to the <see langword="TYPEKIND" /> enumeration for the type description. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.IsName(System.String,System.Int32)">
      <summary>Indicates whether a passed-in string contains the name of a type or member described in the library.</summary>
      <param name="szNameBuf">The string to test. This is an in/out parameter.</param>
      <param name="lHashVal">The hash value of <paramref name="szNameBuf" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="szNameBuf" /> was found in the type library; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary>Releases the <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> structure originally obtained from the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> method.</summary>
      <param name="pTLibAttr">The <see langword="TLIBATTR" /> structure to release.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib2">
      <summary>Provides a managed definition of the <see langword="ITypeLib2" /> interface.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>Finds occurrences of a type description in a type library.</summary>
      <param name="szNameBuf">The name to search for.</param>
      <param name="lHashVal">A hash value to speed up the search, computed by the <see langword="LHashValOfNameSys" /> function. If <paramref name="lHashVal" /> is 0, a value is computed.</param>
      <param name="ppTInfo">When this method returns, contains an array of pointers to the type descriptions that contain the name specified in <paramref name="szNameBuf" />. This parameter is passed uninitialized.</param>
      <param name="rgMemId">When this method returns, contains an array of the <see langword="MEMBERID" />s of the found items; <paramref name="rgMemId" /> [i] is the <see langword="MEMBERID" /> that indexes into the type description specified by <paramref name="ppTInfo" /> [i]. This parameter cannot be <see langword="null" />. This parameter is passed uninitialized.</param>
      <param name="pcFound">On entry, a value, passed by reference, that indicates how many instances to look for. For example, <paramref name="pcFound" /> = 1 can be called to find the first occurrence. The search stops when one instance is found.  
  
 On exit, indicates the number of instances that were found. If the <see langword="in" /> and <see langword="out" /> values of <paramref name="pcFound" /> are identical, there might be more type descriptions that contain the name.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetAllCustData(System.IntPtr)">
      <summary>Gets all custom data items for the library.</summary>
      <param name="pCustData">A pointer to <see langword="CUSTDATA" />, which holds all custom data items.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetCustData(System.Guid@,System.Object@)">
      <summary>Gets the custom data.</summary>
      <param name="guid">A <see cref="T:System.Guid" /> , passed by reference, that is used to identify the data.</param>
      <param name="pVarVal">When this method returns, contains an object that specifies where to put the retrieved data. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.</summary>
      <param name="index">An index of the type description whose documentation is to be returned.</param>
      <param name="strName">When this method returns, contains a string that specifies the name of the specified item. This parameter is passed uninitialized.</param>
      <param name="strDocString">When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.</param>
      <param name="dwHelpContext">When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.</param>
      <param name="strHelpFile">When this method returns, contains a string that specifies the fully qualified name of the Help file. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>Retrieves the library's documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.</summary>
      <param name="index">An index of the type description whose documentation is to be returned; if <paramref name="index" /> is -1, the documentation for the library is returned.</param>
      <param name="pbstrHelpString">When this method returns, contains a BSTR that specifies the name of the specified item. If the caller does not need the item name, <paramref name="pbstrHelpString" /> can be <see langword="null" />. This parameter is passed uninitialized.</param>
      <param name="pdwHelpStringContext">When this method returns, contains the Help localization context. If the caller does not need the Help context, <paramref name="pdwHelpStringContext" /> can be <see langword="null" />. This parameter is passed uninitialized.</param>
      <param name="pbstrHelpStringDll">When this method returns, contains a BSTR that specifies the fully qualified name of the file containing the DLL used for Help file. If the caller does not need the file name, <paramref name="pbstrHelpStringDll" /> can be <see langword="null" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibAttr(System.IntPtr@)">
      <summary>Retrieves the structure that contains the library's attributes.</summary>
      <param name="ppTLibAttr">When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibStatistics(System.IntPtr,System.Int32@)">
      <summary>Returns statistics about a type library that are required for efficient sizing of hash tables.</summary>
      <param name="pcUniqueNames">A pointer to a count of unique names. If the caller does not need this information, set to <see langword="null" />.</param>
      <param name="pcchUniqueNames">When this method returns, contains a pointer to a change in the count of unique names. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Enables a client compiler to bind to a library's types, variables, constants, and global functions.</summary>
      <param name="ppTComp">When this method returns, contains an <see langword="ITypeComp" /> instance for this <see langword="ITypeLib" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Retrieves the specified type description in the library.</summary>
      <param name="index">An index of the <see langword="ITypeInfo" /> interface to return.</param>
      <param name="ppTI">When this method returns, contains an <see langword="ITypeInfo" /> describing the type referenced by <paramref name="index" />. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoCount">
      <summary>Returns the number of type descriptions in the type library.</summary>
      <returns>The number of type descriptions in the type library.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Retrieves the type description that corresponds to the specified GUID.</summary>
      <param name="guid">The <see cref="T:System.Guid" />, passed by reference, that represents the IID of the <see langword="CLSID" /> interface of the class whose type info is requested.</param>
      <param name="ppTInfo">When this method returns, contains the requested <see langword="ITypeInfo" /> interface. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>Retrieves the type of a type description.</summary>
      <param name="index">The index of the type description within the type library.</param>
      <param name="pTKind">When this method returns, contains a reference to the <see langword="TYPEKIND" /> enumeration for the type description. This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.IsName(System.String,System.Int32)">
      <summary>Indicates whether a passed-in string contains the name of a type or member described in the library.</summary>
      <param name="szNameBuf">The string to test.</param>
      <param name="lHashVal">The hash value of <paramref name="szNameBuf" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="szNameBuf" /> was found in the type library; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.ReleaseTLibAttr(System.IntPtr)">
      <summary>Releases the <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> structure originally obtained from the <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> method.</summary>
      <param name="pTLibAttr">The <see langword="TLIBATTR" /> structure to release.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.LIBFLAGS">
      <summary>Defines flags that apply to type libraries.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary>The type library describes controls and should not be displayed in type browsers intended for nonvisual objects.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary>The type library exists in a persisted form on disk.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary>The type library should not be displayed to users, although its use is not restricted. The type library should be used by controls. Hosts should create a new type library that wraps the control with extended properties.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary>The type library is restricted, and should not be displayed to users.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMDESC">
      <summary>Contains information about how to transfer a structure element, parameter, or function return value between processes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.lpVarValue">
      <summary>Represents a pointer to a value that is being passed between processes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.wParamFlags">
      <summary>Represents bitmask values that describe the structure element, parameter, or return value.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMFLAG">
      <summary>Describes how to transfer a structure element, parameter, or function return value between processes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
      <summary>The parameter has custom data.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASDEFAULT">
      <summary>The parameter has default behaviors defined.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FIN">
      <summary>The parameter passes information from the caller to the callee.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FLCID">
      <summary>The parameter is the local identifier of a client application.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOPT">
      <summary>The parameter is optional.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOUT">
      <summary>The parameter returns information from the callee to the caller.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FRETVAL">
      <summary>The parameter is the return value of the member.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_NONE">
      <summary>Does not specify whether the parameter passes or receives information.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATDATA">
      <summary>Provides the managed definition of the <see langword="STATDATA" /> structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advf">
      <summary>Represents the <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> enumeration value that determines when the advisory sink is notified of changes in the data.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advSink">
      <summary>Represents the <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> interface that will receive change notifications.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.connection">
      <summary>Represents the token that uniquely identifies the advisory connection. This token is returned by the method that sets up the advisory connection.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.formatetc">
      <summary>Represents the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure for the data of interest to the advise sink. The advise sink receives notification of changes to the data specified by this <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATSTG">
      <summary>Contains statistical information about an open storage, stream, or byte-array object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.atime">
      <summary>Specifies the last access time for this storage, stream, or byte array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.cbSize">
      <summary>Specifies the size, in bytes, of the stream or byte array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.clsid">
      <summary>Indicates the class identifier for the storage object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.ctime">
      <summary>Indicates the creation time for this storage, stream, or byte array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfLocksSupported">
      <summary>Indicates the types of region locking supported by the stream or byte array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfMode">
      <summary>Indicates the access mode that was specified when the object was opened.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfStateBits">
      <summary>Indicates the current state bits of the storage object (the value most recently set by the <see langword="IStorage::SetStateBits" /> method).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.mtime">
      <summary>Indicates the last modification time for this storage, stream, or byte array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.pwcsName">
      <summary>Represents a pointer to a null-terminated string containing the name of the object described by this structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.reserved">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.type">
      <summary>Indicates the type of storage object, which is one of the values from the <see langword="STGTY" /> enumeration.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM">
      <summary>Provides the managed definition of the <see langword="STGMEDIUM" /> structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease">
      <summary>Represents a pointer to an interface instance that allows the sending process to control the way the storage is released when the receiving process calls the <see langword="ReleaseStgMedium" /> function. If <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> is <see langword="null" />, <see langword="ReleaseStgMedium" /> uses default procedures to release the storage; otherwise, <see langword="ReleaseStgMedium" /> uses the specified <see langword="IUnknown" /> interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed">
      <summary>Specifies the type of storage medium. The marshaling and unmarshaling routines use this value to determine which union member was used. This value must be one of the elements of the <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> enumeration.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.unionmember">
      <summary>Represents a handle, string, or interface pointer that the receiving process can use to access the data being transferred.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.SYSKIND">
      <summary>Identifies the target operating system platform.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_MAC">
      <summary>The target operating system for the type library is Apple Macintosh. By default, all data fields are aligned on even-byte boundaries.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN16">
      <summary>The target operating system for the type library is 16-bit Windows systems. By default, data fields are packed.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN32">
      <summary>The target operating system for the type library is 32-bit Windows systems. By default, data fields are naturally aligned (for example, 2-byte integers are aligned on even-byte boundaries; 4-byte integers are aligned on quad-word boundaries, and so on).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN64">
      <summary>The target operating system for the type library is 64-bit Windows systems.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYMED">
      <summary>Provides the managed definition of the <see langword="TYMED" /> structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ENHMF">
      <summary>The storage medium is an enhanced metafile. If the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> member is <see langword="null" />, the destination process should use <see langword="DeleteEnhMetaFile" /> to delete the bitmap.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE">
      <summary>The storage medium is a disk file identified by a path. If the <see langword="STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> member is <see langword="null" />, the destination process should use <see langword="OpenFile" /> to delete the file.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_GDI">
      <summary>The storage medium is a Graphics Device Interface (GDI) component (HBITMAP). If the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> member is <see langword="null" />, the destination process should use <see langword="DeleteObject" /> to delete the bitmap.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL">
      <summary>The storage medium is a global memory handle (HGLOBAL). Allocate the global handle with the GMEM_SHARE flag. If the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> member is <see langword="null" />, the destination process should use <see langword="GlobalFree" /> to release the memory.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE">
      <summary>The storage medium is a storage component identified by an <see langword="IStorage" /> pointer. The data is in the streams and storages contained by this <see langword="IStorage" /> instance. If the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> member is not <see langword="null" />, the destination process should use <see langword="IStorage::Release" /> to release the storage component.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM">
      <summary>The storage medium is a stream object identified by an <see langword="IStream" /> pointer. Use <see langword="ISequentialStream::Read" /> to read the data. If the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> member is not <see langword="null" />, the destination process should use <see langword="IStream::Release" /> to release the stream component.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_MFPICT">
      <summary>The storage medium is a metafile (HMETAFILE). Use the Windows or WIN32 functions to access the metafile's data. If the <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> member is <see langword="null" />, the destination process should use <see langword="DeleteMetaFile" /> to delete the bitmap.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_NULL">
      <summary>No data is being passed.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEATTR">
      <summary>Contains attributes of a <see langword="UCOMITypeInfo" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbAlignment">
      <summary>Specifies the byte alignment for an instance of this type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeInstance">
      <summary>The size of an instance of this type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeVft">
      <summary>The size of this type's virtual method table (VTBL).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cFuncs">
      <summary>Indicates the number of functions on the interface this structure describes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cImplTypes">
      <summary>Indicates the number of implemented interfaces on the interface this structure describes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cVars">
      <summary>Indicates the number of variables and data fields on the interface described by this structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.dwReserved">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.guid">
      <summary>The GUID of the type information.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.idldescType">
      <summary>IDL attributes of the described type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lcid">
      <summary>Locale of member names and documentation strings.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lpstrSchema">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.MEMBER_ID_NIL">
      <summary>A constant used with the <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidConstructor" /> and <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidDestructor" /> fields.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidConstructor">
      <summary>ID of constructor, or <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" /> if none.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidDestructor">
      <summary>ID of destructor, or <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" /> if none.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.tdescAlias">
      <summary>If <see cref="F:System.Runtime.InteropServices.TYPEATTR.typekind" /> == <see cref="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS" />, specifies the type for which this type is an alias.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.typekind">
      <summary>A <see cref="T:System.Runtime.InteropServices.TYPEKIND" /> value describing the type this information describes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMajorVerNum">
      <summary>Major version number.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMinorVerNum">
      <summary>Minor version number.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wTypeFlags">
      <summary>A <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> value describing this information.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEDESC">
      <summary>Describes the type of a variable, return type of a function, or the type of a function parameter.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.lpValue">
      <summary>If the variable is <see langword="VT_SAFEARRAY" /> or <see langword="VT_PTR" />, the <see langword="lpValue" /> field contains a pointer to a <see langword="TYPEDESC" /> that specifies the element type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.vt">
      <summary>Indicates the variant type for the item described by this <see langword="TYPEDESC" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEFLAGS">
      <summary>Defines the properties and attributes of a type description.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAGGREGATABLE">
      <summary>The class supports aggregation.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAPPOBJECT">
      <summary>A type description that describes an <see langword="Application" /> object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCANCREATE">
      <summary>Instances of the type can be created by <see langword="ITypeInfo::CreateInstance" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCONTROL">
      <summary>The type is a control from which other types will be derived and should not be displayed to users.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDISPATCHABLE">
      <summary>Indicates that the interface derives from <see langword="IDispatch" />, either directly or indirectly. This flag is computed; there is no Object Description Language for the flag.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDUAL">
      <summary>The interface supplies both <see langword="IDispatch" /> and VTBL binding.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FHIDDEN">
      <summary>The type should not be displayed to browsers.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FLICENSED">
      <summary>The type is licensed.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE">
      <summary>The interface cannot add members at run time.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FOLEAUTOMATION">
      <summary>The types used in the interface are fully compatible with Automation, including VTBL binding support. Setting dual on an interface sets both this flag and the  <see cref="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL" />. This flag is not allowed on dispinterfaces.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPREDECLID">
      <summary>The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPROXY">
      <summary>Indicates that the interface will be using a proxy/stub dynamic link library. This flag specifies that the type library proxy should not be unregistered when the type library is unregistered.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREPLACEABLE">
      <summary>The object supports <see langword="IConnectionPointWithDefault" />, and has default behaviors.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FRESTRICTED">
      <summary>Should not be accessible from macro languages. This flag is intended for system-level types or types that type browsers should not display.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREVERSEBIND">
      <summary>Indicates base interfaces should be checked for name resolution before checking children, which is the reverse of the default behavior.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEKIND">
      <summary>Specifies various types of data and functions.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ALIAS">
      <summary>A type that is an alias for another type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_COCLASS">
      <summary>A set of implemented components interfaces.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_DISPATCH">
      <summary>A set of methods and properties that are accessible through <see langword="IDispatch::Invoke" />. By default, dual interfaces return <see langword="TKIND_DISPATCH" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ENUM">
      <summary>A set of enumerators.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_INTERFACE">
      <summary>A type that has virtual functions, all of which are pure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MAX">
      <summary>End-of-enumeration marker.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MODULE">
      <summary>A module that can have only static functions and data (for example, a DLL).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_RECORD">
      <summary>A structure with no methods.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_UNION">
      <summary>A union of all members that have an offset of zero.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPELIBATTR">
      <summary>Identifies a particular type library and provides localization support for member names.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.guid">
      <summary>Represents a globally unique library ID of a type library.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.lcid">
      <summary>Represents a locale ID of a type library.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.syskind">
      <summary>Represents the target hardware platform of a type library.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wLibFlags">
      <summary>Represents library flags.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMajorVerNum">
      <summary>Represents the major version number of a type library.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMinorVerNum">
      <summary>Represents the minor version number of a type library.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC">
      <summary>Describes a variable, constant, or data member.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.desc">
      <summary>Contains information about a variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.elemdescVar">
      <summary>Contains the variable type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.lpstrSchema">
      <summary>This field is reserved for future use.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.memid">
      <summary>Indicates the member ID of a variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.varkind">
      <summary>Defines how to marshal a variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.wVarFlags">
      <summary>Defines the properties of a variable.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION">
      <summary>Contains information about a variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.lpvarValue">
      <summary>Describes a symbolic constant.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.oInst">
      <summary>Indicates the offset of this variable within the instance.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARFLAGS">
      <summary>Identifies the constants that define the properties of a variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FBINDABLE">
      <summary>The variable supports data binding.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTBIND">
      <summary>The variable is the single property that best represents the object. Only one variable in type information can have this attribute.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
      <summary>Permits an optimization in which the compiler looks for a member named "xyz" on the type of "abc". If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDISPLAYBIND">
      <summary>The variable is displayed to the user as bindable. <see cref="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE" /> must also be set.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FHIDDEN">
      <summary>The variable should not be displayed to the user in a browser, although it exists and is bindable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FIMMEDIATEBIND">
      <summary>The variable is mapped as individual bindable properties.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FNONBROWSABLE">
      <summary>The variable appears in an object browser, but not in a properties browser.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREADONLY">
      <summary>Assignment to the variable should not be allowed.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREPLACEABLE">
      <summary>Tags the interface as having default behaviors.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREQUESTEDIT">
      <summary>When set, any attempt to directly change the property results in a call to <see langword="IPropertyNotifySink::OnRequestEdit" />. The implementation of <see langword="OnRequestEdit" /> determines if the change is accepted.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FRESTRICTED">
      <summary>The variable should not be accessible from macro languages. This flag is intended for system-level variables or variables that you do not want type browsers to display.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FSOURCE">
      <summary>The variable returns an object that is a source of events.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FUIDEFAULT">
      <summary>The variable is the default display in the user interface.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARKIND">
      <summary>Defines the kind of variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_CONST">
      <summary>The <see langword="VARDESC" /> structure describes a symbolic constant. There is no memory associated with it.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_DISPATCH">
      <summary>The variable can be accessed only through <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_PERINSTANCE">
      <summary>The variable is a field or member of the type. It exists at a fixed offset within each instance of the type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_STATIC">
      <summary>There is only one instance of the variable.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
      <summary>Specifies the method to call when you unregister an assembly for use from COM; this allows for the execution of user-written code during the unregistration process.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComUnregisterFunctionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComWrappers">
      <summary>Class for managing wrappers of COM IUnknown types.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.#ctor">
      <summary>Instance constructor.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.ComputeVtables(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags,System.Int32@)">
      <summary>Computes the desired Vtable for <paramref name="obj" />, respecting the values of <paramref name="flags" />.</summary>
      <param name="obj">Target of the returned Vtables.</param>
      <param name="flags">Flags used to compute Vtables.</param>
      <param name="count">The number of elements contained in the returned memory.</param>
      <returns>
        <see cref="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry" /> pointer containing memory for all COM interface entries.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.CreateObject(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags,System.Object,System.Runtime.InteropServices.CreatedWrapperFlags@)">
      <param name="externalComObject" />
      <param name="flags" />
      <param name="userState" />
      <param name="wrapperFlags" />
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.CreateObject(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)">
      <summary>Creates a managed object for the object that <paramref name="externalComObject" /> points to, respecting the values of <paramref name="flags" />.</summary>
      <param name="externalComObject">Object to import for usage into the .NET runtime.</param>
      <param name="flags">Flags used to describe the external object.</param>
      <returns>A managed object associated with the supplied external COM object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetIUnknownImpl(System.IntPtr@,System.IntPtr@,System.IntPtr@)">
      <summary>Gets the runtime-provided IUnknown implementation.</summary>
      <param name="fpQueryInterface">Function pointer to QueryInterface.</param>
      <param name="fpAddRef">Function pointer to AddRef.</param>
      <param name="fpRelease">Function pointer to Release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)">
      <summary>Creates a COM representation of the supplied object that can be passed to a non-managed environment.</summary>
      <param name="instance">The managed object to expose outside the .NET runtime.</param>
      <param name="flags">Flags used to configure the generated interface.</param>
      <returns>The generated COM interface, as a pointer to the <code>IUnknown</code> interface implementation, that can be passed outside the .NET runtime.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags,System.Object)">
      <param name="externalComObject" />
      <param name="flags" />
      <param name="userState" />
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)">
      <summary>Gets the currently registered managed object or creates a new managed object and registers it.</summary>
      <param name="externalComObject">Object to import for usage into the .NET runtime.</param>
      <param name="flags">Flags used to describe the external object.</param>
      <returns>A managed object associated with the supplied external COM object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrRegisterObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags,System.Object,System.IntPtr)">
      <summary>Get the currently registered managed object or uses the supplied managed object and registers it.</summary>
      <param name="externalComObject">Object to import for usage into the .NET runtime.</param>
      <param name="flags">Flags used to describe the external object.</param>
      <param name="wrapper">The <see cref="T:System.Object" /> to be used as the wrapper for the external object</param>
      <param name="inner">Inner for COM aggregation scenarios</param>
      <returns>Returns a managed object associated with the supplied external COM object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrRegisterObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags,System.Object)">
      <summary>Gets the currently registered managed object or uses the supplied managed object and registers it.</summary>
      <param name="externalComObject">Object to import for usage into the .NET runtime.</param>
      <param name="flags">Flags used to describe the external object.</param>
      <param name="wrapper">The object to use as the wrapper for the external object.</param>
      <exception cref="T:System.NotSupportedException">The wrapper instance is already associated with an external object.</exception>
      <returns>A managed object associated with the supplied external COM object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.RegisterForMarshalling(System.Runtime.InteropServices.ComWrappers)">
      <summary>Registers a <see cref="T:System.Runtime.InteropServices.ComWrappers" /> instance to be used as the global instance for marshalling in the runtime.</summary>
      <param name="instance">The instance to register.</param>
      <exception cref="T:System.InvalidOperationException">The method was called more than once.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.RegisterForTrackerSupport(System.Runtime.InteropServices.ComWrappers)">
      <summary>Registers a <see cref="T:System.Runtime.InteropServices.ComWrappers" /> instance to be used as the global instance for reference tracker support.</summary>
      <param name="instance">The instance to register.</param>
      <exception cref="T:System.InvalidOperationException">The method was called more than once.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.ReleaseObjects(System.Collections.IEnumerable)">
      <summary>Releases a collection of objects outside of the normal object or COM interface lifetime.</summary>
      <param name="objects">Collection of objects to release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.TryGetComInstance(System.Object,System.IntPtr@)">
      <summary>Determines if the specified managed object is a <see cref="T:System.Runtime.InteropServices.ComWrappers" />-created managed wrapper and if so, returns the wrapped unmanaged pointer.</summary>
      <param name="obj">The managed wrapper.</param>
      <param name="unknown">The unmanaged COM object.</param>
      <returns>
        <see langword="true" /> if the wrapper was resolved to an external COM object, otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.TryGetObject(System.IntPtr,System.Object@)">
      <summary>Determines if the specified COM object is a <see cref="T:System.Runtime.InteropServices.ComWrappers" />-created unmanaged wrapper and if so, returns the wrapped managed object.</summary>
      <param name="unknown">The unmanaged wrapper.</param>
      <param name="obj">The managed object.</param>
      <returns>
        <see langword="true" /> if the wrapper was resolved to a managed object, otherwise <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch">
      <summary>An application binary interface for function dispatch of a COM interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch.Vtable">
      <summary>Field that represents the virtual function table (vtable) in the IUnknown instance layout.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch.GetInstance``1(System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch*)">
      <summary>Given an <see cref="T:System.IntPtr" /> from a generated Vtable, converts it to the target type.</summary>
      <param name="dispatchPtr">Pointer to Vtable function entry.</param>
      <typeparam name="T">Desired type.</typeparam>
      <returns>An instance of the type associated with the dispatched function call.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry">
      <summary>Interface type and pointer to targeted VTable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry.IID">
      <summary>Interface identifier.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry.Vtable">
      <summary>A pointer to the virtual lookup table of functions.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CreateComInterfaceFlags">
      <summary>Specifies flags for the <see cref="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)" /> method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateComInterfaceFlags.CallerDefinedIUnknown">
      <summary>
        <para>The caller will provide an IUnknown Vtable.</para>
        <para>This flag is useful in scenarios when the caller has no need to rely on an IUnknown instance that's used when it's not possible to run managed code (that is, during a garbage collection). This is common in traditional COM scenarios, but scenarios where Reference Tracker hosting calls the IUnknown API during a garbage collection are possible.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateComInterfaceFlags.None">
      <summary>Flag used to indicate no flags set.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateComInterfaceFlags.TrackerSupport">
      <summary>
        <para>Flag used to indicate the COM interface should implement IReferenceTrackerTarget.</para>
        <para>When this flag is passed, the resulting COM interface will have an internal implementation of IUnknown, therefore, none should be supplied by the caller.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CreatedWrapperFlags" />
    <member name="F:System.Runtime.InteropServices.CreatedWrapperFlags.None" />
    <member name="F:System.Runtime.InteropServices.CreatedWrapperFlags.NonWrapping" />
    <member name="F:System.Runtime.InteropServices.CreatedWrapperFlags.TrackerObject" />
    <member name="T:System.Runtime.InteropServices.CreateObjectFlags">
      <summary>Specifies flags for the <see cref="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)" /> method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.Aggregation">
      <summary>Defined when COM aggregation is involved (that is an inner instance supplied).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.None">
      <summary>Flag used to indicate no flags set.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.TrackerObject">
      <summary>Indicates that the supplied external COM object implements the IReferenceTracker.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.UniqueInstance">
      <summary>Indicates to ignore internal caching and always create a unique instance.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.Unwrap">
      <summary>
        <para>Check if the supplied instance is actually a wrapper and if so return the underlying managed object rather than creating a new wrapper.</para>
        <para>This matches the built-in RCW semantics for COM interop.</para>
      </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CULong">
      <summary>
        <see cref="T:System.Runtime.InteropServices.CULong" /> is an immutable value type that represents the <c>unsigned long</c> type in C and C++.
      It is meant to be used as an exchange type at the managed/unmanaged boundary to accurately represent in managed code unmanaged APIs that use the <c>unsigned long</c> type.
      This type has 32-bits of storage on all Windows platforms and 32-bit Unix-based platforms.
      It has 64-bits of storage on 64-bit Unix platforms.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CULong.#ctor(System.UInt32)">
      <summary>Constructs an instance from a 32-bit unsigned integer.</summary>
      <param name="value">The integer value.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CULong.#ctor(System.UIntPtr)">
      <summary>Constructs an instance from a native-sized unsigned integer.</summary>
      <param name="value">The integer value.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is outside the range of the underlying storage type.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.CULong.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="o">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="o" /> is an instance of <see cref="T:System.Runtime.InteropServices.CULong" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CULong.Equals(System.Runtime.InteropServices.CULong)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Runtime.InteropServices.CLong" /> value.</summary>
      <param name="other">A <see cref="T:System.Runtime.InteropServices.CULong" /> value to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="other" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CULong.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CULong.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9 with no leading zeroes.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.CULong.Value">
      <summary>The underlying integer value of this instance.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary>Wraps objects the marshaler should marshal as a <see langword="VT_CY" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> class with the <see langword="Decimal" /> to be wrapped and marshaled as type <see langword="VT_CY" />.</summary>
      <param name="obj">The <see langword="Decimal" /> to be wrapped and marshaled as <see langword="VT_CY" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> class with the object containing the <see langword="Decimal" /> to be wrapped and marshaled as type <see langword="VT_CY" />.</summary>
      <param name="obj">The object containing the <see langword="Decimal" /> to be wrapped and marshaled as <see langword="VT_CY" />.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="obj" /> parameter is not a <see cref="T:System.Decimal" /> type.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary>Gets the wrapped object to be marshaled as type <see langword="VT_CY" />.</summary>
      <returns>The wrapped object to be marshaled as type <see langword="VT_CY" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceMode">
      <summary>Indicates whether the <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> method's IUnknown::QueryInterface calls can use the <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Allow">
      <summary>IUnknown::QueryInterface method calls can use the <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> interface. When you use this value, the <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> method overload functions like the <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" /> overload.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Ignore">
      <summary>IUnknown::QueryInterface method calls should ignore the <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> interface.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceResult">
      <summary>Provides return values for the <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Failed">
      <summary>The interface for a specific interface ID is not available. In this case, the returned interface is <see langword="null" />. E_NOINTERFACE is returned to the caller of IUnknown::QueryInterface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled">
      <summary>The interface pointer that is returned from the <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> method can be used as the result of IUnknown::QueryInterface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled">
      <summary>The custom <see langword="QueryInterface" /> was not used. Instead, the default implementation of IUnknown::QueryInterface should be used.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary>Specifies the value of the <see cref="T:System.Runtime.InteropServices.CharSet" /> enumeration. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.CharSet" /> value.</summary>
      <param name="charSet">One of the <see cref="T:System.Runtime.InteropServices.CharSet" /> values.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary>Gets the default value of <see cref="T:System.Runtime.InteropServices.CharSet" /> for any call to <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />.</summary>
      <returns>The default value of <see cref="T:System.Runtime.InteropServices.CharSet" /> for any call to <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute">
      <summary>Specifies the paths that are used to search for DLLs that provide functions for platform invokes.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.#ctor(System.Runtime.InteropServices.DllImportSearchPath)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> class, specifying the paths to use when searching for the targets of platform invokes.</summary>
      <param name="paths">A bitwise combination of enumeration values that specify the paths that the <c>LoadLibraryEx</c> function searches during platform invokes.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.Paths">
      <summary>Gets a bitwise combination of enumeration values that specify the paths that the <c>LoadLibraryEx</c> function searches during platform invokes.</summary>
      <returns>A bitwise combination of enumeration values that specify search paths for platform invokes.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultParameterValueAttribute">
      <summary>Sets the default value of a parameter when called from a language that supports default parameters. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultParameterValueAttribute.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DefaultParameterValueAttribute" /> class with the default value of a parameter.</summary>
      <param name="value">An object that represents the default value of a parameter.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultParameterValueAttribute.Value">
      <summary>Gets the default value of a parameter.</summary>
      <returns>An object that represents the default value of a parameter.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary>Wraps objects the marshaler should marshal as a <see langword="VT_DISPATCH" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> class with the object being wrapped.</summary>
      <param name="obj">The object to be wrapped and converted to <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a class or an array.  
  
 -or-  
  
 <paramref name="obj" /> does not support <see langword="IDispatch" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="obj" /> parameter was marked with a <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute that was passed a value of <see langword="false" />.  
  
 -or-  
  
 The <paramref name="obj" /> parameter inherits from a type marked with a <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute that was passed a value of <see langword="false" />.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary>Gets the object wrapped by the <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />.</summary>
      <returns>The object wrapped by the <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary>Specifies the COM dispatch identifier (DISPID) of a method, field, or property.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see langword="DispIdAttribute" /> class with the specified DISPID.</summary>
      <param name="dispId">The DISPID for the member.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary>Gets the DISPID for the member.</summary>
      <returns>The DISPID for the member.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary>Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary>Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary>Indicates the calling convention of an entry point.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary>Indicates how to marshal string parameters to the method and controls name mangling.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary>Indicates the name or ordinal of the DLL entry point to be called.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary>Controls whether the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary>Indicates whether unmanaged methods that have <see langword="HRESULT" /> return values are directly translated or whether <see langword="HRESULT" /> return values are automatically converted to exceptions.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary>Indicates whether the callee sets an error (<see langword="SetLastError" /> on Windows or <see langword="errno" /> on other platforms) before returning from the attributed method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
      <summary>Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> class with the name of the DLL containing the method to import.</summary>
      <param name="dllName">The name of the DLL that contains the unmanaged method. In .NET Framework, this can include an assembly display name, if the DLL is included in an assembly.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary>Gets the name of the DLL file that contains the entry point.</summary>
      <returns>The name of the DLL file that contains the entry point.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportResolver">
      <summary>Provides a delegate used to resolve native libraries via callback.</summary>
      <param name="libraryName">The native library to resolve.</param>
      <param name="assembly">The assembly requesting the resolution.</param>
      <param name="searchPath">The <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> on the PInvoke, if any. Otherwise, the <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> on the assembly, if any. Otherwise <see langword="null" />.</param>
      <returns>The handle for the loaded native library on success, or <see cref="F:System.IntPtr.Zero" /> on failure.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportSearchPath">
      <summary>Specifies the paths that are used to search for DLLs that provide functions for platform invokes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.ApplicationDirectory">
      <summary>Include the application directory in the DLL search path.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory">
      <summary>When searching for assembly dependencies, include the directory that contains the assembly itself, and search that directory first. When used in Native AOT and single-file deployment models, the application's installation directory is considered the "assembly directory" and is searched.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior">
      <summary>Search the application directory, and then call the Win32 LoadLibraryEx function with the <c>LOAD_WITH_ALTERED_SEARCH_PATH</c> flag. This value is ignored if any other value is specified. Operating systems that do not support the <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> attribute use this value, and ignore other values.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories">
      <summary>Include the application directory, the <see langword="%WinDir%\System32" /> directory, and user directories in the DLL search path.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.System32">
      <summary>Include the <see langword="%WinDir%\System32" /> directory in the DLL search path.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UseDllDirectoryForDependencies">
      <summary>Search for the dependencies of a DLL in the folder where the DLL is located before searching other folders.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UserDirectories">
      <summary>Include any path that was explicitly added to the process-wide search path by using the Win32 <c>AddDllDirectory</c> function.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute">
      <summary>Attribute required by any type that is returned by <see cref="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute.#ctor">
      <summary>Instance constructor.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary>Wraps objects the marshaler should marshal as a <see langword="VT_ERROR" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> class with the HRESULT that corresponds to the exception supplied.</summary>
      <param name="e">The exception to be converted to an error code.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> class with the HRESULT of the error.</summary>
      <param name="errorCode">The HRESULT of the error.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> class with an object containing the HRESULT of the error.</summary>
      <param name="errorCode">The object containing the HRESULT of the error.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="errorCode" /> parameter is not an <see cref="T:System.Int32" /> type.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary>Gets the error code of the wrapper.</summary>
      <returns>The HRESULT of the error.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary>Supplies an explicit <see cref="T:System.Guid" /> when an automatic GUID is undesirable.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> class with the specified GUID.</summary>
      <param name="guid">The <see cref="T:System.Guid" /> to be assigned.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary>Gets the <see cref="T:System.Guid" /> of the class.</summary>
      <returns>The <see cref="T:System.Guid" /> of the class.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleCollector">
      <summary>Tracks outstanding handles and forces a garbage collection when the specified threshold is reached.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.HandleCollector" /> class using a name, a threshold at which to begin handle collection, and a threshold at which handle collection must occur.</summary>
      <param name="name">A name for the collector.  This parameter allows you to name collectors that track handle types separately.</param>
      <param name="initialThreshold">A value that specifies the point at which collections should begin.</param>
      <param name="maximumThreshold">A value that specifies the point at which collections must occur. This should be set to the maximum number of available handles.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="initialThreshold" /> parameter is less than 0.  
  
 -or-  
  
 The <paramref name="maximumThreshold" /> parameter is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="maximumThreshold" /> parameter is less than the <paramref name="initialThreshold" /> parameter.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.HandleCollector" /> class using a name and a threshold at which to begin handle collection.</summary>
      <param name="name">A name for the collector. This parameter allows you to name collectors that track handle types separately.</param>
      <param name="initialThreshold">A value that specifies the point at which collections should begin.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="initialThreshold" /> parameter is less than 0.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Add">
      <summary>Increments the current handle count.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> property is less than 0.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Remove">
      <summary>Decrements the current handle count.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> property is less than 0.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Count">
      <summary>Gets the number of handles collected.</summary>
      <returns>The number of handles collected.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.InitialThreshold">
      <summary>Gets a value that specifies the point at which collections should begin.</summary>
      <returns>A value that specifies the point at which collections should begin.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold">
      <summary>Gets a value that specifies the point at which collections must occur.</summary>
      <returns>A value that specifies the point at which collections must occur.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Name">
      <summary>Gets the name of a <see cref="T:System.Runtime.InteropServices.HandleCollector" /> object.</summary>
      <returns>This <see cref="P:System.Runtime.InteropServices.HandleCollector.Name" /> property allows you to name collectors that track handle types separately.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleRef">
      <summary>Wraps a managed object holding a handle to a resource that is passed to unmanaged code using platform invoke.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.HandleRef" /> class with the object to wrap and a handle to the resource used by unmanaged code.</summary>
      <param name="wrapper">A managed object that should not be finalized until the platform invoke call returns.</param>
      <param name="handle">An <see cref="T:System.IntPtr" /> that indicates a handle to a resource.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
      <summary>Returns the handle to a resource of the specified <see cref="T:System.Runtime.InteropServices.HandleRef" /> object.</summary>
      <param name="value">The object that needs a handle.</param>
      <returns>The handle to a resource of the specified <see cref="T:System.Runtime.InteropServices.HandleRef" /> object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
      <summary>Returns the internal integer representation of a <see cref="T:System.Runtime.InteropServices.HandleRef" /> object.</summary>
      <param name="value">A <see cref="T:System.Runtime.InteropServices.HandleRef" /> object to retrieve an internal integer representation from.</param>
      <returns>An <see cref="T:System.IntPtr" /> object that represents a <see cref="T:System.Runtime.InteropServices.HandleRef" /> object.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Handle">
      <summary>Gets the handle to a resource.</summary>
      <returns>The handle to a resource.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Wrapper">
      <summary>Gets the object holding the handle to a resource.</summary>
      <returns>The object holding the handle to a resource.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary>Provides a way for clients to access the actual object, rather than the adapter object handed out by a custom marshaler.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary>Provides access to the underlying object wrapped by a custom marshaler.</summary>
      <returns>The object contained by the adapter object.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomFactory">
      <summary>Enables users to write activation code for managed objects that extend <see cref="T:System.MarshalByRefObject" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomFactory.CreateInstance(System.Type)">
      <summary>Creates a new instance of the specified type.</summary>
      <param name="serverType">The type to activate.</param>
      <returns>A <see cref="T:System.MarshalByRefObject" /> associated with the specified type.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomMarshaler">
      <summary>Provides custom wrappers for handling method calls.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)">
      <summary>Performs necessary cleanup of the managed data when it is no longer needed.</summary>
      <param name="ManagedObj">The managed object to be destroyed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)">
      <summary>Performs necessary cleanup of the unmanaged data when it is no longer needed.</summary>
      <param name="pNativeData">A pointer to the unmanaged data to be destroyed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize">
      <summary>Returns the size of the native data to be marshaled.</summary>
      <returns>The size, in bytes, of the native data.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)">
      <summary>Converts the managed data to unmanaged data.</summary>
      <param name="ManagedObj">The managed object to be converted.</param>
      <returns>A pointer to the COM view of the managed object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
      <summary>Converts the unmanaged data to managed data.</summary>
      <param name="pNativeData">A pointer to the unmanaged data to be wrapped.</param>
      <returns>An object that represents the managed view of the COM data.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomQueryInterface">
      <summary>Enables developers to provide a custom, managed implementation of the IUnknown::QueryInterface(REFIID riid, void **ppvObject) method.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)">
      <summary>Returns an interface according to a specified interface ID.</summary>
      <param name="iid">The GUID of the requested interface.</param>
      <param name="ppv">A reference to the requested interface, when this method returns.</param>
      <returns>One of the enumeration values that indicates whether a custom implementation of IUnknown::QueryInterface was used.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.IDynamicInterfaceCastable">
      <summary>Interface used to participate in a type cast failure.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)">
      <summary>Called during interface dispatch when the given interface type cannot be found in the class's metadata.</summary>
      <param name="interfaceType">The interface type.</param>
      <exception cref="T:System.InvalidOperationException">The returned type is not an interface type, or it was not marked with the <see cref="T:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute" />.</exception>
      <returns>The type that should be used to dispatch for <paramref name="interfaceType" /> on the current object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.IsInterfaceImplemented(System.RuntimeTypeHandle,System.Boolean)">
      <summary>Called when an implementing class instance is cast to an interface type that is not contained in the class's metadata.</summary>
      <param name="interfaceType">The interface type.</param>
      <param name="throwIfNotImplemented">Indicates if the function should throw an exception instead of returning <see langword="false" />.</param>
      <returns>
        <see langword="true" /> if this object can be cast to the given interface; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute">
      <summary>Indicates that the types defined within an assembly were originally defined in a type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute" /> class with the name of the original type library file.</summary>
      <param name="tlbFile">The location of the original type library file.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.Value">
      <summary>Gets the name of the original type library file.</summary>
      <returns>The name of the original type library file.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary>Indicates whether a managed interface is dual, dispatch-only, or <see langword="IUnknown" /> -only when exposed to COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> enumeration member.</summary>
      <param name="interfaceType">Describes how the interface should be exposed to COM clients.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> enumeration member.</summary>
      <param name="interfaceType">One of the <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> values that describes how the interface should be exposed to COM clients.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> value that describes how the interface should be exposed to COM.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> value that describes how the interface should be exposed to COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary>The exception thrown when an invalid COM object is used.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary>Initializes an instance of the <see langword="InvalidComObjectException" /> with default properties.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see langword="COMException" /> class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InvalidComObjectException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary>Initializes an instance of the <see langword="InvalidComObjectException" /> with a message.</summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary>The exception thrown by the marshaler when it encounters an argument of a variant type that can not be marshaled to managed code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary>Initializes a new instance of the <see langword="InvalidOleVariantTypeException" /> class with default values.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see langword="InvalidOleVariantTypeException" /> class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see langword="InvalidOleVariantTypeException" /> class with a specified message.</summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.Java.ComponentCrossReference" />
    <member name="F:System.Runtime.InteropServices.Java.ComponentCrossReference.DestinationGroupIndex" />
    <member name="F:System.Runtime.InteropServices.Java.ComponentCrossReference.SourceGroupIndex" />
    <member name="T:System.Runtime.InteropServices.Java.JavaMarshal" />
    <member name="M:System.Runtime.InteropServices.Java.JavaMarshal.CreateReferenceTrackingHandle(System.Object,System.Void*)">
      <param name="obj" />
      <param name="context" />
    </member>
    <member name="M:System.Runtime.InteropServices.Java.JavaMarshal.FinishCrossReferenceProcessing(System.Runtime.InteropServices.Java.MarkCrossReferencesArgs*,System.ReadOnlySpan{System.Runtime.InteropServices.GCHandle})">
      <param name="crossReferences" />
      <param name="unreachableObjectHandles" />
    </member>
    <member name="M:System.Runtime.InteropServices.Java.JavaMarshal.GetContext(System.Runtime.InteropServices.GCHandle)">
      <param name="obj" />
    </member>
    <member name="M:System.Runtime.InteropServices.Java.JavaMarshal.Initialize(delegate* unmanaged{System.Runtime.InteropServices.Java.MarkCrossReferencesArgs*, System.Void})">
      <param name="markCrossReferences" />
    </member>
    <member name="T:System.Runtime.InteropServices.Java.MarkCrossReferencesArgs" />
    <member name="F:System.Runtime.InteropServices.Java.MarkCrossReferencesArgs.ComponentCount" />
    <member name="F:System.Runtime.InteropServices.Java.MarkCrossReferencesArgs.Components" />
    <member name="F:System.Runtime.InteropServices.Java.MarkCrossReferencesArgs.CrossReferenceCount" />
    <member name="F:System.Runtime.InteropServices.Java.MarkCrossReferencesArgs.CrossReferences" />
    <member name="T:System.Runtime.InteropServices.Java.StronglyConnectedComponent" />
    <member name="F:System.Runtime.InteropServices.Java.StronglyConnectedComponent.Contexts" />
    <member name="F:System.Runtime.InteropServices.Java.StronglyConnectedComponent.Count" />
    <member name="T:System.Runtime.InteropServices.LCIDConversionAttribute">
      <summary>Indicates that a method's unmanaged signature expects a locale identifier (LCID) parameter.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.LCIDConversionAttribute.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see langword="LCIDConversionAttribute" /> class with the position of the LCID in the unmanaged signature.</summary>
      <param name="lcid">Indicates the position of the LCID argument in the unmanaged signature, where 0 is the first argument.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.LCIDConversionAttribute.Value">
      <summary>Gets the position of the LCID argument in the unmanaged signature.</summary>
      <returns>The position of the LCID argument in the unmanaged signature, where 0 is the first argument.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.LibraryImportAttribute">
      <summary>Indicates that a source generator should create a function for marshalling arguments instead of relying on the runtime to generate an equivalent marshalling function at run time.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.LibraryImportAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.LibraryImportAttribute" />.</summary>
      <param name="libraryName">Name of the library containing the import.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.EntryPoint">
      <summary>Gets or sets the name of the entry point to be called.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.LibraryName">
      <summary>Gets the name of the library containing the import.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.SetLastError">
      <summary>Gets or sets a value that specifies whether the callee sets an error (<c>SetLastError</c> on Windows or <c>errno</c> on other platforms) before returning from the attributed method.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshalling">
      <summary>Gets or sets an object that specifies how to marshal string arguments to the method.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshallingCustomType">
      <summary>Gets or sets the <see cref="T:System.Type" /> used to control how string arguments to the method are marshalled.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute">
      <summary>Provides support for user customization of interop stubs in managed-to-COM interop scenarios.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute" /> class with the specified class type and method name.</summary>
      <param name="classType">The class that contains the required stub method.</param>
      <param name="methodName">The name of the stub method.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="methodName" /> cannot be found.

 -or-

 The method is not static or non-generic.

 -or-

 The method's parameter list does not match the expected parameter list for the stub.</exception>
      <exception cref="T:System.MethodAccessException">The interface that contains the managed interop method has no access to the stub method, because the stub method has private or protected accessibility, or because of a security issue.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType">
      <summary>Gets the class that contains the required stub method.</summary>
      <returns>The class that contains the customized interop stub.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName">
      <summary>Gets the name of the stub method.</summary>
      <returns>The name of a customized interop stub.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary>Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary>Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize">
      <summary>Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary>Increments the reference count on the specified interface.</summary>
      <param name="pUnk">The interface reference count to increment.</param>
      <returns>The new value of the reference count on the <paramref name="pUnk" /> parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary>Allocates a block of memory of specified size from the COM task memory allocator.</summary>
      <param name="cb">The size of the block of memory to be allocated.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
      <returns>An integer representing the address of the block of memory allocated. This memory must be released with <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary>Allocates memory from the unmanaged memory of the process by using the specified number of bytes.</summary>
      <param name="cb">The required number of bytes in memory.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
      <returns>A pointer to the newly allocated memory. This memory must be released using the <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> method.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary>Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.</summary>
      <param name="cb">The required number of bytes in memory.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
      <returns>A pointer to the newly allocated memory. This memory must be released using the <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> method.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup">
      <summary>Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.</summary>
      <returns>
        <see langword="true" /> if there are any RCWs available for cleanup; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)">
      <summary>Gets an interface pointer identified by the specified moniker.</summary>
      <param name="monikerName">The moniker corresponding to the desired interface pointer.</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">An unrecognized HRESULT was returned by the unmanaged <see langword="BindToMoniker" /> method.</exception>
      <returns>An object containing a reference to the interface pointer identified by the <paramref name="monikerName" /> parameter. A moniker is a name, and in this case, the moniker is defined by an interface.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
      <summary>Changes the strength of an object's COM Callable Wrapper (CCW) handle.</summary>
      <param name="otp">The object whose CCW holds a reference counted handle. The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.</param>
      <param name="fIsWeak">
        <see langword="true" /> to change the strength of the handle on the <paramref name="otp" /> parameter to weak, regardless of its reference count; <see langword="false" /> to reset the handle strength on <paramref name="otp" /> to be reference counted.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext">
      <summary>Notifies the runtime to clean up all Runtime Callable Wrappers (RCWs) allocated in the current context.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" /> or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed character array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed <see cref="T:System.IntPtr" /> array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary>Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.</summary>
      <param name="source">The memory pointer to copy from.</param>
      <param name="destination">The array to copy to.</param>
      <param name="startIndex">The zero-based index in the destination array where copying should start.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed <see cref="T:System.IntPtr" /> array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.</summary>
      <param name="source">The one-dimensional array to copy from.</param>
      <param name="startIndex">The zero-based index in the source array where copying should start.</param>
      <param name="destination">The memory pointer to copy to.</param>
      <param name="length">The number of array elements to copy.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> and <paramref name="length" /> are not valid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" />, or <paramref name="length" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)">
      <summary>Aggregates a managed object with the specified COM object.</summary>
      <param name="pOuter">The outer <see langword="IUnknown" /> pointer.</param>
      <param name="o">An object to aggregate.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> is a Windows Runtime object.</exception>
      <returns>The inner <see langword="IUnknown" /> pointer of the managed object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)">
      <summary>

 Aggregates a managed object of the specified type with the specified COM object.</summary>
      <param name="pOuter">The outer IUnknown pointer.</param>
      <param name="o">The managed object to aggregate.</param>
      <typeparam name="T">The type of the managed object to aggregate.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> is a Windows Runtime object.</exception>
      <returns>The inner IUnknown pointer of the managed object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary>Wraps the specified COM object in an object of the specified type.</summary>
      <param name="o">The object to be wrapped.</param>
      <param name="t">The type of wrapper to create.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> must derive from <see langword="__ComObject" />.

 -or-

 <paramref name="t" /> is a Windows Runtime type.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="t" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> cannot be converted to the destination type because it does not support all required interfaces.</exception>
      <returns>The newly wrapped object that is an instance of the desired type.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)">
      <summary>

 Wraps the specified COM object in an object of the specified type.</summary>
      <param name="o">The object to be wrapped.</param>
      <typeparam name="T">The type of object to wrap.</typeparam>
      <typeparam name="TWrapper">The type of object to return.</typeparam>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> must derive from <see langword="__ComObject" />.

 -or-

 <typeparamref name="T" /> is a Windows Runtime type.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> cannot be converted to the <paramref name="TWrapper" /> because it does not support all required interfaces.</exception>
      <returns>The newly wrapped object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary>Frees all substructures that the specified unmanaged memory block points to.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <param name="structuretype">Type of a formatted class. This provides the layout information necessary to delete the buffer in the <paramref name="ptr" /> parameter.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structuretype" /> has an automatic layout. Use sequential or explicit instead.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)">
      <summary>

 Frees all substructures of a specified type that the specified unmanaged memory block points to.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <typeparam name="T">The type of the formatted structure. This provides the layout information necessary to delete the buffer in the <paramref name="ptr" /> parameter.</typeparam>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> has an automatic layout. Use sequential or explicit instead.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary>Releases all references to a Runtime Callable Wrapper (RCW) by setting its reference count to 0.</summary>
      <param name="o">The RCW to be released.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> is not a valid COM object.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> is <see langword="null" />.</exception>
      <returns>The new value of the reference count of the RCW associated with the <paramref name="o" /> parameter, which is 0 (zero) if the release is successful.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary>Frees a <see langword="BSTR" /> using the COM SysFreeString function.</summary>
      <param name="ptr">The address of the BSTR to be freed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary>Frees a block of memory allocated by the unmanaged COM task memory allocator.</summary>
      <param name="ptr">The address of the memory to be freed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary>Frees memory previously allocated from the unmanaged memory of the process.</summary>
      <param name="hglobal">The handle returned by the original matching call to <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)">
      <summary>Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).</summary>
      <param name="type">The type to generate a GUID for.</param>
      <returns>An identifier for the specified type.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)">
      <summary>Returns a programmatic identifier (ProgID) for the specified type.</summary>
      <param name="type">The type to get a ProgID for.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="type" /> parameter is not a class that can be create by COM. The class must be public, have a public parameterless constructor, and be COM visible.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is <see langword="null" />.</exception>
      <returns>The ProgID of the specified type.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
      <summary>Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.</summary>
      <param name="o">The object that provides the interface.</param>
      <param name="T">The type of interface that is requested.</param>
      <param name="mode">One of the enumeration values that indicates whether to apply an <see langword="IUnknown::QueryInterface" /> customization that is supplied by an <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />.</param>
      <exception cref="T:System.ArgumentException">The <typeparamref name="T" /> parameter is not an interface.

 -or-

 The type is not visible to COM.

 -or-

 The <typeparamref name="T" /> parameter is a generic type definition.</exception>
      <exception cref="T:System.InvalidCastException">The object <paramref name="o" /> does not support the requested interface.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="o" /> parameter is <see langword="null" />.

 -or-

 The <typeparamref name="T" /> parameter is <see langword="null" />.</exception>
      <returns>The interface pointer that represents the interface for the object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary>Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.</summary>
      <param name="o">The object that provides the interface.</param>
      <param name="T">The type of interface that is requested.</param>
      <exception cref="T:System.ArgumentException">The <typeparamref name="T" /> parameter is not an interface.

 -or-

 The type is not visible to COM.

 -or-

 The <typeparamref name="T" /> parameter is a generic type definition.</exception>
      <exception cref="T:System.InvalidCastException">The <paramref name="o" /> parameter does not support the requested interface.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="o" /> parameter is <see langword="null" />.

 -or-

 The <typeparamref name="T" /> parameter is <see langword="null" />.</exception>
      <returns>The interface pointer that represents the specified interface for the object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)">
      <summary>

 Returns a pointer to an IUnknown interface that represents the specified interface on an object of the specified type. Custom query interface access is enabled by default.</summary>
      <param name="o">The object that provides the interface.</param>
      <typeparam name="T">The type of <paramref name="o" />.</typeparam>
      <typeparam name="TInterface">The type of interface to return.</typeparam>
      <exception cref="T:System.ArgumentException">The <paramref name="TInterface" /> parameter is not an interface.

 -or-

 The type is not visible to COM.

 -or-

 The <typeparamref name="T" /> parameter is an open generic type.</exception>
      <exception cref="T:System.InvalidCastException">The <paramref name="o" /> parameter does not support the <paramref name="TInterface" /> interface.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="o" /> parameter is <see langword="null" />.</exception>
      <returns>The interface pointer that represents the <paramref name="TInterface" /> interface.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)">
      <summary>Retrieves data that is referenced by the specified key from the specified COM object.</summary>
      <param name="obj">The COM object that contains the data that you want.</param>
      <param name="key">The key in the internal hash table of <paramref name="obj" /> to retrieve the data from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is <see langword="null" />.

 -or-

 <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a COM object.

 -or-

 <paramref name="obj" /> is a Windows Runtime object.</exception>
      <returns>The data represented by the <paramref name="key" /> parameter in the internal hash table of the <paramref name="obj" /> parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary>Converts an unmanaged function pointer to a delegate.</summary>
      <param name="ptr">The unmanaged function pointer to be converted.</param>
      <param name="t">The type of the delegate to be returned.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="t" /> parameter is not a delegate or is generic.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="ptr" /> parameter is <see langword="null" />.

 -or-

 The <paramref name="t" /> parameter is <see langword="null" />.</exception>
      <returns>A delegate instance that can be cast to the appropriate delegate type.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)">
      <summary>

 Converts an unmanaged function pointer to a delegate of a specified type.</summary>
      <param name="ptr">The unmanaged function pointer to convert.</param>
      <typeparam name="TDelegate">The type of the delegate to return.</typeparam>
      <exception cref="T:System.ArgumentException">The <paramref name="TDelegate" /> generic parameter is not a delegate, or it is an open generic type.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="ptr" /> parameter is <see langword="null" />.</exception>
      <returns>A instance of the specified delegate type.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)">
      <summary>Retrieves the last slot in the virtual function table (v-table or VTBL) of a type when exposed to COM.</summary>
      <param name="t">A type that represents an interface or class.</param>
      <returns>The last VTBL slot of the interface when exposed to COM. If the <paramref name="t" /> parameter is a class, the returned VTBL slot is the last slot in the interface that is generated from the class.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary>Retrieves a code that identifies the type of the exception that occurred.</summary>
      <returns>The type of the exception.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.Guid@,System.IntPtr)">
      <param name="errorCode" />
      <param name="iid" />
      <param name="pUnk" />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary>Converts the specified HRESULT error code to a corresponding <see cref="T:System.Exception" /> object, with additional error information passed in an IErrorInfo interface for the exception object.</summary>
      <param name="errorCode">The HRESULT to be converted.</param>
      <param name="errorInfo">A pointer to the <see langword="IErrorInfo" /> interface that provides more information about the error. You can specify <c>IntPtr(0)</c> to use the current <see langword="IErrorInfo" /> interface, or <c>IntPtr(-1)</c> to ignore the current <see langword="IErrorInfo" /> interface and construct the exception just from the error code.</param>
      <returns>An object that represents the converted HRESULT and information obtained from <paramref name="errorInfo" />, or <see langword="null" /> if an HRESULT value doesn't represent an error code (for example, <see langword="S_OK" /> or <see langword="S_FALSE" />).</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary>Converts the specified HRESULT error code to a corresponding <see cref="T:System.Exception" /> object.</summary>
      <param name="errorCode">The HRESULT to be converted.</param>
      <returns>An object that represents the converted HRESULT, or <see langword="null" /> if the HRESULT value doesn't represent an error code (for example, <see langword="S_OK" /> or <see langword="S_FALSE" />).</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionPointers">
      <summary>Retrieves a computer-independent description of an exception, and information about the state that existed for the thread when the exception occurred.</summary>
      <returns>A pointer to an EXCEPTION_POINTERS structure.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary>Converts a delegate into a function pointer that is callable from unmanaged code.</summary>
      <param name="d">The delegate to be passed to unmanaged code.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="d" /> parameter is a generic type definition.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="d" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Dynamic entrypoint allocation is not supported in the current environment.</exception>
      <returns>A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)">
      <summary>

 Converts a delegate of a specified type to a function pointer that is callable from unmanaged code.</summary>
      <param name="d">The delegate to be passed to unmanaged code.</param>
      <typeparam name="TDelegate">The type of delegate to convert.</typeparam>
      <exception cref="T:System.ArgumentException">The <paramref name="d" /> parameter is a generic type definition.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="d" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Dynamic entrypoint allocation is not supported in the current environment.</exception>
      <returns>A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)">
      <summary>Returns the instance handle (HINSTANCE) for the specified module.</summary>
      <param name="m">The module whose HINSTANCE is desired.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="m" /> parameter is <see langword="null" />.</exception>
      <returns>The HINSTANCE for <paramref name="m" />; or -1 if the module does not have an HINSTANCE.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary>Converts the specified exception to an HRESULT.</summary>
      <param name="e">The exception to convert to an HRESULT.</param>
      <returns>The HRESULT mapped to the supplied exception.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary>Returns the HRESULT corresponding to the last error incurred by Win32 code executed using <see cref="T:System.Runtime.InteropServices.Marshal" />.</summary>
      <returns>The HRESULT corresponding to the last Win32 error code.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)">
      <summary>Returns an IDispatch interface from a managed object.</summary>
      <param name="o">The object whose <see langword="IDispatch" /> interface is requested.</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> does not support the requested interface.</exception>
      <returns>The <see langword="IDispatch" /> pointer for the <paramref name="o" /> parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary>Returns an IUnknown interface from a managed object.</summary>
      <param name="o">The object whose <see langword="IUnknown" /> interface is requested.</param>
      <returns>The <see langword="IUnknown" /> pointer for the <paramref name="o" /> parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastPInvokeError">
      <summary>Get the last platform invoke error on the current thread.</summary>
      <returns>The last platform invoke error.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastPInvokeErrorMessage">
      <summary>Gets the system error message for the last PInvoke error code.</summary>
      <returns>The error message associated with the last PInvoke error code.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastSystemError">
      <summary>Gets the last system error on the current thread.</summary>
      <returns>The last system error.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary>Returns the error code returned by the last unmanaged function that was called using platform invoke that has the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> flag set.</summary>
      <returns>The last error code set by a call to the Win32 SetLastError function.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary>Converts an object to a COM VARIANT.</summary>
      <param name="obj">The object for which to get a COM VARIANT.</param>
      <param name="pDstNativeVariant">A pointer to receive the VARIANT that corresponds to the <paramref name="obj" /> parameter.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="obj" /> parameter is an instance of a generic type.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)">
      <summary>

 Converts an object of a specified type to a COM VARIANT.</summary>
      <param name="obj">The object for which to get a COM VARIANT.</param>
      <param name="pDstNativeVariant">A pointer to receive the VARIANT that corresponds to the <paramref name="obj" /> parameter.</param>
      <typeparam name="T">The type of the object to convert.</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary>Returns an instance of a type that represents a COM object by a pointer to its IUnknown interface.</summary>
      <param name="pUnk">A pointer to the <see langword="IUnknown" /> interface.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pUnk" /> is <see cref="F:System.IntPtr.Zero" />.</exception>
      <returns>An object that represents the specified unmanaged COM object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary>Converts a COM VARIANT to an object.</summary>
      <param name="pSrcNativeVariant">A pointer to a COM VARIANT.</param>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
        <paramref name="pSrcNativeVariant" /> is not a valid VARIANT type.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pSrcNativeVariant" /> has an unsupported type.</exception>
      <returns>An object that corresponds to the <paramref name="pSrcNativeVariant" /> parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)">
      <summary>

 Converts a COM VARIANT to an object of a specified type.</summary>
      <param name="pSrcNativeVariant">A pointer to a COM VARIANT.</param>
      <typeparam name="T">The type to which to convert the COM VARIANT.</typeparam>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
        <paramref name="pSrcNativeVariant" /> is not a valid VARIANT type.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pSrcNativeVariant" /> has an unsupported type.</exception>
      <returns>An object of the specified type that corresponds to the <paramref name="pSrcNativeVariant" /> parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
      <summary>Converts an array of COM VARIANTs to an array of objects.</summary>
      <param name="aSrcNativeVariant">A pointer to the first element of an array of COM VARIANTs.</param>
      <param name="cVars">The count of COM VARIANTs in <paramref name="aSrcNativeVariant" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cVars" /> is a negative number.</exception>
      <returns>An object array that corresponds to <paramref name="aSrcNativeVariant" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)">
      <summary>

 Converts an array of COM VARIANTs to an array of a specified type.</summary>
      <param name="aSrcNativeVariant">A pointer to the first element of an array of COM VARIANTs.</param>
      <param name="cVars">The count of COM VARIANTs in <paramref name="aSrcNativeVariant" />.</param>
      <typeparam name="T">The type of the array to return.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cVars" /> is a negative number.</exception>
      <returns>An array of <typeparamref name="T" /> objects that corresponds to <paramref name="aSrcNativeVariant" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetPInvokeErrorMessage(System.Int32)">
      <summary>Gets the system error message for the supplied error code.</summary>
      <param name="error">The error code.</param>
      <returns>The error message associated with <paramref name="error" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)">
      <summary>Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.</summary>
      <param name="t">A type that represents an interface or a class.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> is not visible from COM.</exception>
      <returns>The first VTBL slot that contains user-defined methods. The first slot is 3 if the interface is based on IUnknown, and 7 if the interface is based on IDispatch.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)">
      <summary>Returns a managed object of a specified type that represents a COM object.</summary>
      <param name="pUnk">A pointer to the <see langword="IUnknown" /> interface of the unmanaged object.</param>
      <param name="t">The type of the requested managed class.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> is not attributed with <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />.

 -or-

 <paramref name="t" /> is a Windows Runtime type.</exception>
      <returns>An instance of the class corresponding to the <see cref="T:System.Type" /> object that represents the requested unmanaged COM object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)">
      <summary>Returns the type associated with the specified class identifier (CLSID).</summary>
      <param name="clsid">The CLSID of the type to return.</param>
      <returns>
        <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
      <summary>Retrieves the name of the type represented by an ITypeInfo object.</summary>
      <param name="typeInfo">An object that represents an <see langword="ITypeInfo" /> pointer.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeInfo" /> parameter is <see langword="null" />.</exception>
      <returns>The name of the type that the <paramref name="typeInfo" /> parameter points to.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
      <summary>Creates a unique Runtime Callable Wrapper (RCW) object for a given IUnknown interface.</summary>
      <param name="unknown">A managed pointer to an <see langword="IUnknown" /> interface.</param>
      <returns>A unique RCW for the specified <see langword="IUnknown" /> interface.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.InitHandle(System.Runtime.InteropServices.SafeHandle,System.IntPtr)">
      <summary>Initializes the underlying handle of a newly created <see cref="T:System.Runtime.InteropServices.SafeHandle" /> to the provided value.</summary>
      <param name="safeHandle">
        <see cref="T:System.Runtime.InteropServices.SafeHandle" /> instance to update</param>
      <param name="handle">Pre-existing handle</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary>Indicates whether a specified object represents a COM object.</summary>
      <param name="o">The object to check.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the <paramref name="o" /> parameter is a COM type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)">
      <summary>Indicates whether a type is visible to COM clients.</summary>
      <param name="t">The type to check for COM visibility.</param>
      <returns>
        <see langword="true" /> if the type is visible to COM; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)">
      <summary>Returns the field offset of the unmanaged form of the managed class.</summary>
      <param name="t">A value type or formatted reference type that specifies the managed class. You must apply the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> to the class.</param>
      <param name="fieldName">The field within the <paramref name="t" /> parameter.</param>
      <exception cref="T:System.ArgumentException">The class cannot be exported as a structure or the field is nonpublic. Beginning with the .NET Framework version 2.0, the field may be private.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="t" /> parameter is <see langword="null" />.</exception>
      <returns>The offset, in bytes, for the <paramref name="fieldName" /> parameter within the specified class that is declared by platform invoke.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)">
      <summary>

 Returns the field offset of the unmanaged form of a specified managed class.</summary>
      <param name="fieldName">The name of the field in the <paramref name="T" /> type.</param>
      <typeparam name="T">A managed value type or formatted reference type. You must apply the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> attribute to the class.</typeparam>
      <returns>The offset, in bytes, for the <paramref name="fieldName" /> parameter within the specified class that is declared by platform invoke.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary>Executes one-time method setup tasks without calling the method.</summary>
      <param name="m">The method to be checked.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="m" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="m" /> parameter is not a <see cref="T:System.Reflection.MethodInfo" /> object.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary>Performs a pre-link check for all methods on a class.</summary>
      <param name="c">The class whose methods are to be checked.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="c" /> parameter is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary>Allocates a managed <see cref="T:System.String" />, copies a specified number of characters from an unmanaged ANSI or UTF-8 string into it, and widens each character to UTF-16.</summary>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <param name="len">The byte count of the input string to copy.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="len" /> is less than zero.</exception>
      <returns>A managed string that holds a copy of the native string if the value of the <paramref name="ptr" /> parameter is not <see langword="null" />; otherwise, this method returns <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary>Copies all characters up to the first null character from an unmanaged ANSI or UTF-8 string to a managed <see cref="T:System.String" />, and widens each character to UTF-16.</summary>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <returns>A managed string that holds a copy of the unmanaged string. If <paramref name="ptr" /> is <see langword="null" />, the method returns a null string.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)">
      <summary>Allocates a managed <see cref="T:System.String" /> and copies the specified number of characters from a string stored in unmanaged memory into it.</summary>
      <param name="ptr">For Unicode platforms, the address of the first Unicode character.

 -or-

 For ANSI platforms, the address of the first ANSI character.</param>
      <param name="len">The number of characters to copy.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="len" /> is less than zero.</exception>
      <returns>A managed string that holds a copy of the native string if the value of the <paramref name="ptr" /> parameter is not <see langword="null" />; otherwise, this method returns <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)">
      <summary>Allocates a managed <see cref="T:System.String" /> and copies all characters up to the first null character from a string stored in unmanaged memory into it.</summary>
      <param name="ptr">For Unicode platforms, the address of the first Unicode character.

 -or-

 For ANSI platforms, the address of the first ANSI character.</param>
      <returns>A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr" /> parameter is not <see langword="null" />; otherwise, this method returns <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)">
      <summary>Allocates a managed <see cref="T:System.String" /> and copies a binary string (BSTR) stored in unmanaged memory into it.</summary>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ptr" /> equals <see cref="F:System.IntPtr.Zero" />.</exception>
      <returns>A managed string that holds a copy of the unmanaged string.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary>Allocates a managed <see cref="T:System.String" /> and copies a specified number of characters from an unmanaged Unicode string into it.</summary>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <param name="len">The number of Unicode characters to copy.</param>
      <returns>A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr" /> parameter is not <see langword="null" />; otherwise, this method returns <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary>Allocates a managed <see cref="T:System.String" /> and copies all characters up to the first null character from an unmanaged Unicode string into it.</summary>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <returns>A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr" /> parameter is not <see langword="null" />; otherwise, this method returns <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)">
      <summary>Allocates a managed <see cref="T:System.String" /> and copies a specified number of bytes from an unmanaged UTF8 string into it.</summary>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <param name="byteLen">The number of bytes to copy.</param>
      <returns>A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr" /> parameter is not <see langword="null" />; otherwise, this method returns <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)">
      <summary>Allocates a managed <see cref="T:System.String" /> and copies all characters up to the first null character from an unmanaged UTF-8 string into it.</summary>
      <param name="ptr">The address of the first character of the unmanaged string.</param>
      <returns>A managed string that holds a copy of the unmanaged string if the value of the <paramref name="ptr" /> parameter is not <see langword="null" />; otherwise, this method returns <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary>Marshals data from an unmanaged block of memory to a managed object.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <param name="structure">The object to which the data is to be copied. This must be an instance of a formatted class.</param>
      <exception cref="T:System.ArgumentException">Structure layout is not sequential or explicit.

 -or-

 Structure is a boxed value type.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary>Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <param name="structureType">The type of object to be created. This object must represent a formatted class or a structure.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="structureType" /> parameter layout is not sequential or explicit.

 -or-

 The <paramref name="structureType" /> parameter is a generic type definition.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="structureType" /> is <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">The class specified by <paramref name="structureType" /> does not have an accessible parameterless constructor.</exception>
      <returns>A managed object containing the data pointed to by the <paramref name="ptr" /> parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)">
      <summary>

 Marshals data from an unmanaged block of memory to a managed object of the specified type.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <param name="structure">The object to which the data is to be copied.</param>
      <typeparam name="T">The type of <paramref name="structure" />. This must be a formatted class.</typeparam>
      <exception cref="T:System.ArgumentException">Structure layout is not sequential or explicit.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)">
      <summary>

 Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.</summary>
      <param name="ptr">A pointer to an unmanaged block of memory.</param>
      <typeparam name="T">The type of the object to which the data is to be copied. This must be a formatted class or a structure.</typeparam>
      <exception cref="T:System.ArgumentException">The layout of <typeparamref name="T" /> is not sequential or explicit.</exception>
      <exception cref="T:System.MissingMethodException">The class specified by <typeparamref name="T" /> does not have an accessible parameterless constructor.</exception>
      <returns>A managed object that contains the data that the <paramref name="ptr" /> parameter points to.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary>Requests a pointer to a specified interface from a COM object.</summary>
      <param name="pUnk">The interface to be queried.</param>
      <param name="iid">The interface identifier (IID) of the requested interface.</param>
      <param name="ppv">When this method returns, contains a reference to the returned interface.</param>
      <returns>An HRESULT that indicates the success or failure of the call.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary>Reads a single byte at a given offset (or index) from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <returns>The byte read from unmanaged memory at the given offset.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary>Reads a single byte from unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.

 -or-

 <paramref name="ptr" /> is <see langword="null" />.

 -or-

 <paramref name="ptr" /> is invalid.</exception>
      <returns>The byte read from unmanaged memory.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)">
      <summary>Reads a single byte at a given offset (or index) from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <returns>The byte read from unmanaged memory at the given offset.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary>Reads a 16-bit signed integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <returns>The 16-bit signed integer read from unmanaged memory at the given offset.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary>Reads a 16-bit signed integer from unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.

 -or-

 <paramref name="ptr" /> is <see langword="null" />.

 -or-

 <paramref name="ptr" /> is invalid.</exception>
      <returns>The 16-bit signed integer read from unmanaged memory.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)">
      <summary>Reads a 16-bit signed integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <returns>The 16-bit signed integer read from unmanaged memory at the given offset.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary>Reads a 32-bit signed integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <returns>The 32-bit signed integer read from unmanaged memory.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary>Reads a 32-bit signed integer from unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.

 -or-

 <paramref name="ptr" /> is <see langword="null" />.

 -or-

 <paramref name="ptr" /> is invalid.</exception>
      <returns>The 32-bit signed integer read from unmanaged memory.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)">
      <summary>Reads a 32-bit signed integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <returns>The 32-bit signed integer read from unmanaged memory at the given offset.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary>Reads a 64-bit signed integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <returns>The 64-bit signed integer read from unmanaged memory at the given offset.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary>Reads a 64-bit signed integer from unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.

 -or-

 <paramref name="ptr" /> is <see langword="null" />.

 -or-

 <paramref name="ptr" /> is invalid.</exception>
      <returns>The 64-bit signed integer read from unmanaged memory.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)">
      <summary>Reads a 64-bit signed integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <returns>The 64-bit signed integer read from unmanaged memory at the given offset.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary>Reads a processor native-sized integer at a given offset from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory from which to read.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <returns>The integer read from unmanaged memory at the given offset.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary>Reads a processor native-sized integer from unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory from which to read.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.

 -or-

 <paramref name="ptr" /> is <see langword="null" />.

 -or-

 <paramref name="ptr" /> is invalid.</exception>
      <returns>The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)">
      <summary>Reads a processor native-sized integer from unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory of the source object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before reading.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
      <returns>The integer read from unmanaged memory at the given offset.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
      <summary>Resizes a block of memory previously allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />.</summary>
      <param name="pv">A pointer to memory allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />.</param>
      <param name="cb">The new size of the allocated block.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
      <returns>An integer representing the address of the reallocated block of memory. This memory must be released with <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
      <summary>Resizes a block of memory previously allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</summary>
      <param name="pv">A pointer to memory allocated with <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</param>
      <param name="cb">The new size of the allocated block. This is not a pointer; it is the byte count you are requesting, cast to type <see cref="T:System.IntPtr" />. If you pass a pointer, it is treated as a size.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
      <returns>A pointer to the reallocated memory. This memory must be released using <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary>Decrements the reference count on the specified interface.</summary>
      <param name="pUnk">The interface to release.</param>
      <returns>The new value of the reference count on the interface specified by the <paramref name="pUnk" /> parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary>Decrements the reference count of the Runtime Callable Wrapper (RCW) associated with the specified COM object.</summary>
      <param name="o">The COM object to release.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> is not a valid COM object.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="o" /> is <see langword="null" />.</exception>
      <returns>The new value of the reference count of the RCW associated with <paramref name="o" />. This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)">
      <summary>Allocates an unmanaged binary string (BSTR) and copies the contents of a managed <see cref="T:System.Security.SecureString" /> object into it.</summary>
      <param name="s">The managed object to copy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>The address, in unmanaged memory, where the <paramref name="s" /> parameter was copied to, or 0 if a null object was supplied.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString" /> object to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <param name="s">The managed object to copy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>The address, in unmanaged memory, where the <paramref name="s" /> parameter was copied to, or 0 if a null object was supplied.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString" /> object to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <param name="s">The managed object to copy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>The address, in unmanaged memory, where the <paramref name="s" /> parameter was copied to, or 0 if a null object was supplied.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString" /> into unmanaged memory, converting into ANSI format as it copies.</summary>
      <param name="s">The managed object to copy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>The address, in unmanaged memory, to where the <paramref name="s" /> parameter was copied, or 0 if a null object was supplied.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString" /> object into unmanaged memory.</summary>
      <param name="s">The managed object to copy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>The address, in unmanaged memory, where <paramref name="s" /> was copied, or 0 if <paramref name="s" /> is a <see cref="T:System.Security.SecureString" /> object whose length is 0.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)">
      <summary>Sets data referenced by the specified key in the specified COM object.</summary>
      <param name="obj">The COM object in which to store the data.</param>
      <param name="key">The key in the internal hash table of the COM object in which to store the data.</param>
      <param name="data">The data to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is <see langword="null" />.

 -or-

 <paramref name="key" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a COM object.

 -or-

 <paramref name="obj" /> is a Windows Runtime object.</exception>
      <returns>
        <see langword="true" /> if the data was set successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetLastPInvokeError(System.Int32)">
      <summary>Sets the last platform invoke error on the current thread.</summary>
      <param name="error">The error to set.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetLastSystemError(System.Int32)">
      <summary>Sets the last system error on the current thread.</summary>
      <param name="error">The error to set.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary>Returns the unmanaged size of an object in bytes.</summary>
      <param name="structure">The object whose size is to be returned.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="structure" /> parameter is <see langword="null" />.</exception>
      <returns>The size of the specified object in unmanaged code.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary>Returns the size of an unmanaged type in bytes.</summary>
      <param name="t">The type whose size is to be returned.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="t" /> parameter is a generic type definition.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="t" /> parameter is <see langword="null" />.</exception>
      <returns>The size of the specified type in unmanaged code.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1">
      <summary>

 Returns the size of an unmanaged type in bytes.</summary>
      <typeparam name="T">The type whose size is to be returned.</typeparam>
      <returns>The size, in bytes, of the type that is specified by the <typeparamref name="T" /> generic type parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)">
      <summary>

 Returns the unmanaged size of an object of a specified type in bytes.</summary>
      <param name="structure">The object whose size is to be returned.</param>
      <typeparam name="T">The type of the <paramref name="structure" /> parameter.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="structure" /> parameter is <see langword="null" />.</exception>
      <returns>The size, in bytes, of the specified object in unmanaged code.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)">
      <summary>Allocates a BSTR and copies the contents of a managed <see cref="T:System.String" /> into it.</summary>
      <param name="s">The managed string to be copied.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length for <paramref name="s" /> is out of range.</exception>
      <returns>An unmanaged pointer to the <see langword="BSTR" />, or 0 if <paramref name="s" /> is null.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="s" /> parameter exceeds the maximum length allowed by the operating system.</exception>
      <returns>An integer representing a pointer to the block of memory allocated for the string, or 0 if <paramref name="s" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The length for <paramref name="s" /> is out of range.</exception>
      <returns>The allocated memory block, or 0 if <paramref name="s" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="s" /> parameter exceeds the maximum length allowed by the operating system.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>An integer representing a pointer to the block of memory allocated for the string, or 0 if s is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="s" /> parameter exceeds the maximum length allowed by the operating system.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>An integer representing a pointer to the block of memory allocated for the string, or 0 if <paramref name="s" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> into unmanaged memory, converting into ANSI format as it copies.</summary>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="s" /> parameter exceeds the maximum length allowed by the operating system.</exception>
      <returns>The address, in unmanaged memory, to where <paramref name="s" /> was copied, or 0 if <paramref name="s" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> into unmanaged memory, converting into ANSI format if required.</summary>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>The address, in unmanaged memory, to where the string was copied, or 0 if <paramref name="s" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)">
      <summary>Copies the contents of a managed <see cref="T:System.String" /> into unmanaged memory.</summary>
      <param name="s">A managed string to be copied.</param>
      <exception cref="T:System.OutOfMemoryException">The method could not allocate enough native heap memory.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="s" /> parameter exceeds the maximum length allowed by the operating system.</exception>
      <returns>The address, in unmanaged memory, to where the <paramref name="s" /> was copied, or 0 if <paramref name="s" /> is <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary>Marshals data from a managed object to an unmanaged block of memory.</summary>
      <param name="structure">A managed object that holds the data to be marshaled. This object must be a structure or an instance of a formatted class.</param>
      <param name="ptr">A pointer to an unmanaged block of memory, which must be allocated before this method is called.</param>
      <param name="fDeleteOld">
        <see langword="true" /> to call the <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" /> method on the <paramref name="ptr" /> parameter before this method copies the data. The block must contain valid data. Note that passing <see langword="false" /> when the memory block already contains data can lead to a memory leak.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structure" /> is a reference type that is not a formatted class.

 -or-

 <paramref name="structure" /> is an instance of a generic type (in the .NET Framework 4.5 and earlier versions only).</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)">
      <summary>

 Marshals data from a managed object of a specified type to an unmanaged block of memory.</summary>
      <param name="structure">A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.</param>
      <param name="ptr">A pointer to an unmanaged block of memory, which must be allocated before this method is called.</param>
      <param name="fDeleteOld">
        <see langword="true" /> to call the <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" /> method on the <paramref name="ptr" /> parameter before this method copies the data. The block must contain valid data. Note that passing <see langword="false" /> when the memory block already contains data can lead to a memory leak.</param>
      <typeparam name="T">The type of the managed object.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="structure" /> is a reference type that is not a formatted class.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.Guid@,System.IntPtr)">
      <param name="errorCode" />
      <param name="iid" />
      <param name="pUnk" />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary>Throws an exception with a specific failure HRESULT, based on the specified IErrorInfo interface.</summary>
      <param name="errorCode">The HRESULT corresponding to the desired exception.</param>
      <param name="errorInfo">A pointer to the IErrorInfo interface that provides more information about the error. You can specify <c>IntPtr(0)</c> to use the current IErrorInfo interface, or <c>IntPtr(-1)</c> to ignore the current IErrorInfo interface and construct the exception just from the error code.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary>Throws an exception with a specific failure HRESULT value.</summary>
      <param name="errorCode">The HRESULT corresponding to the desired exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary>Gets the address of the element at the specified index inside the specified array.</summary>
      <param name="arr">The array that contains the desired element.</param>
      <param name="index">The index in the <paramref name="arr" /> parameter of the desired element.</param>
      <returns>The address of <paramref name="index" /> inside <paramref name="arr" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)">
      <summary>

 Gets the address of the element at the specified index in an array of a specified type.</summary>
      <param name="arr">The array that contains the desired element.</param>
      <param name="index">The index of the desired element in the <paramref name="arr" /> array.</param>
      <typeparam name="T">The type of the array.</typeparam>
      <returns>The address of <paramref name="index" /> in <paramref name="arr" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary>Writes a single byte value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.

 -or-

 <paramref name="ptr" /> is <see langword="null" />.

 -or-

 <paramref name="ptr" /> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary>Writes a single byte value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
      <summary>Writes a single byte value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)">
      <summary>Writes a character as a 16-bit integer value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.

 -or-

 <paramref name="ptr" /> is <see langword="null" />.

 -or-

 <paramref name="ptr" /> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary>Writes a 16-bit integer value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.

 -or-

 <paramref name="ptr" /> is <see langword="null" />.

 -or-

 <paramref name="ptr" /> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
      <summary>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in the native heap to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary>Writes a 16-bit signed integer value into unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
      <summary>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
      <summary>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary>Writes a 32-bit signed integer value into unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary>Writes a 32-bit signed integer value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.

 -or-

 <paramref name="ptr" /> is <see langword="null" />.

 -or-

 <paramref name="ptr" /> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
      <summary>Writes a 32-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary>Writes a 64-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary>Writes a 64-bit signed integer value to unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.

 -or-

 <paramref name="ptr" /> is <see langword="null" />.

 -or-

 <paramref name="ptr" /> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
      <summary>Writes a 64-bit signed integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
      <summary>Writes a processor native-sized integer value to unmanaged memory at a specified offset.</summary>
      <param name="ptr">The base address in unmanaged memory to write to.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary>Writes a processor native-sized integer value into unmanaged memory.</summary>
      <param name="ptr">The address in unmanaged memory to write to.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> is not a recognized format.

 -or-

 <paramref name="ptr" /> is <see langword="null" />.

 -or-

 <paramref name="ptr" /> is invalid.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
      <summary>Writes a processor native-sized integer value to unmanaged memory.</summary>
      <param name="ptr">The base address in unmanaged memory of the target object.</param>
      <param name="ofs">An additional byte offset, which is added to the <paramref name="ptr" /> parameter before writing.</param>
      <param name="val">The value to write.</param>
      <exception cref="T:System.AccessViolationException">Base address (<paramref name="ptr" />) plus offset byte (<paramref name="ofs" />) produces a null or invalid address.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> is an <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> object. This method does not accept <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> parameters.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)">
      <summary>Frees a BSTR pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" /> method.</summary>
      <param name="s">The address of the <see langword="BSTR" /> to free.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
      <summary>Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" /> method.</summary>
      <param name="s">The address of the unmanaged string to free.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
      <summary>Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" /> method.</summary>
      <param name="s">The address of the unmanaged string to free.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)">
      <summary>Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)" /> method.</summary>
      <param name="s">The address of the unmanaged string to free.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
      <summary>Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" /> method.</summary>
      <param name="s">The address of the unmanaged string to free.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
      <summary>Frees an unmanaged string pointer that was allocated using the <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" /> method.</summary>
      <param name="s">The address of the unmanaged string to free.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary>Indicates how to marshal the data between managed and unmanaged code.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary>Specifies the element type of the unmanaged <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray" /> or <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex">
      <summary>Specifies the parameter index of the unmanaged <see langword="iid_is" /> attribute used by COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary>Provides additional information to a custom marshaler.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary>Specifies the fully qualified name of a custom marshaler.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary>Implements <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> as a type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType">
      <summary>Indicates the element type of the <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType">
      <summary>Indicates the user-defined element type of the <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary>Indicates the number of elements in the fixed-length array or the number of characters (not bytes) in a string to import.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary>Indicates the zero-based parameter that contains the count of array elements, similar to <see langword="size_is" /> in COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> value.</summary>
      <param name="unmanagedType">The value the data is to be marshaled as.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> enumeration member.</summary>
      <param name="unmanagedType">The value the data is to be marshaled as.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> value the data is to be marshaled as.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> value the data is to be marshaled as.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary>The exception that is thrown by the marshaler when it encounters a <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> it does not support.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor">
      <summary>Initializes a new instance of the <see langword="MarshalDirectiveException" /> class with default properties.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see langword="MarshalDirectiveException" /> class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.MarshalDirectiveException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see langword="MarshalDirectiveException" /> class with a specified error message.</summary>
      <param name="message">The error message that specifies the reason for the exception.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller">
      <summary>Marshaller for ANSI strings.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ConvertToManaged(System.Byte*)">
      <summary>Converts an unmanaged string to a managed version.</summary>
      <param name="unmanaged">The unmanaged string to convert.</param>
      <returns>A managed string.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ConvertToUnmanaged(System.String)">
      <summary>Converts a string to an unmanaged version.</summary>
      <param name="managed">The managed string to convert.</param>
      <returns>An unmanaged string.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.Free(System.Byte*)">
      <summary>Frees the memory for the unmanaged string.</summary>
      <param name="unmanaged">The memory allocated for the unmanaged string.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ManagedToUnmanagedIn">
      <summary>Custom marshaller to marshal a managed string as a ANSI unmanaged string.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ManagedToUnmanagedIn.Free">
      <summary>Frees any allocated unmanaged string memory.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ManagedToUnmanagedIn.FromManaged(System.String,System.Span{System.Byte})">
      <summary>Initializes the marshaller with a managed string and requested buffer.</summary>
      <param name="managed">The managed string to initialize the marshaller with.</param>
      <param name="buffer">A request buffer of at least size <see cref="P:System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ManagedToUnmanagedIn.BufferSize" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ManagedToUnmanagedIn.ToUnmanaged">
      <summary>Converts the current managed string to an unmanaged string.</summary>
      <returns>The converted unmanaged string.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.AnsiStringMarshaller.ManagedToUnmanagedIn.BufferSize">
      <summary>Gets the requested buffer size for optimized marshalling.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2">
      <summary>Represents a marshaller for arrays.</summary>
      <typeparam name="T">The array element type.</typeparam>
      <typeparam name="TUnmanagedElement">The unmanaged type for the element type.</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.AllocateContainerForManagedElements(`1*,System.Int32)">
      <summary>Allocates memory for the managed representation of the array.</summary>
      <param name="unmanaged">The unmanaged array.</param>
      <param name="numElements">The unmanaged element count.</param>
      <returns>The managed array.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.AllocateContainerForUnmanagedElements(`0[],System.Int32@)">
      <summary>Allocates memory for the unmanaged representation of the array.</summary>
      <param name="managed">The managed array.</param>
      <param name="numElements">The unmanaged element count.</param>
      <returns>The unmanaged pointer to the allocated memory.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.Free(`1*)">
      <summary>Frees memory for the unmanaged array.</summary>
      <param name="unmanaged">The unmanaged array.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.GetManagedValuesDestination(`0[])">
      <summary>Gets a destination for the managed elements in the array.</summary>
      <param name="managed">The managed array.</param>
      <returns>The <see cref="T:System.Span`1" /> of managed elements.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.GetManagedValuesSource(`0[])">
      <summary>Gets a source for the managed elements in the array.</summary>
      <param name="managed">The managed array.</param>
      <returns>The <see cref="T:System.ReadOnlySpan`1" /> containing the managed elements to marshal.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.GetUnmanagedValuesDestination(`1*,System.Int32)">
      <summary>Gets a destination for the unmanaged elements in the array.</summary>
      <param name="unmanaged">The unmanaged allocation.</param>
      <param name="numElements">The unmanaged element count.</param>
      <returns>The <see cref="T:System.Span`1" /> of unmanaged elements.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.GetUnmanagedValuesSource(`1*,System.Int32)">
      <summary>Gets a source for the unmanaged elements in the array.</summary>
      <param name="unmanagedValue">The unmanaged array.</param>
      <param name="numElements">The unmanaged element count.</param>
      <returns>The <see cref="T:System.ReadOnlySpan`1" /> containing the unmanaged elements to marshal.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn">
      <summary>Marshaller for marshalling a array from managed to unmanaged.</summary>
      <typeparam name="T" />
      <typeparam name="TUnmanagedElement" />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn.Free">
      <summary>Frees resources.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn.FromManaged(`0[],System.Span{`1})">
      <summary>Initializes the <see cref="T:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn" /> marshaller.</summary>
      <param name="array">The array to be marshalled.</param>
      <param name="buffer">The buffer that may be used for marshalling.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn.GetManagedValuesSource">
      <summary>Returns a span that points to the memory where the managed values of the array are stored.</summary>
      <returns>A span over managed values of the array.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn.GetPinnableReference">
      <summary>Returns a reference to the marshalled array.</summary>
      <returns>A pinnable reference to the unmanaged marshalled array.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn.GetPinnableReference(`0[])">
      <summary>Gets a pinnable reference to the managed array.</summary>
      <param name="array">The managed array.</param>
      <returns>The reference that can be pinned and directly passed to unmanaged code.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn.GetUnmanagedValuesDestination">
      <summary>Returns a span that points to the memory where the unmanaged values of the array should be stored.</summary>
      <returns>A span where unmanaged values of the array should be stored.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn.ToUnmanaged">
      <summary>Returns the unmanaged value representing the array.</summary>
      <returns>A pointer to the beginning of the unmanaged value.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.ArrayMarshaller`2.ManagedToUnmanagedIn.BufferSize">
      <summary>Gets the requested caller-allocated buffer size.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.BStrStringMarshaller">
      <summary>Marshaller for BSTR strings.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ConvertToManaged(System.UInt16*)">
      <summary>Converts an unmanaged string to a managed version.</summary>
      <param name="unmanaged">An unmanaged string to convert.</param>
      <returns>The converted managed string.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ConvertToUnmanaged(System.String)">
      <summary>Converts a string to an unmanaged version.</summary>
      <param name="managed">A managed string to convert.</param>
      <returns>The converted unmanaged string.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.Free(System.UInt16*)">
      <summary>Frees the memory for the unmanaged string.</summary>
      <param name="unmanaged">The memory allocated for the unmanaged string.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ManagedToUnmanagedIn">
      <summary>Custom marshaller to marshal a managed string as a ANSI unmanaged string.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ManagedToUnmanagedIn.Free">
      <summary>Frees any allocated unmanaged string memory.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ManagedToUnmanagedIn.FromManaged(System.String,System.Span{System.Byte})">
      <summary>Initializes the marshaller with a managed string and requested buffer.</summary>
      <param name="managed">The managed string to initialize the marshaller with.</param>
      <param name="buffer">A request buffer of at least size <see cref="P:System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ManagedToUnmanagedIn.BufferSize" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ManagedToUnmanagedIn.ToUnmanaged">
      <summary>Converts the current managed string to an unmanaged string.</summary>
      <returns>The converted unmanaged string.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.BStrStringMarshaller.ManagedToUnmanagedIn.BufferSize">
      <summary>Gets the requested buffer size for optimized marshalling.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.ComExposedClassAttribute`1">
      <summary>Indicates that a type's instances should be exposed to COM.</summary>
      <typeparam name="T">The type that provides information about how to expose the attributed type to COM.</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComExposedClassAttribute`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.Marshalling.ComExposedClassAttribute`1" /> class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComExposedClassAttribute`1.GetComInterfaceEntries(System.Int32@)">
      <summary>Gets the COM interface information to provide to a <see cref="T:System.Runtime.InteropServices.ComWrappers" /> instance to expose this type to COM.</summary>
      <param name="count">The number of COM interfaces this type implements.</param>
      <returns>The interface entry information for the interfaces the type implements.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.ComInterfaceMarshaller`1">
      <summary>Marshals a COM interface using a <see cref="T:System.Runtime.InteropServices.Marshalling.StrategyBasedComWrappers" /> instance.</summary>
      <typeparam name="T">The managed type that represents a COM interface type</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComInterfaceMarshaller`1.ConvertToManaged(System.Void*)">
      <summary>Converts a COM interface pointer to a managed object.</summary>
      <param name="unmanaged">The COM interface pointer.</param>
      <returns>A managed object that represents the passed in COM interface pointer, or the managed object represented by the passed in pointer.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComInterfaceMarshaller`1.ConvertToUnmanaged(`0)">
      <summary>Converts a managed object to a COM interface pointer for the COM interface represented by <typeparamref name="T" />.</summary>
      <param name="managed">The managed object.</param>
      <returns>The COM interface pointer.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComInterfaceMarshaller`1.Free(System.Void*)">
      <summary>Releases a reference to the COM interface pointer.</summary>
      <param name="unmanaged">A COM interface pointer.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.ComInterfaceOptions">
      <summary>Options for how to generate COM interface interop with the COM interop source generator.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshalling.ComInterfaceOptions.ComObjectWrapper">
      <summary>Generate a wrapper for COM objects to enable exposing them through the managed interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshalling.ComInterfaceOptions.ManagedObjectWrapper">
      <summary>Generate a wrapper for managed objects to enable exposing them through the COM interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshalling.ComInterfaceOptions.None">
      <summary>No options specified.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.ComObject">
      <summary>Base class for all COM source-generated runtime callable wrappers (RCWs).</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComObject.Finalize">
      <summary>Releases all references to the underlying COM object.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComObject.FinalRelease">
      <summary>Releases all references owned by this <see cref="T:System.Runtime.InteropServices.Marshalling.ComObject" /> if it is a unique instance.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComObject.System#Runtime#InteropServices#IDynamicInterfaceCastable#GetInterfaceImplementation(System.RuntimeTypeHandle)">
      <summary>Determines the type to use to dispatch the specified interface type. This method is called during interface dispatch when the given interface type can't be found in the class's metadata.</summary>
      <param name="interfaceType">The interface type.</param>
      <returns>The type that should be used to dispatch for <paramref name="interfaceType" /> on the current object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComObject.System#Runtime#InteropServices#IDynamicInterfaceCastable#IsInterfaceImplemented(System.RuntimeTypeHandle,System.Boolean)">
      <summary>Determines if this object can be cast to the specified interface type. This method is called when an implementing class instance is cast to an interface type that's not contained in the class's metadata.</summary>
      <param name="interfaceType">The interface type.</param>
      <param name="throwIfNotImplemented">
        <see langword="true" /> to throw an exception instead of returning <see langword="false" />; otherwise, <see langword="false" />.</param>
      <returns>
        <see langword="true" /> if this object can be cast to the given interface; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComObject.System#Runtime#InteropServices#Marshalling#IUnmanagedVirtualMethodTableProvider#GetVirtualMethodTableInfoForKey(System.Type)">
      <summary>Get the information about the virtual method table for a given unmanaged interface type represented by <paramref name="type" />.</summary>
      <param name="type">The managed type for the unmanaged interface.</param>
      <returns>The virtual method table information for the unmanaged interface.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.ComVariant">
      <summary>A type that represents an OLE VARIANT in managed code.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComVariant.As``1">
      <summary>Create a managed value based on the value in the <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" /> instance.</summary>
      <typeparam name="T">The managed type to create an instance of.</typeparam>
      <exception cref="T:System.ArgumentException">When <typeparamref name="T" /> does not match the <see cref="P:System.Runtime.InteropServices.Marshalling.ComVariant.VarType" /> of the <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" />.</exception>
      <returns>The managed value contained in this variant.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComVariant.Create``1(``0)">
      <summary>Create an <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" /> instance from the specified value.</summary>
      <param name="value">The value to wrap in an <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" />.</param>
      <typeparam name="T">The type of the specified value.</typeparam>
      <exception cref="T:System.ArgumentException">When <typeparamref name="T" /> does not directly correspond to a <see cref="T:System.Runtime.InteropServices.VarEnum" /> variant type.</exception>
      <returns>An <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" /> that contains the provided value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComVariant.CreateRaw``1(System.Runtime.InteropServices.VarEnum,``0)">
      <summary>Create a <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" /> with the given type and provided value.</summary>
      <param name="vt">The type of the variant</param>
      <param name="rawValue">The raw value to store in the variant without any processing</param>
      <typeparam name="T">The type of the value to store in the variant.</typeparam>
      <exception cref="T:System.ArgumentException">When the provided <paramref name="vt" /> corresponds to a variant type that is not supported in VARIANTs or is <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DECIMAL" /></exception>
      <exception cref="T:System.PlatformNotSupportedException">When the provided <paramref name="vt" /> specifies the <see cref="F:System.Runtime.InteropServices.VarEnum.VT_ARRAY" /> flag for SAFEARRAYs.</exception>
      <returns>A variant that contains the provided value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComVariant.Dispose">
      <summary>Release resources owned by this <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" /> instance.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComVariant.GetRawDataRef``1">
      <summary>Get a reference to the storage location within this <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" /> instance.</summary>
      <typeparam name="T">The type of reference to return.</typeparam>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> is <see cref="T:System.Decimal" /> or larger than the storage space in an <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" />.</exception>
      <returns>A reference to the storage location within this <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" />.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.ComVariant.Null">
      <summary>A <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" /> instance that represents a <see langword="null" /> value with <see cref="F:System.Runtime.InteropServices.VarEnum.VT_NULL" /> type.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.ComVariant.VarType">
      <summary>The type of the data stored in this <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.ComVariantMarshaller">
      <summary>Marshals an <see cref="T:System.Object" /> to an <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComVariantMarshaller.ConvertToManaged(System.Runtime.InteropServices.Marshalling.ComVariant)">
      <summary>Converts an unmanaged <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" /> to a managed object.</summary>
      <param name="unmanaged">The unmanaged variant.</param>
      <exception cref="T:System.ArgumentException">The type of data stored in <paramref name="unmanaged" /> is not supported.</exception>
      <returns>A managed object that represents the same value as <paramref name="unmanaged" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComVariantMarshaller.ConvertToUnmanaged(System.Object)">
      <summary>Converts a managed object to an unmanaged <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" />.</summary>
      <param name="managed">The managed object.</param>
      <exception cref="T:System.ArgumentException">The type of <paramref name="managed" /> is not supported.</exception>
      <returns>A <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" /> that represents the provided managed object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComVariantMarshaller.Free(System.Runtime.InteropServices.Marshalling.ComVariant)">
      <summary>Disposes the unmanaged <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" />.</summary>
      <param name="unmanaged">The object to dispose.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.ComVariantMarshaller.RefPropagate">
      <summary>Marshals a <see cref="T:System.Object" /> to an <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" />, propagating the value of the <see cref="T:System.Object" /> back to the variant's existing data storage if the variant has <see cref="F:System.Runtime.InteropServices.VarEnum.VT_BYREF" /> type.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComVariantMarshaller.RefPropagate.Free">
      <summary>Free all resources owned by the marshaller.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComVariantMarshaller.RefPropagate.FromManaged(System.Object)">
      <summary>Initializes the marshaller with a managed object.</summary>
      <param name="managed">The managed object.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComVariantMarshaller.RefPropagate.FromUnmanaged(System.Runtime.InteropServices.Marshalling.ComVariant)">
      <summary>Initializes the marshaller with an unmanaged variant.</summary>
      <param name="unmanaged">The unmanaged value</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComVariantMarshaller.RefPropagate.ToManaged">
      <summary>Create the managed value based on the provided unmanaged value.</summary>
      <returns>The managed value corresponding to the VARIANT.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ComVariantMarshaller.RefPropagate.ToUnmanaged">
      <summary>Create an unmanaged <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" /> based on the provided managed and unmanaged values.</summary>
      <exception cref="T:System.ArgumentException">When the managed value must be propagated back to the unmanaged variant, but the managed value type cannot be converted to the variant's type.</exception>
      <returns>An <see cref="T:System.Runtime.InteropServices.Marshalling.ComVariant" /> instance representing the marshaller's current state.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.ExceptionAsDefaultMarshaller`1">
      <summary>Converts the exception to the default value of the specified unmanaged type.</summary>
      <typeparam name="T">The unmanaged type.</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ExceptionAsDefaultMarshaller`1.ConvertToUnmanaged(System.Exception)">
      <summary>Converts the specified exception to the default value of the unmanaged type.</summary>
      <param name="e">The exception</param>
      <returns>The default value of <typeparamref name="T" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.ExceptionAsHResultMarshaller`1">
      <summary>Marshals an exception object to the value of its <see cref="P:System.Exception.HResult" /> converted to <typeparamref name="T" />.</summary>
      <typeparam name="T">The unmanaged type to convert the HResult to.</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ExceptionAsHResultMarshaller`1.ConvertToUnmanaged(System.Exception)">
      <summary>Marshals an exception object to the value of its <see cref="P:System.Exception.HResult" /> converted to <typeparamref name="T" />.</summary>
      <param name="e">The exception.</param>
      <returns>The HResult of the exception, converted to <typeparamref name="T" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.ExceptionAsNaNMarshaller`1">
      <summary>Converts all exceptions to <see cref="P:System.Numerics.IFloatingPointIeee754`1.NaN" />.</summary>
      <typeparam name="T">The unmanaged type to return the <c>NaN</c> value for.</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ExceptionAsNaNMarshaller`1.ConvertToUnmanaged(System.Exception)">
      <summary>Converts the specified exception to <see cref="P:System.Numerics.IFloatingPointIeee754`1.NaN" />.</summary>
      <param name="e">The exception.</param>
      <returns>
        <see cref="P:System.Numerics.IFloatingPointIeee754`1.NaN" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.ExceptionAsVoidMarshaller">
      <summary>Represents a marshaller that swallows exceptions.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.ExceptionAsVoidMarshaller.ConvertToUnmanaged(System.Exception)">
      <summary>Swallows the specified exception and returns nothing.</summary>
      <param name="e">The exception.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.GeneratedComClassAttribute">
      <summary>Specifies that the attributed type will be exposed to COM through source-generated COM and that the source generator should generate code for it.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.GeneratedComClassAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.Marshalling.GeneratedComClassAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.GeneratedComInterfaceAttribute">
      <summary>Specifies that the attributed type is a COM interface and that the source generator should generate code for it.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.GeneratedComInterfaceAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.Marshalling.GeneratedComInterfaceAttribute" /> class.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.GeneratedComInterfaceAttribute.ExceptionToUnmanagedMarshaller" />
    <member name="P:System.Runtime.InteropServices.Marshalling.GeneratedComInterfaceAttribute.Options">
      <summary>Options for how to generate COM interface interop with the COM interop source generator.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.GeneratedComInterfaceAttribute.StringMarshalling">
      <summary>Gets or sets a value that specifies how to marshal string arguments to all methods on the interface.
            If the attributed interface inherits from another interface with <see cref="T:System.Runtime.InteropServices.Marshalling.GeneratedComInterfaceAttribute" />, it must have the same values for <see cref="P:System.Runtime.InteropServices.Marshalling.GeneratedComInterfaceAttribute.StringMarshalling" /> and <see cref="P:System.Runtime.InteropServices.Marshalling.GeneratedComInterfaceAttribute.StringMarshallingCustomType" />.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.GeneratedComInterfaceAttribute.StringMarshallingCustomType">
      <summary>Gets or sets the <see cref="T:System.Type" /> used to control how string arguments are marshalled for all methods on the interface.
            If the attributed interface inherits from another interface with <see cref="T:System.Runtime.InteropServices.Marshalling.GeneratedComInterfaceAttribute" />, it must have the same values for <see cref="P:System.Runtime.InteropServices.Marshalling.GeneratedComInterfaceAttribute.StringMarshalling" /> and <see cref="P:System.Runtime.InteropServices.Marshalling.GeneratedComInterfaceAttribute.StringMarshallingCustomType" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.IComExposedClass">
      <summary>Defines type-level information for managed class types exposed to COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.IComExposedClass.GetComInterfaceEntries(System.Int32@)">
      <summary>Gets the COM interface information to provide to a <see cref="T:System.Runtime.InteropServices.ComWrappers" /> instance to expose this type to COM.</summary>
      <param name="count">The number of COM interfaces this type implements.</param>
      <returns>The interface entry information for the interfaces the type implements.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.IComExposedDetails">
      <summary>Defines details about a managed class type exposed to COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.IComExposedDetails.GetComInterfaceEntries(System.Int32@)">
      <summary>Gets the COM interface information to provide to a <see cref="T:System.Runtime.InteropServices.ComWrappers" /> instance to expose this type to COM.</summary>
      <param name="count">The number of COM interfaces this type implements.</param>
      <returns>The interface entry information for the interfaces the type implements.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.IIUnknownCacheStrategy">
      <summary>Defines an unmanaged virtual method table look up strategy.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.IIUnknownCacheStrategy.Clear(System.Runtime.InteropServices.Marshalling.IIUnknownStrategy)">
      <summary>Clears the cache.</summary>
      <param name="unknownStrategy">The <see cref="T:System.Runtime.InteropServices.Marshalling.IIUnknownStrategy" /> to use for clearing.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.IIUnknownCacheStrategy.ConstructTableInfo(System.RuntimeTypeHandle,System.Runtime.InteropServices.Marshalling.IIUnknownDerivedDetails,System.Void*)">
      <summary>Constructs a <see cref="T:System.Runtime.InteropServices.Marshalling.IIUnknownCacheStrategy.TableInfo" /> instance.</summary>
      <param name="handle">The runtime type handle.</param>
      <param name="interfaceDetails">The interface details.</param>
      <param name="ptr">The pointer to the instance to query.</param>
      <returns>The constructed <see cref="T:System.Runtime.InteropServices.Marshalling.IIUnknownCacheStrategy.TableInfo" /> instance for the provided information.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.IIUnknownCacheStrategy.TryGetTableInfo(System.RuntimeTypeHandle,System.Runtime.InteropServices.Marshalling.IIUnknownCacheStrategy.TableInfo@)">
      <summary>Tries to get the associated <see cref="T:System.Runtime.InteropServices.Marshalling.IIUnknownCacheStrategy.TableInfo" />.</summary>
      <param name="handle">The runtime type handle.</param>
      <param name="info">When this method returns, contains the unmanaged virtual method table information.</param>
      <returns>
        <see langword="true" /> if found, otherwise <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.IIUnknownCacheStrategy.TrySetTableInfo(System.RuntimeTypeHandle,System.Runtime.InteropServices.Marshalling.IIUnknownCacheStrategy.TableInfo)">
      <summary>Tries to set the associated <see cref="T:System.Runtime.InteropServices.Marshalling.IIUnknownCacheStrategy.TableInfo" />.</summary>
      <param name="handle">The runtime type handle.</param>
      <param name="info">The unmanaged virtual method table information.</param>
      <returns>
        <see langword="true" /> if set, otherwise <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.IIUnknownCacheStrategy.TableInfo">
      <summary>Contains information about a COM interface and its virtual method table.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.IIUnknownCacheStrategy.TableInfo.ManagedType">
      <summary>Gets the managed type that provides a managed projection of the unmanaged interface.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.IIUnknownCacheStrategy.TableInfo.Table">
      <summary>Gets a pointer to the virtual method table for this unmanaged interface.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.IIUnknownCacheStrategy.TableInfo.ThisPtr">
      <summary>Gets the <c>this</c> pointer of the unmanaged interface.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.IIUnknownDerivedDetails">
      <summary>Provides details for the IUnknown-derived interface.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.IIUnknownDerivedDetails.Iid">
      <summary>Gets the interface ID.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.IIUnknownDerivedDetails.Implementation">
      <summary>Gets the managed type used to project the IUnknown-derived interface.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.IIUnknownDerivedDetails.ManagedVirtualMethodTable">
      <summary>Gets a pointer to the virtual method table to enable unmanaged callers to call a managed implementation of the interface.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.IIUnknownInterfaceDetailsStrategy">
      <summary>Defines a strategy for acquiring interface details.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.IIUnknownInterfaceDetailsStrategy.GetComExposedTypeDetails(System.RuntimeTypeHandle)">
      <summary>Gets details about the specified type that are exposed to COM.</summary>
      <param name="type">The runtime type handle.</param>
      <returns>Details about the specified type, if it's known.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.IIUnknownInterfaceDetailsStrategy.GetIUnknownDerivedDetails(System.RuntimeTypeHandle)">
      <summary>Gets the IUnknown details for the specified type.</summary>
      <param name="type">The runtime type handle.</param>
      <returns>Details about the specified type, if it's known.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.IIUnknownInterfaceType">
      <summary>Defines type-level information for an IUnknown-derived interface.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.IIUnknownInterfaceType.Iid">
      <summary>Gets the interface ID (IID) for the interface.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.IIUnknownInterfaceType.ManagedVirtualMethodTable">
      <summary>Gets a pointer to the virtual method table to enable unmanaged callers to call a managed implementation of the interface.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.IIUnknownStrategy">
      <summary>Defines the IUnknown interaction strategy.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.IIUnknownStrategy.CreateInstancePointer(System.Void*)">
      <summary>Creates an instance pointer that represents the specified IUnknown instance.</summary>
      <param name="unknown">The IUnknown instance.</param>
      <returns>A pointer representing the unmanaged instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.IIUnknownStrategy.QueryInterface(System.Void*,System.Guid@|System.Runtime.InteropServices.InAttribute,System.Void*@)">
      <summary>Performs a QueryInterface() for an IID on the unmanaged instance.</summary>
      <param name="instancePtr">A pointer representing the unmanaged instance.</param>
      <param name="iid">The IID (Interface ID) to query for.</param>
      <param name="ppObj">The resulting interface.</param>
      <returns>An HRESULT that represents the success of the operation.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.IIUnknownStrategy.Release(System.Void*)">
      <summary>Calls <see langword="Release()" /> on the specified unmanaged instance.</summary>
      <param name="instancePtr">A pointer representing the unmanaged instance.</param>
      <returns>The current reference count.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.IUnknownDerivedAttribute`2">
      <summary>Indicates that an interface is a managed representation of an IUnknown-derived interface.</summary>
      <typeparam name="T">The type that provides type-level information about the interface.</typeparam>
      <typeparam name="TImpl">The type to use for calling from managed callers to unmanaged implementations of the interface.</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.IUnknownDerivedAttribute`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.Marshalling.IUnknownDerivedAttribute`2" /> class.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.IUnknownDerivedAttribute`2.Iid">
      <summary>Gets the interface ID.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.IUnknownDerivedAttribute`2.Implementation">
      <summary>Gets the managed type used to project the IUnknown-derived interface.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.IUnknownDerivedAttribute`2.ManagedVirtualMethodTable">
      <summary>Gets a pointer to the virtual method table to enable unmanaged callers to call a managed implementation of the interface.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider">
      <summary>Provides information about a virtual method table for a managed interface to enable invoking methods in the virtual method table.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.IUnmanagedVirtualMethodTableProvider.GetVirtualMethodTableInfoForKey(System.Type)">
      <summary>Gets the information about the virtual method table for the unmanaged interface type represented by <paramref name="type" />.</summary>
      <param name="type">The managed type for the unmanaged interface.</param>
      <returns>The virtual method table information for the unmanaged interface.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.MarshalUsingAttribute">
      <summary>Attribute used to provide a custom marshaller type or size information for marshalling.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshalling.MarshalUsingAttribute.ReturnsCountValue">
      <summary>A constant string that represents the name of the return value for <see cref="P:System.Runtime.InteropServices.Marshalling.MarshalUsingAttribute.CountElementName" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.MarshalUsingAttribute.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Runtime.InteropServices.Marshalling.MarshalUsingAttribute" /> that provides only size information.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.MarshalUsingAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of <see cref="T:System.Runtime.InteropServices.Marshalling.MarshalUsingAttribute" /> that provides a native marshalling type and optionally size information.</summary>
      <param name="nativeType">The marshaller type used to convert the attributed type from managed to native code.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.MarshalUsingAttribute.ConstantElementCount">
      <summary>If a collection is constant size, gets or sets the size of the collection when marshalling from unmanaged to managed.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.MarshalUsingAttribute.CountElementName">
      <summary>Gets or sets the name of the parameter that will provide the size of the collection when marshalling from unmanaged to managed, or <see cref="F:System.Runtime.InteropServices.Marshalling.MarshalUsingAttribute.ReturnsCountValue" /> if the return value provides the size.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.MarshalUsingAttribute.ElementIndirectionDepth">
      <summary>Gets or sets the indirection depth this marshalling info is provided for.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.MarshalUsingAttribute.NativeType">
      <summary>Gets the marshaller type used to convert the attributed type from managed to native code.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2">
      <summary>Represents a marshaller for an array of pointers.</summary>
      <typeparam name="T">The array element pointer type.</typeparam>
      <typeparam name="TUnmanagedElement">The unmanaged type for the element pointer type.</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2.AllocateContainerForManagedElements(`1*,System.Int32)">
      <summary>Allocates memory for the managed representation of the array.</summary>
      <param name="unmanaged">The unmanaged array.</param>
      <param name="numElements">The unmanaged element count.</param>
      <returns>The managed array.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2.AllocateContainerForUnmanagedElements(`0*[],System.Int32@)">
      <summary>Allocates memory for the unmanaged representation of the array.</summary>
      <param name="managed">The managed array to marshal.</param>
      <param name="numElements">The unmanaged element count.</param>
      <returns>The unmanaged pointer to the allocated memory.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2.Free(`1*)">
      <summary>Frees memory for the unmanaged array.</summary>
      <param name="unmanaged">The unmanaged array.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2.GetManagedValuesDestination(`0*[])">
      <summary>Gets a destination for the managed elements in the array.</summary>
      <param name="managed">The managed array to get a destination for.</param>
      <returns>The <see cref="T:System.Span`1" /> of managed elements.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2.GetManagedValuesSource(`0*[])">
      <summary>Gets a source for the managed elements in the array.</summary>
      <param name="managed">The managed array to get a source for.</param>
      <returns>The <see cref="T:System.ReadOnlySpan`1" /> containing the managed elements to marshal.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2.GetUnmanagedValuesDestination(`1*,System.Int32)">
      <summary>Gets a destination for the unmanaged elements in the array.</summary>
      <param name="unmanaged">The unmanaged allocation to get a destination for.</param>
      <param name="numElements">The unmanaged element count.</param>
      <returns>The <see cref="T:System.Span`1" /> of unmanaged elements.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2.GetUnmanagedValuesSource(`1*,System.Int32)">
      <summary>Gets a source for the unmanaged elements in the array.</summary>
      <param name="unmanagedValue">The unmanaged array to get a source for.</param>
      <param name="numElements">The unmanaged element count.</param>
      <returns>The <see cref="T:System.ReadOnlySpan`1" /> containing the unmanaged elements to marshal.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2.ManagedToUnmanagedIn">
      <summary>Represents a marshaller for marshalling an array from managed to unmanaged.</summary>
      <typeparam name="T" />
      <typeparam name="TUnmanagedElement" />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2.ManagedToUnmanagedIn.Free">
      <summary>Frees resources.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2.ManagedToUnmanagedIn.FromManaged(`0*[],System.Span{`1})">
      <summary>Initializes the <see cref="T:System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2.ManagedToUnmanagedIn" /> marshaller.</summary>
      <param name="array">The array to be marshalled.</param>
      <param name="buffer">The buffer that may be used for marshalling.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2.ManagedToUnmanagedIn.GetManagedValuesSource">
      <summary>Returns a span that points to the memory where the managed values of the array are stored.</summary>
      <returns>A span over managed values of the array.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2.ManagedToUnmanagedIn.GetPinnableReference">
      <summary>Returns a reference to the marshalled array.</summary>
      <returns>A pinnable reference to the unmanaged marshalled array.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2.ManagedToUnmanagedIn.GetPinnableReference(`0*[])">
      <summary>Gets a pinnable reference to the managed array.</summary>
      <param name="array">The managed array.</param>
      <returns>The reference that can be pinned and directly passed to unmanaged code.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2.ManagedToUnmanagedIn.GetUnmanagedValuesDestination">
      <summary>Returns a span that points to the memory where the unmanaged values of the array should be stored.</summary>
      <returns>A span where unmanaged values of the array should be stored.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2.ManagedToUnmanagedIn.ToUnmanaged">
      <summary>Returns the unmanaged value representing the array.</summary>
      <returns>A pointer to the beginning of the unmanaged value.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.PointerArrayMarshaller`2.ManagedToUnmanagedIn.BufferSize">
      <summary>Gets the requested caller-allocated buffer size.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.StrategyBasedComWrappers">
      <summary>A <see cref="T:System.Runtime.InteropServices.ComWrappers" />-based type that uses customizable strategy objects to implement COM object wrappers and managed object wrappers exposed to COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.StrategyBasedComWrappers.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.ComWrappers" /> class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.StrategyBasedComWrappers.ComputeVtables(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags,System.Int32@)">
      <summary>Computes the desired Vtable for <paramref name="obj" />, respecting the values of <paramref name="flags" />.</summary>
      <param name="obj">Target of the returned Vtables.</param>
      <param name="flags">A bitwise combination of the enumeration values that specifies how to compute Vtables.</param>
      <param name="count">When this method returns, contains the number of elements contained in the returned memory.</param>
      <returns>
        <see cref="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry" /> pointer containing memory for all COM interface entries.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.StrategyBasedComWrappers.CreateCacheStrategy">
      <summary>Creates the caching strategy for a new COM object wrapper.</summary>
      <returns>The caching strategy to use for the new COM object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.StrategyBasedComWrappers.CreateDefaultCacheStrategy">
      <summary>Creates the default strategy to use for caching COM objects.</summary>
      <returns>The default strategy caches the interface pointers per interface no matter what thread they were initially retrieved on.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.StrategyBasedComWrappers.CreateObject(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags,System.Object,System.Runtime.InteropServices.CreatedWrapperFlags@)">
      <param name="externalComObject" />
      <param name="flags" />
      <param name="userState" />
      <param name="wrapperFlags" />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.StrategyBasedComWrappers.CreateObject(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)">
      <summary>Creates a managed object for the object that <paramref name="externalComObject" /> points to, respecting the values of <paramref name="flags" />.</summary>
      <param name="externalComObject">Object to import for usage into the .NET runtime.</param>
      <param name="flags">A bitwise combination of the enumeration values that describes the external object.</param>
      <returns>A managed object associated with the supplied external COM object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.StrategyBasedComWrappers.GetOrCreateInterfaceDetailsStrategy">
      <summary>Gets or creates the interface details strategy for a new COM object wrapper.</summary>
      <returns>The interface details strategy to use for the new COM object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.StrategyBasedComWrappers.GetOrCreateIUnknownStrategy">
      <summary>Gets or creates the IUnknown strategy for a new COM object wrapper.</summary>
      <returns>The IUnknown strategy to use for the new COM object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.StrategyBasedComWrappers.ReleaseObjects(System.Collections.IEnumerable)">
      <summary>Releases a collection of objects outside of the normal object or COM interface lifetime.</summary>
      <param name="objects">Collection of objects to release.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.StrategyBasedComWrappers.DefaultIUnknownInterfaceDetailsStrategy">
      <summary>Gets the default strategy to discover interface details about COM interfaces.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.StrategyBasedComWrappers.DefaultIUnknownStrategy">
      <summary>Gets the default strategy to use for calling <c>IUnknown</c> methods.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.UniqueComInterfaceMarshaller`1">
      <summary>Marshals COM interfaces using a StrategyBasedComWrappers instance that only creates unique native object wrappers (RCWs).</summary>
      <typeparam name="T">The managed type that represents a COM interface type</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.UniqueComInterfaceMarshaller`1.ConvertToManaged(System.Void*)">
      <summary>Converts a COM interface pointer to a managed object.</summary>
      <param name="unmanaged">The COM interface pointer.</param>
      <returns>A managed object that represents the passed in COM interface pointer, or the managed object represented by the passed in pointer.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.UniqueComInterfaceMarshaller`1.ConvertToUnmanaged(`0)">
      <summary>Converts a managed object to a COM interface pointer for the COM interface represented by <typeparamref name="T" />.</summary>
      <param name="managed">The managed object.</param>
      <returns>The COM interface pointer.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.UniqueComInterfaceMarshaller`1.Free(System.Void*)">
      <summary>Releases a reference to the COM interface pointer.</summary>
      <param name="unmanaged">A COM interface pointer.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller">
      <summary>A marshaller for UTF-16 strings.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToManaged(System.UInt16*)">
      <summary>Converts an unmanaged string to a managed version.</summary>
      <param name="unmanaged">The unmanaged string to convert.</param>
      <returns>A managed string.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.ConvertToUnmanaged(System.String)">
      <summary>Converts a string to an unmanaged version.</summary>
      <param name="managed">The managed string to convert.</param>
      <returns>An unmanaged string.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.Free(System.UInt16*)">
      <summary>Frees the memory for the unmanaged string.</summary>
      <param name="unmanaged">The memory allocated for the unmanaged string.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.Utf16StringMarshaller.GetPinnableReference(System.String)">
      <summary>Gets a pinnable reference for the specified string.</summary>
      <param name="str">The string to get a reference for.</param>
      <returns>A pinnable reference.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller">
      <summary>A marshaller for UTF-8 strings.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToManaged(System.Byte*)">
      <summary>Converts an unmanaged string to a managed version.</summary>
      <param name="unmanaged">The unmanaged string to convert.</param>
      <returns>A managed string.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ConvertToUnmanaged(System.String)">
      <summary>Converts a string to an unmanaged version.</summary>
      <param name="managed">The managed string to convert.</param>
      <returns>An unmanaged string.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.Free(System.Byte*)">
      <summary>Free the memory for a specified unmanaged string.</summary>
      <param name="unmanaged">The memory allocated for the unmanaged string.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn">
      <summary>Custom marshaller to marshal a managed string as a UTF-8 unmanaged string.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.Free">
      <summary>Frees any allocated unmanaged memory.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.FromManaged(System.String,System.Span{System.Byte})">
      <summary>Initializes the marshaller with a managed string and requested buffer.</summary>
      <param name="managed">The managed string with which to initialize the marshaller.</param>
      <param name="buffer">The request buffer whose size is at least <see cref="P:System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.ToUnmanaged">
      <summary>Converts the current managed string to an unmanaged string.</summary>
      <returns>An unmanaged string.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.Utf8StringMarshaller.ManagedToUnmanagedIn.BufferSize">
      <summary>Gets the requested buffer size for optimized marshalling.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshalling.VirtualMethodTableInfo">
      <summary>Provides information about a virtual method table and the unmanaged instance pointer.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.VirtualMethodTableInfo.#ctor(System.Void*,System.Void**)">
      <summary>Initializes a <see cref="T:System.Runtime.InteropServices.Marshalling.VirtualMethodTableInfo" /> from a specified instance pointer and table memory.</summary>
      <param name="thisPointer">The pointer to the instance.</param>
      <param name="virtualMethodTable">The block of memory that represents the virtual method table.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshalling.VirtualMethodTableInfo.Deconstruct(System.Void*@,System.Void**@)">
      <summary>Deconstructs this structure into its two fields.</summary>
      <param name="thisPointer">When this method returns, contains the <see cref="P:System.Runtime.InteropServices.Marshalling.VirtualMethodTableInfo.ThisPointer" /> result.</param>
      <param name="virtualMethodTable">When this method returns, contains the <see cref="P:System.Runtime.InteropServices.Marshalling.VirtualMethodTableInfo.VirtualMethodTable" /> result.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.VirtualMethodTableInfo.ThisPointer">
      <summary>Gets the unmanaged instance pointer.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.Marshalling.VirtualMethodTableInfo.VirtualMethodTable">
      <summary>Gets the virtual method table.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.NativeLibrary">
      <summary>Provides APIs for managing native libraries.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Free(System.IntPtr)">
      <summary>Frees a loaded library with the specified OS handle, or takes no action if the input handle is <see cref="F:System.IntPtr.Zero" />.</summary>
      <param name="handle">The native library OS handle to be freed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.GetExport(System.IntPtr,System.String)">
      <summary>Gets the address of an exported symbol.</summary>
      <param name="handle">The native library OS handle.</param>
      <param name="name">The name of the exported symbol.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handle" /> is <see cref="F:System.IntPtr.Zero" /> or <paramref name="name" /> is <see langword="null" />.</exception>
      <exception cref="T:System.EntryPointNotFoundException">The symbol is not found.</exception>
      <returns>The address of the symbol.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.GetMainProgramHandle">
      <summary>Get a handle that can be used with <see cref="M:System.Runtime.InteropServices.NativeLibrary.GetExport(System.IntPtr,System.String)" /> or <see cref="M:System.Runtime.InteropServices.NativeLibrary.TryGetExport(System.IntPtr,System.String,System.IntPtr@)" /> to resolve exports from the entry point module.</summary>
      <returns>The handle that can be used to resolve exports from the entry point module.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})">
      <summary>Provides a high-level API for loading a native library.</summary>
      <param name="libraryName">The name of the native library to be loaded.</param>
      <param name="assembly">The assembly loading the native library.</param>
      <param name="searchPath">The search path.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryName" /> or <paramref name="assembly" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> is not a <see langword="RuntimeAssembly" />.</exception>
      <exception cref="T:System.DllNotFoundException">The library can't be found.</exception>
      <exception cref="T:System.BadImageFormatException">The library is not valid.</exception>
      <returns>The OS handle for the loaded library.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String)">
      <summary>Provides a simple API for loading a native library that wraps the OS loader and uses default flags.</summary>
      <param name="libraryPath">The name of the native library to be loaded.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryPath" /> is <see langword="null" />.</exception>
      <exception cref="T:System.DllNotFoundException">The library can't be found.</exception>
      <exception cref="T:System.BadImageFormatException">The library is not valid.</exception>
      <returns>The OS handle for the loaded native library.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver(System.Reflection.Assembly,System.Runtime.InteropServices.DllImportResolver)">
      <summary>Sets a callback for resolving native library imports from an assembly.</summary>
      <param name="assembly">The assembly for which the resolver is registered.</param>
      <param name="resolver">The resolver callback to register.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> or <paramref name="resolver" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">A resolver is already set for this assembly.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryGetExport(System.IntPtr,System.String,System.IntPtr@)">
      <summary>Gets the address of an exported symbol and returns a value that indicates whether the method call succeeded.</summary>
      <param name="handle">The native library OS handle.</param>
      <param name="name">The name of the exported symbol.</param>
      <param name="address">When the method returns, contains the symbol address, if it exists.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handle" /> is <see cref="F:System.IntPtr.Zero" /> or <paramref name="name" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the address of the exported symbol was found successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.IntPtr@)">
      <summary>Provides a simple API for loading a native library and returns a value that indicates whether the operation succeeded.</summary>
      <param name="libraryPath">The name of the native library to be loaded.</param>
      <param name="handle">When the method returns, the OS handle of the loaded native library.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryPath" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the native library was loaded successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath},System.IntPtr@)">
      <summary>Provides a high-level API that loads a native library and returns a value that indicates whether the operation succeeded.</summary>
      <param name="libraryName">The name of the native library to be loaded.</param>
      <param name="assembly">The assembly loading the native library.</param>
      <param name="searchPath">The search path.</param>
      <param name="handle">When the method returns, the OS handle of the loaded native library.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryName" /> or <paramref name="assembly" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> is not a <see langword="RuntimeAssembly" />.</exception>
      <returns>
        <see langword="true" /> if the native library was loaded successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.NativeMemory">
      <summary>This class contains methods that are mainly used to manage native memory.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeMemory.AlignedAlloc(System.UIntPtr,System.UIntPtr)">
      <summary>Allocates an aligned block of memory of the specified size and alignment, in bytes.</summary>
      <param name="byteCount">The size, in bytes, of the block to allocate.</param>
      <param name="alignment">The alignment, in bytes, of the block to allocate. This must be a power of <c>2</c>.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="alignment" /> is not a power of two.</exception>
      <exception cref="T:System.OutOfMemoryException">Allocating <paramref name="byteCount" /> of memory with <paramref name="alignment" /> failed.</exception>
      <returns>A pointer to the allocated aligned block of memory.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeMemory.AlignedFree(System.Void*)">
      <summary>Frees an aligned block of memory.</summary>
      <param name="ptr">A pointer to the aligned block of memory that should be freed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeMemory.AlignedRealloc(System.Void*,System.UIntPtr,System.UIntPtr)">
      <summary>Reallocates an aligned block of memory of the specified size and alignment, in bytes.</summary>
      <param name="ptr">The previously allocated block of memory.</param>
      <param name="byteCount">The size, in bytes, of the block to allocate.</param>
      <param name="alignment">The alignment, in bytes, of the block to allocate. This must be a power of <c>2</c>.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="alignment" /> is not a power of two.</exception>
      <exception cref="T:System.OutOfMemoryException">Reallocating <paramref name="byteCount" /> of memory with <paramref name="alignment" /> failed.</exception>
      <returns>A pointer to the reallocated aligned block of memory.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeMemory.Alloc(System.UIntPtr,System.UIntPtr)">
      <summary>Allocates a block of memory of the specified size, in elements.</summary>
      <param name="elementCount">The count, in elements, of the block to allocate.</param>
      <param name="elementSize">The size, in bytes, of each element in the allocation.</param>
      <exception cref="T:System.OutOfMemoryException">Allocating <paramref name="elementCount" /> * <paramref name="elementSize" /> bytes of memory failed.</exception>
      <returns>A pointer to the allocated block of memory.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeMemory.Alloc(System.UIntPtr)">
      <summary>Allocates a block of memory of the specified size, in bytes.</summary>
      <param name="byteCount">The size, in bytes, of the block to allocate.</param>
      <exception cref="T:System.OutOfMemoryException">Allocating <paramref name="byteCount" /> of memory failed.</exception>
      <returns>A pointer to the allocated block of memory.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeMemory.AllocZeroed(System.UIntPtr,System.UIntPtr)">
      <summary>Allocates and zeroes a block of memory of the specified size, in elements.</summary>
      <param name="elementCount">The count, in elements, of the block to allocate.</param>
      <param name="elementSize">The size, in bytes, of each element in the allocation.</param>
      <exception cref="T:System.OutOfMemoryException">Allocating <paramref name="elementCount" /> * <paramref name="elementSize" /> bytes of memory failed.</exception>
      <returns>A pointer to the allocated and zeroed block of memory.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeMemory.AllocZeroed(System.UIntPtr)">
      <summary>Allocates and zeroes a block of memory of the specified size, in bytes.</summary>
      <param name="byteCount">The size, in bytes, of the block to allocate.</param>
      <exception cref="T:System.OutOfMemoryException">Allocating <paramref name="byteCount" /> of memory failed.</exception>
      <returns>A pointer to the allocated and zeroed block of memory.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeMemory.Clear(System.Void*,System.UIntPtr)">
      <summary>Clears a block of memory.</summary>
      <param name="ptr">A pointer to the block of memory that should be cleared.</param>
      <param name="byteCount">The size, in bytes, of the block to clear.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeMemory.Copy(System.Void*,System.Void*,System.UIntPtr)">
      <summary>Copies a block of memory from memory location <paramref name="source" /> to memory location <paramref name="destination" />.</summary>
      <param name="source">A pointer to the source of data to be copied.</param>
      <param name="destination">A pointer to the destination memory block where the data is to be copied.</param>
      <param name="byteCount">The size, in bytes, to be copied from the source location to the destination.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeMemory.Fill(System.Void*,System.UIntPtr,System.Byte)">
      <summary>Copies the byte <paramref name="value" /> to the first <paramref name="byteCount" /> bytes of the memory located at <paramref name="ptr" />.</summary>
      <param name="ptr">A pointer to the block of memory to fill.</param>
      <param name="byteCount">The number of bytes to be set to <paramref name="value" />.</param>
      <param name="value">The value to be set.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeMemory.Free(System.Void*)">
      <summary>Frees a block of memory.</summary>
      <param name="ptr">A pointer to the block of memory that should be freed.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeMemory.Realloc(System.Void*,System.UIntPtr)">
      <summary>Reallocates a block of memory to be the specified size, in bytes.</summary>
      <param name="ptr">The previously allocated block of memory.</param>
      <param name="byteCount">The size, in bytes, of the reallocated block.</param>
      <exception cref="T:System.OutOfMemoryException">Reallocating <paramref name="byteCount" /> of memory failed.</exception>
      <returns>A pointer to the reallocated block of memory.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.NFloat">
      <summary>
        <see cref="T:System.Runtime.InteropServices.NFloat" /> is an immutable value type that represents a floating type that has the same size as the native integer size.
      It is meant to be used as an exchange type at the managed/unmanaged boundary to accurately represent in managed code unmanaged APIs that use a type alias for C or C++'s <c>float</c> on 32-bit platforms or <c>double</c> on 64-bit platforms, such as the CGFloat type in libraries provided by Apple.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.#ctor(System.Double)">
      <summary>Constructs an instance from a 64-bit floating point value.</summary>
      <param name="value">The floating-point value.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.#ctor(System.Single)">
      <summary>Constructs an instance from a 32-bit floating point value.</summary>
      <param name="value">The floating-point value.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Abs(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the absolute of a value.</summary>
      <param name="value">The value for which to get its absolute.</param>
      <returns>The absolute of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Acos(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the arc-cosine of a value.</summary>
      <param name="x">The value, in radians, whose arc-cosine is to be computed.</param>
      <returns>The arc-cosine of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Acosh(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the hyperbolic arc-cosine of a value.</summary>
      <param name="x">The value, in radians, whose hyperbolic arc-cosine is to be computed.</param>
      <returns>The hyperbolic arc-cosine of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.AcosPi(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the arc-cosine of a value and divides the result by <c>pi</c>.</summary>
      <param name="x">The value whose arc-cosine is to be computed.</param>
      <returns>The arc-cosine of <paramref name="x" />, divided by <c>pi</c>.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Asin(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the arc-sine of a value.</summary>
      <param name="x">The value, in radians, whose arc-sine is to be computed.</param>
      <returns>The arc-sine of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Asinh(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the hyperbolic arc-sine of a value.</summary>
      <param name="x">The value, in radians, whose hyperbolic arc-sine is to be computed.</param>
      <returns>The hyperbolic arc-sine of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.AsinPi(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the arc-sine of a value and divides the result by <c>pi</c>.</summary>
      <param name="x">The value whose arc-sine is to be computed.</param>
      <returns>The arc-sine of <paramref name="x" />, divided by <c>pi</c>.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Atan(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the arc-tangent of a value.</summary>
      <param name="x">The value, in radians, whose arc-tangent is to be computed.</param>
      <returns>The arc-tangent of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Atan2(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Computes the arc-tangent of the quotient of two values.</summary>
      <param name="y">The y-coordinate of a point.</param>
      <param name="x">The x-coordinate of a point.</param>
      <returns>The arc-tangent of <paramref name="y" /> divided-by <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Atan2Pi(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Computes the arc-tangent for the quotient of two values and divides the result by <c>pi</c>.</summary>
      <param name="y">The y-coordinate of a point.</param>
      <param name="x">The x-coordinate of a point.</param>
      <returns>The arc-tangent of <paramref name="y" /> divided-by <paramref name="x" />, divided by <c>pi</c>.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Atanh(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the hyperbolic arc-tangent of a value.</summary>
      <param name="x">The value, in radians, whose hyperbolic arc-tangent is to be computed.</param>
      <returns>The hyperbolic arc-tangent of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.AtanPi(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the arc-tangent of a value and divides the result by pi.</summary>
      <param name="x">The value whose arc-tangent is to be computed.</param>
      <returns>The arc-tangent of <paramref name="x" />, divided by <c>pi</c>.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.BitDecrement(System.Runtime.InteropServices.NFloat)">
      <summary>Decrements a value to the smallest value that compares less than a given value.</summary>
      <param name="x">The value to be bitwise decremented.</param>
      <returns>The smallest value that compares less than <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.BitIncrement(System.Runtime.InteropServices.NFloat)">
      <summary>Increments a value to the smallest value that compares greater than a given value.</summary>
      <param name="x">The value to be bitwise incremented.</param>
      <returns>The smallest value that compares greater than <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Cbrt(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the cube-root of a value.</summary>
      <param name="x">The value whose cube-root is to be computed.</param>
      <returns>The cube-root of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Ceiling(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the ceiling of a value.</summary>
      <param name="x">The value whose ceiling is to be computed.</param>
      <returns>The ceiling of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Clamp(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Clamps a value to an inclusive minimum and maximum value.</summary>
      <param name="value">The value to clamp.</param>
      <param name="min">The inclusive minimum to which <paramref name="value" /> should clamp.</param>
      <param name="max">The inclusive maximum to which <paramref name="value" /> should clamp.</param>
      <returns>The result of clamping <paramref name="value" /> to the inclusive range of <paramref name="min" /> and <paramref name="max" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.ClampNative(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <param name="value" />
      <param name="min" />
      <param name="max" />
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</summary>
      <param name="obj">An object to compare, or <see langword="null" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Runtime.InteropServices.NFloat" />.</exception>
      <returns>
        <para>A signed number indicating the relative values of this instance and <paramref name="obj" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>Less than zero</term>
            <description>This instance is less than <paramref name="obj" />, or this instance is not a number and <paramref name="obj" /> is a number.</description>
          </item>
          <item>
            <term>Zero</term>
            <description>This instance is equal to <paramref name="obj" />, or both this instance and <paramref name="obj" /> are not a number.</description>
          </item>
          <item>
            <term>Greater than zero</term>
            <description>This instance is greater than <paramref name="obj" />, or this instance is a number and <paramref name="obj" /> is not a number or <paramref name="obj" /> is <see langword="null" />.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.CompareTo(System.Runtime.InteropServices.NFloat)">
      <summary>Compares this instance to a specified floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified floating-point number.</summary>
      <param name="other">A floating-point number to compare.</param>
      <returns>
        <para>A signed number indicating the relative values of this instance and <paramref name="other" />.</para>
        <list type="table">
          <listheader>
            <term>Return Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>Less than zero</term>
            <description>This instance is less than <paramref name="other" />, or this instance is not a number and <paramref name="other" /> is a number.</description>
          </item>
          <item>
            <term>Zero</term>
            <description>This instance is equal to <paramref name="other" />, or both this instance and <paramref name="other" /> are not a number.</description>
          </item>
          <item>
            <term>Greater than zero</term>
            <description>This instance is greater than <paramref name="other" />, or this instance is a number and <paramref name="other" /> is not a number.</description>
          </item>
        </list>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.ConvertToInteger``1(System.Runtime.InteropServices.NFloat)">
      <summary>Converts a value to a specified integer type using saturation on overflow</summary>
      <param name="value">The value to be converted.</param>
      <typeparam name="TInteger">The integer type to which <code data-dev-comment-type="paramref">value</code> is converted.</typeparam>
      <returns>An instance of <code data-dev-comment-type="typeparamref">TInteger</code> created from <code data-dev-comment-type="paramref">value</code>.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.ConvertToIntegerNative``1(System.Runtime.InteropServices.NFloat)">
      <summary>Converts a value to a specified integer type using platform specific behavior on overflow.</summary>
      <param name="value">The value to be converted.</param>
      <typeparam name="TInteger">The integer type to which <code data-dev-comment-type="paramref">value</code> is converted.</typeparam>
      <returns>An instance of <code data-dev-comment-type="typeparamref">TInteger</code> created from <code data-dev-comment-type="paramref">value</code>.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.CopySign(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Copies the sign of a value to the sign of another value.</summary>
      <param name="value">The value whose magnitude is used in the result.</param>
      <param name="sign">The value whose sign is used in the result.</param>
      <returns>A value with the magnitude of <paramref name="value" /> and the sign of <paramref name="sign" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Cos(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the cosine of a value.</summary>
      <param name="x">The value, in radians, whose cosine is to be computed.</param>
      <returns>The cosine of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Cosh(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the hyperbolic cosine of a value.</summary>
      <param name="x">The value, in radians, whose hyperbolic cosine is to be computed.</param>
      <returns>The hyperbolic cosine of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.CosPi(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the cosine of a value that has been multipled by <c>pi</c>.</summary>
      <param name="x">The value, in half-revolutions, whose cosine is to be computed.</param>
      <returns>The cosine of <paramref name="x" /> multiplied-by <c>pi</c>.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.CreateChecked``1(``0)">
      <summary>Creates an instance of the current type from a value, throwing an overflow exception for any values that fall outside the representable range of the current type.</summary>
      <param name="value">The value that's used to create the instance of <typeparamref name="TSelf" />.</param>
      <typeparam name="TOther">The type of <paramref name="value" />.</typeparam>
      <returns>An instance of <typeparamref name="TSelf" /> created from <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.CreateSaturating``1(``0)">
      <summary>Creates an instance of the current type from a value, saturating any values that fall outside the representable range of the current type.</summary>
      <param name="value">The value that's used to create the instance of <typeparamref name="TSelf" />.</param>
      <typeparam name="TOther">The type of <paramref name="value" />.</typeparam>
      <returns>An instance of <typeparamref name="TSelf" /> created from <paramref name="value" />, saturating if <paramref name="value" /> falls outside the representable range of <typeparamref name="TSelf" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.CreateTruncating``1(``0)">
      <summary>Creates an instance of the current type from a value, truncating any values that fall outside the representable range of the current type.</summary>
      <param name="value">The value that's used to create the instance of <typeparamref name="TSelf" />.</param>
      <typeparam name="TOther">The type of <paramref name="value" />.</typeparam>
      <returns>An instance of <typeparamref name="TSelf" /> created from <paramref name="value" />, truncating if <paramref name="value" /> falls outside the representable range of <typeparamref name="TSelf" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.DegreesToRadians(System.Runtime.InteropServices.NFloat)">
      <summary>Converts a given value from degrees to radians.</summary>
      <param name="degrees">The value to convert to radians.</param>
      <returns>The value of <paramref name="degrees" /> converted to radians.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="o" /> is an instance of <see cref="T:System.Runtime.InteropServices.NFloat" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Equals(System.Runtime.InteropServices.NFloat)">
      <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Runtime.InteropServices.CLong" /> value.</summary>
      <param name="other">An <see cref="T:System.Runtime.InteropServices.NFloat" /> value to compare to this instance.</param>
      <returns>
        <see langword="true" /> if <paramref name="other" /> has the same value as this instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Exp(System.Runtime.InteropServices.NFloat)">
      <summary>Computes <c>E</c> raised to a given power.</summary>
      <param name="x">The power to which <c>E</c> is raised.</param>
      <returns>
        <c>E</c> raised to the power of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Exp10(System.Runtime.InteropServices.NFloat)">
      <summary>Computes <c>10</c> raised to a given power.</summary>
      <param name="x">The power to which <c>10</c> is raised.</param>
      <returns>
        <c>10<sup><paramref name="x" /></sup></c>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Exp10M1(System.Runtime.InteropServices.NFloat)">
      <summary>Computes <c>10</c> raised to a given power and subtracts one.</summary>
      <param name="x">The power to which <c>10</c> is raised.</param>
      <returns>
        <c>10<sup><paramref name="x" /></sup> - 1</c>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Exp2(System.Runtime.InteropServices.NFloat)">
      <summary>Computes <c>2</c> raised to a given power.</summary>
      <param name="x">The power to which <c>2</c> is raised.</param>
      <returns>
        <c>2<sup><paramref name="x" /></sup></c>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Exp2M1(System.Runtime.InteropServices.NFloat)">
      <summary>Computes <c>2</c> raised to a given power and subtracts one.</summary>
      <param name="x">The power to which <c>2</c> is raised.</param>
      <returns>
        <c>2<sup><paramref name="x" /></sup> - 1</c>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.ExpM1(System.Runtime.InteropServices.NFloat)">
      <summary>Computes <c>E</c> raised to a given power and subtracts one.</summary>
      <param name="x">The power to which <c>E</c> is raised.</param>
      <returns>
        <c>E<sup><paramref name="x" /></sup> - 1</c>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Floor(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the floor of a value.</summary>
      <param name="x">The value whose floor is to be computed.</param>
      <returns>The floor of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.FusedMultiplyAdd(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Computes the fused multiply-add of three values.</summary>
      <param name="left">The value that <paramref name="right" /> multiplies.</param>
      <param name="right">The value that multiplies <paramref name="left" />.</param>
      <param name="addend">The value that is added to the product of <paramref name="left" /> and <paramref name="right" />.</param>
      <returns>The result of <paramref name="left" /> times <paramref name="right" /> plus <paramref name="addend" /> computed as one ternary operation.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Hypot(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Computes the hypotenuse given two values representing the lengths of the shorter sides in a right-angled triangle.</summary>
      <param name="x">The value to square and add to <paramref name="y" />.</param>
      <param name="y">The value to square and add to <paramref name="x" />.</param>
      <returns>The square root of <paramref name="x" />-squared plus <paramref name="y" />-squared.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Ieee754Remainder(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Computes the remainder of two values as specified by IEEE 754.</summary>
      <param name="left">The value that <paramref name="right" /> divides.</param>
      <param name="right">The value that divides <paramref name="left" />.</param>
      <returns>The remainder of <paramref name="left" /> divided by <paramref name="right" /> as specified by IEEE 754.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.ILogB(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the integer logarithm of a value.</summary>
      <param name="x">The value whose integer logarithm is to be computed.</param>
      <returns>The integer logarithm of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.IsEvenInteger(System.Runtime.InteropServices.NFloat)">
      <summary>Determines if a value represents an even integral number.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is an even integer; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.IsFinite(System.Runtime.InteropServices.NFloat)">
      <summary>Determines whether the specified value is finite (zero, subnormal, or normal).</summary>
      <param name="value">The floating-point value.</param>
      <returns>
        <see langword="true" /> if the value is finite (zero, subnormal or normal); <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.IsInfinity(System.Runtime.InteropServices.NFloat)">
      <summary>Determines whether the specified value is infinite (positive or negative infinity).</summary>
      <param name="value">The floating-point value.</param>
      <returns>
        <see langword="true" /> if the value is infinite (positive or negative infinity); <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.IsInteger(System.Runtime.InteropServices.NFloat)">
      <summary>Determines if a value represents an integral number.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is an integer; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.IsNaN(System.Runtime.InteropServices.NFloat)">
      <summary>Determines whether the specified value is NaN (not a number).</summary>
      <param name="value">The floating-point value.</param>
      <returns>
        <see langword="true" /> if the value is NaN (not a number); <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.IsNegative(System.Runtime.InteropServices.NFloat)">
      <summary>Determines whether the specified value is negative.</summary>
      <param name="value">The floating-point value.</param>
      <returns>
        <see langword="true" /> if the value is negative; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.IsNegativeInfinity(System.Runtime.InteropServices.NFloat)">
      <summary>Determines whether the specified value is negative infinity.</summary>
      <param name="value">The floating-point value.</param>
      <returns>
        <see langword="true" /> if the value is negative infinity; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.IsNormal(System.Runtime.InteropServices.NFloat)">
      <summary>Determines whether the specified value is normal.</summary>
      <param name="value">The floating-point value.</param>
      <returns>
        <see langword="true" /> if the value is normal; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.IsOddInteger(System.Runtime.InteropServices.NFloat)">
      <summary>Determines if a value represents an odd integral number.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is an odd integer; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.IsPositive(System.Runtime.InteropServices.NFloat)">
      <summary>Determines if a value is positive.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is positive; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.IsPositiveInfinity(System.Runtime.InteropServices.NFloat)">
      <summary>Determines whether the specified value is positive infinity.</summary>
      <param name="value">The floating-point value.</param>
      <returns>
        <see langword="true" /> if the value is positive infinity; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.IsPow2(System.Runtime.InteropServices.NFloat)">
      <summary>Determines if a value is a power of two.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a power of two; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.IsRealNumber(System.Runtime.InteropServices.NFloat)">
      <summary>Determines if a value represents a real number.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a real number; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.IsSubnormal(System.Runtime.InteropServices.NFloat)">
      <summary>Determines whether the specified value is subnormal.</summary>
      <param name="value">The floating-point value.</param>
      <returns>
        <see langword="true" /> if the value is subnormal; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Lerp(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Performs a linear interpolation between two values based on the given weight.</summary>
      <param name="value1">The first value, which is intended to be the lower bound.</param>
      <param name="value2">The second value, which is intended to be the upper bound.</param>
      <param name="amount">A value, intended to be between 0 and 1, that indicates the weight of the interpolation.</param>
      <returns>The interpolated value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Log(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Computes the logarithm of a value in the specified base.</summary>
      <param name="x">The value whose logarithm is to be computed.</param>
      <param name="newBase">The base in which the logarithm is to be computed.</param>
      <returns>The base-<paramref name="newBase" /> logarithm of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Log(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the natural (<c>base-E</c> logarithm of a value.</summary>
      <param name="x">The value whose natural logarithm is to be computed.</param>
      <returns>The natural logarithm of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Log10(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the base-10 logarithm of a value.</summary>
      <param name="x">The value whose base-10 logarithm is to be computed.</param>
      <returns>The base-10 logarithm of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Log10P1(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the base-10 logarithm of a value plus one.</summary>
      <param name="x">The value to which one is added before computing the base-10 logarithm.</param>
      <returns>
        <c>log<sub>10</sub>(<paramref name="x" /> + 1)</c>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Log2(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the log2 of a value.</summary>
      <param name="value">The value whose log2 is to be computed.</param>
      <returns>The log2 of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Log2P1(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the base-2 logarithm of a value plus one.</summary>
      <param name="x">The value to which one is added before computing the base-2 logarithm.</param>
      <returns>
        <c>log<sub>2</sub>(<paramref name="x" /> + 1)</c>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.LogP1(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the natural (<c>base-E</c>) logarithm of a value plus one.</summary>
      <param name="x">The value to which one is added before computing the natural logarithm.</param>
      <returns>
        <c>log<sub>e</sub>(<paramref name="x" /> + 1)</c>
      </returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Max(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Compares two values to compute which is greater.</summary>
      <param name="x">The value to compare with <paramref name="y" />.</param>
      <param name="y">The value to compare with <paramref name="x" />.</param>
      <returns>
        <paramref name="x" /> if it is greater than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.MaxMagnitude(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Compares two values to compute which is greater.</summary>
      <param name="x">The value to compare with <paramref name="y" />.</param>
      <param name="y">The value to compare with <paramref name="x" />.</param>
      <returns>
        <paramref name="x" /> if it is greater than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.MaxMagnitudeNumber(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Compares two values to compute which has the greater magnitude and returning the other value if an input is <c>NaN</c>.</summary>
      <param name="x">The value to compare with <paramref name="y" />.</param>
      <param name="y">The value to compare with <paramref name="x" />.</param>
      <returns>
        <paramref name="x" /> if it is greater than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.MaxNative(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <param name="x" />
      <param name="y" />
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.MaxNumber(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Compares two values to compute which is greater and returning the other value if an input is <c>NaN</c>.</summary>
      <param name="x">The value to compare with <paramref name="y" />.</param>
      <param name="y">The value to compare with <paramref name="x" />.</param>
      <returns>
        <paramref name="x" /> if it is greater than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Min(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Compares two values to compute which is lesser.</summary>
      <param name="x">The value to compare with <paramref name="y" />.</param>
      <param name="y">The value to compare with <paramref name="x" />.</param>
      <returns>
        <paramref name="x" /> if it is less than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.MinMagnitude(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Compares two values to compute which is lesser.</summary>
      <param name="x">The value to compare with <paramref name="y" />.</param>
      <param name="y">The value to compare with <paramref name="x" />.</param>
      <returns>
        <paramref name="x" /> if it is less than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.MinMagnitudeNumber(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Compares two values to compute which has the lesser magnitude and returning the other value if an input is <c>NaN</c>.</summary>
      <param name="x">The value to compare with <paramref name="y" />.</param>
      <param name="y">The value to compare with <paramref name="x" />.</param>
      <returns>
        <paramref name="x" /> if it is less than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.MinNative(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <param name="x" />
      <param name="y" />
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.MinNumber(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Compares two values to compute which is lesser and returning the other value if an input is <c>NaN</c>.</summary>
      <param name="x">The value to compare with <paramref name="y" />.</param>
      <param name="y">The value to compare with <paramref name="x" />.</param>
      <returns>
        <paramref name="x" /> if it is less than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.MultiplyAddEstimate(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Computes an estimate of (<code data-dev-comment-type="paramref">left</code> * <code data-dev-comment-type="paramref">right</code>) + <code data-dev-comment-type="paramref">addend</code>.</summary>
      <param name="left">The value to be multiplied with <code data-dev-comment-type="paramref">right</code>.</param>
      <param name="right">The value to be multiplied with <code data-dev-comment-type="paramref">left</code>.</param>
      <param name="addend">The value to be added to the result of <code data-dev-comment-type="paramref">left</code> multiplied by <code data-dev-comment-type="paramref">right</code>.</param>
      <returns>An estimate of (<code data-dev-comment-type="paramref">left</code> * <code data-dev-comment-type="paramref">right</code>) + <code data-dev-comment-type="paramref">addend</code>.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Addition(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Adds two values together to compute their sum.</summary>
      <param name="left">The value to which <paramref name="right" /> is added.</param>
      <param name="right">The value that's added to <paramref name="left" />.</param>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_CheckedExplicit(System.Runtime.InteropServices.NFloat)~System.Byte">
      <param name="value" />
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Decrement(System.Runtime.InteropServices.NFloat)">
      <summary>Decrements a value.</summary>
      <param name="value">The value to decrement.</param>
      <returns>The result of decrementing <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Division(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Divides two values together to compute their quotient.</summary>
      <param name="left">The value that <paramref name="right" /> divides.</param>
      <param name="right">The value that divides <paramref name="left" />.</param>
      <returns>The quotient of <paramref name="left" /> divided-by <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Equality(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Compares two values to determine equality.</summary>
      <param name="left">The value to compare with <paramref name="right" />.</param>
      <param name="right">The value to compare with <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Decimal)~System.Runtime.InteropServices.NFloat">
      <summary>Explicitly converts a <see cref="T:System.Decimal" /> value to its nearest representable native-sized floating-point value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Double)~System.Runtime.InteropServices.NFloat">
      <summary>Explicitly converts a <see cref="T:System.Double" /> value to its nearest representable native-sized floating-point value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Int128)~System.Runtime.InteropServices.NFloat">
      <summary>Explicitly converts a <see cref="T:System.Int128" /> to its nearest representable native-sized floating-point value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.Byte">
      <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Byte" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable <see cref="T:System.Byte" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.Char">
      <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Char" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable <see cref="T:System.Char" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.Decimal">
      <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Decimal" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable <see cref="T:System.Decimal" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.Half">
      <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Half" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable <see cref="T:System.Half" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.Int128">
      <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Int128" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable <see cref="T:System.Int128" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.Int16">
      <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Int16" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable <see cref="T:System.Int16" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.Int32">
      <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Int32" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable <see cref="T:System.Int32" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.Int64">
      <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Int64" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable <see cref="T:System.Int64" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.IntPtr">
      <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.IntPtr" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable <see cref="T:System.IntPtr" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.SByte">
      <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.SByte" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable <see cref="T:System.SByte" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.Single">
      <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Single" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable <see cref="T:System.Single" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.UInt128">
      <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.UInt128" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable <see cref="T:System.UInt128" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.UInt16">
      <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.UInt16" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable <see cref="T:System.UInt16" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.UInt32">
      <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.UInt32" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable <see cref="T:System.UInt32" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.UInt64">
      <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.UInt64" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable <see cref="T:System.UInt64" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.Runtime.InteropServices.NFloat)~System.UIntPtr">
      <summary>Explicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.UIntPtr" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable <see cref="T:System.UIntPtr" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Explicit(System.UInt128)~System.Runtime.InteropServices.NFloat">
      <summary>Explicitly converts <see cref="T:System.UInt128" /> to its nearest representable native-sized floating-point value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_GreaterThan(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Compares two values to determine which is greater.</summary>
      <param name="left">The value to compare with <paramref name="right" />.</param>
      <param name="right">The value to compare with <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_GreaterThanOrEqual(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Compares two values to determine which is greater or equal.</summary>
      <param name="left">The value to compare with <paramref name="right" />.</param>
      <param name="right">The value to compare with <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.Byte)~System.Runtime.InteropServices.NFloat">
      <summary>Implicitly converts a <see cref="T:System.Byte" /> value to its nearest representable native-sized floating-point value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.Char)~System.Runtime.InteropServices.NFloat">
      <summary>Implicitly converts a <see cref="T:System.Char" /> value to its nearest representable native-sized floating-point value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.Half)~System.Runtime.InteropServices.NFloat">
      <summary>Implicitly converts a <see cref="T:System.Half" /> value to its nearest representable native-sized floating-point value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.Int16)~System.Runtime.InteropServices.NFloat">
      <summary>Implicitly converts a <see cref="T:System.Int16" /> value to its nearest representable native-sized floating-point value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.Int32)~System.Runtime.InteropServices.NFloat">
      <summary>Implicitly converts a <see cref="T:System.Int32" /> value to its nearest representable native-sized floating-point value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.Int64)~System.Runtime.InteropServices.NFloat">
      <summary>Implicitly converts a <see cref="T:System.Int64" /> value to its nearest representable native-sized floating-point value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.IntPtr)~System.Runtime.InteropServices.NFloat">
      <summary>Implicitly converts a <see cref="T:System.IntPtr" /> value to its nearest representable native-sized floating-point value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.Runtime.InteropServices.NFloat)~System.Double">
      <summary>Implicitly converts a native-sized floating-point value to its nearest representable <see cref="T:System.Double" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.SByte)~System.Runtime.InteropServices.NFloat">
      <summary>Implicitly converts a <see cref="T:System.SByte" /> value to its nearest representable native-sized floating-point value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.Single)~System.Runtime.InteropServices.NFloat">
      <summary>Implicitly converts a <see cref="T:System.Single" /> value to its nearest representable native-sized floating-point value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.UInt16)~System.Runtime.InteropServices.NFloat">
      <summary>Implicitly converts a <see cref="T:System.UInt16" /> value to its nearest representable native-sized floating-point value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.UInt32)~System.Runtime.InteropServices.NFloat">
      <summary>Implicitly converts a <see cref="T:System.UInt32" /> value to its nearest representable native-sized floating-point value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.UInt64)~System.Runtime.InteropServices.NFloat">
      <summary>Implicitly converts a <see cref="T:System.UInt64" /> value to its nearest representable native-sized floating-point value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Implicit(System.UIntPtr)~System.Runtime.InteropServices.NFloat">
      <summary>Implicitly converts a <see cref="T:System.UIntPtr" /> value to its nearest representable native-sized floating-point value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to its nearest representable native-sized floating-point value.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Increment(System.Runtime.InteropServices.NFloat)">
      <summary>Increments a value.</summary>
      <param name="value">The value to increment.</param>
      <returns>The result of incrementing <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Inequality(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Compares two values to determine inequality.</summary>
      <param name="left">The value to compare with <paramref name="right" />.</param>
      <param name="right">The value to compare with <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_LessThan(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Compares two values to determine which is less.</summary>
      <param name="left">The value to compare with <paramref name="right" />.</param>
      <param name="right">The value to compare with <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_LessThanOrEqual(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Compares two values to determine which is less or equal.</summary>
      <param name="left">The value to compare with <paramref name="right" />.</param>
      <param name="right">The value to compare with <paramref name="left" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Modulus(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Divides two values together to compute their remainder.</summary>
      <param name="left">The value that <paramref name="right" /> divides.</param>
      <param name="right">The value that divides <paramref name="left" />.</param>
      <returns>The remainder of <paramref name="left" /> divided-by <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Multiply(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Multiplies two values together to compute their product.</summary>
      <param name="left">The value that <paramref name="right" /> multiplies.</param>
      <param name="right">The value that multiplies <paramref name="left" />.</param>
      <returns>The product of <paramref name="left" /> multiplied-by <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_Subtraction(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Subtracts two values to compute their difference.</summary>
      <param name="left">The value from which <paramref name="right" /> is subtracted.</param>
      <param name="right">The value that's subtracted from <paramref name="left" />.</param>
      <returns>The difference of <paramref name="right" /> subtracted from <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_UnaryNegation(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the unary negation of a value.</summary>
      <param name="value">The value for which to compute its unary negation.</param>
      <returns>The unary negation of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.op_UnaryPlus(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the unary plus of a value.</summary>
      <param name="value">The value for which to compute its unary plus.</param>
      <returns>The unary plus of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Parse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Parses a span of UTF-8 characters into a value.</summary>
      <param name="utf8Text">The span of UTF-8 characters to parse.</param>
      <param name="style">A bitwise combination of number styles that can be present in <paramref name="utf8Text" />.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="utf8Text" />.</param>
      <returns>The result of parsing <paramref name="utf8Text" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Parse(System.ReadOnlySpan{System.Byte},System.IFormatProvider)">
      <summary>Parses a span of UTF-8 characters into a value.</summary>
      <param name="utf8Text">The span of UTF-8 characters to parse.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="utf8Text" />.</param>
      <returns>The result of parsing <paramref name="utf8Text" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts a character span that contains the string representation of a number in a specified style and culture-specific format to its floating-point number equivalent.</summary>
      <param name="s">A character span that contains the number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.

-or-

<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format.</exception>
      <returns>A floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Parses a span of characters into a value.</summary>
      <param name="s">The span of characters to parse.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
      <returns>The result of parsing <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its floating-point number equivalent.</summary>
      <param name="s">A string that contains the number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.

-or-

<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format.</exception>
      <returns>A floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its floating-point number equivalent.</summary>
      <param name="s">A string that contains the number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.

-or-

<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format.</exception>
      <returns>A floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its floating-point number equivalent.</summary>
      <param name="s">A string that contains the number to convert.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format.</exception>
      <returns>A floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Parse(System.String)">
      <summary>Converts the string representation of a number to its floating-point number equivalent.</summary>
      <param name="s">A string that contains the number to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a number in a valid format.</exception>
      <returns>A floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Pow(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Computes a value raised to a given power.</summary>
      <param name="x">The value that's raised to the power of <paramref name="x" />.</param>
      <param name="y">The power to which <paramref name="x" /> is raised.</param>
      <returns>
        <paramref name="x" /> raised to the power of <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.RadiansToDegrees(System.Runtime.InteropServices.NFloat)">
      <summary>Converts a given value from radians to degrees.</summary>
      <param name="radians">The value to convert to degrees.</param>
      <returns>The value of <paramref name="radians" /> converted to degrees.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.ReciprocalEstimate(System.Runtime.InteropServices.NFloat)">
      <summary>Computes an estimate of the reciprocal of a value.</summary>
      <param name="x">The value whose estimate of the reciprocal is to be computed.</param>
      <returns>An estimate of the reciprocal of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.ReciprocalSqrtEstimate(System.Runtime.InteropServices.NFloat)">
      <summary>Computes an estimate of the reciprocal square root of a value.</summary>
      <param name="x">The value whose estimate of the reciprocal square root is to be computed.</param>
      <returns>An estimate of the reciprocal square root of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.RootN(System.Runtime.InteropServices.NFloat,System.Int32)">
      <summary>Computes the n-th root of a value.</summary>
      <param name="x">The value whose <paramref name="n" />-th root is to be computed.</param>
      <param name="n">The degree of the root to be computed.</param>
      <returns>The <paramref name="n" />-th root of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Round(System.Runtime.InteropServices.NFloat,System.Int32,System.MidpointRounding)">
      <summary>Rounds a value to a specified number of fractional-digits using the default rounding mode (<see cref="F:System.MidpointRounding.ToEven" />).</summary>
      <param name="x">The value to round.</param>
      <param name="digits">The number of fractional digits to which <paramref name="x" /> should be rounded.</param>
      <param name="mode">The mode under which <paramref name="x" /> should be rounded.</param>
      <returns>The result of rounding <paramref name="x" /> to <paramref name="digits" /> fractional-digits using <paramref name="mode" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Round(System.Runtime.InteropServices.NFloat,System.Int32)">
      <summary>Rounds a value to a specified number of fractional-digits using the default rounding mode (<see cref="F:System.MidpointRounding.ToEven" />).</summary>
      <param name="x">The value to round.</param>
      <param name="digits">The number of fractional digits to which <paramref name="x" /> should be rounded.</param>
      <returns>The result of rounding <paramref name="x" /> to <paramref name="digits" /> fractional-digits using the default rounding mode.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Round(System.Runtime.InteropServices.NFloat,System.MidpointRounding)">
      <summary>Rounds a value to the nearest integer using the specified rounding mode.</summary>
      <param name="x">The value to round.</param>
      <param name="mode">The mode under which <paramref name="x" /> should be rounded.</param>
      <returns>The result of rounding <paramref name="x" /> to the nearest integer using <paramref name="mode" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Round(System.Runtime.InteropServices.NFloat)">
      <summary>Rounds a value to the nearest integer using the default rounding mode (<see cref="F:System.MidpointRounding.ToEven" />).</summary>
      <param name="x">The value to round.</param>
      <returns>The result of rounding <paramref name="x" /> to the nearest integer using the default rounding mode.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.ScaleB(System.Runtime.InteropServices.NFloat,System.Int32)">
      <summary>Computes the product of a value and its base-radix raised to the specified power.</summary>
      <param name="x">The value that base-radix raised to the power of <paramref name="n" /> multiplies.</param>
      <param name="n">The value to which base-radix is raised before multipliying <paramref name="x" />.</param>
      <returns>The product of <paramref name="x" /> and base-radix raised to the power of <paramref name="n" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Sign(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the sign of a value.</summary>
      <param name="value">The value whose sign is to be computed.</param>
      <returns>A positive value if <paramref name="value" /> is positive, <see cref="P:System.Numerics.INumberBase`1.Zero" /> if <paramref name="value" /> is zero, and a negative value if <paramref name="value" /> is negative.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Sin(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the sine of a value.</summary>
      <param name="x">The value, in radians, whose sine is to be computed.</param>
      <returns>The sine of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.SinCos(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the sine and cosine of a value.</summary>
      <param name="x">The value, in radians, whose sine and cosine are to be computed.</param>
      <returns>The sine and cosine of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.SinCosPi(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the sine and cosine of a value.</summary>
      <param name="x">The value, in half-revolutions, that is multipled by <c>pi</c> before computing its sine and cosine.</param>
      <returns>The sine and cosine of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Sinh(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the hyperbolic sine of a value.</summary>
      <param name="x">The value, in radians, whose hyperbolic sine is to be computed.</param>
      <returns>The hyperbolic sine of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.SinPi(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the sine of a value that has been multiplied by <c>pi</c>.</summary>
      <param name="x">The value, in half-revolutions, that is multipled by <c>pi</c> before computing its sine.</param>
      <returns>The sine of <paramref name="x" /> multiplied-by <c>pi</c>.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Sqrt(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the square-root of a value.</summary>
      <param name="x">The value whose square-root is to be computed.</param>
      <returns>The square-root of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#IAdditionOperators{System#Runtime#InteropServices#NFloat@System#Runtime#InteropServices#NFloat@System#Runtime#InteropServices#NFloat}#op_CheckedAddition(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Adds two values together to compute their sum.</summary>
      <param name="left">The value to which <paramref name="right" /> is added.</param>
      <param name="right">The value that's added to <paramref name="left" />.</param>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#IBitwiseOperators{System#Runtime#InteropServices#NFloat@System#Runtime#InteropServices#NFloat@System#Runtime#InteropServices#NFloat}#op_BitwiseAnd(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Computes the bitwise-and of two values.</summary>
      <param name="left">The value to <see langword="and" /> with <paramref name="right" />.</param>
      <param name="right">The value to <see langword="and" /> with <paramref name="left" />.</param>
      <returns>The bitwise-and of <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#IBitwiseOperators{System#Runtime#InteropServices#NFloat@System#Runtime#InteropServices#NFloat@System#Runtime#InteropServices#NFloat}#op_BitwiseOr(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Computes the bitwise-or of two values.</summary>
      <param name="left">The value to <see langword="or" /> with <paramref name="right" />.</param>
      <param name="right">The value to <see langword="or" /> with <paramref name="left" />.</param>
      <returns>The bitwise-or of <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#IBitwiseOperators{System#Runtime#InteropServices#NFloat@System#Runtime#InteropServices#NFloat@System#Runtime#InteropServices#NFloat}#op_ExclusiveOr(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Computes the exclusive-or of two values.</summary>
      <param name="left">The value to xor with <paramref name="right" />.</param>
      <param name="right">The value to xor with <paramref name="left" />.</param>
      <returns>The exclusive-or of <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#IBitwiseOperators{System#Runtime#InteropServices#NFloat@System#Runtime#InteropServices#NFloat@System#Runtime#InteropServices#NFloat}#op_OnesComplement(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the ones-complement representation of a given value.</summary>
      <param name="value">The value for which to compute the ones-complement.</param>
      <returns>The ones-complement of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#IDecrementOperators{System#Runtime#InteropServices#NFloat}#op_CheckedDecrement(System.Runtime.InteropServices.NFloat)">
      <summary>Decrements a value.</summary>
      <param name="value">The value to decrement.</param>
      <returns>The result of decrementing <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#IDivisionOperators{System#Runtime#InteropServices#NFloat@System#Runtime#InteropServices#NFloat@System#Runtime#InteropServices#NFloat}#op_CheckedDivision(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Divides two values to compute their quotient.</summary>
      <param name="left">The value that <paramref name="right" /> divides.</param>
      <param name="right">The value that divides <paramref name="left" />.</param>
      <returns>The quotient of <paramref name="left" /> divided by <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#IFloatingPoint{System#Runtime#InteropServices#NFloat}#GetExponentByteCount">
      <summary>Gets the number of bytes that will be written as part of <see cref="M:System.Numerics.IFloatingPoint`1.TryWriteExponentLittleEndian(System.Span{System.Byte},System.Int32@)" />.</summary>
      <returns>The number of bytes that will be written as part of <see cref="M:System.Numerics.IFloatingPoint`1.TryWriteExponentLittleEndian(System.Span{System.Byte},System.Int32@)" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#IFloatingPoint&lt;System#Runtime#InteropServices#NFloat&gt;#GetExponentShortestBitLength">
      <summary>Gets the length, in bits, of the shortest two's complement representation of the current exponent.</summary>
      <returns>The length, in bits, of the shortest two's complement representation of the current exponent.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#IFloatingPoint&lt;System#Runtime#InteropServices#NFloat&gt;#GetSignificandBitLength">
      <summary>Gets the length, in bits, of the current significand.</summary>
      <returns>The length, in bits, of the current significand.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#IFloatingPoint{System#Runtime#InteropServices#NFloat}#GetSignificandByteCount">
      <summary>Gets the number of bytes that will be written as part of <see cref="M:System.Numerics.IFloatingPoint`1.TryWriteSignificandLittleEndian(System.Span{System.Byte},System.Int32@)" />.</summary>
      <returns>The number of bytes that will be written as part of <see cref="M:System.Numerics.IFloatingPoint`1.TryWriteSignificandLittleEndian(System.Span{System.Byte},System.Int32@)" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#IFloatingPoint&lt;System#Runtime#InteropServices#NFloat&gt;#TryWriteExponentBigEndian(System.Span{System.Byte},System.Int32@)">
      <summary>Tries to write the current exponent, in big-endian format, to a given span.</summary>
      <param name="destination">The span to which the current exponent should be written.</param>
      <param name="bytesWritten">When this method returns, contains the number of bytes written to <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the exponent was succesfully written to <paramref name="destination" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#IFloatingPoint&lt;System#Runtime#InteropServices#NFloat&gt;#TryWriteExponentLittleEndian(System.Span{System.Byte},System.Int32@)">
      <summary>Tries to write the current exponent, in little-endian format, to a given span.</summary>
      <param name="destination">The span to which the current exponent should be written.</param>
      <param name="bytesWritten">When this method returns, contains the number of bytes written to <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the exponent was succesfully written to <paramref name="destination" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#IFloatingPoint&lt;System#Runtime#InteropServices#NFloat&gt;#TryWriteSignificandBigEndian(System.Span{System.Byte},System.Int32@)">
      <summary>Tries to write the current significand, in big-endian format, to a given span.</summary>
      <param name="destination">The span to which the current significand should be written.</param>
      <param name="bytesWritten">When this method returns, contains the number of bytes written to <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the significand was succesfully written to <paramref name="destination" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#IFloatingPoint&lt;System#Runtime#InteropServices#NFloat&gt;#TryWriteSignificandLittleEndian(System.Span{System.Byte},System.Int32@)">
      <summary>Tries to write the current significand, in little-endian format, to a given span.</summary>
      <param name="destination">The span to which the current significand should be written.</param>
      <param name="bytesWritten">When this method returns, contains the number of bytes written to <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the significand was succesfully written to <paramref name="destination" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#IIncrementOperators{System#Runtime#InteropServices#NFloat}#op_CheckedIncrement(System.Runtime.InteropServices.NFloat)">
      <summary>Increments a value.</summary>
      <param name="value">The value to increment.</param>
      <returns>The result of incrementing <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#IMultiplyOperators{System#Runtime#InteropServices#NFloat@System#Runtime#InteropServices#NFloat@System#Runtime#InteropServices#NFloat}#op_CheckedMultiply(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Multiplies two values to compute their product.</summary>
      <param name="left">The value that <paramref name="right" /> multiplies.</param>
      <param name="right">The value that multiplies <paramref name="left" />.</param>
      <returns>The product of <paramref name="left" /> multiplied by <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#INumberBase{System#Runtime#InteropServices#NFloat}#IsCanonical(System.Runtime.InteropServices.NFloat)">
      <summary>Determines if a value is in its canonical representation.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is in its canonical representation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#INumberBase{System#Runtime#InteropServices#NFloat}#IsComplexNumber(System.Runtime.InteropServices.NFloat)">
      <summary>Determines if a value represents a complex number.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a complex number; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#INumberBase{System#Runtime#InteropServices#NFloat}#IsImaginaryNumber(System.Runtime.InteropServices.NFloat)">
      <summary>Determines if a value represents a pure imaginary number.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a pure imaginary number; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#INumberBase{System#Runtime#InteropServices#NFloat}#IsZero(System.Runtime.InteropServices.NFloat)">
      <summary>Determines if a value is zero.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#INumberBase{System#Runtime#InteropServices#NFloat}#TryConvertFromChecked``1(``0,System.Runtime.InteropServices.NFloat@)">
      <param name="value" />
      <param name="result" />
      <typeparam name="TOther" />
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#INumberBase{System#Runtime#InteropServices#NFloat}#TryConvertFromSaturating``1(``0,System.Runtime.InteropServices.NFloat@)">
      <param name="value" />
      <param name="result" />
      <typeparam name="TOther" />
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#INumberBase{System#Runtime#InteropServices#NFloat}#TryConvertFromTruncating``1(``0,System.Runtime.InteropServices.NFloat@)">
      <param name="value" />
      <param name="result" />
      <typeparam name="TOther" />
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#INumberBase{System#Runtime#InteropServices#NFloat}#TryConvertToChecked``1(System.Runtime.InteropServices.NFloat,``0@)">
      <summary>Tries to convert an instance of the the current type to another type, throwing an overflow exception for any values that fall outside the representable range of the current type.</summary>
      <param name="value">The value that's used to create the instance of <typeparamref name="TOther" />.</param>
      <param name="result">When this method returns, contains an instance of <typeparamref name="TOther" /> converted from <paramref name="value" />.</param>
      <typeparam name="TOther">The type to which <paramref name="value" /> should be converted.</typeparam>
      <returns>
        <see langword="false" /> if <typeparamref name="TOther" /> is not supported; otherwise, <see langword="true" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#INumberBase{System#Runtime#InteropServices#NFloat}#TryConvertToSaturating``1(System.Runtime.InteropServices.NFloat,``0@)">
      <summary>Tries to convert an instance of the the current type to another type, saturating any values that fall outside the representable range of the current type.</summary>
      <param name="value">The value that's used to create the instance of <typeparamref name="TOther" />.</param>
      <param name="result">When this method returns, contains an instance of <typeparamref name="TOther" /> converted from <paramref name="value" />.</param>
      <typeparam name="TOther">The type to which <paramref name="value" /> should be converted.</typeparam>
      <returns>
        <see langword="false" /> if <typeparamref name="TOther" /> is not supported; otherwise, <see langword="true" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#INumberBase{System#Runtime#InteropServices#NFloat}#TryConvertToTruncating``1(System.Runtime.InteropServices.NFloat,``0@)">
      <summary>Tries to convert an instance of the the current type to another type, truncating any values that fall outside the representable range of the current type.</summary>
      <param name="value">The value that's used to create the instance of <typeparamref name="TOther" />.</param>
      <param name="result">When this method returns, contains an instance of <typeparamref name="TOther" /> converted from <paramref name="value" />.</param>
      <typeparam name="TOther">The type to which <paramref name="value" /> should be converted.</typeparam>
      <returns>
        <see langword="false" /> if <typeparamref name="TOther" /> is not supported; otherwise, <see langword="true" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#ISubtractionOperators{System#Runtime#InteropServices#NFloat@System#Runtime#InteropServices#NFloat@System#Runtime#InteropServices#NFloat}#op_CheckedSubtraction(System.Runtime.InteropServices.NFloat,System.Runtime.InteropServices.NFloat)">
      <summary>Subtracts two values to compute their difference.</summary>
      <param name="left">The value from which <paramref name="right" /> is subtracted.</param>
      <param name="right">The value that's subtracted from <paramref name="left" />.</param>
      <returns>The value of <paramref name="right" /> subtracted from <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.System#Numerics#IUnaryNegationOperators{System#Runtime#InteropServices#NFloat@System#Runtime#InteropServices#NFloat}#op_CheckedUnaryNegation(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the checked unary negation of a value.</summary>
      <param name="value">The value for which to compute the unary negation.</param>
      <returns>The unary negation of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Tan(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the tangent of a value.</summary>
      <param name="x">The value, in radians, whose tangent is to be computed.</param>
      <returns>The tangent of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Tanh(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the hyperbolic tangent of a value.</summary>
      <param name="x">The value, in radians, whose hyperbolic tangent is to be computed.</param>
      <returns>The hyperbolic tangent of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.TanPi(System.Runtime.InteropServices.NFloat)">
      <summary>Computes the tangent of a value that has been multipled by <c>pi</c>.</summary>
      <param name="x">The value, in half-revolutions, that is multipled by <c>pi</c> before computing its tangent.</param>
      <returns>The tangent of <paramref name="x" /> multiplied-by <c>pi</c>.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.ToString">
      <summary>Converts the numeric value of this instance to its equivalent string representation.</summary>
      <returns>The string representation of the value of this instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the value of this instance as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</summary>
      <param name="format">A numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.ToString(System.String)">
      <summary>Converts the numeric value of this instance to its equivalent string representation using the specified format.</summary>
      <param name="format">A numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is invalid.</exception>
      <returns>The string representation of the value of this instance as specified by <paramref name="format" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.Truncate(System.Runtime.InteropServices.NFloat)">
      <summary>Truncates a value.</summary>
      <param name="x">The value to truncate.</param>
      <returns>The truncation of <paramref name="x" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Tries to format the value of the current instance as UTF-8 into the provided span of bytes.</summary>
      <param name="utf8Destination">The span in which to write this instance's value formatted as a span of bytes.</param>
      <param name="bytesWritten">When this method returns, contains the number of bytes that were written in <paramref name="utf8Destination" />.</param>
      <param name="format">A span containing the characters that represent a standard or custom format string that defines the acceptable format for <paramref name="utf8Destination" />.</param>
      <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="utf8Destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Tries to format the value of the current instance into the provided span of characters.</summary>
      <param name="destination">The span in which to write this instance's value formatted as a span of characters.</param>
      <param name="charsWritten">When this method returns, contains the number of characters that were written in <paramref name="destination" />.</param>
      <param name="format">A span containing the characters that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
      <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.TryParse(System.ReadOnlySpan{System.Byte},System.Globalization.NumberStyles,System.IFormatProvider,System.Runtime.InteropServices.NFloat@)">
      <summary>Tries to parse a span of UTF-8 characters into a value.</summary>
      <param name="utf8Text">The span of UTF-8 characters to parse.</param>
      <param name="style">A bitwise combination of number styles that can be present in <paramref name="utf8Text" />.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="utf8Text" />.</param>
      <param name="result">On return, contains the result of successfully parsing <paramref name="utf8Text" /> or an undefined value on failure.</param>
      <returns>
        <see langword="true" /> if <paramref name="utf8Text" /> was successfully parsed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.TryParse(System.ReadOnlySpan{System.Byte},System.IFormatProvider,System.Runtime.InteropServices.NFloat@)">
      <summary>Tries to parse a span of UTF-8 characters into a value.</summary>
      <param name="utf8Text">The span of UTF-8 characters to parse.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="utf8Text" />.</param>
      <param name="result">On return, contains the result of successfully parsing <paramref name="utf8Text" /> or an undefined value on failure.</param>
      <returns>
        <see langword="true" /> if <paramref name="utf8Text" /> was successfully parsed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.TryParse(System.ReadOnlySpan{System.Byte},System.Runtime.InteropServices.NFloat@)">
      <summary>Tries to convert a UTF-8 character span containing the string representation of a number to its floating-point number equivalent.</summary>
      <param name="utf8Text">A read-only UTF-8 character span that contains the number to convert.</param>
      <param name="result">When this method returns, contains a floating-point number equivalent of the numeric value or symbol contained in <paramref name="utf8Text" /> if the conversion succeeded or zero if the conversion failed. The conversion fails if the <paramref name="utf8Text" /> is <see cref="P:System.ReadOnlySpan`1.Empty" /> or is not in a valid format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="utf8Text" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Runtime.InteropServices.NFloat@)">
      <summary>Tries to convert a character span containing the string representation of a number in a specified style and culture-specific format to its floating-point number equivalent.</summary>
      <param name="s">A read-only character span that contains the number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains a floating-point number equivalent of the numeric value or symbol contained in <paramref name="s" /> if the conversion succeeded or zero if the conversion failed. The conversion fails if the <paramref name="s" /> is <see cref="F:System.String.Empty" /> or is not in a format compliant with <paramref name="style" />, or if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumeration constants. This parameter is passed uninitialized; any value originally supplied in result will be overwritten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.

-or-

<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Runtime.InteropServices.NFloat@)">
      <summary>Tries to parse a span of characters into a value.</summary>
      <param name="s">The span of characters to parse.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the result of successfully parsing <paramref name="s" />, or an undefined value on failure.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was successfully parsed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.TryParse(System.ReadOnlySpan{System.Char},System.Runtime.InteropServices.NFloat@)">
      <summary>Tries to convert a character span containing the string representation of a number to its floating-point number equivalent.</summary>
      <param name="s">A read-only character span that contains the number to convert.</param>
      <param name="result">When this method returns, contains a floating-point number equivalent of the numeric value or symbol contained in <paramref name="s" /> if the conversion succeeded or zero if the conversion failed. The conversion fails if the <paramref name="s" /> is <see cref="F:System.String.Empty" /> or is not in a valid format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Runtime.InteropServices.NFloat@)">
      <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its floating-point number equivalent.</summary>
      <param name="s">A read-only character span that contains the number to convert.</param>
      <param name="style">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains a floating-point number equivalent of the numeric value or symbol contained in <paramref name="s" /> if the conversion succeeded or zero if the conversion failed. The conversion fails if the <paramref name="s" /> is <see langword="null" />, <see cref="F:System.String.Empty" />, or is not in a format compliant with <paramref name="style" />, or if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumeration constants. This parameter is passed uninitialized; any value originally supplied in result will be overwritten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.

-or-

<paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</exception>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.TryParse(System.String,System.IFormatProvider,System.Runtime.InteropServices.NFloat@)">
      <summary>Tries to parse a string into a value.</summary>
      <param name="s">The string to parse.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the result of successfully parsing <paramref name="s" /> or an undefined value on failure.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was successfully parsed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NFloat.TryParse(System.String,System.Runtime.InteropServices.NFloat@)">
      <summary>Tries to convert the string representation of a number to its floating-point number equivalent.</summary>
      <param name="s">A read-only character span that contains the number to convert.</param>
      <param name="result">When this method returns, contains a floating-point number equivalent of the numeric value or symbol contained in <paramref name="s" /> if the conversion succeeded or zero if the conversion failed. The conversion fails if the <paramref name="s" /> is <see langword="null" />, <see cref="F:System.String.Empty" />, or is not in a valid format. This parameter is passed uninitialized; any value originally supplied in result will be overwritten.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.NFloat.E">
      <summary>Gets the mathematical constant <c>e</c>.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.NFloat.Epsilon">
      <summary>Represents the smallest positive NFloat value that is greater than zero.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.NFloat.MaxValue">
      <summary>Represents the largest finite value of a NFloat.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.NFloat.MinValue">
      <summary>Represents the smallest finite value of a NFloat.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.NFloat.NaN">
      <summary>Represents a value that is not a number (NaN).</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.NFloat.NegativeInfinity">
      <summary>Represents negative infinity.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.NFloat.NegativeZero">
      <summary>Gets a value that represents negative <c>zero</c>.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.NFloat.Pi">
      <summary>Gets the mathematical constant <c>pi</c>.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.NFloat.PositiveInfinity">
      <summary>Represents positive infinity.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.NFloat.Size">
      <summary>Gets the size, in bytes, of an NFloat.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.NFloat.System#Numerics#IAdditiveIdentity{System#Runtime#InteropServices#NFloat@System#Runtime#InteropServices#NFloat}#AdditiveIdentity">
      <summary>Gets the additive identity of the current type.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.NFloat.System#Numerics#IBinaryNumber{System#Runtime#InteropServices#NFloat}#AllBitsSet">
      <summary>Gets an instance of the binary type in which all bits are set.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.NFloat.System#Numerics#IMultiplicativeIdentity{System#Runtime#InteropServices#NFloat@System#Runtime#InteropServices#NFloat}#MultiplicativeIdentity">
      <summary>Gets the multiplicative identity of the current type.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.NFloat.System#Numerics#INumberBase{System#Runtime#InteropServices#NFloat}#One">
      <summary>Gets the value <c>1</c> for the type.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.NFloat.System#Numerics#INumberBase{System#Runtime#InteropServices#NFloat}#Radix">
      <summary>Gets the radix, or base, for the type.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.NFloat.System#Numerics#INumberBase{System#Runtime#InteropServices#NFloat}#Zero">
      <summary>Gets the value <c>0</c> for the type.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.NFloat.System#Numerics#ISignedNumber{System#Runtime#InteropServices#NFloat}#NegativeOne">
      <summary>Gets the value <c>-1</c> for the type.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.NFloat.Tau">
      <summary>Gets the mathematical constant <c>tau</c>.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.NFloat.Value">
      <summary>The underlying floating-point value of this instance.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal">
      <summary>API to enable Objective-C marshalling.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.CreateReferenceTrackingHandle(System.Object,System.Span{System.IntPtr}@)">
      <summary>Request native reference tracking for the supplied object.</summary>
      <param name="obj">The object to track.</param>
      <param name="taggedMemory">A pointer to memory tagged to the object.</param>
      <exception cref="T:System.InvalidOperationException">The ObjectiveCMarshal API has not been initialized.</exception>
      <returns>Reference tracking GC handle.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.Initialize(delegate* unmanaged{System.Void},delegate* unmanaged{System.IntPtr, System.Int32},delegate* unmanaged{System.IntPtr, System.Void},System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.UnhandledExceptionPropagationHandler)">
      <summary>Initialize the Objective-C marshalling API.</summary>
      <param name="beginEndCallback">Called when tracking begins and ends.</param>
      <param name="isReferencedCallback">Called to determine if a managed object instance is referenced elsewhere, and must not be collected by the GC.</param>
      <param name="trackedObjectEnteredFinalization">Called when a tracked object enters the finalization queue.</param>
      <param name="unhandledExceptionPropagationHandler">Handler for the propagation of unhandled Exceptions across a managed -&gt; native boundary (that is, Reverse P/Invoke).</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.SetMessageSendCallback(System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.MessageSendFunction,System.IntPtr)">
      <summary>Set a function pointer override for an Objective-C runtime message passing export.</summary>
      <param name="msgSendFunction">The export to override.</param>
      <param name="func">The function override.</param>
      <exception cref="T:System.InvalidOperationException">The msgSend function has already been overridden.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.SetMessageSendPendingException(System.Exception)">
      <summary>Sets a pending exception to be thrown the next time the runtime is entered from an Objective-C msgSend P/Invoke.</summary>
      <param name="exception">The exception.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.MessageSendFunction">
      <summary>Objective-C msgSend function override options.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.MessageSendFunction.MsgSend">
      <summary>Overrides the Objective-C runtime's msgSend().</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.MessageSendFunction.MsgSendFpret">
      <summary>Overrides the Objective-C runtime's objc_msgSend_fpret().</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.MessageSendFunction.MsgSendStret">
      <summary>Overrides the Objective-C runtime's objc_msgSend_stret().</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.MessageSendFunction.MsgSendSuper">
      <summary>Overrides the Objective-C runtime's objc_msgSendSuper().</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.MessageSendFunction.MsgSendSuperStret">
      <summary>Overrides the Objective-C runtime's objc_msgSendSuper_stret().</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ObjectiveC.ObjectiveCMarshal.UnhandledExceptionPropagationHandler">
      <summary>Handler for unhandled Exceptions crossing the managed -&gt; native boundary (that is, Reverse P/Invoke).</summary>
      <param name="exception">Unhandled exception.</param>
      <param name="lastMethod">Last managed method.</param>
      <param name="context">Context provided to the returned function pointer.</param>
      <returns>Exception propagation callback.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ObjectiveC.ObjectiveCTrackedTypeAttribute">
      <summary>Attribute used to indicate a class represents a tracked Objective-C type.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ObjectiveC.ObjectiveCTrackedTypeAttribute.#ctor">
      <summary>Instantiate a <see cref="T:System.Runtime.InteropServices.ObjectiveC.ObjectiveCTrackedTypeAttribute" /> instance.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary>Indicates that a parameter is optional.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary>Initializes a new instance of the <see langword="OptionalAttribute" /> class with default values.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PosixSignal">
      <summary>Specifies a POSIX signal number.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PosixSignal.SIGCHLD">
      <summary>Child stopped</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PosixSignal.SIGCONT">
      <summary>Continue if stopped</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PosixSignal.SIGHUP">
      <summary>Hangup</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PosixSignal.SIGINT">
      <summary>Interrupt</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PosixSignal.SIGQUIT">
      <summary>Quit</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PosixSignal.SIGTERM">
      <summary>Termination</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PosixSignal.SIGTSTP">
      <summary>Stop typed at terminal</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PosixSignal.SIGTTIN">
      <summary>Terminal input for background process</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PosixSignal.SIGTTOU">
      <summary>Terminal output for background process</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.PosixSignal.SIGWINCH">
      <summary>Window resized</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PosixSignalContext">
      <summary>Provides data for a <see cref="T:System.Runtime.InteropServices.PosixSignalRegistration" /> event.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PosixSignalContext.#ctor(System.Runtime.InteropServices.PosixSignal)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.PosixSignalContext" /> class.</summary>
      <param name="signal">The signal that occurred.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.PosixSignalContext.Cancel">
      <summary>Gets or sets a value that indicates whether to cancel the default handling of the signal. The default is <see langword="false" />.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.PosixSignalContext.Signal">
      <summary>Gets the signal that occurred.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PosixSignalRegistration">
      <summary>Handles a <see cref="T:System.Runtime.InteropServices.PosixSignal" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PosixSignalRegistration.Create(System.Runtime.InteropServices.PosixSignal,System.Action{System.Runtime.InteropServices.PosixSignalContext})">
      <summary>Registers a <paramref name="handler" /> that is invoked when the <paramref name="signal" /> occurs.</summary>
      <param name="signal">The signal to register for.</param>
      <param name="handler">The handler that gets invoked.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> is <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <paramref name="signal" /> is not supported by the platform.</exception>
      <exception cref="T:System.IO.IOException">An error occurred while setting up the signal handling or while installing the handler for the specified signal.</exception>
      <returns>A <see cref="T:System.Runtime.InteropServices.PosixSignalRegistration" /> instance that can be disposed to unregister the handler.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.PosixSignalRegistration.Dispose">
      <summary>Unregisters the handler.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PosixSignalRegistration.Finalize">
      <summary>Unregisters the handler.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary>Indicates that the HRESULT signature transformation that takes place during COM interop calls should be suppressed.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute">
      <summary>Indicates that the attributed assembly is a primary interop assembly.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute" /> class with the major and minor version numbers of the type library for which this assembly is the primary interop assembly.</summary>
      <param name="major">The major version of the type library for which this assembly is the primary interop assembly.</param>
      <param name="minor">The minor version of the type library for which this assembly is the primary interop assembly.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MajorVersion">
      <summary>Gets the major version number of the type library for which this assembly is the primary interop assembly.</summary>
      <returns>The major version number of the type library for which this assembly is the primary interop assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MinorVersion">
      <summary>Gets the minor version number of the type library for which this assembly is the primary interop assembly.</summary>
      <returns>The minor version number of the type library for which this assembly is the primary interop assembly.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ProgIdAttribute">
      <summary>Allows the user to specify the ProgID of a class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ProgIdAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see langword="ProgIdAttribute" /> with the specified ProgID.</summary>
      <param name="progId">The ProgID to be assigned to the class.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ProgIdAttribute.Value">
      <summary>Gets the ProgID of the class.</summary>
      <returns>The ProgID of the class.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.RuntimeEnvironment">
      <summary>Provides a collection of <see langword="static" /> methods that return information about the common language runtime environment.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.FromGlobalAccessCache(System.Reflection.Assembly)">
      <summary>Tests whether the specified assembly is loaded in the global assembly cache.</summary>
      <param name="a">The assembly to test.</param>
      <returns>
        <see langword="true" /> if the assembly is loaded in the global assembly cache; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory">
      <summary>Returns the directory where the common language runtime is installed.</summary>
      <returns>A string that contains the path to the directory where the common language runtime is installed.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(System.Guid,System.Guid)">
      <summary>Returns the specified interface on the specified class.</summary>
      <param name="clsid">The identifier for the desired class.</param>
      <param name="riid">The identifier for the desired interface.</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">IUnknown::QueryInterface failure.</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core and .NET 5+ only: In all cases.</exception>
      <returns>An unmanaged pointer to the requested interface.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject(System.Guid,System.Guid)">
      <summary>Returns an instance of a type that represents a COM object by a pointer to its <see langword="IUnknown" /> interface.</summary>
      <param name="clsid">The identifier for the desired class.</param>
      <param name="riid">The identifier for the desired interface.</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">IUnknown::QueryInterface failure.</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core and .NET 5+ only: In all cases.</exception>
      <returns>An object that represents the specified unmanaged COM object.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion">
      <summary>Gets the version number of the common language runtime that's running the current process.</summary>
      <returns>A string containing the version number of the common language runtime.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.RuntimeEnvironment.SystemConfigurationFile">
      <summary>Gets the path to the system configuration file.</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core and .NET 5+ only: In all cases.</exception>
      <returns>The path to the system configuration file.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayRankMismatchException">
      <summary>The exception thrown when the rank of an incoming <see langword="SAFEARRAY" /> does not match the rank specified in the managed signature.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor">
      <summary>Initializes a new instance of the <see langword="SafeArrayTypeMismatchException" /> class with default values.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see langword="SafeArrayTypeMismatchException" /> class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeArrayRankMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see langword="SafeArrayRankMismatchException" /> class with the specified message.</summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException">
      <summary>The exception thrown when the type of the incoming <see langword="SAFEARRAY" /> does not match the type specified in the managed signature.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor">
      <summary>Initializes a new instance of the <see langword="SafeArrayTypeMismatchException" /> class with default values.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see langword="SafeArrayTypeMismatchException" /> class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see langword="SafeArrayTypeMismatchException" /> class with the specified message.</summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary>Represents structured exception handling (SEH) errors.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException" /> class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException" /> class from serialization data.</summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner" /> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SEHException" /> class with a specified message.</summary>
      <param name="message">The message that indicates the reason for the exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.CanResume">
      <summary>Indicates whether the exception can be recovered from, and whether the code can continue from the point at which the exception was thrown.</summary>
      <returns>Always <see langword="false" />, because resumable exceptions are not implemented.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.StandardOleMarshalObject">
      <summary>Replaces the standard common language runtime (CLR) free-threaded marshaler with the standard OLE STA marshaler.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StandardOleMarshalObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.StandardOleMarshalObject" /> class.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.StringMarshalling">
      <summary>Specifies how strings should be marshalled for generated p/invokes</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StringMarshalling.Custom">
      <summary>Indicates a specific marshaller is supplied in <see cref="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshallingCustomType" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StringMarshalling.Utf16">
      <summary>Use the platform-provided UTF-16 marshaller.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StringMarshalling.Utf8">
      <summary>Use the platform-provided UTF-8 marshaller.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
      <summary>Provides support for type equivalence.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> class.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> class with the specified scope and identifier.</summary>
      <param name="scope">The first type equivalence string.</param>
      <param name="identifier">The second type equivalence string.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier">
      <summary>Gets the value of the <paramref name="identifier" /> parameter that was passed to the <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> constructor.</summary>
      <returns>The value of the constructor's <paramref name="identifier" /> parameter.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope">
      <summary>Gets the value of the <paramref name="scope" /> parameter that was passed to the <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> constructor.</summary>
      <returns>The value of the constructor's <paramref name="scope" /> parameter.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncAttribute">
      <summary>Contains the <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> that were originally imported for this method from the COM type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see langword="TypeLibFuncAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> value.</summary>
      <param name="flags">The <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> value for the attributed method as found in the type library it was imported from.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Runtime.InteropServices.TypeLibFuncFlags)">
      <summary>Initializes a new instance of the <see langword="TypeLibFuncAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> value.</summary>
      <param name="flags">The <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> value for the attributed method as found in the type library it was imported from.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibFuncAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> value for this method.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> value for this method.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncFlags">
      <summary>Describes the original settings of the <see langword="FUNCFLAGS" /> in the COM type library from where this method was imported.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable">
      <summary>The function that supports data binding.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultBind">
      <summary>The function that best represents the object. Only one function in a type information can have this attribute.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultCollelem">
      <summary>Permits an optimization in which the compiler looks for a member named "xyz" on the type "abc". If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDisplayBind">
      <summary>The function that is displayed to the user as bindable. <see cref="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable" /> must also be set.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FHidden">
      <summary>The function should not be displayed to the user, although it exists and is bindable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FImmediateBind">
      <summary>The function is mapped as individual bindable properties.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FNonBrowsable">
      <summary>The property appears in an object browser, but not in a properties browser.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FReplaceable">
      <summary>Tags the interface as having default behaviors.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRequestEdit">
      <summary>When set, any call to a method that sets the property results first in a call to <see langword="IPropertyNotifySink::OnRequestEdit" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRestricted">
      <summary>This flag is intended for system-level functions or functions that type browsers should not display.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FSource">
      <summary>The function returns an object that is a source of events.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUiDefault">
      <summary>The type information member is the default member for display in the user interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUsesGetLastError">
      <summary>The function supports <see langword="GetLastError" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibImportClassAttribute">
      <summary>Specifies which <see cref="T:System.Type" /> exclusively uses an interface. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibImportClassAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.TypeLibImportClassAttribute" /> class specifying the <see cref="T:System.Type" /> that exclusively uses an interface.</summary>
      <param name="importClass">The <see cref="T:System.Type" /> object that exclusively uses an interface.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibImportClassAttribute.Value">
      <summary>Gets the name of a <see cref="T:System.Type" /> object that exclusively uses an interface.</summary>
      <returns>The name of a <see cref="T:System.Type" /> object that exclusively uses an interface.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeAttribute">
      <summary>Contains the <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> that were originally imported for this type from the COM type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see langword="TypeLibTypeAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> value.</summary>
      <param name="flags">The <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> value for the attributed type as found in the type library it was imported from.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Runtime.InteropServices.TypeLibTypeFlags)">
      <summary>Initializes a new instance of the <see langword="TypeLibTypeAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> value.</summary>
      <param name="flags">The <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> value for the attributed type as found in the type library it was imported from.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibTypeAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> value for this type.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> value for this type.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeFlags">
      <summary>Describes the original settings of the <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> in the COM type library from which the type was imported.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAggregatable">
      <summary>The class supports aggregation.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAppObject">
      <summary>A type description that describes an <see langword="Application" /> object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FCanCreate">
      <summary>Instances of the type can be created by <see langword="ITypeInfo::CreateInstance" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FControl">
      <summary>The type is a control from which other types will be derived, and should not be displayed to users.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDispatchable">
      <summary>Indicates that the interface derives from <see langword="IDispatch" />, either directly or indirectly.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDual">
      <summary>The interface supplies both <see langword="IDispatch" /> and V-table binding.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FHidden">
      <summary>The type should not be displayed to browsers.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FLicensed">
      <summary>The type is licensed.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FNonExtensible">
      <summary>The interface cannot add members at run time.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FOleAutomation">
      <summary>The types used in the interface are fully compatible with Automation, including vtable binding support.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FPreDeclId">
      <summary>The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReplaceable">
      <summary>The object supports <see langword="IConnectionPointWithDefault" />, and has default behaviors.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FRestricted">
      <summary>This flag is intended for system-level types or types that type browsers should not display.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReverseBind">
      <summary>Indicates base interfaces should be checked for name resolution before checking child interfaces. This is the reverse of the default behavior.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarAttribute">
      <summary>Contains the <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> that were originally imported for this field from the COM type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> value.</summary>
      <param name="flags">The <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> value for the attributed field as found in the type library it was imported from.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Runtime.InteropServices.TypeLibVarFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> value.</summary>
      <param name="flags">The <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> value for the attributed field as found in the type library it was imported from.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVarAttribute.Value">
      <summary>Gets the <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> value for this field.</summary>
      <returns>The <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> value for this field.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarFlags">
      <summary>Describes the original settings of the <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> in the COM type library from which the variable was imported.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable">
      <summary>The variable supports data binding.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultBind">
      <summary>The variable is the single property that best represents the object. Only one variable in a type info can have this value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultCollelem">
      <summary>Permits an optimization in which the compiler looks for a member named "xyz" on the type "abc". If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDisplayBind">
      <summary>The variable is displayed as bindable. <see cref="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable" /> must also be set.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FHidden">
      <summary>The variable should not be displayed in a browser, though it exists and is bindable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FImmediateBind">
      <summary>The variable is mapped as individual bindable properties.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FNonBrowsable">
      <summary>The variable appears in an object browser, but not in a properties browser.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReadOnly">
      <summary>Assignment to the variable should not be allowed.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReplaceable">
      <summary>Tags the interface as having default behaviors.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRequestEdit">
      <summary>Indicates that the property supports the COM <see langword="OnRequestEdit" /> notification.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRestricted">
      <summary>This flag is intended for system-level functions or functions that type browsers should not display.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FSource">
      <summary>The variable returns an object that is a source of events.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FUiDefault">
      <summary>The default display in the user interface.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVersionAttribute">
      <summary>Specifies the version number of an exported type library.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVersionAttribute.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.TypeLibVersionAttribute" /> class with the major and minor version numbers of the type library.</summary>
      <param name="major">The major version number of the type library.</param>
      <param name="minor">The minor version number of the type library.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MajorVersion">
      <summary>Gets the major version number of the type library.</summary>
      <returns>The major version number of the type library.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MinorVersion">
      <summary>Gets the minor version number of the type library.</summary>
      <returns>The minor version number of the type library.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeMapAssemblyTargetAttribute`1">
      <typeparam name="TTypeMapGroup" />
    </member>
    <member name="M:System.Runtime.InteropServices.TypeMapAssemblyTargetAttribute`1.#ctor(System.String)">
      <param name="assemblyName" />
    </member>
    <member name="T:System.Runtime.InteropServices.TypeMapAssociationAttribute`1">
      <typeparam name="TTypeMapGroup" />
    </member>
    <member name="M:System.Runtime.InteropServices.TypeMapAssociationAttribute`1.#ctor(System.Type,System.Type)">
      <param name="source" />
      <param name="proxy" />
    </member>
    <member name="T:System.Runtime.InteropServices.TypeMapAttribute`1">
      <typeparam name="TTypeMapGroup" />
    </member>
    <member name="M:System.Runtime.InteropServices.TypeMapAttribute`1.#ctor(System.String,System.Type,System.Type)">
      <param name="value" />
      <param name="target" />
      <param name="trimTarget" />
    </member>
    <member name="M:System.Runtime.InteropServices.TypeMapAttribute`1.#ctor(System.String,System.Type)">
      <param name="value" />
      <param name="target" />
    </member>
    <member name="T:System.Runtime.InteropServices.TypeMapping" />
    <member name="M:System.Runtime.InteropServices.TypeMapping.GetOrCreateExternalTypeMapping``1">
      <typeparam name="TTypeMapGroup" />
    </member>
    <member name="M:System.Runtime.InteropServices.TypeMapping.GetOrCreateProxyTypeMapping``1">
      <typeparam name="TTypeMapGroup" />
    </member>
    <member name="T:System.Runtime.InteropServices.UnknownWrapper">
      <summary>Wraps objects the marshaler should marshal as a <see langword="VT_UNKNOWN" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnknownWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> class with the object to be wrapped.</summary>
      <param name="obj">The object being wrapped.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject">
      <summary>Gets the object contained by this wrapper.</summary>
      <returns>The wrapped object.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedCallConvAttribute">
      <summary>Specifies the calling convention required to call P/Invoke methods implemented in unmanaged code.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedCallConvAttribute.CallConvs">
      <summary>Optional. Types indicating calling conventions for the unmanaged target.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedCallConvAttribute.#ctor">
      <summary>Initializes a new <see cref="T:System.Runtime.InteropServices.UnmanagedCallConvAttribute" /> instance.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute">
      <summary>Any method marked with <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" /> can be directly called from native code. The function token can be loaded to a local variable using the address-of operator in C# and passed as a callback to a native method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.CallConvs">
      <summary>Optional. If omitted, the runtime will use the default platform calling convention.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.EntryPoint">
      <summary>Optional. If omitted, no named export is emitted during compilation.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.#ctor">
      <summary>Initializes a new <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" /> instance.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
      <summary>Controls the marshaling behavior of a delegate signature passed as an unmanaged function pointer to or from unmanaged code. This class cannot be inherited.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.BestFitMapping">
      <summary>Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CharSet">
      <summary>Indicates how to marshal string parameters to the method, and controls name mangling.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.SetLastError">
      <summary>Indicates whether the callee calls the <see langword="SetLastError" /> Windows API function before returning from the attributed method.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.ThrowOnUnmappableChar">
      <summary>Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute" /> class with the specified calling convention.</summary>
      <param name="callingConvention">The specified calling convention.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
      <summary>Gets the value of the calling convention.</summary>
      <returns>The value of the calling convention specified by the <see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)" /> constructor.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.VarEnum">
      <summary>Indicates how to marshal the array elements when an array is marshaled from managed to unmanaged code as a <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ARRAY">
      <summary>Indicates a <see langword="SAFEARRAY" /> pointer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB">
      <summary>Indicates length prefixed bytes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB_OBJECT">
      <summary>Indicates that a blob contains an object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BOOL">
      <summary>Indicates a Boolean value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BSTR">
      <summary>Indicates a BSTR string.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BYREF">
      <summary>Indicates that a value is a reference.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CARRAY">
      <summary>Indicates a C style array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CF">
      <summary>Indicates the clipboard format.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CLSID">
      <summary>Indicates a class ID.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CY">
      <summary>Indicates a currency value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DATE">
      <summary>Indicates a DATE value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DECIMAL">
      <summary>Indicates a <see langword="decimal" /> value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH">
      <summary>Indicates an <see langword="IDispatch" /> pointer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_EMPTY">
      <summary>Indicates that a value was not specified.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ERROR">
      <summary>Indicates an SCODE.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_FILETIME">
      <summary>Indicates a FILETIME value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_HRESULT">
      <summary>Indicates an HRESULT.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I1">
      <summary>Indicates a <see langword="char" /> value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I2">
      <summary>Indicates a <see langword="short" /> integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I4">
      <summary>Indicates a <see langword="long" /> integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I8">
      <summary>Indicates a 64-bit integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_INT">
      <summary>Indicates an integer value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPSTR">
      <summary>Indicates a null-terminated string.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPWSTR">
      <summary>Indicates a wide string terminated by <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_NULL">
      <summary>Indicates a null value, similar to a null value in SQL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_PTR">
      <summary>Indicates a pointer type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R4">
      <summary>Indicates a <see langword="float" /> value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R8">
      <summary>Indicates a <see langword="double" /> value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_RECORD">
      <summary>Indicates a user defined type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_SAFEARRAY">
      <summary>Indicates a SAFEARRAY. Not valid in a VARIANT.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORAGE">
      <summary>Indicates that the name of a storage follows.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORED_OBJECT">
      <summary>Indicates that a storage contains an object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAM">
      <summary>Indicates that the name of a stream follows.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAMED_OBJECT">
      <summary>Indicates that a stream contains an object.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI1">
      <summary>Indicates a <see langword="byte" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI2">
      <summary>Indicates an <see langword="unsigned" /><see langword="short" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI4">
      <summary>Indicates an <see langword="unsigned" /><see langword="long" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI8">
      <summary>Indicates an 64-bit unsigned integer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UINT">
      <summary>Indicates an <see langword="unsigned" /> integer value.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UNKNOWN">
      <summary>Indicates an <see langword="IUnknown" /> pointer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_USERDEFINED">
      <summary>Indicates a user defined type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VARIANT">
      <summary>Indicates a VARIANT <see langword="far" /> pointer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VECTOR">
      <summary>Indicates a simple, counted array.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VOID">
      <summary>Indicates a C style <see langword="void" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VariantWrapper">
      <summary>Marshals data of type <see langword="VT_VARIANT | VT_BYREF" /> from managed to unmanaged code. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> class for the specified <see cref="T:System.Object" /> parameter.</summary>
      <param name="obj">The object to marshal.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
      <summary>Gets the object wrapped by the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> object.</summary>
      <returns>The object wrapped by the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> object.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.WasmImportLinkageAttribute">
      <summary>Specifies that the P/Invoke marked with this attribute should be linked in as a WASM import.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.WasmImportLinkageAttribute.#ctor">
      <summary>Instance constructor.</summary>
    </member>
    <member name="T:System.Security.SecureString">
      <summary>Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Security.SecureString.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecureString" /> class.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while protecting or unprotecting the value of this instance.</exception>
      <exception cref="T:System.NotSupportedException">This operation is not supported on this platform.</exception>
    </member>
    <member name="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.SecureString" /> class from a subarray of <see cref="T:System.Char" /> objects.

 This constructor is not CLS-compliant. The CLS-compliant alternative is <see cref="M:System.Security.SecureString.#ctor" />.</summary>
      <param name="value">A pointer to an array of <see cref="T:System.Char" /> objects.</param>
      <param name="length">The number of elements of <paramref name="value" /> to include in the new instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> is less than zero or greater than 65,536.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while protecting or unprotecting the value of this secure string.</exception>
      <exception cref="T:System.NotSupportedException">This operation is not supported on this platform.</exception>
    </member>
    <member name="M:System.Security.SecureString.AppendChar(System.Char)">
      <summary>Appends a character to the end of the current secure string.</summary>
      <param name="c">A character to append to this secure string.</param>
      <exception cref="T:System.ObjectDisposedException">This secure string has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">This secure string is read-only.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Performing this operation would make the length of this secure string greater than 65,536 characters.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while protecting or unprotecting the value of this secure string.</exception>
    </member>
    <member name="M:System.Security.SecureString.Clear">
      <summary>Deletes the value of the current secure string.</summary>
      <exception cref="T:System.ObjectDisposedException">This secure string has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">This secure string is read-only.</exception>
    </member>
    <member name="M:System.Security.SecureString.Copy">
      <summary>Creates a copy of the current secure string.</summary>
      <exception cref="T:System.ObjectDisposedException">This secure string has already been disposed.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while protecting or unprotecting the value of this secure string.</exception>
      <returns>A duplicate of this secure string.</returns>
    </member>
    <member name="M:System.Security.SecureString.Dispose">
      <summary>Releases all resources used by the current <see cref="T:System.Security.SecureString" /> object.</summary>
    </member>
    <member name="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
      <summary>Inserts a character in this secure string at the specified index position.</summary>
      <param name="index">The index position where parameter <paramref name="c" /> is inserted.</param>
      <param name="c">The character to insert.</param>
      <exception cref="T:System.ObjectDisposedException">This secure string has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">This secure string is read-only.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero, or greater than the length of this secure string.

 -or-

 Performing this operation would make the length of this secure string greater than 65,536 characters.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while protecting or unprotecting the value of this secure string.</exception>
    </member>
    <member name="M:System.Security.SecureString.IsReadOnly">
      <summary>Indicates whether this secure string is marked read-only.</summary>
      <exception cref="T:System.ObjectDisposedException">This secure string has already been disposed.</exception>
      <returns>
        <see langword="true" /> if this secure string is marked read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.SecureString.MakeReadOnly">
      <summary>Makes the text value of this secure string read-only.</summary>
      <exception cref="T:System.ObjectDisposedException">This secure string has already been disposed.</exception>
    </member>
    <member name="M:System.Security.SecureString.RemoveAt(System.Int32)">
      <summary>Removes the character at the specified index position from this secure string.</summary>
      <param name="index">The index position of a character in this secure string.</param>
      <exception cref="T:System.ObjectDisposedException">This secure string has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">This secure string is read-only.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero, or greater than or equal to the length of this secure string.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while protecting or unprotecting the value of this secure string.</exception>
    </member>
    <member name="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
      <summary>Replaces the existing character at the specified index position with another character.</summary>
      <param name="index">The index position of an existing character in this secure string.</param>
      <param name="c">A character that replaces the existing character.</param>
      <exception cref="T:System.ObjectDisposedException">This secure string has already been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">This secure string is read-only.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero, or greater than or equal to the length of this secure string.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurred while protecting or unprotecting the value of this secure string.</exception>
    </member>
    <member name="P:System.Security.SecureString.Length">
      <summary>Gets the number of characters in the current secure string.</summary>
      <exception cref="T:System.ObjectDisposedException">This secure string has already been disposed.</exception>
      <returns>The number of <see cref="T:System.Char" /> objects in this secure string.</returns>
    </member>
    <member name="T:System.Security.SecureStringMarshal">
      <summary>Provides a collection of methods for allocating unmanaged memory and copying unmanaged memory blocks.</summary>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString" /> object to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <param name="s">The managed object to copy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>The address, in unmanaged memory, where the <paramref name="s" /> parameter was copied to, or 0 if a null object was supplied.</returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString" /> object to a block of memory allocated from the unmanaged COM task allocator.</summary>
      <param name="s">The managed object to copy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>The address, in unmanaged memory, where the <paramref name="s" /> parameter was copied to, or 0 if a null object was supplied.</returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString" /> into unmanaged memory, converting into ANSI format as it copies.</summary>
      <param name="s">The managed object to copy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>The address, in unmanaged memory, to where the <paramref name="s" /> parameter was copied, or 0 if a null object was supplied.</returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary>Copies the contents of a managed <see cref="T:System.Security.SecureString" /> object into unmanaged memory.</summary>
      <param name="s">The managed object to copy.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">There is insufficient memory available.</exception>
      <returns>The address, in unmanaged memory, where <paramref name="s" /> was copied, or 0 if <paramref name="s" /> is a <see cref="T:System.Security.SecureString" /> object whose length is 0.</returns>
    </member>
  </members>
</doc>