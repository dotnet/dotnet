<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Extensions.FileProviders.Physical</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents">
      <summary>
            Represents the contents of a physical file directory.</summary>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents.#ctor(System.String,Microsoft.Extensions.FileProviders.Physical.ExclusionFilters)">
      <summary>
            Initializes an instance of <see cref="T:Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents" />.</summary>
      <param name="directory">The directory to represent.</param>
      <param name="filters">Specifies which files or directories are excluded from enumeration.</param>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents.#ctor(System.String)">
      <summary>
            Initializes an instance of <see cref="T:Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents" />.</summary>
      <param name="directory">The directory to represent.</param>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:Microsoft.Extensions.FileProviders.Internal.PhysicalDirectoryContents.Exists">
      <summary>Gets a value that indicates if a directory is located at this path.</summary>
      <returns>
        <code data-dev-comment-type="langword">true</code> if a directory is located at this path; <code data-dev-comment-type="langword">false</code> otherwise.</returns>
    </member>
    <member name="T:Microsoft.Extensions.FileProviders.Physical.ExclusionFilters">
      <summary>
            Specifies filtering behavior for files or directories.</summary>
    </member>
    <member name="F:Microsoft.Extensions.FileProviders.Physical.ExclusionFilters.DotPrefixed">
      <summary>
            Exclude files and directories when the name begins with period.</summary>
    </member>
    <member name="F:Microsoft.Extensions.FileProviders.Physical.ExclusionFilters.Hidden">
      <summary>
            Exclude files and directories when <see cref="F:System.IO.FileAttributes.Hidden" /> is set on <see cref="P:System.IO.FileSystemInfo.Attributes" />.</summary>
    </member>
    <member name="F:Microsoft.Extensions.FileProviders.Physical.ExclusionFilters.None">
      <summary>
            Do not exclude any files.</summary>
    </member>
    <member name="F:Microsoft.Extensions.FileProviders.Physical.ExclusionFilters.Sensitive">
      <summary>
            Equivalent to <c>DotPrefixed | Hidden | System</c>. Exclude files and directories when the name begins with a period, or has either <see cref="F:System.IO.FileAttributes.Hidden" /> or <see cref="F:System.IO.FileAttributes.System" /> is set on <see cref="P:System.IO.FileSystemInfo.Attributes" />.</summary>
    </member>
    <member name="F:Microsoft.Extensions.FileProviders.Physical.ExclusionFilters.System">
      <summary>
            Exclude files and directories when <see cref="F:System.IO.FileAttributes.System" /> is set on <see cref="P:System.IO.FileSystemInfo.Attributes" />.</summary>
    </member>
    <member name="T:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo">
      <summary>
            Represents a directory on a physical file system.</summary>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo.#ctor(System.IO.DirectoryInfo)">
      <summary>
            Initializes an instance of <see cref="T:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo" /> that wraps an instance of <see cref="T:System.IO.DirectoryInfo" />.</summary>
      <param name="info">The directory to represent.</param>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo.CreateReadStream">
      <summary>
            Always throws an exception because read streams are not support on directories.</summary>
      <exception cref="T:System.InvalidOperationException">In all cases.</exception>
      <returns>Never returns.</returns>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo.System#Collections#IEnumerable#GetEnumerator" />
    <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo.Exists">
      <summary>Gets a value that indicates if the resource exists in the underlying storage system.</summary>
      <returns>
        <code data-dev-comment-type="langword">true</code> if the resource exists in the underlying storage system; <code data-dev-comment-type="langword">false</code> otherwise.</returns>
    </member>
    <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo.IsDirectory">
      <summary>
            Gets a value that's always <see langword="true" />.</summary>
      <returns>
        <see langword="true" />.</returns>
    </member>
    <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo.LastModified">
      <summary>
            Gets the time when the directory was last written to.</summary>
    </member>
    <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo.Length">
      <summary>
            Gets a value that's always -1.</summary>
      <returns>-1.</returns>
    </member>
    <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo.Name">
      <summary>Gets the name of the file or directory, excluding the path.</summary>
      <returns>The name of the file or directory.</returns>
    </member>
    <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalDirectoryInfo.PhysicalPath">
      <summary>Gets the full path to the file, including the file name.</summary>
      <returns>The full path to the file, or <code data-dev-comment-type="langword">null</code> if the file is not directly accessible.</returns>
    </member>
    <member name="T:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo">
      <summary>
            Represents a file on a physical file system.</summary>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo.#ctor(System.IO.FileInfo)">
      <summary>
            Initializes an instance of <see cref="T:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo" /> that wraps an instance of <see cref="T:System.IO.FileInfo" />.</summary>
      <param name="info">The <see cref="T:System.IO.FileInfo" />.</param>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo.CreateReadStream">
      <summary>Returns the file contents as a read-only stream.</summary>
      <returns>A read-only stream.</returns>
    </member>
    <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo.Exists">
      <summary>Determines if the resource exists in the underlying system.</summary>
      <returns>
        <code data-dev-comment-type="langword">true</code> if the resource exists in the underlying storage system; <code data-dev-comment-type="langword">false</code> otherwise.</returns>
    </member>
    <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo.IsDirectory">
      <summary>
            Gets a value that's always <see langword="false" />.</summary>
    </member>
    <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo.LastModified">
      <summary>Gets the last time the file was modified.</summary>
      <returns>A datetime offset representing the last time the file was modified.</returns>
    </member>
    <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo.Length">
      <summary>The length of the file in bytes, or -1 for a directory or non-existing files.</summary>
    </member>
    <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo.Name">
      <summary>The name of the file or directory, not including any path.</summary>
    </member>
    <member name="P:Microsoft.Extensions.FileProviders.Physical.PhysicalFileInfo.PhysicalPath">
      <summary>The path to the file, including the file name. Return <code data-dev-comment-type="langword">null</code> if the file is not directly accessible.</summary>
    </member>
    <member name="T:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher">
      <summary>
            Watches a physical file system for changes and triggers events on
            <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> when files are created, change, renamed, or deleted.</summary>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.#ctor(System.String,System.IO.FileSystemWatcher,System.Boolean,Microsoft.Extensions.FileProviders.Physical.ExclusionFilters)">
      <summary>
            Initializes an instance of <see cref="T:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher" /> that watches files in <paramref name="root" />.
            Wraps an instance of <see cref="T:System.IO.FileSystemWatcher" />.</summary>
      <param name="root">Root directory for the watcher.</param>
      <param name="fileSystemWatcher">The wrapped watcher that is watching <paramref name="root" />.</param>
      <param name="pollForChanges">
        <see langword="true" /> for the poller to use polling to trigger instances of
            <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> created by <see cref="M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.CreateFileChangeToken(System.String)" />.</param>
      <param name="filters">Specifies which files or directories are excluded. Notifications of changes to are not raised to these.</param>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.#ctor(System.String,System.IO.FileSystemWatcher,System.Boolean)">
      <summary>
            Initializes an instance of <see cref="T:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher" /> that watches files in <paramref name="root" />.
            Wraps an instance of <see cref="T:System.IO.FileSystemWatcher" />.</summary>
      <param name="root">Root directory for the watcher.</param>
      <param name="fileSystemWatcher">The wrapped watcher that's watching <paramref name="root" />.</param>
      <param name="pollForChanges">
        <see langword="true" /> for the poller to use polling to trigger instances of
            <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> created by <see cref="M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.CreateFileChangeToken(System.String)" />.</param>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.CreateFileChangeToken(System.String)">
      <summary>
            Creates an instance of <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> for all files and directories that match the
            <paramref name="filter" />.</summary>
      <param name="filter">A globbing pattern for files and directories to watch.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> is <see langword="null" />.</exception>
      <returns>A change token for all files that match the filter.</returns>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.Dispose">
      <summary>
            Disposes the provider. Change tokens may not trigger after the provider is disposed.</summary>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.Dispose(System.Boolean)">
      <summary>
            Disposes the provider.</summary>
      <param name="disposing">
        <c>true</c> is invoked from <see cref="M:System.IDisposable.Dispose" />.</param>
    </member>
    <member name="T:Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken">
      <summary>
            A change token that polls for file system changes.</summary>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.#ctor(System.IO.FileInfo)">
      <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken" /> that polls the specified file for changes as
            determined by <see cref="P:System.IO.FileSystemInfo.LastWriteTimeUtc" />.</summary>
      <param name="fileInfo">The <see cref="T:System.IO.FileInfo" /> to poll.</param>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.RegisterChangeCallback(System.Action{System.Object},System.Object)">
      <summary>
            Does not actually register callbacks.</summary>
      <param name="callback">This parameter is ignored.</param>
      <param name="state">This parameter is ignored.</param>
      <returns>A disposable object that no-ops when disposed.</returns>
    </member>
    <member name="P:Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.ActiveChangeCallbacks">
      <summary>
            Gets a value that's always <see langword="false" />.</summary>
      <returns>
        <see langword="true" /> if the token will proactively raise callbacks; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="P:Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.HasChanged">
      <summary>
            Gets a value that indicates whether the file has changed since the change token was created.</summary>
      <returns>
        <see langword="true" /> if a change has occurred; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="T:Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken">
      <summary>
            A polling based <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> for wildcard patterns.</summary>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of <see cref="T:Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken" />.</summary>
      <param name="root">The root of the file system.</param>
      <param name="pattern">The pattern to watch.</param>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken.GetLastWriteUtc(System.String)">
      <summary>
            Gets the last write time of the file at the specified <paramref name="path" />.</summary>
      <param name="path">The root relative path.</param>
      <returns>The <see cref="T:System.DateTime" /> that the file was last modified.</returns>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken.Microsoft#Extensions#Primitives#IChangeToken#RegisterChangeCallback(System.Action{System.Object},System.Object)">
      <summary>Registers for a callback that will be invoked when the entry has changed.
 <see cref="P:Microsoft.Extensions.Primitives.IChangeToken.HasChanged" /> MUST be set before the callback is invoked.</summary>
      <param name="callback">The <see cref="T:System.Action`1" /> to invoke.</param>
      <param name="state">State to be passed into the callback.</param>
      <returns>An <see cref="T:System.IDisposable" /> that is used to unregister the callback.</returns>
    </member>
    <member name="P:Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken.ActiveChangeCallbacks">
      <summary>Indicates if this token will pro-actively raise callbacks. If <code data-dev-comment-type="langword">false</code>, the token consumer must poll <xref data-throw-if-not-resolved="true" uid="Microsoft.Extensions.Primitives.IChangeToken.HasChanged" /> to detect changes.</summary>
      <returns>
        <code data-dev-comment-type="langword">true</code> if the token will proactively raise callbacks; <code data-dev-comment-type="langword">false</code> otherwise.</returns>
    </member>
    <member name="P:Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken.HasChanged">
      <summary>Gets a value that indicates if a change has occurred.</summary>
      <returns>
        <code data-dev-comment-type="langword">true</code> if a change has occurred; <code data-dev-comment-type="langword">false</code> otherwise.</returns>
    </member>
    <member name="T:Microsoft.Extensions.FileProviders.PhysicalFileProvider">
      <summary>
            Looks up files using the on-disk file system.</summary>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.#ctor(System.String,Microsoft.Extensions.FileProviders.Physical.ExclusionFilters)">
      <summary>
            Initializes a new instance of a PhysicalFileProvider at the given root directory.</summary>
      <param name="root">The root directory. This should be an absolute path.</param>
      <param name="filters">Specifies which files or directories are excluded.</param>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.#ctor(System.String)">
      <summary>
            Initializes a new instance of a PhysicalFileProvider at the given root directory.</summary>
      <param name="root">The root directory. This should be an absolute path.</param>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Dispose">
      <summary>
            Disposes the provider. Change tokens may not trigger after the provider is disposed.</summary>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Dispose(System.Boolean)">
      <summary>
            Disposes the provider.</summary>
      <param name="disposing">
        <c>true</c> is invoked from <see cref="M:System.IDisposable.Dispose" />.</param>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetDirectoryContents(System.String)">
      <summary>
            Enumerates a directory at the given path, if any.</summary>
      <param name="subpath">A path under the root directory. Leading slashes are ignored.</param>
      <returns>
            The contents of the directory.</returns>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.GetFileInfo(System.String)">
      <summary>
            Locates a file at the given path by directly mapping path segments to physical directories.</summary>
      <param name="subpath">A path under the root directory.</param>
      <returns>The file information. Caller must check the <see cref="P:Microsoft.Extensions.FileProviders.IFileInfo.Exists" /> property.</returns>
    </member>
    <member name="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)">
      <summary>
        <para>Creates a <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> for the specified <paramref name="filter" />.</para>
        <para>Globbing patterns are interpreted by <see cref="T:Microsoft.Extensions.FileSystemGlobbing.Matcher" />.</para>
      </summary>
      <param name="filter">
            Filter string used to determine what files or folders to monitor. Example: */.cs, .,
            subFolder/*/.cshtml.</param>
      <returns>
            An <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> that is notified when a file matching <paramref name="filter" /> is added,
            modified, or deleted. Returns a <see cref="T:Microsoft.Extensions.FileProviders.NullChangeToken" /> if <paramref name="filter" /> has invalid filter
            characters or if <paramref name="filter" /> is an absolute path or outside the root directory specified in the
            constructor <see cref="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.#ctor(System.String)" />.</returns>
    </member>
    <member name="P:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Root">
      <summary>
            Gets the root directory for this instance.</summary>
    </member>
    <member name="P:Microsoft.Extensions.FileProviders.PhysicalFileProvider.UseActivePolling">
      <summary>
            Gets or sets a value that determines if this instance of <see cref="T:Microsoft.Extensions.FileProviders.PhysicalFileProvider" />
            actively polls for file changes.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:Microsoft.Extensions.Primitives.IChangeToken" /> returned by <see cref="M:Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)" /> actively polls for file changes
            (<see cref="P:Microsoft.Extensions.Primitives.IChangeToken.ActiveChangeCallbacks" /> will be <see langword="true" />) instead of being passive.
            The default value of this property is determined by the value of environment variable named <c>DOTNET_USE_POLLING_FILE_WATCHER</c>.
            When <see langword="true" /> or <c>1</c>, this property defaults to <see langword="true" />; otherwise <see langword="false" />.</returns>
    </member>
    <member name="P:Microsoft.Extensions.FileProviders.PhysicalFileProvider.UsePollingFileWatcher">
      <summary>
            Gets or sets a value that determines if this instance of <see cref="T:Microsoft.Extensions.FileProviders.PhysicalFileProvider" />
            uses polling to determine file changes.</summary>
      <returns>
            The default value of this property is determined by the value of environment variable named <c>DOTNET_USE_POLLING_FILE_WATCHER</c>.
            When <see langword="true" /> or <c>1</c>, this property defaults to <see langword="true" />; otherwise <see langword="false" />.</returns>
    </member>
  </members>
</doc>