<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Numerics</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.BigInteger">
      <summary>Represents an arbitrarily large signed integer.</summary>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using the values in a byte array.</summary>
      <param name="value">An array of byte values in little-endian order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Decimal)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a <see cref="T:System.Decimal" /> value.</summary>
      <param name="value">A decimal number.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a double-precision floating-point value.</summary>
      <param name="value">A double-precision floating-point value.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a 32-bit signed integer value.</summary>
      <param name="value">A 32-bit signed integer.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a 64-bit signed integer value.</summary>
      <param name="value">A 64-bit signed integer.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using the values in a read-only span of bytes, and optionally indicating the signing encoding and the endianness byte order.</summary>
      <param name="value">A read-only span of bytes representing the big integer.</param>
      <param name="isUnsigned">
        <see langword="true" /> to indicate <paramref name="value" /> uses unsigned encoding; otherwise, <see langword="false" /> (the default value).</param>
      <param name="isBigEndian">
        <see langword="true" /> to indicate <paramref name="value" /> is in big-endian byte order; otherwise, <see langword="false" />  (the default value).</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Single)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using a single-precision floating-point value.</summary>
      <param name="value">A single-precision floating-point value.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" />, or <see cref="F:System.Single.PositiveInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt32)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure using an unsigned 32-bit integer value.</summary>
      <param name="value">An unsigned 32-bit integer value.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt64)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.BigInteger" /> structure with an unsigned 64-bit integer value.</summary>
      <param name="value">An unsigned 64-bit integer.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)">
      <summary>Gets the absolute value of a <see cref="T:System.Numerics.BigInteger" /> object.</summary>
      <param name="value">A number.</param>
      <returns>The absolute value of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Adds two <see cref="T:System.Numerics.BigInteger" /> values and returns the result.</summary>
      <param name="left">The first value to add.</param>
      <param name="right">The second value to add.</param>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Clamp(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Clamps a value to an inclusive minimum and maximum value.</summary>
      <param name="value">The value to clamp.</param>
      <param name="min">The inclusive minimum to which <paramref name="value" /> should clamp.</param>
      <param name="max">The inclusive maximum to which <paramref name="value" /> should clamp.</param>
      <returns>The result of clamping <paramref name="value" /> to the inclusive range of <paramref name="min" /> and <paramref name="max" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Compares two <see cref="T:System.Numerics.BigInteger" /> values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>A signed integer that indicates the relative values of <paramref name="left" /> and <paramref name="right" />, as shown in the following table.

 <list type="table"><listheader><term> Value</term><description> Condition</description></listheader><item><term> Less than zero</term><description><paramref name="left" /> is less than <paramref name="right" />.</description></item><item><term> Zero</term><description><paramref name="left" /> equals <paramref name="right" />.</description></item><item><term> Greater than zero</term><description><paramref name="left" /> is greater than <paramref name="right" />.</description></item></list></returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Int64)">
      <summary>Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.</summary>
      <param name="other">The signed 64-bit integer to compare.</param>
      <returns>A signed integer value that indicates the relationship of this instance to <paramref name="other" />, as shown in the following table.

 <list type="table"><listheader><term> Return value</term><description> Description</description></listheader><item><term> Less than zero</term><description> The current instance is less than <paramref name="other" />.</description></item><item><term> Zero</term><description> The current instance equals <paramref name="other" />.</description></item><item><term> Greater than zero</term><description> The current instance is greater than <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)">
      <summary>Compares this instance to a second <see cref="T:System.Numerics.BigInteger" /> and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</summary>
      <param name="other">The object to compare.</param>
      <returns>A signed integer value that indicates the relationship of this instance to <paramref name="other" />, as shown in the following table.

 <list type="table"><listheader><term> Return value</term><description> Description</description></listheader><item><term> Less than zero</term><description> The current instance is less than <paramref name="other" />.</description></item><item><term> Zero</term><description> The current instance equals <paramref name="other" />.</description></item><item><term> Greater than zero</term><description> The current instance is greater than <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Object)">
      <summary>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</summary>
      <param name="obj">The object to compare.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not a <see cref="T:System.Numerics.BigInteger" />.</exception>
      <returns>A signed integer that indicates the relationship of the current instance to the <paramref name="obj" /> parameter, as shown in the following table.

 <list type="table"><listheader><term> Return value</term><description> Description</description></listheader><item><term> Less than zero</term><description> The current instance is less than <paramref name="obj" />.</description></item><item><term> Zero</term><description> The current instance equals <paramref name="obj" />.</description></item><item><term> Greater than zero</term><description> The current instance is greater than <paramref name="obj" />, or the <paramref name="obj" /> parameter is <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.UInt64)">
      <summary>Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.</summary>
      <param name="other">The unsigned 64-bit integer to compare.</param>
      <returns>A signed integer that indicates the relative value of this instance and <paramref name="other" />, as shown in the following table.
          <list type="table"><listheader><term>Return value</term><description>Description</description></listheader><item><term>Less than zero</term><description>The current instance is less than <paramref name="other" />.</description></item><item><term>Zero</term><description>The current instance equals <paramref name="other" />.</description></item><item><term>Greater than zero</term><description>The current instance is greater than <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CopySign(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Copies the sign of a value to the sign of another value.</summary>
      <param name="value">The value whose magnitude is used in the result.</param>
      <param name="sign">The value whose sign is used in the result.</param>
      <returns>A value with the magnitude of <paramref name="value" /> and the sign of <paramref name="sign" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CreateChecked``1(``0)">
      <summary>Creates an instance of the current type from a value, throwing an overflow exception for any values that fall outside the representable range of the current type.</summary>
      <param name="value">The value that's used to create the instance of <typeparamref name="TSelf" />.</param>
      <typeparam name="TOther">The type of <paramref name="value" />.</typeparam>
      <returns>An instance of <typeparamref name="TSelf" /> created from <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CreateSaturating``1(``0)">
      <summary>Creates an instance of the current type from a value, saturating any values that fall outside the representable range of the current type.</summary>
      <param name="value">The value that's used to create the instance of <typeparamref name="TSelf" />.</param>
      <typeparam name="TOther">The type of <paramref name="value" />.</typeparam>
      <returns>An instance of <typeparamref name="TSelf" /> created from <paramref name="value" />, saturating if <paramref name="value" /> falls outside the representable range of <typeparamref name="TSelf" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CreateTruncating``1(``0)">
      <summary>Creates an instance of the current type from a value, truncating any values that fall outside the representable range of the current type.</summary>
      <param name="value">The value that's used to create the instance of <typeparamref name="TSelf" />.</param>
      <typeparam name="TOther">The type of <paramref name="value" />.</typeparam>
      <returns>An instance of <typeparamref name="TSelf" /> created from <paramref name="value" />, truncating if <paramref name="value" /> falls outside the representable range of <typeparamref name="TSelf" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Divides one <see cref="T:System.Numerics.BigInteger" /> value by another and returns the result.</summary>
      <param name="dividend">The value to be divided.</param>
      <param name="divisor">The value to divide by.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> is 0 (zero).</exception>
      <returns>The quotient of the division.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)">
      <summary>Divides one <see cref="T:System.Numerics.BigInteger" /> value by another, returns the result, and returns the remainder in an output parameter.</summary>
      <param name="dividend">The value to be divided.</param>
      <param name="divisor">The value to divide by.</param>
      <param name="remainder">When this method returns, contains a <see cref="T:System.Numerics.BigInteger" /> value that represents the remainder from the division. This parameter is passed uninitialized.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> is 0 (zero).</exception>
      <returns>The quotient of the division.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Computes the quotient and remainder of two values.</summary>
      <param name="left">The value that <paramref name="right" /> divides.</param>
      <param name="right">The value that divides <paramref name="left" />.</param>
      <returns>The quotient and remainder of <paramref name="left" /> divided-by <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Int64)">
      <summary>Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.</summary>
      <param name="other">The signed 64-bit integer value to compare.</param>
      <returns>
        <see langword="true" /> if the signed 64-bit integer and the current instance have the same value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether the current instance and a specified <see cref="T:System.Numerics.BigInteger" /> object have the same value.</summary>
      <param name="other">The object to compare.</param>
      <returns>
        <see langword="true" /> if this <see cref="T:System.Numerics.BigInteger" /> object and <paramref name="other" /> have the same value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance and a specified object have the same value.</summary>
      <param name="obj">The object to compare.</param>
      <returns>
        <see langword="true" /> if the <paramref name="obj" /> argument is a <see cref="T:System.Numerics.BigInteger" /> object, and its value is equal to the value of the current <see cref="T:System.Numerics.BigInteger" /> instance; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.UInt64)">
      <summary>Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.</summary>
      <param name="other">The unsigned 64-bit integer to compare.</param>
      <returns>
        <see langword="true" /> if the current instance and the unsigned 64-bit integer have the same value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GetBitLength">
      <summary>Gets the number of bits required for shortest two's complement representation of the current instance without the sign bit.</summary>
      <returns>The minimum non-negative number of bits in two's complement notation without the sign bit.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GetByteCount(System.Boolean)">
      <summary>Gets the number of bytes that will be output by <see cref="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)" /> and <see cref="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)" />.</summary>
      <param name="isUnsigned">
        <see langword="true" /> to use unsigned encoding; otherwise, <see langword="false" />.</param>
      <returns>The number of bytes.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Numerics.BigInteger" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Finds the greatest common divisor of two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <param name="left">The first value.</param>
      <param name="right">The second value.</param>
      <returns>The greatest common divisor of <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.IsEvenInteger(System.Numerics.BigInteger)">
      <summary>Determines if a value represents an even integral number.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is an even integer; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.IsNegative(System.Numerics.BigInteger)">
      <summary>Determines if a value is negative.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is negative; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.IsOddInteger(System.Numerics.BigInteger)">
      <summary>Determines if a value represents an odd integral number.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is an odd integer; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.IsPositive(System.Numerics.BigInteger)">
      <summary>Determines if a value is positive.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is positive; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.IsPow2(System.Numerics.BigInteger)">
      <summary>Determines if a value is a power of two.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a power of two; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.LeadingZeroCount(System.Numerics.BigInteger)">
      <summary>Computes the number of leading zeros in a value.</summary>
      <param name="value">The value whose leading zeroes are to be counted.</param>
      <returns>The number of leading zeros in <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)">
      <summary>Returns the logarithm of a specified number in a specified base.</summary>
      <param name="value">A number whose logarithm is to be found.</param>
      <param name="baseValue">The base of the logarithm.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</exception>
      <returns>The base <paramref name="baseValue" /> logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)">
      <summary>Returns the natural (base <see langword="e" />) logarithm of a specified number.</summary>
      <param name="value">The number whose logarithm is to be found.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The natural log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</exception>
      <returns>The natural (base <see langword="e" />) logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)">
      <summary>Returns the base 10 logarithm of a specified number.</summary>
      <param name="value">A number whose logarithm is to be found.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The base 10 log of <paramref name="value" /> is out of range of the <see cref="T:System.Double" /> data type.</exception>
      <returns>The base 10 logarithm of <paramref name="value" />, as shown in the table in the Remarks section.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Log2(System.Numerics.BigInteger)">
      <summary>Computes the log2 of a value.</summary>
      <param name="value">The value whose log2 is to be computed.</param>
      <returns>The log2 of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns the larger of two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>The <paramref name="left" /> or <paramref name="right" /> parameter, whichever is larger.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.MaxMagnitude(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Compares two values to compute which is greater.</summary>
      <param name="x">The value to compare with <paramref name="y" />.</param>
      <param name="y">The value to compare with <paramref name="x" />.</param>
      <returns>
        <paramref name="x" /> if it is greater than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns the smaller of two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>The <paramref name="left" /> or <paramref name="right" /> parameter, whichever is smaller.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.MinMagnitude(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Compares two values to compute which is lesser.</summary>
      <param name="x">The value to compare with <paramref name="y" />.</param>
      <param name="y">The value to compare with <paramref name="x" />.</param>
      <returns>
        <paramref name="x" /> if it is less than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Performs modulus division on a number raised to the power of another number.</summary>
      <param name="value">The number to raise to the <paramref name="exponent" /> power.</param>
      <param name="exponent">The exponent to raise <paramref name="value" /> by.</param>
      <param name="modulus">The number by which to divide <paramref name="value" /> raised to the <paramref name="exponent" /> power.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="modulus" /> is zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exponent" /> is negative.</exception>
      <returns>The remainder after dividing <paramref name="value" />exponent by <paramref name="modulus" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns the product of two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <param name="left">The first number to multiply.</param>
      <param name="right">The second number to multiply.</param>
      <returns>The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)">
      <summary>Negates a specified <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="value">The value to negate.</param>
      <returns>The result of the <paramref name="value" /> parameter multiplied by negative one (-1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Adds the values of two specified <see cref="T:System.Numerics.BigInteger" /> objects.</summary>
      <param name="left">The first value to add.</param>
      <param name="right">The second value to add.</param>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Performs a bitwise <see langword="And" /> operation on two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <param name="left">The first value.</param>
      <param name="right">The second value.</param>
      <returns>The result of the bitwise <see langword="And" /> operation.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Performs a bitwise <see langword="Or" /> operation on two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <param name="left">The first value.</param>
      <param name="right">The second value.</param>
      <returns>The result of the bitwise <see langword="Or" /> operation.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)">
      <summary>Decrements a <see cref="T:System.Numerics.BigInteger" /> value by 1.</summary>
      <param name="value">The value to decrement.</param>
      <returns>The value of the <paramref name="value" /> parameter decremented by 1.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Divides a specified <see cref="T:System.Numerics.BigInteger" /> value by another specified <see cref="T:System.Numerics.BigInteger" /> value by using integer division.</summary>
      <param name="dividend">The value to be divided.</param>
      <param name="divisor">The value to divide by.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> is 0 (zero).</exception>
      <returns>The integral result of the division.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a signed long integer value and a <see cref="T:System.Numerics.BigInteger" /> value are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a signed long integer value are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether the values of two <see cref="T:System.Numerics.BigInteger" /> objects are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and an unsigned long integer value are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether an unsigned long integer value and a <see cref="T:System.Numerics.BigInteger" /> value are equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Performs a bitwise exclusive <see langword="Or" /> (<see langword="XOr" />) operation on two <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <param name="left">The first value.</param>
      <param name="right">The second value.</param>
      <returns>The result of the bitwise <see langword="Or" /> operation.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> object to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger">
      <summary>Defines an explicit conversion of a <see cref="T:System.Double" /> value to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Half)~System.Numerics.BigInteger">
      <summary>Explicitly converts a <see cref="T:System.Half" /> value to a big integer.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to a big integer.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned byte value.</summary>
      <param name="value">The value to convert to a <see cref="T:System.Byte" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Byte.MinValue">Byte.MinValue</see> or greater than <see cref="F:System.Byte.MaxValue">Byte.MaxValue</see>.</exception>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Char">
      <summary>Explicitly converts a big integer to a <see cref="T:System.Char" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to <see cref="T:System.Char" /> value.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a <see cref="T:System.Decimal" /> value.</summary>
      <param name="value">The value to convert to a <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Decimal.MinValue">Decimal.MinValue</see> or greater than <see cref="F:System.Decimal.MaxValue">Decimal.MaxValue</see>.</exception>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a <see cref="T:System.Double" /> value.</summary>
      <param name="value">The value to convert to a <see cref="T:System.Double" />.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Half">
      <summary>Explicitly converts a big integer to a <see cref="T:System.Half" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to <see cref="T:System.Half" /> value.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int128">
      <summary>Explicitly converts a big integer to a <see cref="T:System.Int128" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to <see cref="T:System.Int128" /> value.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 16-bit signed integer value.</summary>
      <param name="value">The value to convert to a 16-bit signed integer.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int16.MinValue">Int16.MinValue</see> or is greater than <see cref="F:System.Int16.MaxValue">Int16.MaxValue</see>.</exception>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 32-bit signed integer value.</summary>
      <param name="value">The value to convert to a 32-bit signed integer.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int32.MinValue">Int32.MinValue</see> or is greater than <see cref="F:System.Int32.MaxValue">Int32.MaxValue</see>.</exception>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a 64-bit signed integer value.</summary>
      <param name="value">The value to convert to a 64-bit signed integer.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.Int64.MinValue">Int64.MinValue</see> or is greater than <see cref="F:System.Int64.MaxValue">Int64.MaxValue</see>.</exception>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.IntPtr">
      <summary>Explicitly converts a big integer to a <see cref="T:System.IntPtr" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to <see cref="T:System.IntPtr" /> value.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a signed 8-bit value.

 This API is not CLS-compliant. The compliant alternative is <see cref="T:System.Int16" />.</summary>
      <param name="value">The value to convert to a signed 8-bit value.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.SByte.MinValue">SByte.MinValue</see> or is greater than <see cref="F:System.SByte.MaxValue">SByte.MaxValue</see>.</exception>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to a single-precision floating-point value.</summary>
      <param name="value">The value to convert to a single-precision floating-point value.</param>
      <returns>An object that contains the closest possible representation of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt128">
      <summary>Explicitly converts a big integer to a <see cref="T:System.UInt128" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to <see cref="T:System.UInt128" /> value.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 16-bit integer value.

 This API is not CLS-compliant. The compliant alternative is <see cref="T:System.Int32" />.</summary>
      <param name="value">The value to convert to an unsigned 16-bit integer.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.UInt16.MinValue">UInt16.MinValue</see> or is greater than <see cref="F:System.UInt16.MaxValue">UInt16.MaxValue</see>.</exception>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 32-bit integer value.

 This API is not CLS-compliant. The compliant alternative is <see cref="T:System.Int64" />.</summary>
      <param name="value">The value to convert to an unsigned 32-bit integer.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.UInt32.MinValue">UInt32.MinValue</see> or is greater than <see cref="F:System.UInt32.MaxValue">UInt32.MaxValue</see>.</exception>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> object to an unsigned 64-bit integer value.

 This API is not CLS-compliant. The compliant alternative is <see cref="T:System.Double" />.</summary>
      <param name="value">The value to convert to an unsigned 64-bit integer.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is less than <see cref="F:System.UInt64.MinValue">UInt64.MinValue</see> or is greater than <see cref="F:System.UInt64.MaxValue">UInt64.MaxValue</see>.</exception>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UIntPtr">
      <summary>Explicitly converts a big integer to a <see cref="T:System.UIntPtr" /> value.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to <see cref="T:System.UIntPtr" /> value.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.Complex)~System.Numerics.BigInteger">
      <summary>Explicitly converts a <see cref="T:System.Numerics.Complex" /> value to a big integer.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to a big integer.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger">
      <summary>Defines an explicit conversion of a <see cref="T:System.Single" /> value to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> is <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.</exception>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit signed integer is greater than a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> is greater than a 64-bit signed integer value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than another <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than a 64-bit unsigned integer.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than a 64-bit unsigned integer.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to a 64-bit signed integer value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to another <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is greater than or equal to a 64-bit unsigned integer value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of an unsigned byte to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Char)~System.Numerics.BigInteger">
      <summary>Implicitly converts a <see cref="T:System.Char" /> value to a big integer.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to a big integer.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int128)~System.Numerics.BigInteger">
      <summary>Implicitly converts a <see cref="T:System.Int128" /> value to a big integer.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to a big integer.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of a signed 16-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of a signed 32-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of a signed 64-bit integer to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.IntPtr)~System.Numerics.BigInteger">
      <summary>Implicitly converts a <see cref="T:System.IntPtr" /> value to a big integer.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to a big integer.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of an 8-bit signed integer to a <see cref="T:System.Numerics.BigInteger" /> value.

 This API is not CLS-compliant. The compliant alternative is <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />.</summary>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt128)~System.Numerics.BigInteger">
      <summary>Implicitly converts a <see cref="T:System.UInt128" /> value to a big integer.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to a big integer.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of a 16-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.

 This API is not CLS-compliant. The compliant alternative is <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />.</summary>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of a 32-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.

 This API is not CLS-compliant. The compliant alternative is <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />.</summary>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger">
      <summary>Defines an implicit conversion of a 64-bit unsigned integer to a <see cref="T:System.Numerics.BigInteger" /> value.

 This API is not CLS-compliant. The compliant alternative is <see cref="T:System.Double" />.</summary>
      <param name="value">The value to convert to a <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UIntPtr)~System.Numerics.BigInteger">
      <summary>Implicitly converts a <see cref="T:System.UIntPtr" /> value to a big integer.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to a big integer.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)">
      <summary>Increments a <see cref="T:System.Numerics.BigInteger" /> value by 1.</summary>
      <param name="value">The value to increment.</param>
      <returns>The value of the <paramref name="value" /> parameter incremented by 1.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit signed integer and a <see cref="T:System.Numerics.BigInteger" /> value are not equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a 64-bit signed integer are not equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether two <see cref="T:System.Numerics.BigInteger" /> objects have different values.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value and a 64-bit unsigned integer are not equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit unsigned integer and a <see cref="T:System.Numerics.BigInteger" /> value are not equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)">
      <summary>Shifts a <see cref="T:System.Numerics.BigInteger" /> value a specified number of bits to the left.</summary>
      <param name="value">The value whose bits are to be shifted.</param>
      <param name="shift">The number of bits to shift <paramref name="value" /> to the left.</param>
      <returns>A value that has been shifted to the left by the specified number of bits.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit signed integer is less than a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than a 64-bit signed integer.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than another <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than a 64-bit unsigned integer.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit unsigned integer is less than a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit signed integer is less than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to a 64-bit signed integer.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to another <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Numerics.BigInteger" /> value is less than or equal to a 64-bit unsigned integer.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary>Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Returns the remainder that results from division with two specified <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <param name="dividend">The value to be divided.</param>
      <param name="divisor">The value to divide by.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> is 0 (zero).</exception>
      <returns>The remainder that results from the division.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Multiplies two specified <see cref="T:System.Numerics.BigInteger" /> values.</summary>
      <param name="left">The first value to multiply.</param>
      <param name="right">The second value to multiply.</param>
      <returns>The product of <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)">
      <summary>Returns the bitwise one's complement of a <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="value">An integer value.</param>
      <returns>The bitwise one's complement of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)">
      <summary>Shifts a <see cref="T:System.Numerics.BigInteger" /> value a specified number of bits to the right.</summary>
      <param name="value">The value whose bits are to be shifted.</param>
      <param name="shift">The number of bits to shift <paramref name="value" /> to the right.</param>
      <returns>A value that has been shifted to the right by the specified number of bits.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Subtracts a <see cref="T:System.Numerics.BigInteger" /> value from another <see cref="T:System.Numerics.BigInteger" /> value.</summary>
      <param name="left">The value to subtract from (the minuend).</param>
      <param name="right">The value to subtract (the subtrahend).</param>
      <returns>The result of subtracting <paramref name="right" /> from <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)">
      <summary>Negates a specified BigInteger value.</summary>
      <param name="value">The value to negate.</param>
      <returns>The result of the <paramref name="value" /> parameter multiplied by negative one (-1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)">
      <summary>Returns the value of the <see cref="T:System.Numerics.BigInteger" /> operand. (The sign of the operand is unchanged.)</summary>
      <param name="value">An integer value.</param>
      <returns>The value of the <paramref name="value" /> operand.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnsignedRightShift(System.Numerics.BigInteger,System.Int32)">
      <summary>Shifts a value right by a given amount.</summary>
      <param name="value">The value that is shifted right by <paramref name="shiftAmount" />.</param>
      <param name="shiftAmount">The amount by which <paramref name="value" /> is shifted right.</param>
      <returns>The result of shifting <paramref name="value" /> right by <paramref name="shiftAmount" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the representation of a number, contained in the specified read-only span of characters, in a specified style to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</summary>
      <param name="value">A read-only span of characters that contains the number to convert.</param>
      <param name="style">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="value" />.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.

 -or-

 <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not comply with the input pattern specified by <paramref name="style" />.</exception>
      <returns>A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Parses a span of characters into a value.</summary>
      <param name="s">The span of characters to parse.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
      <returns>The result of parsing <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</summary>
      <param name="value">A string that contains a number to convert.</param>
      <param name="style">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="value" />.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.

 -or-

 <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not comply with the input pattern specified by <paramref name="style" />.</exception>
      <returns>A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converts the string representation of a number in a specified style to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</summary>
      <param name="value">A string that contains a number to convert.</param>
      <param name="style">A bitwise combination of the enumeration values that specify the permitted format of <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.

 -or-

 <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> does not comply with the input pattern specified by <see cref="T:System.Globalization.NumberStyles" />.</exception>
      <returns>A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)">
      <summary>Converts the string representation of a number in a specified culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</summary>
      <param name="value">A string that contains a number to convert.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not in the correct format.</exception>
      <returns>A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String)">
      <summary>Converts the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent.</summary>
      <param name="value">A string that contains the number to convert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> is not in the correct format.</exception>
      <returns>A value that is equivalent to the number specified in the <paramref name="value" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.PopCount(System.Numerics.BigInteger)">
      <summary>Computes the number of bits that are set in a value.</summary>
      <param name="value">The value whose set bits are to be counted.</param>
      <returns>The number of set bits in <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)">
      <summary>Raises a <see cref="T:System.Numerics.BigInteger" /> value to the power of a specified value.</summary>
      <param name="value">The number to raise to the <paramref name="exponent" /> power.</param>
      <param name="exponent">The exponent to raise <paramref name="value" /> by.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exponent" /> is negative.</exception>
      <returns>The result of raising <paramref name="value" /> to the <paramref name="exponent" /> power.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Performs integer division on two <see cref="T:System.Numerics.BigInteger" /> values and returns the remainder.</summary>
      <param name="dividend">The value to be divided.</param>
      <param name="divisor">The value to divide by.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> is 0 (zero).</exception>
      <returns>The remainder after dividing <paramref name="dividend" /> by <paramref name="divisor" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.RotateLeft(System.Numerics.BigInteger,System.Int32)">
      <summary>Rotates a value left by a given amount.</summary>
      <param name="value">The value that's rotated left by <paramref name="rotateAmount" />.</param>
      <param name="rotateAmount">The amount by which <paramref name="value" /> is rotated left.</param>
      <returns>The result of rotating <paramref name="value" /> left by <paramref name="rotateAmount" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.RotateRight(System.Numerics.BigInteger,System.Int32)">
      <summary>Rotates a value right by a given amount.</summary>
      <param name="value">The value that's rotated right by <paramref name="rotateAmount" />.</param>
      <param name="rotateAmount">The amount by which <paramref name="value" /> is rotated right.</param>
      <returns>The result of rotating <paramref name="value" /> right by <paramref name="rotateAmount" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Subtracts one <see cref="T:System.Numerics.BigInteger" /> value from another and returns the result.</summary>
      <param name="left">The value to subtract from (the minuend).</param>
      <param name="right">The value to subtract (the subtrahend).</param>
      <returns>The result of subtracting <paramref name="right" /> from <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#IBinaryInteger{System#Numerics#BigInteger}#GetByteCount">
      <summary>Gets the number of bytes that will be written as part of <see cref="M:System.Numerics.IBinaryInteger`1.TryWriteLittleEndian(System.Span{System.Byte},System.Int32@)" />.</summary>
      <returns>The number of bytes that will be written as part of <see cref="M:System.Numerics.IBinaryInteger`1.TryWriteLittleEndian(System.Span{System.Byte},System.Int32@)" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#IBinaryInteger&lt;System#Numerics#BigInteger&gt;#GetShortestBitLength">
      <summary>Gets the length, in bits, of the shortest two's complement representation of the current value.</summary>
      <returns>The length, in bits, of the shortest two's complement representation of the current value.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#IBinaryInteger{System#Numerics#BigInteger}#TryReadBigEndian(System.ReadOnlySpan{System.Byte},System.Boolean,System.Numerics.BigInteger@)">
      <param name="source" />
      <param name="isUnsigned" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#IBinaryInteger{System#Numerics#BigInteger}#TryReadLittleEndian(System.ReadOnlySpan{System.Byte},System.Boolean,System.Numerics.BigInteger@)">
      <param name="source" />
      <param name="isUnsigned" />
      <param name="value" />
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#IBinaryInteger&lt;System#Numerics#BigInteger&gt;#TryWriteBigEndian(System.Span{System.Byte},System.Int32@)">
      <summary>Tries to write the current value, in big-endian format, to a given span.</summary>
      <param name="destination">The span to which the current value should be written.</param>
      <param name="bytesWritten">When this method returns, contains the number of bytes written to <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the value was succesfully written to <paramref name="destination" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#IBinaryInteger&lt;System#Numerics#BigInteger&gt;#TryWriteLittleEndian(System.Span{System.Byte},System.Int32@)">
      <summary>Tries to write the current value, in little-endian format, to a given span.</summary>
      <param name="destination">The span to which the current value should be written.</param>
      <param name="bytesWritten">When this method returns, contains the number of bytes written to <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the value was succesfully written to <paramref name="destination" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumber{System#Numerics#BigInteger}#MaxNumber(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Compares two values to compute which is greater and returns the other value if one input is <c>NaN</c>.</summary>
      <param name="x">The value to compare with <paramref name="y" />.</param>
      <param name="y">The value to compare with <paramref name="x" />.</param>
      <returns>
        <paramref name="x" /> if it is greater than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumber{System#Numerics#BigInteger}#MinNumber(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Compares two values to compute which is lesser and returns the other value if one input is <c>NaN</c>.</summary>
      <param name="x">The value to compare with <paramref name="y" />.</param>
      <param name="y">The value to compare with <paramref name="x" />.</param>
      <returns>
        <paramref name="x" /> if it is less than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumber{System#Numerics#BigInteger}#Sign(System.Numerics.BigInteger)">
      <summary>Computes the sign of a value.</summary>
      <param name="value">The value whose sign is to be computed.</param>
      <returns>A positive value if <paramref name="value" /> is positive, <see cref="P:System.Numerics.INumberBase`1.Zero" /> if <paramref name="value" /> is zero, and a negative value if <paramref name="value" /> is negative.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#IsCanonical(System.Numerics.BigInteger)">
      <summary>Determines if a value is in its canonical representation.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is in its canonical representation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#IsComplexNumber(System.Numerics.BigInteger)">
      <summary>Determines if a value represents a complex number.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a complex number; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#IsFinite(System.Numerics.BigInteger)">
      <summary>Determines if a value is finite.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is finite; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#IsImaginaryNumber(System.Numerics.BigInteger)">
      <summary>Determines if a value represents a pure imaginary number.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a pure imaginary number; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#IsInfinity(System.Numerics.BigInteger)">
      <summary>Determines if a value is infinite.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is infinite; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#IsInteger(System.Numerics.BigInteger)">
      <summary>Determines if a value represents an integral number.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is an integer; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#IsNaN(System.Numerics.BigInteger)">
      <summary>Determines if a value is NaN.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is NaN; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#IsNegativeInfinity(System.Numerics.BigInteger)">
      <summary>Determines if a value is negative infinity.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is negative infinity; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#IsNormal(System.Numerics.BigInteger)">
      <summary>Determines if a value is normal.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is normal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#IsPositiveInfinity(System.Numerics.BigInteger)">
      <summary>Determines if a value is positive infinity.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is positive infinity; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#IsRealNumber(System.Numerics.BigInteger)">
      <summary>Determines if a value represents a real number.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a real number; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#IsSubnormal(System.Numerics.BigInteger)">
      <summary>Determines if a value is subnormal.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is subnormal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#IsZero(System.Numerics.BigInteger)">
      <summary>Determines if a value is zero.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#MaxMagnitudeNumber(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Compares two values to compute which has the greater magnitude and returns the other value if one input is <c>NaN</c>.</summary>
      <param name="x">The value to compare with <paramref name="y" />.</param>
      <param name="y">The value to compare with <paramref name="x" />.</param>
      <returns>
        <paramref name="x" /> if it is greater than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#MinMagnitudeNumber(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Compares two values to compute which has the lesser magnitude and returns the other value if one input is <c>NaN</c>.</summary>
      <param name="x">The value to compare with <paramref name="y" />.</param>
      <param name="y">The value to compare with <paramref name="x" />.</param>
      <returns>
        <paramref name="x" /> if it is less than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#MultiplyAddEstimate(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Computes an estimate of (<paramref name="left" /> * <paramref name="right" />) + <paramref name="addend" />.</summary>
      <param name="left">The value to be multiplied with <paramref name="right" />.</param>
      <param name="right">The value to be multiplied with <paramref name="left" />.</param>
      <param name="addend">The value to be added to the result of <paramref name="left" /> multiplied by <paramref name="right" />.</param>
      <returns>An estimate of (<paramref name="left" /> * <paramref name="right" />) + <paramref name="addend" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#TryConvertFromChecked``1(``0,System.Numerics.BigInteger@)">
      <param name="value" />
      <param name="result" />
      <typeparam name="TOther" />
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#TryConvertFromSaturating``1(``0,System.Numerics.BigInteger@)">
      <param name="value" />
      <param name="result" />
      <typeparam name="TOther" />
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#TryConvertFromTruncating``1(``0,System.Numerics.BigInteger@)">
      <param name="value" />
      <param name="result" />
      <typeparam name="TOther" />
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#TryConvertToChecked``1(System.Numerics.BigInteger,``0@)">
      <summary>Tries to convert an instance of the the current type to another type, throwing an overflow exception for any values that fall outside the representable range of the current type.</summary>
      <param name="value">The value that is used to create the instance of <typeparamref name="TOther" />.</param>
      <param name="result">When this method returns, contains an instance of <typeparamref name="TOther" /> converted from <paramref name="value" />.</param>
      <typeparam name="TOther">The type to which <paramref name="value" /> should be converted.</typeparam>
      <returns>
        <see langword="false" /> if <typeparamref name="TOther" /> is not supported; otherwise, <see langword="true" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#TryConvertToSaturating``1(System.Numerics.BigInteger,``0@)">
      <summary>Tries to convert an instance of the the current type to another type, saturating any values that fall outside the representable range of the current type.</summary>
      <param name="value">The value that is used to create the instance of <typeparamref name="TOther" />.</param>
      <param name="result">When this method returns, contains an instance of <typeparamref name="TOther" /> converted from <paramref name="value" />.</param>
      <typeparam name="TOther">The type to which <paramref name="value" /> should be converted.</typeparam>
      <returns>
        <see langword="false" /> if <typeparamref name="TOther" /> is not supported; otherwise, <see langword="true" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#TryConvertToTruncating``1(System.Numerics.BigInteger,``0@)">
      <summary>Tries to convert an instance of the the current type to another type, truncating any values that fall outside the representable range of the current type.</summary>
      <param name="value">The value that is used to create the instance of <typeparamref name="TOther" />.</param>
      <param name="result">When this method returns, contains an instance of <typeparamref name="TOther" /> converted from <paramref name="value" />.</param>
      <typeparam name="TOther">The type to which <paramref name="value" /> should be converted.</typeparam>
      <returns>
        <see langword="false" /> if <typeparamref name="TOther" /> is not supported; otherwise, <see langword="true" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToByteArray">
      <summary>Converts a <see cref="T:System.Numerics.BigInteger" /> value to a byte array.</summary>
      <returns>The value of the current <see cref="T:System.Numerics.BigInteger" /> object converted to an array of bytes.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)">
      <summary>Returns the value of this <see cref="T:System.Numerics.BigInteger" /> as a byte array using the fewest number of bytes possible. If the value is zero, returns an array of one byte whose element is 0x00.</summary>
      <param name="isUnsigned">
        <see langword="true" /> to use unsigned encoding; otherwise, <see langword="false" />.</param>
      <param name="isBigEndian">
        <see langword="true" /> to write the bytes in a big-endian byte order; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.OverflowException">If <paramref name="isUnsigned" /> is <see langword="true" /> and <see cref="P:System.Numerics.BigInteger.Sign" /> is negative.</exception>
      <returns>The value of the current <see cref="T:System.Numerics.BigInteger" /> object converted to an array of bytes.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString">
      <summary>Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation.</summary>
      <returns>The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.IFormatProvider)">
      <summary>Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified culture-specific formatting information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value in the format specified by the <paramref name="provider" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified format and culture-specific format information.</summary>
      <param name="format">A standard or custom numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is not a valid format string.</exception>
      <returns>The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value as specified by the <paramref name="format" /> and <paramref name="provider" /> parameters.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String)">
      <summary>Converts the numeric value of the current <see cref="T:System.Numerics.BigInteger" /> object to its equivalent string representation by using the specified format.</summary>
      <param name="format">A standard or custom numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is not a valid format string.</exception>
      <returns>The string representation of the current <see cref="T:System.Numerics.BigInteger" /> value in the format specified by the <paramref name="format" /> parameter.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TrailingZeroCount(System.Numerics.BigInteger)">
      <summary>Computes the number of trailing zeros in a value.</summary>
      <param name="value">The value whose trailing zeroes are to be counted.</param>
      <returns>The number of trailing zeros in <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Formats this big integer instance into a span of characters.</summary>
      <param name="destination">The span of characters into which this instance will be written.</param>
      <param name="charsWritten">When the method returns, contains the length of the span in number of characters.</param>
      <param name="format">A read-only span of characters that specifies the format for the formatting operation.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>
        <see langword="true" /> if the formatting operation succeeds; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)">
      <summary>Tries to convert the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="value">The representation of a number as a read-only span of characters.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="value" />.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <paramref name="value" />, or <see cref="P:System.Numerics.BigInteger.Zero" /> if the conversion failed. The conversion fails if the <paramref name="value" /> parameter is an empty character span or is not in a format that is compliant with <paramref name="style" />. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.

 -or-

 <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</exception>
      <returns>
        <see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Numerics.BigInteger@)">
      <summary>Tries to parse a span of characters into a value.</summary>
      <param name="s">The span of characters to parse.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the result of successfully parsing <paramref name="s" />, or an undefined value on failure.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was successfully parsed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Numerics.BigInteger@)">
      <summary>Tries to convert the representation of a number contained in the specified read-only character span, to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="value">The representation of a number as a read-only span of characters.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <paramref name="value" />, or zero (0) if the conversion fails. The conversion fails if the <paramref name="value" /> parameter is an empty character span or is not of the correct format. This parameter is passed uninitialized.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)">
      <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="value">The string representation of a number. The string is interpreted using the style specified by <paramref name="style" />.</param>
      <param name="style">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="value" />. A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">An object that supplies culture-specific formatting information about <paramref name="value" />.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <paramref name="value" />, or <see cref="P:System.Numerics.BigInteger.Zero" /> if the conversion failed. The conversion fails if the <paramref name="value" /> parameter is <see langword="null" /> or is not in a format that is compliant with <paramref name="style" />. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.

 -or-

 <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> or <see cref="F:System.Globalization.NumberStyles.HexNumber" /> flag along with another value.</exception>
      <returns>
        <see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.IFormatProvider,System.Numerics.BigInteger@)">
      <summary>Tries to parse a string into a value.</summary>
      <param name="s">The string to parse.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the result of successfully parsing <paramref name="s" /> or an undefined value on failure.</param>
      <returns>
        <see langword="true" /> if  <paramref name="s" /> was successfully parsed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)">
      <summary>Tries to convert the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
      <param name="value">The string representation of a number.</param>
      <param name="result">When this method returns, contains the <see cref="T:System.Numerics.BigInteger" /> equivalent to the number that is contained in <paramref name="value" />, or zero (0) if the conversion fails. The conversion fails if the <paramref name="value" /> parameter is <see langword="null" /> or is not of the correct format. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if <paramref name="value" /> was converted successfully; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)">
      <summary>Copies the value of this <see cref="T:System.Numerics.BigInteger" /> as little-endian twos-complement bytes, using the fewest number of bytes possible. If the value is zero, outputs one byte whose element is 0x00.</summary>
      <param name="destination">The destination span to which the resulting bytes should be written.</param>
      <param name="bytesWritten">The number of bytes written to <paramref name="destination" />.</param>
      <param name="isUnsigned">
        <see langword="true" /> to use unsigned encoding; otherwise, <see langword="false" />.</param>
      <param name="isBigEndian">
        <see langword="true" /> to write the bytes in a big-endian byte order; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="isUnsigned" /> is <see langword="true" /> and <see cref="P:System.Numerics.BigInteger.Sign" /> is negative.</exception>
      <returns>
        <see langword="true" /> if the bytes fit in <paramref name="destination" />; <see langword="false" /> if not all bytes could be written due to lack of space.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsEven">
      <summary>Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is an even number.</summary>
      <returns>
        <see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is an even number; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsOne">
      <summary>Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.One" />.</summary>
      <returns>
        <see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.One" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsPowerOfTwo">
      <summary>Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is a power of two.</summary>
      <returns>
        <see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is a power of two; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsZero">
      <summary>Indicates whether the value of the current <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.Zero" />.</summary>
      <returns>
        <see langword="true" /> if the value of the <see cref="T:System.Numerics.BigInteger" /> object is <see cref="P:System.Numerics.BigInteger.Zero" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.MinusOne">
      <summary>Gets a value that represents the number negative one (-1).</summary>
      <returns>An integer whose value is negative one (-1).</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.One">
      <summary>Gets a value that represents the number one (1).</summary>
      <returns>An object whose value is one (1).</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.Sign">
      <summary>Gets a number that indicates the sign (negative, positive, or zero) of the current <see cref="T:System.Numerics.BigInteger" /> object.</summary>
      <returns>A number that indicates the sign of the <see cref="T:System.Numerics.BigInteger" /> object, as shown in the following table.

 <list type="table"><listheader><term> Number</term><description> Description</description></listheader><item><term> -1</term><description> The value of this object is negative.</description></item><item><term> 0</term><description> The value of this object is 0 (zero).</description></item><item><term> 1</term><description> The value of this object is positive.</description></item></list></returns>
    </member>
    <member name="P:System.Numerics.BigInteger.System#Numerics#IAdditiveIdentity{System#Numerics#BigInteger@System#Numerics#BigInteger}#AdditiveIdentity">
      <summary>Gets the additive identity of the current type.</summary>
    </member>
    <member name="P:System.Numerics.BigInteger.System#Numerics#IBinaryNumber{System#Numerics#BigInteger}#AllBitsSet">
      <summary>Gets an instance of the binary type in which all bits are set.</summary>
    </member>
    <member name="P:System.Numerics.BigInteger.System#Numerics#IMultiplicativeIdentity{System#Numerics#BigInteger@System#Numerics#BigInteger}#MultiplicativeIdentity">
      <summary>Gets the multiplicative identity of the current type.</summary>
    </member>
    <member name="P:System.Numerics.BigInteger.System#Numerics#INumberBase{System#Numerics#BigInteger}#Radix">
      <summary>Gets the radix, or base, for the type.</summary>
    </member>
    <member name="P:System.Numerics.BigInteger.System#Numerics#ISignedNumber{System#Numerics#BigInteger}#NegativeOne">
      <summary>Gets the value <c>-1</c> for the type.</summary>
    </member>
    <member name="P:System.Numerics.BigInteger.Zero">
      <summary>Gets a value that represents the number 0 (zero).</summary>
      <returns>An integer whose value is 0 (zero).</returns>
    </member>
    <member name="T:System.Numerics.Complex">
      <summary>Represents a complex number.</summary>
    </member>
    <member name="F:System.Numerics.Complex.ImaginaryOne">
      <summary>Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to zero and an imaginary number equal to one.</summary>
    </member>
    <member name="F:System.Numerics.Complex.Infinity">
      <summary>Represents infinity as a complex number.</summary>
    </member>
    <member name="F:System.Numerics.Complex.NaN">
      <summary>Represents a complex instance that is not a number (NaN).</summary>
    </member>
    <member name="F:System.Numerics.Complex.One">
      <summary>Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to one and an imaginary number equal to zero.</summary>
    </member>
    <member name="F:System.Numerics.Complex.Zero">
      <summary>Returns a new <see cref="T:System.Numerics.Complex" /> instance with a real number equal to zero and an imaginary number equal to zero.</summary>
    </member>
    <member name="M:System.Numerics.Complex.#ctor(System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Numerics.Complex" /> structure using the specified real and imaginary values.</summary>
      <param name="real">The real part of the complex number.</param>
      <param name="imaginary">The imaginary part of the complex number.</param>
    </member>
    <member name="M:System.Numerics.Complex.Abs(System.Numerics.Complex)">
      <summary>Gets the absolute value (or magnitude) of a complex number.</summary>
      <param name="value">A complex number.</param>
      <returns>The absolute value of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Acos(System.Numerics.Complex)">
      <summary>Returns the angle that is the arc cosine of the specified complex number.</summary>
      <param name="value">A complex number that represents a cosine.</param>
      <returns>The angle, measured in radians, which is the arc cosine of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Double,System.Numerics.Complex)">
      <summary>Adds a double-precision real number to a complex number and returns the result.</summary>
      <param name="left">The double-precision real value to add.</param>
      <param name="right">The complex value to add.</param>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Double)">
      <summary>Adds a complex number to a double-precision real number and returns the result.</summary>
      <param name="left">The complex value to add.</param>
      <param name="right">The double-precision real value to add.</param>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Adds two complex numbers and returns the result.</summary>
      <param name="left">The first complex number to add.</param>
      <param name="right">The second complex number to add.</param>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Asin(System.Numerics.Complex)">
      <summary>Returns the angle that is the arc sine of the specified complex number.</summary>
      <param name="value">A complex number.</param>
      <returns>The angle that is the arc sine of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Atan(System.Numerics.Complex)">
      <summary>Returns the angle that is the arc tangent of the specified complex number.</summary>
      <param name="value">A complex number.</param>
      <returns>The angle that is the arc tangent of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)">
      <summary>Computes the conjugate of a complex number and returns the result.</summary>
      <param name="value">A complex number.</param>
      <returns>The conjugate of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Cos(System.Numerics.Complex)">
      <summary>Returns the cosine of the specified complex number.</summary>
      <param name="value">A complex number.</param>
      <returns>The cosine of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Cosh(System.Numerics.Complex)">
      <summary>Returns the hyperbolic cosine of the specified complex number.</summary>
      <param name="value">A complex number.</param>
      <returns>The hyperbolic cosine of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.CreateChecked``1(``0)">
      <summary>Creates an instance of the current type from a value, throwing an overflow exception for any values that fall outside the representable range of the current type.</summary>
      <param name="value">The value that's used to create the instance of <typeparamref name="TSelf" />.</param>
      <typeparam name="TOther">The type of <paramref name="value" />.</typeparam>
      <returns>An instance of <typeparamref name="TSelf" /> created from <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.CreateSaturating``1(``0)">
      <summary>Creates an instance of the current type from a value, saturating any values that fall outside the representable range of the current type.</summary>
      <param name="value">The value that's used to create the instance of <typeparamref name="TSelf" />.</param>
      <typeparam name="TOther">The type of <paramref name="value" />.</typeparam>
      <returns>An instance of <typeparamref name="TSelf" /> created from <paramref name="value" />, saturating if <paramref name="value" /> falls outside the representable range of <typeparamref name="TSelf" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.CreateTruncating``1(``0)">
      <summary>Creates an instance of the current type from a value, truncating any values that fall outside the representable range of the current type.</summary>
      <param name="value">The value that's used to create the instance of <typeparamref name="TSelf" />.</param>
      <typeparam name="TOther">The type of <paramref name="value" />.</typeparam>
      <returns>An instance of <typeparamref name="TSelf" /> created from <paramref name="value" />, truncating if <paramref name="value" /> falls outside the representable range of <typeparamref name="TSelf" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Double,System.Numerics.Complex)">
      <summary>Divides one double-precision real number by a complex number and returns the result.</summary>
      <param name="dividend">The double-precision real number to be divided.</param>
      <param name="divisor">The complex number to divide by.</param>
      <returns>The quotient of the division.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Double)">
      <summary>Divides one complex number by a double-precision real number and returns the result.</summary>
      <param name="dividend">The complex number to be divided.</param>
      <param name="divisor">The double-precision real number to divide by.</param>
      <returns>The quotient of the division.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Divides one complex number by another and returns the result.</summary>
      <param name="dividend">The complex number to be divided.</param>
      <param name="divisor">The complex number to divide by.</param>
      <returns>The quotient of the division.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Numerics.Complex)">
      <summary>Returns a value that indicates whether the current instance and a specified complex number have the same value.</summary>
      <param name="value">The complex number to compare.</param>
      <returns>
        <see langword="true" /> if this complex number and <paramref name="value" /> have the same value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance and a specified object have the same value.</summary>
      <param name="obj">The object to compare.</param>
      <returns>
        <see langword="true" /> if the <paramref name="obj" /> parameter is a <see cref="T:System.Numerics.Complex" /> object or a type capable of implicit conversion to a <see cref="T:System.Numerics.Complex" /> object, and its value is equal to the current <see cref="T:System.Numerics.Complex" /> object; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Exp(System.Numerics.Complex)">
      <summary>Returns <see langword="e" /> raised to the power specified by a complex number.</summary>
      <param name="value">A complex number that specifies a power.</param>
      <returns>The number <see langword="e" /> raised to the power <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)">
      <summary>Creates a complex number from a point's polar coordinates.</summary>
      <param name="magnitude">The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.</param>
      <param name="phase">The phase, which is the angle from the line to the horizontal axis, measured in radians.</param>
      <returns>A complex number.</returns>
    </member>
    <member name="M:System.Numerics.Complex.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Numerics.Complex" /> object.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsComplexNumber(System.Numerics.Complex)">
      <summary>Determines if a value represents a complex value.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a complex number; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsEvenInteger(System.Numerics.Complex)">
      <summary>Determines if a value represents an even integral number.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is an even integer; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsFinite(System.Numerics.Complex)">
      <summary>Determines whether the specified complex number is finite.</summary>
      <param name="value">A complex number.</param>
      <returns>
        <see langword="true" /> if both, the real and imaginary parts are finite (zero, subnormal or normal); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsImaginaryNumber(System.Numerics.Complex)">
      <summary>Determines if a value represents an imaginary number.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is an imaginary number; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsInfinity(System.Numerics.Complex)">
      <summary>Returns a value indicating whether the specified complex number evaluates to infinity.</summary>
      <param name="value">A complex number.</param>
      <returns>
        <see langword="true" /> if either, the real or imaginary part are <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsInteger(System.Numerics.Complex)">
      <summary>Determines if a value represents an integral value.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is an integer; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsNaN(System.Numerics.Complex)">
      <summary>Returns a value that indicates whether the specified complex instance is not a number (NaN).</summary>
      <param name="value">A complex number.</param>
      <returns>
        <see langword="true" /> if the specified value is not finite or infinite; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsNegative(System.Numerics.Complex)">
      <summary>Determines if a value is negative.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is negative; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsNegativeInfinity(System.Numerics.Complex)">
      <summary>Determines if a value is negative infinity.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is negative infinity; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsNormal(System.Numerics.Complex)">
      <summary>Determines if a value is normal.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is normal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsOddInteger(System.Numerics.Complex)">
      <summary>Determines if a value represents an odd integral number.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is an odd integer; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsPositive(System.Numerics.Complex)">
      <summary>Determines if a value is positive.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is positive; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsPositiveInfinity(System.Numerics.Complex)">
      <summary>Determines if a value is positive infinity.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is positive infinity; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsRealNumber(System.Numerics.Complex)">
      <summary>Determines if a value represents a real number.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is a real number; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsSubnormal(System.Numerics.Complex)">
      <summary>Determines if a value is subnormal.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is subnormal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)">
      <summary>Returns the logarithm of a specified complex number in a specified base.</summary>
      <param name="value">A complex number.</param>
      <param name="baseValue">The base of the logarithm.</param>
      <returns>The logarithm of <paramref name="value" /> in base <paramref name="baseValue" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex)">
      <summary>Returns the natural (base <see langword="e" />) logarithm of a specified complex number.</summary>
      <param name="value">A complex number.</param>
      <returns>The natural (base <see langword="e" />) logarithm of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log10(System.Numerics.Complex)">
      <summary>Returns the base-10 logarithm of a specified complex number.</summary>
      <param name="value">A complex number.</param>
      <returns>The base-10 logarithm of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.MaxMagnitude(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Compares two values to compute which is greater.</summary>
      <param name="x">The value to compare with <paramref name="y" />.</param>
      <param name="y">The value to compare with <paramref name="x" />.</param>
      <returns>
        <paramref name="x" /> if it is greater than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.MinMagnitude(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Compares two values to compute which is lesser.</summary>
      <param name="x">The value to compare with <paramref name="y" />.</param>
      <param name="y">The value to compare with <paramref name="x" />.</param>
      <returns>
        <paramref name="x" /> if it is less than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Double,System.Numerics.Complex)">
      <summary>Returns the product of a double-precision real number and a complex number.</summary>
      <param name="left">The double-precision real number to multiply.</param>
      <param name="right">The complex number to multiply.</param>
      <returns>The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Double)">
      <summary>Returns the product of a complex number and a double-precision real number.</summary>
      <param name="left">The complex number to multiply.</param>
      <param name="right">The double-precision real number to multiply.</param>
      <returns>The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Returns the product of two complex numbers.</summary>
      <param name="left">The first complex number to multiply.</param>
      <param name="right">The second complex number to multiply.</param>
      <returns>The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Negate(System.Numerics.Complex)">
      <summary>Returns the additive inverse of a specified complex number.</summary>
      <param name="value">A complex number.</param>
      <returns>The result of the <see cref="P:System.Numerics.Complex.Real" /> and <see cref="P:System.Numerics.Complex.Imaginary" /> components of the <paramref name="value" /> parameter multiplied by -1.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Double,System.Numerics.Complex)">
      <summary>Adds a double-precision real number to a complex number.</summary>
      <param name="left">The double-precision real value to add.</param>
      <param name="right">The complex value to add.</param>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" /> as a complex number.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Double)">
      <summary>Adds a complex number to a double-precision real number.</summary>
      <param name="left">The complex value to add.</param>
      <param name="right">The double-precision real value to add.</param>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" /> as a complex number.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Adds two complex numbers.</summary>
      <param name="left">The first complex value to add.</param>
      <param name="right">The second complex value to add.</param>
      <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Decrement(System.Numerics.Complex)">
      <summary>Decrements a value.</summary>
      <param name="value">The value to decrement.</param>
      <returns>The result of decrementing <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Double,System.Numerics.Complex)">
      <summary>Divides a specified double-precision real number by a specified complex number.</summary>
      <param name="left">The double-precision real value to be divided.</param>
      <param name="right">The complex value to divide by.</param>
      <returns>The result of dividing <paramref name="left" /> by <paramref name="right" />, as a complex number.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Double)">
      <summary>Divides a specified complex number by a specified double-precision real number.</summary>
      <param name="left">The complex value to be divided.</param>
      <param name="right">The double-precision real value to divide by.</param>
      <returns>The result of dividing <paramref name="left" /> by <paramref name="right" />, as a complex number.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Divides a specified complex number by another specified complex number.</summary>
      <param name="left">The complex value to be divided.</param>
      <param name="right">The complex value to divide by.</param>
      <returns>The result of dividing <paramref name="left" /> by <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Returns a value that indicates whether two complex numbers are equal.</summary>
      <param name="left">The first complex number to compare.</param>
      <param name="right">The second complex number to compare.</param>
      <returns>
        <see langword="true" /> if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex">
      <summary>Defines an explicit conversion of a <see cref="T:System.Decimal" /> value to a complex number.</summary>
      <param name="value">The value to convert to a complex number.</param>
      <returns>A complex number that has a real component equal to <paramref name="value" /> and an imaginary component equal to zero.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Int128)~System.Numerics.Complex">
      <summary>Explicitly converts a <see cref="T:System.Int128" /> value to a double-precision complex number.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to a double-precision complex number.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex">
      <summary>Defines an explicit conversion of a <see cref="T:System.Numerics.BigInteger" /> value to a complex number.</summary>
      <param name="value">The value to convert to a complex number.</param>
      <returns>A complex number that has a real component equal to <paramref name="value" /> and an imaginary component equal to zero.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.UInt128)~System.Numerics.Complex">
      <summary>Explicitly converts a <see cref="T:System.UInt128" /> value to a double-precision complex number.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to a double-precision complex number.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of an unsigned byte to a complex number.</summary>
      <param name="value">The value to convert to a complex number.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Char)~System.Numerics.Complex">
      <summary>Implicitly converts a <see cref="T:System.Char" /> value to a double-precision complex number.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to a double-precision complex number.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a double-precision floating-point number to a complex number.</summary>
      <param name="value">The value to convert to a complex number.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Half)~System.Numerics.Complex">
      <summary>Implicitly converts a <see cref="T:System.Half" /> value to a double-precision complex number.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to a double-precision complex number.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a 16-bit signed integer to a complex number.</summary>
      <param name="value">The value to convert to a complex number.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a 32-bit signed integer to a complex number.</summary>
      <param name="value">The value to convert to a complex number.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a 64-bit signed integer to a complex number.</summary>
      <param name="value">The value to convert to a complex number.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.IntPtr)~System.Numerics.Complex">
      <summary>Implicitly converts a <see cref="T:System.IntPtr" /> value to a double-precision complex number.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to a double-precision complex number.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a signed byte to a complex number.

This API is not CLS-compliant.</summary>
      <param name="value">The value to convert to a complex number.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a single-precision floating-point number to a complex number.</summary>
      <param name="value">The value to convert to a complex number.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a 16-bit unsigned integer to a complex number.

This API is not CLS-compliant.</summary>
      <param name="value">The value to convert to a complex number.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a 32-bit unsigned integer to a complex number.

This API is not CLS-compliant.</summary>
      <param name="value">The value to convert to a complex number.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex">
      <summary>Defines an implicit conversion of a 64-bit unsigned integer to a complex number.

This API is not CLS-compliant.</summary>
      <param name="value">The value to convert to a complex number.</param>
      <returns>An object that contains the value of the <paramref name="value" /> parameter as its real part and zero as its imaginary part.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UIntPtr)~System.Numerics.Complex">
      <summary>Implicitly converts a <see cref="T:System.UIntPtr" /> value to a double-precision complex number.</summary>
      <param name="value">The value to convert.</param>
      <returns>
        <paramref name="value" /> converted to a double-precision complex number.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Increment(System.Numerics.Complex)">
      <summary>Increments a value.</summary>
      <param name="value">The value to increment.</param>
      <returns>The result of incrementing <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Returns a value that indicates whether two complex numbers are not equal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>
        <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Double,System.Numerics.Complex)">
      <summary>Multiplies a specified double-precision real number by a specified complex number.</summary>
      <param name="left">The double-precision real value to multiply.</param>
      <param name="right">The complex value to multiply.</param>
      <returns>The product of <paramref name="left" /> and <paramref name="right" />, as a complex number.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Double)">
      <summary>Multiplies the specified complex number by a specified double-precision real number.</summary>
      <param name="left">The complex value to multiply.</param>
      <param name="right">The double-precision real value to multiply.</param>
      <returns>The product of <paramref name="left" /> and <paramref name="right" />, as a complex number.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Multiplies two specified complex numbers.</summary>
      <param name="left">The first complex value to multiply.</param>
      <param name="right">The second complex value to multiply.</param>
      <returns>The product of <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Double,System.Numerics.Complex)">
      <summary>Subtracts a complex number from a double-precision real number.</summary>
      <param name="left">The double-precision real value to subtract from (the minuend).</param>
      <param name="right">The complex value to subtract (the subtrahend).</param>
      <returns>The result of subtracting <paramref name="right" /> from <paramref name="left" />, as a complex number.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Double)">
      <summary>Subtracts a double-precision real number from a complex number.</summary>
      <param name="left">The complex value to subtract from (the minuend).</param>
      <param name="right">The double-precision real value to subtract (the subtrahend).</param>
      <returns>The result of subtracting <paramref name="right" /> from <paramref name="left" />, as a complex number.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Subtracts a complex number from another complex number.</summary>
      <param name="left">The value to subtract from (the minuend).</param>
      <param name="right">The value to subtract (the subtrahend).</param>
      <returns>The result of subtracting <paramref name="right" /> from <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)">
      <summary>Returns the additive inverse of a specified complex number.</summary>
      <param name="value">The value to negate.</param>
      <returns>The result of the <see cref="P:System.Numerics.Complex.Real" /> and <see cref="P:System.Numerics.Complex.Imaginary" /> components of the <paramref name="value" /> parameter multiplied by -1.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_UnaryPlus(System.Numerics.Complex)">
      <summary>Computes the unary plus of a value.</summary>
      <param name="value">The value for which to compute the unary plus.</param>
      <returns>The unary plus of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Parses a span of characters into a value.</summary>
      <param name="s">The span of characters to parse.</param>
      <param name="style">A bitwise combination of number styles that can be present in <paramref name="s" />.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
      <returns>The result of parsing <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Parses a span of characters into a value.</summary>
      <param name="s">The span of characters to parse.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
      <returns>The result of parsing <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Parses a string into a value.</summary>
      <param name="s">The string to parse.</param>
      <param name="style">A bitwise combination of number styles that can be present in <paramref name="s" />.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
      <returns>The result of parsing <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Parse(System.String,System.IFormatProvider)">
      <summary>Parses a string into a value.</summary>
      <param name="s">The string to parse.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
      <returns>The result of parsing <paramref name="s" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)">
      <summary>Returns a specified complex number raised to a power specified by a double-precision floating-point number.</summary>
      <param name="value">A complex number to be raised to a power.</param>
      <param name="power">A double-precision floating-point number that specifies a power.</param>
      <returns>The complex number <paramref name="value" /> raised to the power <paramref name="power" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Returns a specified complex number raised to a power specified by a complex number.</summary>
      <param name="value">A complex number to be raised to a power.</param>
      <param name="power">A complex number that specifies a power.</param>
      <returns>The complex number <paramref name="value" /> raised to the power <paramref name="power" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Reciprocal(System.Numerics.Complex)">
      <summary>Returns the multiplicative inverse of a complex number.</summary>
      <param name="value">A complex number.</param>
      <returns>The reciprocal of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sin(System.Numerics.Complex)">
      <summary>Returns the sine of the specified complex number.</summary>
      <param name="value">A complex number.</param>
      <returns>The sine of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sinh(System.Numerics.Complex)">
      <summary>Returns the hyperbolic sine of the specified complex number.</summary>
      <param name="value">A complex number.</param>
      <returns>The hyperbolic sine of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)">
      <summary>Returns the square root of a specified complex number.</summary>
      <param name="value">A complex number.</param>
      <returns>The square root of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Double,System.Numerics.Complex)">
      <summary>Subtracts one complex number from a double-precision real number and returns the result.</summary>
      <param name="left">The double-precision real value to subtract from (the minuend).</param>
      <param name="right">The complex value to subtract (the subtrahend).</param>
      <returns>The result of subtracting <paramref name="right" /> from <paramref name="left" />, as a complex number.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Double)">
      <summary>Subtracts one double-precision real number from a complex number and returns the result.</summary>
      <param name="left">The complex value to subtract from (the minuend).</param>
      <param name="right">The double-precision real value to subtract (the subtrahend).</param>
      <returns>The result of subtracting <paramref name="right" /> from <paramref name="left" />, as a complex number.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Subtracts one complex number from another and returns the result.</summary>
      <param name="left">The value to subtract from (the minuend).</param>
      <param name="right">The value to subtract (the subtrahend).</param>
      <returns>The result of subtracting <paramref name="right" /> from <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.System#Numerics#INumberBase{System#Numerics#Complex}#Abs(System.Numerics.Complex)">
      <summary>Computes the absolute of a value.</summary>
      <param name="value">The value for which to get its absolute.</param>
      <returns>The absolute of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.System#Numerics#INumberBase{System#Numerics#Complex}#IsCanonical(System.Numerics.Complex)">
      <summary>Determines if a value is in its canonical representation.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is in its canonical representation; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.System#Numerics#INumberBase{System#Numerics#Complex}#IsZero(System.Numerics.Complex)">
      <summary>Determines if a value is zero.</summary>
      <param name="value">The value to be checked.</param>
      <returns>
        <see langword="true" /> if <paramref name="value" /> is zero; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.System#Numerics#INumberBase{System#Numerics#Complex}#MaxMagnitudeNumber(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Compares two values to compute which has the greater magnitude and returning the other value if an input is <c>NaN</c>.</summary>
      <param name="x">The value to compare with <paramref name="y" />.</param>
      <param name="y">The value to compare with <paramref name="x" />.</param>
      <returns>
        <paramref name="x" /> if it is greater than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.System#Numerics#INumberBase{System#Numerics#Complex}#MinMagnitudeNumber(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Compares two values to compute which has the lesser magnitude and returning the other value if an input is <c>NaN</c>.</summary>
      <param name="x">The value to compare with <paramref name="y" />.</param>
      <param name="y">The value to compare with <paramref name="x" />.</param>
      <returns>
        <paramref name="x" /> if it is less than <paramref name="y" />; otherwise, <paramref name="y" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.System#Numerics#INumberBase{System#Numerics#Complex}#MultiplyAddEstimate(System.Numerics.Complex,System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Computes an estimate of (<paramref name="left" /> * <paramref name="right" />) + <paramref name="addend" />.</summary>
      <param name="left">The value to be multiplied with <paramref name="right" />.</param>
      <param name="right">The value to be multiplied with <paramref name="left" />.</param>
      <param name="addend">The value to be added to the result of <paramref name="left" /> multiplied by <paramref name="right" />.</param>
      <returns>An estimate of (<paramref name="left" /> * <paramref name="right" />) + <paramref name="addend" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.System#Numerics#INumberBase{System#Numerics#Complex}#TryConvertFromChecked``1(``0,System.Numerics.Complex@)">
      <param name="value" />
      <param name="result" />
      <typeparam name="TOther" />
    </member>
    <member name="M:System.Numerics.Complex.System#Numerics#INumberBase{System#Numerics#Complex}#TryConvertFromSaturating``1(``0,System.Numerics.Complex@)">
      <param name="value" />
      <param name="result" />
      <typeparam name="TOther" />
    </member>
    <member name="M:System.Numerics.Complex.System#Numerics#INumberBase{System#Numerics#Complex}#TryConvertFromTruncating``1(``0,System.Numerics.Complex@)">
      <param name="value" />
      <param name="result" />
      <typeparam name="TOther" />
    </member>
    <member name="M:System.Numerics.Complex.System#Numerics#INumberBase{System#Numerics#Complex}#TryConvertToChecked``1(System.Numerics.Complex,``0@)">
      <summary>Tries to convert an instance of the the current type to another type, throwing an overflow exception for any values that fall outside the representable range of the current type.</summary>
      <param name="value">The value that is used to create the instance of <typeparamref name="TOther" />.</param>
      <param name="result">When this method returns, contains an instance of <typeparamref name="TOther" /> converted from <paramref name="value" />.</param>
      <typeparam name="TOther">The type to which <paramref name="value" /> should be converted.</typeparam>
      <returns>
        <see langword="false" /> if <typeparamref name="TOther" /> is not supported; otherwise, <see langword="true" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.System#Numerics#INumberBase{System#Numerics#Complex}#TryConvertToSaturating``1(System.Numerics.Complex,``0@)">
      <summary>Tries to convert an instance of the the current type to another type, saturating any values that fall outside the representable range of the current type.</summary>
      <param name="value">The value that is used to create the instance of <typeparamref name="TOther" />.</param>
      <param name="result">When this method returns, contains an instance of <typeparamref name="TOther" /> converted from <paramref name="value" />.</param>
      <typeparam name="TOther">The type to which <paramref name="value" /> should be converted.</typeparam>
      <returns>
        <see langword="false" /> if <typeparamref name="TOther" /> is not supported; otherwise, <see langword="true" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.System#Numerics#INumberBase{System#Numerics#Complex}#TryConvertToTruncating``1(System.Numerics.Complex,``0@)">
      <summary>Tries to convert an instance of the the current type to another type, truncating any values that fall outside the representable range of the current type.</summary>
      <param name="value">The value that is used to create the instance of <typeparamref name="TOther" />.</param>
      <param name="result">When this method returns, contains an instance of <typeparamref name="TOther" /> converted from <paramref name="value" />.</param>
      <typeparam name="TOther">The type to which <paramref name="value" /> should be converted.</typeparam>
      <returns>
        <see langword="false" /> if <typeparamref name="TOther" /> is not supported; otherwise, <see langword="true" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Tan(System.Numerics.Complex)">
      <summary>Returns the tangent of the specified complex number.</summary>
      <param name="value">A complex number.</param>
      <returns>The tangent of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Tanh(System.Numerics.Complex)">
      <summary>Returns the hyperbolic tangent of the specified complex number.</summary>
      <param name="value">A complex number.</param>
      <returns>The hyperbolic tangent of <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString">
      <summary>Converts the value of the current complex number to its equivalent string representation in Cartesian form.</summary>
      <returns>The string representation of the current instance in Cartesian form.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.IFormatProvider)">
      <summary>Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified culture-specific formatting information.</summary>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <returns>The string representation of the current instance in Cartesian form, as specified by <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String,System.IFormatProvider)">
      <summary>Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.</summary>
      <param name="format">A standard or custom numeric format string.</param>
      <param name="provider">An object that supplies culture-specific formatting information.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is not a valid format string.</exception>
      <returns>The string representation of the current instance in Cartesian form, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String)">
      <summary>Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format for its real and imaginary parts.</summary>
      <param name="format">A standard or custom numeric format string.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> is not a valid format string.</exception>
      <returns>The string representation of the current instance in Cartesian form.</returns>
    </member>
    <member name="M:System.Numerics.Complex.TryFormat(System.Span{System.Byte},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="utf8Destination" />
      <param name="bytesWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Numerics.Complex.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Tries to format the value of the current instance into the provided span of characters.</summary>
      <param name="destination">The span in which to write this instance's value formatted as a span of characters.</param>
      <param name="charsWritten">When this method returns, contains the number of characters that were written in <paramref name="destination" />.</param>
      <param name="format">A span containing the characters that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</param>
      <param name="provider">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.Complex@)">
      <summary>Tries to parse a span of characters into a value.</summary>
      <param name="s">The span of characters to parse.</param>
      <param name="style">A bitwise combination of number styles that can be present in <paramref name="s" />.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">On return, contains the result of succesfully parsing <paramref name="s" /> or an undefined value on failure.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was successfully parsed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Numerics.Complex@)">
      <summary>Tries to parse a span of characters into a value.</summary>
      <param name="s">The span of characters to parse.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the result of successfully parsing <paramref name="s" />, or an undefined value on failure.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was successfully parsed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.Complex@)">
      <summary>Tries to parse a string into a value.</summary>
      <param name="s">The string to parse.</param>
      <param name="style">A bitwise combination of number styles that can be present in <paramref name="s" />.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">On return, contains the result of succesfully parsing <paramref name="s" /> or an undefined value on failure.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was successfully parsed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.TryParse(System.String,System.IFormatProvider,System.Numerics.Complex@)">
      <summary>Tries to parse a string into a value.</summary>
      <param name="s">The string to parse.</param>
      <param name="provider">An object that provides culture-specific formatting information about <paramref name="s" />.</param>
      <param name="result">When this method returns, contains the result of successfully parsing <paramref name="s" /> or an undefined value on failure.</param>
      <returns>
        <see langword="true" /> if <paramref name="s" /> was successfully parsed; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Imaginary">
      <summary>Gets the imaginary component of the current <see cref="T:System.Numerics.Complex" /> object.</summary>
      <returns>The imaginary component of a complex number.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Magnitude">
      <summary>Gets the magnitude (or absolute value) of a complex number.</summary>
      <returns>The magnitude of the current instance.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Phase">
      <summary>Gets the phase of a complex number.</summary>
      <returns>The phase of a complex number, in radians.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Real">
      <summary>Gets the real component of the current <see cref="T:System.Numerics.Complex" /> object.</summary>
      <returns>The real component of a complex number.</returns>
    </member>
    <member name="P:System.Numerics.Complex.System#Numerics#IAdditiveIdentity{System#Numerics#Complex@System#Numerics#Complex}#AdditiveIdentity">
      <summary>Gets the additive identity of the current type.</summary>
    </member>
    <member name="P:System.Numerics.Complex.System#Numerics#IMultiplicativeIdentity{System#Numerics#Complex@System#Numerics#Complex}#MultiplicativeIdentity">
      <summary>Gets the multiplicative identity of the current type.</summary>
    </member>
    <member name="P:System.Numerics.Complex.System#Numerics#INumberBase{System#Numerics#Complex}#One">
      <summary>Gets the value <c>1</c> for the type.</summary>
    </member>
    <member name="P:System.Numerics.Complex.System#Numerics#INumberBase{System#Numerics#Complex}#Radix">
      <summary>Gets the radix, or base, for the type.</summary>
    </member>
    <member name="P:System.Numerics.Complex.System#Numerics#INumberBase{System#Numerics#Complex}#Zero">
      <summary>Gets the value <c>0</c> for the type.</summary>
    </member>
    <member name="P:System.Numerics.Complex.System#Numerics#ISignedNumber{System#Numerics#Complex}#NegativeOne">
      <summary>Gets the value <c>-1</c> for the type.</summary>
    </member>
  </members>
</doc>