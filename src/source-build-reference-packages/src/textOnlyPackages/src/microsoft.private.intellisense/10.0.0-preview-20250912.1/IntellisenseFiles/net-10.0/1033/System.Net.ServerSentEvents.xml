<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Net.ServerSentEvents</name>
  </assembly>
  <members>
    <member name="T:System.Net.ServerSentEvents.SseFormatter">
      <summary>
            Provides methods for formatting server-sent events.</summary>
    </member>
    <member name="M:System.Net.ServerSentEvents.SseFormatter.WriteAsync(System.Collections.Generic.IAsyncEnumerable{System.Net.ServerSentEvents.SseItem{System.String}},System.IO.Stream,System.Threading.CancellationToken)">
      <summary>
            Writes the <paramref name="source" /> of server-sent events to the <paramref name="destination" /> stream.</summary>
      <param name="source">The events to write to the stream.</param>
      <param name="destination">The destination stream to write the events.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel the write operation.</param>
      <returns>A task that represents the asynchronous write operation.</returns>
    </member>
    <member name="M:System.Net.ServerSentEvents.SseFormatter.WriteAsync``1(System.Collections.Generic.IAsyncEnumerable{System.Net.ServerSentEvents.SseItem{``0}},System.IO.Stream,System.Action{System.Net.ServerSentEvents.SseItem{``0},System.Buffers.IBufferWriter{System.Byte}},System.Threading.CancellationToken)">
      <summary>
            Writes the <paramref name="source" /> of server-sent events to the <paramref name="destination" /> stream.</summary>
      <param name="source">The events to write to the stream.</param>
      <param name="destination">The destination stream to write the events.</param>
      <param name="itemFormatter">The formatter for the data field of given event.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel the write operation.</param>
      <typeparam name="T">The data type of the event.</typeparam>
      <returns>A task that represents the asynchronous write operation.</returns>
    </member>
    <member name="T:System.Net.ServerSentEvents.SseItem`1">
      <summary>Represents a server-sent event.</summary>
      <typeparam name="T">Specifies the type of data payload in the event.</typeparam>
    </member>
    <member name="M:System.Net.ServerSentEvents.SseItem`1.#ctor(`0,System.String)">
      <summary>Initializes the server-sent event.</summary>
      <param name="data">The event's payload.</param>
      <param name="eventType">The event's type.</param>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="eventType" /> contains a line break.</exception>
    </member>
    <member name="P:System.Net.ServerSentEvents.SseItem`1.Data">
      <summary>Gets the event's payload.</summary>
    </member>
    <member name="P:System.Net.ServerSentEvents.SseItem`1.EventId">
      <summary>Gets the event's id.</summary>
      <exception cref="T:System.ArgumentException">Thrown when the value contains a line break.</exception>
    </member>
    <member name="P:System.Net.ServerSentEvents.SseItem`1.EventType">
      <summary>Gets the event's type.</summary>
    </member>
    <member name="P:System.Net.ServerSentEvents.SseItem`1.ReconnectionInterval">
      <summary>Gets the event's retry interval.</summary>
    </member>
    <member name="T:System.Net.ServerSentEvents.SseItemParser`1">
      <summary>Encapsulates a method for parsing the bytes payload of a server-sent event.</summary>
      <param name="eventType">The event's type.</param>
      <param name="data">The event's payload bytes.</param>
      <typeparam name="T">Specifies the type of the return value of the parser.</typeparam>
      <returns>The parsed <typeparamref name="T" />.</returns>
    </member>
    <member name="T:System.Net.ServerSentEvents.SseParser">
      <summary>Provides a parser for parsing server-sent events.</summary>
    </member>
    <member name="F:System.Net.ServerSentEvents.SseParser.EventTypeDefault">
      <summary>The default <see cref="P:System.Net.ServerSentEvents.SseItem`1.EventType" /> ("message") for an event that did not explicitly specify a type.</summary>
    </member>
    <member name="M:System.Net.ServerSentEvents.SseParser.Create(System.IO.Stream)">
      <summary>Creates a parser for parsing a <paramref name="sseStream" /> of server-sent events into a sequence of <see cref="T:System.Net.ServerSentEvents.SseItem`1" /> values.</summary>
      <param name="sseStream">The stream containing the data to parse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sseStream" /> is null.</exception>
      <returns>
            The enumerable of strings, which can be enumerated synchronously or asynchronously. The strings
            are decoded from the UTF8-encoded bytes of the payload of each event.</returns>
    </member>
    <member name="M:System.Net.ServerSentEvents.SseParser.Create``1(System.IO.Stream,System.Net.ServerSentEvents.SseItemParser{``0})">
      <summary>Creates a parser for parsing a <paramref name="sseStream" /> of server-sent events into a sequence of <see cref="T:System.Net.ServerSentEvents.SseItem`1" /> values.</summary>
      <param name="sseStream">The stream containing the data to parse.</param>
      <param name="itemParser">The parser to use to transform each payload of bytes into a data element.</param>
      <typeparam name="T">Specifies the type of data in each event.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sseStream" /> or <paramref name="itemParser" /> is null.</exception>
      <returns>The enumerable, which can be enumerated synchronously or asynchronously.</returns>
    </member>
    <member name="T:System.Net.ServerSentEvents.SseParser`1">
      <summary>Provides a parser for server-sent events information.</summary>
      <typeparam name="T">Specifies the type of data parsed from an event.</typeparam>
    </member>
    <member name="M:System.Net.ServerSentEvents.SseParser`1.Enumerate">
      <summary>Gets an enumerable of the server-sent events from this parser.</summary>
      <exception cref="T:System.InvalidOperationException">The parser has already been enumerated. Such an exception may propagate out of a call to <see cref="M:System.Collections.IEnumerator.MoveNext" />.</exception>
    </member>
    <member name="M:System.Net.ServerSentEvents.SseParser`1.EnumerateAsync(System.Threading.CancellationToken)">
      <summary>Gets an asynchronous enumerable of the server-sent events from this parser.</summary>
      <param name="cancellationToken">The cancellation token to use to cancel the enumeration.</param>
      <exception cref="T:System.InvalidOperationException">The parser has already been enumerated. Such an exception may propagate out of a call to <see cref="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync" />.</exception>
      <exception cref="T:System.OperationCanceledException">The enumeration was canceled. Such an exception may propagate out of a call to <see cref="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync" />.</exception>
    </member>
    <member name="P:System.Net.ServerSentEvents.SseParser`1.LastEventId">
      <summary>Gets the last event ID.</summary>
    </member>
    <member name="P:System.Net.ServerSentEvents.SseParser`1.ReconnectionInterval">
      <summary>Gets the reconnection interval.</summary>
    </member>
  </members>
</doc>