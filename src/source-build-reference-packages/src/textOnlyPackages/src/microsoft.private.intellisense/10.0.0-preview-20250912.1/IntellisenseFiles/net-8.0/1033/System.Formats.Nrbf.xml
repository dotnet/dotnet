<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Formats.Nrbf</name>
  </assembly>
  <members>
    <member name="T:System.Formats.Nrbf.ArrayRecord">
      <summary>
            Defines the core behavior for NRBF array records and provides a base for derived classes.</summary>
    </member>
    <member name="M:System.Formats.Nrbf.ArrayRecord.GetArray(System.Type,System.Boolean)">
      <summary>
            Allocates an array and fills it with the data provided in the serialized records (in case of primitive types like <see cref="T:System.String" /> or <see cref="T:System.Int32" />) or the serialized records themselves.</summary>
      <param name="expectedArrayType">Expected array type.</param>
      <param name="allowNulls">
        <see langword="true" /> to permit <see langword="null" /> values within the array;
              otherwise, <see langword="false" />.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expectedArrayType" /> does not match the data from the payload.</exception>
      <returns>An array filled with the data provided in the serialized records.</returns>
    </member>
    <member name="P:System.Formats.Nrbf.ArrayRecord.Id">
      <summary>Gets the ID of the record.</summary>
      <returns>The ID of the record.</returns>
    </member>
    <member name="P:System.Formats.Nrbf.ArrayRecord.Lengths">
      <summary>
            When overridden in a derived class, gets a buffer of integers that represent the number of elements in each dimension.</summary>
      <returns>A buffer of integers that represent the number of elements in each dimension.</returns>
    </member>
    <member name="P:System.Formats.Nrbf.ArrayRecord.Rank">
      <summary>
            Gets the rank of the array.</summary>
      <returns>The rank of the array.</returns>
    </member>
    <member name="T:System.Formats.Nrbf.ClassRecord">
      <summary>
            Defines the core behavior for NRBF class records and provides a base for derived classes.</summary>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetArrayRecord(System.String)">
      <summary>Retrieves the value of the provided <code data-dev-comment-type="paramref">memberName</code>.</summary>
      <param name="memberName">The name of the member.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetBoolean(System.String)">
      <summary>Retrieves the value of the provided <code data-dev-comment-type="paramref">memberName</code>.</summary>
      <param name="memberName">The name of the member.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetByte(System.String)">
      <summary>Retrieves the value of the provided <code data-dev-comment-type="paramref">memberName</code>.</summary>
      <param name="memberName">The name of the member.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetChar(System.String)">
      <summary>Retrieves the value of the provided <code data-dev-comment-type="paramref">memberName</code>.</summary>
      <param name="memberName">The name of the member.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetClassRecord(System.String)">
      <summary>
            Retrieves the value of the provided <paramref name="memberName" />.</summary>
      <param name="memberName">The name of the member.</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="memberName" /> does not refer to a known member. You can use <see cref="M:System.Formats.Nrbf.ClassRecord.HasMember(System.String)" /> to check if a given member exists.</exception>
      <exception cref="T:System.InvalidOperationException">The member with the specified name has a value of a different type.</exception>
      <returns>The value.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetDateTime(System.String)">
      <summary>Retrieves the value of the provided <code data-dev-comment-type="paramref">memberName</code>.</summary>
      <param name="memberName">The name of the member.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetDecimal(System.String)">
      <summary>Retrieves the value of the provided <code data-dev-comment-type="paramref">memberName</code>.</summary>
      <param name="memberName">The name of the member.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetDouble(System.String)">
      <summary>Retrieves the value of the provided <code data-dev-comment-type="paramref">memberName</code>.</summary>
      <param name="memberName">The name of the member.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetInt16(System.String)">
      <summary>Retrieves the value of the provided <code data-dev-comment-type="paramref">memberName</code>.</summary>
      <param name="memberName">The name of the member.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetInt32(System.String)">
      <summary>Retrieves the value of the provided <code data-dev-comment-type="paramref">memberName</code>.</summary>
      <param name="memberName">The name of the member.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetInt64(System.String)">
      <summary>Retrieves the value of the provided <code data-dev-comment-type="paramref">memberName</code>.</summary>
      <param name="memberName">The name of the member.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetRawValue(System.String)">
      <summary>Retrieves the value of the provided <code data-dev-comment-type="paramref">memberName</code>.</summary>
      <param name="memberName">The name of the member.</param>
      <returns>
        <para>For primitive types like <see cref="T:System.Int32" />, <see langword="string" />, or <see cref="T:System.DateTime" />, returns their value.</para>
        <para>For nulls, returns a null.</para>
        <para>For other types that are not arrays, returns an instance of <see cref="T:System.Formats.Nrbf.ClassRecord" />.</para>
        <para>For single-dimensional arrays, returns <see cref="T:System.Formats.Nrbf.SZArrayRecord`1" /> where the generic type is the primitive type or <see cref="T:System.Formats.Nrbf.ClassRecord" />.</para>
        <para>For jagged and multi-dimensional arrays, returns an instance of <see cref="T:System.Formats.Nrbf.ArrayRecord" />.</para>
      </returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetSByte(System.String)">
      <summary>Retrieves the value of the provided <code data-dev-comment-type="paramref">memberName</code>.</summary>
      <param name="memberName">The name of the member.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetSerializationRecord(System.String)">
      <summary>
            Retrieves the <see cref="T:System.Formats.Nrbf.SerializationRecord" /> of the provided <paramref name="memberName" />.</summary>
      <param name="memberName">The name of the field.</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="memberName" /> does not refer to a known member. You can use <see cref="M:System.Formats.Nrbf.ClassRecord.HasMember(System.String)" /> to check if given member exists.</exception>
      <exception cref="T:System.InvalidOperationException">The specified member is not a <see cref="T:System.Formats.Nrbf.SerializationRecord" />, but just a raw primitive value.</exception>
      <returns>The serialization record, which can be any of <see cref="T:System.Formats.Nrbf.PrimitiveTypeRecord`1" />,
            <see cref="T:System.Formats.Nrbf.ClassRecord" />, <see cref="T:System.Formats.Nrbf.ArrayRecord" />, or <see langword="null" />.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetSingle(System.String)">
      <summary>Retrieves the value of the provided <code data-dev-comment-type="paramref">memberName</code>.</summary>
      <param name="memberName">The name of the member.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetString(System.String)">
      <summary>Retrieves the value of the provided <code data-dev-comment-type="paramref">memberName</code>.</summary>
      <param name="memberName">The name of the member.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetTimeSpan(System.String)">
      <summary>Retrieves the value of the provided <code data-dev-comment-type="paramref">memberName</code>.</summary>
      <param name="memberName">The name of the member.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetUInt16(System.String)">
      <summary>Retrieves the value of the provided <code data-dev-comment-type="paramref">memberName</code>.</summary>
      <param name="memberName">The name of the member.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetUInt32(System.String)">
      <summary>Retrieves the value of the provided <code data-dev-comment-type="paramref">memberName</code>.</summary>
      <param name="memberName">The name of the member.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.GetUInt64(System.String)">
      <summary>Retrieves the value of the provided <code data-dev-comment-type="paramref">memberName</code>.</summary>
      <param name="memberName">The name of the member.</param>
      <returns>The value.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.ClassRecord.HasMember(System.String)">
      <summary>
            Checks if the member with the given name was present in the payload.</summary>
      <param name="memberName">The name of the member.</param>
      <returns>
        <see langword="true" /> if the member was present, otherwise <see langword="false" />.</returns>
    </member>
    <member name="P:System.Formats.Nrbf.ClassRecord.Id">
      <summary>Gets the ID of the record.</summary>
      <returns>The ID of the record.</returns>
    </member>
    <member name="P:System.Formats.Nrbf.ClassRecord.MemberNames">
      <summary>
            Gets the names of the serialized members.</summary>
      <returns>The names of the serialized members.</returns>
    </member>
    <member name="P:System.Formats.Nrbf.ClassRecord.TypeName">
      <summary>Gets the name of the serialized type.</summary>
      <returns>The name of the serialized type.</returns>
    </member>
    <member name="T:System.Formats.Nrbf.NrbfDecoder">
      <summary>
            Provides stateless methods for decoding .NET Remoting Binary Format (NRBF) encoded data.</summary>
    </member>
    <member name="M:System.Formats.Nrbf.NrbfDecoder.Decode(System.IO.Stream,System.Collections.Generic.IReadOnlyDictionary{System.Formats.Nrbf.SerializationRecordId,System.Formats.Nrbf.SerializationRecord}@,System.Formats.Nrbf.PayloadOptions,System.Boolean)">
      <summary>Decodes the provided NRBF payload.</summary>
      <param name="payload">The NRBF payload.</param>
      <param name="recordMap">
              When this method returns, contains a mapping of <see cref="T:System.Formats.Nrbf.SerializationRecordId" /> to the associated serialization record.
              This parameter is treated as uninitialized.</param>
      <param name="options">An object that describes optional <see cref="T:System.Formats.Nrbf.PayloadOptions" /> parameters to use.</param>
      <param name="leaveOpen">
        <see langword="true" /> to leave <paramref name="payload" /> payload open
              after the reading is finished; otherwise, <see langword="false" />.</param>
      <returns>A <xref data-throw-if-not-resolved="true" uid="System.Formats.Nrbf.SerializationRecord"></xref> that represents the root object.
            It can be either <xref data-throw-if-not-resolved="true" uid="System.Formats.Nrbf.PrimitiveTypeRecord`1"></xref>,
            a <xref data-throw-if-not-resolved="true" uid="System.Formats.Nrbf.ClassRecord"></xref>, or an <xref data-throw-if-not-resolved="true" uid="System.Formats.Nrbf.ArrayRecord"></xref>.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.NrbfDecoder.Decode(System.IO.Stream,System.Formats.Nrbf.PayloadOptions,System.Boolean)">
      <summary>
            Decodes the provided NRBF payload.</summary>
      <param name="payload">The NRBF payload.</param>
      <param name="options">Options to control behavior during parsing.</param>
      <param name="leaveOpen">
        <see langword="true" /> to leave <paramref name="payload" /> payload open
              after the reading is finished; otherwise, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="payload" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="payload" /> does not support reading or is already closed.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">Reading from <paramref name="payload" /> encountered invalid NRBF data.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:System.NotSupportedException">
            Reading from <paramref name="payload" /> encountered unsupported records,
            for example, arrays with non-zero offset or unsupported record types
            (<see cref="F:System.Formats.Nrbf.SerializationRecordType.ClassWithMembers" />, <see cref="F:System.Formats.Nrbf.SerializationRecordType.SystemClassWithMembers" />,
            <see cref="F:System.Formats.Nrbf.SerializationRecordType.MethodCall" />, or <see cref="F:System.Formats.Nrbf.SerializationRecordType.MethodReturn" />).</exception>
      <exception cref="T:System.Text.DecoderFallbackException">Reading from <paramref name="payload" />
            encountered an invalid UTF8 sequence.</exception>
      <exception cref="T:System.IO.EndOfStreamException">The end of the stream was reached before reading <see cref="F:System.Formats.Nrbf.SerializationRecordType.MessageEnd" /> record.</exception>
      <returns>A <see cref="T:System.Formats.Nrbf.SerializationRecord" /> that represents the root object.
            It can be either <see cref="T:System.Formats.Nrbf.PrimitiveTypeRecord`1" />,
            a <see cref="T:System.Formats.Nrbf.ClassRecord" />, or an <see cref="T:System.Formats.Nrbf.ArrayRecord" />.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.NrbfDecoder.DecodeClassRecord(System.IO.Stream,System.Formats.Nrbf.PayloadOptions,System.Boolean)">
      <summary>
            Decodes the provided NRBF payload that is expected to contain an instance of any class (or struct) that is not an <see cref="T:System.Array" /> or a primitive type.</summary>
      <param name="payload">The NRBF payload.</param>
      <param name="options">Options to control behavior during parsing.</param>
      <param name="leaveOpen">
        <code data-dev-comment-type="langword">true</code> to leave <code data-dev-comment-type="paramref">payload</code> payload open
    after the reading is finished; otherwise, <code data-dev-comment-type="langword">false</code>.</param>
      <returns>A <see cref="T:System.Formats.Nrbf.ClassRecord" /> that represents the root object.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.NrbfDecoder.StartsWithPayloadHeader(System.IO.Stream)">
      <summary>
            Checks if the given stream starts with the NRBF payload header.</summary>
      <param name="stream">The stream to inspect. The stream must be both readable and seekable.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">The stream does not support reading or seeking.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream was closed.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <returns>
        <see langword="true" /> if the stream starts with the NRBF payload header; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.NrbfDecoder.StartsWithPayloadHeader(System.ReadOnlySpan{System.Byte})">
      <summary>
            Checks if the given buffer starts with the NRBF payload header.</summary>
      <param name="bytes">The buffer to inspect.</param>
      <returns>
        <see langword="true" /> if the buffer starts with the NRBF payload header; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Formats.Nrbf.PayloadOptions">
      <summary>
            Defines configuration options for decoding NRBF payloads.</summary>
    </member>
    <member name="M:System.Formats.Nrbf.PayloadOptions.#ctor">
      <summary>
            Initializes a <see cref="T:System.Formats.Nrbf.PayloadOptions" /> instance with default values.</summary>
    </member>
    <member name="P:System.Formats.Nrbf.PayloadOptions.TypeNameParseOptions">
      <summary>
            Gets or sets configuration options for parsing <see cref="T:System.Reflection.Metadata.TypeName" /> instances.</summary>
    </member>
    <member name="P:System.Formats.Nrbf.PayloadOptions.UndoTruncatedTypeNames">
      <summary>
            Gets or sets a value that indicates whether type-name truncation is undone.</summary>
      <returns>
        <see langword="true" /> if truncated type names should be reassembled; otherwise, <see langword="false" />. The default value is <see langword="false" />.</returns>
    </member>
    <member name="T:System.Formats.Nrbf.PrimitiveTypeRecord">
      <summary>
            Represents a record that itself represents a primitive value.</summary>
    </member>
    <member name="P:System.Formats.Nrbf.PrimitiveTypeRecord.Value">
      <summary>
            Gets the serialized primitive value.</summary>
      <returns>The primitive value.</returns>
    </member>
    <member name="T:System.Formats.Nrbf.PrimitiveTypeRecord`1">
      <summary>
            Represents a record that itself represents the primitive value of <typeparamref name="T" /> type.</summary>
      <typeparam name="T">The type of the primitive value.</typeparam>
    </member>
    <member name="P:System.Formats.Nrbf.PrimitiveTypeRecord`1.TypeName">
      <summary>Gets the name of the serialized type.</summary>
      <returns>The name of the serialized type.</returns>
    </member>
    <member name="P:System.Formats.Nrbf.PrimitiveTypeRecord`1.Value">
      <summary>
            Gets the serialized primitive value.</summary>
      <returns>The primitive value.</returns>
    </member>
    <member name="T:System.Formats.Nrbf.SerializationRecord">
      <summary>
            Abstract class that represents the serialization record.</summary>
    </member>
    <member name="M:System.Formats.Nrbf.SerializationRecord.TypeNameMatches(System.Type)">
      <summary>
            Compares the type name read from the payload against the specified type.</summary>
      <param name="type">The type to compare against.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> if the serialized type name matches the provided type; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Formats.Nrbf.SerializationRecord.Id">
      <summary>
            Gets the ID of the record.</summary>
      <returns>The ID of the record.</returns>
    </member>
    <member name="P:System.Formats.Nrbf.SerializationRecord.RecordType">
      <summary>
            Gets the type of the record.</summary>
      <returns>The type of the record.</returns>
    </member>
    <member name="P:System.Formats.Nrbf.SerializationRecord.TypeName">
      <summary>
            Gets the name of the serialized type.</summary>
      <returns>The name of the serialized type.</returns>
    </member>
    <member name="T:System.Formats.Nrbf.SerializationRecordId">
      <summary>
            Represents the ID of <see cref="T:System.Formats.Nrbf.SerializationRecord" />.</summary>
    </member>
    <member name="M:System.Formats.Nrbf.SerializationRecordId.Equals(System.Formats.Nrbf.SerializationRecordId)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
        <code data-dev-comment-type="langword">true</code> if the current object is equal to the <code data-dev-comment-type="paramref">other</code> parameter; otherwise, <code data-dev-comment-type="langword">false</code>.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.SerializationRecordId.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">The object to compare with the current instance.</param>
      <returns>
        <code data-dev-comment-type="langword">true</code> if <code data-dev-comment-type="paramref">obj</code> and this instance are the same type and represent the same value; otherwise, <code data-dev-comment-type="langword">false</code>.</returns>
    </member>
    <member name="M:System.Formats.Nrbf.SerializationRecordId.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="T:System.Formats.Nrbf.SerializationRecordType">
      <summary>
            Specifies record types.</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.ArraySingleObject">
      <summary>
            A single-dimensional array of <see cref="T:System.Object" /> values.</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.ArraySinglePrimitive">
      <summary>
            A single-dimensional array of a primitive type.</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.ArraySingleString">
      <summary>
            A single-dimensional array of <see langword="string" /> values.</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.BinaryArray">
      <summary>
            An array of any rank or element type.</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.BinaryLibrary">
      <summary>
            A record that associates a numeric identifier with a named library.</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.BinaryObjectString">
      <summary>
            A <see langword="string" />.</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.ClassWithId">
      <summary>
            Class information that references another class record's metadata.</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.ClassWithMembers">
      <summary>
            Class information with source library, but without type info.</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.ClassWithMembersAndTypes">
      <summary>
            Class information with type info and the source library.</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.MemberPrimitiveTyped">
      <summary>
            A primitive value other than <see langword="string" />.</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.MemberReference">
      <summary>
            A record that contains a reference to another record that contains the actual value.</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.MessageEnd">
      <summary>
            The record that marks the end of the binary format stream.</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.MethodCall">
      <summary>
            A remote method call.</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.MethodReturn">
      <summary>
            Information returned by a remote method.</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.ObjectNull">
      <summary>
            A single <see langword="null" /> value.</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.ObjectNullMultiple">
      <summary>
            Multiple <see langword="null" /> values.</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.ObjectNullMultiple256">
      <summary>
            Multiple (less than 256) <see langword="null" /> values.</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.SerializedStreamHeader">
      <summary>
            The NRBF header (the first record in NRBF payload).</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.SystemClassWithMembers">
      <summary>
            System class information without type info.</summary>
    </member>
    <member name="F:System.Formats.Nrbf.SerializationRecordType.SystemClassWithMembersAndTypes">
      <summary>
            System class information with type info.</summary>
    </member>
    <member name="T:System.Formats.Nrbf.SZArrayRecord`1">
      <summary>
            Defines the core behavior for NRBF single dimensional, zero-indexed array records and provides a base for derived classes.</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Formats.Nrbf.SZArrayRecord`1.GetArray(System.Boolean)">
      <summary>
            When overridden in a derived class, allocates an array of <typeparamref name="T" /> and fills it with the data provided in the serialized records (in case of primitive types like <see cref="T:System.String" /> or <see cref="T:System.Int32" />) or the serialized records themselves.</summary>
      <param name="allowNulls">
        <see langword="true" /> to permit <see langword="null" /> values within the array;
              otherwise, <see langword="false" />.</param>
      <returns>An array filled with the data provided in the serialized records.</returns>
    </member>
    <member name="P:System.Formats.Nrbf.SZArrayRecord`1.Length">
      <summary>
            Gets the length of the array.</summary>
      <returns>The length of the array.</returns>
    </member>
    <member name="P:System.Formats.Nrbf.SZArrayRecord`1.Lengths">
      <summary>When overridden in a derived class, gets a buffer of integers that represent the number of elements in each dimension.</summary>
      <returns>A buffer of integers that represent the number of elements in each dimension.</returns>
    </member>
  </members>
</doc>