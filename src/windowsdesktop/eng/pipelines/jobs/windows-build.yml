parameters:
  additionalMSBuildArguments: ''
  displayName: ''
  skipTests: $(SkipTests)
  targetArchitecture: null
  timeoutInMinutes: 120

jobs:
- job: ${{ parameters.name }}
  displayName: ${{ parameters.displayName }}
  timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
  strategy:
    matrix:
      Release:
        _BuildConfig: Release
  workspace:
    clean: all
  variables:
  - name: CommonMSBuildArgs
    value: >-
      -c $(_BuildConfig)
      /p:OfficialBuildId=$(OfficialBuildId)
      /p:DotNetPublishUsingPipelines=true
      /p:TargetArchitecture=${{ parameters.targetArchitecture }}
      /p:SkipTests=${{ parameters.skipTests }}
  - name: MsbuildSigningArguments
    value: /p:DotNetSignType=$(_SignType)
  - name: TargetArchitecture
    value: ${{ parameters.targetArchitecture }}
  - name: InternalRuntimeDownloadArgs
    value: >-
      -RuntimeSourceFeed https://ci.dot.net/internal
      -RuntimeSourceFeedKey $(dotnetbuilds-internal-container-read-token-base64)
      /p:DotNetRuntimeSourceFeed=https://ci.dot.net/internal
      /p:DotNetRuntimeSourceFeedKey=$(dotnetbuilds-internal-container-read-token-base64)

  templateContext:
    outputs:
    - output: pipelineArtifact
      displayName: 'Publish BuildLogs'
      condition: succeededOrFailed()
      targetPath: '$(Build.StagingDirectory)/BuildLogs'
      artifactName: Logs-${{ parameters.name }}-$(_BuildConfig)
  steps:
  - template: /eng/common/templates-official/steps/enable-internal-sources.yml
  - template: /eng/common/templates-official/steps/enable-internal-runtimes.yml

  - template: /eng/common/core-templates/steps/install-microbuild.yml
    parameters:
      enableMicrobuild: true
      microbuildUseESRP: true
      continueOnError: false
  
  - script: >-
      eng/common/cibuild.cmd
      $(CommonMSBuildArgs)
      $(MsbuildSigningArguments)
      $(InternalRuntimeDownloadArgs)
    displayName: Build

    # Generate SBOM
  - template: /eng/common/templates-official/steps/generate-sbom.yml@self
    parameters:
      name: Generate_SBOM_${{ parameters.name }}

  # Upload build outputs as build artifacts.
  - task: CopyFiles@2
    displayName: Prepare job-specific Artifacts subdirectory
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)'
      Contents: |
        Shipping/**/*
        NonShipping/**/*
      TargetFolder: '$(Build.StagingDirectory)/Artifacts/${{ parameters.name }}'
      CleanTargetFolder: true
    condition: and(succeeded(), eq(variables._BuildConfig, 'Release'))

  - ${{ if ne(parameters.skipTests, 'true') }}:
    - task: PublishTestResults@2
      displayName: Publish Test Results
      inputs:
        testResultsFormat: 'xUnit'
        testResultsFiles: '*.xml'
        searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
        mergeTestResults: true
        testRunTitle: ${{ parameters.name }}-$(_BuildConfig)
      continueOnError: true

  - task: CopyFiles@2
    displayName: Prepare BuildLogs staging directory
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: |
        **/*.log
        **/*.binlog
      TargetFolder: '$(Build.StagingDirectory)/BuildLogs'
      CleanTargetFolder: true
    continueOnError: true
    condition: succeededOrFailed()