parameters:
  additionalMSBuildArguments: ''
  displayName: ''
  skipTests: $(SkipTests)
  targetArchitecture: null
  timeoutInMinutes: 120

jobs:
  - job: ${{ parameters.name }}
    displayName: ${{ parameters.displayName }}
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
    pool:
      # Use a hosted pool when possible.
      ${{ if eq(variables['System.TeamProject'], 'public') }}:
        vmImage: 'windows-2022'
      ${{ if ne(variables['System.TeamProject'], 'public') }}:
        name: NetCore1ESPool-Internal
        demands: ImageOverride -equals windows.vs2019.amd64
    strategy:
      matrix: 
        Debug:
          _BuildConfig: Debug
        Release:
          _BuildConfig: Release
    workspace:
      clean: all
    variables: 
      - name: CommonMSBuildArgs
        value: >-
          -c $(_BuildConfig)
          /p:TargetArchitecture=${{ parameters.targetArchitecture }}
          /p:SkipTests=${{ parameters.skipTests }}
      - name: MsbuildSigningArguments
        value: /p:DotNetSignType=$(SignType)
      - name: TargetArchitecture
        value: ${{ parameters.targetArchitecture }}
      - ${{ if eq(variables['System.TeamProject'], 'public') }}:
        - name: _InternalRuntimeDownloadArgs
          value: ''
      - ${{ if ne(variables['System.TeamProject'], 'public') }}:
        - group: DotNet-MSRC-Storage
        - name: _InternalRuntimeDownloadArgs
          value: >-
            /p:DotNetRuntimeSourceFeed=https://dotnetclimsrc.blob.core.windows.net/dotnet
            /p:DotNetRuntimeSourceFeedKey=$(dotnetclimsrc-read-sas-token-base64)

    steps:
    - ${{ if ne(variables['System.TeamProject'], 'public') }}:
      - task: NuGetAuthenticate@1

      - task: PowerShell@2
        displayName: Setup Private Feeds Credentials
        inputs:
          filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1
          arguments: -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
        env:
          Token: $(dn-bot-dnceng-artifact-feeds-rw)

      - task: MicroBuildSigningPlugin@2
        displayName: Install MicroBuild plugin for Signing
        inputs:
          signType: $(SignType)
          zipSources: false
          feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
        continueOnError: false
        condition: and(succeeded(), 
                       in(variables['SignType'], 'real', 'test'))
    # NuGet's http cache lasts 30 minutes. If we're on a static machine, this may interfere with
    # auto-update PRs by preventing the CI build from fetching the new version. Delete the cache.
    - powershell: Remove-Item -Recurse -ErrorAction Ignore "$env:LocalAppData\NuGet\v3-cache"
      displayName: Clear NuGet http cache (if exists)

    - script: >-
        eng/common/cibuild.cmd
        $(CommonMSBuildArgs)
        $(MsbuildSigningArguments)
        $(_InternalRuntimeDownloadArgs)
      displayName: Build

    - ${{ if ne(parameters.skipTests, 'true') }}:
      - task: PublishTestResults@2
        displayName: Publish Test Results
        inputs:
          testResultsFormat: 'xUnit'
          testResultsFiles: '*.xml'
          searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
          mergeTestResults: true
          testRunTitle: ${{ parameters.name }}-$(_BuildConfig)
        continueOnError: true
        condition: always()

    - task: CopyFiles@2
      displayName: Prepare BuildLogs staging directory
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: |
          **/*.log
          **/*.binlog
        TargetFolder: '$(Build.StagingDirectory)/BuildLogs'
        CleanTargetFolder: true
      continueOnError: true
      condition: succeededOrFailed()

    - task: PublishBuildArtifacts@1
      displayName: Publish BuildLogs
      inputs:
        PathtoPublish: '$(Build.StagingDirectory)/BuildLogs'
        ArtifactName: Logs-${{ parameters.name }}-$(_BuildConfig)
      continueOnError: true
      condition: succeededOrFailed()