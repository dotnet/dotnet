<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// <auto-generated />
<#
int[] arities = Enumerable.Range(1, 10).ToArray();
#>
#nullable enable

using System.Collections;
using System.CodeDom.Compiler;

namespace Microsoft.AspNetCore.Http;

<# foreach (var arity in arities) { #>
[GeneratedCode("TextTemplatingFileGenerator", "")]
internal sealed class EndpointFilterInvocationContext<<# foreach (var argumentCount in Enumerable.Range(0, arity)) { #>T<#=argumentCount#><# if (argumentCount < arity - 1) { #>, <# } #><# } #>> : EndpointFilterInvocationContext, IList<object?>
{
    internal EndpointFilterInvocationContext(HttpContext httpContext, <# foreach (var argumentCount in Enumerable.Range(0, arity)) { #>T<#=argumentCount#> arg<#=argumentCount#><# if (argumentCount < arity - 1) { #>, <# } #><# } #>)
    {
        HttpContext = httpContext;
<# foreach (var argumentCount in Enumerable.Range(0, arity)) { #>        Arg<#=argumentCount#> = arg<#=argumentCount#>;
<# } #>
    }

    public object? this[int index]
    {
        get => index switch
        {
<#  foreach (var argumentCount in Enumerable.Range(0, arity)) { #>            <#=argumentCount#> => Arg<#=argumentCount#>,
<# } #>
            _ => new ArgumentOutOfRangeException(nameof(index))
        };
        set
        {
            switch (index)
            {
<# foreach (var argumentCount in Enumerable.Range(0, arity)) { #>               case <#=argumentCount#>:
                    Arg<#=argumentCount#> = (T<#=argumentCount#>)(object?)value!;
                    break;
<# } #>
                default:
                    break;
            }
        }
    }

    public override HttpContext HttpContext { get; }

    public override IList<object?> Arguments => this;

<# foreach (var argumentCount in Enumerable.Range(0, arity)) { #>    public T<#=argumentCount#> Arg<#=argumentCount#> { get; set; }
<# } #>

    public int Count => <#=arity#>;

    public bool IsReadOnly => false;

    public bool IsFixedSize => true;

    public void Add(object? item)
    {
        throw new NotSupportedException();
    }

    public void Clear()
    {
        throw new NotSupportedException();
    }

    public bool Contains(object? item)
    {
        for (int i = 0; i < Arguments.Count; i++)
        {
            if (Arguments[i]?.Equals(item) == true)
            {
                return true;
            }
        }

        return false;
    }

    public void CopyTo(object?[] array, int arrayIndex)
    {
        for (int i = 0; i < Arguments.Count; i++)
        {
            array[arrayIndex++] = Arguments[i];
        }
    }

    public IEnumerator<object?> GetEnumerator()
    {
        for (int i = 0; i < Arguments.Count; i++)
        {
            yield return Arguments[i];
        }
    }

    public override T GetArgument<T>(int index)
    {
        return index switch
        {
<# foreach (var argumentCount in Enumerable.Range(0, arity)) { #>           <#=argumentCount#> => (T)(object)Arg<#=argumentCount#>!,
<# } #>
           _ => throw new ArgumentOutOfRangeException(nameof(index))
        };
    }

    public int IndexOf(object? item)
    {
        for (int i = 0; i < Arguments.Count; i++)
        {
            if (Arguments[i]?.Equals(item) == true)
            {
                return i;
            }
        }

        return -1;
    }

    public void Insert(int index, object? item)
    {
        throw new NotSupportedException();
    }

    public bool Remove(object? item)
    {
        throw new NotSupportedException();
    }

    public void RemoveAt(int index)
    {
        throw new NotSupportedException();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }
}
<# } #>
