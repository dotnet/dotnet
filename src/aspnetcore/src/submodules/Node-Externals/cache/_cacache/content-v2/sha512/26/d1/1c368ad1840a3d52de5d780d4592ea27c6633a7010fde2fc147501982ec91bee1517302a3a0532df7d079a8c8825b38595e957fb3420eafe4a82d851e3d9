{"_id":"got","_rev":"a11c0341-2157-4750-97be-a901eee9fbce","name":"got","dist-tags":{"latest":"14.2.1","version-11":"11.8.6"},"versions":{"0.1.0":{"_id":"got@0.1.0","name":"got","description":"Simplified HTTP/HTTPS GET requests","version":"0.1.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"git://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"mocha"},"directories":{},"devDependencies":{"mocha":"*"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"a014ed629a57d9cf6fc28716ba091d102a48713d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-0.1.0.tgz"},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}]},"0.1.1":{"_id":"got@0.1.1","name":"got","description":"Simplified HTTP/HTTPS GET requests","version":"0.1.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"git://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"mocha"},"directories":{},"devDependencies":{"mocha":"*"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"9e85cb9fb7054e73af744c1f49d5509b95cdfb71","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-0.1.1.tgz"},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}]},"0.2.0":{"_id":"got@0.2.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"0.2.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"git://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"mocha"},"directories":{},"devDependencies":{"mocha":"*"},"dependencies":{"object-assign":"^0.3.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"d00c248b29fdccaea940df9ca0995ebff31b51a5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-0.2.0.tgz"},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}]},"0.3.0":{"_id":"got@0.3.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"0.3.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"git://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"mocha"},"directories":{},"devDependencies":{"mocha":"*"},"dependencies":{"object-assign":"^0.3.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"888ec66ca4bc735ab089dbe959496d0f79485493","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-0.3.0.tgz"},"_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}]},"1.0.0":{"_id":"got@1.0.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"1.0.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"git://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"mocha"},"directories":{},"devDependencies":{"mocha":"*"},"dependencies":{"object-assign":"^0.3.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"792b340223b8df77d6e2c1090dc54341fc42df11","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-1.0.0.tgz"},"gitHead":"9a593acd8412f5e412f0e7e6044a88a5ea93ca90","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}]},"1.0.1":{"_id":"got@1.0.1","name":"got","description":"Simplified HTTP/HTTPS requests","version":"1.0.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"git://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"mocha"},"directories":{},"devDependencies":{"mocha":"*"},"dependencies":{"object-assign":"^0.3.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"ac662d4912a9d0d5611a2b395e2a0116340a56a0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-1.0.1.tgz"},"gitHead":"37322366c7e85c898fbc9bf92bd32afa9a228aae","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}]},"1.1.0":{"_id":"got@1.1.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"1.1.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"git://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"mocha"},"directories":{},"devDependencies":{"mocha":"*"},"dependencies":{"object-assign":"^0.3.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"82788a0a573a60a8f18b9901236d43c91fcd664b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-1.1.0.tgz"},"gitHead":"89e93578089beaa068119828b21e2874c60938bf","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}]},"1.2.0":{"_id":"got@1.2.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"1.2.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"mocha"},"directories":{},"devDependencies":{"mocha":"*"},"dependencies":{"object-assign":"^0.3.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"11407f478e2ec1355a25427fba2e7563cbe8e732","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-1.2.0.tgz"},"gitHead":"98063aa442f389d7787b262a29629df7294e19da","_from":".","_npmVersion":"1.4.23","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}]},"1.2.1":{"_id":"got@1.2.1","name":"got","description":"Simplified HTTP/HTTPS requests","version":"1.2.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"mocha"},"directories":{},"devDependencies":{"mocha":"*"},"dependencies":{"object-assign":"^0.3.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"5878b85de16034b74d947ad41f729d41534fe6e2","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-1.2.1.tgz"},"gitHead":"df87ffc5c56554ad0d6907d49abcdc9076c46d16","_from":".","_npmVersion":"2.0.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}]},"1.2.2":{"_id":"got@1.2.2","name":"got","description":"Simplified HTTP/HTTPS requests","version":"1.2.2","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"mocha"},"directories":{},"devDependencies":{"mocha":"*"},"dependencies":{"object-assign":"^1.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"d9430ba32f6a30218243884418767340aafc0400","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-1.2.2.tgz"},"gitHead":"51b1b90b2636dae4b8f33211fa347a9c92838910","_from":".","_npmVersion":"2.0.2","_nodeVersion":"0.10.32","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"}]},"2.0.0":{"_id":"got@2.0.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"2.0.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"mocha"},"directories":{},"devDependencies":{"mocha":"*"},"dependencies":{"object-assign":"^2.0.0","read-all-stream":"^0.1.0","timed-out":"^1.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"8a21692827888114c498aa9b81171d0c86fd5a72","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-2.0.0.tgz"},"gitHead":"b4a05e441d5a5f730f0b2e58c3cce1f36ed44a73","_from":".","_npmVersion":"2.1.5","_nodeVersion":"0.10.32","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"}]},"2.1.0":{"_id":"got@2.1.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"2.1.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"mocha"},"directories":{},"devDependencies":{"mocha":"*"},"dependencies":{"object-assign":"^2.0.0","read-all-stream":"^0.1.0","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"6bc9c28ffdcd3c530c607f736692355b6939acb7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-2.1.0.tgz"},"gitHead":"5a7944a5892d710cefd33ca48ba5f696d9de60df","_from":".","_npmVersion":"2.1.5","_nodeVersion":"0.10.32","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"}]},"2.2.0":{"_id":"got@2.2.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"2.2.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"http://sindresorhus.com"},"repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"mocha --timeout 50000"},"directories":{},"devDependencies":{"mocha":"*"},"dependencies":{"duplexify":"^3.2.0","object-assign":"^2.0.0","read-all-stream":"^0.1.0","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"e5c0a24870aaefb36eda8b7195736e61810477ea","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-2.2.0.tgz"},"gitHead":"009b973bf313c9721fe8c015090c38270c3cd13d","_from":".","_npmVersion":"2.1.5","_nodeVersion":"0.10.32","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"}]},"2.3.0":{"_id":"got@2.3.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"2.3.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"taper test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","pem":"^1.4.4","tape":"^3.0.3","taper":"^0.3.0"},"dependencies":{"duplexify":"^3.2.0","infinity-agent":"^0.1.0","isstream":"^0.1.1","object-assign":"^2.0.0","prepend-http":"^1.0.0","read-all-stream":"^0.1.0","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"460f95732e09b1adf96f6c7aeaee6240e5085ee1","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-2.3.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"}],"gitHead":"c616d256ae67cb78ce41fbfaa2e04f6e5dff0594","_from":".","_npmVersion":"2.1.16","_nodeVersion":"0.10.32","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"}},"2.3.1":{"_id":"got@2.3.1","name":"got","description":"Simplified HTTP/HTTPS requests","version":"2.3.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"taper test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","pem":"^1.4.4","tape":"^3.0.3","taper":"^0.3.0"},"dependencies":{"duplexify":"^3.2.0","infinity-agent":"^1.0.0","is-stream":"^1.0.0","object-assign":"^2.0.0","prepend-http":"^1.0.0","read-all-stream":"^1.0.0","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"f644b11ee85c67577e017bfec2a7a234557e1759","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-2.3.1.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"}],"gitHead":"2a61a7a695741bbc736a8abe80db0c627e403814","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"}},"2.3.2":{"_id":"got@2.3.2","name":"got","description":"Simplified HTTP/HTTPS requests","version":"2.3.2","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"taper test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","pem":"^1.4.4","tape":"^3.0.3","taper":"^0.3.0"},"dependencies":{"duplexify":"^3.2.0","infinity-agent":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","object-assign":"^2.0.0","prepend-http":"^1.0.0","read-all-stream":"^1.0.0","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"2dc21af7012f7c4ef33edfb62a2a7faa69548c5e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-2.3.2.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"}],"gitHead":"e535190af9f301612295d11fc8756d2f4f6f9dbb","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"}},"2.4.0":{"_id":"got@2.4.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"2.4.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"taper test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","pem":"^1.4.4","tape":"^3.0.3","taper":"^0.3.0"},"dependencies":{"duplexify":"^3.2.0","infinity-agent":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","object-assign":"^2.0.0","prepend-http":"^1.0.0","read-all-stream":"^1.0.0","statuses":"^1.2.1","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"e4087a2cd59b5d20f2d169dc85d2169ed9e89f56","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-2.4.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"}],"gitHead":"6757c4c37b107bf404bcbc819982c9e12d589203","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"}},"2.5.0":{"_id":"got@2.5.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"2.5.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"taper test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","pem":"^1.4.4","tape":"^3.0.3","taper":"^0.3.0"},"dependencies":{"duplexify":"^3.2.0","infinity-agent":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","object-assign":"^2.0.0","prepend-http":"^1.0.0","read-all-stream":"^1.0.0","statuses":"^1.2.1","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"44d917c8bb481c00721832fd80c4481e9af3df5e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-2.5.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"}],"gitHead":"9f81a55b62e419f8bc41ebdb363faafdf250fd06","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"2.6.0":{"_id":"got@2.6.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"2.6.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"tape test/test-*.js | tap-dot","coverage":"istanbul cover tape --report html -- test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","istanbul":"^0.3.13","pem":"^1.4.4","tap-dot":"^1.0.0","tape":"^3.5.0"},"dependencies":{"duplexify":"^3.2.0","infinity-agent":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","nested-error-stacks":"^1.0.0","object-assign":"^2.0.0","prepend-http":"^1.0.0","read-all-stream":"^2.0.0","statuses":"^1.2.1","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"a6c752e289d6f3326aaebd0d86a24b3ec0616d91","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-2.6.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"}],"gitHead":"86b869730780c14e6be39136758ac98d740949f7","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"2.7.0":{"_id":"got@2.7.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"2.7.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"tape test/test-*.js | tap-dot","coverage":"istanbul cover tape --report html -- test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","istanbul":"^0.3.13","pem":"^1.4.4","tap-dot":"^1.0.0","tape":"^3.5.0"},"dependencies":{"duplexify":"^3.2.0","infinity-agent":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","nested-error-stacks":"^1.0.0","object-assign":"^2.0.0","prepend-http":"^1.0.0","read-all-stream":"^2.0.0","statuses":"^1.2.1","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"c4bd3a4fcc3c8501d1891c0fae4ef5648ff372da","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-2.7.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"}],"gitHead":"abdd0f09606fa4c79b277d2b637a9aa47b9c9643","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"2.7.1":{"_id":"got@2.7.1","name":"got","description":"Simplified HTTP/HTTPS requests","version":"2.7.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"tape test/test-*.js | tap-dot","coverage":"istanbul cover tape --report html -- test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","istanbul":"^0.3.13","pem":"^1.4.4","tap-dot":"^1.0.0","tape":"^3.5.0"},"dependencies":{"duplexify":"^3.2.0","infinity-agent":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","nested-error-stacks":"^1.0.0","object-assign":"^2.0.0","prepend-http":"^1.0.0","read-all-stream":"^2.0.0","statuses":"^1.2.1","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"4c82c8a8be7f3e79384ec94b736fe07081c4064c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-2.7.1.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"}],"gitHead":"a790ee2527dc52d9902aff7574ad5165fbc05907","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"2.7.2":{"_id":"got@2.7.2","name":"got","description":"Simplified HTTP/HTTPS requests","version":"2.7.2","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"tape test/test-*.js | tap-dot","coverage":"istanbul cover tape --report html -- test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","istanbul":"^0.3.13","pem":"^1.4.4","tap-dot":"^1.0.0","tape":"^3.5.0"},"dependencies":{"duplexify":"^3.2.0","infinity-agent":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","nested-error-stacks":"^1.0.0","object-assign":"^2.0.0","prepend-http":"^1.0.0","read-all-stream":"^2.0.0","statuses":"^1.2.1","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"089cfe07c37590d6ab59ced31d5ff5b09f05145d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-2.7.2.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"}],"gitHead":"42294172307b042dfdb1432ebf24ed51cb7f897c","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"2.8.0":{"_id":"got@2.8.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"2.8.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"tape test/test-*.js | tap-dot","coverage":"istanbul cover tape --report html -- test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","istanbul":"^0.3.13","pem":"^1.4.4","tap-dot":"^1.0.0","tape":"^3.5.0"},"dependencies":{"duplexify":"^3.2.0","infinity-agent":"^2.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","nested-error-stacks":"^1.0.0","object-assign":"^2.0.0","prepend-http":"^1.0.0","read-all-stream":"^2.0.0","statuses":"^1.2.1","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"98ed3b127fede9f667a1c292afd58f563e01b30e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-2.8.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"}],"gitHead":"63738b527f23b370e0405fb3979863976f438afe","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"2.8.1":{"_id":"got@2.8.1","name":"got","description":"Simplified HTTP/HTTPS requests","version":"2.8.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"tape test/test-*.js | tap-dot","coverage":"istanbul cover tape --report html -- test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","istanbul":"^0.3.13","pem":"^1.4.4","tap-dot":"^1.0.0","tape":"^3.5.0"},"dependencies":{"duplexify":"^3.2.0","infinity-agent":"^2.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","nested-error-stacks":"^1.0.0","object-assign":"^2.0.0","prepend-http":"^1.0.0","read-all-stream":"^2.0.0","statuses":"^1.2.1","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"72247785828e96df4872d99674f2a6196926d361","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-2.8.1.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"}],"gitHead":"709b056bd241475c626c3f7038846526095d48a9","_from":".","_npmVersion":"2.8.3","_nodeVersion":"1.8.1","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"2.9.0":{"_id":"got@2.9.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"2.9.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"tape test/test-*.js | tap-dot","coverage":"istanbul cover tape --report html -- test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","istanbul":"^0.3.13","pem":"^1.4.4","tap-dot":"^1.0.0","tape":"^3.5.0"},"dependencies":{"duplexify":"^3.2.0","infinity-agent":"^2.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","nested-error-stacks":"^1.0.0","object-assign":"^2.0.0","prepend-http":"^1.0.0","read-all-stream":"^2.0.0","statuses":"^1.2.1","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"ad2c3f9264271edabf5479f29f69606643dab4ce","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-2.9.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"}],"gitHead":"1005cfc39135d9e73e5f8cca5b0b0c9ccc8a6841","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"2.9.1":{"_id":"got@2.9.1","name":"got","description":"Simplified HTTP/HTTPS requests","version":"2.9.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"tape test/test-*.js | tap-dot","coverage":"istanbul cover tape --report html -- test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","istanbul":"^0.3.13","pem":"^1.4.4","tap-dot":"^1.0.0","tape":"^3.5.0"},"dependencies":{"duplexify":"^3.2.0","infinity-agent":"^2.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","nested-error-stacks":"^1.0.0","object-assign":"^2.0.0","prepend-http":"^1.0.0","read-all-stream":"^2.0.0","statuses":"^1.2.1","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"8661f8a3302d774186e01dd86ea00ee99b00ac82","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-2.9.1.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"}],"gitHead":"e10f3b0b820a9d5e921e781ad8da016fd0d07cf5","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"2.9.2":{"_id":"got@2.9.2","name":"got","description":"Simplified HTTP/HTTPS requests","version":"2.9.2","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"tape test/test-*.js | tap-dot","coverage":"istanbul cover tape --report html -- test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","istanbul":"^0.3.13","pem":"^1.4.4","tap-dot":"^1.0.0","tape":"^3.5.0"},"dependencies":{"duplexify":"^3.2.0","infinity-agent":"^2.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","nested-error-stacks":"^1.0.0","object-assign":"^2.0.0","prepend-http":"^1.0.0","read-all-stream":"^2.0.0","statuses":"^1.2.1","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"2e1ee58ea1e8d201e25ae580b96e63c15fefd4ee","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-2.9.2.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"}],"gitHead":"a982c75a235fe4a64f5557763758580c5a393ee3","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"3.0.0":{"_id":"got@3.0.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"3.0.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"tape test/test-*.js | tap-dot","coverage":"istanbul cover tape --report html -- test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","istanbul":"^0.3.13","pem":"^1.4.4","tap-dot":"^1.0.0","tape":"^3.5.0"},"dependencies":{"duplexify":"^3.2.0","infinity-agent":"^2.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","nested-error-stacks":"^1.0.0","object-assign":"^2.0.0","prepend-http":"^1.0.0","read-all-stream":"^2.0.0","statuses":"^1.2.1","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"62c20f39fc5c48b32bd4da16041f96b897a1f903","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-3.0.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"gitHead":"d611ac5faada0389640af789c91c3906525d1a02","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"3.1.0":{"_id":"got@3.1.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"3.1.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"tape test/test-*.js | tap-dot","coverage":"istanbul cover tape --report html -- test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","istanbul":"^0.3.13","pem":"^1.4.4","tap-dot":"^1.0.0","tape":"^3.5.0"},"dependencies":{"duplexify":"^3.2.0","infinity-agent":"^2.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","nested-error-stacks":"^1.0.0","object-assign":"^2.0.0","prepend-http":"^1.0.0","read-all-stream":"^2.0.0","statuses":"^1.2.1","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"a9ffd775c1cf098a7fc91eb71a176a63379f0e28","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-3.1.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"gitHead":"1a59f479d9ea35e2fddcf0cf2c5c5250a0c52b27","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"3.2.0":{"_id":"got@3.2.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"3.2.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"tape test/test-*.js | tap-dot","coverage":"istanbul cover tape --report html -- test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","istanbul":"^0.3.13","pem":"^1.4.4","tap-dot":"^1.0.0","tape":"^3.5.0"},"dependencies":{"duplexify":"^3.2.0","infinity-agent":"^2.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","nested-error-stacks":"^1.0.0","object-assign":"^2.0.0","prepend-http":"^1.0.0","read-all-stream":"^2.0.0","statuses":"^1.2.1","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"3182273b695da605c50003dc2d708217cf8156e9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-3.2.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"gitHead":"1fa82fb44810d835eb090ca28af7b72a9e6be527","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"3.3.0":{"_id":"got@3.3.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"3.3.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"tap test/test-*.js","coverage":"istanbul cover tape --report html -- test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","istanbul":"^0.3.13","pem":"^1.4.4","tap":"^1.0.0"},"dependencies":{"duplexify":"^3.2.0","infinity-agent":"^2.0.0","is-redirect":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","nested-error-stacks":"^1.0.0","object-assign":"^2.0.0","prepend-http":"^1.0.0","read-all-stream":"^2.0.0","statuses":"^1.2.1","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"6b1cb3d1f576c2491536f0d28b6cdd23aa4de3e9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-3.3.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"gitHead":"3c728bc664cf0dd9dd4f77643b4e4a2878f86e9e","_from":".","_npmVersion":"2.11.1","_nodeVersion":"2.3.0","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"3.3.1":{"_id":"got@3.3.1","name":"got","description":"Simplified HTTP/HTTPS requests","version":"3.3.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"tap test/test-*.js","coverage":"istanbul cover tape --report html -- test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","istanbul":"^0.3.13","pem":"^1.4.4","tap":"^1.0.0"},"dependencies":{"duplexify":"^3.2.0","infinity-agent":"^2.0.0","is-redirect":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","nested-error-stacks":"^1.0.0","object-assign":"^3.0.0","prepend-http":"^1.0.0","read-all-stream":"^3.0.0","timed-out":"^2.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"e5d0ed4af55fc3eef4d56007769d98192bcb2eca","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-3.3.1.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"gitHead":"7bc82b8eb63893f264d3c109abe1530ca74a3fb0","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"4.0.0":{"_id":"got@4.0.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"4.0.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"tap test/test-*.js"},"directories":{},"devDependencies":{"from2-array":"0.0.3","istanbul":"^0.3.13","pem":"^1.4.4","tap":"^1.0.0"},"dependencies":{"create-error-class":"^2.0.0","duplexify":"^3.2.0","is-redirect":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","object-assign":"^3.0.0","pinkie-promise":"^1.0.0","prepend-http":"^1.0.0","read-all-stream":"^3.0.0","timed-out":"^2.0.0","unzip-response":"^1.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"9ea4de4f4c38e7893c145a82dedd231a56c111f4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-4.0.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"gitHead":"f96498fa2f7af1f84d3822d3d531489e7b52c4bc","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"4.1.0":{"_id":"got@4.1.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"4.1.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"tap test/test-*.js"},"directories":{},"devDependencies":{"into-stream":"^2.0.0","istanbul":"^0.3.13","pem":"^1.4.4","tap":"^1.0.0"},"dependencies":{"create-error-class":"^2.0.0","duplexify":"^3.2.0","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","object-assign":"^3.0.0","pinkie-promise":"^1.0.0","prepend-http":"^1.0.0","read-all-stream":"^3.0.0","timed-out":"^2.0.0","unzip-response":"^1.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"96deff3edf46c93a19b7c180409ed73bebd24977","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-4.1.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"gitHead":"f677a3ef54a8948712e3af86ba807e2f672a3c45","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"4.1.1":{"_id":"got@4.1.1","name":"got","description":"Simplified HTTP/HTTPS requests","version":"4.1.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"tap test/test-*.js"},"directories":{},"devDependencies":{"into-stream":"^2.0.0","istanbul":"^0.3.13","pem":"^1.4.4","tap":"^1.0.0"},"dependencies":{"create-error-class":"^2.0.0","duplexify":"^3.2.0","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","object-assign":"^3.0.0","pinkie-promise":"^1.0.0","prepend-http":"^1.0.0","read-all-stream":"^3.0.0","timed-out":"^2.0.0","unzip-response":"^1.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"52125e24d488fbfe42ec2ebf84ec9f37b4e3ff44","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-4.1.1.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"gitHead":"a7071713f02dc286d7fb8cb7c7f0dfd7b2a8c7af","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"4.2.0":{"_id":"got@4.2.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"4.2.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tap test/test-*.js"},"directories":{},"devDependencies":{"into-stream":"^2.0.0","istanbul":"^0.3.13","pem":"^1.4.4","tap":"^1.0.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^2.0.0","duplexify":"^3.2.0","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","object-assign":"^3.0.0","parse-json":"^2.1.0","pinkie-promise":"^1.0.0","prepend-http":"^1.0.0","read-all-stream":"^3.0.0","timed-out":"^2.0.0","unzip-response":"^1.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"af59f461834bfafd722cba01acf4c14a9dd5da06","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-4.2.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"gitHead":"0bf55bbe547c4de4744277dbebdbe7522d87332c","_from":".","_npmVersion":"2.14.2","_nodeVersion":"4.0.0","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"5.0.0":{"_id":"got@5.0.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"5.0.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"git+https://github.com/sindresorhus/ava.git#7cebc1099","coveralls":"^2.11.4","get-port":"^1.0.0","into-stream":"^2.0.0","nyc":"^3.2.2","pem":"^1.4.4","pify":"^2.2.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^2.0.0","duplexify":"^3.2.0","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","object-assign":"^4.0.1","parse-json":"^2.1.0","pinkie-promise":"^1.0.0","read-all-stream":"^3.0.0","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"e1e5b551b09ff02c58b0d0bc77a9028d23299474","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-5.0.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"ignores":["test/**"]},"gitHead":"0933d0bb13f704bc9aabcc1eec7a8e33dc8aba51","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.0","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"5.1.0":{"_id":"got@5.1.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"5.1.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.3.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^3.2.2","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^2.0.0","duplexify":"^3.2.0","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","object-assign":"^4.0.1","parse-json":"^2.1.0","pinkie-promise":"^1.0.0","read-all-stream":"^3.0.0","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"4735a4184dc3d248cae5105ca692372d0194242a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-5.1.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"ignores":["test/**"]},"gitHead":"473759c7dad2d23b0f1c1ac466ee40866eeb917e","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.0","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"5.2.0":{"_id":"got@5.2.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"5.2.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.5.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^3.2.2","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^2.0.0","duplexify":"^3.2.0","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","object-assign":"^4.0.1","parse-json":"^2.1.0","pinkie-promise":"^2.0.0","read-all-stream":"^3.0.0","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"35d15a3da4806470b674664823e9c3bb7924347e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-5.2.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"ignores":["test/**"]},"gitHead":"2f5d5ba94d625802880b3c793c3c1aa7798d0533","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.0","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"5.2.1":{"_id":"got@5.2.1","name":"got","description":"Simplified HTTP/HTTPS requests","version":"5.2.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.5.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^3.2.2","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^2.0.0","duplexify":"^3.2.0","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","object-assign":"^4.0.1","parse-json":"^2.1.0","pinkie-promise":"^2.0.0","read-all-stream":"^3.0.0","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"6619b24b185eec92fd420c1203dca1b224925845","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-5.2.1.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"ignores":["test/**"]},"gitHead":"a34c96fd45ac080733a068e8cb50a1cc3c33816f","_from":".","_npmVersion":"2.11.3","_nodeVersion":"0.12.7","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"5.3.0":{"_id":"got@5.3.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"5.3.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.5.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^3.2.2","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^2.0.0","duplexify":"^3.2.0","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","object-assign":"^4.0.1","parse-json":"^2.1.0","pinkie-promise":"^2.0.0","read-all-stream":"^3.0.0","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"e1ca75936e6512ca7bd23632667aa320dac6e51f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-5.3.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"ignores":["test/**"]},"gitHead":"c71a39ebd92fcea28ef21ab4115be0d2beddbc8a","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.3","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"5.3.1":{"_id":"got@5.3.1","name":"got","description":"Simplified HTTP/HTTPS requests","version":"5.3.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.5.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^3.2.2","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^2.0.0","duplexer2":"^0.1.4","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","object-assign":"^4.0.1","parse-json":"^2.1.0","pinkie-promise":"^2.0.0","read-all-stream":"^3.0.0","readable-stream":"^2.0.5","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"75eb796aeb597726afdda572134cb02ad96f5d8b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-5.3.1.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"ignores":["test/**"]},"gitHead":"db5fbfb32b8d96e1e1b311901c9cd606a5e3841a","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.3","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"5.3.2":{"_id":"got@5.3.2","name":"got","description":"Simplified HTTP/HTTPS requests","version":"5.3.2","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.5.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^3.2.2","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^2.0.0","duplexer2":"^0.1.4","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","object-assign":"^4.0.1","parse-json":"^2.1.0","pinkie-promise":"^2.0.0","read-all-stream":"^3.0.0","readable-stream":"^2.0.5","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"b1cac877522dfb262b4b666f0646d40b7b8bca14","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-5.3.2.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"ignores":["test/**"]},"gitHead":"29191a2da41ff5177f54e2568c22d6393b71fddb","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.3","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"5.4.0":{"_id":"got@5.4.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"5.4.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.5.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^3.2.2","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^2.0.0","duplexer2":"^0.1.4","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","object-assign":"^4.0.1","parse-json":"^2.1.0","pinkie-promise":"^2.0.0","read-all-stream":"^3.0.0","readable-stream":"^2.0.5","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"680e26c2f56450b9ddc4a295a1262eb96a65055d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-5.4.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"ignores":["test/**"]},"gitHead":"2f8fc8f12c75626e84b80bdd62626cef9a8bedd6","_from":".","_npmVersion":"2.14.12","_nodeVersion":"4.2.4","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"5.4.1":{"_id":"got@5.4.1","name":"got","description":"Simplified HTTP/HTTPS requests","version":"5.4.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.5.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^3.2.2","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^2.0.0","duplexer2":"^0.1.4","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","object-assign":"^4.0.1","parse-json":"^2.1.0","pinkie-promise":"^2.0.0","read-all-stream":"^3.0.0","readable-stream":"^2.0.5","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"d36ced55ff37cbf0541f687cfeb1c6e15f59e374","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-5.4.1.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"ignores":["test/**"]},"gitHead":"f81e4eb22950993503a1d08af7cafad88a352a39","_from":".","_npmVersion":"2.14.12","_nodeVersion":"4.2.4","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"5.4.2":{"_id":"got@5.4.2","name":"got","description":"Simplified HTTP/HTTPS requests","version":"5.4.2","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.5.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^3.2.2","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^2.0.0","duplexer2":"^0.1.4","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","object-assign":"^4.0.1","parse-json":"^2.1.0","pinkie-promise":"^2.0.0","read-all-stream":"^3.0.0","readable-stream":"^2.0.5","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"e1ee8338823f06a488b092ac9489d7100e932df5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-5.4.2.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"ignores":["test/**"]},"gitHead":"ba09d3662ff3d8f1f10150ee41d0170bc11c2f5e","_from":".","_npmVersion":"2.14.12","_nodeVersion":"4.2.4","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"},"_npmOperationalInternal":{"host":"packages-6-west.internal.npmjs.com","tmp":"tmp/got-5.4.2.tgz_1456683103650_0.0760814230889082"}},"5.5.0":{"_id":"got@5.5.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"5.5.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.5.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^3.2.2","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^2.0.0","duplexer2":"^0.1.4","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","object-assign":"^4.0.1","parse-json":"^2.1.0","pinkie-promise":"^2.0.0","read-all-stream":"^3.0.0","readable-stream":"^2.0.5","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"761cbbab3cda44e34123bf543d82c441b531f32d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-5.5.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"ignores":["test/**"]},"gitHead":"9ed4ed46bc8b219b3f838e4a7737628d370ec4ba","_from":".","_npmVersion":"2.14.12","_nodeVersion":"4.2.4","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"},"_npmOperationalInternal":{"host":"packages-13-west.internal.npmjs.com","tmp":"tmp/got-5.5.0.tgz_1456992043612_0.0267808532807976"}},"5.5.1":{"_id":"got@5.5.1","name":"got","description":"Simplified HTTP/HTTPS requests","version":"5.5.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.5.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^3.2.2","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^3.0.1","duplexer2":"^0.1.4","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","object-assign":"^4.0.1","parse-json":"^2.1.0","pinkie-promise":"^2.0.0","read-all-stream":"^3.0.0","readable-stream":"^2.0.5","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"c7d0af2beb0c0e21a6cc2cf235c6591960118a11","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-5.5.1.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"ignores":["test/**"]},"gitHead":"db9f86dfc25bc75c873a3191055a478ce21b403c","_from":".","_npmVersion":"2.14.20","_nodeVersion":"4.4.1","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/got-5.5.1.tgz_1459841349746_0.03332527121528983"}},"5.6.0":{"_id":"got@5.6.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"5.6.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.5.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^3.2.2","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^3.0.1","duplexer2":"^0.1.4","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","object-assign":"^4.0.1","parse-json":"^2.1.0","pinkie-promise":"^2.0.0","read-all-stream":"^3.0.0","readable-stream":"^2.0.5","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=0.10.0"},"files":["index.js"],"dist":{"shasum":"bb1d7ee163b78082bbc8eb836f3f395004ea6fbf","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-5.6.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"ignores":["test/**"]},"gitHead":"d6a81871cf6871548bc79fd9998fd7b47e730f0e","_from":".","_npmVersion":"2.14.20","_nodeVersion":"4.4.1","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/got-5.6.0.tgz_1459967538089_0.3577845075633377"}},"5.7.0":{"_id":"got@5.7.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"5.7.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.16.0","coveralls":"^2.11.4","form-data":"^2.1.1","get-port":"^2.0.0","get-stream":"^2.3.0","into-stream":"^2.0.0","nyc":"^8.1.0","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"0.16.x"},"dependencies":{"create-error-class":"^3.0.1","duplexer2":"^0.1.4","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","object-assign":"^4.0.1","parse-json":"^2.1.0","pinkie-promise":"^2.0.0","read-all-stream":"^3.0.0","readable-stream":"^2.0.5","timed-out":"^3.0.0","unzip-response":"^1.0.2","url-parse-lax":"^1.0.0"},"engines":{"node":">=0.10.0 <7"},"files":["index.js"],"dist":{"shasum":"718879e60f824cc0f69721127b835379b056a3af","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-5.7.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"ignores":["test/**"]},"gitHead":"295a6e9c3bfc891740789ed164b15733958d54eb","_from":".","_npmVersion":"2.15.1","_nodeVersion":"0.10.48","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"},"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/got-5.7.0.tgz_1477989819207_0.28333850181661546"}},"5.7.1":{"_id":"got@5.7.1","name":"got","description":"Simplified HTTP/HTTPS requests","version":"5.7.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.16.0","coveralls":"^2.11.4","form-data":"^2.1.1","get-port":"^2.0.0","get-stream":"^2.3.0","into-stream":"^2.0.0","nyc":"^8.1.0","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"0.16.x"},"dependencies":{"create-error-class":"^3.0.1","duplexer2":"^0.1.4","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","object-assign":"^4.0.1","parse-json":"^2.1.0","pinkie-promise":"^2.0.0","read-all-stream":"^3.0.0","readable-stream":"^2.0.5","timed-out":"^3.0.0","unzip-response":"^1.0.2","url-parse-lax":"^1.0.0"},"engines":{"node":">=0.10.0 <7"},"files":["index.js"],"dist":{"shasum":"5f81635a61e4a6589f180569ea4e381680a51f35","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-5.7.1.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"ignores":["test/**"]},"gitHead":"856b4caf16b02ce28ef0d92e83cf434a50b71e84","_from":".","_npmVersion":"2.15.1","_nodeVersion":"0.10.48","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"},"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/got-5.7.1.tgz_1478113400687_0.6078383799176663"}},"6.0.0-rc1":{"_id":"got@6.0.0-rc1","name":"got","description":"Simplified HTTP/HTTPS requests","version":"6.0.0-rc1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.7.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^4.0.1","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^3.0.0","@floatdrop/duplexer2":"^0.1.4","get-stream":"^1.1.0","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=4"},"files":["index.js"],"dist":{"shasum":"20830b1d5f6c5efa3601ed64d2ba07398c6415af","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-6.0.0-rc1.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"esnext":true,"ignores":["test/**"],"rules":{"prefer-reflect":1}},"gitHead":"0d90e18d2d9a63d2843e60c6057c3d4c6146279b","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.0","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"6.0.0":{"_id":"got@6.0.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"6.0.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.9.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^5.0.1","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^3.0.0","@floatdrop/duplexer2":"^0.1.4","get-stream":"^1.1.0","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=4"},"files":["index.js"],"dist":{"shasum":"0800d65a33a255e1fce7de1dd46e1e0b8c62c875","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-6.0.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"esnext":true},"gitHead":"e5c2d9e93137263c68db985b3dc5b57865c67b82","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.3","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"6.0.1":{"_id":"got@6.0.1","name":"got","description":"Simplified HTTP/HTTPS requests","version":"6.0.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.9.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^5.0.1","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"duplexer3":"^0.1.4","create-error-class":"^3.0.0","get-stream":"^1.1.0","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^2.0.0","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=4"},"files":["index.js"],"dist":{"shasum":"460455fdf793866a70c08e4d1f135e733256f528","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-6.0.1.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"esnext":true},"gitHead":"cbbb249ccb439738d803d26e48f679868a556740","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.3","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"6.0.2":{"_id":"got@6.0.2","name":"got","description":"Simplified HTTP/HTTPS requests","version":"6.0.2","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.9.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^5.0.1","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"duplexer3":"^0.1.4","create-error-class":"^3.0.0","get-stream":"^1.1.0","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^2.0.0","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=4"},"files":["index.js"],"dist":{"shasum":"34ba1bbb8ba17c30f02bc78e9c7f013de730601f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-6.0.2.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"esnext":true},"gitHead":"21be4c1e6634a9446bc4876fe718dda70da6aec8","_from":".","_npmVersion":"2.14.7","_nodeVersion":"4.2.3","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"6.1.0":{"_id":"got@6.1.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"6.1.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.10.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^5.0.1","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^3.0.0","duplexer3":"^0.1.4","get-stream":"^1.1.0","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^2.0.0","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=4"},"files":["index.js"],"dist":{"shasum":"8fd2c0f17e7a95753b0688ae5bcc86f41c7d5a93","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-6.1.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"esnext":true},"gitHead":"540f2b55459be9b1a762a159eef20fb2531d1dae","_from":".","_npmVersion":"2.14.12","_nodeVersion":"4.2.4","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"6.1.1":{"_id":"got@6.1.1","name":"got","description":"Simplified HTTP/HTTPS requests","version":"6.1.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.11.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^5.0.1","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^3.0.0","duplexer3":"^0.1.4","get-stream":"^1.1.0","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^2.0.0","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=4"},"files":["index.js"],"dist":{"shasum":"d7fdeeade40b82b4e583d1c626f64ff5dcba1980","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-6.1.1.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"esnext":true},"gitHead":"26ec3d43f077db28e4f3ee9eeb2de0bdc4afd0af","_from":".","_npmVersion":"2.14.12","_nodeVersion":"4.2.4","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"}},"6.1.2":{"_id":"got@6.1.2","name":"got","description":"Simplified HTTP/HTTPS requests","version":"6.1.2","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.12.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^5.0.1","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^3.0.0","duplexer3":"^0.1.4","get-stream":"^1.1.0","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^2.0.0","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=4"},"files":["index.js"],"dist":{"shasum":"4043ab0571216c0a86758151b6ab407e92b4d1a7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-6.1.2.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"esnext":true},"gitHead":"cecea2d1081c2dc255995229cbcf4eff92a7efb1","_from":".","_npmVersion":"2.14.12","_nodeVersion":"4.2.4","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"},"_npmOperationalInternal":{"host":"packages-9-west.internal.npmjs.com","tmp":"tmp/got-6.1.2.tgz_1456683078993_0.8965819810982794"}},"6.2.0":{"_id":"got@6.2.0","name":"got","description":"Simplified HTTP/HTTPS requests","version":"6.2.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.12.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^5.0.1","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^3.0.0","duplexer3":"^0.1.4","get-stream":"^1.1.0","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^2.0.0","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=4"},"files":["index.js"],"dist":{"shasum":"eab52adb8b44fad77430ed828d0d531264afb2d7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-6.2.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"esnext":true},"gitHead":"fc86dcc8f100c6b93fe70e945807a4c68be90f4f","_from":".","_npmVersion":"2.14.12","_nodeVersion":"4.2.4","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"},"_npmOperationalInternal":{"host":"packages-13-west.internal.npmjs.com","tmp":"tmp/got-6.2.0.tgz_1456991638863_0.8261470813304186"}},"6.3.0":{"_id":"got@6.3.0","name":"got","description":"Simplified HTTP requests","version":"6.3.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got","repository":{"type":"git","url":"https://github.com/sindresorhus/got"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.13.0","coveralls":"^2.11.4","get-port":"^2.0.0","into-stream":"^2.0.0","nyc":"^6.0.0","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^3.0.0","duplexer3":"^0.1.4","get-stream":"^1.1.0","is-plain-obj":"^1.0.0","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^2.0.0","timed-out":"^2.0.0","unzip-response":"^1.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=4"},"files":["index.js"],"dist":{"shasum":"4699e801063f58052b6d66208dc9670c67c18883","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-6.3.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"esnext":true},"gitHead":"d360a1d53624c33efbec884e3ef60ee67ddb2f7e","_from":".","_npmVersion":"2.14.20","_nodeVersion":"4.4.1","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/got-6.3.0.tgz_1459967587204_0.5463452294934541"}},"6.5.0":{"_id":"got@6.5.0","name":"got","description":"Simplified HTTP requests","version":"6.5.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.16.0","coveralls":"^2.11.4","form-data":"^1.0.1","get-port":"^2.0.0","get-stream":"^2.3.0","into-stream":"^3.0.0","nyc":"^8.1.0","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^3.0.0","duplexer3":"^0.1.4","get-stream":"^2.3.0","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^2.0.0","timed-out":"^2.0.0","unzip-response":"^2.0.1","url-parse-lax":"^1.0.0"},"engines":{"node":">=4"},"files":["index.js"],"dist":{"shasum":"67dcc727db871c7b250320860180e24d2db18a04","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-6.5.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"esnext":true},"gitHead":"c9f36716797122491ccae779768a9f8c7bf002fa","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.3.0","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"},"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/got-6.5.0.tgz_1473843739793_0.4577683887910098"}},"6.6.0":{"_id":"got@6.6.0","name":"got","description":"Simplified HTTP requests","version":"6.6.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.16.0","coveralls":"^2.11.4","form-data":"^2.1.1","get-port":"^2.0.0","get-stream":"^2.3.0","into-stream":"^3.0.0","nyc":"^8.1.0","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^3.0.0","duplexer3":"^0.1.4","get-stream":"^2.3.0","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^2.0.0","timed-out":"^3.0.0","unzip-response":"^2.0.1","url-parse-lax":"^1.0.0"},"engines":{"node":">=4"},"files":["index.js"],"dist":{"shasum":"8e9b2986e13c27bdea3b5f6707e11886131a452e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-6.6.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"esnext":true},"gitHead":"4f4ebd7531db3d1e8c1fd309c3dace6181d6175b","_from":".","_npmVersion":"2.15.1","_nodeVersion":"0.10.48","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/got-6.6.0.tgz_1477990276613_0.8485816544853151"}},"6.6.1":{"_id":"got@6.6.1","name":"got","description":"Simplified HTTP requests","version":"6.6.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.16.0","coveralls":"^2.11.4","form-data":"^2.1.1","get-port":"^2.0.0","get-stream":"^2.3.0","into-stream":"^3.0.0","nyc":"^8.1.0","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^3.0.0","duplexer3":"^0.1.4","get-stream":"^2.3.0","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^2.0.0","timed-out":"^3.0.0","unzip-response":"^2.0.1","url-parse-lax":"^1.0.0"},"engines":{"node":">=4"},"files":["index.js"],"dist":{"shasum":"542d7a0e34676060e561b1b90d103876eefabed2","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-6.6.1.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"esnext":true},"gitHead":"e6b86e862a2251c829255e341c1a7bdde4e62122","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"},"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/got-6.6.1.tgz_1478067096983_0.5160537739284337"}},"6.6.2":{"_id":"got@6.6.2","name":"got","description":"Simplified HTTP requests","version":"6.6.2","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.16.0","coveralls":"^2.11.4","form-data":"^2.1.1","get-port":"^2.0.0","get-stream":"^2.3.0","into-stream":"^3.0.0","nyc":"^8.1.0","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^3.0.0","duplexer3":"^0.1.4","get-stream":"^2.3.0","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^2.0.0","timed-out":"^3.0.0","unzip-response":"^2.0.1","url-parse-lax":"^1.0.0"},"engines":{"node":">=4.5.0"},"files":["index.js"],"dist":{"shasum":"2419c558bd41eb601b29317cc0dc329c17076b05","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-6.6.2.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"esnext":true},"gitHead":"bf790c52a2ad8c567a126696fc44b7c98f34d683","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/got-6.6.2.tgz_1478427331393_0.7536597871221602"}},"6.6.3":{"_id":"got@6.6.3","name":"got","description":"Simplified HTTP requests","version":"6.6.3","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.16.0","coveralls":"^2.11.4","form-data":"^2.1.1","get-port":"^2.0.0","get-stream":"^2.3.0","into-stream":"^3.0.0","nyc":"^8.1.0","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^3.0.0","duplexer3":"^0.1.4","get-stream":"^2.3.0","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^2.0.0","timed-out":"^3.0.0","unzip-response":"^2.0.1","url-parse-lax":"^1.0.0"},"engines":{"node":">=4"},"files":["index.js"],"dist":{"shasum":"ff72c56d7f040eb8918ffb80fb62bcaf489d4eec","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-6.6.3.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"esnext":true},"gitHead":"9af0330f4d29598ecea162ad6e7be58ece63e681","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/got-6.6.3.tgz_1478427923035_0.28121051751077175"}},"6.7.0":{"_id":"got@6.7.0","name":"got","description":"Simplified HTTP requests","version":"6.7.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.17.0","coveralls":"^2.11.4","form-data":"^2.1.1","get-port":"^2.0.0","into-stream":"^3.0.0","nyc":"^10.0.0","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^3.0.0","duplexer3":"^0.1.4","get-stream":"^3.0.0","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","safe-buffer":"^5.0.1","timed-out":"^4.0.0","unzip-response":"^2.0.1","url-parse-lax":"^1.0.0"},"engines":{"node":">=4"},"files":["index.js"],"dist":{"shasum":"a3a7a4473f4f3118095b24567ec5c1b04c069d26","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-6.7.0.tgz"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"floatdrop","email":"floatdrop@gmail.com"},{"name":"kevva","email":"kevinmartensson@gmail.com"}],"browser":{"unzip-response":false},"xo":{"esnext":true},"ava":{"concurrency":4},"gitHead":"e367ee460b3c4750093a48ede6c3a25e0b7590c7","_from":".","_npmVersion":"3.10.9","_nodeVersion":"6.9.2","_npmUser":{"name":"floatdrop","email":"floatdrop@gmail.com"},"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/got-6.7.0.tgz_1483006685204_0.2042575771920383"}},"6.7.1":{"_id":"got@6.7.1","name":"got","description":"Simplified HTTP requests","version":"6.7.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"repository":{"ShortcutSyntax":"sindresorhus/got"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":null,"devDependencies":{"ava":"^0.17.0","coveralls":"^2.11.4","form-data":"^2.1.1","get-port":"^2.0.0","into-stream":"^3.0.0","nyc":"^10.0.0","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"*"},"dependencies":{"create-error-class":"^3.0.0","duplexer3":"^0.1.4","get-stream":"^3.0.0","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","safe-buffer":"^5.0.1","timed-out":"^4.0.0","unzip-response":"^2.0.1","url-parse-lax":"^1.0.0"},"engines":{"node":">=4"},"files":["index.js"],"dist":{"shasum":"240cd05785a9a18e561dc1b44b41c763ef1e8db0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-6.7.1.tgz"},"maintainers":[{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"sindresorhus.com"},{"name":"Vsevolod Strukchinsky","email":"floatdrop@gmail.com","url":"github.com/floatdrop"}],"browser":{"unzip-response":false},"xo":{"esnext":true},"ava":{"concurrency":4}},"7.0.0":{"_id":"got@7.0.0","name":"got","description":"Simplified HTTP requests","version":"7.0.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.19.1","coveralls":"^2.11.4","form-data":"^2.1.1","get-port":"^3.0.0","into-stream":"^3.0.0","nyc":"^10.0.0","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","tempy":"^0.1.0","universal-url":"^1.0.0-alpha","xo":"^0.18.0"},"dependencies":{"decompress-response":"^3.2.0","duplexer3":"^0.1.4","get-stream":"^3.0.0","is-plain-obj":"^1.1.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","isurl":"^1.0.0-alpha5","lowercase-keys":"^1.0.0","p-cancelable":"^0.2.0","p-timeout":"^1.1.1","safe-buffer":"^5.0.1","timed-out":"^4.0.0","url-parse-lax":"^1.0.0"},"engines":{"node":">=4"},"files":["index.js"],"dist":{"shasum":"82d439f6763cdb1c8821b7a3aae2784c88c3b8d3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-7.0.0.tgz"},"maintainers":[{"email":"alex.tesfamichael@gmail.com","name":"alextes"},{"email":"kevinmartensson@gmail.com","name":"kevva"},{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"floatdrop@gmail.com","name":"floatdrop"}],"ava":{"concurrency":4},"browser":{"decompress-response":false},"gitHead":"c20bc5e8c826045e11a3497baef413232871d6fa","_from":".","_npmVersion":"2.15.11","_nodeVersion":"4.8.3","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got-7.0.0.tgz_1496044922128_0.4668192621320486"}},"7.1.0":{"_id":"got@7.1.0","name":"got","description":"Simplified HTTP requests","version":"7.1.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.20.0","coveralls":"^2.11.4","form-data":"^2.1.1","get-port":"^3.0.0","into-stream":"^3.0.0","nyc":"^11.0.2","pem":"^1.4.4","pify":"^3.0.0","tempfile":"^2.0.0","tempy":"^0.1.0","universal-url":"^1.0.0-alpha","xo":"^0.18.0"},"dependencies":{"decompress-response":"^3.2.0","duplexer3":"^0.1.4","get-stream":"^3.0.0","is-plain-obj":"^1.1.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","isurl":"^1.0.0-alpha5","lowercase-keys":"^1.0.0","p-cancelable":"^0.3.0","p-timeout":"^1.1.1","safe-buffer":"^5.0.1","timed-out":"^4.0.0","url-parse-lax":"^1.0.0","url-to-options":"^1.0.1"},"engines":{"node":">=4"},"files":["index.js"],"dist":{"shasum":"05450fd84094e6bbea56f451a43a9c289166385a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-7.1.0.tgz"},"maintainers":[{"email":"alex.tesfamichael@gmail.com","name":"alextes"},{"email":"kevinmartensson@gmail.com","name":"kevva"},{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"floatdrop@gmail.com","name":"floatdrop"}],"ava":{"concurrency":4},"browser":{"decompress-response":false},"gitHead":"b725ef576864fc6dd331b4df58ddb12f2f7d6b3a","_npmVersion":"5.0.0","_nodeVersion":"8.0.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got-7.1.0.tgz_1498837826024_0.5711319362744689"}},"8.0.0":{"_id":"got@8.0.0","name":"got","description":"Simplified HTTP requests","version":"8.0.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.23.0","coveralls":"^3.0.0","form-data":"^2.1.1","get-port":"^3.0.0","nyc":"^11.0.2","p-event":"^1.3.0","pem":"^1.4.4","sinon":"^4.0.0","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","universal-url":"1.0.0-alpha","xo":"^0.18.0"},"dependencies":{"cacheable-request":"^2.1.1","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^3.0.0","into-stream":"^3.1.0","is-plain-obj":"^1.1.0","is-retry-allowed":"^1.1.0","is-stream":"^1.1.0","isurl":"^1.0.0-alpha5","lowercase-keys":"^1.0.0","mimic-response":"^1.0.0","p-cancelable":"^0.3.0","p-timeout":"^1.2.0","pify":"^3.0.0","safe-buffer":"^5.1.1","timed-out":"^4.0.1","url-parse-lax":"^3.0.0","url-to-options":"^1.0.1"},"engines":{"node":">=4"},"files":["index.js"],"dist":{"shasum":"57a11f841edc58e3f3eba4b3ac220faf5133770f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-8.0.0.tgz"},"maintainers":[{"email":"alex.tesfamichael@gmail.com","name":"alextes"},{"email":"kevinmartensson@gmail.com","name":"kevva"},{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"floatdrop@gmail.com","name":"floatdrop"}],"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false},"gitHead":"570ff68c4853beda669ed597cd97f5acc24b9f60","_npmVersion":"5.5.1","_nodeVersion":"9.2.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got-8.0.0.tgz_1510826780925_0.03324738144874573"}},"8.0.1":{"_id":"got@8.0.1","name":"got","description":"Simplified HTTP requests","version":"8.0.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.23.0","coveralls":"^3.0.0","form-data":"^2.1.1","get-port":"^3.0.0","nyc":"^11.0.2","p-event":"^1.3.0","pem":"^1.4.4","sinon":"^4.0.0","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","universal-url":"1.0.0-alpha","xo":"^0.18.0"},"dependencies":{"@sindresorhus/is":"^0.6.0","cacheable-request":"^2.1.1","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^3.0.0","into-stream":"^3.1.0","is-retry-allowed":"^1.1.0","isurl":"^1.0.0-alpha5","lowercase-keys":"^1.0.0","mimic-response":"^1.0.0","p-cancelable":"^0.3.0","p-timeout":"^2.0.1","pify":"^3.0.0","safe-buffer":"^5.1.1","timed-out":"^4.0.1","url-parse-lax":"^3.0.0","url-to-options":"^1.0.1"},"engines":{"node":">=4"},"files":["index.js"],"dist":{"shasum":"6d7f8bb3eb99e5af912efe26a104476441e08e7f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-8.0.1.tgz"},"maintainers":[{"email":"alex.tesfamichael@gmail.com","name":"alextes"},{"email":"kevinmartensson@gmail.com","name":"kevva"},{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"floatdrop@gmail.com","name":"floatdrop"}],"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false},"gitHead":"685c7f3701c38d01e918221e2995c657151505f6","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.11.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got-8.0.1.tgz_1512132624720_0.8290727592539042"}},"8.0.2":{"_id":"got@8.0.2","name":"got","description":"Simplified HTTP requests","version":"8.0.2","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.24.0","coveralls":"^3.0.0","form-data":"^2.1.1","get-port":"^3.0.0","nyc":"^11.0.2","p-event":"^1.3.0","pem":"^1.4.4","sinon":"^4.0.0","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","universal-url":"1.0.0-alpha","xo":"^0.18.0"},"dependencies":{"@sindresorhus/is":"^0.7.0","cacheable-request":"^2.1.1","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^3.0.0","into-stream":"^3.1.0","is-retry-allowed":"^1.1.0","isurl":"^1.0.0-alpha5","lowercase-keys":"^1.0.0","mimic-response":"^1.0.0","p-cancelable":"^0.3.0","p-timeout":"^2.0.1","pify":"^3.0.0","safe-buffer":"^5.1.1","timed-out":"^4.0.1","url-parse-lax":"^3.0.0","url-to-options":"^1.0.1"},"engines":{"node":">=4"},"files":["index.js","errors.js"],"dist":{"shasum":"94d2054767875df4d5eb330f703c63881fc9cd64","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-8.0.2.tgz"},"maintainers":[{"email":"floatdrop@gmail.com","name":"floatdrop"},{"email":"alex.tesfamichael@gmail.com","name":"alextes"},{"email":"kevinmartensson@gmail.com","name":"kevva"},{"email":"sindresorhus@gmail.com","name":"sindresorhus"}],"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false},"gitHead":"f607c7d2a9f6d5da3d3eb0b17a9151054d98e61c","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got-8.0.2.tgz_1515851818300_0.5123776632826775"}},"8.0.3":{"_id":"got@8.0.3","name":"got","description":"Simplified HTTP requests","version":"8.0.3","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.24.0","coveralls":"^3.0.0","form-data":"^2.1.1","get-port":"^3.0.0","nyc":"^11.0.2","p-event":"^1.3.0","pem":"^1.4.4","sinon":"^4.0.0","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","universal-url":"1.0.0-alpha","xo":"^0.18.0"},"dependencies":{"@sindresorhus/is":"^0.7.0","cacheable-request":"^2.1.1","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^3.0.0","into-stream":"^3.1.0","is-retry-allowed":"^1.1.0","isurl":"^1.0.0-alpha5","lowercase-keys":"^1.0.0","mimic-response":"^1.0.0","p-cancelable":"^0.3.0","p-timeout":"^2.0.1","pify":"^3.0.0","safe-buffer":"^5.1.1","timed-out":"^4.0.1","url-parse-lax":"^3.0.0","url-to-options":"^1.0.1"},"engines":{"node":">=4"},"files":["index.js","errors.js"],"dist":{"shasum":"15d038e8101f89e93585d1639d9c49e8a55ae6bc","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-8.0.3.tgz"},"maintainers":[{"email":"floatdrop@gmail.com","name":"floatdrop"},{"email":"alex.tesfamichael@gmail.com","name":"alextes"},{"email":"kevinmartensson@gmail.com","name":"kevva"},{"email":"sindresorhus@gmail.com","name":"sindresorhus"}],"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false},"gitHead":"3f427bb08f30e9a9b8581e77ebb259b52f19d7c5","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got-8.0.3.tgz_1516481774979_0.3266338026151061"}},"8.1.0":{"_id":"got@8.1.0","name":"got","description":"Simplified HTTP requests","version":"8.1.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.24.0","coveralls":"^3.0.0","form-data":"^2.1.1","get-port":"^3.0.0","nyc":"^11.0.2","p-event":"^1.3.0","pem":"^1.4.4","sinon":"^4.0.0","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","universal-url":"1.0.0-alpha","xo":"^0.18.0"},"dependencies":{"@sindresorhus/is":"^0.7.0","cacheable-request":"^2.1.1","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^3.0.0","into-stream":"^3.1.0","is-retry-allowed":"^1.1.0","isurl":"^1.0.0-alpha5","lowercase-keys":"^1.0.0","mimic-response":"^1.0.0","p-cancelable":"^0.3.0","p-timeout":"^2.0.1","pify":"^3.0.0","safe-buffer":"^5.1.1","timed-out":"^4.0.1","url-parse-lax":"^3.0.0","url-to-options":"^1.0.1"},"engines":{"node":">=4"},"files":["index.js","errors.js"],"dist":{"shasum":"353a8cdf85ef8f958a38de7729610c43c179141b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-8.1.0.tgz"},"maintainers":[{"email":"alex.tesfamichael@gmail.com","name":"alextes"},{"email":"floatdrop@gmail.com","name":"floatdrop"},{"email":"kevinmartensson@gmail.com","name":"kevva"},{"email":"sindresorhus@gmail.com","name":"sindresorhus"}],"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false},"gitHead":"17011250185fb37dc435186e6d3fbd4bcdd0f7f6","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_8.1.0_1518362489760_0.6916592588929329"},"_hasShrinkwrap":false},"8.2.0":{"_id":"got@8.2.0","name":"got","description":"Simplified HTTP requests","version":"8.2.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.25.0","coveralls":"^3.0.0","form-data":"^2.1.1","get-port":"^3.0.0","nyc":"^11.0.2","p-event":"^1.3.0","pem":"^1.4.4","sinon":"^4.0.0","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","universal-url":"1.0.0-alpha","xo":"^0.20.0"},"dependencies":{"@sindresorhus/is":"^0.7.0","cacheable-request":"^2.1.1","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^3.0.0","into-stream":"^3.1.0","is-retry-allowed":"^1.1.0","isurl":"^1.0.0-alpha5","lowercase-keys":"^1.0.0","mimic-response":"^1.0.0","p-cancelable":"^0.3.0","p-timeout":"^2.0.1","pify":"^3.0.0","safe-buffer":"^5.1.1","timed-out":"^4.0.1","url-parse-lax":"^3.0.0","url-to-options":"^1.0.1"},"engines":{"node":">=4"},"files":["index.js","errors.js"],"dist":{"shasum":"0d11a071d05046348a2f5c0a5fa047fb687fdfc6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-8.2.0.tgz"},"maintainers":[{"email":"alex.tesfamichael@gmail.com","name":"alextes"},{"email":"floatdrop@gmail.com","name":"floatdrop"},{"email":"kevinmartensson@gmail.com","name":"kevva"},{"email":"sindresorhus@gmail.com","name":"sindresorhus"}],"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false},"gitHead":"3963b5a25fcd42114ca139e08b625f808d57efbe","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_8.2.0_1519021389250_0.18971065946124077"},"_hasShrinkwrap":false},"8.3.0":{"_id":"got@8.3.0","name":"got","description":"Simplified HTTP requests","version":"8.3.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.25.0","coveralls":"^3.0.0","form-data":"^2.1.1","get-port":"^3.0.0","nyc":"^11.0.2","p-event":"^1.3.0","pem":"^1.4.4","proxyquire":"^1.8.0","sinon":"^4.0.0","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","universal-url":"1.0.0-alpha","xo":"^0.20.0"},"dependencies":{"@sindresorhus/is":"^0.7.0","cacheable-request":"^2.1.1","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^3.0.0","into-stream":"^3.1.0","is-retry-allowed":"^1.1.0","isurl":"^1.0.0-alpha5","lowercase-keys":"^1.0.0","mimic-response":"^1.0.0","p-cancelable":"^0.4.0","p-timeout":"^2.0.1","pify":"^3.0.0","safe-buffer":"^5.1.1","timed-out":"^4.0.1","url-parse-lax":"^3.0.0","url-to-options":"^1.0.1"},"engines":{"node":">=4"},"files":["index.js","errors.js"],"dist":{"shasum":"6ba26e75f8a6cc4c6b3eb1fe7ce4fec7abac8533","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-8.3.0.tgz"},"maintainers":[{"email":"alex.tesfamichael@gmail.com","name":"alextes"},{"email":"floatdrop@gmail.com","name":"floatdrop"},{"email":"kevinmartensson@gmail.com","name":"kevva"},{"email":"sindresorhus@gmail.com","name":"sindresorhus"}],"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false},"gitHead":"7d1aa01e69229ad50ce355589681ff1d1a765627","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_8.3.0_1520614656306_0.5834686069770603"},"_hasShrinkwrap":false},"8.3.1":{"_id":"got@8.3.1","name":"got","description":"Simplified HTTP requests","version":"8.3.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^0.25.0","coveralls":"^3.0.0","form-data":"^2.1.1","get-port":"^3.0.0","nyc":"^11.0.2","p-event":"^1.3.0","pem":"^1.4.4","proxyquire":"^1.8.0","sinon":"^4.0.0","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","universal-url":"1.0.0-alpha","xo":"^0.20.0"},"dependencies":{"@sindresorhus/is":"^0.7.0","cacheable-request":"^2.1.1","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^3.0.0","into-stream":"^3.1.0","is-retry-allowed":"^1.1.0","isurl":"^1.0.0-alpha5","lowercase-keys":"^1.0.0","mimic-response":"^1.0.0","p-cancelable":"^0.4.0","p-timeout":"^2.0.1","pify":"^3.0.0","safe-buffer":"^5.1.1","timed-out":"^4.0.1","url-parse-lax":"^3.0.0","url-to-options":"^1.0.1"},"engines":{"node":">=4"},"files":["index.js","errors.js"],"dist":{"shasum":"093324403d4d955f5a16a7a8d39955d055ae10ed","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-8.3.1.tgz"},"maintainers":[{"email":"alex.tesfamichael@gmail.com","name":"alextes"},{"email":"floatdrop@gmail.com","name":"floatdrop"},{"email":"kevinmartensson@gmail.com","name":"kevva"},{"email":"sindresorhus@gmail.com","name":"sindresorhus"}],"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false},"gitHead":"bd3315b6c61d20a68944831d8b3a05046d5554ad","_npmVersion":"5.6.0","_nodeVersion":"8.11.1","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_8.3.1_1525159947345_0.628558559395153"},"_hasShrinkwrap":false},"8.3.2":{"_id":"got@8.3.2","name":"got","description":"Simplified HTTP requests","version":"8.3.2","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"repository":{"ShortcutSyntax":"sindresorhus/got"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":null,"devDependencies":{"ava":"^0.25.0","coveralls":"^3.0.0","form-data":"^2.1.1","get-port":"^3.0.0","nyc":"^11.0.2","p-event":"^1.3.0","pem":"^1.4.4","proxyquire":"^1.8.0","sinon":"^4.0.0","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","universal-url":"1.0.0-alpha","xo":"^0.20.0"},"dependencies":{"@sindresorhus/is":"^0.7.0","cacheable-request":"^2.1.1","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^3.0.0","into-stream":"^3.1.0","is-retry-allowed":"^1.1.0","isurl":"^1.0.0-alpha5","lowercase-keys":"^1.0.0","mimic-response":"^1.0.0","p-cancelable":"^0.4.0","p-timeout":"^2.0.1","pify":"^3.0.0","safe-buffer":"^5.1.1","timed-out":"^4.0.1","url-parse-lax":"^3.0.0","url-to-options":"^1.0.1"},"engines":{"node":">=4"},"files":["index.js","errors.js"],"dist":{"shasum":"1d23f64390e97f776cac52e5b936e5f514d2e937","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-8.3.2.tgz"},"maintainers":[{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"sindresorhus.com"},{"name":"Vsevolod Strukchinsky","email":"floatdrop@gmail.com","url":"github.com/floatdrop"},{"name":"Alexander Tesfamichael","email":"alex.tesfamichael@gmail.com","url":"alextes.me"}],"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false}},"9.0.0":{"_id":"got@9.0.0","name":"got","description":"Simplified HTTP requests","version":"9.0.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"^1.0.0-beta.6","coveralls":"^3.0.0","delay":"^3.0.0","form-data":"^2.1.1","get-port":"^4.0.0","nyc":"^12.0.2","p-event":"^2.1.0","pem":"^1.4.4","proxyquire":"^2.0.1","sinon":"^6.1.0","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","xo":"^0.21.1"},"dependencies":{"@sindresorhus/is":"^0.11.0","cacheable-request":"^4.0.1","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^3.0.0","mimic-response":"^1.0.0","p-cancelable":"^0.5.0","to-readable-stream":"^1.0.0","url-parse-lax":"^3.0.0"},"engines":{"node":">=8.6"},"files":["source"],"main":"source","dist":{"shasum":"8673d2838adbac8a2e4a07e5772e238c701e9b7c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-9.0.0.tgz"},"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false},"gitHead":"3a145c0477b2b2f7607107a6f0cb69f6b19574bb","_npmVersion":"6.3.0","_nodeVersion":"8.11.3","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"alex.tesfamichael@gmail.com","name":"alextes"},{"email":"floatdrop@gmail.com","name":"floatdrop"},{"email":"kevinmartensson@gmail.com","name":"kevva"},{"email":"lukechilds123@gmail.com","name":"lukechilds"},{"email":"sindresorhus@gmail.com","name":"sindresorhus"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_9.0.0_1533365028069_0.829938386523517"},"_hasShrinkwrap":false},"9.1.0":{"_id":"got@9.1.0","name":"got","description":"Simplified HTTP requests","version":"9.1.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"1.0.0-beta.7","coveralls":"^3.0.0","delay":"^3.0.0","form-data":"^2.1.1","get-port":"^4.0.0","nyc":"^12.0.2","p-event":"^2.1.0","pem":"^1.4.4","proxyquire":"^2.0.1","sinon":"^6.1.0","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","xo":"^0.22.0"},"dependencies":{"@sindresorhus/is":"^0.11.0","cacheable-request":"^4.0.1","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^4.0.0","mimic-response":"^1.0.1","p-cancelable":"^0.5.0","to-readable-stream":"^1.0.0","url-parse-lax":"^3.0.0"},"engines":{"node":">=8.6"},"files":["source"],"main":"source","dist":{"shasum":"e31aa530bf953ca51599c5722039f891e49cf2ca","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-9.1.0.tgz"},"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false},"gitHead":"1c54a03bc6a809b73970f1694d3fccd22b664997","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"alex.tesfamichael@gmail.com","name":"alextes"},{"email":"floatdrop@gmail.com","name":"floatdrop"},{"email":"kevinmartensson@gmail.com","name":"kevva"},{"email":"lukechilds123@gmail.com","name":"lukechilds"},{"email":"sindresorhus@gmail.com","name":"sindresorhus"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_9.1.0_1535025379793_0.797993204647272"},"_hasShrinkwrap":false},"9.2.0":{"_id":"got@9.2.0","name":"got","description":"Simplified HTTP requests","version":"9.2.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"ava":"1.0.0-beta.7","coveralls":"^3.0.0","delay":"^3.0.0","form-data":"^2.1.1","get-port":"^4.0.0","nyc":"^12.0.2","p-event":"^2.1.0","pem":"^1.4.4","proxyquire":"^2.0.1","sinon":"^6.1.0","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","tough-cookie":"^2.4.3","xo":"^0.22.0"},"dependencies":{"@sindresorhus/is":"^0.11.0","@szmarczak/http-timer":"^1.1.0","cacheable-request":"^4.0.1","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^4.0.0","mimic-response":"^1.0.1","p-cancelable":"^0.5.0","to-readable-stream":"^1.0.0","url-parse-lax":"^3.0.0"},"engines":{"node":">=8.6"},"main":"source","dist":{"shasum":"f6aa4e26c984a3175f1073c421e2e40640f8295c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-9.2.0.tgz"},"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false},"gitHead":"aec95d2ddaa25cbb09cc1b3a0084e2051345a574","_npmVersion":"5.6.0","_nodeVersion":"8.11.4","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"alex.tesfamichael@gmail.com","name":"alextes"},{"email":"floatdrop@gmail.com","name":"floatdrop"},{"email":"kevinmartensson@gmail.com","name":"kevva"},{"email":"lukechilds123@gmail.com","name":"lukechilds"},{"email":"sindresorhus@gmail.com","name":"sindresorhus"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_9.2.0_1535714198736_0.032577579628410236"},"_hasShrinkwrap":false},"9.2.1":{"_id":"got@9.2.1","name":"got","description":"Simplified HTTP requests","version":"9.2.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava"},"directories":{},"devDependencies":{"ava":"1.0.0-beta.8","coveralls":"^3.0.0","delay":"^4.0.0","form-data":"^2.1.1","get-port":"^4.0.0","nyc":"^13.0.1","p-event":"^2.1.0","pem":"^1.4.4","proxyquire":"^2.0.1","sinon":"^6.1.0","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","tough-cookie":"^2.4.3","xo":"^0.23.0"},"dependencies":{"@sindresorhus/is":"^0.11.0","@szmarczak/http-timer":"^1.1.0","cacheable-request":"^5.0.0","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^4.0.0","mimic-response":"^1.0.1","p-cancelable":"^0.5.0","to-readable-stream":"^1.0.0","url-parse-lax":"^3.0.0"},"engines":{"node":">=8.6"},"main":"source","dist":{"shasum":"dc2145dfa26ee8e33a9b22e0c54a630f1c2df0ae","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-9.2.1.tgz"},"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false},"gitHead":"0ddf3ac4a97739a733a4126d8c5ac48075f17a15","_npmVersion":"5.6.0","_nodeVersion":"8.11.4","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"alex.tesfamichael@gmail.com","name":"alextes"},{"email":"floatdrop@gmail.com","name":"floatdrop"},{"email":"kevinmartensson@gmail.com","name":"kevva"},{"email":"lukechilds123@gmail.com","name":"lukechilds"},{"email":"sindresorhus@gmail.com","name":"sindresorhus"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_9.2.1_1536230056271_0.5184274546412673"},"_hasShrinkwrap":false},"9.2.2":{"_id":"got@9.2.2","name":"got","description":"Simplified HTTP requests","version":"9.2.2","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava"},"directories":{},"devDependencies":{"ava":"1.0.0-beta.8","coveralls":"^3.0.0","delay":"^4.0.0","form-data":"^2.1.1","get-port":"^4.0.0","nyc":"^13.0.1","p-event":"^2.1.0","pem":"^1.4.4","proxyquire":"^2.0.1","sinon":"^6.1.0","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","tough-cookie":"^2.4.3","xo":"^0.23.0"},"dependencies":{"@sindresorhus/is":"^0.11.0","@szmarczak/http-timer":"^1.1.0","cacheable-request":"^5.0.0","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^4.0.0","mimic-response":"^1.0.1","p-cancelable":"^0.5.0","to-readable-stream":"^1.0.0","url-parse-lax":"^3.0.0"},"engines":{"node":">=8.6"},"main":"source","dist":{"shasum":"d6cb73f40d4cb512864c2f66f275f258ab43aa25","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-9.2.2.tgz"},"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false},"gitHead":"248d68c997f1c37551a4d6b56695bfe17a5db14e","_npmVersion":"6.4.1","_nodeVersion":"8.11.4","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"alex.tesfamichael@gmail.com","name":"alextes"},{"email":"floatdrop@gmail.com","name":"floatdrop"},{"email":"kevinmartensson@gmail.com","name":"kevva"},{"email":"lukechilds123@gmail.com","name":"lukechilds"},{"email":"sindresorhus@gmail.com","name":"sindresorhus"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_9.2.2_1537161699123_0.8406477951172775"},"_hasShrinkwrap":false},"9.3.0":{"_id":"got@9.3.0","name":"got","description":"Simplified HTTP requests","version":"9.3.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","release":"np"},"directories":{},"devDependencies":{"ava":"1.0.0-rc.1","coveralls":"^3.0.0","delay":"^4.1.0","form-data":"^2.3.3","get-port":"^4.0.0","np":"^3.0.4","nyc":"^13.1.0","p-event":"^2.1.0","pem":"^1.13.2","proxyquire":"^2.0.1","sinon":"^7.1.0","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","tough-cookie":"^2.4.3","xo":"^0.23.0"},"dependencies":{"@sindresorhus/is":"^0.12.0","@szmarczak/http-timer":"^1.1.0","cacheable-request":"^5.1.0","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^4.1.0","lowercase-keys":"^1.0.1","mimic-response":"^1.0.1","p-cancelable":"^1.0.0","to-readable-stream":"^1.0.0","url-parse-lax":"^3.0.0"},"engines":{"node":">=8.6"},"main":"source","dist":{"shasum":"9187472a6e7c642264d041b0e670fd8bb1eebb67","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-9.3.0.tgz"},"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false},"gitHead":"232e0f365ff4a636e9fc53bda79f4b483998cc50","_npmVersion":"6.4.1","_nodeVersion":"10.12.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_9.3.0_1540890115149_0.03451283131331917"},"_hasShrinkwrap":false},"9.3.1":{"_id":"got@9.3.1","name":"got","description":"Simplified HTTP requests","version":"9.3.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","release":"np"},"directories":{},"devDependencies":{"ava":"1.0.0-rc.1","coveralls":"^3.0.0","delay":"^4.1.0","form-data":"^2.3.3","get-port":"^4.0.0","np":"^3.0.4","nyc":"^13.1.0","p-event":"^2.1.0","pem":"^1.13.2","proxyquire":"^2.0.1","sinon":"^7.1.0","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","tough-cookie":"^2.4.3","xo":"^0.23.0"},"dependencies":{"@sindresorhus/is":"^0.12.0","@szmarczak/http-timer":"^1.1.0","cacheable-request":"^5.1.0","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^4.1.0","lowercase-keys":"^1.0.1","mimic-response":"^1.0.1","p-cancelable":"^1.0.0","to-readable-stream":"^1.0.0","url-parse-lax":"^3.0.0"},"engines":{"node":">=8.6"},"main":"source","dist":{"shasum":"f0e6d531e6ece50375de4f18a640b716862f102c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-9.3.1.tgz"},"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false},"gitHead":"50fdab303cb2a6b34383de13e5e0ece9ceaf80c9","_npmVersion":"6.4.1","_nodeVersion":"10.13.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_9.3.1_1541247666080_0.9531824350208147"},"_hasShrinkwrap":false},"9.3.2":{"_id":"got@9.3.2","name":"got","description":"Simplified HTTP requests","version":"9.3.2","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","release":"np"},"directories":{},"devDependencies":{"ava":"1.0.0-rc.1","coveralls":"^3.0.0","delay":"^4.1.0","form-data":"^2.3.3","get-port":"^4.0.0","np":"^3.0.4","nyc":"^13.1.0","p-event":"^2.1.0","pem":"^1.13.2","proxyquire":"^2.0.1","sinon":"^7.1.0","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","tough-cookie":"^2.4.3","xo":"^0.23.0"},"dependencies":{"@sindresorhus/is":"^0.12.0","@szmarczak/http-timer":"^1.1.0","cacheable-request":"^5.1.0","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^4.1.0","lowercase-keys":"^1.0.1","mimic-response":"^1.0.1","p-cancelable":"^1.0.0","to-readable-stream":"^1.0.0","url-parse-lax":"^3.0.0"},"engines":{"node":">=8.6"},"main":"source","dist":{"shasum":"f6e3bd063aa8f461ccd924afa2ba2b61deab3989","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-9.3.2.tgz"},"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false},"gitHead":"4a383f23887edff7b2569b6984eb3d1a2e13f94d","_npmVersion":"6.4.1","_nodeVersion":"8.12.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_9.3.2_1541693915420_0.15524097139641668"},"_hasShrinkwrap":false},"9.4.0":{"_id":"got@9.4.0","name":"got","description":"Simplified HTTP requests","version":"9.4.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","release":"np"},"directories":{},"devDependencies":{"ava":"1.0.0-rc.1","coveralls":"^3.0.0","delay":"^4.1.0","form-data":"^2.3.3","get-port":"^4.0.0","np":"^3.0.4","nyc":"^13.1.0","p-event":"^2.1.0","pem":"^1.13.2","proxyquire":"^2.0.1","sinon":"^7.1.0","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","tough-cookie":"^2.4.3","xo":"^0.23.0"},"dependencies":{"@sindresorhus/is":"^0.12.0","@szmarczak/http-timer":"^1.1.0","cacheable-request":"^5.1.0","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^4.1.0","lowercase-keys":"^1.0.1","mimic-response":"^1.0.1","p-cancelable":"^1.0.0","to-readable-stream":"^1.0.0","url-parse-lax":"^3.0.0"},"engines":{"node":">=8.6"},"main":"source","dist":{"shasum":"3b52a54306514b0404b869e1ba572b594772f2b1","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-9.4.0.tgz"},"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false},"gitHead":"533d7e51ef56f2007ca426cc23b8cbda7ec36b32","_npmVersion":"6.4.1","_nodeVersion":"10.13.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_9.4.0_1544475955788_0.7242244388861145"},"_hasShrinkwrap":false},"9.5.0":{"_id":"got@9.5.0","name":"got","description":"Simplified HTTP requests","version":"9.5.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","release":"np"},"directories":{},"devDependencies":{"ava":"^1.0.1","coveralls":"^3.0.0","delay":"^4.1.0","form-data":"^2.3.3","get-port":"^4.0.0","np":"^3.1.0","nyc":"^13.1.0","p-event":"^2.1.0","pem":"^1.13.2","proxyquire":"^2.0.1","sinon":"^7.2.2","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","tough-cookie":"^2.4.3","xo":"^0.23.0"},"dependencies":{"@sindresorhus/is":"^0.14.0","@szmarczak/http-timer":"^1.1.0","cacheable-request":"^5.1.0","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^4.1.0","lowercase-keys":"^1.0.1","mimic-response":"^1.0.1","p-cancelable":"^1.0.0","to-readable-stream":"^1.0.0","url-parse-lax":"^3.0.0"},"engines":{"node":">=8.6"},"main":"source","dist":{"shasum":"6fd0312c6b694c0a11d9119d95fd7daed174eb49","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-9.5.0.tgz"},"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false},"gitHead":"91c0607b21f85adc568a0d182b47483e59855f95","_npmVersion":"6.5.0","_nodeVersion":"10.13.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_9.5.0_1545145717894_0.3079192997691842"},"_hasShrinkwrap":false},"9.5.1":{"_id":"got@9.5.1","name":"got","description":"Simplified HTTP requests","version":"9.5.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava","release":"np"},"directories":{},"devDependencies":{"ava":"^1.0.1","coveralls":"^3.0.0","delay":"^4.1.0","form-data":"^2.3.3","get-port":"^4.0.0","np":"^3.1.0","nyc":"^13.1.0","p-event":"^2.1.0","pem":"^1.13.2","proxyquire":"^2.0.1","sinon":"^7.2.2","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","tough-cookie":"^2.4.3","xo":"^0.23.0"},"dependencies":{"@sindresorhus/is":"^0.14.0","@szmarczak/http-timer":"^1.1.2","cacheable-request":"^6.0.0","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^4.1.0","lowercase-keys":"^1.0.1","mimic-response":"^1.0.1","p-cancelable":"^1.0.0","to-readable-stream":"^1.0.0","url-parse-lax":"^3.0.0"},"engines":{"node":">=8.6"},"main":"source","dist":{"shasum":"9cd83c64978225790c5142fc4e492cdea01256ef","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-9.5.1.tgz"},"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false},"gitHead":"6ce603e99a17d258751ddce23b1c9d424b7be795","_npmVersion":"6.5.0","_nodeVersion":"10.13.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_9.5.1_1547359586088_0.39918191915009094"},"_hasShrinkwrap":false},"9.6.0":{"_id":"got@9.6.0","name":"got","description":"Simplified HTTP requests","version":"9.6.0","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron"],"repository":{"ShortcutSyntax":"sindresorhus/got"},"license":"MIT","scripts":{"test":"xo && nyc ava","release":"np"},"directories":null,"devDependencies":{"ava":"^1.1.0","coveralls":"^3.0.0","delay":"^4.1.0","form-data":"^2.3.3","get-port":"^4.0.0","np":"^3.1.0","nyc":"^13.1.0","p-event":"^2.1.0","pem":"^1.13.2","proxyquire":"^2.0.1","sinon":"^7.2.2","slow-stream":"0.0.4","tempfile":"^2.0.0","tempy":"^0.2.1","tough-cookie":"^3.0.0","xo":"^0.24.0"},"dependencies":{"@sindresorhus/is":"^0.14.0","@szmarczak/http-timer":"^1.1.2","cacheable-request":"^6.0.0","decompress-response":"^3.3.0","duplexer3":"^0.1.4","get-stream":"^4.1.0","lowercase-keys":"^1.0.1","mimic-response":"^1.0.1","p-cancelable":"^1.0.0","to-readable-stream":"^1.0.0","url-parse-lax":"^3.0.0"},"engines":{"node":">=8.6"},"files":["source"],"main":"source","dist":{"shasum":"edf45e7d67f99545705de1f7bbeeeb121765ed85","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-9.6.0.tgz"},"ava":{"concurrency":4},"browser":{"decompress-response":false,"electron":false}},"10.0.0-alpha.1.1":{"_id":"got@10.0.0-alpha.1.1","name":"got","description":"Simplified HTTP requests","version":"10.0.0-alpha.1.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron","brotli"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava && tsc --noEmit","release":"np","build":"del-cli dist && tsc"},"directories":{},"devDependencies":{"@sindresorhus/tsconfig":"^0.4.0","@types/duplexer3":"^0.1.0","@types/node":"^12.7.5","@types/sinon":"^7.0.13","@typescript-eslint/eslint-plugin":"^1.10.2","@typescript-eslint/parser":"^1.10.2","ava":"^2.4.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.14.0","form-data":"^2.5.1","get-port":"^5.0.0","keyv":"^3.1.0","lolex":"^4.2.0","nock":"^11.3.4","np":"^5.0.3","nyc":"^14.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^7.4.2","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","ts-node":"^8.4.1","typescript":"3.4.4","xo":"^0.24.0"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^2.0.0","@types/cacheable-request":"^6.0.1","@types/tough-cookie":"^2.3.5","cacheable-lookup":"^0.2.1","cacheable-request":"^6.1.0","decompress-response":"^4.2.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^1.0.2","to-readable-stream":"^2.0.0","type-fest":"^0.8.0"},"engines":{"node":">=8.6"},"main":"dist","dist":{"shasum":"cb0c662b6ad63e506de9b447471d0d7fd7abf5dd","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.0.0-alpha.1.1.tgz"},"readme":"<div align=\"center\">\n\t<br>\n\t<br>\n\t<img width=\"360\" src=\"media/logo.svg\" alt=\"Got\">\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n\t<hr>\n\t<p align=\"center\">\n\t\t<sub>Huge thanks to these companies for helping make open source sustainable by sponsoring Sindre Sorhus</sub>\n\t\t<br>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://moxy.studio\"><img src=\"https://sindresorhus.com/assets/thanks/moxy-logo.svg\" width=\"170\"></a>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://www.gumlet.com\">\n\t\t\t<div>\n\t\t\t\t<img src=\"https://sindresorhus.com/assets/thanks/gumlet-logo.svg\" width=\"200\"/>\n\t\t\t</div>\n\t\t\t<sup><b>Optimised Image Delivery made simple</b></sup>\n\t\t</a>\n\t</p>\n\t<hr>\n\t<br>\n\t<br>\n</div>\n\n> Simplified HTTP requests\n\n[![Build Status: Linux](https://travis-ci.org/sindresorhus/got.svg?branch=master)](https://travis-ci.org/sindresorhus/got)\n[![Coverage Status](https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/got?branch=master)\n[![Downloads](https://img.shields.io/npm/dm/got.svg)](https://npmjs.com/got)\n[![Install size](https://packagephobia.now.sh/badge?p=got)](https://packagephobia.now.sh/result?p=got)\n\nGot is a human-friendly and powerful HTTP request library.\n\nIt was created because the popular [`request`](https://github.com/request/request) package is bloated: [![Install size](https://packagephobia.now.sh/badge?p=request)](https://packagephobia.now.sh/result?p=request)\n\nGot is for Node.js. For browsers, we recommend [Ky](https://github.com/sindresorhus/ky).\n\n**This readme reflects the next major version that is currently in development. You probably want [the v9 readme](https://www.npmjs.com/package/got).**\n\n\n## Highlights\n\n- [Promise & stream API](#api)\n- [Request cancelation](#aborting-the-request)\n- [RFC compliant caching](#cache-adapters)\n- [Follows redirects](#followredirect)\n- [Retries on failure](#retry)\n- [Progress events](#onuploadprogress-progress)\n- [Handles gzip/deflate/brotli](#decompress)\n- [Timeout handling](#timeout)\n- [Errors with metadata](#errors)\n- [JSON mode](#json-mode)\n- [WHATWG URL support](#url)\n- [Hooks](#hooks)\n- [Instances with custom defaults](#instances)\n- [Composable](documentation/advanced-creation.md#merging-instances)\n- [Plugins](documentation/lets-make-a-plugin.md)\n- [Electron support](#useelectronnet)\n- [Used by ~2000 packages and ~500K repos](https://github.com/sindresorhus/got/network/dependents)\n- Actively maintained\n\n[Moving from Request?](documentation/migration-guides.md)\n\n[See how Got compares to other HTTP libraries](#comparison)\n\n## Install\n\n```\n$ npm install got\n```\n\n\n## Usage\n\n```js\nconst got = require('got');\n\n(async () => {\n\ttry {\n\t\tconst response = await got('https://sindresorhus.com');\n\t\tconsole.log(response.body);\n\t\t//=> '<!doctype html> ...'\n\t} catch (error) {\n\t\tconsole.log(error.response.body);\n\t\t//=> 'Internal server error ...'\n\t}\n})();\n```\n\n###### Streams\n\n```js\nconst stream = require('stream');\nconst {promisify} = require('util');\nconst fs = require('fs');\nconst got = require('got');\n\nconst pipeline = promisify(stream.pipeline);\n\n(async () => {\n    await pipeline(\n        got.stream('https://sindresorhus.com'),\n        fs.createWriteStream('index.html')\n    );\n\n    // For POST, PUT, and PATCH methods `got.stream` returns a `stream.Writable`\n    await pipeline(\n        fs.createReadStream('index.html'),\n        got.stream.post('https://sindresorhus.com')\n    );\n})();\n```\n\n**Tip:** Using `from.pipe(to)` doesn't forward errors. If you use it, switch to [`Stream.pipeline(from, ..., to, callback)`](https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback) instead (available from Node v10).\n\n### API\n\nIt's a `GET` request by default, but can be changed by using different methods or via `options.method`.\n\n#### got([url], [options])\n\nReturns a Promise for a [`response` object](#response) or a [stream](#streams-1) if `options.stream` is set to true.\n\n##### url\n\nType: `string | object`\n\nThe URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\nProperties from `options` will override properties in the parsed `url`.\n\nIf no protocol is specified, it will throw a `TypeError`.\n\n**Note:** this can also be an option.\n\n##### options\n\nType: `object`\n\nAny of the [`https.request`](https://nodejs.org/api/https.html#https_https_request_options_callback) options.\n\n###### prefixUrl\n\nType: `string | URL`\n\nWhen specified, `prefixUrl` will be prepended to `url`. The prefix can be any valid URL, either relative or absolute. A trailing slash `/` is optional, one will be added automatically, if needed, when joining `prefixUrl` and `url`. The `url` argument cannot start with a `/` when using this option.\n\nUseful when used with `got.extend()` to create niche-specific Got-instances.\n\n**Note:** `prefixUrl` will be ignored if the `url` argument is a URL instance.\n\n```js\nconst got = require('got');\n\n(async () => {\n\tawait got('unicorn', {prefixUrl: 'https://cats.com'});\n\t//=> 'https://cats.com/unicorn'\n})();\n```\n\n###### headers\n\nType: `object`<br>\nDefault: `{}`\n\nRequest headers.\n\nExisting headers will be overwritten. Headers set to `null` will be omitted.\n\n###### stream\n\nType: `boolean`<br>\nDefault: `false`\n\nReturns a `Stream` instead of a `Promise`. This is equivalent to calling `got.stream(url, [options])`.\n\n###### body\n\nType: `string | Buffer | stream.Readable` or [`form-data` instance](https://github.com/form-data/form-data)\n\n**Note:** The `body` option cannot be used with the `json` or `form` option.\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nIf present in `options` and `options.method` is not set, it will throw a `TypeError`.\n\nThe `content-length` header will be automatically set if `body` is a `string` / `Buffer` / `fs.createReadStream` instance / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n\n###### json\n\nType: `object | Array | number | string | boolean | null` *(JSON-serializable values)*\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nJSON body. If the `Content-Type` header is not set, it will be set to `application/json`.\n\n###### context\n\nType: `object`\n\nUser data. In contrast to other options, `context` is not enumerable.\n\n**Note:** The object is never merged, it's just passed through. Got will not modify the object in any way.\n\nIt's very useful for storing auth tokens:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\toptions => {\n\t\t\t\tif (!options.context && !options.context.token) {\n\t\t\t\t\tthrow new Error('Token required');\n\t\t\t\t}\n\n\t\t\t\toptions.header.token = options.context.token;\n\t\t\t}\n\t\t]\n\t}\n});\n\n(async () => {\n\tconst context = {\n\t\ttoken: 'secret'\n\t};\n\n\tconst response = await instance('https://httpbin.org/headers', {context});\n\n\t// Let's see the headers\n\tconsole.log(response.body);\n})();\n```\n\n###### responseType\n\nType: `string`<br>\nDefault: `text`\n\n**Note:** When using streams, this option is ignored.\n\nParsing method used to retrieve the body from the response. Can be `text`, `json` or `buffer`. The promise has `.json()` and `.buffer()` and `.text()` functions which set this option automatically.\n\nExample:\n\n```js\nconst {body} = await got(url).json();\n```\n\n###### resolveBodyOnly\n\nType: `string`<br>\nDefault: `false`\n\nWhen set to `true` the promise will return the [Response body](#body-1) instead of the [Response](#response) object.\n\n###### cookieJar\n\nType: [`tough.CookieJar` instance](https://github.com/salesforce/tough-cookie#cookiejar)\n\n**Note:** If you provide this option, `options.headers.cookie` will be overridden.\n\nCookie support. You don't have to care about parsing or how to store them. [Example.](#cookies)\n\n###### ignoreInvalidCookies\n\nType: `boolean`<br>\nDefault: `false`\n\nIgnore invalid cookies instead of throwing an error. Only useful when the `cookieJar` option has been set. Not recommended.\n\n###### encoding\n\nType: `string | null`<br>\nDefault: `'utf8'`\n\n[Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data. If `null`, the body is returned as a [`Buffer`](https://nodejs.org/api/buffer.html) (binary data).\n\n###### form\n\nType: `object | true`\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nThe form body is converted to query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n\nIf set to `true` and the `Content-Type` header is not set, it will be set to `application/x-www-form-urlencoded`.\n\n###### searchParams\n\nType: `string | object<string, string | number> | URLSearchParams`\n\n**Note:** The `query` option was renamed to `searchParams` in Got v10. The `query` option name is still functional, but is being deprecated and will be completely removed in Got v11.\n\nQuery string that will be added to the request URL. This will override the query string in `url`.\n\nIf you need to pass in an array, you can do it using a `URLSearchParams` instance:\n\n```js\nconst got = require('got');\n\nconst searchParams = new URLSearchParams([['key', 'a'], ['key', 'b']]);\n\ngot('https://example.com', {searchParams});\n\nconsole.log(searchParams.toString());\n//=> 'key=a&key=b'\n```\n\nAnd if you need a different array format, you could use the [`query-string`](https://github.com/sindresorhus/query-string) package:\n\n```js\nconst got = require('got');\nconst queryString = require('query-string');\n\nconst searchParams = queryString.stringify({key: ['a', 'b']}, {arrayFormat: 'bracket'});\n\ngot('https://example.com', {searchParams});\n\nconsole.log(searchParams);\n//=> 'key[]=a&key[]=b'\n```\n\n###### timeout\n\nType: `number | object`\n\nMilliseconds to wait for the server to end the response before aborting the request with [`got.TimeoutError`](#gottimeouterror) error (a.k.a. `request` property). By default, there's no timeout.\n\nThis also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n\n- `lookup` starts when a socket is assigned and ends when the hostname has been resolved. Does not apply when using a Unix domain socket.\n- `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n- `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n- `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n- `response` starts when the request has been written to the socket and ends when the response headers are received.\n- `send` starts when the socket is connected and ends with the request has been written to the socket.\n- `request` starts when the request is initiated and ends when the response's end event fires.\n\n###### retry\n\nType: `number | object`<br>\nDefault:\n- limit: `2`\n- calculateDelay: `(attemptCount, retryOptions, error, computedValue) => computedValue`\n- methods: `GET` `PUT` `HEAD` `DELETE` `OPTIONS` `TRACE`\n- statusCodes: [`408`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408) [`413`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413) [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) [`500`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500) [`502`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502) [`503`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503) [`504`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504)\n- maxRetryAfter: `undefined`\n- errorCodes: `ETIMEDOUT` `ECONNRESET` `EADDRINUSE` `ECONNREFUSED` `EPIPE` `ENOTFOUND` `ENETUNREACH` `EAI_AGAIN`\n\nAn object representing `limit`, `calculateDelay`, `methods`, `statusCodes`, `maxRetryAfter` and `errorCodes` fields for maximum retry count, retry handler, allowed methods, allowed status codes, maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time and allowed error codes.\n\n**Note:** When using streams, this option is ignored.\n\nIf `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.<br>\nIf [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n\nDelays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 1).\n\nThe `calculateDelay` property is a `function` with `attemptCount`, `retryOptions`, `error` and `computedValue` arguments for current retry count, the retry options, error and default computed value. The function must return a delay in milliseconds (`0` return value cancels retry).\n\nBy default, it retries *only* on the specified methods, status codes, and on these network errors:\n- `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n- `ECONNRESET`: Connection was forcibly closed by a peer.\n- `EADDRINUSE`: Could not bind to any free port.\n- `ECONNREFUSED`: Connection was refused by the server.\n- `EPIPE`: The remote side of the stream being written has been closed.\n- `ENOTFOUND`: Couldn't resolve the hostname to an IP address.\n- `ENETUNREACH`: No internet connection.\n- `EAI_AGAIN`: DNS lookup timed out.\n\n###### followRedirect\n\nType: `boolean`<br>\nDefault: `true`\n\nDefines if redirect responses should be followed automatically.\n\nNote that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`. This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4).\n\n###### decompress\n\nType: `boolean`<br>\nDefault: `true`\n\nDecompress the response automatically. This will set the `accept-encoding` header to `gzip, deflate, br` on Node.js 11.7.0+ or `gzip, deflate` for older Node.js versions, unless you set it yourself.\n\nBrotli (`br`) support requires Node.js 11.7.0 or later.\n\nIf this is disabled, a compressed response is returned as a `Buffer`. This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n\n###### cache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached response data.\n\n###### dnsCache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached DNS data.\n\n###### request\n\nType: `Function`<br>\nDefault: `http.request` `https.request` *(Depending on the protocol)*\n\nCustom request function. The main purpose of this is to [support HTTP2 using a wrapper](#experimental-http2-support).\n\n###### useElectronNet\n\nType: `boolean`<br>\nDefault: `false`\n\nWhen used in Electron, Got will use [`electron.net`](https://electronjs.org/docs/api/net/) instead of the Node.js `http` module. According to the Electron docs, it should be fully compatible, but it's not entirely. See [#443](https://github.com/sindresorhus/got/issues/443) and [#461](https://github.com/sindresorhus/got/issues/461).\n\n###### throwHttpErrors\n\nType: `boolean`<br>\nDefault: `true`\n\nDetermines if a `got.HTTPError` is thrown for error responses (non-2xx status codes).\n\nIf this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing. This may be useful if you are checking for resource availability and are expecting error responses.\n\n###### agent\n\nSame as the [`agent` option](https://nodejs.org/api/http.html#http_http_request_url_options_callback) for `http.request`, but with an extra feature:\n\nIf you require different agents for different protocols, you can pass a map of agents to the `agent` option. This is necessary because a request to one protocol might redirect to another. In such a scenario, Got will switch over to the right protocol agent for you.\n\n```js\nconst got = require('got');\nconst HttpAgent = require('agentkeepalive');\nconst {HttpsAgent} = HttpAgent;\n\ngot('https://sindresorhus.com', {\n\tagent: {\n\t\thttp: new HttpAgent(),\n\t\thttps: new HttpsAgent()\n\t}\n});\n```\n\n###### hooks\n\nType: `object<string, Function[]>`\n\nHooks allow modifications during the request lifecycle. Hook functions may be async and are run serially.\n\n###### hooks.init\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with plain [request options](#options), right before their normalization. This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when the input needs custom handling.\n\nSee the [Request migration guide](documentation/migration-guides.md#breaking-changes) for an example.\n\n**Note:** This hook must be synchronous!\n\n###### hooks.beforeRequest\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options). Got will make no further changes to the request before it is sent (except the body serialization). This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when you want to create an API client that, for example, uses HMAC-signing.\n\nSee the [AWS section](#aws) for an example.\n\n###### hooks.beforeRedirect\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options) and the redirect [response](#response). Got will make no further changes to the request. This is especially useful when you want to avoid dead sites. Example:\n\n```js\nconst got = require('got');\n\ngot('https://example.com', {\n\thooks: {\n\t\tbeforeRedirect: [\n\t\t\t(options, response) => {\n\t\t\t\tif (options.hostname === 'deadSite') {\n\t\t\t\t\toptions.hostname = 'fallbackSite';\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.beforeRetry\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options), the error and the retry count. Got will make no further changes to the request. This is especially useful when some extra work is required before the next try. Example:\n\n```js\nconst got = require('got');\n\ngot.post('https://example.com', {\n\thooks: {\n\t\tbeforeRetry: [\n\t\t\t(options, error, retryCount) => {\n\t\t\t\tif (error.statusCode === 413) { // Payload too large\n\t\t\t\t\toptions.body = getNewBody();\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.afterResponse\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [response object](#response) and a retry function.\n\nEach function should return the response. This is especially useful when you want to refresh an access token. Example:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tafterResponse: [\n\t\t\t(response, retryWithMergedOptions) => {\n\t\t\t\tif (response.statusCode === 401) { // Unauthorized\n\t\t\t\t\tconst updatedOptions = {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\ttoken: getNewToken() // Refresh the access token\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Save for further requests\n\t\t\t\t\tinstance.defaults.options = got.mergeOptions(instance.defaults.options, updatedOptions);\n\n\t\t\t\t\t// Make a new retry\n\t\t\t\t\treturn retryWithMergedOptions(updatedOptions);\n\t\t\t\t}\n\n\t\t\t\t// No changes otherwise\n\t\t\t\treturn response;\n\t\t\t}\n\t\t]\n\t},\n\tmutableDefaults: true\n});\n```\n\n###### hooks.beforeError\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with an `Error` instance. The error is passed to the hook right before it's thrown. This is especially useful when you want to have more detailed errors.\n\n**Note:** Errors thrown while normalizing input options are thrown directly and not part of this hook.\n\n```js\nconst got = require('got');\n\ngot('https://api.github.com/some-endpoint', {\n\thooks: {\n\t\tbeforeError: [\n\t\t\terror => {\n\t\t\t\tconst {response} = error;\n \t\t\t\tif (response && response.body) {\n\t\t\t\t\terror.name = 'GitHubError';\n\t\t\t\t\terror.message = `${response.body.message} (${error.statusCode})`;\n\t\t\t\t}\n\n \t\t\t\treturn error;\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n#### Response\n\nThe response object will typically be a [Node.js HTTP response stream](https://nodejs.org/api/http.html#http_class_http_incomingmessage), however, if returned from the cache it will be a [response-like object](https://github.com/lukechilds/responselike) which behaves in the same way.\n\n##### request\n\nType: `object`\n\n**Note:** This is not a [http.ClientRequest](https://nodejs.org/api/http.html#http_class_http_clientrequest).\n\n- `options` - The Got options that were set on this request.\n\n##### body\n\nType: `string | object | Buffer` *(Depending on `options.responseType`)*\n\nThe result of the request.\n\n##### url\n\nType: `string`\n\nThe request URL or the final URL after redirects.\n\n##### requestUrl\n\nType: `string`\n\nThe original request URL.\n\n##### timings\n\nType: `object`\n\nThe object contains the following properties:\n\n- `start` - Time when the request started.\n- `socket` - Time when a socket was assigned to the request.\n- `lookup` - Time when the DNS lookup finished.\n- `connect` - Time when the socket successfully connected.\n- `upload` - Time when the request finished uploading.\n- `response` - Time when the request fired the `response` event.\n- `end` - Time when the response fired the `end` event.\n- `error` - Time when the request fired the `error` event.\n- `phases`\n\t- `wait` - `timings.socket - timings.start`\n\t- `dns` - `timings.lookup - timings.socket`\n\t- `tcp` - `timings.connect - timings.lookup`\n\t- `request` - `timings.upload - timings.connect`\n\t- `firstByte` - `timings.response - timings.upload`\n\t- `download` - `timings.end - timings.response`\n\t- `total` - `timings.end - timings.start` or `timings.error - timings.start`\n\n**Note:** The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n\n##### isFromCache\n\nType: `boolean`\n\nWhether the response was retrieved from the cache.\n\n##### redirectUrls\n\nType: `string[]`\n\nThe redirect URLs.\n\n##### retryCount\n\nType: `number`\n\nThe number of times the request was retried.\n\n#### Streams\n\n**Note:** Progress events, redirect events and request/response events can also be used with promises.\n\n**Note:** To access `response.isFromCache` you need to use `got.stream(url, options).isFromCache`. The value will be undefined until the `response` event.\n\n#### got.stream(url, [options])\n\nSets `options.stream` to `true`.\n\nReturns a [duplex stream](https://nodejs.org/api/stream.html#stream_class_stream_duplex) with additional events:\n\n##### .on('request', request)\n\n`request` event to get the request object of the request.\n\n**Tip:** You can use `request` event to abort request:\n\n```js\ngot.stream('https://github.com')\n\t.on('request', request => setTimeout(() => request.abort(), 50));\n```\n\n##### .on('response', response)\n\nThe `response` event to get the response object of the final request.\n\n##### .on('redirect', response, nextOptions)\n\nThe `redirect` event to get the response object of a redirect. The second argument is options for the next request to the redirect location.\n\n##### .on('uploadProgress', progress)\n##### .on('downloadProgress', progress)\n\nProgress events for uploading (sending a request) and downloading (receiving a response). The `progress` argument is an object like:\n\n```js\n{\n\tpercent: 0.1,\n\ttransferred: 1024,\n\ttotal: 10240\n}\n```\n\nIf it's not possible to retrieve the body size (can happen when streaming), `total` will be `null`.\n\n```js\n(async () => {\n\tconst response = await got('https://sindresorhus.com')\n\t\t.on('downloadProgress', progress => {\n\t\t\t// Report download progress\n\t\t})\n\t\t.on('uploadProgress', progress => {\n\t\t\t// Report upload progress\n\t\t});\n\n\tconsole.log(response);\n})();\n```\n\n##### .on('error', error, body, response)\n\nThe `error` event emitted in case of a protocol error (like `ENOTFOUND` etc.) or status error (4xx or 5xx). The second argument is the body of the server response in case of status error. The third argument is a response object.\n\n#### got.get(url, [options])\n#### got.post(url, [options])\n#### got.put(url, [options])\n#### got.patch(url, [options])\n#### got.head(url, [options])\n#### got.delete(url, [options])\n\nSets `options.method` to the method name and makes a request.\n\n### Instances\n\n#### got.extend(...options)\n\nConfigure a new `got` instance with default `options`. The `options` are merged with the parent instance's `defaults.options` using [`got.mergeOptions`](#gotmergeoptionsparentoptions-newoptions). You can access the resolved options with the `.defaults` property on the instance.\n\n```js\nconst client = got.extend({\n\tprefixUrl: 'https://example.com',\n\theaders: {\n\t\t'x-unicorn': 'rainbow'\n\t}\n});\n\nclient.get('/demo');\n\n/* HTTP Request =>\n * GET /demo HTTP/1.1\n * Host: example.com\n * x-unicorn: rainbow\n */\n```\n\n```js\n(async () => {\n\tconst client = got.extend({\n\t\tprefixUrl: 'httpbin.org',\n\t\theaders: {\n\t\t\t'x-foo': 'bar'\n\t\t}\n\t});\n\tconst {headers} = await client.get('/headers').json();\n\t//=> headers['x-foo'] === 'bar'\n\n\tconst jsonClient = client.extend({\n\t\tresponseType: 'json',\n\t\tresolveBodyOnly: true,\n\t\theaders: {\n\t\t\t'x-baz': 'qux'\n\t\t}\n\t});\n\tconst {headers: headers2} = await jsonClient.get('/headers');\n\t//=> headers2['x-foo'] === 'bar'\n\t//=> headers2['x-baz'] === 'qux'\n})();\n```\n\n**Tip:** Need more control over the behavior of Got? Check out the [`got.create()`](documentation/advanced-creation.md).\n\nAdditionally, `got.extend()` accepts two properties from the `defaults` object: `mutableDefaults` and `handlers`. Example:\n\n```js\n// You can now modify `mutableGot.defaults.options`.\nconst mutableGot = got.extend({mutableDefaults: true});\n\nconst mergedHandlers = got.extend({\n\thandlers: [\n\t\t(options, next) => {\n\t\t\tdelete options.headers.referer;\n\n\t\t\treturn next(options);\n\t\t}\n\t]\n});\n```\n\n#### got.extend(...instances)\n\nMerges many instances into a single one:\n- options are merged using [`got.mergeOptions()`](#gotmergeoptionsparentoptions-newoptions) (+ hooks are merged too),\n- handlers are stored in an array (you can access them through `instance.defaults.handlers`).\n\n#### got.extend(...options, ...instances, ...)\n\nIt's possible to combine options and instances.<br>\nIt gives the same effect as `got.extend(...options).extend(...instances)`:\n\n```js\nconst a = {headers: {cat: 'meow'}};\nconst b = got.create({\n\toptions: {\n\t\theaders: {\n\t\t\tcow: 'moo'\n\t\t}\n\t}\n});\n\n// The same as `got.extend(a).extend(b)`.\n// Note `a` is options and `b` is an instance.\ngot.extend(a, b);\n//=> {headers: {cat: 'meow', cow: 'moo'}}\n```\n\n#### got.mergeOptions(parentOptions, newOptions)\n\nExtends parent options. Avoid using [object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals) as it doesn't work recursively:\n\n```js\nconst a = {headers: {cat: 'meow', wolf: ['bark', 'wrrr']}};\nconst b = {headers: {cow: 'moo', wolf: ['auuu']}};\n\n{...a, ...b}            // => {headers: {cow: 'moo', wolf: ['auuu']}}\ngot.mergeOptions(a, b)  // => {headers: {cat: 'meow', cow: 'moo', wolf: ['auuu']}}\n```\n\nOptions are deeply merged to a new object. The value of each key is determined as follows:\n\n- If the new property is set to `undefined`, it keeps the old one.\n- If both properties are an instances of `URLSearchParams`, a new URLSearchParams instance is created. The values are merged using [`urlSearchParams.append(key, value)`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/append).\n- If the parent property is an instance of `URL` and the new value is a `string` or `URL`, a new URL instance is created: [`new URL(new, parent)`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#Syntax).\n- If the new property is a plain `object`:\n\t- If the parent property is a plain `object` too, both values are merged recursively into a new `object`.\n\t- Otherwise, only the new value is deeply cloned.\n- If the new property is an `Array`, it overwrites the old one with a deep clone of the new property.\n- Otherwise, the new value is assigned to the key.\n\n#### got.defaults\n\nType: `object`\n\nThe default Got options used in that instance.\n\n## Errors\n\nEach error contains an `options` property which are the options Got used to create a request - just to make debugging easier.\n\n#### got.CacheError\n\nWhen a cache method fails, for example, if the database goes down or there's a filesystem error.\n\n#### got.RequestError\n\nWhen a request fails. Contains a `code` property with error class code, like `ECONNREFUSED`.\n\n#### got.ReadError\n\nWhen reading from response stream fails.\n\n#### got.ParseError\n\nWhen server response code is 2xx, and parsing body fails. Includes a `response` property.\n\n#### got.HTTPError\n\nWhen the server response code is not 2xx. Includes a `response` property.\n\n#### got.MaxRedirectsError\n\nWhen the server redirects you more than ten times. Includes a `response` property.\n\n#### got.UnsupportedProtocolError\n\nWhen given an unsupported protocol.\n\n#### got.CancelError\n\nWhen the request is aborted with `.cancel()`.\n\n#### got.TimeoutError\n\nWhen the request is aborted due to a [timeout](#timeout). Includes an `event` and `timings` property.\n\n## Aborting the request\n\nThe promise returned by Got has a [`.cancel()`](https://github.com/sindresorhus/p-cancelable) method which when called, aborts the request.\n\n```js\n(async () => {\n\tconst request = got(url, options);\n\n\t// …\n\n\t// In another part of the code\n\tif (something) {\n\t\trequest.cancel();\n\t}\n\n\t// …\n\n\ttry {\n\t\tawait request;\n\t} catch (error) {\n\t\tif (request.isCanceled) { // Or `error instanceof got.CancelError`\n\t\t\t// Handle cancelation\n\t\t}\n\n\t\t// Handle other errors\n\t}\n})();\n```\n\n<a name=\"cache-adapters\"></a>\n## Cache\n\nGot implements [RFC 7234](http://httpwg.org/specs/rfc7234.html) compliant HTTP caching which works out of the box in-memory and is easily pluggable with a wide range of storage adapters. Fresh cache entries are served directly from the cache, and stale cache entries are revalidated with `If-None-Match`/`If-Modified-Since` headers. You can read more about the underlying cache behavior in the [`cacheable-request` documentation](https://github.com/lukechilds/cacheable-request). For DNS cache, Got uses [`cacheable-lookup`](https://github.com/szmarczak/cacheable-lookup).\n\nYou can use the JavaScript `Map` type as an in-memory cache:\n\n```js\nconst got = require('got');\nconst map = new Map();\n\n(async () => {\n\t\tlet response = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> false\n\n\t\tresponse = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> true\n})();\n```\n\nGot uses [Keyv](https://github.com/lukechilds/keyv) internally to support a wide range of storage adapters. For something more scalable you could use an [official Keyv storage adapter](https://github.com/lukechilds/keyv#official-storage-adapters):\n\n```\n$ npm install @keyv/redis\n```\n\n```js\nconst got = require('got');\nconst KeyvRedis = require('@keyv/redis');\n\nconst redis = new KeyvRedis('redis://user:pass@localhost:6379');\n\ngot('https://sindresorhus.com', {cache: redis});\n```\n\nGot supports anything that follows the Map API, so it's easy to write your own storage adapter or use a third-party solution.\n\nFor example, the following are all valid storage adapters:\n\n```js\nconst storageAdapter = new Map();\n// Or\nconst storageAdapter = require('./my-storage-adapter');\n// Or\nconst QuickLRU = require('quick-lru');\nconst storageAdapter = new QuickLRU({maxSize: 1000});\n\ngot('https://sindresorhus.com', {cache: storageAdapter});\n```\n\nView the [Keyv docs](https://github.com/lukechilds/keyv) for more information on how to use storage adapters.\n\n\n## Proxies\n\nYou can use the [`tunnel`](https://github.com/koichik/node-tunnel) package with the `agent` option to work with proxies:\n\n```js\nconst got = require('got');\nconst tunnel = require('tunnel');\n\ngot('https://sindresorhus.com', {\n\tagent: tunnel.httpOverHttp({\n\t\tproxy: {\n\t\t\thost: 'localhost'\n\t\t}\n\t})\n});\n```\n\nAlternatively, use [`global-agent`](https://github.com/gajus/global-agent) to configure a global proxy for all HTTP/HTTPS traffic in your program.\n\n\n## Cookies\n\nYou can use the [`tough-cookie`](https://github.com/salesforce/tough-cookie) package:\n\n```js\nconst {promisify} = require('util');\nconst got = require('got');\nconst {CookieJar} = require('tough-cookie');\n\n(async () => {\n\tconst cookieJar = new CookieJar();\n\tconst setCookie = promisify(cookieJar.setCookie.bind(cookieJar));\n\n\tawait setCookie('foo=bar', 'https://example.com');\n\tawait got('https://example.com', {cookieJar});\n})();\n```\n\n\n## Form data\n\nYou can use the [`form-data`](https://github.com/form-data/form-data) package to create POST request with form data:\n\n```js\nconst fs = require('fs');\nconst got = require('got');\nconst FormData = require('form-data');\n\nconst form = new FormData();\n\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\ngot.post('https://example.com', {\n\tbody: form\n});\n```\n\n\n## OAuth\n\nYou can use the [`oauth-1.0a`](https://github.com/ddo/oauth-1.0a) package to create a signed OAuth request:\n\n```js\nconst got = require('got');\nconst crypto  = require('crypto');\nconst OAuth = require('oauth-1.0a');\n\nconst oauth = OAuth({\n\tconsumer: {\n\t\tkey: process.env.CONSUMER_KEY,\n\t\tsecret: process.env.CONSUMER_SECRET\n\t},\n\tsignature_method: 'HMAC-SHA1',\n\thash_function: (baseString, key) => crypto.createHmac('sha1', key).update(baseString).digest('base64')\n});\n\nconst token = {\n\tkey: process.env.ACCESS_TOKEN,\n\tsecret: process.env.ACCESS_TOKEN_SECRET\n};\n\nconst url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';\n\ngot(url, {\n\theaders: oauth.toHeader(oauth.authorize({url, method: 'GET'}, token)),\n\tresponseType: 'json'\n});\n```\n\n\n## Unix Domain Sockets\n\nRequests can also be sent via [unix domain sockets](http://serverfault.com/questions/124517/whats-the-difference-between-unix-socket-and-tcp-ip-socket). Use the following URL scheme: `PROTOCOL://unix:SOCKET:PATH`.\n\n- `PROTOCOL` - `http` or `https` *(optional)*\n- `SOCKET` - Absolute path to a unix domain socket, for example: `/var/run/docker.sock`\n- `PATH` - Request path, for example: `/v2/keys`\n\n```js\ngot('http://unix:/var/run/docker.sock:/containers/json');\n\n// Or without protocol (HTTP by default)\ngot('unix:/var/run/docker.sock:/containers/json');\n```\n\n\n## AWS\n\nRequests to AWS services need to have their headers signed. This can be accomplished by using the [`aws4`](https://www.npmjs.com/package/aws4) package. This is an example for querying an [\"API Gateway\"](https://docs.aws.amazon.com/apigateway/api-reference/signing-requests/) with a signed request.\n\n```js\nconst got = require('got');\nconst AWS = require('aws-sdk');\nconst aws4 = require('aws4');\n\nconst chain = new AWS.CredentialProviderChain();\n\n// Create a Got instance to use relative paths and signed requests\nconst awsClient = got.extend({\n\tprefixUrl: 'https://<api-id>.execute-api.<api-region>.amazonaws.com/<stage>/',\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\tasync options => {\n\t\t\t\tconst credentials = await chain.resolvePromise();\n\t\t\t\taws4.sign(options, credentials);\n\t\t\t}\n\t\t]\n\t}\n});\n\nconst response = await awsClient('endpoint/path', {\n\t// Request-specific options\n});\n```\n\n\n## Testing\n\nYou can test your requests by using the [`nock`](https://github.com/node-nock/nock) package to mock an endpoint:\n\n```js\nconst got = require('got');\nconst nock = require('nock');\n\nnock('https://sindresorhus.com')\n\t.get('/')\n\t.reply(200, 'Hello world!');\n\n(async () => {\n\tconst response = await got('https://sindresorhus.com');\n\tconsole.log(response.body);\n\t//=> 'Hello world!'\n})();\n```\n\nFor real integration testing we recommend using [`ava`](https://github.com/avajs/ava) with [`create-test-server`](https://github.com/lukechilds/create-test-server). We're using a macro so we don't have to `server.listen()` and `server.close()` every test. Take a look at one of our tests:\n\n```js\ntest('retry function gets iteration count', withServer, async (t, server, got) => {\n\tlet knocks = 0;\n\tserver.get('/', (request, response) => {\n\t\tif (knocks++ === 1) {\n\t\t\tresponse.end('who`s there?');\n\t\t}\n\t});\n\n\tawait got({\n\t\tretry: {\n\t\t\tretries: iteration => {\n\t\t\t\tt.true(is.number(iteration));\n\t\t\t\treturn iteration < 2;\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\n\n## Tips\n\n### JSON mode\n\nTo pass an object as the body, you need to use the `json` option. It will be stringified using `JSON.stringify`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst {body} = await got.post('https://httpbin.org/anything', {\n\t\tjson: {\n\t\t\thello: 'world'\n\t\t},\n\t\tresponseType: 'json'\n\t});\n\n\tconsole.log(body.data);\n\t//=> '{\"hello\":\"world\"}'\n})();\n```\n\nTo receive a JSON body you can either set `responseType` option to `json` or use `promise.json()`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst {body} = await got.post('https://httpbin.org/anything', {\n\t\tbody: {\n\t\t\thello: 'world'\n\t\t}\n\t}).json();\n\n\tconsole.log(body);\n\t//=> {...}\n})();\n```\n\n### User Agent\n\nIt's a good idea to set the `'user-agent'` header so the provider can more easily see how their resource is used. By default, it's the URL to this repo. You can omit this header by setting it to `null`.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': null\n\t}\n});\n```\n\n### 304 Responses\n\nBear in mind; if you send an `if-modified-since` header and receive a `304 Not Modified` response, the body will be empty. It's your responsibility to cache and retrieve the body contents.\n\n### Custom endpoints\n\nUse `got.extend()` to make it nicer to work with REST APIs. Especially if you use the `prefixUrl` option.\n\n**Note:** Not to be confused with [`got.create()`](documentation/advanced-creation.md), which has no defaults.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\nconst custom = got.extend({\n\tprefixUrl: 'example.com',\n\tresponseType: 'json',\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\n// Use `custom` exactly how you use `got`\n(async () => {\n\tconst list = await custom('/v1/users/list');\n})();\n```\n\n### Experimental HTTP2 support\n\nGot provides an experimental support for HTTP2 using the [`http2-wrapper`](https://github.com/szmarczak/http2-wrapper) package:\n\n```js\nconst got = require('got');\nconst {request} = require('http2-wrapper');\n\nconst h2got = got.extend({request});\n\n(async () => {\n\tconst {body} = await h2got('https://nghttp2.org/httpbin/headers');\n\tconsole.log(body);\n})();\n```\n\n## Comparison\n\n|                       |       `got`      | [`request`][r0] |  [`node-fetch`][n0]  |  [`axios`][a0]  |  [`superagent`][s0]  |\n|-----------------------|:----------------:|:---------------:|:--------------------:|:---------------:|:--------------------:|\n| HTTP/2 support        |        ❔        |        ❌       |          ❌         |        ❌       |          ✔️\\*\\*      |\n| Browser support       |        ❌       |        ❌       |          ✔️\\*       |        ✔️       |          ✔️          |\n| Electron support      |        ✔️       |        ❌       |          ❌         |        ❌       |          ❌          |\n| Promise API           |        ✔️       |        ✔️       |          ✔️         |        ✔️       |          ✔️          |\n| Stream API            |        ✔️       |        ✔️       |     Node.js only     |        ❌       |          ✔️          |\n| Request cancelation   |        ✔️       |        ❌       |          ✔️         |        ✔️       |          ✔️          |\n| RFC compliant caching |        ✔️       |        ❌       |          ❌         |        ❌       |          ❌          |\n| Cookies (out-of-box)  |        ✔️       |        ✔️       |          ❌         |        ❌       |          ❌          |\n| Follows redirects     |        ✔️       |        ✔️       |          ✔️         |        ✔️       |          ✔️          |\n| Retries on failure    |        ✔️       |        ❌       |          ❌         |        ❌       |          ✔️          |\n| Progress events       |        ✔️       |        ❌       |          ❌         |   Browser only   |          ✔️          |\n| Handles gzip/deflate  |        ✔️       |        ✔️       |          ✔️         |        ✔️       |          ✔️          |\n| Advanced timeouts     |        ✔️       |        ❌       |          ❌         |        ❌       |          ❌          |\n| Timings               |        ✔️       |        ✔️       |          ❌         |        ❌       |          ❌          |\n| Errors with metadata  |        ✔️       |        ❌       |          ❌         |        ✔️       |          ❌          |\n| JSON mode             |        ✔️       |        ✔️       |          ✔️         |        ✔️       |          ✔️          |\n| Custom defaults       |        ✔️       |        ✔️       |          ❌         |        ✔️       |          ❌          |\n| Composable            |        ✔️       |        ❌       |          ❌         |        ❌       |          ✔️          |\n| Hooks                 |        ✔️       |        ❌       |          ❌         |        ✔️       |          ❌          |\n| Issues open           |  [![][gio]][g1]  | [![][rio]][r1]  |    [![][nio]][n1]    |  [![][aio]][a1] |    [![][sio]][s1]     |\n| Issues closed         |  [![][gic]][g2]  | [![][ric]][r2]  |    [![][nic]][n2]    |  [![][aic]][a2] |    [![][sic]][s2]     |\n| Downloads             |  [![][gd]][g3]   |  [![][rd]][r3]  |    [![][nd]][n3]     |  [![][ad]][a3]  |    [![][sd]][s3]      |\n| Coverage              |  [![][gc]][g4]   |  [![][rc]][r4]  |    [![][nc]][n4]     |  [![][ac]][a4]  |    [![][sc]][s4]      |\n| Build                 |  [![][gb]][g5]   |  [![][rb]][r5]  |    [![][nb]][n5]     |  [![][ab]][a5]  |    [![][sb]][s5]      |\n| Bugs                  |  [![][gbg]][g6]  | [![][rbg]][r6]  |    [![][nbg]][n6]    |  [![][abg]][a6] |    [![][sbg]][s6]     |\n| Dependents            |  [![][gdp]][g7]  | [![][rdp]][r7]  |    [![][ndp]][n7]    |  [![][adp]][a7] |    [![][sdp]][s7]     |\n| Install size          |  [![][gis]][g8]  | [![][ris]][r8]  |    [![][nis]][n8]    |  [![][ais]][a8] |    [![][sis]][s8]     |\n\n\\* It's almost API compatible with the browser `fetch` API.<br>\n\\*\\* Need to switch the protocol manually.<br>\n❔ Experimental support.\n\n<!-- GITHUB -->\n[r0]: https://github.com/request/request\n[n0]: https://github.com/bitinn/node-fetch\n[a0]: https://github.com/axios/axios\n[s0]: https://github.com/visionmedia/superagent\n\n<!-- ISSUES OPEN -->\n[gio]: https://badgen.net/github/open-issues/sindresorhus/got?label\n[rio]: https://badgen.net/github/open-issues/request/request?label\n[nio]: https://badgen.net/github/open-issues/bitinn/node-fetch?label\n[aio]: https://badgen.net/github/open-issues/axios/axios?label\n[sio]: https://badgen.net/github/open-issues/visionmedia/superagent?label\n\n[g1]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[r1]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[n1]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[a1]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[s1]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n\n<!-- ISSUES CLOSED -->\n[gic]: https://badgen.net/github/closed-issues/sindresorhus/got?label\n[ric]: https://badgen.net/github/closed-issues/request/request?label\n[nic]: https://badgen.net/github/closed-issues/bitinn/node-fetch?label\n[aic]: https://badgen.net/github/closed-issues/axios/axios?label\n[sic]: https://badgen.net/github/closed-issues/visionmedia/superagent?label\n\n[g2]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[r2]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[n2]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[a2]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[s2]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n\n<!-- DOWNLOADS -->\n[gd]: https://badgen.net/npm/dm/got?label\n[rd]: https://badgen.net/npm/dm/request?label\n[nd]: https://badgen.net/npm/dm/node-fetch?label\n[ad]: https://badgen.net/npm/dm/axios?label\n[sd]: https://badgen.net/npm/dm/superagent?label\n\n[g3]: https://www.npmjs.com/package/got\n[r3]: https://www.npmjs.com/package/request\n[n3]: https://www.npmjs.com/package/node-fetch\n[a3]: https://www.npmjs.com/package/axios\n[s3]: https://www.npmjs.com/package/superagent\n\n<!-- COVERAGE -->\n[gc]: https://badgen.net/coveralls/c/github/sindresorhus/got?label\n[rc]: https://badgen.net/coveralls/c/github/request/request?label\n[nc]: https://badgen.net/coveralls/c/github/bitinn/node-fetch?label\n[ac]: https://badgen.net/coveralls/c/github/mzabriskie/axios?label\n[sc]: https://badgen.net/codecov/c/github/visionmedia/superagent?label\n\n[g4]: https://coveralls.io/github/sindresorhus/got\n[r4]: https://coveralls.io/github/request/request\n[n4]: https://coveralls.io/github/bitinn/node-fetch\n[a4]: https://coveralls.io/github/mzabriskie/axios\n[s4]: https://codecov.io/gh/visionmedia/superagent\n\n<!-- BUILD -->\n[gb]: https://badgen.net/travis/sindresorhus/got?label\n[rb]: https://badgen.net/travis/request/request?label\n[nb]: https://badgen.net/travis/bitinn/node-fetch?label\n[ab]: https://badgen.net/travis/axios/axios?label\n[sb]: https://badgen.net/travis/visionmedia/superagent?label\n\n[g5]: https://travis-ci.org/sindresorhus/got\n[r5]: https://travis-ci.org/request/request\n[n5]: https://travis-ci.org/bitinn/node-fetch\n[a5]: https://travis-ci.org/axios/axios\n[s5]: https://travis-ci.org/visionmedia/superagent\n\n<!-- BUGS -->\n[gbg]: https://badgen.net/github/label-issues/sindresorhus/got/bug/open?label\n[rbg]: https://badgen.net/github/label-issues/request/request/Needs%20investigation/open?label\n[nbg]: https://badgen.net/github/label-issues/bitinn/node-fetch/bug/open?label\n[abg]: https://badgen.net/github/label-issues/axios/axios/type:bug/open?label\n[sbg]: https://badgen.net/github/label-issues/visionmedia/superagent/Bug/open?label\n\n[g6]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[r6]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A\"Needs+investigation\"\n[n6]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[a6]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Atype:bug\n[s6]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3ABug\n\n<!-- DEPENDENTS -->\n[gdp]: https://badgen.net/npm/dependents/got?label\n[rdp]: https://badgen.net/npm/dependents/request?label\n[ndp]: https://badgen.net/npm/dependents/node-fetch?label\n[adp]: https://badgen.net/npm/dependents/axios?label\n[sdp]: https://badgen.net/npm/dependents/superagent?label\n\n[g7]: https://www.npmjs.com/package/got?activeTab=dependents\n[r7]: https://www.npmjs.com/package/request?activeTab=dependents\n[n7]: https://www.npmjs.com/package/node-fetch?activeTab=dependents\n[a7]: https://www.npmjs.com/package/axios?activeTab=dependents\n[s7]: https://www.npmjs.com/package/visionmedia?activeTab=dependents\n\n<!-- INSTALL SIZE -->\n[gis]: https://badgen.net/packagephobia/install/got?label\n[ris]: https://badgen.net/packagephobia/install/request?label\n[nis]: https://badgen.net/packagephobia/install/node-fetch?label\n[ais]: https://badgen.net/packagephobia/install/axios?label\n[sis]: https://badgen.net/packagephobia/install/superagent?label\n\n[g8]: https://packagephobia.now.sh/result?p=got\n[r8]: https://packagephobia.now.sh/result?p=request\n[n8]: https://packagephobia.now.sh/result?p=node-fetch\n[a8]: https://packagephobia.now.sh/result?p=axios\n[s8]: https://packagephobia.now.sh/result?p=superagent\n\n#### Install size of the dependencies\n\n|                   Dependency                   |          Install size         |\n|------------------------------------------------|-------------------------------|\n| [@sindresorhus/is][url-is]                     | ![][size-is]                  |\n| [@szmarczak/http-timer][url-http-timer]        | ![][size-http-timer]          |\n| [cacheable-request][url-cacheable-request]     | ![][size-cacheable-request]   |\n| [decompress-response][url-decompress-response] | ![][size-decompress-response] |\n| [duplexer3][url-duplexer3]                     | ![][size-duplexer3]           |\n| [get-stream][url-get-stream]                   | ![][size-get-stream]          |\n| [lowercase-keys][url-lowercase-keys]           | ![][size-lowercase-keys]      |\n| [mimic-response][url-mimic-response]           | ![][size-mimic-response]      |\n| [p-cancelable][url-p-cancelable]               | ![][size-p-cancelable]        |\n| [to-readable-stream][url-to-readable-stream]   | ![][size-to-readable-stream]  |\n|                                                | ![][gis]                      |\n\n[size-is]: https://badgen.net/packagephobia/install/@sindresorhus/is?label\n[size-http-timer]: https://badgen.net/packagephobia/install/@szmarczak/http-timer?label\n[size-cacheable-request]: https://badgen.net/packagephobia/install/cacheable-request?label\n[size-decompress-response]: https://badgen.net/packagephobia/install/decompress-response?label\n[size-duplexer3]: https://badgen.net/packagephobia/install/duplexer3?label\n[size-get-stream]: https://badgen.net/packagephobia/install/get-stream?label\n[size-lowercase-keys]: https://badgen.net/packagephobia/install/lowercase-keys?label\n[size-mimic-response]: https://badgen.net/packagephobia/install/mimic-response?label\n[size-p-cancelable]: https://badgen.net/packagephobia/install/p-cancelable?label\n[size-to-readable-stream]: https://badgen.net/packagephobia/install/to-readable-stream?label\n\n[url-is]: https://github.com/sindresorhus/is\n[url-http-timer]: https://github.com/szmarczak/http-timer\n[url-cacheable-request]: https://github.com/lukechilds/cacheable-request\n[url-decompress-response]: https://github.com/sindresorhus/decompress-response\n[url-duplexer3]: https://github.com/floatdrop/duplexer3\n[url-get-stream]: https://github.com/sindresorhus/get-stream\n[url-lowercase-keys]: https://github.com/sindresorhus/lowercase-keys\n[url-mimic-response]: https://github.com/sindresorhus/mimic-response\n[url-p-cancelable]: https://github.com/sindresorhus/p-cancelable\n[url-to-readable-stream]: https://github.com/sindresorhus/to-readable-stream\n\n## Related\n\n- [gh-got](https://github.com/sindresorhus/gh-got) - Got convenience wrapper to interact with the GitHub API\n- [gl-got](https://github.com/singapore/gl-got) - Got convenience wrapper to interact with the GitLab API\n- [travis-got](https://github.com/samverschueren/travis-got) - Got convenience wrapper to interact with the Travis API\n- [graphql-got](https://github.com/kevva/graphql-got) - Got convenience wrapper to interact with GraphQL\n- [GotQL](https://github.com/khaosdoctor/gotql) - Got convenience wrapper to interact with GraphQL using JSON-parsed queries instead of strings\n\n\n## Maintainers\n\n[![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://sindresorhus.com) | [![Szymon Marczak](https://github.com/szmarczak.png?size=100)](https://github.com/szmarczak) | [![Alexander Tesfamichael](https://github.com/AlexTes.png?size=100)](https://github.com/AlexTes) | [![Brandon Smith](https://github.com/brandon93s.png?size=100)](https://github.com/brandon93s) | [![Luke Childs](https://github.com/lukechilds.png?size=100)](https://github.com/lukechilds)\n---|---|---|---|---\n[Sindre Sorhus](https://sindresorhus.com) | [Szymon Marczak](https://github.com/szmarczak) | [Alexander Tesfamichael](https://alextes.me) | [Brandon Smith](https://github.com/brandon93s) | [Luke Childs](https://github.com/lukechilds)\n\n###### Former\n\n- [Vsevolod Strukchinsky](https://github.com/floatdrop)\n\n\n---\n\n<div align=\"center\">\n\t<b>\n\t\t<a href=\"https://tidelift.com/subscription/pkg/npm-got?utm_source=npm-got&utm_medium=referral&utm_campaign=readme\">Get professional support for this package with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n","types":"dist","browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","babel":false,"compileEnhancements":false,"extensions":["ts"],"require":["ts-node/register"]},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"rules":{"import/named":"off","import/no-unresolved":"off","import/first":"off","import/newline-after-import":"off","ava/no-import-test-files":"off","ava/no-ignored-test-files":"off","@typescript-eslint/explicit-function-return-type":"off","@typescript-eslint/no-unnecessary-type-assertion":"off","@typescript-eslint/await-thenable":"off"},"ignores":["documentation/examples/*"]},"readmeFilename":"readme.md","gitHead":"4fcab893eb87e14cce4a9a94c715df7b3c14b139","_nodeVersion":"12.10.0","_npmVersion":"6.9.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.0.0-alpha.1.1_1568716964000_0.6049844068429415"},"_hasShrinkwrap":false},"10.0.0-alpha.2":{"_id":"got@10.0.0-alpha.2","name":"got","description":"Simplified HTTP requests","version":"10.0.0-alpha.2","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron","brotli"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava && tsc --noEmit","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@sindresorhus/tsconfig":"^0.4.0","@types/duplexer3":"^0.1.0","@types/node":"^12.7.5","@types/sinon":"^7.0.13","@typescript-eslint/eslint-plugin":"^1.10.2","@typescript-eslint/parser":"^1.10.2","ava":"^2.4.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.14.0","form-data":"^2.5.1","get-port":"^5.0.0","keyv":"^3.1.0","lolex":"^4.2.0","nock":"^11.3.4","np":"^5.0.3","nyc":"^14.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^7.4.2","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","ts-node":"^8.4.1","typescript":"3.4.4","xo":"^0.24.0"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^2.0.0","@types/cacheable-request":"^6.0.1","@types/tough-cookie":"^2.3.5","cacheable-lookup":"^0.2.1","cacheable-request":"^6.1.0","decompress-response":"^4.2.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^1.0.2","to-readable-stream":"^2.0.0","type-fest":"^0.8.0"},"engines":{"node":">=8.6"},"main":"dist","dist":{"shasum":"4447edb8dd34b5fcacfa604520a99ceccb89d509","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.0.0-alpha.2.tgz"},"readme":"<div align=\"center\">\n\t<br>\n\t<br>\n\t<img width=\"360\" src=\"media/logo.svg\" alt=\"Got\">\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n\t<hr>\n\t<p align=\"center\">\n\t\t<sub>Huge thanks to these companies for helping make open source sustainable by sponsoring Sindre Sorhus</sub>\n\t\t<br>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://moxy.studio\"><img src=\"https://sindresorhus.com/assets/thanks/moxy-logo.svg\" width=\"170\"></a>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://www.gumlet.com\">\n\t\t\t<div>\n\t\t\t\t<img src=\"https://sindresorhus.com/assets/thanks/gumlet-logo.svg\" width=\"200\"/>\n\t\t\t</div>\n\t\t\t<sup><b>Optimised Image Delivery made simple</b></sup>\n\t\t</a>\n\t</p>\n\t<hr>\n\t<br>\n\t<br>\n</div>\n\n> Simplified HTTP requests\n\n[![Build Status: Linux](https://travis-ci.org/sindresorhus/got.svg?branch=master)](https://travis-ci.org/sindresorhus/got)\n[![Coverage Status](https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/got?branch=master)\n[![Downloads](https://img.shields.io/npm/dm/got.svg)](https://npmjs.com/got)\n[![Install size](https://packagephobia.now.sh/badge?p=got)](https://packagephobia.now.sh/result?p=got)\n\nGot is a human-friendly and powerful HTTP request library.\n\nIt was created because the popular [`request`](https://github.com/request/request) package is bloated: [![Install size](https://packagephobia.now.sh/badge?p=request)](https://packagephobia.now.sh/result?p=request)\n\nGot is for Node.js. For browsers, we recommend [Ky](https://github.com/sindresorhus/ky).\n\n**This readme reflects the next major version that is currently in development. You probably want [the v9 readme](https://www.npmjs.com/package/got).**\n\n\n## Highlights\n\n- [Promise & stream API](#api)\n- [Request cancelation](#aborting-the-request)\n- [RFC compliant caching](#cache-adapters)\n- [Follows redirects](#followredirect)\n- [Retries on failure](#retry)\n- [Progress events](#onuploadprogress-progress)\n- [Handles gzip/deflate/brotli](#decompress)\n- [Timeout handling](#timeout)\n- [Errors with metadata](#errors)\n- [JSON mode](#json-mode)\n- [WHATWG URL support](#url)\n- [Hooks](#hooks)\n- [Instances with custom defaults](#instances)\n- [Composable](documentation/advanced-creation.md#merging-instances)\n- [Plugins](documentation/lets-make-a-plugin.md)\n- [Electron support](#useelectronnet)\n- [Used by ~2000 packages and ~500K repos](https://github.com/sindresorhus/got/network/dependents)\n- Actively maintained\n\n[Moving from Request?](documentation/migration-guides.md)\n\n[See how Got compares to other HTTP libraries](#comparison)\n\n## Install\n\n```\n$ npm install got\n```\n\n\n## Usage\n\n```js\nconst got = require('got');\n\n(async () => {\n\ttry {\n\t\tconst response = await got('https://sindresorhus.com');\n\t\tconsole.log(response.body);\n\t\t//=> '<!doctype html> ...'\n\t} catch (error) {\n\t\tconsole.log(error.response.body);\n\t\t//=> 'Internal server error ...'\n\t}\n})();\n```\n\n###### Streams\n\n```js\nconst stream = require('stream');\nconst {promisify} = require('util');\nconst fs = require('fs');\nconst got = require('got');\n\nconst pipeline = promisify(stream.pipeline);\n\n(async () => {\n    await pipeline(\n        got.stream('https://sindresorhus.com'),\n        fs.createWriteStream('index.html')\n    );\n\n    // For POST, PUT, and PATCH methods `got.stream` returns a `stream.Writable`\n    await pipeline(\n        fs.createReadStream('index.html'),\n        got.stream.post('https://sindresorhus.com')\n    );\n})();\n```\n\n**Tip:** Using `from.pipe(to)` doesn't forward errors. If you use it, switch to [`Stream.pipeline(from, ..., to, callback)`](https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback) instead (available from Node v10).\n\n### API\n\nIt's a `GET` request by default, but can be changed by using different methods or via `options.method`.\n\n#### got([url], [options])\n\nReturns a Promise for a [`response` object](#response) or a [stream](#streams-1) if `options.stream` is set to true.\n\n##### url\n\nType: `string | object`\n\nThe URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\nProperties from `options` will override properties in the parsed `url`.\n\nIf no protocol is specified, it will throw a `TypeError`.\n\n**Note:** this can also be an option.\n\n##### options\n\nType: `object`\n\nAny of the [`https.request`](https://nodejs.org/api/https.html#https_https_request_options_callback) options.\n\n###### prefixUrl\n\nType: `string | URL`\n\nWhen specified, `prefixUrl` will be prepended to `url`. The prefix can be any valid URL, either relative or absolute. A trailing slash `/` is optional, one will be added automatically, if needed, when joining `prefixUrl` and `url`. The `url` argument cannot start with a `/` when using this option.\n\nUseful when used with `got.extend()` to create niche-specific Got-instances.\n\n**Note:** `prefixUrl` will be ignored if the `url` argument is a URL instance.\n\n```js\nconst got = require('got');\n\n(async () => {\n\tawait got('unicorn', {prefixUrl: 'https://cats.com'});\n\t//=> 'https://cats.com/unicorn'\n})();\n```\n\n###### headers\n\nType: `object`<br>\nDefault: `{}`\n\nRequest headers.\n\nExisting headers will be overwritten. Headers set to `null` will be omitted.\n\n###### stream\n\nType: `boolean`<br>\nDefault: `false`\n\nReturns a `Stream` instead of a `Promise`. This is equivalent to calling `got.stream(url, [options])`.\n\n###### body\n\nType: `string | Buffer | stream.Readable` or [`form-data` instance](https://github.com/form-data/form-data)\n\n**Note:** The `body` option cannot be used with the `json` or `form` option.\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nIf present in `options` and `options.method` is not set, it will throw a `TypeError`.\n\nThe `content-length` header will be automatically set if `body` is a `string` / `Buffer` / `fs.createReadStream` instance / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n\n###### json\n\nType: `object | Array | number | string | boolean | null` *(JSON-serializable values)*\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nJSON body. If the `Content-Type` header is not set, it will be set to `application/json`.\n\n###### context\n\nType: `object`\n\nUser data. In contrast to other options, `context` is not enumerable.\n\n**Note:** The object is never merged, it's just passed through. Got will not modify the object in any way.\n\nIt's very useful for storing auth tokens:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\toptions => {\n\t\t\t\tif (!options.context && !options.context.token) {\n\t\t\t\t\tthrow new Error('Token required');\n\t\t\t\t}\n\n\t\t\t\toptions.header.token = options.context.token;\n\t\t\t}\n\t\t]\n\t}\n});\n\n(async () => {\n\tconst context = {\n\t\ttoken: 'secret'\n\t};\n\n\tconst response = await instance('https://httpbin.org/headers', {context});\n\n\t// Let's see the headers\n\tconsole.log(response.body);\n})();\n```\n\n###### responseType\n\nType: `string`<br>\nDefault: `text`\n\n**Note:** When using streams, this option is ignored.\n\nParsing method used to retrieve the body from the response. Can be `text`, `json` or `buffer`. The promise has `.json()` and `.buffer()` and `.text()` functions which set this option automatically.\n\nExample:\n\n```js\nconst {body} = await got(url).json();\n```\n\n###### resolveBodyOnly\n\nType: `string`<br>\nDefault: `false`\n\nWhen set to `true` the promise will return the [Response body](#body-1) instead of the [Response](#response) object.\n\n###### cookieJar\n\nType: [`tough.CookieJar` instance](https://github.com/salesforce/tough-cookie#cookiejar)\n\n**Note:** If you provide this option, `options.headers.cookie` will be overridden.\n\nCookie support. You don't have to care about parsing or how to store them. [Example.](#cookies)\n\n###### ignoreInvalidCookies\n\nType: `boolean`<br>\nDefault: `false`\n\nIgnore invalid cookies instead of throwing an error. Only useful when the `cookieJar` option has been set. Not recommended.\n\n###### encoding\n\nType: `string | null`<br>\nDefault: `'utf8'`\n\n[Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data. If `null`, the body is returned as a [`Buffer`](https://nodejs.org/api/buffer.html) (binary data).\n\n###### form\n\nType: `object | true`\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nThe form body is converted to query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n\nIf set to `true` and the `Content-Type` header is not set, it will be set to `application/x-www-form-urlencoded`.\n\n###### searchParams\n\nType: `string | object<string, string | number> | URLSearchParams`\n\n**Note:** The `query` option was renamed to `searchParams` in Got v10. The `query` option name is still functional, but is being deprecated and will be completely removed in Got v11.\n\nQuery string that will be added to the request URL. This will override the query string in `url`.\n\nIf you need to pass in an array, you can do it using a `URLSearchParams` instance:\n\n```js\nconst got = require('got');\n\nconst searchParams = new URLSearchParams([['key', 'a'], ['key', 'b']]);\n\ngot('https://example.com', {searchParams});\n\nconsole.log(searchParams.toString());\n//=> 'key=a&key=b'\n```\n\nAnd if you need a different array format, you could use the [`query-string`](https://github.com/sindresorhus/query-string) package:\n\n```js\nconst got = require('got');\nconst queryString = require('query-string');\n\nconst searchParams = queryString.stringify({key: ['a', 'b']}, {arrayFormat: 'bracket'});\n\ngot('https://example.com', {searchParams});\n\nconsole.log(searchParams);\n//=> 'key[]=a&key[]=b'\n```\n\n###### timeout\n\nType: `number | object`\n\nMilliseconds to wait for the server to end the response before aborting the request with [`got.TimeoutError`](#gottimeouterror) error (a.k.a. `request` property). By default, there's no timeout.\n\nThis also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n\n- `lookup` starts when a socket is assigned and ends when the hostname has been resolved. Does not apply when using a Unix domain socket.\n- `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n- `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n- `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n- `response` starts when the request has been written to the socket and ends when the response headers are received.\n- `send` starts when the socket is connected and ends with the request has been written to the socket.\n- `request` starts when the request is initiated and ends when the response's end event fires.\n\n###### retry\n\nType: `number | object`<br>\nDefault:\n- limit: `2`\n- calculateDelay: `(attemptCount, retryOptions, error, computedValue) => computedValue`\n- methods: `GET` `PUT` `HEAD` `DELETE` `OPTIONS` `TRACE`\n- statusCodes: [`408`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408) [`413`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413) [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) [`500`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500) [`502`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502) [`503`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503) [`504`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504)\n- maxRetryAfter: `undefined`\n- errorCodes: `ETIMEDOUT` `ECONNRESET` `EADDRINUSE` `ECONNREFUSED` `EPIPE` `ENOTFOUND` `ENETUNREACH` `EAI_AGAIN`\n\nAn object representing `limit`, `calculateDelay`, `methods`, `statusCodes`, `maxRetryAfter` and `errorCodes` fields for maximum retry count, retry handler, allowed methods, allowed status codes, maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time and allowed error codes.\n\n**Note:** When using streams, this option is ignored.\n\nIf `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.<br>\nIf [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n\nDelays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 1).\n\nThe `calculateDelay` property is a `function` with `attemptCount`, `retryOptions`, `error` and `computedValue` arguments for current retry count, the retry options, error and default computed value. The function must return a delay in milliseconds (`0` return value cancels retry).\n\nBy default, it retries *only* on the specified methods, status codes, and on these network errors:\n- `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n- `ECONNRESET`: Connection was forcibly closed by a peer.\n- `EADDRINUSE`: Could not bind to any free port.\n- `ECONNREFUSED`: Connection was refused by the server.\n- `EPIPE`: The remote side of the stream being written has been closed.\n- `ENOTFOUND`: Couldn't resolve the hostname to an IP address.\n- `ENETUNREACH`: No internet connection.\n- `EAI_AGAIN`: DNS lookup timed out.\n\n###### followRedirect\n\nType: `boolean`<br>\nDefault: `true`\n\nDefines if redirect responses should be followed automatically.\n\nNote that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`. This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4).\n\n###### decompress\n\nType: `boolean`<br>\nDefault: `true`\n\nDecompress the response automatically. This will set the `accept-encoding` header to `gzip, deflate, br` on Node.js 11.7.0+ or `gzip, deflate` for older Node.js versions, unless you set it yourself.\n\nBrotli (`br`) support requires Node.js 11.7.0 or later.\n\nIf this is disabled, a compressed response is returned as a `Buffer`. This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n\n###### cache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached response data.\n\n###### dnsCache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached DNS data.\n\n###### request\n\nType: `Function`<br>\nDefault: `http.request` `https.request` *(Depending on the protocol)*\n\nCustom request function. The main purpose of this is to [support HTTP2 using a wrapper](#experimental-http2-support).\n\n###### useElectronNet\n\nType: `boolean`<br>\nDefault: `false`\n\nWhen used in Electron, Got will use [`electron.net`](https://electronjs.org/docs/api/net/) instead of the Node.js `http` module. According to the Electron docs, it should be fully compatible, but it's not entirely. See [#443](https://github.com/sindresorhus/got/issues/443) and [#461](https://github.com/sindresorhus/got/issues/461).\n\n###### throwHttpErrors\n\nType: `boolean`<br>\nDefault: `true`\n\nDetermines if a `got.HTTPError` is thrown for error responses (non-2xx status codes).\n\nIf this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing. This may be useful if you are checking for resource availability and are expecting error responses.\n\n###### agent\n\nSame as the [`agent` option](https://nodejs.org/api/http.html#http_http_request_url_options_callback) for `http.request`, but with an extra feature:\n\nIf you require different agents for different protocols, you can pass a map of agents to the `agent` option. This is necessary because a request to one protocol might redirect to another. In such a scenario, Got will switch over to the right protocol agent for you.\n\n```js\nconst got = require('got');\nconst HttpAgent = require('agentkeepalive');\nconst {HttpsAgent} = HttpAgent;\n\ngot('https://sindresorhus.com', {\n\tagent: {\n\t\thttp: new HttpAgent(),\n\t\thttps: new HttpsAgent()\n\t}\n});\n```\n\n###### hooks\n\nType: `object<string, Function[]>`\n\nHooks allow modifications during the request lifecycle. Hook functions may be async and are run serially.\n\n###### hooks.init\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with plain [request options](#options), right before their normalization. This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when the input needs custom handling.\n\nSee the [Request migration guide](documentation/migration-guides.md#breaking-changes) for an example.\n\n**Note:** This hook must be synchronous!\n\n###### hooks.beforeRequest\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options). Got will make no further changes to the request before it is sent (except the body serialization). This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when you want to create an API client that, for example, uses HMAC-signing.\n\nSee the [AWS section](#aws) for an example.\n\n###### hooks.beforeRedirect\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options) and the redirect [response](#response). Got will make no further changes to the request. This is especially useful when you want to avoid dead sites. Example:\n\n```js\nconst got = require('got');\n\ngot('https://example.com', {\n\thooks: {\n\t\tbeforeRedirect: [\n\t\t\t(options, response) => {\n\t\t\t\tif (options.hostname === 'deadSite') {\n\t\t\t\t\toptions.hostname = 'fallbackSite';\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.beforeRetry\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options), the error and the retry count. Got will make no further changes to the request. This is especially useful when some extra work is required before the next try. Example:\n\n```js\nconst got = require('got');\n\ngot.post('https://example.com', {\n\thooks: {\n\t\tbeforeRetry: [\n\t\t\t(options, error, retryCount) => {\n\t\t\t\tif (error.statusCode === 413) { // Payload too large\n\t\t\t\t\toptions.body = getNewBody();\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.afterResponse\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [response object](#response) and a retry function.\n\nEach function should return the response. This is especially useful when you want to refresh an access token. Example:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tafterResponse: [\n\t\t\t(response, retryWithMergedOptions) => {\n\t\t\t\tif (response.statusCode === 401) { // Unauthorized\n\t\t\t\t\tconst updatedOptions = {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\ttoken: getNewToken() // Refresh the access token\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Save for further requests\n\t\t\t\t\tinstance.defaults.options = got.mergeOptions(instance.defaults.options, updatedOptions);\n\n\t\t\t\t\t// Make a new retry\n\t\t\t\t\treturn retryWithMergedOptions(updatedOptions);\n\t\t\t\t}\n\n\t\t\t\t// No changes otherwise\n\t\t\t\treturn response;\n\t\t\t}\n\t\t]\n\t},\n\tmutableDefaults: true\n});\n```\n\n###### hooks.beforeError\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with an `Error` instance. The error is passed to the hook right before it's thrown. This is especially useful when you want to have more detailed errors.\n\n**Note:** Errors thrown while normalizing input options are thrown directly and not part of this hook.\n\n```js\nconst got = require('got');\n\ngot('https://api.github.com/some-endpoint', {\n\thooks: {\n\t\tbeforeError: [\n\t\t\terror => {\n\t\t\t\tconst {response} = error;\n \t\t\t\tif (response && response.body) {\n\t\t\t\t\terror.name = 'GitHubError';\n\t\t\t\t\terror.message = `${response.body.message} (${error.statusCode})`;\n\t\t\t\t}\n\n \t\t\t\treturn error;\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n#### Response\n\nThe response object will typically be a [Node.js HTTP response stream](https://nodejs.org/api/http.html#http_class_http_incomingmessage), however, if returned from the cache it will be a [response-like object](https://github.com/lukechilds/responselike) which behaves in the same way.\n\n##### request\n\nType: `object`\n\n**Note:** This is not a [http.ClientRequest](https://nodejs.org/api/http.html#http_class_http_clientrequest).\n\n- `options` - The Got options that were set on this request.\n\n##### body\n\nType: `string | object | Buffer` *(Depending on `options.responseType`)*\n\nThe result of the request.\n\n##### url\n\nType: `string`\n\nThe request URL or the final URL after redirects.\n\n##### requestUrl\n\nType: `string`\n\nThe original request URL.\n\n##### timings\n\nType: `object`\n\nThe object contains the following properties:\n\n- `start` - Time when the request started.\n- `socket` - Time when a socket was assigned to the request.\n- `lookup` - Time when the DNS lookup finished.\n- `connect` - Time when the socket successfully connected.\n- `upload` - Time when the request finished uploading.\n- `response` - Time when the request fired the `response` event.\n- `end` - Time when the response fired the `end` event.\n- `error` - Time when the request fired the `error` event.\n- `phases`\n\t- `wait` - `timings.socket - timings.start`\n\t- `dns` - `timings.lookup - timings.socket`\n\t- `tcp` - `timings.connect - timings.lookup`\n\t- `request` - `timings.upload - timings.connect`\n\t- `firstByte` - `timings.response - timings.upload`\n\t- `download` - `timings.end - timings.response`\n\t- `total` - `timings.end - timings.start` or `timings.error - timings.start`\n\n**Note:** The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n\n##### isFromCache\n\nType: `boolean`\n\nWhether the response was retrieved from the cache.\n\n##### redirectUrls\n\nType: `string[]`\n\nThe redirect URLs.\n\n##### retryCount\n\nType: `number`\n\nThe number of times the request was retried.\n\n#### Streams\n\n**Note:** Progress events, redirect events and request/response events can also be used with promises.\n\n**Note:** To access `response.isFromCache` you need to use `got.stream(url, options).isFromCache`. The value will be undefined until the `response` event.\n\n#### got.stream(url, [options])\n\nSets `options.stream` to `true`.\n\nReturns a [duplex stream](https://nodejs.org/api/stream.html#stream_class_stream_duplex) with additional events:\n\n##### .on('request', request)\n\n`request` event to get the request object of the request.\n\n**Tip:** You can use `request` event to abort request:\n\n```js\ngot.stream('https://github.com')\n\t.on('request', request => setTimeout(() => request.abort(), 50));\n```\n\n##### .on('response', response)\n\nThe `response` event to get the response object of the final request.\n\n##### .on('redirect', response, nextOptions)\n\nThe `redirect` event to get the response object of a redirect. The second argument is options for the next request to the redirect location.\n\n##### .on('uploadProgress', progress)\n##### .on('downloadProgress', progress)\n\nProgress events for uploading (sending a request) and downloading (receiving a response). The `progress` argument is an object like:\n\n```js\n{\n\tpercent: 0.1,\n\ttransferred: 1024,\n\ttotal: 10240\n}\n```\n\nIf it's not possible to retrieve the body size (can happen when streaming), `total` will be `null`.\n\n```js\n(async () => {\n\tconst response = await got('https://sindresorhus.com')\n\t\t.on('downloadProgress', progress => {\n\t\t\t// Report download progress\n\t\t})\n\t\t.on('uploadProgress', progress => {\n\t\t\t// Report upload progress\n\t\t});\n\n\tconsole.log(response);\n})();\n```\n\n##### .on('error', error, body, response)\n\nThe `error` event emitted in case of a protocol error (like `ENOTFOUND` etc.) or status error (4xx or 5xx). The second argument is the body of the server response in case of status error. The third argument is a response object.\n\n#### got.get(url, [options])\n#### got.post(url, [options])\n#### got.put(url, [options])\n#### got.patch(url, [options])\n#### got.head(url, [options])\n#### got.delete(url, [options])\n\nSets `options.method` to the method name and makes a request.\n\n### Instances\n\n#### got.extend(...options)\n\nConfigure a new `got` instance with default `options`. The `options` are merged with the parent instance's `defaults.options` using [`got.mergeOptions`](#gotmergeoptionsparentoptions-newoptions). You can access the resolved options with the `.defaults` property on the instance.\n\n```js\nconst client = got.extend({\n\tprefixUrl: 'https://example.com',\n\theaders: {\n\t\t'x-unicorn': 'rainbow'\n\t}\n});\n\nclient.get('/demo');\n\n/* HTTP Request =>\n * GET /demo HTTP/1.1\n * Host: example.com\n * x-unicorn: rainbow\n */\n```\n\n```js\n(async () => {\n\tconst client = got.extend({\n\t\tprefixUrl: 'httpbin.org',\n\t\theaders: {\n\t\t\t'x-foo': 'bar'\n\t\t}\n\t});\n\tconst {headers} = await client.get('/headers').json();\n\t//=> headers['x-foo'] === 'bar'\n\n\tconst jsonClient = client.extend({\n\t\tresponseType: 'json',\n\t\tresolveBodyOnly: true,\n\t\theaders: {\n\t\t\t'x-baz': 'qux'\n\t\t}\n\t});\n\tconst {headers: headers2} = await jsonClient.get('/headers');\n\t//=> headers2['x-foo'] === 'bar'\n\t//=> headers2['x-baz'] === 'qux'\n})();\n```\n\n**Tip:** Need more control over the behavior of Got? Check out the [`got.create()`](documentation/advanced-creation.md).\n\nAdditionally, `got.extend()` accepts two properties from the `defaults` object: `mutableDefaults` and `handlers`. Example:\n\n```js\n// You can now modify `mutableGot.defaults.options`.\nconst mutableGot = got.extend({mutableDefaults: true});\n\nconst mergedHandlers = got.extend({\n\thandlers: [\n\t\t(options, next) => {\n\t\t\tdelete options.headers.referer;\n\n\t\t\treturn next(options);\n\t\t}\n\t]\n});\n```\n\n#### got.extend(...instances)\n\nMerges many instances into a single one:\n- options are merged using [`got.mergeOptions()`](#gotmergeoptionsparentoptions-newoptions) (+ hooks are merged too),\n- handlers are stored in an array (you can access them through `instance.defaults.handlers`).\n\n#### got.extend(...options, ...instances, ...)\n\nIt's possible to combine options and instances.<br>\nIt gives the same effect as `got.extend(...options).extend(...instances)`:\n\n```js\nconst a = {headers: {cat: 'meow'}};\nconst b = got.create({\n\toptions: {\n\t\theaders: {\n\t\t\tcow: 'moo'\n\t\t}\n\t}\n});\n\n// The same as `got.extend(a).extend(b)`.\n// Note `a` is options and `b` is an instance.\ngot.extend(a, b);\n//=> {headers: {cat: 'meow', cow: 'moo'}}\n```\n\n#### got.mergeOptions(parentOptions, newOptions)\n\nExtends parent options. Avoid using [object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals) as it doesn't work recursively:\n\n```js\nconst a = {headers: {cat: 'meow', wolf: ['bark', 'wrrr']}};\nconst b = {headers: {cow: 'moo', wolf: ['auuu']}};\n\n{...a, ...b}            // => {headers: {cow: 'moo', wolf: ['auuu']}}\ngot.mergeOptions(a, b)  // => {headers: {cat: 'meow', cow: 'moo', wolf: ['auuu']}}\n```\n\nOptions are deeply merged to a new object. The value of each key is determined as follows:\n\n- If the new property is set to `undefined`, it keeps the old one.\n- If both properties are an instances of `URLSearchParams`, a new URLSearchParams instance is created. The values are merged using [`urlSearchParams.append(key, value)`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/append).\n- If the parent property is an instance of `URL` and the new value is a `string` or `URL`, a new URL instance is created: [`new URL(new, parent)`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#Syntax).\n- If the new property is a plain `object`:\n\t- If the parent property is a plain `object` too, both values are merged recursively into a new `object`.\n\t- Otherwise, only the new value is deeply cloned.\n- If the new property is an `Array`, it overwrites the old one with a deep clone of the new property.\n- Otherwise, the new value is assigned to the key.\n\n#### got.defaults\n\nType: `object`\n\nThe default Got options used in that instance.\n\n## Errors\n\nEach error contains an `options` property which are the options Got used to create a request - just to make debugging easier.\n\n#### got.CacheError\n\nWhen a cache method fails, for example, if the database goes down or there's a filesystem error.\n\n#### got.RequestError\n\nWhen a request fails. Contains a `code` property with error class code, like `ECONNREFUSED`.\n\n#### got.ReadError\n\nWhen reading from response stream fails.\n\n#### got.ParseError\n\nWhen server response code is 2xx, and parsing body fails. Includes a `response` property.\n\n#### got.HTTPError\n\nWhen the server response code is not 2xx. Includes a `response` property.\n\n#### got.MaxRedirectsError\n\nWhen the server redirects you more than ten times. Includes a `response` property.\n\n#### got.UnsupportedProtocolError\n\nWhen given an unsupported protocol.\n\n#### got.CancelError\n\nWhen the request is aborted with `.cancel()`.\n\n#### got.TimeoutError\n\nWhen the request is aborted due to a [timeout](#timeout). Includes an `event` and `timings` property.\n\n## Aborting the request\n\nThe promise returned by Got has a [`.cancel()`](https://github.com/sindresorhus/p-cancelable) method which when called, aborts the request.\n\n```js\n(async () => {\n\tconst request = got(url, options);\n\n\t// …\n\n\t// In another part of the code\n\tif (something) {\n\t\trequest.cancel();\n\t}\n\n\t// …\n\n\ttry {\n\t\tawait request;\n\t} catch (error) {\n\t\tif (request.isCanceled) { // Or `error instanceof got.CancelError`\n\t\t\t// Handle cancelation\n\t\t}\n\n\t\t// Handle other errors\n\t}\n})();\n```\n\n<a name=\"cache-adapters\"></a>\n## Cache\n\nGot implements [RFC 7234](http://httpwg.org/specs/rfc7234.html) compliant HTTP caching which works out of the box in-memory and is easily pluggable with a wide range of storage adapters. Fresh cache entries are served directly from the cache, and stale cache entries are revalidated with `If-None-Match`/`If-Modified-Since` headers. You can read more about the underlying cache behavior in the [`cacheable-request` documentation](https://github.com/lukechilds/cacheable-request). For DNS cache, Got uses [`cacheable-lookup`](https://github.com/szmarczak/cacheable-lookup).\n\nYou can use the JavaScript `Map` type as an in-memory cache:\n\n```js\nconst got = require('got');\nconst map = new Map();\n\n(async () => {\n\t\tlet response = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> false\n\n\t\tresponse = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> true\n})();\n```\n\nGot uses [Keyv](https://github.com/lukechilds/keyv) internally to support a wide range of storage adapters. For something more scalable you could use an [official Keyv storage adapter](https://github.com/lukechilds/keyv#official-storage-adapters):\n\n```\n$ npm install @keyv/redis\n```\n\n```js\nconst got = require('got');\nconst KeyvRedis = require('@keyv/redis');\n\nconst redis = new KeyvRedis('redis://user:pass@localhost:6379');\n\ngot('https://sindresorhus.com', {cache: redis});\n```\n\nGot supports anything that follows the Map API, so it's easy to write your own storage adapter or use a third-party solution.\n\nFor example, the following are all valid storage adapters:\n\n```js\nconst storageAdapter = new Map();\n// Or\nconst storageAdapter = require('./my-storage-adapter');\n// Or\nconst QuickLRU = require('quick-lru');\nconst storageAdapter = new QuickLRU({maxSize: 1000});\n\ngot('https://sindresorhus.com', {cache: storageAdapter});\n```\n\nView the [Keyv docs](https://github.com/lukechilds/keyv) for more information on how to use storage adapters.\n\n\n## Proxies\n\nYou can use the [`tunnel`](https://github.com/koichik/node-tunnel) package with the `agent` option to work with proxies:\n\n```js\nconst got = require('got');\nconst tunnel = require('tunnel');\n\ngot('https://sindresorhus.com', {\n\tagent: tunnel.httpOverHttp({\n\t\tproxy: {\n\t\t\thost: 'localhost'\n\t\t}\n\t})\n});\n```\n\nAlternatively, use [`global-agent`](https://github.com/gajus/global-agent) to configure a global proxy for all HTTP/HTTPS traffic in your program.\n\n\n## Cookies\n\nYou can use the [`tough-cookie`](https://github.com/salesforce/tough-cookie) package:\n\n```js\nconst {promisify} = require('util');\nconst got = require('got');\nconst {CookieJar} = require('tough-cookie');\n\n(async () => {\n\tconst cookieJar = new CookieJar();\n\tconst setCookie = promisify(cookieJar.setCookie.bind(cookieJar));\n\n\tawait setCookie('foo=bar', 'https://example.com');\n\tawait got('https://example.com', {cookieJar});\n})();\n```\n\n\n## Form data\n\nYou can use the [`form-data`](https://github.com/form-data/form-data) package to create POST request with form data:\n\n```js\nconst fs = require('fs');\nconst got = require('got');\nconst FormData = require('form-data');\n\nconst form = new FormData();\n\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\ngot.post('https://example.com', {\n\tbody: form\n});\n```\n\n\n## OAuth\n\nYou can use the [`oauth-1.0a`](https://github.com/ddo/oauth-1.0a) package to create a signed OAuth request:\n\n```js\nconst got = require('got');\nconst crypto  = require('crypto');\nconst OAuth = require('oauth-1.0a');\n\nconst oauth = OAuth({\n\tconsumer: {\n\t\tkey: process.env.CONSUMER_KEY,\n\t\tsecret: process.env.CONSUMER_SECRET\n\t},\n\tsignature_method: 'HMAC-SHA1',\n\thash_function: (baseString, key) => crypto.createHmac('sha1', key).update(baseString).digest('base64')\n});\n\nconst token = {\n\tkey: process.env.ACCESS_TOKEN,\n\tsecret: process.env.ACCESS_TOKEN_SECRET\n};\n\nconst url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';\n\ngot(url, {\n\theaders: oauth.toHeader(oauth.authorize({url, method: 'GET'}, token)),\n\tresponseType: 'json'\n});\n```\n\n\n## Unix Domain Sockets\n\nRequests can also be sent via [unix domain sockets](http://serverfault.com/questions/124517/whats-the-difference-between-unix-socket-and-tcp-ip-socket). Use the following URL scheme: `PROTOCOL://unix:SOCKET:PATH`.\n\n- `PROTOCOL` - `http` or `https` *(optional)*\n- `SOCKET` - Absolute path to a unix domain socket, for example: `/var/run/docker.sock`\n- `PATH` - Request path, for example: `/v2/keys`\n\n```js\ngot('http://unix:/var/run/docker.sock:/containers/json');\n\n// Or without protocol (HTTP by default)\ngot('unix:/var/run/docker.sock:/containers/json');\n```\n\n\n## AWS\n\nRequests to AWS services need to have their headers signed. This can be accomplished by using the [`aws4`](https://www.npmjs.com/package/aws4) package. This is an example for querying an [\"API Gateway\"](https://docs.aws.amazon.com/apigateway/api-reference/signing-requests/) with a signed request.\n\n```js\nconst got = require('got');\nconst AWS = require('aws-sdk');\nconst aws4 = require('aws4');\n\nconst chain = new AWS.CredentialProviderChain();\n\n// Create a Got instance to use relative paths and signed requests\nconst awsClient = got.extend({\n\tprefixUrl: 'https://<api-id>.execute-api.<api-region>.amazonaws.com/<stage>/',\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\tasync options => {\n\t\t\t\tconst credentials = await chain.resolvePromise();\n\t\t\t\taws4.sign(options, credentials);\n\t\t\t}\n\t\t]\n\t}\n});\n\nconst response = await awsClient('endpoint/path', {\n\t// Request-specific options\n});\n```\n\n\n## Testing\n\nYou can test your requests by using the [`nock`](https://github.com/node-nock/nock) package to mock an endpoint:\n\n```js\nconst got = require('got');\nconst nock = require('nock');\n\nnock('https://sindresorhus.com')\n\t.get('/')\n\t.reply(200, 'Hello world!');\n\n(async () => {\n\tconst response = await got('https://sindresorhus.com');\n\tconsole.log(response.body);\n\t//=> 'Hello world!'\n})();\n```\n\nFor real integration testing we recommend using [`ava`](https://github.com/avajs/ava) with [`create-test-server`](https://github.com/lukechilds/create-test-server). We're using a macro so we don't have to `server.listen()` and `server.close()` every test. Take a look at one of our tests:\n\n```js\ntest('retry function gets iteration count', withServer, async (t, server, got) => {\n\tlet knocks = 0;\n\tserver.get('/', (request, response) => {\n\t\tif (knocks++ === 1) {\n\t\t\tresponse.end('who`s there?');\n\t\t}\n\t});\n\n\tawait got({\n\t\tretry: {\n\t\t\tcalculateDelay: ({attemptCount}) => {\n\t\t\t\tt.true(is.number(attemptCount));\n\t\t\t\treturn attemptCount < 2;\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\n\n## Tips\n\n### JSON mode\n\nTo pass an object as the body, you need to use the `json` option. It will be stringified using `JSON.stringify`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst {body} = await got.post('https://httpbin.org/anything', {\n\t\tjson: {\n\t\t\thello: 'world'\n\t\t},\n\t\tresponseType: 'json'\n\t});\n\n\tconsole.log(body.data);\n\t//=> '{\"hello\":\"world\"}'\n})();\n```\n\nTo receive a JSON body you can either set `responseType` option to `json` or use `promise.json()`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst {body} = await got.post('https://httpbin.org/anything', {\n\t\tbody: {\n\t\t\thello: 'world'\n\t\t}\n\t}).json();\n\n\tconsole.log(body);\n\t//=> {…}\n})();\n```\n\n### User Agent\n\nIt's a good idea to set the `'user-agent'` header so the provider can more easily see how their resource is used. By default, it's the URL to this repo. You can omit this header by setting it to `null`.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': null\n\t}\n});\n```\n\n### 304 Responses\n\nBear in mind; if you send an `if-modified-since` header and receive a `304 Not Modified` response, the body will be empty. It's your responsibility to cache and retrieve the body contents.\n\n### Custom endpoints\n\nUse `got.extend()` to make it nicer to work with REST APIs. Especially if you use the `prefixUrl` option.\n\n**Note:** Not to be confused with [`got.create()`](documentation/advanced-creation.md), which has no defaults.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\nconst custom = got.extend({\n\tprefixUrl: 'example.com',\n\tresponseType: 'json',\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\n// Use `custom` exactly how you use `got`\n(async () => {\n\tconst list = await custom('/v1/users/list');\n})();\n```\n\n### Experimental HTTP2 support\n\nGot provides an experimental support for HTTP2 using the [`http2-wrapper`](https://github.com/szmarczak/http2-wrapper) package:\n\n```js\nconst got = require('got');\nconst {request} = require('http2-wrapper');\n\nconst h2got = got.extend({request});\n\n(async () => {\n\tconst {body} = await h2got('https://nghttp2.org/httpbin/headers');\n\tconsole.log(body);\n})();\n```\n\n## Comparison\n\n|                       |       `got`      | [`request`][r0] |  [`node-fetch`][n0]  |  [`axios`][a0]  |  [`superagent`][s0]  |\n|-----------------------|:----------------:|:---------------:|:--------------------:|:---------------:|:--------------------:|\n| HTTP/2 support        |        ❔        |        ❌       |          ❌         |        ❌       |          ✔️\\*\\*      |\n| Browser support       |        ❌       |        ❌       |          ✔️\\*       |        ✔️       |          ✔️          |\n| Electron support      |        ✔️       |        ❌       |          ❌         |        ❌       |          ❌          |\n| Promise API           |        ✔️       |        ✔️       |          ✔️         |        ✔️       |          ✔️          |\n| Stream API            |        ✔️       |        ✔️       |     Node.js only     |        ❌       |          ✔️          |\n| Request cancelation   |        ✔️       |        ❌       |          ✔️         |        ✔️       |          ✔️          |\n| RFC compliant caching |        ✔️       |        ❌       |          ❌         |        ❌       |          ❌          |\n| Cookies (out-of-box)  |        ✔️       |        ✔️       |          ❌         |        ❌       |          ❌          |\n| Follows redirects     |        ✔️       |        ✔️       |          ✔️         |        ✔️       |          ✔️          |\n| Retries on failure    |        ✔️       |        ❌       |          ❌         |        ❌       |          ✔️          |\n| Progress events       |        ✔️       |        ❌       |          ❌         |   Browser only   |          ✔️          |\n| Handles gzip/deflate  |        ✔️       |        ✔️       |          ✔️         |        ✔️       |          ✔️          |\n| Advanced timeouts     |        ✔️       |        ❌       |          ❌         |        ❌       |          ❌          |\n| Timings               |        ✔️       |        ✔️       |          ❌         |        ❌       |          ❌          |\n| Errors with metadata  |        ✔️       |        ❌       |          ❌         |        ✔️       |          ❌          |\n| JSON mode             |        ✔️       |        ✔️       |          ✔️         |        ✔️       |          ✔️          |\n| Custom defaults       |        ✔️       |        ✔️       |          ❌         |        ✔️       |          ❌          |\n| Composable            |        ✔️       |        ❌       |          ❌         |        ❌       |          ✔️          |\n| Hooks                 |        ✔️       |        ❌       |          ❌         |        ✔️       |          ❌          |\n| Issues open           |  [![][gio]][g1]  | [![][rio]][r1]  |    [![][nio]][n1]    |  [![][aio]][a1] |    [![][sio]][s1]     |\n| Issues closed         |  [![][gic]][g2]  | [![][ric]][r2]  |    [![][nic]][n2]    |  [![][aic]][a2] |    [![][sic]][s2]     |\n| Downloads             |  [![][gd]][g3]   |  [![][rd]][r3]  |    [![][nd]][n3]     |  [![][ad]][a3]  |    [![][sd]][s3]      |\n| Coverage              |  [![][gc]][g4]   |  [![][rc]][r4]  |    [![][nc]][n4]     |  [![][ac]][a4]  |    [![][sc]][s4]      |\n| Build                 |  [![][gb]][g5]   |  [![][rb]][r5]  |    [![][nb]][n5]     |  [![][ab]][a5]  |    [![][sb]][s5]      |\n| Bugs                  |  [![][gbg]][g6]  | [![][rbg]][r6]  |    [![][nbg]][n6]    |  [![][abg]][a6] |    [![][sbg]][s6]     |\n| Dependents            |  [![][gdp]][g7]  | [![][rdp]][r7]  |    [![][ndp]][n7]    |  [![][adp]][a7] |    [![][sdp]][s7]     |\n| Install size          |  [![][gis]][g8]  | [![][ris]][r8]  |    [![][nis]][n8]    |  [![][ais]][a8] |    [![][sis]][s8]     |\n\n\\* It's almost API compatible with the browser `fetch` API.<br>\n\\*\\* Need to switch the protocol manually.<br>\n❔ Experimental support.\n\n<!-- GITHUB -->\n[r0]: https://github.com/request/request\n[n0]: https://github.com/bitinn/node-fetch\n[a0]: https://github.com/axios/axios\n[s0]: https://github.com/visionmedia/superagent\n\n<!-- ISSUES OPEN -->\n[gio]: https://badgen.net/github/open-issues/sindresorhus/got?label\n[rio]: https://badgen.net/github/open-issues/request/request?label\n[nio]: https://badgen.net/github/open-issues/bitinn/node-fetch?label\n[aio]: https://badgen.net/github/open-issues/axios/axios?label\n[sio]: https://badgen.net/github/open-issues/visionmedia/superagent?label\n\n[g1]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[r1]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[n1]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[a1]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[s1]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n\n<!-- ISSUES CLOSED -->\n[gic]: https://badgen.net/github/closed-issues/sindresorhus/got?label\n[ric]: https://badgen.net/github/closed-issues/request/request?label\n[nic]: https://badgen.net/github/closed-issues/bitinn/node-fetch?label\n[aic]: https://badgen.net/github/closed-issues/axios/axios?label\n[sic]: https://badgen.net/github/closed-issues/visionmedia/superagent?label\n\n[g2]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[r2]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[n2]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[a2]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[s2]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n\n<!-- DOWNLOADS -->\n[gd]: https://badgen.net/npm/dm/got?label\n[rd]: https://badgen.net/npm/dm/request?label\n[nd]: https://badgen.net/npm/dm/node-fetch?label\n[ad]: https://badgen.net/npm/dm/axios?label\n[sd]: https://badgen.net/npm/dm/superagent?label\n\n[g3]: https://www.npmjs.com/package/got\n[r3]: https://www.npmjs.com/package/request\n[n3]: https://www.npmjs.com/package/node-fetch\n[a3]: https://www.npmjs.com/package/axios\n[s3]: https://www.npmjs.com/package/superagent\n\n<!-- COVERAGE -->\n[gc]: https://badgen.net/coveralls/c/github/sindresorhus/got?label\n[rc]: https://badgen.net/coveralls/c/github/request/request?label\n[nc]: https://badgen.net/coveralls/c/github/bitinn/node-fetch?label\n[ac]: https://badgen.net/coveralls/c/github/mzabriskie/axios?label\n[sc]: https://badgen.net/codecov/c/github/visionmedia/superagent?label\n\n[g4]: https://coveralls.io/github/sindresorhus/got\n[r4]: https://coveralls.io/github/request/request\n[n4]: https://coveralls.io/github/bitinn/node-fetch\n[a4]: https://coveralls.io/github/mzabriskie/axios\n[s4]: https://codecov.io/gh/visionmedia/superagent\n\n<!-- BUILD -->\n[gb]: https://badgen.net/travis/sindresorhus/got?label\n[rb]: https://badgen.net/travis/request/request?label\n[nb]: https://badgen.net/travis/bitinn/node-fetch?label\n[ab]: https://badgen.net/travis/axios/axios?label\n[sb]: https://badgen.net/travis/visionmedia/superagent?label\n\n[g5]: https://travis-ci.org/sindresorhus/got\n[r5]: https://travis-ci.org/request/request\n[n5]: https://travis-ci.org/bitinn/node-fetch\n[a5]: https://travis-ci.org/axios/axios\n[s5]: https://travis-ci.org/visionmedia/superagent\n\n<!-- BUGS -->\n[gbg]: https://badgen.net/github/label-issues/sindresorhus/got/bug/open?label\n[rbg]: https://badgen.net/github/label-issues/request/request/Needs%20investigation/open?label\n[nbg]: https://badgen.net/github/label-issues/bitinn/node-fetch/bug/open?label\n[abg]: https://badgen.net/github/label-issues/axios/axios/type:bug/open?label\n[sbg]: https://badgen.net/github/label-issues/visionmedia/superagent/Bug/open?label\n\n[g6]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[r6]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A\"Needs+investigation\"\n[n6]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[a6]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Atype:bug\n[s6]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3ABug\n\n<!-- DEPENDENTS -->\n[gdp]: https://badgen.net/npm/dependents/got?label\n[rdp]: https://badgen.net/npm/dependents/request?label\n[ndp]: https://badgen.net/npm/dependents/node-fetch?label\n[adp]: https://badgen.net/npm/dependents/axios?label\n[sdp]: https://badgen.net/npm/dependents/superagent?label\n\n[g7]: https://www.npmjs.com/package/got?activeTab=dependents\n[r7]: https://www.npmjs.com/package/request?activeTab=dependents\n[n7]: https://www.npmjs.com/package/node-fetch?activeTab=dependents\n[a7]: https://www.npmjs.com/package/axios?activeTab=dependents\n[s7]: https://www.npmjs.com/package/visionmedia?activeTab=dependents\n\n<!-- INSTALL SIZE -->\n[gis]: https://badgen.net/packagephobia/install/got?label\n[ris]: https://badgen.net/packagephobia/install/request?label\n[nis]: https://badgen.net/packagephobia/install/node-fetch?label\n[ais]: https://badgen.net/packagephobia/install/axios?label\n[sis]: https://badgen.net/packagephobia/install/superagent?label\n\n[g8]: https://packagephobia.now.sh/result?p=got\n[r8]: https://packagephobia.now.sh/result?p=request\n[n8]: https://packagephobia.now.sh/result?p=node-fetch\n[a8]: https://packagephobia.now.sh/result?p=axios\n[s8]: https://packagephobia.now.sh/result?p=superagent\n\n#### Install size of the dependencies\n\n|                   Dependency                   |          Install size         |\n|------------------------------------------------|-------------------------------|\n| [@sindresorhus/is][url-is]                     | ![][size-is]                  |\n| [@szmarczak/http-timer][url-http-timer]        | ![][size-http-timer]          |\n| [cacheable-request][url-cacheable-request]     | ![][size-cacheable-request]   |\n| [decompress-response][url-decompress-response] | ![][size-decompress-response] |\n| [duplexer3][url-duplexer3]                     | ![][size-duplexer3]           |\n| [get-stream][url-get-stream]                   | ![][size-get-stream]          |\n| [lowercase-keys][url-lowercase-keys]           | ![][size-lowercase-keys]      |\n| [mimic-response][url-mimic-response]           | ![][size-mimic-response]      |\n| [p-cancelable][url-p-cancelable]               | ![][size-p-cancelable]        |\n| [to-readable-stream][url-to-readable-stream]   | ![][size-to-readable-stream]  |\n|                                                | ![][gis]                      |\n\n[size-is]: https://badgen.net/packagephobia/install/@sindresorhus/is?label\n[size-http-timer]: https://badgen.net/packagephobia/install/@szmarczak/http-timer?label\n[size-cacheable-request]: https://badgen.net/packagephobia/install/cacheable-request?label\n[size-decompress-response]: https://badgen.net/packagephobia/install/decompress-response?label\n[size-duplexer3]: https://badgen.net/packagephobia/install/duplexer3?label\n[size-get-stream]: https://badgen.net/packagephobia/install/get-stream?label\n[size-lowercase-keys]: https://badgen.net/packagephobia/install/lowercase-keys?label\n[size-mimic-response]: https://badgen.net/packagephobia/install/mimic-response?label\n[size-p-cancelable]: https://badgen.net/packagephobia/install/p-cancelable?label\n[size-to-readable-stream]: https://badgen.net/packagephobia/install/to-readable-stream?label\n\n[url-is]: https://github.com/sindresorhus/is\n[url-http-timer]: https://github.com/szmarczak/http-timer\n[url-cacheable-request]: https://github.com/lukechilds/cacheable-request\n[url-decompress-response]: https://github.com/sindresorhus/decompress-response\n[url-duplexer3]: https://github.com/floatdrop/duplexer3\n[url-get-stream]: https://github.com/sindresorhus/get-stream\n[url-lowercase-keys]: https://github.com/sindresorhus/lowercase-keys\n[url-mimic-response]: https://github.com/sindresorhus/mimic-response\n[url-p-cancelable]: https://github.com/sindresorhus/p-cancelable\n[url-to-readable-stream]: https://github.com/sindresorhus/to-readable-stream\n\n## Related\n\n- [gh-got](https://github.com/sindresorhus/gh-got) - Got convenience wrapper to interact with the GitHub API\n- [gl-got](https://github.com/singapore/gl-got) - Got convenience wrapper to interact with the GitLab API\n- [travis-got](https://github.com/samverschueren/travis-got) - Got convenience wrapper to interact with the Travis API\n- [graphql-got](https://github.com/kevva/graphql-got) - Got convenience wrapper to interact with GraphQL\n- [GotQL](https://github.com/khaosdoctor/gotql) - Got convenience wrapper to interact with GraphQL using JSON-parsed queries instead of strings\n- [got-fetch](https://github.com/alexghr/got-fetch) - Got with a `fetch` interface\n\n\n## Maintainers\n\n[![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://sindresorhus.com) | [![Szymon Marczak](https://github.com/szmarczak.png?size=100)](https://github.com/szmarczak) | [![Alexander Tesfamichael](https://github.com/AlexTes.png?size=100)](https://github.com/AlexTes) | [![Brandon Smith](https://github.com/brandon93s.png?size=100)](https://github.com/brandon93s) | [![Luke Childs](https://github.com/lukechilds.png?size=100)](https://github.com/lukechilds)\n---|---|---|---|---\n[Sindre Sorhus](https://sindresorhus.com) | [Szymon Marczak](https://github.com/szmarczak) | [Alexander Tesfamichael](https://alextes.me) | [Brandon Smith](https://github.com/brandon93s) | [Luke Childs](https://github.com/lukechilds)\n\n###### Former\n\n- [Vsevolod Strukchinsky](https://github.com/floatdrop)\n\n\n---\n\n<div align=\"center\">\n\t<b>\n\t\t<a href=\"https://tidelift.com/subscription/pkg/npm-got?utm_source=npm-got&utm_medium=referral&utm_campaign=readme\">Get professional support for this package with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n","types":"dist","browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","babel":false,"compileEnhancements":false,"extensions":["ts"],"require":["ts-node/register"]},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"rules":{"import/named":"off","import/no-unresolved":"off","import/first":"off","import/newline-after-import":"off","ava/no-import-test-files":"off","ava/no-ignored-test-files":"off","@typescript-eslint/explicit-function-return-type":"off","@typescript-eslint/no-unnecessary-type-assertion":"off","@typescript-eslint/await-thenable":"off"},"ignores":["documentation/examples/*"]},"gitHead":"14fe93054122861c25e8742ace27f6ce156e48db","readmeFilename":"readme.md","_nodeVersion":"10.16.3","_npmVersion":"6.11.3","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.0.0-alpha.2_1569239396129_0.6943412971022056"},"_hasShrinkwrap":false},"10.0.0-alpha.2.1":{"_id":"got@10.0.0-alpha.2.1","name":"got","description":"Simplified HTTP requests","version":"10.0.0-alpha.2.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron","brotli"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava && tsc --noEmit","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@sindresorhus/tsconfig":"^0.4.0","@types/duplexer3":"^0.1.0","@types/node":"^12.7.5","@types/sinon":"^7.0.13","@typescript-eslint/eslint-plugin":"^1.10.2","@typescript-eslint/parser":"^1.10.2","ava":"^2.4.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.14.0","form-data":"^2.5.1","get-port":"^5.0.0","keyv":"^3.1.0","lolex":"^4.2.0","nock":"^11.3.4","np":"^5.0.3","nyc":"^14.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^7.4.2","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","ts-node":"^8.4.1","typescript":"3.4.4","xo":"^0.24.0"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^2.0.0","@types/cacheable-request":"^6.0.1","@types/tough-cookie":"^2.3.5","cacheable-lookup":"^0.2.1","cacheable-request":"^6.1.0","decompress-response":"^4.2.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^1.0.2","to-readable-stream":"^2.0.0","type-fest":"^0.8.0"},"engines":{"node":">=8.6"},"main":"dist","dist":{"shasum":"d047db7a2ef50f3f7a10c824b84c07f55b297cd6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.0.0-alpha.2.1.tgz"},"readme":"<div align=\"center\">\n\t<br>\n\t<br>\n\t<img width=\"360\" src=\"media/logo.svg\" alt=\"Got\">\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n\t<hr>\n\t<p align=\"center\">\n\t\t<sub>Huge thanks to these companies for helping make open source sustainable by sponsoring Sindre Sorhus</sub>\n\t\t<br>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://moxy.studio\"><img src=\"https://sindresorhus.com/assets/thanks/moxy-logo.svg\" width=\"170\"></a>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://www.gumlet.com\">\n\t\t\t<div>\n\t\t\t\t<img src=\"https://sindresorhus.com/assets/thanks/gumlet-logo.svg\" width=\"200\"/>\n\t\t\t</div>\n\t\t\t<sup><b>Optimised Image Delivery made simple</b></sup>\n\t\t</a>\n\t</p>\n\t<hr>\n\t<br>\n\t<br>\n</div>\n\n> Simplified HTTP requests\n\n[![Build Status: Linux](https://travis-ci.org/sindresorhus/got.svg?branch=master)](https://travis-ci.org/sindresorhus/got)\n[![Coverage Status](https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/got?branch=master)\n[![Downloads](https://img.shields.io/npm/dm/got.svg)](https://npmjs.com/got)\n[![Install size](https://packagephobia.now.sh/badge?p=got)](https://packagephobia.now.sh/result?p=got)\n\nGot is a human-friendly and powerful HTTP request library.\n\nIt was created because the popular [`request`](https://github.com/request/request) package is bloated: [![Install size](https://packagephobia.now.sh/badge?p=request)](https://packagephobia.now.sh/result?p=request)\n\nGot is for Node.js. For browsers, we recommend [Ky](https://github.com/sindresorhus/ky).\n\n**This readme reflects the next major version that is currently in development. You probably want [the v9 readme](https://www.npmjs.com/package/got).**\n\n\n## Highlights\n\n- [Promise & stream API](#api)\n- [Request cancelation](#aborting-the-request)\n- [RFC compliant caching](#cache-adapters)\n- [Follows redirects](#followredirect)\n- [Retries on failure](#retry)\n- [Progress events](#onuploadprogress-progress)\n- [Handles gzip/deflate/brotli](#decompress)\n- [Timeout handling](#timeout)\n- [Errors with metadata](#errors)\n- [JSON mode](#json-mode)\n- [WHATWG URL support](#url)\n- [Hooks](#hooks)\n- [Instances with custom defaults](#instances)\n- [Composable](documentation/advanced-creation.md#merging-instances)\n- [Plugins](documentation/lets-make-a-plugin.md)\n- [Electron support](#useelectronnet)\n- [Used by ~2000 packages and ~500K repos](https://github.com/sindresorhus/got/network/dependents)\n- Actively maintained\n\n[Moving from Request?](documentation/migration-guides.md)\n\n[See how Got compares to other HTTP libraries](#comparison)\n\n## Install\n\n```\n$ npm install got\n```\n\n\n## Usage\n\n```js\nconst got = require('got');\n\n(async () => {\n\ttry {\n\t\tconst response = await got('https://sindresorhus.com');\n\t\tconsole.log(response.body);\n\t\t//=> '<!doctype html> ...'\n\t} catch (error) {\n\t\tconsole.log(error.response.body);\n\t\t//=> 'Internal server error ...'\n\t}\n})();\n```\n\n###### Streams\n\n```js\nconst stream = require('stream');\nconst {promisify} = require('util');\nconst fs = require('fs');\nconst got = require('got');\n\nconst pipeline = promisify(stream.pipeline);\n\n(async () => {\n    await pipeline(\n        got.stream('https://sindresorhus.com'),\n        fs.createWriteStream('index.html')\n    );\n\n    // For POST, PUT, and PATCH methods `got.stream` returns a `stream.Writable`\n    await pipeline(\n        fs.createReadStream('index.html'),\n        got.stream.post('https://sindresorhus.com')\n    );\n})();\n```\n\n**Tip:** Using `from.pipe(to)` doesn't forward errors. If you use it, switch to [`Stream.pipeline(from, ..., to, callback)`](https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback) instead (available from Node v10).\n\n### API\n\nIt's a `GET` request by default, but can be changed by using different methods or via `options.method`.\n\n#### got([url], [options])\n\nReturns a Promise for a [`response` object](#response) or a [stream](#streams-1) if `options.stream` is set to true.\n\n##### url\n\nType: `string | object`\n\nThe URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\nProperties from `options` will override properties in the parsed `url`.\n\nIf no protocol is specified, it will throw a `TypeError`.\n\n**Note:** this can also be an option.\n\n##### options\n\nType: `object`\n\nAny of the [`https.request`](https://nodejs.org/api/https.html#https_https_request_options_callback) options.\n\n###### prefixUrl\n\nType: `string | URL`\n\nWhen specified, `prefixUrl` will be prepended to `url`. The prefix can be any valid URL, either relative or absolute. A trailing slash `/` is optional, one will be added automatically, if needed, when joining `prefixUrl` and `url`. The `url` argument cannot start with a `/` when using this option.\n\nUseful when used with `got.extend()` to create niche-specific Got-instances.\n\n**Note:** `prefixUrl` will be ignored if the `url` argument is a URL instance.\n\n```js\nconst got = require('got');\n\n(async () => {\n\tawait got('unicorn', {prefixUrl: 'https://cats.com'});\n\t//=> 'https://cats.com/unicorn'\n})();\n```\n\n###### headers\n\nType: `object`<br>\nDefault: `{}`\n\nRequest headers.\n\nExisting headers will be overwritten. Headers set to `null` will be omitted.\n\n###### stream\n\nType: `boolean`<br>\nDefault: `false`\n\nReturns a `Stream` instead of a `Promise`. This is equivalent to calling `got.stream(url, [options])`.\n\n###### body\n\nType: `string | Buffer | stream.Readable` or [`form-data` instance](https://github.com/form-data/form-data)\n\n**Note:** The `body` option cannot be used with the `json` or `form` option.\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nIf present in `options` and `options.method` is not set, it will throw a `TypeError`.\n\nThe `content-length` header will be automatically set if `body` is a `string` / `Buffer` / `fs.createReadStream` instance / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n\n###### json\n\nType: `object | Array | number | string | boolean | null` *(JSON-serializable values)*\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nJSON body. If the `Content-Type` header is not set, it will be set to `application/json`.\n\n###### context\n\nType: `object`\n\nUser data. In contrast to other options, `context` is not enumerable.\n\n**Note:** The object is never merged, it's just passed through. Got will not modify the object in any way.\n\nIt's very useful for storing auth tokens:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\toptions => {\n\t\t\t\tif (!options.context && !options.context.token) {\n\t\t\t\t\tthrow new Error('Token required');\n\t\t\t\t}\n\n\t\t\t\toptions.header.token = options.context.token;\n\t\t\t}\n\t\t]\n\t}\n});\n\n(async () => {\n\tconst context = {\n\t\ttoken: 'secret'\n\t};\n\n\tconst response = await instance('https://httpbin.org/headers', {context});\n\n\t// Let's see the headers\n\tconsole.log(response.body);\n})();\n```\n\n###### responseType\n\nType: `string`<br>\nDefault: `text`\n\n**Note:** When using streams, this option is ignored.\n\nParsing method used to retrieve the body from the response. Can be `text`, `json` or `buffer`. The promise has `.json()` and `.buffer()` and `.text()` functions which set this option automatically.\n\nExample:\n\n```js\nconst {body} = await got(url).json();\n```\n\n###### resolveBodyOnly\n\nType: `string`<br>\nDefault: `false`\n\nWhen set to `true` the promise will return the [Response body](#body-1) instead of the [Response](#response) object.\n\n###### cookieJar\n\nType: [`tough.CookieJar` instance](https://github.com/salesforce/tough-cookie#cookiejar)\n\n**Note:** If you provide this option, `options.headers.cookie` will be overridden.\n\nCookie support. You don't have to care about parsing or how to store them. [Example.](#cookies)\n\n###### ignoreInvalidCookies\n\nType: `boolean`<br>\nDefault: `false`\n\nIgnore invalid cookies instead of throwing an error. Only useful when the `cookieJar` option has been set. Not recommended.\n\n###### encoding\n\nType: `string | null`<br>\nDefault: `'utf8'`\n\n[Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data. If `null`, the body is returned as a [`Buffer`](https://nodejs.org/api/buffer.html) (binary data).\n\n###### form\n\nType: `object | true`\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nThe form body is converted to query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n\nIf set to `true` and the `Content-Type` header is not set, it will be set to `application/x-www-form-urlencoded`.\n\n###### searchParams\n\nType: `string | object<string, string | number> | URLSearchParams`\n\n**Note:** The `query` option was renamed to `searchParams` in Got v10. The `query` option name is still functional, but is being deprecated and will be completely removed in Got v11.\n\nQuery string that will be added to the request URL. This will override the query string in `url`.\n\nIf you need to pass in an array, you can do it using a `URLSearchParams` instance:\n\n```js\nconst got = require('got');\n\nconst searchParams = new URLSearchParams([['key', 'a'], ['key', 'b']]);\n\ngot('https://example.com', {searchParams});\n\nconsole.log(searchParams.toString());\n//=> 'key=a&key=b'\n```\n\nAnd if you need a different array format, you could use the [`query-string`](https://github.com/sindresorhus/query-string) package:\n\n```js\nconst got = require('got');\nconst queryString = require('query-string');\n\nconst searchParams = queryString.stringify({key: ['a', 'b']}, {arrayFormat: 'bracket'});\n\ngot('https://example.com', {searchParams});\n\nconsole.log(searchParams);\n//=> 'key[]=a&key[]=b'\n```\n\n###### timeout\n\nType: `number | object`\n\nMilliseconds to wait for the server to end the response before aborting the request with [`got.TimeoutError`](#gottimeouterror) error (a.k.a. `request` property). By default, there's no timeout.\n\nThis also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n\n- `lookup` starts when a socket is assigned and ends when the hostname has been resolved. Does not apply when using a Unix domain socket.\n- `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n- `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n- `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n- `response` starts when the request has been written to the socket and ends when the response headers are received.\n- `send` starts when the socket is connected and ends with the request has been written to the socket.\n- `request` starts when the request is initiated and ends when the response's end event fires.\n\n###### retry\n\nType: `number | object`<br>\nDefault:\n- limit: `2`\n- calculateDelay: `(attemptCount, retryOptions, error, computedValue) => computedValue`\n- methods: `GET` `PUT` `HEAD` `DELETE` `OPTIONS` `TRACE`\n- statusCodes: [`408`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408) [`413`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413) [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) [`500`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500) [`502`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502) [`503`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503) [`504`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504)\n- maxRetryAfter: `undefined`\n- errorCodes: `ETIMEDOUT` `ECONNRESET` `EADDRINUSE` `ECONNREFUSED` `EPIPE` `ENOTFOUND` `ENETUNREACH` `EAI_AGAIN`\n\nAn object representing `limit`, `calculateDelay`, `methods`, `statusCodes`, `maxRetryAfter` and `errorCodes` fields for maximum retry count, retry handler, allowed methods, allowed status codes, maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time and allowed error codes.\n\n**Note:** When using streams, this option is ignored.\n\nIf `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.<br>\nIf [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n\nDelays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 1).\n\nThe `calculateDelay` property is a `function` with `attemptCount`, `retryOptions`, `error` and `computedValue` arguments for current retry count, the retry options, error and default computed value. The function must return a delay in milliseconds (`0` return value cancels retry).\n\nBy default, it retries *only* on the specified methods, status codes, and on these network errors:\n- `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n- `ECONNRESET`: Connection was forcibly closed by a peer.\n- `EADDRINUSE`: Could not bind to any free port.\n- `ECONNREFUSED`: Connection was refused by the server.\n- `EPIPE`: The remote side of the stream being written has been closed.\n- `ENOTFOUND`: Couldn't resolve the hostname to an IP address.\n- `ENETUNREACH`: No internet connection.\n- `EAI_AGAIN`: DNS lookup timed out.\n\n###### followRedirect\n\nType: `boolean`<br>\nDefault: `true`\n\nDefines if redirect responses should be followed automatically.\n\nNote that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`. This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4).\n\n###### decompress\n\nType: `boolean`<br>\nDefault: `true`\n\nDecompress the response automatically. This will set the `accept-encoding` header to `gzip, deflate, br` on Node.js 11.7.0+ or `gzip, deflate` for older Node.js versions, unless you set it yourself.\n\nBrotli (`br`) support requires Node.js 11.7.0 or later.\n\nIf this is disabled, a compressed response is returned as a `Buffer`. This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n\n###### cache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached response data.\n\n###### dnsCache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached DNS data.\n\n###### request\n\nType: `Function`<br>\nDefault: `http.request` `https.request` *(Depending on the protocol)*\n\nCustom request function. The main purpose of this is to [support HTTP2 using a wrapper](#experimental-http2-support).\n\n###### useElectronNet\n\nType: `boolean`<br>\nDefault: `false`\n\nWhen used in Electron, Got will use [`electron.net`](https://electronjs.org/docs/api/net/) instead of the Node.js `http` module. According to the Electron docs, it should be fully compatible, but it's not entirely. See [#443](https://github.com/sindresorhus/got/issues/443) and [#461](https://github.com/sindresorhus/got/issues/461).\n\n###### throwHttpErrors\n\nType: `boolean`<br>\nDefault: `true`\n\nDetermines if a `got.HTTPError` is thrown for error responses (non-2xx status codes).\n\nIf this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing. This may be useful if you are checking for resource availability and are expecting error responses.\n\n###### agent\n\nSame as the [`agent` option](https://nodejs.org/api/http.html#http_http_request_url_options_callback) for `http.request`, but with an extra feature:\n\nIf you require different agents for different protocols, you can pass a map of agents to the `agent` option. This is necessary because a request to one protocol might redirect to another. In such a scenario, Got will switch over to the right protocol agent for you.\n\n```js\nconst got = require('got');\nconst HttpAgent = require('agentkeepalive');\nconst {HttpsAgent} = HttpAgent;\n\ngot('https://sindresorhus.com', {\n\tagent: {\n\t\thttp: new HttpAgent(),\n\t\thttps: new HttpsAgent()\n\t}\n});\n```\n\n###### hooks\n\nType: `object<string, Function[]>`\n\nHooks allow modifications during the request lifecycle. Hook functions may be async and are run serially.\n\n###### hooks.init\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with plain [request options](#options), right before their normalization. This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when the input needs custom handling.\n\nSee the [Request migration guide](documentation/migration-guides.md#breaking-changes) for an example.\n\n**Note:** This hook must be synchronous!\n\n###### hooks.beforeRequest\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options). Got will make no further changes to the request before it is sent (except the body serialization). This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when you want to create an API client that, for example, uses HMAC-signing.\n\nSee the [AWS section](#aws) for an example.\n\n###### hooks.beforeRedirect\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options) and the redirect [response](#response). Got will make no further changes to the request. This is especially useful when you want to avoid dead sites. Example:\n\n```js\nconst got = require('got');\n\ngot('https://example.com', {\n\thooks: {\n\t\tbeforeRedirect: [\n\t\t\t(options, response) => {\n\t\t\t\tif (options.hostname === 'deadSite') {\n\t\t\t\t\toptions.hostname = 'fallbackSite';\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.beforeRetry\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options), the error and the retry count. Got will make no further changes to the request. This is especially useful when some extra work is required before the next try. Example:\n\n```js\nconst got = require('got');\n\ngot.post('https://example.com', {\n\thooks: {\n\t\tbeforeRetry: [\n\t\t\t(options, error, retryCount) => {\n\t\t\t\tif (error.statusCode === 413) { // Payload too large\n\t\t\t\t\toptions.body = getNewBody();\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.afterResponse\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [response object](#response) and a retry function.\n\nEach function should return the response. This is especially useful when you want to refresh an access token. Example:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tafterResponse: [\n\t\t\t(response, retryWithMergedOptions) => {\n\t\t\t\tif (response.statusCode === 401) { // Unauthorized\n\t\t\t\t\tconst updatedOptions = {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\ttoken: getNewToken() // Refresh the access token\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Save for further requests\n\t\t\t\t\tinstance.defaults.options = got.mergeOptions(instance.defaults.options, updatedOptions);\n\n\t\t\t\t\t// Make a new retry\n\t\t\t\t\treturn retryWithMergedOptions(updatedOptions);\n\t\t\t\t}\n\n\t\t\t\t// No changes otherwise\n\t\t\t\treturn response;\n\t\t\t}\n\t\t]\n\t},\n\tmutableDefaults: true\n});\n```\n\n###### hooks.beforeError\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with an `Error` instance. The error is passed to the hook right before it's thrown. This is especially useful when you want to have more detailed errors.\n\n**Note:** Errors thrown while normalizing input options are thrown directly and not part of this hook.\n\n```js\nconst got = require('got');\n\ngot('https://api.github.com/some-endpoint', {\n\thooks: {\n\t\tbeforeError: [\n\t\t\terror => {\n\t\t\t\tconst {response} = error;\n \t\t\t\tif (response && response.body) {\n\t\t\t\t\terror.name = 'GitHubError';\n\t\t\t\t\terror.message = `${response.body.message} (${error.statusCode})`;\n\t\t\t\t}\n\n \t\t\t\treturn error;\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n#### Response\n\nThe response object will typically be a [Node.js HTTP response stream](https://nodejs.org/api/http.html#http_class_http_incomingmessage), however, if returned from the cache it will be a [response-like object](https://github.com/lukechilds/responselike) which behaves in the same way.\n\n##### request\n\nType: `object`\n\n**Note:** This is not a [http.ClientRequest](https://nodejs.org/api/http.html#http_class_http_clientrequest).\n\n- `options` - The Got options that were set on this request.\n\n##### body\n\nType: `string | object | Buffer` *(Depending on `options.responseType`)*\n\nThe result of the request.\n\n##### url\n\nType: `string`\n\nThe request URL or the final URL after redirects.\n\n##### requestUrl\n\nType: `string`\n\nThe original request URL.\n\n##### timings\n\nType: `object`\n\nThe object contains the following properties:\n\n- `start` - Time when the request started.\n- `socket` - Time when a socket was assigned to the request.\n- `lookup` - Time when the DNS lookup finished.\n- `connect` - Time when the socket successfully connected.\n- `upload` - Time when the request finished uploading.\n- `response` - Time when the request fired the `response` event.\n- `end` - Time when the response fired the `end` event.\n- `error` - Time when the request fired the `error` event.\n- `phases`\n\t- `wait` - `timings.socket - timings.start`\n\t- `dns` - `timings.lookup - timings.socket`\n\t- `tcp` - `timings.connect - timings.lookup`\n\t- `request` - `timings.upload - timings.connect`\n\t- `firstByte` - `timings.response - timings.upload`\n\t- `download` - `timings.end - timings.response`\n\t- `total` - `timings.end - timings.start` or `timings.error - timings.start`\n\n**Note:** The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n\n##### isFromCache\n\nType: `boolean`\n\nWhether the response was retrieved from the cache.\n\n##### redirectUrls\n\nType: `string[]`\n\nThe redirect URLs.\n\n##### retryCount\n\nType: `number`\n\nThe number of times the request was retried.\n\n#### Streams\n\n**Note:** Progress events, redirect events and request/response events can also be used with promises.\n\n**Note:** To access `response.isFromCache` you need to use `got.stream(url, options).isFromCache`. The value will be undefined until the `response` event.\n\n#### got.stream(url, [options])\n\nSets `options.stream` to `true`.\n\nReturns a [duplex stream](https://nodejs.org/api/stream.html#stream_class_stream_duplex) with additional events:\n\n##### .on('request', request)\n\n`request` event to get the request object of the request.\n\n**Tip:** You can use `request` event to abort request:\n\n```js\ngot.stream('https://github.com')\n\t.on('request', request => setTimeout(() => request.abort(), 50));\n```\n\n##### .on('response', response)\n\nThe `response` event to get the response object of the final request.\n\n##### .on('redirect', response, nextOptions)\n\nThe `redirect` event to get the response object of a redirect. The second argument is options for the next request to the redirect location.\n\n##### .on('uploadProgress', progress)\n##### .on('downloadProgress', progress)\n\nProgress events for uploading (sending a request) and downloading (receiving a response). The `progress` argument is an object like:\n\n```js\n{\n\tpercent: 0.1,\n\ttransferred: 1024,\n\ttotal: 10240\n}\n```\n\nIf it's not possible to retrieve the body size (can happen when streaming), `total` will be `null`.\n\n```js\n(async () => {\n\tconst response = await got('https://sindresorhus.com')\n\t\t.on('downloadProgress', progress => {\n\t\t\t// Report download progress\n\t\t})\n\t\t.on('uploadProgress', progress => {\n\t\t\t// Report upload progress\n\t\t});\n\n\tconsole.log(response);\n})();\n```\n\n##### .on('error', error, body, response)\n\nThe `error` event emitted in case of a protocol error (like `ENOTFOUND` etc.) or status error (4xx or 5xx). The second argument is the body of the server response in case of status error. The third argument is a response object.\n\n#### got.get(url, [options])\n#### got.post(url, [options])\n#### got.put(url, [options])\n#### got.patch(url, [options])\n#### got.head(url, [options])\n#### got.delete(url, [options])\n\nSets `options.method` to the method name and makes a request.\n\n### Instances\n\n#### got.extend(...options)\n\nConfigure a new `got` instance with default `options`. The `options` are merged with the parent instance's `defaults.options` using [`got.mergeOptions`](#gotmergeoptionsparentoptions-newoptions). You can access the resolved options with the `.defaults` property on the instance.\n\n```js\nconst client = got.extend({\n\tprefixUrl: 'https://example.com',\n\theaders: {\n\t\t'x-unicorn': 'rainbow'\n\t}\n});\n\nclient.get('/demo');\n\n/* HTTP Request =>\n * GET /demo HTTP/1.1\n * Host: example.com\n * x-unicorn: rainbow\n */\n```\n\n```js\n(async () => {\n\tconst client = got.extend({\n\t\tprefixUrl: 'httpbin.org',\n\t\theaders: {\n\t\t\t'x-foo': 'bar'\n\t\t}\n\t});\n\tconst {headers} = await client.get('/headers').json();\n\t//=> headers['x-foo'] === 'bar'\n\n\tconst jsonClient = client.extend({\n\t\tresponseType: 'json',\n\t\tresolveBodyOnly: true,\n\t\theaders: {\n\t\t\t'x-baz': 'qux'\n\t\t}\n\t});\n\tconst {headers: headers2} = await jsonClient.get('/headers');\n\t//=> headers2['x-foo'] === 'bar'\n\t//=> headers2['x-baz'] === 'qux'\n})();\n```\n\n**Tip:** Need more control over the behavior of Got? Check out the [`got.create()`](documentation/advanced-creation.md).\n\nAdditionally, `got.extend()` accepts two properties from the `defaults` object: `mutableDefaults` and `handlers`. Example:\n\n```js\n// You can now modify `mutableGot.defaults.options`.\nconst mutableGot = got.extend({mutableDefaults: true});\n\nconst mergedHandlers = got.extend({\n\thandlers: [\n\t\t(options, next) => {\n\t\t\tdelete options.headers.referer;\n\n\t\t\treturn next(options);\n\t\t}\n\t]\n});\n```\n\n#### got.extend(...instances)\n\nMerges many instances into a single one:\n- options are merged using [`got.mergeOptions()`](#gotmergeoptionsparentoptions-newoptions) (+ hooks are merged too),\n- handlers are stored in an array (you can access them through `instance.defaults.handlers`).\n\n#### got.extend(...options, ...instances, ...)\n\nIt's possible to combine options and instances.<br>\nIt gives the same effect as `got.extend(...options).extend(...instances)`:\n\n```js\nconst a = {headers: {cat: 'meow'}};\nconst b = got.create({\n\toptions: {\n\t\theaders: {\n\t\t\tcow: 'moo'\n\t\t}\n\t}\n});\n\n// The same as `got.extend(a).extend(b)`.\n// Note `a` is options and `b` is an instance.\ngot.extend(a, b);\n//=> {headers: {cat: 'meow', cow: 'moo'}}\n```\n\n#### got.mergeOptions(parentOptions, newOptions)\n\nExtends parent options. Avoid using [object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals) as it doesn't work recursively:\n\n```js\nconst a = {headers: {cat: 'meow', wolf: ['bark', 'wrrr']}};\nconst b = {headers: {cow: 'moo', wolf: ['auuu']}};\n\n{...a, ...b}            // => {headers: {cow: 'moo', wolf: ['auuu']}}\ngot.mergeOptions(a, b)  // => {headers: {cat: 'meow', cow: 'moo', wolf: ['auuu']}}\n```\n\nOptions are deeply merged to a new object. The value of each key is determined as follows:\n\n- If the new property is set to `undefined`, it keeps the old one.\n- If both properties are an instances of `URLSearchParams`, a new URLSearchParams instance is created. The values are merged using [`urlSearchParams.append(key, value)`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/append).\n- If the parent property is an instance of `URL` and the new value is a `string` or `URL`, a new URL instance is created: [`new URL(new, parent)`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#Syntax).\n- If the new property is a plain `object`:\n\t- If the parent property is a plain `object` too, both values are merged recursively into a new `object`.\n\t- Otherwise, only the new value is deeply cloned.\n- If the new property is an `Array`, it overwrites the old one with a deep clone of the new property.\n- Otherwise, the new value is assigned to the key.\n\n#### got.defaults\n\nType: `object`\n\nThe default Got options used in that instance.\n\n## Errors\n\nEach error contains an `options` property which are the options Got used to create a request - just to make debugging easier.\n\n#### got.CacheError\n\nWhen a cache method fails, for example, if the database goes down or there's a filesystem error.\n\n#### got.RequestError\n\nWhen a request fails. Contains a `code` property with error class code, like `ECONNREFUSED`.\n\n#### got.ReadError\n\nWhen reading from response stream fails.\n\n#### got.ParseError\n\nWhen server response code is 2xx, and parsing body fails. Includes a `response` property.\n\n#### got.HTTPError\n\nWhen the server response code is not 2xx. Includes a `response` property.\n\n#### got.MaxRedirectsError\n\nWhen the server redirects you more than ten times. Includes a `response` property.\n\n#### got.UnsupportedProtocolError\n\nWhen given an unsupported protocol.\n\n#### got.CancelError\n\nWhen the request is aborted with `.cancel()`.\n\n#### got.TimeoutError\n\nWhen the request is aborted due to a [timeout](#timeout). Includes an `event` and `timings` property.\n\n## Aborting the request\n\nThe promise returned by Got has a [`.cancel()`](https://github.com/sindresorhus/p-cancelable) method which when called, aborts the request.\n\n```js\n(async () => {\n\tconst request = got(url, options);\n\n\t// …\n\n\t// In another part of the code\n\tif (something) {\n\t\trequest.cancel();\n\t}\n\n\t// …\n\n\ttry {\n\t\tawait request;\n\t} catch (error) {\n\t\tif (request.isCanceled) { // Or `error instanceof got.CancelError`\n\t\t\t// Handle cancelation\n\t\t}\n\n\t\t// Handle other errors\n\t}\n})();\n```\n\n<a name=\"cache-adapters\"></a>\n## Cache\n\nGot implements [RFC 7234](http://httpwg.org/specs/rfc7234.html) compliant HTTP caching which works out of the box in-memory and is easily pluggable with a wide range of storage adapters. Fresh cache entries are served directly from the cache, and stale cache entries are revalidated with `If-None-Match`/`If-Modified-Since` headers. You can read more about the underlying cache behavior in the [`cacheable-request` documentation](https://github.com/lukechilds/cacheable-request). For DNS cache, Got uses [`cacheable-lookup`](https://github.com/szmarczak/cacheable-lookup).\n\nYou can use the JavaScript `Map` type as an in-memory cache:\n\n```js\nconst got = require('got');\nconst map = new Map();\n\n(async () => {\n\t\tlet response = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> false\n\n\t\tresponse = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> true\n})();\n```\n\nGot uses [Keyv](https://github.com/lukechilds/keyv) internally to support a wide range of storage adapters. For something more scalable you could use an [official Keyv storage adapter](https://github.com/lukechilds/keyv#official-storage-adapters):\n\n```\n$ npm install @keyv/redis\n```\n\n```js\nconst got = require('got');\nconst KeyvRedis = require('@keyv/redis');\n\nconst redis = new KeyvRedis('redis://user:pass@localhost:6379');\n\ngot('https://sindresorhus.com', {cache: redis});\n```\n\nGot supports anything that follows the Map API, so it's easy to write your own storage adapter or use a third-party solution.\n\nFor example, the following are all valid storage adapters:\n\n```js\nconst storageAdapter = new Map();\n// Or\nconst storageAdapter = require('./my-storage-adapter');\n// Or\nconst QuickLRU = require('quick-lru');\nconst storageAdapter = new QuickLRU({maxSize: 1000});\n\ngot('https://sindresorhus.com', {cache: storageAdapter});\n```\n\nView the [Keyv docs](https://github.com/lukechilds/keyv) for more information on how to use storage adapters.\n\n\n## Proxies\n\nYou can use the [`tunnel`](https://github.com/koichik/node-tunnel) package with the `agent` option to work with proxies:\n\n```js\nconst got = require('got');\nconst tunnel = require('tunnel');\n\ngot('https://sindresorhus.com', {\n\tagent: tunnel.httpOverHttp({\n\t\tproxy: {\n\t\t\thost: 'localhost'\n\t\t}\n\t})\n});\n```\n\nAlternatively, use [`global-agent`](https://github.com/gajus/global-agent) to configure a global proxy for all HTTP/HTTPS traffic in your program.\n\n\n## Cookies\n\nYou can use the [`tough-cookie`](https://github.com/salesforce/tough-cookie) package:\n\n```js\nconst {promisify} = require('util');\nconst got = require('got');\nconst {CookieJar} = require('tough-cookie');\n\n(async () => {\n\tconst cookieJar = new CookieJar();\n\tconst setCookie = promisify(cookieJar.setCookie.bind(cookieJar));\n\n\tawait setCookie('foo=bar', 'https://example.com');\n\tawait got('https://example.com', {cookieJar});\n})();\n```\n\n\n## Form data\n\nYou can use the [`form-data`](https://github.com/form-data/form-data) package to create POST request with form data:\n\n```js\nconst fs = require('fs');\nconst got = require('got');\nconst FormData = require('form-data');\n\nconst form = new FormData();\n\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\ngot.post('https://example.com', {\n\tbody: form\n});\n```\n\n\n## OAuth\n\nYou can use the [`oauth-1.0a`](https://github.com/ddo/oauth-1.0a) package to create a signed OAuth request:\n\n```js\nconst got = require('got');\nconst crypto  = require('crypto');\nconst OAuth = require('oauth-1.0a');\n\nconst oauth = OAuth({\n\tconsumer: {\n\t\tkey: process.env.CONSUMER_KEY,\n\t\tsecret: process.env.CONSUMER_SECRET\n\t},\n\tsignature_method: 'HMAC-SHA1',\n\thash_function: (baseString, key) => crypto.createHmac('sha1', key).update(baseString).digest('base64')\n});\n\nconst token = {\n\tkey: process.env.ACCESS_TOKEN,\n\tsecret: process.env.ACCESS_TOKEN_SECRET\n};\n\nconst url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';\n\ngot(url, {\n\theaders: oauth.toHeader(oauth.authorize({url, method: 'GET'}, token)),\n\tresponseType: 'json'\n});\n```\n\n\n## Unix Domain Sockets\n\nRequests can also be sent via [unix domain sockets](http://serverfault.com/questions/124517/whats-the-difference-between-unix-socket-and-tcp-ip-socket). Use the following URL scheme: `PROTOCOL://unix:SOCKET:PATH`.\n\n- `PROTOCOL` - `http` or `https` *(optional)*\n- `SOCKET` - Absolute path to a unix domain socket, for example: `/var/run/docker.sock`\n- `PATH` - Request path, for example: `/v2/keys`\n\n```js\ngot('http://unix:/var/run/docker.sock:/containers/json');\n\n// Or without protocol (HTTP by default)\ngot('unix:/var/run/docker.sock:/containers/json');\n```\n\n\n## AWS\n\nRequests to AWS services need to have their headers signed. This can be accomplished by using the [`aws4`](https://www.npmjs.com/package/aws4) package. This is an example for querying an [\"API Gateway\"](https://docs.aws.amazon.com/apigateway/api-reference/signing-requests/) with a signed request.\n\n```js\nconst got = require('got');\nconst AWS = require('aws-sdk');\nconst aws4 = require('aws4');\n\nconst chain = new AWS.CredentialProviderChain();\n\n// Create a Got instance to use relative paths and signed requests\nconst awsClient = got.extend({\n\tprefixUrl: 'https://<api-id>.execute-api.<api-region>.amazonaws.com/<stage>/',\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\tasync options => {\n\t\t\t\tconst credentials = await chain.resolvePromise();\n\t\t\t\taws4.sign(options, credentials);\n\t\t\t}\n\t\t]\n\t}\n});\n\nconst response = await awsClient('endpoint/path', {\n\t// Request-specific options\n});\n```\n\n\n## Testing\n\nYou can test your requests by using the [`nock`](https://github.com/node-nock/nock) package to mock an endpoint:\n\n```js\nconst got = require('got');\nconst nock = require('nock');\n\nnock('https://sindresorhus.com')\n\t.get('/')\n\t.reply(200, 'Hello world!');\n\n(async () => {\n\tconst response = await got('https://sindresorhus.com');\n\tconsole.log(response.body);\n\t//=> 'Hello world!'\n})();\n```\n\nFor real integration testing we recommend using [`ava`](https://github.com/avajs/ava) with [`create-test-server`](https://github.com/lukechilds/create-test-server). We're using a macro so we don't have to `server.listen()` and `server.close()` every test. Take a look at one of our tests:\n\n```js\ntest('retry function gets iteration count', withServer, async (t, server, got) => {\n\tlet knocks = 0;\n\tserver.get('/', (request, response) => {\n\t\tif (knocks++ === 1) {\n\t\t\tresponse.end('who`s there?');\n\t\t}\n\t});\n\n\tawait got({\n\t\tretry: {\n\t\t\tcalculateDelay: ({attemptCount}) => {\n\t\t\t\tt.true(is.number(attemptCount));\n\t\t\t\treturn attemptCount < 2;\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\n\n## Tips\n\n### JSON mode\n\nTo pass an object as the body, you need to use the `json` option. It will be stringified using `JSON.stringify`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst {body} = await got.post('https://httpbin.org/anything', {\n\t\tjson: {\n\t\t\thello: 'world'\n\t\t},\n\t\tresponseType: 'json'\n\t});\n\n\tconsole.log(body.data);\n\t//=> '{\"hello\":\"world\"}'\n})();\n```\n\nTo receive a JSON body you can either set `responseType` option to `json` or use `promise.json()`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst {body} = await got.post('https://httpbin.org/anything', {\n\t\tbody: {\n\t\t\thello: 'world'\n\t\t}\n\t}).json();\n\n\tconsole.log(body);\n\t//=> {…}\n})();\n```\n\n### User Agent\n\nIt's a good idea to set the `'user-agent'` header so the provider can more easily see how their resource is used. By default, it's the URL to this repo. You can omit this header by setting it to `null`.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': null\n\t}\n});\n```\n\n### 304 Responses\n\nBear in mind; if you send an `if-modified-since` header and receive a `304 Not Modified` response, the body will be empty. It's your responsibility to cache and retrieve the body contents.\n\n### Custom endpoints\n\nUse `got.extend()` to make it nicer to work with REST APIs. Especially if you use the `prefixUrl` option.\n\n**Note:** Not to be confused with [`got.create()`](documentation/advanced-creation.md), which has no defaults.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\nconst custom = got.extend({\n\tprefixUrl: 'example.com',\n\tresponseType: 'json',\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\n// Use `custom` exactly how you use `got`\n(async () => {\n\tconst list = await custom('/v1/users/list');\n})();\n```\n\n### Experimental HTTP2 support\n\nGot provides an experimental support for HTTP2 using the [`http2-wrapper`](https://github.com/szmarczak/http2-wrapper) package:\n\n```js\nconst got = require('got');\nconst {request} = require('http2-wrapper');\n\nconst h2got = got.extend({request});\n\n(async () => {\n\tconst {body} = await h2got('https://nghttp2.org/httpbin/headers');\n\tconsole.log(body);\n})();\n```\n\n## Comparison\n\n|                       |       `got`      | [`request`][r0] |  [`node-fetch`][n0]  |  [`axios`][a0]  |  [`superagent`][s0]  |\n|-----------------------|:----------------:|:---------------:|:--------------------:|:---------------:|:--------------------:|\n| HTTP/2 support        |        ❔        |        ❌       |          ❌         |        ❌       |          ✔️\\*\\*      |\n| Browser support       |        ❌       |        ❌       |          ✔️\\*       |        ✔️       |          ✔️          |\n| Electron support      |        ✔️       |        ❌       |          ❌         |        ❌       |          ❌          |\n| Promise API           |        ✔️       |        ✔️       |          ✔️         |        ✔️       |          ✔️          |\n| Stream API            |        ✔️       |        ✔️       |     Node.js only     |        ❌       |          ✔️          |\n| Request cancelation   |        ✔️       |        ❌       |          ✔️         |        ✔️       |          ✔️          |\n| RFC compliant caching |        ✔️       |        ❌       |          ❌         |        ❌       |          ❌          |\n| Cookies (out-of-box)  |        ✔️       |        ✔️       |          ❌         |        ❌       |          ❌          |\n| Follows redirects     |        ✔️       |        ✔️       |          ✔️         |        ✔️       |          ✔️          |\n| Retries on failure    |        ✔️       |        ❌       |          ❌         |        ❌       |          ✔️          |\n| Progress events       |        ✔️       |        ❌       |          ❌         |   Browser only   |          ✔️          |\n| Handles gzip/deflate  |        ✔️       |        ✔️       |          ✔️         |        ✔️       |          ✔️          |\n| Advanced timeouts     |        ✔️       |        ❌       |          ❌         |        ❌       |          ❌          |\n| Timings               |        ✔️       |        ✔️       |          ❌         |        ❌       |          ❌          |\n| Errors with metadata  |        ✔️       |        ❌       |          ❌         |        ✔️       |          ❌          |\n| JSON mode             |        ✔️       |        ✔️       |          ✔️         |        ✔️       |          ✔️          |\n| Custom defaults       |        ✔️       |        ✔️       |          ❌         |        ✔️       |          ❌          |\n| Composable            |        ✔️       |        ❌       |          ❌         |        ❌       |          ✔️          |\n| Hooks                 |        ✔️       |        ❌       |          ❌         |        ✔️       |          ❌          |\n| Issues open           |  [![][gio]][g1]  | [![][rio]][r1]  |    [![][nio]][n1]    |  [![][aio]][a1] |    [![][sio]][s1]     |\n| Issues closed         |  [![][gic]][g2]  | [![][ric]][r2]  |    [![][nic]][n2]    |  [![][aic]][a2] |    [![][sic]][s2]     |\n| Downloads             |  [![][gd]][g3]   |  [![][rd]][r3]  |    [![][nd]][n3]     |  [![][ad]][a3]  |    [![][sd]][s3]      |\n| Coverage              |  [![][gc]][g4]   |  [![][rc]][r4]  |    [![][nc]][n4]     |  [![][ac]][a4]  |    [![][sc]][s4]      |\n| Build                 |  [![][gb]][g5]   |  [![][rb]][r5]  |    [![][nb]][n5]     |  [![][ab]][a5]  |    [![][sb]][s5]      |\n| Bugs                  |  [![][gbg]][g6]  | [![][rbg]][r6]  |    [![][nbg]][n6]    |  [![][abg]][a6] |    [![][sbg]][s6]     |\n| Dependents            |  [![][gdp]][g7]  | [![][rdp]][r7]  |    [![][ndp]][n7]    |  [![][adp]][a7] |    [![][sdp]][s7]     |\n| Install size          |  [![][gis]][g8]  | [![][ris]][r8]  |    [![][nis]][n8]    |  [![][ais]][a8] |    [![][sis]][s8]     |\n\n\\* It's almost API compatible with the browser `fetch` API.<br>\n\\*\\* Need to switch the protocol manually.<br>\n❔ Experimental support.\n\n<!-- GITHUB -->\n[r0]: https://github.com/request/request\n[n0]: https://github.com/bitinn/node-fetch\n[a0]: https://github.com/axios/axios\n[s0]: https://github.com/visionmedia/superagent\n\n<!-- ISSUES OPEN -->\n[gio]: https://badgen.net/github/open-issues/sindresorhus/got?label\n[rio]: https://badgen.net/github/open-issues/request/request?label\n[nio]: https://badgen.net/github/open-issues/bitinn/node-fetch?label\n[aio]: https://badgen.net/github/open-issues/axios/axios?label\n[sio]: https://badgen.net/github/open-issues/visionmedia/superagent?label\n\n[g1]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[r1]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[n1]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[a1]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[s1]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n\n<!-- ISSUES CLOSED -->\n[gic]: https://badgen.net/github/closed-issues/sindresorhus/got?label\n[ric]: https://badgen.net/github/closed-issues/request/request?label\n[nic]: https://badgen.net/github/closed-issues/bitinn/node-fetch?label\n[aic]: https://badgen.net/github/closed-issues/axios/axios?label\n[sic]: https://badgen.net/github/closed-issues/visionmedia/superagent?label\n\n[g2]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[r2]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[n2]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[a2]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[s2]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n\n<!-- DOWNLOADS -->\n[gd]: https://badgen.net/npm/dm/got?label\n[rd]: https://badgen.net/npm/dm/request?label\n[nd]: https://badgen.net/npm/dm/node-fetch?label\n[ad]: https://badgen.net/npm/dm/axios?label\n[sd]: https://badgen.net/npm/dm/superagent?label\n\n[g3]: https://www.npmjs.com/package/got\n[r3]: https://www.npmjs.com/package/request\n[n3]: https://www.npmjs.com/package/node-fetch\n[a3]: https://www.npmjs.com/package/axios\n[s3]: https://www.npmjs.com/package/superagent\n\n<!-- COVERAGE -->\n[gc]: https://badgen.net/coveralls/c/github/sindresorhus/got?label\n[rc]: https://badgen.net/coveralls/c/github/request/request?label\n[nc]: https://badgen.net/coveralls/c/github/bitinn/node-fetch?label\n[ac]: https://badgen.net/coveralls/c/github/mzabriskie/axios?label\n[sc]: https://badgen.net/codecov/c/github/visionmedia/superagent?label\n\n[g4]: https://coveralls.io/github/sindresorhus/got\n[r4]: https://coveralls.io/github/request/request\n[n4]: https://coveralls.io/github/bitinn/node-fetch\n[a4]: https://coveralls.io/github/mzabriskie/axios\n[s4]: https://codecov.io/gh/visionmedia/superagent\n\n<!-- BUILD -->\n[gb]: https://badgen.net/travis/sindresorhus/got?label\n[rb]: https://badgen.net/travis/request/request?label\n[nb]: https://badgen.net/travis/bitinn/node-fetch?label\n[ab]: https://badgen.net/travis/axios/axios?label\n[sb]: https://badgen.net/travis/visionmedia/superagent?label\n\n[g5]: https://travis-ci.org/sindresorhus/got\n[r5]: https://travis-ci.org/request/request\n[n5]: https://travis-ci.org/bitinn/node-fetch\n[a5]: https://travis-ci.org/axios/axios\n[s5]: https://travis-ci.org/visionmedia/superagent\n\n<!-- BUGS -->\n[gbg]: https://badgen.net/github/label-issues/sindresorhus/got/bug/open?label\n[rbg]: https://badgen.net/github/label-issues/request/request/Needs%20investigation/open?label\n[nbg]: https://badgen.net/github/label-issues/bitinn/node-fetch/bug/open?label\n[abg]: https://badgen.net/github/label-issues/axios/axios/type:bug/open?label\n[sbg]: https://badgen.net/github/label-issues/visionmedia/superagent/Bug/open?label\n\n[g6]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[r6]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A\"Needs+investigation\"\n[n6]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[a6]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Atype:bug\n[s6]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3ABug\n\n<!-- DEPENDENTS -->\n[gdp]: https://badgen.net/npm/dependents/got?label\n[rdp]: https://badgen.net/npm/dependents/request?label\n[ndp]: https://badgen.net/npm/dependents/node-fetch?label\n[adp]: https://badgen.net/npm/dependents/axios?label\n[sdp]: https://badgen.net/npm/dependents/superagent?label\n\n[g7]: https://www.npmjs.com/package/got?activeTab=dependents\n[r7]: https://www.npmjs.com/package/request?activeTab=dependents\n[n7]: https://www.npmjs.com/package/node-fetch?activeTab=dependents\n[a7]: https://www.npmjs.com/package/axios?activeTab=dependents\n[s7]: https://www.npmjs.com/package/visionmedia?activeTab=dependents\n\n<!-- INSTALL SIZE -->\n[gis]: https://badgen.net/packagephobia/install/got?label\n[ris]: https://badgen.net/packagephobia/install/request?label\n[nis]: https://badgen.net/packagephobia/install/node-fetch?label\n[ais]: https://badgen.net/packagephobia/install/axios?label\n[sis]: https://badgen.net/packagephobia/install/superagent?label\n\n[g8]: https://packagephobia.now.sh/result?p=got\n[r8]: https://packagephobia.now.sh/result?p=request\n[n8]: https://packagephobia.now.sh/result?p=node-fetch\n[a8]: https://packagephobia.now.sh/result?p=axios\n[s8]: https://packagephobia.now.sh/result?p=superagent\n\n#### Install size of the dependencies\n\n|                   Dependency                   |          Install size         |\n|------------------------------------------------|-------------------------------|\n| [@sindresorhus/is][url-is]                     | ![][size-is]                  |\n| [@szmarczak/http-timer][url-http-timer]        | ![][size-http-timer]          |\n| [cacheable-request][url-cacheable-request]     | ![][size-cacheable-request]   |\n| [decompress-response][url-decompress-response] | ![][size-decompress-response] |\n| [duplexer3][url-duplexer3]                     | ![][size-duplexer3]           |\n| [get-stream][url-get-stream]                   | ![][size-get-stream]          |\n| [lowercase-keys][url-lowercase-keys]           | ![][size-lowercase-keys]      |\n| [mimic-response][url-mimic-response]           | ![][size-mimic-response]      |\n| [p-cancelable][url-p-cancelable]               | ![][size-p-cancelable]        |\n| [to-readable-stream][url-to-readable-stream]   | ![][size-to-readable-stream]  |\n|                                                | ![][gis]                      |\n\n[size-is]: https://badgen.net/packagephobia/install/@sindresorhus/is?label\n[size-http-timer]: https://badgen.net/packagephobia/install/@szmarczak/http-timer?label\n[size-cacheable-request]: https://badgen.net/packagephobia/install/cacheable-request?label\n[size-decompress-response]: https://badgen.net/packagephobia/install/decompress-response?label\n[size-duplexer3]: https://badgen.net/packagephobia/install/duplexer3?label\n[size-get-stream]: https://badgen.net/packagephobia/install/get-stream?label\n[size-lowercase-keys]: https://badgen.net/packagephobia/install/lowercase-keys?label\n[size-mimic-response]: https://badgen.net/packagephobia/install/mimic-response?label\n[size-p-cancelable]: https://badgen.net/packagephobia/install/p-cancelable?label\n[size-to-readable-stream]: https://badgen.net/packagephobia/install/to-readable-stream?label\n\n[url-is]: https://github.com/sindresorhus/is\n[url-http-timer]: https://github.com/szmarczak/http-timer\n[url-cacheable-request]: https://github.com/lukechilds/cacheable-request\n[url-decompress-response]: https://github.com/sindresorhus/decompress-response\n[url-duplexer3]: https://github.com/floatdrop/duplexer3\n[url-get-stream]: https://github.com/sindresorhus/get-stream\n[url-lowercase-keys]: https://github.com/sindresorhus/lowercase-keys\n[url-mimic-response]: https://github.com/sindresorhus/mimic-response\n[url-p-cancelable]: https://github.com/sindresorhus/p-cancelable\n[url-to-readable-stream]: https://github.com/sindresorhus/to-readable-stream\n\n## Related\n\n- [gh-got](https://github.com/sindresorhus/gh-got) - Got convenience wrapper to interact with the GitHub API\n- [gl-got](https://github.com/singapore/gl-got) - Got convenience wrapper to interact with the GitLab API\n- [travis-got](https://github.com/samverschueren/travis-got) - Got convenience wrapper to interact with the Travis API\n- [graphql-got](https://github.com/kevva/graphql-got) - Got convenience wrapper to interact with GraphQL\n- [GotQL](https://github.com/khaosdoctor/gotql) - Got convenience wrapper to interact with GraphQL using JSON-parsed queries instead of strings\n- [got-fetch](https://github.com/alexghr/got-fetch) - Got with a `fetch` interface\n\n\n## Maintainers\n\n[![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://sindresorhus.com) | [![Szymon Marczak](https://github.com/szmarczak.png?size=100)](https://github.com/szmarczak) | [![Alexander Tesfamichael](https://github.com/AlexTes.png?size=100)](https://github.com/AlexTes) | [![Brandon Smith](https://github.com/brandon93s.png?size=100)](https://github.com/brandon93s) | [![Luke Childs](https://github.com/lukechilds.png?size=100)](https://github.com/lukechilds)\n---|---|---|---|---\n[Sindre Sorhus](https://sindresorhus.com) | [Szymon Marczak](https://github.com/szmarczak) | [Alexander Tesfamichael](https://alextes.me) | [Brandon Smith](https://github.com/brandon93s) | [Luke Childs](https://github.com/lukechilds)\n\n###### Former\n\n- [Vsevolod Strukchinsky](https://github.com/floatdrop)\n\n\n---\n\n<div align=\"center\">\n\t<b>\n\t\t<a href=\"https://tidelift.com/subscription/pkg/npm-got?utm_source=npm-got&utm_medium=referral&utm_campaign=readme\">Get professional support for this package with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n","types":"dist","browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","babel":false,"compileEnhancements":false,"extensions":["ts"],"require":["ts-node/register"]},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"rules":{"import/named":"off","import/no-unresolved":"off","import/first":"off","import/newline-after-import":"off","ava/no-import-test-files":"off","ava/no-ignored-test-files":"off","@typescript-eslint/explicit-function-return-type":"off","@typescript-eslint/no-unnecessary-type-assertion":"off","@typescript-eslint/await-thenable":"off"},"ignores":["documentation/examples/*"]},"gitHead":"14fe93054122861c25e8742ace27f6ce156e48db","readmeFilename":"readme.md","_nodeVersion":"10.16.3","_npmVersion":"6.9.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.0.0-alpha.2.1_1569249874757_0.9465069510646149"},"_hasShrinkwrap":false},"10.0.0-alpha.2.2":{"_id":"got@10.0.0-alpha.2.2","name":"got","description":"Simplified HTTP requests","version":"10.0.0-alpha.2.2","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron","brotli"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava && tsc --noEmit","release":"np","build":"del-cli dist && tsc"},"directories":{},"devDependencies":{"@sindresorhus/tsconfig":"^0.4.0","@types/duplexer3":"^0.1.0","@types/node":"^12.7.5","@types/sinon":"^7.0.13","@typescript-eslint/eslint-plugin":"^1.10.2","@typescript-eslint/parser":"^1.10.2","ava":"^2.4.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.14.0","form-data":"^2.5.1","get-port":"^5.0.0","keyv":"^3.1.0","lolex":"^4.2.0","nock":"^11.3.4","np":"^5.0.3","nyc":"^14.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^7.4.2","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","ts-node":"^8.4.1","typescript":"3.4.4","xo":"^0.24.0"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^2.0.0","@types/cacheable-request":"^6.0.1","@types/tough-cookie":"^2.3.5","cacheable-lookup":"^0.2.1","cacheable-request":"^6.1.0","decompress-response":"^4.2.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^1.0.2","to-readable-stream":"^2.0.0","type-fest":"^0.8.0"},"engines":{"node":">=8.6"},"main":"dist","dist":{"shasum":"3e08ff79a9e714d8888137934a68e751c6adecc4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.0.0-alpha.2.2.tgz"},"readme":"<div align=\"center\">\n\t<br>\n\t<br>\n\t<img width=\"360\" src=\"media/logo.svg\" alt=\"Got\">\n\t<br>\n\t<br>\n\t<br>\n\t<br>\n\t<hr>\n\t<p align=\"center\">\n\t\t<sub>Huge thanks to these companies for helping make open source sustainable by sponsoring Sindre Sorhus</sub>\n\t\t<br>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://moxy.studio\"><img src=\"https://sindresorhus.com/assets/thanks/moxy-logo.svg\" width=\"170\"></a>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://www.gumlet.com\">\n\t\t\t<div>\n\t\t\t\t<img src=\"https://sindresorhus.com/assets/thanks/gumlet-logo.svg\" width=\"200\"/>\n\t\t\t</div>\n\t\t\t<sup><b>Optimised Image Delivery made simple</b></sup>\n\t\t</a>\n\t</p>\n\t<hr>\n\t<br>\n\t<br>\n</div>\n\n> Simplified HTTP requests\n\n[![Build Status: Linux](https://travis-ci.org/sindresorhus/got.svg?branch=master)](https://travis-ci.org/sindresorhus/got)\n[![Coverage Status](https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/got?branch=master)\n[![Downloads](https://img.shields.io/npm/dm/got.svg)](https://npmjs.com/got)\n[![Install size](https://packagephobia.now.sh/badge?p=got)](https://packagephobia.now.sh/result?p=got)\n\nGot is a human-friendly and powerful HTTP request library.\n\nIt was created because the popular [`request`](https://github.com/request/request) package is bloated: [![Install size](https://packagephobia.now.sh/badge?p=request)](https://packagephobia.now.sh/result?p=request)\n\nGot is for Node.js. For browsers, we recommend [Ky](https://github.com/sindresorhus/ky).\n\n**This readme reflects the next major version that is currently in development. You probably want [the v9 readme](https://www.npmjs.com/package/got).**\n\n\n## Highlights\n\n- [Promise & stream API](#api)\n- [Request cancelation](#aborting-the-request)\n- [RFC compliant caching](#cache-adapters)\n- [Follows redirects](#followredirect)\n- [Retries on failure](#retry)\n- [Progress events](#onuploadprogress-progress)\n- [Handles gzip/deflate/brotli](#decompress)\n- [Timeout handling](#timeout)\n- [Errors with metadata](#errors)\n- [JSON mode](#json-mode)\n- [WHATWG URL support](#url)\n- [Hooks](#hooks)\n- [Instances with custom defaults](#instances)\n- [Composable](documentation/advanced-creation.md#merging-instances)\n- [Plugins](documentation/lets-make-a-plugin.md)\n- [Electron support](#useelectronnet)\n- [Used by ~2000 packages and ~500K repos](https://github.com/sindresorhus/got/network/dependents)\n- Actively maintained\n\n[Moving from Request?](documentation/migration-guides.md)\n\n[See how Got compares to other HTTP libraries](#comparison)\n\n## Install\n\n```\n$ npm install got\n```\n\n\n## Usage\n\n```js\nconst got = require('got');\n\n(async () => {\n\ttry {\n\t\tconst response = await got('https://sindresorhus.com');\n\t\tconsole.log(response.body);\n\t\t//=> '<!doctype html> ...'\n\t} catch (error) {\n\t\tconsole.log(error.response.body);\n\t\t//=> 'Internal server error ...'\n\t}\n})();\n```\n\n###### Streams\n\n```js\nconst stream = require('stream');\nconst {promisify} = require('util');\nconst fs = require('fs');\nconst got = require('got');\n\nconst pipeline = promisify(stream.pipeline);\n\n(async () => {\n    await pipeline(\n        got.stream('https://sindresorhus.com'),\n        fs.createWriteStream('index.html')\n    );\n\n    // For POST, PUT, and PATCH methods `got.stream` returns a `stream.Writable`\n    await pipeline(\n        fs.createReadStream('index.html'),\n        got.stream.post('https://sindresorhus.com')\n    );\n})();\n```\n\n**Tip:** Using `from.pipe(to)` doesn't forward errors. If you use it, switch to [`Stream.pipeline(from, ..., to, callback)`](https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback) instead (available from Node v10).\n\n### API\n\nIt's a `GET` request by default, but can be changed by using different methods or via `options.method`.\n\n#### got([url], [options])\n\nReturns a Promise for a [`response` object](#response) or a [stream](#streams-1) if `options.stream` is set to true.\n\n##### url\n\nType: `string | object`\n\nThe URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\nProperties from `options` will override properties in the parsed `url`.\n\nIf no protocol is specified, it will throw a `TypeError`.\n\n**Note:** this can also be an option.\n\n##### options\n\nType: `object`\n\nAny of the [`https.request`](https://nodejs.org/api/https.html#https_https_request_options_callback) options.\n\n###### prefixUrl\n\nType: `string | URL`\n\nWhen specified, `prefixUrl` will be prepended to `url`. The prefix can be any valid URL, either relative or absolute. A trailing slash `/` is optional, one will be added automatically, if needed, when joining `prefixUrl` and `url`. The `url` argument cannot start with a `/` when using this option.\n\nUseful when used with `got.extend()` to create niche-specific Got-instances.\n\n**Note:** `prefixUrl` will be ignored if the `url` argument is a URL instance.\n\n```js\nconst got = require('got');\n\n(async () => {\n\tawait got('unicorn', {prefixUrl: 'https://cats.com'});\n\t//=> 'https://cats.com/unicorn'\n})();\n```\n\n###### headers\n\nType: `object`<br>\nDefault: `{}`\n\nRequest headers.\n\nExisting headers will be overwritten. Headers set to `null` will be omitted.\n\n###### stream\n\nType: `boolean`<br>\nDefault: `false`\n\nReturns a `Stream` instead of a `Promise`. This is equivalent to calling `got.stream(url, [options])`.\n\n###### body\n\nType: `string | Buffer | stream.Readable` or [`form-data` instance](https://github.com/form-data/form-data)\n\n**Note:** The `body` option cannot be used with the `json` or `form` option.\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nIf present in `options` and `options.method` is not set, it will throw a `TypeError`.\n\nThe `content-length` header will be automatically set if `body` is a `string` / `Buffer` / `fs.createReadStream` instance / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n\n###### json\n\nType: `object | Array | number | string | boolean | null` *(JSON-serializable values)*\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nJSON body. If the `Content-Type` header is not set, it will be set to `application/json`.\n\n###### context\n\nType: `object`\n\nUser data. In contrast to other options, `context` is not enumerable.\n\n**Note:** The object is never merged, it's just passed through. Got will not modify the object in any way.\n\nIt's very useful for storing auth tokens:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\toptions => {\n\t\t\t\tif (!options.context && !options.context.token) {\n\t\t\t\t\tthrow new Error('Token required');\n\t\t\t\t}\n\n\t\t\t\toptions.header.token = options.context.token;\n\t\t\t}\n\t\t]\n\t}\n});\n\n(async () => {\n\tconst context = {\n\t\ttoken: 'secret'\n\t};\n\n\tconst response = await instance('https://httpbin.org/headers', {context});\n\n\t// Let's see the headers\n\tconsole.log(response.body);\n})();\n```\n\n###### responseType\n\nType: `string`<br>\nDefault: `text`\n\n**Note:** When using streams, this option is ignored.\n\nParsing method used to retrieve the body from the response. Can be `text`, `json` or `buffer`. The promise has `.json()` and `.buffer()` and `.text()` functions which set this option automatically.\n\nExample:\n\n```js\nconst {body} = await got(url).json();\n```\n\n###### resolveBodyOnly\n\nType: `string`<br>\nDefault: `false`\n\nWhen set to `true` the promise will return the [Response body](#body-1) instead of the [Response](#response) object.\n\n###### cookieJar\n\nType: [`tough.CookieJar` instance](https://github.com/salesforce/tough-cookie#cookiejar)\n\n**Note:** If you provide this option, `options.headers.cookie` will be overridden.\n\nCookie support. You don't have to care about parsing or how to store them. [Example.](#cookies)\n\n###### ignoreInvalidCookies\n\nType: `boolean`<br>\nDefault: `false`\n\nIgnore invalid cookies instead of throwing an error. Only useful when the `cookieJar` option has been set. Not recommended.\n\n###### encoding\n\nType: `string | null`<br>\nDefault: `'utf8'`\n\n[Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data. If `null`, the body is returned as a [`Buffer`](https://nodejs.org/api/buffer.html) (binary data).\n\n###### form\n\nType: `object | true`\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nThe form body is converted to query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n\nIf set to `true` and the `Content-Type` header is not set, it will be set to `application/x-www-form-urlencoded`.\n\n###### searchParams\n\nType: `string | object<string, string | number> | URLSearchParams`\n\n**Note:** The `query` option was renamed to `searchParams` in Got v10. The `query` option name is still functional, but is being deprecated and will be completely removed in Got v11.\n\nQuery string that will be added to the request URL. This will override the query string in `url`.\n\nIf you need to pass in an array, you can do it using a `URLSearchParams` instance:\n\n```js\nconst got = require('got');\n\nconst searchParams = new URLSearchParams([['key', 'a'], ['key', 'b']]);\n\ngot('https://example.com', {searchParams});\n\nconsole.log(searchParams.toString());\n//=> 'key=a&key=b'\n```\n\nAnd if you need a different array format, you could use the [`query-string`](https://github.com/sindresorhus/query-string) package:\n\n```js\nconst got = require('got');\nconst queryString = require('query-string');\n\nconst searchParams = queryString.stringify({key: ['a', 'b']}, {arrayFormat: 'bracket'});\n\ngot('https://example.com', {searchParams});\n\nconsole.log(searchParams);\n//=> 'key[]=a&key[]=b'\n```\n\n###### timeout\n\nType: `number | object`\n\nMilliseconds to wait for the server to end the response before aborting the request with [`got.TimeoutError`](#gottimeouterror) error (a.k.a. `request` property). By default, there's no timeout.\n\nThis also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n\n- `lookup` starts when a socket is assigned and ends when the hostname has been resolved. Does not apply when using a Unix domain socket.\n- `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n- `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n- `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n- `response` starts when the request has been written to the socket and ends when the response headers are received.\n- `send` starts when the socket is connected and ends with the request has been written to the socket.\n- `request` starts when the request is initiated and ends when the response's end event fires.\n\n###### retry\n\nType: `number | object`<br>\nDefault:\n- limit: `2`\n- calculateDelay: `(attemptCount, retryOptions, error, computedValue) => computedValue`\n- methods: `GET` `PUT` `HEAD` `DELETE` `OPTIONS` `TRACE`\n- statusCodes: [`408`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408) [`413`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413) [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) [`500`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500) [`502`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502) [`503`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503) [`504`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504)\n- maxRetryAfter: `undefined`\n- errorCodes: `ETIMEDOUT` `ECONNRESET` `EADDRINUSE` `ECONNREFUSED` `EPIPE` `ENOTFOUND` `ENETUNREACH` `EAI_AGAIN`\n\nAn object representing `limit`, `calculateDelay`, `methods`, `statusCodes`, `maxRetryAfter` and `errorCodes` fields for maximum retry count, retry handler, allowed methods, allowed status codes, maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time and allowed error codes.\n\n**Note:** When using streams, this option is ignored.\n\nIf `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.<br>\nIf [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n\nDelays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 1).\n\nThe `calculateDelay` property is a `function` with `attemptCount`, `retryOptions`, `error` and `computedValue` arguments for current retry count, the retry options, error and default computed value. The function must return a delay in milliseconds (`0` return value cancels retry).\n\nBy default, it retries *only* on the specified methods, status codes, and on these network errors:\n- `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n- `ECONNRESET`: Connection was forcibly closed by a peer.\n- `EADDRINUSE`: Could not bind to any free port.\n- `ECONNREFUSED`: Connection was refused by the server.\n- `EPIPE`: The remote side of the stream being written has been closed.\n- `ENOTFOUND`: Couldn't resolve the hostname to an IP address.\n- `ENETUNREACH`: No internet connection.\n- `EAI_AGAIN`: DNS lookup timed out.\n\n###### followRedirect\n\nType: `boolean`<br>\nDefault: `true`\n\nDefines if redirect responses should be followed automatically.\n\nNote that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`. This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4).\n\n###### decompress\n\nType: `boolean`<br>\nDefault: `true`\n\nDecompress the response automatically. This will set the `accept-encoding` header to `gzip, deflate, br` on Node.js 11.7.0+ or `gzip, deflate` for older Node.js versions, unless you set it yourself.\n\nBrotli (`br`) support requires Node.js 11.7.0 or later.\n\nIf this is disabled, a compressed response is returned as a `Buffer`. This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n\n###### cache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached response data.\n\n###### dnsCache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached DNS data.\n\n###### request\n\nType: `Function`<br>\nDefault: `http.request` `https.request` *(Depending on the protocol)*\n\nCustom request function. The main purpose of this is to [support HTTP2 using a wrapper](#experimental-http2-support).\n\n###### useElectronNet\n\nType: `boolean`<br>\nDefault: `false`\n\nWhen used in Electron, Got will use [`electron.net`](https://electronjs.org/docs/api/net/) instead of the Node.js `http` module. According to the Electron docs, it should be fully compatible, but it's not entirely. See [#443](https://github.com/sindresorhus/got/issues/443) and [#461](https://github.com/sindresorhus/got/issues/461).\n\n###### throwHttpErrors\n\nType: `boolean`<br>\nDefault: `true`\n\nDetermines if a `got.HTTPError` is thrown for error responses (non-2xx status codes).\n\nIf this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing. This may be useful if you are checking for resource availability and are expecting error responses.\n\n###### agent\n\nSame as the [`agent` option](https://nodejs.org/api/http.html#http_http_request_url_options_callback) for `http.request`, but with an extra feature:\n\nIf you require different agents for different protocols, you can pass a map of agents to the `agent` option. This is necessary because a request to one protocol might redirect to another. In such a scenario, Got will switch over to the right protocol agent for you.\n\n```js\nconst got = require('got');\nconst HttpAgent = require('agentkeepalive');\nconst {HttpsAgent} = HttpAgent;\n\ngot('https://sindresorhus.com', {\n\tagent: {\n\t\thttp: new HttpAgent(),\n\t\thttps: new HttpsAgent()\n\t}\n});\n```\n\n###### hooks\n\nType: `object<string, Function[]>`\n\nHooks allow modifications during the request lifecycle. Hook functions may be async and are run serially.\n\n###### hooks.init\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with plain [request options](#options), right before their normalization. This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when the input needs custom handling.\n\nSee the [Request migration guide](documentation/migration-guides.md#breaking-changes) for an example.\n\n**Note:** This hook must be synchronous!\n\n###### hooks.beforeRequest\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options). Got will make no further changes to the request before it is sent (except the body serialization). This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when you want to create an API client that, for example, uses HMAC-signing.\n\nSee the [AWS section](#aws) for an example.\n\n###### hooks.beforeRedirect\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options) and the redirect [response](#response). Got will make no further changes to the request. This is especially useful when you want to avoid dead sites. Example:\n\n```js\nconst got = require('got');\n\ngot('https://example.com', {\n\thooks: {\n\t\tbeforeRedirect: [\n\t\t\t(options, response) => {\n\t\t\t\tif (options.hostname === 'deadSite') {\n\t\t\t\t\toptions.hostname = 'fallbackSite';\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.beforeRetry\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options), the error and the retry count. Got will make no further changes to the request. This is especially useful when some extra work is required before the next try. Example:\n\n```js\nconst got = require('got');\n\ngot.post('https://example.com', {\n\thooks: {\n\t\tbeforeRetry: [\n\t\t\t(options, error, retryCount) => {\n\t\t\t\tif (error.statusCode === 413) { // Payload too large\n\t\t\t\t\toptions.body = getNewBody();\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.afterResponse\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [response object](#response) and a retry function.\n\nEach function should return the response. This is especially useful when you want to refresh an access token. Example:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tafterResponse: [\n\t\t\t(response, retryWithMergedOptions) => {\n\t\t\t\tif (response.statusCode === 401) { // Unauthorized\n\t\t\t\t\tconst updatedOptions = {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\ttoken: getNewToken() // Refresh the access token\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Save for further requests\n\t\t\t\t\tinstance.defaults.options = got.mergeOptions(instance.defaults.options, updatedOptions);\n\n\t\t\t\t\t// Make a new retry\n\t\t\t\t\treturn retryWithMergedOptions(updatedOptions);\n\t\t\t\t}\n\n\t\t\t\t// No changes otherwise\n\t\t\t\treturn response;\n\t\t\t}\n\t\t]\n\t},\n\tmutableDefaults: true\n});\n```\n\n###### hooks.beforeError\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with an `Error` instance. The error is passed to the hook right before it's thrown. This is especially useful when you want to have more detailed errors.\n\n**Note:** Errors thrown while normalizing input options are thrown directly and not part of this hook.\n\n```js\nconst got = require('got');\n\ngot('https://api.github.com/some-endpoint', {\n\thooks: {\n\t\tbeforeError: [\n\t\t\terror => {\n\t\t\t\tconst {response} = error;\n \t\t\t\tif (response && response.body) {\n\t\t\t\t\terror.name = 'GitHubError';\n\t\t\t\t\terror.message = `${response.body.message} (${error.statusCode})`;\n\t\t\t\t}\n\n \t\t\t\treturn error;\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n#### Response\n\nThe response object will typically be a [Node.js HTTP response stream](https://nodejs.org/api/http.html#http_class_http_incomingmessage), however, if returned from the cache it will be a [response-like object](https://github.com/lukechilds/responselike) which behaves in the same way.\n\n##### request\n\nType: `object`\n\n**Note:** This is not a [http.ClientRequest](https://nodejs.org/api/http.html#http_class_http_clientrequest).\n\n- `options` - The Got options that were set on this request.\n\n##### body\n\nType: `string | object | Buffer` *(Depending on `options.responseType`)*\n\nThe result of the request.\n\n##### url\n\nType: `string`\n\nThe request URL or the final URL after redirects.\n\n##### requestUrl\n\nType: `string`\n\nThe original request URL.\n\n##### timings\n\nType: `object`\n\nThe object contains the following properties:\n\n- `start` - Time when the request started.\n- `socket` - Time when a socket was assigned to the request.\n- `lookup` - Time when the DNS lookup finished.\n- `connect` - Time when the socket successfully connected.\n- `upload` - Time when the request finished uploading.\n- `response` - Time when the request fired the `response` event.\n- `end` - Time when the response fired the `end` event.\n- `error` - Time when the request fired the `error` event.\n- `phases`\n\t- `wait` - `timings.socket - timings.start`\n\t- `dns` - `timings.lookup - timings.socket`\n\t- `tcp` - `timings.connect - timings.lookup`\n\t- `request` - `timings.upload - timings.connect`\n\t- `firstByte` - `timings.response - timings.upload`\n\t- `download` - `timings.end - timings.response`\n\t- `total` - `timings.end - timings.start` or `timings.error - timings.start`\n\n**Note:** The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n\n##### isFromCache\n\nType: `boolean`\n\nWhether the response was retrieved from the cache.\n\n##### redirectUrls\n\nType: `string[]`\n\nThe redirect URLs.\n\n##### retryCount\n\nType: `number`\n\nThe number of times the request was retried.\n\n#### Streams\n\n**Note:** Progress events, redirect events and request/response events can also be used with promises.\n\n**Note:** To access `response.isFromCache` you need to use `got.stream(url, options).isFromCache`. The value will be undefined until the `response` event.\n\n#### got.stream(url, [options])\n\nSets `options.stream` to `true`.\n\nReturns a [duplex stream](https://nodejs.org/api/stream.html#stream_class_stream_duplex) with additional events:\n\n##### .on('request', request)\n\n`request` event to get the request object of the request.\n\n**Tip:** You can use `request` event to abort request:\n\n```js\ngot.stream('https://github.com')\n\t.on('request', request => setTimeout(() => request.abort(), 50));\n```\n\n##### .on('response', response)\n\nThe `response` event to get the response object of the final request.\n\n##### .on('redirect', response, nextOptions)\n\nThe `redirect` event to get the response object of a redirect. The second argument is options for the next request to the redirect location.\n\n##### .on('uploadProgress', progress)\n##### .on('downloadProgress', progress)\n\nProgress events for uploading (sending a request) and downloading (receiving a response). The `progress` argument is an object like:\n\n```js\n{\n\tpercent: 0.1,\n\ttransferred: 1024,\n\ttotal: 10240\n}\n```\n\nIf it's not possible to retrieve the body size (can happen when streaming), `total` will be `null`.\n\n```js\n(async () => {\n\tconst response = await got('https://sindresorhus.com')\n\t\t.on('downloadProgress', progress => {\n\t\t\t// Report download progress\n\t\t})\n\t\t.on('uploadProgress', progress => {\n\t\t\t// Report upload progress\n\t\t});\n\n\tconsole.log(response);\n})();\n```\n\n##### .on('error', error, body, response)\n\nThe `error` event emitted in case of a protocol error (like `ENOTFOUND` etc.) or status error (4xx or 5xx). The second argument is the body of the server response in case of status error. The third argument is a response object.\n\n#### got.get(url, [options])\n#### got.post(url, [options])\n#### got.put(url, [options])\n#### got.patch(url, [options])\n#### got.head(url, [options])\n#### got.delete(url, [options])\n\nSets `options.method` to the method name and makes a request.\n\n### Instances\n\n#### got.extend(...options)\n\nConfigure a new `got` instance with default `options`. The `options` are merged with the parent instance's `defaults.options` using [`got.mergeOptions`](#gotmergeoptionsparentoptions-newoptions). You can access the resolved options with the `.defaults` property on the instance.\n\n```js\nconst client = got.extend({\n\tprefixUrl: 'https://example.com',\n\theaders: {\n\t\t'x-unicorn': 'rainbow'\n\t}\n});\n\nclient.get('/demo');\n\n/* HTTP Request =>\n * GET /demo HTTP/1.1\n * Host: example.com\n * x-unicorn: rainbow\n */\n```\n\n```js\n(async () => {\n\tconst client = got.extend({\n\t\tprefixUrl: 'httpbin.org',\n\t\theaders: {\n\t\t\t'x-foo': 'bar'\n\t\t}\n\t});\n\tconst {headers} = await client.get('/headers').json();\n\t//=> headers['x-foo'] === 'bar'\n\n\tconst jsonClient = client.extend({\n\t\tresponseType: 'json',\n\t\tresolveBodyOnly: true,\n\t\theaders: {\n\t\t\t'x-baz': 'qux'\n\t\t}\n\t});\n\tconst {headers: headers2} = await jsonClient.get('/headers');\n\t//=> headers2['x-foo'] === 'bar'\n\t//=> headers2['x-baz'] === 'qux'\n})();\n```\n\n**Tip:** Need more control over the behavior of Got? Check out the [`got.create()`](documentation/advanced-creation.md).\n\nAdditionally, `got.extend()` accepts two properties from the `defaults` object: `mutableDefaults` and `handlers`. Example:\n\n```js\n// You can now modify `mutableGot.defaults.options`.\nconst mutableGot = got.extend({mutableDefaults: true});\n\nconst mergedHandlers = got.extend({\n\thandlers: [\n\t\t(options, next) => {\n\t\t\tdelete options.headers.referer;\n\n\t\t\treturn next(options);\n\t\t}\n\t]\n});\n```\n\n#### got.extend(...instances)\n\nMerges many instances into a single one:\n- options are merged using [`got.mergeOptions()`](#gotmergeoptionsparentoptions-newoptions) (+ hooks are merged too),\n- handlers are stored in an array (you can access them through `instance.defaults.handlers`).\n\n#### got.extend(...options, ...instances, ...)\n\nIt's possible to combine options and instances.<br>\nIt gives the same effect as `got.extend(...options).extend(...instances)`:\n\n```js\nconst a = {headers: {cat: 'meow'}};\nconst b = got.create({\n\toptions: {\n\t\theaders: {\n\t\t\tcow: 'moo'\n\t\t}\n\t}\n});\n\n// The same as `got.extend(a).extend(b)`.\n// Note `a` is options and `b` is an instance.\ngot.extend(a, b);\n//=> {headers: {cat: 'meow', cow: 'moo'}}\n```\n\n#### got.mergeOptions(parentOptions, newOptions)\n\nExtends parent options. Avoid using [object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals) as it doesn't work recursively:\n\n```js\nconst a = {headers: {cat: 'meow', wolf: ['bark', 'wrrr']}};\nconst b = {headers: {cow: 'moo', wolf: ['auuu']}};\n\n{...a, ...b}            // => {headers: {cow: 'moo', wolf: ['auuu']}}\ngot.mergeOptions(a, b)  // => {headers: {cat: 'meow', cow: 'moo', wolf: ['auuu']}}\n```\n\nOptions are deeply merged to a new object. The value of each key is determined as follows:\n\n- If the new property is set to `undefined`, it keeps the old one.\n- If both properties are an instances of `URLSearchParams`, a new URLSearchParams instance is created. The values are merged using [`urlSearchParams.append(key, value)`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/append).\n- If the parent property is an instance of `URL` and the new value is a `string` or `URL`, a new URL instance is created: [`new URL(new, parent)`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#Syntax).\n- If the new property is a plain `object`:\n\t- If the parent property is a plain `object` too, both values are merged recursively into a new `object`.\n\t- Otherwise, only the new value is deeply cloned.\n- If the new property is an `Array`, it overwrites the old one with a deep clone of the new property.\n- Otherwise, the new value is assigned to the key.\n\n#### got.defaults\n\nType: `object`\n\nThe default Got options used in that instance.\n\n## Errors\n\nEach error contains an `options` property which are the options Got used to create a request - just to make debugging easier.\n\n#### got.CacheError\n\nWhen a cache method fails, for example, if the database goes down or there's a filesystem error.\n\n#### got.RequestError\n\nWhen a request fails. Contains a `code` property with error class code, like `ECONNREFUSED`.\n\n#### got.ReadError\n\nWhen reading from response stream fails.\n\n#### got.ParseError\n\nWhen server response code is 2xx, and parsing body fails. Includes a `response` property.\n\n#### got.HTTPError\n\nWhen the server response code is not 2xx. Includes a `response` property.\n\n#### got.MaxRedirectsError\n\nWhen the server redirects you more than ten times. Includes a `response` property.\n\n#### got.UnsupportedProtocolError\n\nWhen given an unsupported protocol.\n\n#### got.CancelError\n\nWhen the request is aborted with `.cancel()`.\n\n#### got.TimeoutError\n\nWhen the request is aborted due to a [timeout](#timeout). Includes an `event` and `timings` property.\n\n## Aborting the request\n\nThe promise returned by Got has a [`.cancel()`](https://github.com/sindresorhus/p-cancelable) method which when called, aborts the request.\n\n```js\n(async () => {\n\tconst request = got(url, options);\n\n\t// …\n\n\t// In another part of the code\n\tif (something) {\n\t\trequest.cancel();\n\t}\n\n\t// …\n\n\ttry {\n\t\tawait request;\n\t} catch (error) {\n\t\tif (request.isCanceled) { // Or `error instanceof got.CancelError`\n\t\t\t// Handle cancelation\n\t\t}\n\n\t\t// Handle other errors\n\t}\n})();\n```\n\n<a name=\"cache-adapters\"></a>\n## Cache\n\nGot implements [RFC 7234](http://httpwg.org/specs/rfc7234.html) compliant HTTP caching which works out of the box in-memory and is easily pluggable with a wide range of storage adapters. Fresh cache entries are served directly from the cache, and stale cache entries are revalidated with `If-None-Match`/`If-Modified-Since` headers. You can read more about the underlying cache behavior in the [`cacheable-request` documentation](https://github.com/lukechilds/cacheable-request). For DNS cache, Got uses [`cacheable-lookup`](https://github.com/szmarczak/cacheable-lookup).\n\nYou can use the JavaScript `Map` type as an in-memory cache:\n\n```js\nconst got = require('got');\nconst map = new Map();\n\n(async () => {\n\t\tlet response = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> false\n\n\t\tresponse = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> true\n})();\n```\n\nGot uses [Keyv](https://github.com/lukechilds/keyv) internally to support a wide range of storage adapters. For something more scalable you could use an [official Keyv storage adapter](https://github.com/lukechilds/keyv#official-storage-adapters):\n\n```\n$ npm install @keyv/redis\n```\n\n```js\nconst got = require('got');\nconst KeyvRedis = require('@keyv/redis');\n\nconst redis = new KeyvRedis('redis://user:pass@localhost:6379');\n\ngot('https://sindresorhus.com', {cache: redis});\n```\n\nGot supports anything that follows the Map API, so it's easy to write your own storage adapter or use a third-party solution.\n\nFor example, the following are all valid storage adapters:\n\n```js\nconst storageAdapter = new Map();\n// Or\nconst storageAdapter = require('./my-storage-adapter');\n// Or\nconst QuickLRU = require('quick-lru');\nconst storageAdapter = new QuickLRU({maxSize: 1000});\n\ngot('https://sindresorhus.com', {cache: storageAdapter});\n```\n\nView the [Keyv docs](https://github.com/lukechilds/keyv) for more information on how to use storage adapters.\n\n\n## Proxies\n\nYou can use the [`tunnel`](https://github.com/koichik/node-tunnel) package with the `agent` option to work with proxies:\n\n```js\nconst got = require('got');\nconst tunnel = require('tunnel');\n\ngot('https://sindresorhus.com', {\n\tagent: tunnel.httpOverHttp({\n\t\tproxy: {\n\t\t\thost: 'localhost'\n\t\t}\n\t})\n});\n```\n\nAlternatively, use [`global-agent`](https://github.com/gajus/global-agent) to configure a global proxy for all HTTP/HTTPS traffic in your program.\n\n\n## Cookies\n\nYou can use the [`tough-cookie`](https://github.com/salesforce/tough-cookie) package:\n\n```js\nconst {promisify} = require('util');\nconst got = require('got');\nconst {CookieJar} = require('tough-cookie');\n\n(async () => {\n\tconst cookieJar = new CookieJar();\n\tconst setCookie = promisify(cookieJar.setCookie.bind(cookieJar));\n\n\tawait setCookie('foo=bar', 'https://example.com');\n\tawait got('https://example.com', {cookieJar});\n})();\n```\n\n\n## Form data\n\nYou can use the [`form-data`](https://github.com/form-data/form-data) package to create POST request with form data:\n\n```js\nconst fs = require('fs');\nconst got = require('got');\nconst FormData = require('form-data');\n\nconst form = new FormData();\n\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\ngot.post('https://example.com', {\n\tbody: form\n});\n```\n\n\n## OAuth\n\nYou can use the [`oauth-1.0a`](https://github.com/ddo/oauth-1.0a) package to create a signed OAuth request:\n\n```js\nconst got = require('got');\nconst crypto  = require('crypto');\nconst OAuth = require('oauth-1.0a');\n\nconst oauth = OAuth({\n\tconsumer: {\n\t\tkey: process.env.CONSUMER_KEY,\n\t\tsecret: process.env.CONSUMER_SECRET\n\t},\n\tsignature_method: 'HMAC-SHA1',\n\thash_function: (baseString, key) => crypto.createHmac('sha1', key).update(baseString).digest('base64')\n});\n\nconst token = {\n\tkey: process.env.ACCESS_TOKEN,\n\tsecret: process.env.ACCESS_TOKEN_SECRET\n};\n\nconst url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';\n\ngot(url, {\n\theaders: oauth.toHeader(oauth.authorize({url, method: 'GET'}, token)),\n\tresponseType: 'json'\n});\n```\n\n\n## Unix Domain Sockets\n\nRequests can also be sent via [unix domain sockets](http://serverfault.com/questions/124517/whats-the-difference-between-unix-socket-and-tcp-ip-socket). Use the following URL scheme: `PROTOCOL://unix:SOCKET:PATH`.\n\n- `PROTOCOL` - `http` or `https` *(optional)*\n- `SOCKET` - Absolute path to a unix domain socket, for example: `/var/run/docker.sock`\n- `PATH` - Request path, for example: `/v2/keys`\n\n```js\ngot('http://unix:/var/run/docker.sock:/containers/json');\n\n// Or without protocol (HTTP by default)\ngot('unix:/var/run/docker.sock:/containers/json');\n```\n\n\n## AWS\n\nRequests to AWS services need to have their headers signed. This can be accomplished by using the [`aws4`](https://www.npmjs.com/package/aws4) package. This is an example for querying an [\"API Gateway\"](https://docs.aws.amazon.com/apigateway/api-reference/signing-requests/) with a signed request.\n\n```js\nconst got = require('got');\nconst AWS = require('aws-sdk');\nconst aws4 = require('aws4');\n\nconst chain = new AWS.CredentialProviderChain();\n\n// Create a Got instance to use relative paths and signed requests\nconst awsClient = got.extend({\n\tprefixUrl: 'https://<api-id>.execute-api.<api-region>.amazonaws.com/<stage>/',\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\tasync options => {\n\t\t\t\tconst credentials = await chain.resolvePromise();\n\t\t\t\taws4.sign(options, credentials);\n\t\t\t}\n\t\t]\n\t}\n});\n\nconst response = await awsClient('endpoint/path', {\n\t// Request-specific options\n});\n```\n\n\n## Testing\n\nYou can test your requests by using the [`nock`](https://github.com/node-nock/nock) package to mock an endpoint:\n\n```js\nconst got = require('got');\nconst nock = require('nock');\n\nnock('https://sindresorhus.com')\n\t.get('/')\n\t.reply(200, 'Hello world!');\n\n(async () => {\n\tconst response = await got('https://sindresorhus.com');\n\tconsole.log(response.body);\n\t//=> 'Hello world!'\n})();\n```\n\nFor real integration testing we recommend using [`ava`](https://github.com/avajs/ava) with [`create-test-server`](https://github.com/lukechilds/create-test-server). We're using a macro so we don't have to `server.listen()` and `server.close()` every test. Take a look at one of our tests:\n\n```js\ntest('retry function gets iteration count', withServer, async (t, server, got) => {\n\tlet knocks = 0;\n\tserver.get('/', (request, response) => {\n\t\tif (knocks++ === 1) {\n\t\t\tresponse.end('who`s there?');\n\t\t}\n\t});\n\n\tawait got({\n\t\tretry: {\n\t\t\tcalculateDelay: ({attemptCount}) => {\n\t\t\t\tt.true(is.number(attemptCount));\n\t\t\t\treturn attemptCount < 2;\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\n\n## Tips\n\n### JSON mode\n\nTo pass an object as the body, you need to use the `json` option. It will be stringified using `JSON.stringify`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst {body} = await got.post('https://httpbin.org/anything', {\n\t\tjson: {\n\t\t\thello: 'world'\n\t\t},\n\t\tresponseType: 'json'\n\t});\n\n\tconsole.log(body.data);\n\t//=> '{\"hello\":\"world\"}'\n})();\n```\n\nTo receive a JSON body you can either set `responseType` option to `json` or use `promise.json()`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst {body} = await got.post('https://httpbin.org/anything', {\n\t\tbody: {\n\t\t\thello: 'world'\n\t\t}\n\t}).json();\n\n\tconsole.log(body);\n\t//=> {…}\n})();\n```\n\n### User Agent\n\nIt's a good idea to set the `'user-agent'` header so the provider can more easily see how their resource is used. By default, it's the URL to this repo. You can omit this header by setting it to `null`.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': null\n\t}\n});\n```\n\n### 304 Responses\n\nBear in mind; if you send an `if-modified-since` header and receive a `304 Not Modified` response, the body will be empty. It's your responsibility to cache and retrieve the body contents.\n\n### Custom endpoints\n\nUse `got.extend()` to make it nicer to work with REST APIs. Especially if you use the `prefixUrl` option.\n\n**Note:** Not to be confused with [`got.create()`](documentation/advanced-creation.md), which has no defaults.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\nconst custom = got.extend({\n\tprefixUrl: 'example.com',\n\tresponseType: 'json',\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\n// Use `custom` exactly how you use `got`\n(async () => {\n\tconst list = await custom('/v1/users/list');\n})();\n```\n\n### Experimental HTTP2 support\n\nGot provides an experimental support for HTTP2 using the [`http2-wrapper`](https://github.com/szmarczak/http2-wrapper) package:\n\n```js\nconst got = require('got');\nconst {request} = require('http2-wrapper');\n\nconst h2got = got.extend({request});\n\n(async () => {\n\tconst {body} = await h2got('https://nghttp2.org/httpbin/headers');\n\tconsole.log(body);\n})();\n```\n\n## Comparison\n\n|                       |       `got`      | [`request`][r0] |  [`node-fetch`][n0]  |  [`axios`][a0]  |  [`superagent`][s0]  |\n|-----------------------|:----------------:|:---------------:|:--------------------:|:---------------:|:--------------------:|\n| HTTP/2 support        |        ❔        |        ❌       |          ❌         |        ❌       |          ✔️\\*\\*      |\n| Browser support       |        ❌       |        ❌       |          ✔️\\*       |        ✔️       |          ✔️          |\n| Electron support      |        ✔️       |        ❌       |          ❌         |        ❌       |          ❌          |\n| Promise API           |        ✔️       |        ✔️       |          ✔️         |        ✔️       |          ✔️          |\n| Stream API            |        ✔️       |        ✔️       |     Node.js only     |        ❌       |          ✔️          |\n| Request cancelation   |        ✔️       |        ❌       |          ✔️         |        ✔️       |          ✔️          |\n| RFC compliant caching |        ✔️       |        ❌       |          ❌         |        ❌       |          ❌          |\n| Cookies (out-of-box)  |        ✔️       |        ✔️       |          ❌         |        ❌       |          ❌          |\n| Follows redirects     |        ✔️       |        ✔️       |          ✔️         |        ✔️       |          ✔️          |\n| Retries on failure    |        ✔️       |        ❌       |          ❌         |        ❌       |          ✔️          |\n| Progress events       |        ✔️       |        ❌       |          ❌         |   Browser only   |          ✔️          |\n| Handles gzip/deflate  |        ✔️       |        ✔️       |          ✔️         |        ✔️       |          ✔️          |\n| Advanced timeouts     |        ✔️       |        ❌       |          ❌         |        ❌       |          ❌          |\n| Timings               |        ✔️       |        ✔️       |          ❌         |        ❌       |          ❌          |\n| Errors with metadata  |        ✔️       |        ❌       |          ❌         |        ✔️       |          ❌          |\n| JSON mode             |        ✔️       |        ✔️       |          ✔️         |        ✔️       |          ✔️          |\n| Custom defaults       |        ✔️       |        ✔️       |          ❌         |        ✔️       |          ❌          |\n| Composable            |        ✔️       |        ❌       |          ❌         |        ❌       |          ✔️          |\n| Hooks                 |        ✔️       |        ❌       |          ❌         |        ✔️       |          ❌          |\n| Issues open           |  [![][gio]][g1]  | [![][rio]][r1]  |    [![][nio]][n1]    |  [![][aio]][a1] |    [![][sio]][s1]     |\n| Issues closed         |  [![][gic]][g2]  | [![][ric]][r2]  |    [![][nic]][n2]    |  [![][aic]][a2] |    [![][sic]][s2]     |\n| Downloads             |  [![][gd]][g3]   |  [![][rd]][r3]  |    [![][nd]][n3]     |  [![][ad]][a3]  |    [![][sd]][s3]      |\n| Coverage              |  [![][gc]][g4]   |  [![][rc]][r4]  |    [![][nc]][n4]     |  [![][ac]][a4]  |    [![][sc]][s4]      |\n| Build                 |  [![][gb]][g5]   |  [![][rb]][r5]  |    [![][nb]][n5]     |  [![][ab]][a5]  |    [![][sb]][s5]      |\n| Bugs                  |  [![][gbg]][g6]  | [![][rbg]][r6]  |    [![][nbg]][n6]    |  [![][abg]][a6] |    [![][sbg]][s6]     |\n| Dependents            |  [![][gdp]][g7]  | [![][rdp]][r7]  |    [![][ndp]][n7]    |  [![][adp]][a7] |    [![][sdp]][s7]     |\n| Install size          |  [![][gis]][g8]  | [![][ris]][r8]  |    [![][nis]][n8]    |  [![][ais]][a8] |    [![][sis]][s8]     |\n\n\\* It's almost API compatible with the browser `fetch` API.<br>\n\\*\\* Need to switch the protocol manually.<br>\n❔ Experimental support.\n\n<!-- GITHUB -->\n[r0]: https://github.com/request/request\n[n0]: https://github.com/bitinn/node-fetch\n[a0]: https://github.com/axios/axios\n[s0]: https://github.com/visionmedia/superagent\n\n<!-- ISSUES OPEN -->\n[gio]: https://badgen.net/github/open-issues/sindresorhus/got?label\n[rio]: https://badgen.net/github/open-issues/request/request?label\n[nio]: https://badgen.net/github/open-issues/bitinn/node-fetch?label\n[aio]: https://badgen.net/github/open-issues/axios/axios?label\n[sio]: https://badgen.net/github/open-issues/visionmedia/superagent?label\n\n[g1]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[r1]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[n1]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[a1]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[s1]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n\n<!-- ISSUES CLOSED -->\n[gic]: https://badgen.net/github/closed-issues/sindresorhus/got?label\n[ric]: https://badgen.net/github/closed-issues/request/request?label\n[nic]: https://badgen.net/github/closed-issues/bitinn/node-fetch?label\n[aic]: https://badgen.net/github/closed-issues/axios/axios?label\n[sic]: https://badgen.net/github/closed-issues/visionmedia/superagent?label\n\n[g2]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[r2]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[n2]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[a2]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[s2]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n\n<!-- DOWNLOADS -->\n[gd]: https://badgen.net/npm/dm/got?label\n[rd]: https://badgen.net/npm/dm/request?label\n[nd]: https://badgen.net/npm/dm/node-fetch?label\n[ad]: https://badgen.net/npm/dm/axios?label\n[sd]: https://badgen.net/npm/dm/superagent?label\n\n[g3]: https://www.npmjs.com/package/got\n[r3]: https://www.npmjs.com/package/request\n[n3]: https://www.npmjs.com/package/node-fetch\n[a3]: https://www.npmjs.com/package/axios\n[s3]: https://www.npmjs.com/package/superagent\n\n<!-- COVERAGE -->\n[gc]: https://badgen.net/coveralls/c/github/sindresorhus/got?label\n[rc]: https://badgen.net/coveralls/c/github/request/request?label\n[nc]: https://badgen.net/coveralls/c/github/bitinn/node-fetch?label\n[ac]: https://badgen.net/coveralls/c/github/mzabriskie/axios?label\n[sc]: https://badgen.net/codecov/c/github/visionmedia/superagent?label\n\n[g4]: https://coveralls.io/github/sindresorhus/got\n[r4]: https://coveralls.io/github/request/request\n[n4]: https://coveralls.io/github/bitinn/node-fetch\n[a4]: https://coveralls.io/github/mzabriskie/axios\n[s4]: https://codecov.io/gh/visionmedia/superagent\n\n<!-- BUILD -->\n[gb]: https://badgen.net/travis/sindresorhus/got?label\n[rb]: https://badgen.net/travis/request/request?label\n[nb]: https://badgen.net/travis/bitinn/node-fetch?label\n[ab]: https://badgen.net/travis/axios/axios?label\n[sb]: https://badgen.net/travis/visionmedia/superagent?label\n\n[g5]: https://travis-ci.org/sindresorhus/got\n[r5]: https://travis-ci.org/request/request\n[n5]: https://travis-ci.org/bitinn/node-fetch\n[a5]: https://travis-ci.org/axios/axios\n[s5]: https://travis-ci.org/visionmedia/superagent\n\n<!-- BUGS -->\n[gbg]: https://badgen.net/github/label-issues/sindresorhus/got/bug/open?label\n[rbg]: https://badgen.net/github/label-issues/request/request/Needs%20investigation/open?label\n[nbg]: https://badgen.net/github/label-issues/bitinn/node-fetch/bug/open?label\n[abg]: https://badgen.net/github/label-issues/axios/axios/type:bug/open?label\n[sbg]: https://badgen.net/github/label-issues/visionmedia/superagent/Bug/open?label\n\n[g6]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[r6]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A\"Needs+investigation\"\n[n6]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[a6]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Atype:bug\n[s6]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3ABug\n\n<!-- DEPENDENTS -->\n[gdp]: https://badgen.net/npm/dependents/got?label\n[rdp]: https://badgen.net/npm/dependents/request?label\n[ndp]: https://badgen.net/npm/dependents/node-fetch?label\n[adp]: https://badgen.net/npm/dependents/axios?label\n[sdp]: https://badgen.net/npm/dependents/superagent?label\n\n[g7]: https://www.npmjs.com/package/got?activeTab=dependents\n[r7]: https://www.npmjs.com/package/request?activeTab=dependents\n[n7]: https://www.npmjs.com/package/node-fetch?activeTab=dependents\n[a7]: https://www.npmjs.com/package/axios?activeTab=dependents\n[s7]: https://www.npmjs.com/package/visionmedia?activeTab=dependents\n\n<!-- INSTALL SIZE -->\n[gis]: https://badgen.net/packagephobia/install/got?label\n[ris]: https://badgen.net/packagephobia/install/request?label\n[nis]: https://badgen.net/packagephobia/install/node-fetch?label\n[ais]: https://badgen.net/packagephobia/install/axios?label\n[sis]: https://badgen.net/packagephobia/install/superagent?label\n\n[g8]: https://packagephobia.now.sh/result?p=got\n[r8]: https://packagephobia.now.sh/result?p=request\n[n8]: https://packagephobia.now.sh/result?p=node-fetch\n[a8]: https://packagephobia.now.sh/result?p=axios\n[s8]: https://packagephobia.now.sh/result?p=superagent\n\n#### Install size of the dependencies\n\n|                   Dependency                   |          Install size         |\n|------------------------------------------------|-------------------------------|\n| [@sindresorhus/is][url-is]                     | ![][size-is]                  |\n| [@szmarczak/http-timer][url-http-timer]        | ![][size-http-timer]          |\n| [cacheable-request][url-cacheable-request]     | ![][size-cacheable-request]   |\n| [decompress-response][url-decompress-response] | ![][size-decompress-response] |\n| [duplexer3][url-duplexer3]                     | ![][size-duplexer3]           |\n| [get-stream][url-get-stream]                   | ![][size-get-stream]          |\n| [lowercase-keys][url-lowercase-keys]           | ![][size-lowercase-keys]      |\n| [mimic-response][url-mimic-response]           | ![][size-mimic-response]      |\n| [p-cancelable][url-p-cancelable]               | ![][size-p-cancelable]        |\n| [to-readable-stream][url-to-readable-stream]   | ![][size-to-readable-stream]  |\n|                                                | ![][gis]                      |\n\n[size-is]: https://badgen.net/packagephobia/install/@sindresorhus/is?label\n[size-http-timer]: https://badgen.net/packagephobia/install/@szmarczak/http-timer?label\n[size-cacheable-request]: https://badgen.net/packagephobia/install/cacheable-request?label\n[size-decompress-response]: https://badgen.net/packagephobia/install/decompress-response?label\n[size-duplexer3]: https://badgen.net/packagephobia/install/duplexer3?label\n[size-get-stream]: https://badgen.net/packagephobia/install/get-stream?label\n[size-lowercase-keys]: https://badgen.net/packagephobia/install/lowercase-keys?label\n[size-mimic-response]: https://badgen.net/packagephobia/install/mimic-response?label\n[size-p-cancelable]: https://badgen.net/packagephobia/install/p-cancelable?label\n[size-to-readable-stream]: https://badgen.net/packagephobia/install/to-readable-stream?label\n\n[url-is]: https://github.com/sindresorhus/is\n[url-http-timer]: https://github.com/szmarczak/http-timer\n[url-cacheable-request]: https://github.com/lukechilds/cacheable-request\n[url-decompress-response]: https://github.com/sindresorhus/decompress-response\n[url-duplexer3]: https://github.com/floatdrop/duplexer3\n[url-get-stream]: https://github.com/sindresorhus/get-stream\n[url-lowercase-keys]: https://github.com/sindresorhus/lowercase-keys\n[url-mimic-response]: https://github.com/sindresorhus/mimic-response\n[url-p-cancelable]: https://github.com/sindresorhus/p-cancelable\n[url-to-readable-stream]: https://github.com/sindresorhus/to-readable-stream\n\n## Related\n\n- [gh-got](https://github.com/sindresorhus/gh-got) - Got convenience wrapper to interact with the GitHub API\n- [gl-got](https://github.com/singapore/gl-got) - Got convenience wrapper to interact with the GitLab API\n- [travis-got](https://github.com/samverschueren/travis-got) - Got convenience wrapper to interact with the Travis API\n- [graphql-got](https://github.com/kevva/graphql-got) - Got convenience wrapper to interact with GraphQL\n- [GotQL](https://github.com/khaosdoctor/gotql) - Got convenience wrapper to interact with GraphQL using JSON-parsed queries instead of strings\n- [got-fetch](https://github.com/alexghr/got-fetch) - Got with a `fetch` interface\n\n\n## Maintainers\n\n[![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://sindresorhus.com) | [![Szymon Marczak](https://github.com/szmarczak.png?size=100)](https://github.com/szmarczak) | [![Alexander Tesfamichael](https://github.com/AlexTes.png?size=100)](https://github.com/AlexTes) | [![Brandon Smith](https://github.com/brandon93s.png?size=100)](https://github.com/brandon93s) | [![Luke Childs](https://github.com/lukechilds.png?size=100)](https://github.com/lukechilds)\n---|---|---|---|---\n[Sindre Sorhus](https://sindresorhus.com) | [Szymon Marczak](https://github.com/szmarczak) | [Alexander Tesfamichael](https://alextes.me) | [Brandon Smith](https://github.com/brandon93s) | [Luke Childs](https://github.com/lukechilds)\n\n###### Former\n\n- [Vsevolod Strukchinsky](https://github.com/floatdrop)\n\n\n---\n\n<div align=\"center\">\n\t<b>\n\t\t<a href=\"https://tidelift.com/subscription/pkg/npm-got?utm_source=npm-got&utm_medium=referral&utm_campaign=readme\">Get professional support for this package with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n","types":"dist","browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","babel":false,"compileEnhancements":false,"extensions":["ts"],"require":["ts-node/register"]},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"rules":{"import/named":"off","import/no-unresolved":"off","import/first":"off","import/newline-after-import":"off","ava/no-import-test-files":"off","ava/no-ignored-test-files":"off","@typescript-eslint/explicit-function-return-type":"off","@typescript-eslint/no-unnecessary-type-assertion":"off","@typescript-eslint/await-thenable":"off"},"ignores":["documentation/examples/*"]},"gitHead":"14fe93054122861c25e8742ace27f6ce156e48db","readmeFilename":"readme.md","_nodeVersion":"10.16.3","_npmVersion":"6.9.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.0.0-alpha.2.2_1569309328699_0.049343242223831574"},"_hasShrinkwrap":false},"10.0.0-alpha.3.1":{"_id":"got@10.0.0-alpha.3.1","name":"got","description":"Simplified HTTP requests","version":"10.0.0-alpha.3.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron","brotli"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava && tsc --noEmit","release":"np","build":"del-cli dist && tsc"},"directories":{},"devDependencies":{"@sindresorhus/tsconfig":"^0.5.0","@types/duplexer3":"^0.1.0","@types/node":"^12.7.5","@types/sinon":"^7.0.13","@typescript-eslint/eslint-plugin":"^2.3.1","@typescript-eslint/parser":"^2.3.1","ava":"^2.4.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.19.0","form-data":"^2.5.1","get-port":"^5.0.0","keyv":"^3.1.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.0.3","nyc":"^14.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^7.5.0","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","ts-node":"^8.4.1","typescript":"^3.6.4","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^2.0.0","@types/cacheable-request":"^6.0.1","@types/tough-cookie":"^2.3.5","cacheable-lookup":"^0.2.1","cacheable-request":"^7.0.0","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.8.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"a5100ab007389b2cf615e2723b4ffceaa8a4a6b7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.0.0-alpha.3.1.tgz"},"readme":"<div align=\"center\">\n\t<br>\n\t<br>\n\t<img width=\"360\" src=\"media/logo.svg\" alt=\"Got\">\n\t<br>\n\t<br>\n\t<br>\n\t<p align=\"center\">Huge thanks to <a href=\"https://moxy.studio\"><img src=\"https://sindresorhus.com/assets/thanks/moxy-logo.svg\" width=\"150\"></a> for sponsoring Sindre Sorhus!\n\t</p>\n\t<br>\n\t<br>\n</div>\n\n> Simplified HTTP requests\n\n[![Build Status: Linux](https://travis-ci.org/sindresorhus/got.svg?branch=master)](https://travis-ci.org/sindresorhus/got)\n[![Coverage Status](https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/got?branch=master)\n[![Downloads](https://img.shields.io/npm/dm/got.svg)](https://npmjs.com/got)\n[![Install size](https://packagephobia.now.sh/badge?p=got)](https://packagephobia.now.sh/result?p=got)\n\nGot is a human-friendly and powerful HTTP request library.\n\nIt was created because the popular [`request`](https://github.com/request/request) package is bloated: [![Install size](https://packagephobia.now.sh/badge?p=request)](https://packagephobia.now.sh/result?p=request)\n\nGot is for Node.js. For browsers, we recommend [Ky](https://github.com/sindresorhus/ky).\n\n**This readme reflects the next major version that is currently in development. You probably want [the v9 readme](https://www.npmjs.com/package/got).**\n\n\n## Highlights\n\n- [Promise & stream API](#api)\n- [Request cancelation](#aborting-the-request)\n- [RFC compliant caching](#cache-adapters)\n- [Follows redirects](#followredirect)\n- [Retries on failure](#retry)\n- [Progress events](#onuploadprogress-progress)\n- [Handles gzip/deflate/brotli](#decompress)\n- [Timeout handling](#timeout)\n- [Errors with metadata](#errors)\n- [JSON mode](#json-mode)\n- [WHATWG URL support](#url)\n- [Hooks](#hooks)\n- [Instances with custom defaults](#instances)\n- [Composable](documentation/advanced-creation.md#merging-instances)\n- [Plugins](documentation/lets-make-a-plugin.md)\n- [Electron support](#useelectronnet)\n- [Used by 3000+ packages and 1.4M+ repos](https://github.com/sindresorhus/got/network/dependents)\n- Actively maintained\n\n[Moving from Request?](documentation/migration-guides.md)\n\n[See how Got compares to other HTTP libraries](#comparison)\n\n## Install\n\n```\n$ npm install got\n```\n\n\n## Usage\n\n```js\nconst got = require('got');\n\n(async () => {\n\ttry {\n\t\tconst response = await got('https://sindresorhus.com');\n\t\tconsole.log(response.body);\n\t\t//=> '<!doctype html> ...'\n\t} catch (error) {\n\t\tconsole.log(error.response.body);\n\t\t//=> 'Internal server error ...'\n\t}\n})();\n```\n\n###### Streams\n\n```js\nconst stream = require('stream');\nconst {promisify} = require('util');\nconst fs = require('fs');\nconst got = require('got');\n\nconst pipeline = promisify(stream.pipeline);\n\n(async () => {\n    await pipeline(\n        got.stream('https://sindresorhus.com'),\n        fs.createWriteStream('index.html')\n    );\n\n    // For POST, PUT, and PATCH methods `got.stream` returns a `stream.Writable`\n    await pipeline(\n        fs.createReadStream('index.html'),\n        got.stream.post('https://sindresorhus.com')\n    );\n})();\n```\n\n**Tip:** Using `from.pipe(to)` doesn't forward errors. If you use it, switch to [`Stream.pipeline(from, ..., to, callback)`](https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback) instead (available from Node v10).\n\n### API\n\nIt's a `GET` request by default, but can be changed by using different methods or via `options.method`.\n\n#### got([url], [options])\n\nReturns a Promise for a [`response` object](#response) or a [stream](#streams-1) if `options.stream` is set to true.\n\n##### url\n\nType: `string | object`\n\nThe URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\nProperties from `options` will override properties in the parsed `url`.\n\nIf no protocol is specified, it will throw a `TypeError`.\n\n**Note:** this can also be an option.\n\n##### options\n\nType: `object`\n\nAny of the [`https.request`](https://nodejs.org/api/https.html#https_https_request_options_callback) options.\n\n###### prefixUrl\n\nType: `string | URL`\n\nWhen specified, `prefixUrl` will be prepended to `url`. The prefix can be any valid URL, either relative or absolute. A trailing slash `/` is optional, one will be added automatically, if needed, when joining `prefixUrl` and `url`. The `url` argument cannot start with a `/` when using this option.\n\nUseful when used with `got.extend()` to create niche-specific Got-instances.\n\n**Note:** `prefixUrl` will be ignored if the `url` argument is a URL instance.\n\n```js\nconst got = require('got');\n\n(async () => {\n\tawait got('unicorn', {prefixUrl: 'https://cats.com'});\n\t//=> 'https://cats.com/unicorn'\n})();\n```\n\n###### headers\n\nType: `object`<br>\nDefault: `{}`\n\nRequest headers.\n\nExisting headers will be overwritten. Headers set to `null` will be omitted.\n\n###### stream\n\nType: `boolean`<br>\nDefault: `false`\n\nReturns a `Stream` instead of a `Promise`. This is equivalent to calling `got.stream(url, [options])`.\n\n###### body\n\nType: `string | Buffer | stream.Readable` or [`form-data` instance](https://github.com/form-data/form-data)\n\n**Note:** The `body` option cannot be used with the `json` or `form` option.\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nIf present in `options` and `options.method` is not set, it will throw a `TypeError`.\n\nThe `content-length` header will be automatically set if `body` is a `string` / `Buffer` / `fs.createReadStream` instance / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n\n###### json\n\nType: `object | Array | number | string | boolean | null` *(JSON-serializable values)*\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nJSON body. If the `Content-Type` header is not set, it will be set to `application/json`.\n\n###### context\n\nType: `object`\n\nUser data. In contrast to other options, `context` is not enumerable.\n\n**Note:** The object is never merged, it's just passed through. Got will not modify the object in any way.\n\nIt's very useful for storing auth tokens:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\toptions => {\n\t\t\t\tif (!options.context && !options.context.token) {\n\t\t\t\t\tthrow new Error('Token required');\n\t\t\t\t}\n\n\t\t\t\toptions.headers.token = options.context.token;\n\t\t\t}\n\t\t]\n\t}\n});\n\n(async () => {\n\tconst context = {\n\t\ttoken: 'secret'\n\t};\n\n\tconst response = await instance('https://httpbin.org/headers', {context});\n\n\t// Let's see the headers\n\tconsole.log(response.body);\n})();\n```\n\n###### responseType\n\nType: `string`<br>\nDefault: `text`\n\n**Note:** When using streams, this option is ignored.\n\nParsing method used to retrieve the body from the response. Can be `text`, `json` or `buffer`. The promise has `.json()` and `.buffer()` and `.text()` functions which set this option automatically.\n\nExample:\n\n```js\nconst {body} = await got(url).json();\n```\n\n###### resolveBodyOnly\n\nType: `string`<br>\nDefault: `false`\n\nWhen set to `true` the promise will return the [Response body](#body-1) instead of the [Response](#response) object.\n\n###### cookieJar\n\nType: [`tough.CookieJar` instance](https://github.com/salesforce/tough-cookie#cookiejar)\n\n**Note:** If you provide this option, `options.headers.cookie` will be overridden.\n\nCookie support. You don't have to care about parsing or how to store them. [Example.](#cookies)\n\n###### ignoreInvalidCookies\n\nType: `boolean`<br>\nDefault: `false`\n\nIgnore invalid cookies instead of throwing an error. Only useful when the `cookieJar` option has been set. Not recommended.\n\n###### encoding\n\nType: `string | null`<br>\nDefault: `'utf8'`\n\n[Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data. If `null`, the body is returned as a [`Buffer`](https://nodejs.org/api/buffer.html) (binary data).\n\n###### form\n\nType: `object | true`\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nThe form body is converted to query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n\nIf set to `true` and the `Content-Type` header is not set, it will be set to `application/x-www-form-urlencoded`.\n\n###### searchParams\n\nType: `string | object<string, string | number> | URLSearchParams`\n\n**Note:** The `query` option was renamed to `searchParams` in Got v10. The `query` option name is still functional, but is being deprecated and will be completely removed in Got v11.\n\nQuery string that will be added to the request URL. This will override the query string in `url`.\n\nIf you need to pass in an array, you can do it using a `URLSearchParams` instance:\n\n```js\nconst got = require('got');\n\nconst searchParams = new URLSearchParams([['key', 'a'], ['key', 'b']]);\n\ngot('https://example.com', {searchParams});\n\nconsole.log(searchParams.toString());\n//=> 'key=a&key=b'\n```\n\nAnd if you need a different array format, you could use the [`query-string`](https://github.com/sindresorhus/query-string) package:\n\n```js\nconst got = require('got');\nconst queryString = require('query-string');\n\nconst searchParams = queryString.stringify({key: ['a', 'b']}, {arrayFormat: 'bracket'});\n\ngot('https://example.com', {searchParams});\n\nconsole.log(searchParams);\n//=> 'key[]=a&key[]=b'\n```\n\n###### timeout\n\nType: `number | object`\n\nMilliseconds to wait for the server to end the response before aborting the request with [`got.TimeoutError`](#gottimeouterror) error (a.k.a. `request` property). By default, there's no timeout.\n\nThis also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n\n- `lookup` starts when a socket is assigned and ends when the hostname has been resolved. Does not apply when using a Unix domain socket.\n- `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n- `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n- `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n- `response` starts when the request has been written to the socket and ends when the response headers are received.\n- `send` starts when the socket is connected and ends with the request has been written to the socket.\n- `request` starts when the request is initiated and ends when the response's end event fires.\n\n###### retry\n\nType: `number | object`<br>\nDefault:\n- limit: `2`\n- calculateDelay: `(attemptCount, retryOptions, error, computedValue) => computedValue`\n- methods: `GET` `PUT` `HEAD` `DELETE` `OPTIONS` `TRACE`\n- statusCodes: [`408`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408) [`413`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413) [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) [`500`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500) [`502`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502) [`503`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503) [`504`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504)\n- maxRetryAfter: `undefined`\n- errorCodes: `ETIMEDOUT` `ECONNRESET` `EADDRINUSE` `ECONNREFUSED` `EPIPE` `ENOTFOUND` `ENETUNREACH` `EAI_AGAIN`\n\nAn object representing `limit`, `calculateDelay`, `methods`, `statusCodes`, `maxRetryAfter` and `errorCodes` fields for maximum retry count, retry handler, allowed methods, allowed status codes, maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time and allowed error codes.\n\n**Note:** When using streams, this option is ignored.\n\nIf `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.<br>\nIf [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n\nDelays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 1).\n\nThe `calculateDelay` property is a `function` with `attemptCount`, `retryOptions`, `error` and `computedValue` arguments for current retry count, the retry options, error and default computed value. The function must return a delay in milliseconds (`0` return value cancels retry).\n\nBy default, it retries *only* on the specified methods, status codes, and on these network errors:\n- `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n- `ECONNRESET`: Connection was forcibly closed by a peer.\n- `EADDRINUSE`: Could not bind to any free port.\n- `ECONNREFUSED`: Connection was refused by the server.\n- `EPIPE`: The remote side of the stream being written has been closed.\n- `ENOTFOUND`: Couldn't resolve the hostname to an IP address.\n- `ENETUNREACH`: No internet connection.\n- `EAI_AGAIN`: DNS lookup timed out.\n\n###### followRedirect\n\nType: `boolean`<br>\nDefault: `true`\n\nDefines if redirect responses should be followed automatically.\n\nNote that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`. This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4).\n\n###### decompress\n\nType: `boolean`<br>\nDefault: `true`\n\nDecompress the response automatically. This will set the `accept-encoding` header to `gzip, deflate, br` on Node.js 11.7.0+ or `gzip, deflate` for older Node.js versions, unless you set it yourself.\n\nBrotli (`br`) support requires Node.js 11.7.0 or later.\n\nIf this is disabled, a compressed response is returned as a `Buffer`. This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n\n###### cache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached response data.\n\n###### dnsCache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached DNS data.\n\n###### request\n\nType: `Function`<br>\nDefault: `http.request` `https.request` *(Depending on the protocol)*\n\nCustom request function. The main purpose of this is to [support HTTP2 using a wrapper](#experimental-http2-support).\n\n###### useElectronNet\n\nType: `boolean`<br>\nDefault: `false`\n\nWhen used in Electron, Got will use [`electron.net`](https://electronjs.org/docs/api/net/) instead of the Node.js `http` module. According to the Electron docs, it should be fully compatible, but it's not entirely. See [#443](https://github.com/sindresorhus/got/issues/443) and [#461](https://github.com/sindresorhus/got/issues/461).\n\n###### throwHttpErrors\n\nType: `boolean`<br>\nDefault: `true`\n\nDetermines if a `got.HTTPError` is thrown for error responses (non-2xx status codes).\n\nIf this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing. This may be useful if you are checking for resource availability and are expecting error responses.\n\n###### agent\n\nSame as the [`agent` option](https://nodejs.org/api/http.html#http_http_request_url_options_callback) for `http.request`, but with an extra feature:\n\nIf you require different agents for different protocols, you can pass a map of agents to the `agent` option. This is necessary because a request to one protocol might redirect to another. In such a scenario, Got will switch over to the right protocol agent for you.\n\n```js\nconst got = require('got');\nconst HttpAgent = require('agentkeepalive');\nconst {HttpsAgent} = HttpAgent;\n\ngot('https://sindresorhus.com', {\n\tagent: {\n\t\thttp: new HttpAgent(),\n\t\thttps: new HttpsAgent()\n\t}\n});\n```\n\n###### hooks\n\nType: `object<string, Function[]>`\n\nHooks allow modifications during the request lifecycle. Hook functions may be async and are run serially.\n\n###### hooks.init\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with plain [request options](#options), right before their normalization. This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when the input needs custom handling.\n\nSee the [Request migration guide](documentation/migration-guides.md#breaking-changes) for an example.\n\n**Note:** This hook must be synchronous!\n\n###### hooks.beforeRequest\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options). Got will make no further changes to the request before it is sent (except the body serialization). This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when you want to create an API client that, for example, uses HMAC-signing.\n\nSee the [AWS section](#aws) for an example.\n\n###### hooks.beforeRedirect\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options) and the redirect [response](#response). Got will make no further changes to the request. This is especially useful when you want to avoid dead sites. Example:\n\n```js\nconst got = require('got');\n\ngot('https://example.com', {\n\thooks: {\n\t\tbeforeRedirect: [\n\t\t\t(options, response) => {\n\t\t\t\tif (options.hostname === 'deadSite') {\n\t\t\t\t\toptions.hostname = 'fallbackSite';\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.beforeRetry\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options), the error and the retry count. Got will make no further changes to the request. This is especially useful when some extra work is required before the next try. Example:\n\n```js\nconst got = require('got');\n\ngot.post('https://example.com', {\n\thooks: {\n\t\tbeforeRetry: [\n\t\t\t(options, error, retryCount) => {\n\t\t\t\tif (error.statusCode === 413) { // Payload too large\n\t\t\t\t\toptions.body = getNewBody();\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.afterResponse\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [response object](#response) and a retry function.\n\nEach function should return the response. This is especially useful when you want to refresh an access token. Example:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tafterResponse: [\n\t\t\t(response, retryWithMergedOptions) => {\n\t\t\t\tif (response.statusCode === 401) { // Unauthorized\n\t\t\t\t\tconst updatedOptions = {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\ttoken: getNewToken() // Refresh the access token\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Save for further requests\n\t\t\t\t\tinstance.defaults.options = got.mergeOptions(instance.defaults.options, updatedOptions);\n\n\t\t\t\t\t// Make a new retry\n\t\t\t\t\treturn retryWithMergedOptions(updatedOptions);\n\t\t\t\t}\n\n\t\t\t\t// No changes otherwise\n\t\t\t\treturn response;\n\t\t\t}\n\t\t]\n\t},\n\tmutableDefaults: true\n});\n```\n\n###### hooks.beforeError\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with an `Error` instance. The error is passed to the hook right before it's thrown. This is especially useful when you want to have more detailed errors.\n\n**Note:** Errors thrown while normalizing input options are thrown directly and not part of this hook.\n\n```js\nconst got = require('got');\n\ngot('https://api.github.com/some-endpoint', {\n\thooks: {\n\t\tbeforeError: [\n\t\t\terror => {\n\t\t\t\tconst {response} = error;\n \t\t\t\tif (response && response.body) {\n\t\t\t\t\terror.name = 'GitHubError';\n\t\t\t\t\terror.message = `${response.body.message} (${error.statusCode})`;\n\t\t\t\t}\n\n \t\t\t\treturn error;\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n#### Response\n\nThe response object will typically be a [Node.js HTTP response stream](https://nodejs.org/api/http.html#http_class_http_incomingmessage), however, if returned from the cache it will be a [response-like object](https://github.com/lukechilds/responselike) which behaves in the same way.\n\n##### request\n\nType: `object`\n\n**Note:** This is not a [http.ClientRequest](https://nodejs.org/api/http.html#http_class_http_clientrequest).\n\n- `options` - The Got options that were set on this request.\n\n##### body\n\nType: `string | object | Buffer` *(Depending on `options.responseType`)*\n\nThe result of the request.\n\n##### url\n\nType: `string`\n\nThe request URL or the final URL after redirects.\n\n##### ip\n\nType: `string`\n\nThe remote IP address.\n\n**Note:** Not available when the response is cached. This is hopefully a temporary limitation, see [lukechilds/cacheable-request#86](https://github.com/lukechilds/cacheable-request/issues/86).\n\n##### requestUrl\n\nType: `string`\n\nThe original request URL.\n\n##### timings\n\nType: `object`\n\nThe object contains the following properties:\n\n- `start` - Time when the request started.\n- `socket` - Time when a socket was assigned to the request.\n- `lookup` - Time when the DNS lookup finished.\n- `connect` - Time when the socket successfully connected.\n- `upload` - Time when the request finished uploading.\n- `response` - Time when the request fired the `response` event.\n- `end` - Time when the response fired the `end` event.\n- `error` - Time when the request fired the `error` event.\n- `phases`\n\t- `wait` - `timings.socket - timings.start`\n\t- `dns` - `timings.lookup - timings.socket`\n\t- `tcp` - `timings.connect - timings.lookup`\n\t- `request` - `timings.upload - timings.connect`\n\t- `firstByte` - `timings.response - timings.upload`\n\t- `download` - `timings.end - timings.response`\n\t- `total` - `timings.end - timings.start` or `timings.error - timings.start`\n\n**Note:** The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n\n##### isFromCache\n\nType: `boolean`\n\nWhether the response was retrieved from the cache.\n\n##### redirectUrls\n\nType: `string[]`\n\nThe redirect URLs.\n\n##### retryCount\n\nType: `number`\n\nThe number of times the request was retried.\n\n#### Streams\n\n**Note:** Progress events, redirect events and request/response events can also be used with promises.\n\n**Note:** To access `response.isFromCache` you need to use `got.stream(url, options).isFromCache`. The value will be undefined until the `response` event.\n\n#### got.stream(url, [options])\n\nSets `options.stream` to `true`.\n\nReturns a [duplex stream](https://nodejs.org/api/stream.html#stream_class_stream_duplex) with additional events:\n\n##### .on('request', request)\n\n`request` event to get the request object of the request.\n\n**Tip:** You can use `request` event to abort request:\n\n```js\ngot.stream('https://github.com')\n\t.on('request', request => setTimeout(() => request.abort(), 50));\n```\n\n##### .on('response', response)\n\nThe `response` event to get the response object of the final request.\n\n##### .on('redirect', response, nextOptions)\n\nThe `redirect` event to get the response object of a redirect. The second argument is options for the next request to the redirect location.\n\n##### .on('uploadProgress', progress)\n##### .on('downloadProgress', progress)\n\nProgress events for uploading (sending a request) and downloading (receiving a response). The `progress` argument is an object like:\n\n```js\n{\n\tpercent: 0.1,\n\ttransferred: 1024,\n\ttotal: 10240\n}\n```\n\nIf it's not possible to retrieve the body size (can happen when streaming), `total` will be `null`.\n\n```js\n(async () => {\n\tconst response = await got('https://sindresorhus.com')\n\t\t.on('downloadProgress', progress => {\n\t\t\t// Report download progress\n\t\t})\n\t\t.on('uploadProgress', progress => {\n\t\t\t// Report upload progress\n\t\t});\n\n\tconsole.log(response);\n})();\n```\n\n##### .on('error', error, body, response)\n\nThe `error` event emitted in case of a protocol error (like `ENOTFOUND` etc.) or status error (4xx or 5xx). The second argument is the body of the server response in case of status error. The third argument is a response object.\n\n#### got.get(url, [options])\n#### got.post(url, [options])\n#### got.put(url, [options])\n#### got.patch(url, [options])\n#### got.head(url, [options])\n#### got.delete(url, [options])\n\nSets `options.method` to the method name and makes a request.\n\n### Instances\n\n#### got.extend(...options)\n\nConfigure a new `got` instance with default `options`. The `options` are merged with the parent instance's `defaults.options` using [`got.mergeOptions`](#gotmergeoptionsparentoptions-newoptions). You can access the resolved options with the `.defaults` property on the instance.\n\n```js\nconst client = got.extend({\n\tprefixUrl: 'https://example.com',\n\theaders: {\n\t\t'x-unicorn': 'rainbow'\n\t}\n});\n\nclient.get('/demo');\n\n/* HTTP Request =>\n * GET /demo HTTP/1.1\n * Host: example.com\n * x-unicorn: rainbow\n */\n```\n\n```js\n(async () => {\n\tconst client = got.extend({\n\t\tprefixUrl: 'httpbin.org',\n\t\theaders: {\n\t\t\t'x-foo': 'bar'\n\t\t}\n\t});\n\tconst {headers} = await client.get('/headers').json();\n\t//=> headers['x-foo'] === 'bar'\n\n\tconst jsonClient = client.extend({\n\t\tresponseType: 'json',\n\t\tresolveBodyOnly: true,\n\t\theaders: {\n\t\t\t'x-baz': 'qux'\n\t\t}\n\t});\n\tconst {headers: headers2} = await jsonClient.get('/headers');\n\t//=> headers2['x-foo'] === 'bar'\n\t//=> headers2['x-baz'] === 'qux'\n})();\n```\n\n**Tip:** Need more control over the behavior of Got? Check out the [`got.create()`](documentation/advanced-creation.md).\n\nAdditionally, `got.extend()` accepts two properties from the `defaults` object: `mutableDefaults` and `handlers`. Example:\n\n```js\n// You can now modify `mutableGot.defaults.options`.\nconst mutableGot = got.extend({mutableDefaults: true});\n\nconst mergedHandlers = got.extend({\n\thandlers: [\n\t\t(options, next) => {\n\t\t\tdelete options.headers.referer;\n\n\t\t\treturn next(options);\n\t\t}\n\t]\n});\n```\n\n#### got.extend(...instances)\n\nMerges many instances into a single one:\n- options are merged using [`got.mergeOptions()`](#gotmergeoptionsparentoptions-newoptions) (+ hooks are merged too),\n- handlers are stored in an array (you can access them through `instance.defaults.handlers`).\n\n#### got.extend(...options, ...instances, ...)\n\nIt's possible to combine options and instances.<br>\nIt gives the same effect as `got.extend(...options).extend(...instances)`:\n\n```js\nconst a = {headers: {cat: 'meow'}};\nconst b = got.create({\n\toptions: {\n\t\theaders: {\n\t\t\tcow: 'moo'\n\t\t}\n\t}\n});\n\n// The same as `got.extend(a).extend(b)`.\n// Note `a` is options and `b` is an instance.\ngot.extend(a, b);\n//=> {headers: {cat: 'meow', cow: 'moo'}}\n```\n\n#### got.mergeOptions(parentOptions, newOptions)\n\nExtends parent options. Avoid using [object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals) as it doesn't work recursively:\n\n```js\nconst a = {headers: {cat: 'meow', wolf: ['bark', 'wrrr']}};\nconst b = {headers: {cow: 'moo', wolf: ['auuu']}};\n\n{...a, ...b}            // => {headers: {cow: 'moo', wolf: ['auuu']}}\ngot.mergeOptions(a, b)  // => {headers: {cat: 'meow', cow: 'moo', wolf: ['auuu']}}\n```\n\nOptions are deeply merged to a new object. The value of each key is determined as follows:\n\n- If the new property is set to `undefined`, it keeps the old one.\n- If both properties are an instances of `URLSearchParams`, a new URLSearchParams instance is created. The values are merged using [`urlSearchParams.append(key, value)`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/append).\n- If the parent property is an instance of `URL` and the new value is a `string` or `URL`, a new URL instance is created: [`new URL(new, parent)`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#Syntax).\n- If the new property is a plain `object`:\n\t- If the parent property is a plain `object` too, both values are merged recursively into a new `object`.\n\t- Otherwise, only the new value is deeply cloned.\n- If the new property is an `Array`, it overwrites the old one with a deep clone of the new property.\n- Otherwise, the new value is assigned to the key.\n\n#### got.defaults\n\nType: `object`\n\nThe default Got options used in that instance.\n\n## Errors\n\nEach error contains an `options` property which are the options Got used to create a request - just to make debugging easier.\n\n#### got.CacheError\n\nWhen a cache method fails, for example, if the database goes down or there's a filesystem error.\n\n#### got.RequestError\n\nWhen a request fails. Contains a `code` property with error class code, like `ECONNREFUSED`.\n\n#### got.ReadError\n\nWhen reading from response stream fails.\n\n#### got.ParseError\n\nWhen server response code is 2xx, and parsing body fails. Includes a `response` property.\n\n#### got.HTTPError\n\nWhen the server response code is not 2xx. Includes a `response` property.\n\n#### got.MaxRedirectsError\n\nWhen the server redirects you more than ten times. Includes a `response` property.\n\n#### got.UnsupportedProtocolError\n\nWhen given an unsupported protocol.\n\n#### got.CancelError\n\nWhen the request is aborted with `.cancel()`.\n\n#### got.TimeoutError\n\nWhen the request is aborted due to a [timeout](#timeout). Includes an `event` and `timings` property.\n\n## Aborting the request\n\nThe promise returned by Got has a [`.cancel()`](https://github.com/sindresorhus/p-cancelable) method which when called, aborts the request.\n\n```js\n(async () => {\n\tconst request = got(url, options);\n\n\t// …\n\n\t// In another part of the code\n\tif (something) {\n\t\trequest.cancel();\n\t}\n\n\t// …\n\n\ttry {\n\t\tawait request;\n\t} catch (error) {\n\t\tif (request.isCanceled) { // Or `error instanceof got.CancelError`\n\t\t\t// Handle cancelation\n\t\t}\n\n\t\t// Handle other errors\n\t}\n})();\n```\n\n<a name=\"cache-adapters\"></a>\n## Cache\n\nGot implements [RFC 7234](http://httpwg.org/specs/rfc7234.html) compliant HTTP caching which works out of the box in-memory and is easily pluggable with a wide range of storage adapters. Fresh cache entries are served directly from the cache, and stale cache entries are revalidated with `If-None-Match`/`If-Modified-Since` headers. You can read more about the underlying cache behavior in the [`cacheable-request` documentation](https://github.com/lukechilds/cacheable-request). For DNS cache, Got uses [`cacheable-lookup`](https://github.com/szmarczak/cacheable-lookup).\n\nYou can use the JavaScript `Map` type as an in-memory cache:\n\n```js\nconst got = require('got');\nconst map = new Map();\n\n(async () => {\n\t\tlet response = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> false\n\n\t\tresponse = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> true\n})();\n```\n\nGot uses [Keyv](https://github.com/lukechilds/keyv) internally to support a wide range of storage adapters. For something more scalable you could use an [official Keyv storage adapter](https://github.com/lukechilds/keyv#official-storage-adapters):\n\n```\n$ npm install @keyv/redis\n```\n\n```js\nconst got = require('got');\nconst KeyvRedis = require('@keyv/redis');\n\nconst redis = new KeyvRedis('redis://user:pass@localhost:6379');\n\ngot('https://sindresorhus.com', {cache: redis});\n```\n\nGot supports anything that follows the Map API, so it's easy to write your own storage adapter or use a third-party solution.\n\nFor example, the following are all valid storage adapters:\n\n```js\nconst storageAdapter = new Map();\n// Or\nconst storageAdapter = require('./my-storage-adapter');\n// Or\nconst QuickLRU = require('quick-lru');\nconst storageAdapter = new QuickLRU({maxSize: 1000});\n\ngot('https://sindresorhus.com', {cache: storageAdapter});\n```\n\nView the [Keyv docs](https://github.com/lukechilds/keyv) for more information on how to use storage adapters.\n\n\n## Proxies\n\nYou can use the [`tunnel`](https://github.com/koichik/node-tunnel) package with the `agent` option to work with proxies:\n\n```js\nconst got = require('got');\nconst tunnel = require('tunnel');\n\ngot('https://sindresorhus.com', {\n\tagent: tunnel.httpOverHttp({\n\t\tproxy: {\n\t\t\thost: 'localhost'\n\t\t}\n\t})\n});\n```\n\nAlternatively, use [`global-agent`](https://github.com/gajus/global-agent) to configure a global proxy for all HTTP/HTTPS traffic in your program.\n\n\n## Cookies\n\nYou can use the [`tough-cookie`](https://github.com/salesforce/tough-cookie) package:\n\n```js\nconst {promisify} = require('util');\nconst got = require('got');\nconst {CookieJar} = require('tough-cookie');\n\n(async () => {\n\tconst cookieJar = new CookieJar();\n\tconst setCookie = promisify(cookieJar.setCookie.bind(cookieJar));\n\n\tawait setCookie('foo=bar', 'https://example.com');\n\tawait got('https://example.com', {cookieJar});\n})();\n```\n\n\n## Form data\n\nYou can use the [`form-data`](https://github.com/form-data/form-data) package to create POST request with form data:\n\n```js\nconst fs = require('fs');\nconst got = require('got');\nconst FormData = require('form-data');\n\nconst form = new FormData();\n\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\ngot.post('https://example.com', {\n\tbody: form\n});\n```\n\n\n## OAuth\n\nYou can use the [`oauth-1.0a`](https://github.com/ddo/oauth-1.0a) package to create a signed OAuth request:\n\n```js\nconst got = require('got');\nconst crypto  = require('crypto');\nconst OAuth = require('oauth-1.0a');\n\nconst oauth = OAuth({\n\tconsumer: {\n\t\tkey: process.env.CONSUMER_KEY,\n\t\tsecret: process.env.CONSUMER_SECRET\n\t},\n\tsignature_method: 'HMAC-SHA1',\n\thash_function: (baseString, key) => crypto.createHmac('sha1', key).update(baseString).digest('base64')\n});\n\nconst token = {\n\tkey: process.env.ACCESS_TOKEN,\n\tsecret: process.env.ACCESS_TOKEN_SECRET\n};\n\nconst url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';\n\ngot(url, {\n\theaders: oauth.toHeader(oauth.authorize({url, method: 'GET'}, token)),\n\tresponseType: 'json'\n});\n```\n\n\n## Unix Domain Sockets\n\nRequests can also be sent via [unix domain sockets](http://serverfault.com/questions/124517/whats-the-difference-between-unix-socket-and-tcp-ip-socket). Use the following URL scheme: `PROTOCOL://unix:SOCKET:PATH`.\n\n- `PROTOCOL` - `http` or `https` *(optional)*\n- `SOCKET` - Absolute path to a unix domain socket, for example: `/var/run/docker.sock`\n- `PATH` - Request path, for example: `/v2/keys`\n\n```js\ngot('http://unix:/var/run/docker.sock:/containers/json');\n\n// Or without protocol (HTTP by default)\ngot('unix:/var/run/docker.sock:/containers/json');\n```\n\n\n## AWS\n\nRequests to AWS services need to have their headers signed. This can be accomplished by using the [`aws4`](https://www.npmjs.com/package/aws4) package. This is an example for querying an [\"API Gateway\"](https://docs.aws.amazon.com/apigateway/api-reference/signing-requests/) with a signed request.\n\n```js\nconst got = require('got');\nconst AWS = require('aws-sdk');\nconst aws4 = require('aws4');\n\nconst chain = new AWS.CredentialProviderChain();\n\n// Create a Got instance to use relative paths and signed requests\nconst awsClient = got.extend({\n\tprefixUrl: 'https://<api-id>.execute-api.<api-region>.amazonaws.com/<stage>/',\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\tasync options => {\n\t\t\t\tconst credentials = await chain.resolvePromise();\n\t\t\t\taws4.sign(options, credentials);\n\t\t\t}\n\t\t]\n\t}\n});\n\nconst response = await awsClient('endpoint/path', {\n\t// Request-specific options\n});\n```\n\n\n## Testing\n\nYou can test your requests by using the [`nock`](https://github.com/node-nock/nock) package to mock an endpoint:\n\n```js\nconst got = require('got');\nconst nock = require('nock');\n\nnock('https://sindresorhus.com')\n\t.get('/')\n\t.reply(200, 'Hello world!');\n\n(async () => {\n\tconst response = await got('https://sindresorhus.com');\n\tconsole.log(response.body);\n\t//=> 'Hello world!'\n})();\n```\n\nFor real integration testing we recommend using [`ava`](https://github.com/avajs/ava) with [`create-test-server`](https://github.com/lukechilds/create-test-server). We're using a macro so we don't have to `server.listen()` and `server.close()` every test. Take a look at one of our tests:\n\n```js\ntest('retry function gets iteration count', withServer, async (t, server, got) => {\n\tlet knocks = 0;\n\tserver.get('/', (request, response) => {\n\t\tif (knocks++ === 1) {\n\t\t\tresponse.end('who`s there?');\n\t\t}\n\t});\n\n\tawait got({\n\t\tretry: {\n\t\t\tcalculateDelay: ({attemptCount}) => {\n\t\t\t\tt.true(is.number(attemptCount));\n\t\t\t\treturn attemptCount < 2;\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\n\n## Tips\n\n### JSON mode\n\nTo pass an object as the body, you need to use the `json` option. It will be stringified using `JSON.stringify`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst {body} = await got.post('https://httpbin.org/anything', {\n\t\tjson: {\n\t\t\thello: 'world'\n\t\t},\n\t\tresponseType: 'json'\n\t});\n\n\tconsole.log(body.data);\n\t//=> '{\"hello\":\"world\"}'\n})();\n```\n\nTo receive a JSON body you can either set `responseType` option to `json` or use `promise.json()`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst {body} = await got.post('https://httpbin.org/anything', {\n\t\tbody: {\n\t\t\thello: 'world'\n\t\t}\n\t}).json();\n\n\tconsole.log(body);\n\t//=> {…}\n})();\n```\n\n### User Agent\n\nIt's a good idea to set the `'user-agent'` header so the provider can more easily see how their resource is used. By default, it's the URL to this repo. You can omit this header by setting it to `null`.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': null\n\t}\n});\n```\n\n### 304 Responses\n\nBear in mind; if you send an `if-modified-since` header and receive a `304 Not Modified` response, the body will be empty. It's your responsibility to cache and retrieve the body contents.\n\n### Custom endpoints\n\nUse `got.extend()` to make it nicer to work with REST APIs. Especially if you use the `prefixUrl` option.\n\n**Note:** Not to be confused with [`got.create()`](documentation/advanced-creation.md), which has no defaults.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\nconst custom = got.extend({\n\tprefixUrl: 'example.com',\n\tresponseType: 'json',\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\n// Use `custom` exactly how you use `got`\n(async () => {\n\tconst list = await custom('/v1/users/list');\n})();\n```\n\n### Experimental HTTP2 support\n\nGot provides an experimental support for HTTP2 using the [`http2-wrapper`](https://github.com/szmarczak/http2-wrapper) package:\n\n```js\nconst got = require('got');\nconst {request} = require('http2-wrapper');\n\nconst h2got = got.extend({request});\n\n(async () => {\n\tconst {body} = await h2got('https://nghttp2.org/httpbin/headers');\n\tconsole.log(body);\n})();\n```\n\n## Comparison\n\n|                       |       `got`      | [`request`][r0] |  [`node-fetch`][n0]  |    [`ky`][k0]     |  [`axios`][a0]   |  [`superagent`][s0]  |\n|-----------------------|:----------------:|:---------------:|:--------------------:|:-----------------:|:----------------:|:--------------------:|\n| HTTP/2 support        |        ❔        |        ❌       |          ❌         |         ❌        |        ❌       |          ✔️\\*\\*      |\n| Browser support       |        ❌       |        ❌       |          ✔️\\*       |         ✔️        |        ✔️       |          ✔️          |\n| Electron support      |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Promise API           |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Stream API            |        ✔️       |        ✔️       |     Node.js only     |         ❌        |        ❌       |          ✔️          |\n| Request cancelation   |        ✔️       |        ❌       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| RFC compliant caching |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Cookies (out-of-box)  |        ✔️       |        ✔️       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Follows redirects     |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Retries on failure    |        ✔️       |        ❌       |          ❌         |         ✔️        |        ❌       |          ✔️          |\n| Progress events       |        ✔️       |        ❌       |          ❌         |         ✔️\\*\\*\\*  |   Browser only   |          ✔️          |\n| Handles gzip/deflate  |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Advanced timeouts     |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Timings               |        ✔️       |        ✔️       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Errors with metadata  |        ✔️       |        ❌       |          ❌         |         ✔️        |        ✔️       |          ❌          |\n| JSON mode             |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Custom defaults       |        ✔️       |        ✔️       |          ❌         |         ✔️        |        ✔️       |          ❌          |\n| Composable            |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ✔️          |\n| Hooks                 |        ✔️       |        ❌       |          ❌         |         ✔️        |        ✔️       |          ❌          |\n| Issues open           |  [![][gio]][g1]  | [![][rio]][r1]  |    [![][nio]][n1]    |   [![][kio]][k1]  |  [![][aio]][a1] |    [![][sio]][s1]     |\n| Issues closed         |  [![][gic]][g2]  | [![][ric]][r2]  |    [![][nic]][n2]    |   [![][kic]][k2]  |  [![][aic]][a2] |    [![][sic]][s2]     |\n| Downloads             |  [![][gd]][g3]   |  [![][rd]][r3]  |    [![][nd]][n3]     |   [![][kd]][k3]   |  [![][ad]][a3]  |    [![][sd]][s3]      |\n| Coverage              |  [![][gc]][g4]   |  [![][rc]][r4]  |    [![][nc]][n4]     |   [![][kc]][k4]   |  [![][ac]][a4]  |    [![][sc]][s4]      |\n| Build                 |  [![][gb]][g5]   |  [![][rb]][r5]  |    [![][nb]][n5]     |   [![][kb]][k5]   |  [![][ab]][a5]  |    [![][sb]][s5]      |\n| Bugs                  |  [![][gbg]][g6]  | [![][rbg]][r6]  |    [![][nbg]][n6]    |   [![][kbg]][k6]  |  [![][abg]][a6] |    [![][sbg]][s6]     |\n| Dependents            |  [![][gdp]][g7]  | [![][rdp]][r7]  |    [![][ndp]][n7]    |   [![][kdp]][k7]  |  [![][adp]][a7] |    [![][sdp]][s7]     |\n| Install size          |  [![][gis]][g8]  | [![][ris]][r8]  |    [![][nis]][n8]    |   [![][kis]][k8]  |  [![][ais]][a8] |    [![][sis]][s8]     |\n\n\\* It's almost API compatible with the browser `fetch` API.<br>\n\\*\\* Need to switch the protocol manually.<br>\n\\*\\*\\* Currently, only 'DownloadProgress' event is supported, 'UploadProgress' event is not supported.<br>\n❔ Experimental support.\n\n<!-- GITHUB -->\n[k0]: https://github.com/sindresorhus/ky\n[r0]: https://github.com/request/request\n[n0]: https://github.com/bitinn/node-fetch\n[a0]: https://github.com/axios/axios\n[s0]: https://github.com/visionmedia/superagent\n\n<!-- ISSUES OPEN -->\n[gio]: https://badgen.net/github/open-issues/sindresorhus/got?label\n[kio]: https://badgen.net/github/open-issues/sindresorhus/ky?label\n[rio]: https://badgen.net/github/open-issues/request/request?label\n[nio]: https://badgen.net/github/open-issues/bitinn/node-fetch?label\n[aio]: https://badgen.net/github/open-issues/axios/axios?label\n[sio]: https://badgen.net/github/open-issues/visionmedia/superagent?label\n\n[g1]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[k1]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[r1]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[n1]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[a1]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[s1]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n\n<!-- ISSUES CLOSED -->\n[gic]: https://badgen.net/github/closed-issues/sindresorhus/got?label\n[kic]: https://badgen.net/github/closed-issues/sindresorhus/ky?label\n[ric]: https://badgen.net/github/closed-issues/request/request?label\n[nic]: https://badgen.net/github/closed-issues/bitinn/node-fetch?label\n[aic]: https://badgen.net/github/closed-issues/axios/axios?label\n[sic]: https://badgen.net/github/closed-issues/visionmedia/superagent?label\n\n[g2]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[k2]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[r2]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[n2]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[a2]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[s2]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n\n<!-- DOWNLOADS -->\n[gd]: https://badgen.net/npm/dm/got?label\n[kd]: https://badgen.net/npm/dm/ky?label\n[rd]: https://badgen.net/npm/dm/request?label\n[nd]: https://badgen.net/npm/dm/node-fetch?label\n[ad]: https://badgen.net/npm/dm/axios?label\n[sd]: https://badgen.net/npm/dm/superagent?label\n\n[g3]: https://www.npmjs.com/package/got\n[k3]: https://www.npmjs.com/package/ky\n[r3]: https://www.npmjs.com/package/request\n[n3]: https://www.npmjs.com/package/node-fetch\n[a3]: https://www.npmjs.com/package/axios\n[s3]: https://www.npmjs.com/package/superagent\n\n<!-- COVERAGE -->\n[gc]: https://badgen.net/coveralls/c/github/sindresorhus/got?label\n[kc]: https://badgen.net/codecov/c/github/sindresorhus/ky?label\n[rc]: https://badgen.net/coveralls/c/github/request/request?label\n[nc]: https://badgen.net/coveralls/c/github/bitinn/node-fetch?label\n[ac]: https://badgen.net/coveralls/c/github/mzabriskie/axios?label\n[sc]: https://badgen.net/codecov/c/github/visionmedia/superagent?label\n\n[g4]: https://coveralls.io/github/sindresorhus/got\n[k4]: https://codecov.io/gh/sindresorhus/ky\n[r4]: https://coveralls.io/github/request/request\n[n4]: https://coveralls.io/github/bitinn/node-fetch\n[a4]: https://coveralls.io/github/mzabriskie/axios\n[s4]: https://codecov.io/gh/visionmedia/superagent\n\n<!-- BUILD -->\n[gb]: https://badgen.net/travis/sindresorhus/got?label\n[kb]: https://badgen.net/travis/sindresorhus/ky?label\n[rb]: https://badgen.net/travis/request/request?label\n[nb]: https://badgen.net/travis/bitinn/node-fetch?label\n[ab]: https://badgen.net/travis/axios/axios?label\n[sb]: https://badgen.net/travis/visionmedia/superagent?label\n\n[g5]: https://travis-ci.org/sindresorhus/got\n[k5]: https://travis-ci.org/sindresorhus/ky\n[r5]: https://travis-ci.org/request/request\n[n5]: https://travis-ci.org/bitinn/node-fetch\n[a5]: https://travis-ci.org/axios/axios\n[s5]: https://travis-ci.org/visionmedia/superagent\n\n<!-- BUGS -->\n[gbg]: https://badgen.net/github/label-issues/sindresorhus/got/bug/open?label\n[kbg]: https://badgen.net/github/label-issues/sindresorhus/ky/bug/open?label\n[rbg]: https://badgen.net/github/label-issues/request/request/Needs%20investigation/open?label\n[nbg]: https://badgen.net/github/label-issues/bitinn/node-fetch/bug/open?label\n[abg]: https://badgen.net/github/label-issues/axios/axios/type:bug/open?label\n[sbg]: https://badgen.net/github/label-issues/visionmedia/superagent/Bug/open?label\n\n[g6]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[k6]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[r6]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A\"Needs+investigation\"\n[n6]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[a6]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Atype:bug\n[s6]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3ABug\n\n<!-- DEPENDENTS -->\n[gdp]: https://badgen.net/npm/dependents/got?label\n[kdp]: https://badgen.net/npm/dependents/ky?label\n[rdp]: https://badgen.net/npm/dependents/request?label\n[ndp]: https://badgen.net/npm/dependents/node-fetch?label\n[adp]: https://badgen.net/npm/dependents/axios?label\n[sdp]: https://badgen.net/npm/dependents/superagent?label\n\n[g7]: https://www.npmjs.com/package/got?activeTab=dependents\n[k7]: https://www.npmjs.com/package/ky?activeTab=dependents\n[r7]: https://www.npmjs.com/package/request?activeTab=dependents\n[n7]: https://www.npmjs.com/package/node-fetch?activeTab=dependents\n[a7]: https://www.npmjs.com/package/axios?activeTab=dependents\n[s7]: https://www.npmjs.com/package/visionmedia?activeTab=dependents\n\n<!-- INSTALL SIZE -->\n[gis]: https://badgen.net/packagephobia/install/got?label\n[kis]: https://badgen.net/packagephobia/install/ky?label\n[ris]: https://badgen.net/packagephobia/install/request?label\n[nis]: https://badgen.net/packagephobia/install/node-fetch?label\n[ais]: https://badgen.net/packagephobia/install/axios?label\n[sis]: https://badgen.net/packagephobia/install/superagent?label\n\n[g8]: https://packagephobia.now.sh/result?p=got\n[k8]: https://packagephobia.now.sh/result?p=ky\n[r8]: https://packagephobia.now.sh/result?p=request\n[n8]: https://packagephobia.now.sh/result?p=node-fetch\n[a8]: https://packagephobia.now.sh/result?p=axios\n[s8]: https://packagephobia.now.sh/result?p=superagent\n\n#### Install size of the dependencies\n\n|                   Dependency                   |          Install size         |\n|------------------------------------------------|-------------------------------|\n| [@sindresorhus/is][url-is]                     | ![][size-is]                  |\n| [@szmarczak/http-timer][url-http-timer]        | ![][size-http-timer]          |\n| [cacheable-request][url-cacheable-request]     | ![][size-cacheable-request]   |\n| [decompress-response][url-decompress-response] | ![][size-decompress-response] |\n| [duplexer3][url-duplexer3]                     | ![][size-duplexer3]           |\n| [get-stream][url-get-stream]                   | ![][size-get-stream]          |\n| [lowercase-keys][url-lowercase-keys]           | ![][size-lowercase-keys]      |\n| [mimic-response][url-mimic-response]           | ![][size-mimic-response]      |\n| [p-cancelable][url-p-cancelable]               | ![][size-p-cancelable]        |\n| [to-readable-stream][url-to-readable-stream]   | ![][size-to-readable-stream]  |\n|                                                | ![][gis]                      |\n\n[size-is]: https://badgen.net/packagephobia/install/@sindresorhus/is?label\n[size-http-timer]: https://badgen.net/packagephobia/install/@szmarczak/http-timer?label\n[size-cacheable-request]: https://badgen.net/packagephobia/install/cacheable-request?label\n[size-decompress-response]: https://badgen.net/packagephobia/install/decompress-response?label\n[size-duplexer3]: https://badgen.net/packagephobia/install/duplexer3?label\n[size-get-stream]: https://badgen.net/packagephobia/install/get-stream?label\n[size-lowercase-keys]: https://badgen.net/packagephobia/install/lowercase-keys?label\n[size-mimic-response]: https://badgen.net/packagephobia/install/mimic-response?label\n[size-p-cancelable]: https://badgen.net/packagephobia/install/p-cancelable?label\n[size-to-readable-stream]: https://badgen.net/packagephobia/install/to-readable-stream?label\n\n[url-is]: https://github.com/sindresorhus/is\n[url-http-timer]: https://github.com/szmarczak/http-timer\n[url-cacheable-request]: https://github.com/lukechilds/cacheable-request\n[url-decompress-response]: https://github.com/sindresorhus/decompress-response\n[url-duplexer3]: https://github.com/floatdrop/duplexer3\n[url-get-stream]: https://github.com/sindresorhus/get-stream\n[url-lowercase-keys]: https://github.com/sindresorhus/lowercase-keys\n[url-mimic-response]: https://github.com/sindresorhus/mimic-response\n[url-p-cancelable]: https://github.com/sindresorhus/p-cancelable\n[url-to-readable-stream]: https://github.com/sindresorhus/to-readable-stream\n\n## Related\n\n- [gh-got](https://github.com/sindresorhus/gh-got) - Got convenience wrapper to interact with the GitHub API\n- [gl-got](https://github.com/singapore/gl-got) - Got convenience wrapper to interact with the GitLab API\n- [travis-got](https://github.com/samverschueren/travis-got) - Got convenience wrapper to interact with the Travis API\n- [graphql-got](https://github.com/kevva/graphql-got) - Got convenience wrapper to interact with GraphQL\n- [GotQL](https://github.com/khaosdoctor/gotql) - Got convenience wrapper to interact with GraphQL using JSON-parsed queries instead of strings\n- [got-fetch](https://github.com/alexghr/got-fetch) - Got with a `fetch` interface\n\n\n## Maintainers\n\n[![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://sindresorhus.com) | [![Szymon Marczak](https://github.com/szmarczak.png?size=100)](https://github.com/szmarczak) | [![Alexander Tesfamichael](https://github.com/AlexTes.png?size=100)](https://github.com/AlexTes) | [![Brandon Smith](https://github.com/brandon93s.png?size=100)](https://github.com/brandon93s) | [![Luke Childs](https://github.com/lukechilds.png?size=100)](https://github.com/lukechilds)\n---|---|---|---|---\n[Sindre Sorhus](https://sindresorhus.com) | [Szymon Marczak](https://github.com/szmarczak) | [Alexander Tesfamichael](https://alextes.me) | [Brandon Smith](https://github.com/brandon93s) | [Luke Childs](https://github.com/lukechilds)\n\n###### Former\n\n- [Vsevolod Strukchinsky](https://github.com/floatdrop)\n\n\n---\n\n<div align=\"center\">\n\t<b>\n\t\t<a href=\"https://tidelift.com/subscription/pkg/npm-got?utm_source=npm-got&utm_medium=referral&utm_campaign=readme\">Get professional support for this package with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n","types":"dist/source","browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","babel":false,"compileEnhancements":false,"extensions":["ts"],"require":["ts-node/register"]},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"rules":{"@typescript-eslint/explicit-function-return-type":"off","@typescript-eslint/promise-function-async":"off","@typescript-eslint/strict-boolean-expressions":"off","@typescript-eslint/no-unnecessary-condition":"off"},"ignores":["documentation/examples/*"]},"readmeFilename":"readme.md","gitHead":"72390c2dfb79f7ee0012d6ba264faff638248e47","_nodeVersion":"12.13.0","_npmVersion":"6.9.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.0.0-alpha.3.1_1572638587396_0.08332064511598225"},"_hasShrinkwrap":false},"10.0.0-alpha.3.2":{"_id":"got@10.0.0-alpha.3.2","name":"got","description":"Simplified HTTP requests","version":"10.0.0-alpha.3.2","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron","brotli"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && nyc ava && tsc --noEmit","release":"np","build":"del-cli dist && tsc"},"directories":{},"devDependencies":{"@sindresorhus/tsconfig":"^0.5.0","@types/duplexer3":"^0.1.0","@types/node":"^12.7.5","@types/sinon":"^7.0.13","@typescript-eslint/eslint-plugin":"^2.3.1","@typescript-eslint/parser":"^2.3.1","ava":"^2.4.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.19.0","form-data":"^2.5.1","get-port":"^5.0.0","keyv":"^3.1.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.0.3","nyc":"^14.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^7.5.0","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","ts-node":"^8.4.1","typescript":"^3.6.4","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^2.0.0","@types/cacheable-request":"^6.0.1","@types/tough-cookie":"^2.3.5","cacheable-lookup":"^0.2.1","cacheable-request":"^7.0.0","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.8.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"4099e4a68ecdb1c44fec9116018ff3dab118e86b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.0.0-alpha.3.2.tgz"},"readme":"<div align=\"center\">\n\t<br>\n\t<br>\n\t<img width=\"360\" src=\"media/logo.svg\" alt=\"Got\">\n\t<br>\n\t<br>\n\t<br>\n\t<p align=\"center\">Huge thanks to <a href=\"https://moxy.studio\"><img src=\"https://sindresorhus.com/assets/thanks/moxy-logo.svg\" width=\"150\"></a> for sponsoring Sindre Sorhus!\n\t</p>\n\t<br>\n\t<br>\n</div>\n\n> Simplified HTTP requests\n\n[![Build Status: Linux](https://travis-ci.org/sindresorhus/got.svg?branch=master)](https://travis-ci.org/sindresorhus/got)\n[![Coverage Status](https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/got?branch=master)\n[![Downloads](https://img.shields.io/npm/dm/got.svg)](https://npmjs.com/got)\n[![Install size](https://packagephobia.now.sh/badge?p=got)](https://packagephobia.now.sh/result?p=got)\n\nGot is a human-friendly and powerful HTTP request library.\n\nIt was created because the popular [`request`](https://github.com/request/request) package is bloated: [![Install size](https://packagephobia.now.sh/badge?p=request)](https://packagephobia.now.sh/result?p=request)\n\nGot is for Node.js. For browsers, we recommend [Ky](https://github.com/sindresorhus/ky).\n\n**This readme reflects the next major version that is currently in development. You probably want [the v9 readme](https://www.npmjs.com/package/got).**\n\n\n## Highlights\n\n- [Promise & stream API](#api)\n- [Request cancelation](#aborting-the-request)\n- [RFC compliant caching](#cache-adapters)\n- [Follows redirects](#followredirect)\n- [Retries on failure](#retry)\n- [Progress events](#onuploadprogress-progress)\n- [Handles gzip/deflate/brotli](#decompress)\n- [Timeout handling](#timeout)\n- [Errors with metadata](#errors)\n- [JSON mode](#json-mode)\n- [WHATWG URL support](#url)\n- [Hooks](#hooks)\n- [Instances with custom defaults](#instances)\n- [Composable](documentation/advanced-creation.md#merging-instances)\n- [Plugins](documentation/lets-make-a-plugin.md)\n- [Electron support](#useelectronnet)\n- [Used by 3000+ packages and 1.4M+ repos](https://github.com/sindresorhus/got/network/dependents)\n- Actively maintained\n\n[Moving from Request?](documentation/migration-guides.md)\n\n[See how Got compares to other HTTP libraries](#comparison)\n\n## Install\n\n```\n$ npm install got\n```\n\n\n## Usage\n\n```js\nconst got = require('got');\n\n(async () => {\n\ttry {\n\t\tconst response = await got('https://sindresorhus.com');\n\t\tconsole.log(response.body);\n\t\t//=> '<!doctype html> ...'\n\t} catch (error) {\n\t\tconsole.log(error.response.body);\n\t\t//=> 'Internal server error ...'\n\t}\n})();\n```\n\n###### Streams\n\n```js\nconst stream = require('stream');\nconst {promisify} = require('util');\nconst fs = require('fs');\nconst got = require('got');\n\nconst pipeline = promisify(stream.pipeline);\n\n(async () => {\n    await pipeline(\n        got.stream('https://sindresorhus.com'),\n        fs.createWriteStream('index.html')\n    );\n\n    // For POST, PUT, and PATCH methods `got.stream` returns a `stream.Writable`\n    await pipeline(\n        fs.createReadStream('index.html'),\n        got.stream.post('https://sindresorhus.com')\n    );\n})();\n```\n\n**Tip:** Using `from.pipe(to)` doesn't forward errors. If you use it, switch to [`Stream.pipeline(from, ..., to, callback)`](https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback) instead (available from Node v10).\n\n### API\n\nIt's a `GET` request by default, but can be changed by using different methods or via `options.method`.\n\n#### got([url], [options])\n\nReturns a Promise for a [`response` object](#response) or a [stream](#streams-1) if `options.stream` is set to true.\n\n##### url\n\nType: `string | object`\n\nThe URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\nProperties from `options` will override properties in the parsed `url`.\n\nIf no protocol is specified, it will throw a `TypeError`.\n\n**Note:** this can also be an option.\n\n##### options\n\nType: `object`\n\nAny of the [`https.request`](https://nodejs.org/api/https.html#https_https_request_options_callback) options.\n\n###### prefixUrl\n\nType: `string | URL`\n\nWhen specified, `prefixUrl` will be prepended to `url`. The prefix can be any valid URL, either relative or absolute. A trailing slash `/` is optional, one will be added automatically, if needed, when joining `prefixUrl` and `url`. The `url` argument cannot start with a `/` when using this option.\n\nUseful when used with `got.extend()` to create niche-specific Got-instances.\n\n**Note:** `prefixUrl` will be ignored if the `url` argument is a URL instance.\n\n```js\nconst got = require('got');\n\n(async () => {\n\tawait got('unicorn', {prefixUrl: 'https://cats.com'});\n\t//=> 'https://cats.com/unicorn'\n})();\n```\n\n###### headers\n\nType: `object`<br>\nDefault: `{}`\n\nRequest headers.\n\nExisting headers will be overwritten. Headers set to `null` will be omitted.\n\n###### stream\n\nType: `boolean`<br>\nDefault: `false`\n\nReturns a `Stream` instead of a `Promise`. This is equivalent to calling `got.stream(url, [options])`.\n\n###### body\n\nType: `string | Buffer | stream.Readable` or [`form-data` instance](https://github.com/form-data/form-data)\n\n**Note:** The `body` option cannot be used with the `json` or `form` option.\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nIf present in `options` and `options.method` is not set, it will throw a `TypeError`.\n\nThe `content-length` header will be automatically set if `body` is a `string` / `Buffer` / `fs.createReadStream` instance / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n\n###### json\n\nType: `object | Array | number | string | boolean | null` *(JSON-serializable values)*\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nJSON body. If the `Content-Type` header is not set, it will be set to `application/json`.\n\n###### context\n\nType: `object`\n\nUser data. In contrast to other options, `context` is not enumerable.\n\n**Note:** The object is never merged, it's just passed through. Got will not modify the object in any way.\n\nIt's very useful for storing auth tokens:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\toptions => {\n\t\t\t\tif (!options.context && !options.context.token) {\n\t\t\t\t\tthrow new Error('Token required');\n\t\t\t\t}\n\n\t\t\t\toptions.headers.token = options.context.token;\n\t\t\t}\n\t\t]\n\t}\n});\n\n(async () => {\n\tconst context = {\n\t\ttoken: 'secret'\n\t};\n\n\tconst response = await instance('https://httpbin.org/headers', {context});\n\n\t// Let's see the headers\n\tconsole.log(response.body);\n})();\n```\n\n###### responseType\n\nType: `string`<br>\nDefault: `text`\n\n**Note:** When using streams, this option is ignored.\n\nParsing method used to retrieve the body from the response. Can be `text`, `json` or `buffer`. The promise has `.json()` and `.buffer()` and `.text()` functions which set this option automatically.\n\nExample:\n\n```js\nconst {body} = await got(url).json();\n```\n\n###### resolveBodyOnly\n\nType: `string`<br>\nDefault: `false`\n\nWhen set to `true` the promise will return the [Response body](#body-1) instead of the [Response](#response) object.\n\n###### cookieJar\n\nType: [`tough.CookieJar` instance](https://github.com/salesforce/tough-cookie#cookiejar)\n\n**Note:** If you provide this option, `options.headers.cookie` will be overridden.\n\nCookie support. You don't have to care about parsing or how to store them. [Example.](#cookies)\n\n###### ignoreInvalidCookies\n\nType: `boolean`<br>\nDefault: `false`\n\nIgnore invalid cookies instead of throwing an error. Only useful when the `cookieJar` option has been set. Not recommended.\n\n###### encoding\n\nType: `string | null`<br>\nDefault: `'utf8'`\n\n[Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data. If `null`, the body is returned as a [`Buffer`](https://nodejs.org/api/buffer.html) (binary data).\n\n###### form\n\nType: `object | true`\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nThe form body is converted to query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n\nIf set to `true` and the `Content-Type` header is not set, it will be set to `application/x-www-form-urlencoded`.\n\n###### searchParams\n\nType: `string | object<string, string | number> | URLSearchParams`\n\n**Note:** The `query` option was renamed to `searchParams` in Got v10. The `query` option name is still functional, but is being deprecated and will be completely removed in Got v11.\n\nQuery string that will be added to the request URL. This will override the query string in `url`.\n\nIf you need to pass in an array, you can do it using a `URLSearchParams` instance:\n\n```js\nconst got = require('got');\n\nconst searchParams = new URLSearchParams([['key', 'a'], ['key', 'b']]);\n\ngot('https://example.com', {searchParams});\n\nconsole.log(searchParams.toString());\n//=> 'key=a&key=b'\n```\n\nAnd if you need a different array format, you could use the [`query-string`](https://github.com/sindresorhus/query-string) package:\n\n```js\nconst got = require('got');\nconst queryString = require('query-string');\n\nconst searchParams = queryString.stringify({key: ['a', 'b']}, {arrayFormat: 'bracket'});\n\ngot('https://example.com', {searchParams});\n\nconsole.log(searchParams);\n//=> 'key[]=a&key[]=b'\n```\n\n###### timeout\n\nType: `number | object`\n\nMilliseconds to wait for the server to end the response before aborting the request with [`got.TimeoutError`](#gottimeouterror) error (a.k.a. `request` property). By default, there's no timeout.\n\nThis also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n\n- `lookup` starts when a socket is assigned and ends when the hostname has been resolved. Does not apply when using a Unix domain socket.\n- `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n- `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n- `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n- `response` starts when the request has been written to the socket and ends when the response headers are received.\n- `send` starts when the socket is connected and ends with the request has been written to the socket.\n- `request` starts when the request is initiated and ends when the response's end event fires.\n\n###### retry\n\nType: `number | object`<br>\nDefault:\n- limit: `2`\n- calculateDelay: `(attemptCount, retryOptions, error, computedValue) => computedValue`\n- methods: `GET` `PUT` `HEAD` `DELETE` `OPTIONS` `TRACE`\n- statusCodes: [`408`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408) [`413`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413) [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) [`500`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500) [`502`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502) [`503`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503) [`504`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504)\n- maxRetryAfter: `undefined`\n- errorCodes: `ETIMEDOUT` `ECONNRESET` `EADDRINUSE` `ECONNREFUSED` `EPIPE` `ENOTFOUND` `ENETUNREACH` `EAI_AGAIN`\n\nAn object representing `limit`, `calculateDelay`, `methods`, `statusCodes`, `maxRetryAfter` and `errorCodes` fields for maximum retry count, retry handler, allowed methods, allowed status codes, maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time and allowed error codes.\n\n**Note:** When using streams, this option is ignored.\n\nIf `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.<br>\nIf [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n\nDelays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 1).\n\nThe `calculateDelay` property is a `function` with `attemptCount`, `retryOptions`, `error` and `computedValue` arguments for current retry count, the retry options, error and default computed value. The function must return a delay in milliseconds (`0` return value cancels retry).\n\nBy default, it retries *only* on the specified methods, status codes, and on these network errors:\n- `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n- `ECONNRESET`: Connection was forcibly closed by a peer.\n- `EADDRINUSE`: Could not bind to any free port.\n- `ECONNREFUSED`: Connection was refused by the server.\n- `EPIPE`: The remote side of the stream being written has been closed.\n- `ENOTFOUND`: Couldn't resolve the hostname to an IP address.\n- `ENETUNREACH`: No internet connection.\n- `EAI_AGAIN`: DNS lookup timed out.\n\n###### followRedirect\n\nType: `boolean`<br>\nDefault: `true`\n\nDefines if redirect responses should be followed automatically.\n\nNote that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`. This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4).\n\n###### decompress\n\nType: `boolean`<br>\nDefault: `true`\n\nDecompress the response automatically. This will set the `accept-encoding` header to `gzip, deflate, br` on Node.js 11.7.0+ or `gzip, deflate` for older Node.js versions, unless you set it yourself.\n\nBrotli (`br`) support requires Node.js 11.7.0 or later.\n\nIf this is disabled, a compressed response is returned as a `Buffer`. This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n\n###### cache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached response data.\n\n###### dnsCache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached DNS data.\n\n###### request\n\nType: `Function`<br>\nDefault: `http.request` `https.request` *(Depending on the protocol)*\n\nCustom request function. The main purpose of this is to [support HTTP2 using a wrapper](#experimental-http2-support).\n\n###### useElectronNet\n\nType: `boolean`<br>\nDefault: `false`\n\nWhen used in Electron, Got will use [`electron.net`](https://electronjs.org/docs/api/net/) instead of the Node.js `http` module. According to the Electron docs, it should be fully compatible, but it's not entirely. See [#443](https://github.com/sindresorhus/got/issues/443) and [#461](https://github.com/sindresorhus/got/issues/461).\n\n###### throwHttpErrors\n\nType: `boolean`<br>\nDefault: `true`\n\nDetermines if a `got.HTTPError` is thrown for error responses (non-2xx status codes).\n\nIf this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing. This may be useful if you are checking for resource availability and are expecting error responses.\n\n###### agent\n\nSame as the [`agent` option](https://nodejs.org/api/http.html#http_http_request_url_options_callback) for `http.request`, but with an extra feature:\n\nIf you require different agents for different protocols, you can pass a map of agents to the `agent` option. This is necessary because a request to one protocol might redirect to another. In such a scenario, Got will switch over to the right protocol agent for you.\n\n```js\nconst got = require('got');\nconst HttpAgent = require('agentkeepalive');\nconst {HttpsAgent} = HttpAgent;\n\ngot('https://sindresorhus.com', {\n\tagent: {\n\t\thttp: new HttpAgent(),\n\t\thttps: new HttpsAgent()\n\t}\n});\n```\n\n###### hooks\n\nType: `object<string, Function[]>`\n\nHooks allow modifications during the request lifecycle. Hook functions may be async and are run serially.\n\n###### hooks.init\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with plain [request options](#options), right before their normalization. This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when the input needs custom handling.\n\nSee the [Request migration guide](documentation/migration-guides.md#breaking-changes) for an example.\n\n**Note:** This hook must be synchronous!\n\n###### hooks.beforeRequest\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options). Got will make no further changes to the request before it is sent (except the body serialization). This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when you want to create an API client that, for example, uses HMAC-signing.\n\nSee the [AWS section](#aws) for an example.\n\n###### hooks.beforeRedirect\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options) and the redirect [response](#response). Got will make no further changes to the request. This is especially useful when you want to avoid dead sites. Example:\n\n```js\nconst got = require('got');\n\ngot('https://example.com', {\n\thooks: {\n\t\tbeforeRedirect: [\n\t\t\t(options, response) => {\n\t\t\t\tif (options.hostname === 'deadSite') {\n\t\t\t\t\toptions.hostname = 'fallbackSite';\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.beforeRetry\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options), the error and the retry count. Got will make no further changes to the request. This is especially useful when some extra work is required before the next try. Example:\n\n```js\nconst got = require('got');\n\ngot.post('https://example.com', {\n\thooks: {\n\t\tbeforeRetry: [\n\t\t\t(options, error, retryCount) => {\n\t\t\t\tif (error.statusCode === 413) { // Payload too large\n\t\t\t\t\toptions.body = getNewBody();\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.afterResponse\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [response object](#response) and a retry function.\n\nEach function should return the response. This is especially useful when you want to refresh an access token. Example:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tafterResponse: [\n\t\t\t(response, retryWithMergedOptions) => {\n\t\t\t\tif (response.statusCode === 401) { // Unauthorized\n\t\t\t\t\tconst updatedOptions = {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\ttoken: getNewToken() // Refresh the access token\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Save for further requests\n\t\t\t\t\tinstance.defaults.options = got.mergeOptions(instance.defaults.options, updatedOptions);\n\n\t\t\t\t\t// Make a new retry\n\t\t\t\t\treturn retryWithMergedOptions(updatedOptions);\n\t\t\t\t}\n\n\t\t\t\t// No changes otherwise\n\t\t\t\treturn response;\n\t\t\t}\n\t\t]\n\t},\n\tmutableDefaults: true\n});\n```\n\n###### hooks.beforeError\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with an `Error` instance. The error is passed to the hook right before it's thrown. This is especially useful when you want to have more detailed errors.\n\n**Note:** Errors thrown while normalizing input options are thrown directly and not part of this hook.\n\n```js\nconst got = require('got');\n\ngot('https://api.github.com/some-endpoint', {\n\thooks: {\n\t\tbeforeError: [\n\t\t\terror => {\n\t\t\t\tconst {response} = error;\n \t\t\t\tif (response && response.body) {\n\t\t\t\t\terror.name = 'GitHubError';\n\t\t\t\t\terror.message = `${response.body.message} (${error.statusCode})`;\n\t\t\t\t}\n\n \t\t\t\treturn error;\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n#### Response\n\nThe response object will typically be a [Node.js HTTP response stream](https://nodejs.org/api/http.html#http_class_http_incomingmessage), however, if returned from the cache it will be a [response-like object](https://github.com/lukechilds/responselike) which behaves in the same way.\n\n##### request\n\nType: `object`\n\n**Note:** This is not a [http.ClientRequest](https://nodejs.org/api/http.html#http_class_http_clientrequest).\n\n- `options` - The Got options that were set on this request.\n\n##### body\n\nType: `string | object | Buffer` *(Depending on `options.responseType`)*\n\nThe result of the request.\n\n##### url\n\nType: `string`\n\nThe request URL or the final URL after redirects.\n\n##### ip\n\nType: `string`\n\nThe remote IP address.\n\n**Note:** Not available when the response is cached. This is hopefully a temporary limitation, see [lukechilds/cacheable-request#86](https://github.com/lukechilds/cacheable-request/issues/86).\n\n##### requestUrl\n\nType: `string`\n\nThe original request URL.\n\n##### timings\n\nType: `object`\n\nThe object contains the following properties:\n\n- `start` - Time when the request started.\n- `socket` - Time when a socket was assigned to the request.\n- `lookup` - Time when the DNS lookup finished.\n- `connect` - Time when the socket successfully connected.\n- `upload` - Time when the request finished uploading.\n- `response` - Time when the request fired the `response` event.\n- `end` - Time when the response fired the `end` event.\n- `error` - Time when the request fired the `error` event.\n- `phases`\n\t- `wait` - `timings.socket - timings.start`\n\t- `dns` - `timings.lookup - timings.socket`\n\t- `tcp` - `timings.connect - timings.lookup`\n\t- `request` - `timings.upload - timings.connect`\n\t- `firstByte` - `timings.response - timings.upload`\n\t- `download` - `timings.end - timings.response`\n\t- `total` - `timings.end - timings.start` or `timings.error - timings.start`\n\n**Note:** The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n\n##### isFromCache\n\nType: `boolean`\n\nWhether the response was retrieved from the cache.\n\n##### redirectUrls\n\nType: `string[]`\n\nThe redirect URLs.\n\n##### retryCount\n\nType: `number`\n\nThe number of times the request was retried.\n\n#### Streams\n\n**Note:** Progress events, redirect events and request/response events can also be used with promises.\n\n**Note:** To access `response.isFromCache` you need to use `got.stream(url, options).isFromCache`. The value will be undefined until the `response` event.\n\n#### got.stream(url, [options])\n\nSets `options.stream` to `true`.\n\nReturns a [duplex stream](https://nodejs.org/api/stream.html#stream_class_stream_duplex) with additional events:\n\n##### .on('request', request)\n\n`request` event to get the request object of the request.\n\n**Tip:** You can use `request` event to abort request:\n\n```js\ngot.stream('https://github.com')\n\t.on('request', request => setTimeout(() => request.abort(), 50));\n```\n\n##### .on('response', response)\n\nThe `response` event to get the response object of the final request.\n\n##### .on('redirect', response, nextOptions)\n\nThe `redirect` event to get the response object of a redirect. The second argument is options for the next request to the redirect location.\n\n##### .on('uploadProgress', progress)\n##### .on('downloadProgress', progress)\n\nProgress events for uploading (sending a request) and downloading (receiving a response). The `progress` argument is an object like:\n\n```js\n{\n\tpercent: 0.1,\n\ttransferred: 1024,\n\ttotal: 10240\n}\n```\n\nIf it's not possible to retrieve the body size (can happen when streaming), `total` will be `null`.\n\n```js\n(async () => {\n\tconst response = await got('https://sindresorhus.com')\n\t\t.on('downloadProgress', progress => {\n\t\t\t// Report download progress\n\t\t})\n\t\t.on('uploadProgress', progress => {\n\t\t\t// Report upload progress\n\t\t});\n\n\tconsole.log(response);\n})();\n```\n\n##### .on('error', error, body, response)\n\nThe `error` event emitted in case of a protocol error (like `ENOTFOUND` etc.) or status error (4xx or 5xx). The second argument is the body of the server response in case of status error. The third argument is a response object.\n\n#### got.get(url, [options])\n#### got.post(url, [options])\n#### got.put(url, [options])\n#### got.patch(url, [options])\n#### got.head(url, [options])\n#### got.delete(url, [options])\n\nSets `options.method` to the method name and makes a request.\n\n### Instances\n\n#### got.extend(...options)\n\nConfigure a new `got` instance with default `options`. The `options` are merged with the parent instance's `defaults.options` using [`got.mergeOptions`](#gotmergeoptionsparentoptions-newoptions). You can access the resolved options with the `.defaults` property on the instance.\n\n```js\nconst client = got.extend({\n\tprefixUrl: 'https://example.com',\n\theaders: {\n\t\t'x-unicorn': 'rainbow'\n\t}\n});\n\nclient.get('/demo');\n\n/* HTTP Request =>\n * GET /demo HTTP/1.1\n * Host: example.com\n * x-unicorn: rainbow\n */\n```\n\n```js\n(async () => {\n\tconst client = got.extend({\n\t\tprefixUrl: 'httpbin.org',\n\t\theaders: {\n\t\t\t'x-foo': 'bar'\n\t\t}\n\t});\n\tconst {headers} = await client.get('/headers').json();\n\t//=> headers['x-foo'] === 'bar'\n\n\tconst jsonClient = client.extend({\n\t\tresponseType: 'json',\n\t\tresolveBodyOnly: true,\n\t\theaders: {\n\t\t\t'x-baz': 'qux'\n\t\t}\n\t});\n\tconst {headers: headers2} = await jsonClient.get('/headers');\n\t//=> headers2['x-foo'] === 'bar'\n\t//=> headers2['x-baz'] === 'qux'\n})();\n```\n\n**Tip:** Need more control over the behavior of Got? Check out the [`got.create()`](documentation/advanced-creation.md).\n\nAdditionally, `got.extend()` accepts two properties from the `defaults` object: `mutableDefaults` and `handlers`. Example:\n\n```js\n// You can now modify `mutableGot.defaults.options`.\nconst mutableGot = got.extend({mutableDefaults: true});\n\nconst mergedHandlers = got.extend({\n\thandlers: [\n\t\t(options, next) => {\n\t\t\tdelete options.headers.referer;\n\n\t\t\treturn next(options);\n\t\t}\n\t]\n});\n```\n\n#### got.extend(...instances)\n\nMerges many instances into a single one:\n- options are merged using [`got.mergeOptions()`](#gotmergeoptionsparentoptions-newoptions) (+ hooks are merged too),\n- handlers are stored in an array (you can access them through `instance.defaults.handlers`).\n\n#### got.extend(...options, ...instances, ...)\n\nIt's possible to combine options and instances.<br>\nIt gives the same effect as `got.extend(...options).extend(...instances)`:\n\n```js\nconst a = {headers: {cat: 'meow'}};\nconst b = got.create({\n\toptions: {\n\t\theaders: {\n\t\t\tcow: 'moo'\n\t\t}\n\t}\n});\n\n// The same as `got.extend(a).extend(b)`.\n// Note `a` is options and `b` is an instance.\ngot.extend(a, b);\n//=> {headers: {cat: 'meow', cow: 'moo'}}\n```\n\n#### got.mergeOptions(parentOptions, newOptions)\n\nExtends parent options. Avoid using [object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals) as it doesn't work recursively:\n\n```js\nconst a = {headers: {cat: 'meow', wolf: ['bark', 'wrrr']}};\nconst b = {headers: {cow: 'moo', wolf: ['auuu']}};\n\n{...a, ...b}            // => {headers: {cow: 'moo', wolf: ['auuu']}}\ngot.mergeOptions(a, b)  // => {headers: {cat: 'meow', cow: 'moo', wolf: ['auuu']}}\n```\n\nOptions are deeply merged to a new object. The value of each key is determined as follows:\n\n- If the new property is set to `undefined`, it keeps the old one.\n- If both properties are an instances of `URLSearchParams`, a new URLSearchParams instance is created. The values are merged using [`urlSearchParams.append(key, value)`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/append).\n- If the parent property is an instance of `URL` and the new value is a `string` or `URL`, a new URL instance is created: [`new URL(new, parent)`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#Syntax).\n- If the new property is a plain `object`:\n\t- If the parent property is a plain `object` too, both values are merged recursively into a new `object`.\n\t- Otherwise, only the new value is deeply cloned.\n- If the new property is an `Array`, it overwrites the old one with a deep clone of the new property.\n- Otherwise, the new value is assigned to the key.\n\n#### got.defaults\n\nType: `object`\n\nThe default Got options used in that instance.\n\n## Errors\n\nEach error contains an `options` property which are the options Got used to create a request - just to make debugging easier.\n\n#### got.CacheError\n\nWhen a cache method fails, for example, if the database goes down or there's a filesystem error.\n\n#### got.RequestError\n\nWhen a request fails. Contains a `code` property with error class code, like `ECONNREFUSED`.\n\n#### got.ReadError\n\nWhen reading from response stream fails.\n\n#### got.ParseError\n\nWhen server response code is 2xx, and parsing body fails. Includes a `response` property.\n\n#### got.HTTPError\n\nWhen the server response code is not 2xx. Includes a `response` property.\n\n#### got.MaxRedirectsError\n\nWhen the server redirects you more than ten times. Includes a `response` property.\n\n#### got.UnsupportedProtocolError\n\nWhen given an unsupported protocol.\n\n#### got.CancelError\n\nWhen the request is aborted with `.cancel()`.\n\n#### got.TimeoutError\n\nWhen the request is aborted due to a [timeout](#timeout). Includes an `event` and `timings` property.\n\n## Aborting the request\n\nThe promise returned by Got has a [`.cancel()`](https://github.com/sindresorhus/p-cancelable) method which when called, aborts the request.\n\n```js\n(async () => {\n\tconst request = got(url, options);\n\n\t// …\n\n\t// In another part of the code\n\tif (something) {\n\t\trequest.cancel();\n\t}\n\n\t// …\n\n\ttry {\n\t\tawait request;\n\t} catch (error) {\n\t\tif (request.isCanceled) { // Or `error instanceof got.CancelError`\n\t\t\t// Handle cancelation\n\t\t}\n\n\t\t// Handle other errors\n\t}\n})();\n```\n\n<a name=\"cache-adapters\"></a>\n## Cache\n\nGot implements [RFC 7234](http://httpwg.org/specs/rfc7234.html) compliant HTTP caching which works out of the box in-memory and is easily pluggable with a wide range of storage adapters. Fresh cache entries are served directly from the cache, and stale cache entries are revalidated with `If-None-Match`/`If-Modified-Since` headers. You can read more about the underlying cache behavior in the [`cacheable-request` documentation](https://github.com/lukechilds/cacheable-request). For DNS cache, Got uses [`cacheable-lookup`](https://github.com/szmarczak/cacheable-lookup).\n\nYou can use the JavaScript `Map` type as an in-memory cache:\n\n```js\nconst got = require('got');\nconst map = new Map();\n\n(async () => {\n\t\tlet response = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> false\n\n\t\tresponse = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> true\n})();\n```\n\nGot uses [Keyv](https://github.com/lukechilds/keyv) internally to support a wide range of storage adapters. For something more scalable you could use an [official Keyv storage adapter](https://github.com/lukechilds/keyv#official-storage-adapters):\n\n```\n$ npm install @keyv/redis\n```\n\n```js\nconst got = require('got');\nconst KeyvRedis = require('@keyv/redis');\n\nconst redis = new KeyvRedis('redis://user:pass@localhost:6379');\n\ngot('https://sindresorhus.com', {cache: redis});\n```\n\nGot supports anything that follows the Map API, so it's easy to write your own storage adapter or use a third-party solution.\n\nFor example, the following are all valid storage adapters:\n\n```js\nconst storageAdapter = new Map();\n// Or\nconst storageAdapter = require('./my-storage-adapter');\n// Or\nconst QuickLRU = require('quick-lru');\nconst storageAdapter = new QuickLRU({maxSize: 1000});\n\ngot('https://sindresorhus.com', {cache: storageAdapter});\n```\n\nView the [Keyv docs](https://github.com/lukechilds/keyv) for more information on how to use storage adapters.\n\n\n## Proxies\n\nYou can use the [`tunnel`](https://github.com/koichik/node-tunnel) package with the `agent` option to work with proxies:\n\n```js\nconst got = require('got');\nconst tunnel = require('tunnel');\n\ngot('https://sindresorhus.com', {\n\tagent: tunnel.httpOverHttp({\n\t\tproxy: {\n\t\t\thost: 'localhost'\n\t\t}\n\t})\n});\n```\n\nAlternatively, use [`global-agent`](https://github.com/gajus/global-agent) to configure a global proxy for all HTTP/HTTPS traffic in your program.\n\n\n## Cookies\n\nYou can use the [`tough-cookie`](https://github.com/salesforce/tough-cookie) package:\n\n```js\nconst {promisify} = require('util');\nconst got = require('got');\nconst {CookieJar} = require('tough-cookie');\n\n(async () => {\n\tconst cookieJar = new CookieJar();\n\tconst setCookie = promisify(cookieJar.setCookie.bind(cookieJar));\n\n\tawait setCookie('foo=bar', 'https://example.com');\n\tawait got('https://example.com', {cookieJar});\n})();\n```\n\n\n## Form data\n\nYou can use the [`form-data`](https://github.com/form-data/form-data) package to create POST request with form data:\n\n```js\nconst fs = require('fs');\nconst got = require('got');\nconst FormData = require('form-data');\n\nconst form = new FormData();\n\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\ngot.post('https://example.com', {\n\tbody: form\n});\n```\n\n\n## OAuth\n\nYou can use the [`oauth-1.0a`](https://github.com/ddo/oauth-1.0a) package to create a signed OAuth request:\n\n```js\nconst got = require('got');\nconst crypto  = require('crypto');\nconst OAuth = require('oauth-1.0a');\n\nconst oauth = OAuth({\n\tconsumer: {\n\t\tkey: process.env.CONSUMER_KEY,\n\t\tsecret: process.env.CONSUMER_SECRET\n\t},\n\tsignature_method: 'HMAC-SHA1',\n\thash_function: (baseString, key) => crypto.createHmac('sha1', key).update(baseString).digest('base64')\n});\n\nconst token = {\n\tkey: process.env.ACCESS_TOKEN,\n\tsecret: process.env.ACCESS_TOKEN_SECRET\n};\n\nconst url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';\n\ngot(url, {\n\theaders: oauth.toHeader(oauth.authorize({url, method: 'GET'}, token)),\n\tresponseType: 'json'\n});\n```\n\n\n## Unix Domain Sockets\n\nRequests can also be sent via [unix domain sockets](http://serverfault.com/questions/124517/whats-the-difference-between-unix-socket-and-tcp-ip-socket). Use the following URL scheme: `PROTOCOL://unix:SOCKET:PATH`.\n\n- `PROTOCOL` - `http` or `https` *(optional)*\n- `SOCKET` - Absolute path to a unix domain socket, for example: `/var/run/docker.sock`\n- `PATH` - Request path, for example: `/v2/keys`\n\n```js\ngot('http://unix:/var/run/docker.sock:/containers/json');\n\n// Or without protocol (HTTP by default)\ngot('unix:/var/run/docker.sock:/containers/json');\n```\n\n\n## AWS\n\nRequests to AWS services need to have their headers signed. This can be accomplished by using the [`aws4`](https://www.npmjs.com/package/aws4) package. This is an example for querying an [\"API Gateway\"](https://docs.aws.amazon.com/apigateway/api-reference/signing-requests/) with a signed request.\n\n```js\nconst got = require('got');\nconst AWS = require('aws-sdk');\nconst aws4 = require('aws4');\n\nconst chain = new AWS.CredentialProviderChain();\n\n// Create a Got instance to use relative paths and signed requests\nconst awsClient = got.extend({\n\tprefixUrl: 'https://<api-id>.execute-api.<api-region>.amazonaws.com/<stage>/',\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\tasync options => {\n\t\t\t\tconst credentials = await chain.resolvePromise();\n\t\t\t\taws4.sign(options, credentials);\n\t\t\t}\n\t\t]\n\t}\n});\n\nconst response = await awsClient('endpoint/path', {\n\t// Request-specific options\n});\n```\n\n\n## Testing\n\nYou can test your requests by using the [`nock`](https://github.com/node-nock/nock) package to mock an endpoint:\n\n```js\nconst got = require('got');\nconst nock = require('nock');\n\nnock('https://sindresorhus.com')\n\t.get('/')\n\t.reply(200, 'Hello world!');\n\n(async () => {\n\tconst response = await got('https://sindresorhus.com');\n\tconsole.log(response.body);\n\t//=> 'Hello world!'\n})();\n```\n\nFor real integration testing we recommend using [`ava`](https://github.com/avajs/ava) with [`create-test-server`](https://github.com/lukechilds/create-test-server). We're using a macro so we don't have to `server.listen()` and `server.close()` every test. Take a look at one of our tests:\n\n```js\ntest('retry function gets iteration count', withServer, async (t, server, got) => {\n\tlet knocks = 0;\n\tserver.get('/', (request, response) => {\n\t\tif (knocks++ === 1) {\n\t\t\tresponse.end('who`s there?');\n\t\t}\n\t});\n\n\tawait got({\n\t\tretry: {\n\t\t\tcalculateDelay: ({attemptCount}) => {\n\t\t\t\tt.true(is.number(attemptCount));\n\t\t\t\treturn attemptCount < 2;\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\n\n## Tips\n\n### JSON mode\n\nTo pass an object as the body, you need to use the `json` option. It will be stringified using `JSON.stringify`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst {body} = await got.post('https://httpbin.org/anything', {\n\t\tjson: {\n\t\t\thello: 'world'\n\t\t},\n\t\tresponseType: 'json'\n\t});\n\n\tconsole.log(body.data);\n\t//=> '{\"hello\":\"world\"}'\n})();\n```\n\nTo receive a JSON body you can either set `responseType` option to `json` or use `promise.json()`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst {body} = await got.post('https://httpbin.org/anything', {\n\t\tbody: {\n\t\t\thello: 'world'\n\t\t}\n\t}).json();\n\n\tconsole.log(body);\n\t//=> {…}\n})();\n```\n\n### User Agent\n\nIt's a good idea to set the `'user-agent'` header so the provider can more easily see how their resource is used. By default, it's the URL to this repo. You can omit this header by setting it to `null`.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': null\n\t}\n});\n```\n\n### 304 Responses\n\nBear in mind; if you send an `if-modified-since` header and receive a `304 Not Modified` response, the body will be empty. It's your responsibility to cache and retrieve the body contents.\n\n### Custom endpoints\n\nUse `got.extend()` to make it nicer to work with REST APIs. Especially if you use the `prefixUrl` option.\n\n**Note:** Not to be confused with [`got.create()`](documentation/advanced-creation.md), which has no defaults.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\nconst custom = got.extend({\n\tprefixUrl: 'example.com',\n\tresponseType: 'json',\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\n// Use `custom` exactly how you use `got`\n(async () => {\n\tconst list = await custom('/v1/users/list');\n})();\n```\n\n### Experimental HTTP2 support\n\nGot provides an experimental support for HTTP2 using the [`http2-wrapper`](https://github.com/szmarczak/http2-wrapper) package:\n\n```js\nconst got = require('got');\nconst {request} = require('http2-wrapper');\n\nconst h2got = got.extend({request});\n\n(async () => {\n\tconst {body} = await h2got('https://nghttp2.org/httpbin/headers');\n\tconsole.log(body);\n})();\n```\n\n## Comparison\n\n|                       |       `got`      | [`request`][r0] |  [`node-fetch`][n0]  |    [`ky`][k0]     |  [`axios`][a0]   |  [`superagent`][s0]  |\n|-----------------------|:----------------:|:---------------:|:--------------------:|:-----------------:|:----------------:|:--------------------:|\n| HTTP/2 support        |        ❔        |        ❌       |          ❌         |         ❌        |        ❌       |          ✔️\\*\\*      |\n| Browser support       |        ❌       |        ❌       |          ✔️\\*       |         ✔️        |        ✔️       |          ✔️          |\n| Electron support      |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Promise API           |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Stream API            |        ✔️       |        ✔️       |     Node.js only     |         ❌        |        ❌       |          ✔️          |\n| Request cancelation   |        ✔️       |        ❌       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| RFC compliant caching |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Cookies (out-of-box)  |        ✔️       |        ✔️       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Follows redirects     |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Retries on failure    |        ✔️       |        ❌       |          ❌         |         ✔️        |        ❌       |          ✔️          |\n| Progress events       |        ✔️       |        ❌       |          ❌         |         ✔️\\*\\*\\*  |   Browser only   |          ✔️          |\n| Handles gzip/deflate  |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Advanced timeouts     |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Timings               |        ✔️       |        ✔️       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Errors with metadata  |        ✔️       |        ❌       |          ❌         |         ✔️        |        ✔️       |          ❌          |\n| JSON mode             |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Custom defaults       |        ✔️       |        ✔️       |          ❌         |         ✔️        |        ✔️       |          ❌          |\n| Composable            |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ✔️          |\n| Hooks                 |        ✔️       |        ❌       |          ❌         |         ✔️        |        ✔️       |          ❌          |\n| Issues open           |  [![][gio]][g1]  | [![][rio]][r1]  |    [![][nio]][n1]    |   [![][kio]][k1]  |  [![][aio]][a1] |    [![][sio]][s1]     |\n| Issues closed         |  [![][gic]][g2]  | [![][ric]][r2]  |    [![][nic]][n2]    |   [![][kic]][k2]  |  [![][aic]][a2] |    [![][sic]][s2]     |\n| Downloads             |  [![][gd]][g3]   |  [![][rd]][r3]  |    [![][nd]][n3]     |   [![][kd]][k3]   |  [![][ad]][a3]  |    [![][sd]][s3]      |\n| Coverage              |  [![][gc]][g4]   |  [![][rc]][r4]  |    [![][nc]][n4]     |   [![][kc]][k4]   |  [![][ac]][a4]  |    [![][sc]][s4]      |\n| Build                 |  [![][gb]][g5]   |  [![][rb]][r5]  |    [![][nb]][n5]     |   [![][kb]][k5]   |  [![][ab]][a5]  |    [![][sb]][s5]      |\n| Bugs                  |  [![][gbg]][g6]  | [![][rbg]][r6]  |    [![][nbg]][n6]    |   [![][kbg]][k6]  |  [![][abg]][a6] |    [![][sbg]][s6]     |\n| Dependents            |  [![][gdp]][g7]  | [![][rdp]][r7]  |    [![][ndp]][n7]    |   [![][kdp]][k7]  |  [![][adp]][a7] |    [![][sdp]][s7]     |\n| Install size          |  [![][gis]][g8]  | [![][ris]][r8]  |    [![][nis]][n8]    |   [![][kis]][k8]  |  [![][ais]][a8] |    [![][sis]][s8]     |\n\n\\* It's almost API compatible with the browser `fetch` API.<br>\n\\*\\* Need to switch the protocol manually.<br>\n\\*\\*\\* Currently, only 'DownloadProgress' event is supported, 'UploadProgress' event is not supported.<br>\n❔ Experimental support.\n\n<!-- GITHUB -->\n[k0]: https://github.com/sindresorhus/ky\n[r0]: https://github.com/request/request\n[n0]: https://github.com/bitinn/node-fetch\n[a0]: https://github.com/axios/axios\n[s0]: https://github.com/visionmedia/superagent\n\n<!-- ISSUES OPEN -->\n[gio]: https://badgen.net/github/open-issues/sindresorhus/got?label\n[kio]: https://badgen.net/github/open-issues/sindresorhus/ky?label\n[rio]: https://badgen.net/github/open-issues/request/request?label\n[nio]: https://badgen.net/github/open-issues/bitinn/node-fetch?label\n[aio]: https://badgen.net/github/open-issues/axios/axios?label\n[sio]: https://badgen.net/github/open-issues/visionmedia/superagent?label\n\n[g1]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[k1]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[r1]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[n1]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[a1]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[s1]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n\n<!-- ISSUES CLOSED -->\n[gic]: https://badgen.net/github/closed-issues/sindresorhus/got?label\n[kic]: https://badgen.net/github/closed-issues/sindresorhus/ky?label\n[ric]: https://badgen.net/github/closed-issues/request/request?label\n[nic]: https://badgen.net/github/closed-issues/bitinn/node-fetch?label\n[aic]: https://badgen.net/github/closed-issues/axios/axios?label\n[sic]: https://badgen.net/github/closed-issues/visionmedia/superagent?label\n\n[g2]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[k2]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[r2]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[n2]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[a2]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[s2]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n\n<!-- DOWNLOADS -->\n[gd]: https://badgen.net/npm/dm/got?label\n[kd]: https://badgen.net/npm/dm/ky?label\n[rd]: https://badgen.net/npm/dm/request?label\n[nd]: https://badgen.net/npm/dm/node-fetch?label\n[ad]: https://badgen.net/npm/dm/axios?label\n[sd]: https://badgen.net/npm/dm/superagent?label\n\n[g3]: https://www.npmjs.com/package/got\n[k3]: https://www.npmjs.com/package/ky\n[r3]: https://www.npmjs.com/package/request\n[n3]: https://www.npmjs.com/package/node-fetch\n[a3]: https://www.npmjs.com/package/axios\n[s3]: https://www.npmjs.com/package/superagent\n\n<!-- COVERAGE -->\n[gc]: https://badgen.net/coveralls/c/github/sindresorhus/got?label\n[kc]: https://badgen.net/codecov/c/github/sindresorhus/ky?label\n[rc]: https://badgen.net/coveralls/c/github/request/request?label\n[nc]: https://badgen.net/coveralls/c/github/bitinn/node-fetch?label\n[ac]: https://badgen.net/coveralls/c/github/mzabriskie/axios?label\n[sc]: https://badgen.net/codecov/c/github/visionmedia/superagent?label\n\n[g4]: https://coveralls.io/github/sindresorhus/got\n[k4]: https://codecov.io/gh/sindresorhus/ky\n[r4]: https://coveralls.io/github/request/request\n[n4]: https://coveralls.io/github/bitinn/node-fetch\n[a4]: https://coveralls.io/github/mzabriskie/axios\n[s4]: https://codecov.io/gh/visionmedia/superagent\n\n<!-- BUILD -->\n[gb]: https://badgen.net/travis/sindresorhus/got?label\n[kb]: https://badgen.net/travis/sindresorhus/ky?label\n[rb]: https://badgen.net/travis/request/request?label\n[nb]: https://badgen.net/travis/bitinn/node-fetch?label\n[ab]: https://badgen.net/travis/axios/axios?label\n[sb]: https://badgen.net/travis/visionmedia/superagent?label\n\n[g5]: https://travis-ci.org/sindresorhus/got\n[k5]: https://travis-ci.org/sindresorhus/ky\n[r5]: https://travis-ci.org/request/request\n[n5]: https://travis-ci.org/bitinn/node-fetch\n[a5]: https://travis-ci.org/axios/axios\n[s5]: https://travis-ci.org/visionmedia/superagent\n\n<!-- BUGS -->\n[gbg]: https://badgen.net/github/label-issues/sindresorhus/got/bug/open?label\n[kbg]: https://badgen.net/github/label-issues/sindresorhus/ky/bug/open?label\n[rbg]: https://badgen.net/github/label-issues/request/request/Needs%20investigation/open?label\n[nbg]: https://badgen.net/github/label-issues/bitinn/node-fetch/bug/open?label\n[abg]: https://badgen.net/github/label-issues/axios/axios/type:bug/open?label\n[sbg]: https://badgen.net/github/label-issues/visionmedia/superagent/Bug/open?label\n\n[g6]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[k6]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[r6]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A\"Needs+investigation\"\n[n6]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[a6]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Atype:bug\n[s6]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3ABug\n\n<!-- DEPENDENTS -->\n[gdp]: https://badgen.net/npm/dependents/got?label\n[kdp]: https://badgen.net/npm/dependents/ky?label\n[rdp]: https://badgen.net/npm/dependents/request?label\n[ndp]: https://badgen.net/npm/dependents/node-fetch?label\n[adp]: https://badgen.net/npm/dependents/axios?label\n[sdp]: https://badgen.net/npm/dependents/superagent?label\n\n[g7]: https://www.npmjs.com/package/got?activeTab=dependents\n[k7]: https://www.npmjs.com/package/ky?activeTab=dependents\n[r7]: https://www.npmjs.com/package/request?activeTab=dependents\n[n7]: https://www.npmjs.com/package/node-fetch?activeTab=dependents\n[a7]: https://www.npmjs.com/package/axios?activeTab=dependents\n[s7]: https://www.npmjs.com/package/visionmedia?activeTab=dependents\n\n<!-- INSTALL SIZE -->\n[gis]: https://badgen.net/packagephobia/install/got?label\n[kis]: https://badgen.net/packagephobia/install/ky?label\n[ris]: https://badgen.net/packagephobia/install/request?label\n[nis]: https://badgen.net/packagephobia/install/node-fetch?label\n[ais]: https://badgen.net/packagephobia/install/axios?label\n[sis]: https://badgen.net/packagephobia/install/superagent?label\n\n[g8]: https://packagephobia.now.sh/result?p=got\n[k8]: https://packagephobia.now.sh/result?p=ky\n[r8]: https://packagephobia.now.sh/result?p=request\n[n8]: https://packagephobia.now.sh/result?p=node-fetch\n[a8]: https://packagephobia.now.sh/result?p=axios\n[s8]: https://packagephobia.now.sh/result?p=superagent\n\n#### Install size of the dependencies\n\n|                   Dependency                   |          Install size         |\n|------------------------------------------------|-------------------------------|\n| [@sindresorhus/is][url-is]                     | ![][size-is]                  |\n| [@szmarczak/http-timer][url-http-timer]        | ![][size-http-timer]          |\n| [cacheable-request][url-cacheable-request]     | ![][size-cacheable-request]   |\n| [decompress-response][url-decompress-response] | ![][size-decompress-response] |\n| [duplexer3][url-duplexer3]                     | ![][size-duplexer3]           |\n| [get-stream][url-get-stream]                   | ![][size-get-stream]          |\n| [lowercase-keys][url-lowercase-keys]           | ![][size-lowercase-keys]      |\n| [mimic-response][url-mimic-response]           | ![][size-mimic-response]      |\n| [p-cancelable][url-p-cancelable]               | ![][size-p-cancelable]        |\n| [to-readable-stream][url-to-readable-stream]   | ![][size-to-readable-stream]  |\n|                                                | ![][gis]                      |\n\n[size-is]: https://badgen.net/packagephobia/install/@sindresorhus/is?label\n[size-http-timer]: https://badgen.net/packagephobia/install/@szmarczak/http-timer?label\n[size-cacheable-request]: https://badgen.net/packagephobia/install/cacheable-request?label\n[size-decompress-response]: https://badgen.net/packagephobia/install/decompress-response?label\n[size-duplexer3]: https://badgen.net/packagephobia/install/duplexer3?label\n[size-get-stream]: https://badgen.net/packagephobia/install/get-stream?label\n[size-lowercase-keys]: https://badgen.net/packagephobia/install/lowercase-keys?label\n[size-mimic-response]: https://badgen.net/packagephobia/install/mimic-response?label\n[size-p-cancelable]: https://badgen.net/packagephobia/install/p-cancelable?label\n[size-to-readable-stream]: https://badgen.net/packagephobia/install/to-readable-stream?label\n\n[url-is]: https://github.com/sindresorhus/is\n[url-http-timer]: https://github.com/szmarczak/http-timer\n[url-cacheable-request]: https://github.com/lukechilds/cacheable-request\n[url-decompress-response]: https://github.com/sindresorhus/decompress-response\n[url-duplexer3]: https://github.com/floatdrop/duplexer3\n[url-get-stream]: https://github.com/sindresorhus/get-stream\n[url-lowercase-keys]: https://github.com/sindresorhus/lowercase-keys\n[url-mimic-response]: https://github.com/sindresorhus/mimic-response\n[url-p-cancelable]: https://github.com/sindresorhus/p-cancelable\n[url-to-readable-stream]: https://github.com/sindresorhus/to-readable-stream\n\n## Related\n\n- [gh-got](https://github.com/sindresorhus/gh-got) - Got convenience wrapper to interact with the GitHub API\n- [gl-got](https://github.com/singapore/gl-got) - Got convenience wrapper to interact with the GitLab API\n- [travis-got](https://github.com/samverschueren/travis-got) - Got convenience wrapper to interact with the Travis API\n- [graphql-got](https://github.com/kevva/graphql-got) - Got convenience wrapper to interact with GraphQL\n- [GotQL](https://github.com/khaosdoctor/gotql) - Got convenience wrapper to interact with GraphQL using JSON-parsed queries instead of strings\n- [got-fetch](https://github.com/alexghr/got-fetch) - Got with a `fetch` interface\n\n\n## Maintainers\n\n[![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://sindresorhus.com) | [![Szymon Marczak](https://github.com/szmarczak.png?size=100)](https://github.com/szmarczak) | [![Alexander Tesfamichael](https://github.com/AlexTes.png?size=100)](https://github.com/AlexTes) | [![Brandon Smith](https://github.com/brandon93s.png?size=100)](https://github.com/brandon93s) | [![Luke Childs](https://github.com/lukechilds.png?size=100)](https://github.com/lukechilds)\n---|---|---|---|---\n[Sindre Sorhus](https://sindresorhus.com) | [Szymon Marczak](https://github.com/szmarczak) | [Alexander Tesfamichael](https://alextes.me) | [Brandon Smith](https://github.com/brandon93s) | [Luke Childs](https://github.com/lukechilds)\n\n###### Former\n\n- [Vsevolod Strukchinsky](https://github.com/floatdrop)\n\n\n---\n\n<div align=\"center\">\n\t<b>\n\t\t<a href=\"https://tidelift.com/subscription/pkg/npm-got?utm_source=npm-got&utm_medium=referral&utm_campaign=readme\">Get professional support for this package with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n","types":"dist/source","browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","babel":false,"compileEnhancements":false,"extensions":["ts"],"require":["ts-node/register"]},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"rules":{"@typescript-eslint/explicit-function-return-type":"off","@typescript-eslint/promise-function-async":"off","@typescript-eslint/strict-boolean-expressions":"off","@typescript-eslint/no-unnecessary-condition":"off"},"ignores":["documentation/examples/*"]},"readmeFilename":"readme.md","gitHead":"72390c2dfb79f7ee0012d6ba264faff638248e47","_nodeVersion":"12.13.0","_npmVersion":"6.9.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.0.0-alpha.3.2_1572638777095_0.7221311328828659"},"_hasShrinkwrap":false},"10.0.0-beta.1":{"_id":"got@10.0.0-beta.1","name":"got","description":"Simplified HTTP requests","version":"10.0.0-beta.1","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron","brotli"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@sindresorhus/tsconfig":"^0.5.0","@types/duplexer3":"^0.1.0","@types/node":"^12.12.8","@types/sinon":"^7.0.13","@typescript-eslint/eslint-plugin":"^2.7.0","@typescript-eslint/parser":"^2.7.0","ava":"^2.4.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.21.0","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^14.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^7.5.0","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","ts-node":"^8.5.2","typescript":"^3.7.2","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^3.1.0","@types/cacheable-request":"^6.0.1","@types/tough-cookie":"^2.3.5","cacheable-lookup":"^0.2.1","cacheable-request":"^7.0.0","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.8.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"a52e450d4b990d5ada13abb9205d6b327529f6a3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.0.0-beta.1.tgz"},"readme":"<div align=\"center\">\n\t<br>\n\t<br>\n\t<img width=\"360\" src=\"media/logo.svg\" alt=\"Got\">\n\t<br>\n\t<br>\n\t<br>\n\t<p align=\"center\">Huge thanks to <a href=\"https://moxy.studio\"><img src=\"https://sindresorhus.com/assets/thanks/moxy-logo.svg\" width=\"150\"></a> for sponsoring Sindre Sorhus!\n\t</p>\n\t<br>\n\t<br>\n</div>\n\n> Simplified HTTP requests\n\n[![Build Status: Linux](https://travis-ci.org/sindresorhus/got.svg?branch=master)](https://travis-ci.org/sindresorhus/got)\n[![Coverage Status](https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/got?branch=master)\n[![Downloads](https://img.shields.io/npm/dm/got.svg)](https://npmjs.com/got)\n[![Install size](https://packagephobia.now.sh/badge?p=got)](https://packagephobia.now.sh/result?p=got)\n\nGot is a human-friendly and powerful HTTP request library.\n\nIt was created because the popular [`request`](https://github.com/request/request) package is bloated: [![Install size](https://packagephobia.now.sh/badge?p=request)](https://packagephobia.now.sh/result?p=request)\n\nGot is for Node.js. For browsers, we recommend [Ky](https://github.com/sindresorhus/ky).\n\n**This readme reflects the next major version that is currently in development. You probably want [the v9 readme](https://www.npmjs.com/package/got).**\n\n\n## Highlights\n\n- [Promise & stream API](#api)\n- [Request cancelation](#aborting-the-request)\n- [RFC compliant caching](#cache-adapters)\n- [Follows redirects](#followredirect)\n- [Retries on failure](#retry)\n- [Progress events](#onuploadprogress-progress)\n- [Handles gzip/deflate/brotli](#decompress)\n- [Timeout handling](#timeout)\n- [Errors with metadata](#errors)\n- [JSON mode](#json-mode)\n- [WHATWG URL support](#url)\n- [Hooks](#hooks)\n- [Instances with custom defaults](#instances)\n- [Composable](documentation/advanced-creation.md#merging-instances)\n- [Plugins](documentation/lets-make-a-plugin.md)\n- [Electron support](#useelectronnet)\n- [Used by 3000+ packages and 1.4M+ repos](https://github.com/sindresorhus/got/network/dependents)\n- Actively maintained\n\n[Moving from Request?](documentation/migration-guides.md)\n\n[See how Got compares to other HTTP libraries](#comparison)\n\n## Install\n\n```\n$ npm install got\n```\n\n\n## Usage\n\n```js\nconst got = require('got');\n\n(async () => {\n\ttry {\n\t\tconst response = await got('https://sindresorhus.com');\n\t\tconsole.log(response.body);\n\t\t//=> '<!doctype html> ...'\n\t} catch (error) {\n\t\tconsole.log(error.response.body);\n\t\t//=> 'Internal server error ...'\n\t}\n})();\n```\n\n###### Streams\n\n```js\nconst stream = require('stream');\nconst {promisify} = require('util');\nconst fs = require('fs');\nconst got = require('got');\n\nconst pipeline = promisify(stream.pipeline);\n\n(async () => {\n    await pipeline(\n        got.stream('https://sindresorhus.com'),\n        fs.createWriteStream('index.html')\n    );\n\n    // For POST, PUT, and PATCH methods `got.stream` returns a `stream.Writable`\n    await pipeline(\n        fs.createReadStream('index.html'),\n        got.stream.post('https://sindresorhus.com')\n    );\n})();\n```\n\n**Tip:** Using `from.pipe(to)` doesn't forward errors. If you use it, switch to [`Stream.pipeline(from, ..., to, callback)`](https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback) instead (available from Node v10).\n\n### API\n\nIt's a `GET` request by default, but can be changed by using different methods or via `options.method`.\n\n#### got([url], [options])\n\nReturns a Promise for a [`response` object](#response) or a [stream](#streams-1) if `options.isStream` is set to true.\n\n##### url\n\nType: `string | object`\n\nThe URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\nProperties from `options` will override properties in the parsed `url`.\n\nIf no protocol is specified, it will throw a `TypeError`.\n\n**Note:** this can also be an option.\n\n##### options\n\nType: `object`\n\nAny of the [`https.request`](https://nodejs.org/api/https.html#https_https_request_options_callback) options.\n\n###### prefixUrl\n\nType: `string | URL`\n\nWhen specified, `prefixUrl` will be prepended to `url`. The prefix can be any valid URL, either relative or absolute. A trailing slash `/` is optional, one will be added automatically, if needed, when joining `prefixUrl` and `url`. The `url` argument cannot start with a `/` when using this option.\n\nUseful when used with `got.extend()` to create niche-specific Got-instances.\n\n**Note:** `prefixUrl` will be ignored if the `url` argument is a URL instance.\n\n**Tip:** If the input URL still contains the initial `prefixUrl`, you can change it as many times as you want. Otherwise it will throw an error.\n\n```js\nconst got = require('got');\n\n(async () => {\n\tawait got('unicorn', {prefixUrl: 'https://cats.com'});\n\t//=> 'https://cats.com/unicorn'\n\n\tconst instance = got.extend({\n\t\tprefixUrl: 'https://google.com'\n\t});\n\n\tawait instance('unicorn', {\n\t\thooks: {\n\t\t\tbeforeRequest: [\n\t\t\t\toptions => {\n\t\t\t\t\toptions.prefixUrl = 'https://cats.com';\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t});\n\t//=> 'https://cats.com/unicorn'\n})();\n```\n\n###### headers\n\nType: `object`<br>\nDefault: `{}`\n\nRequest headers.\n\nExisting headers will be overwritten. Headers set to `undefined` will be omitted.\n\n###### isStream\n\nType: `boolean`<br>\nDefault: `false`\n\nReturns a `Stream` instead of a `Promise`. This is equivalent to calling `got.stream(url, [options])`.\n\n###### body\n\nType: `string | Buffer | stream.Readable` or [`form-data` instance](https://github.com/form-data/form-data)\n\n**Note:** The `body` option cannot be used with the `json` or `form` option.\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nIf present in `options` and `options.method` is not set, it will throw a `TypeError`.\n\nThe `content-length` header will be automatically set if `body` is a `string` / `Buffer` / `fs.createReadStream` instance / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n\n###### json\n\nType: `object | Array | number | string | boolean | null` *(JSON-serializable values)*\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nJSON body. If the `Content-Type` header is not set, it will be set to `application/json`.\n\n###### context\n\nType: `object`\n\nUser data. In contrast to other options, `context` is not enumerable.\n\n**Note:** The object is never merged, it's just passed through. Got will not modify the object in any way.\n\nIt's very useful for storing auth tokens:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\toptions => {\n\t\t\t\tif (!options.context && !options.context.token) {\n\t\t\t\t\tthrow new Error('Token required');\n\t\t\t\t}\n\n\t\t\t\toptions.headers.token = options.context.token;\n\t\t\t}\n\t\t]\n\t}\n});\n\n(async () => {\n\tconst context = {\n\t\ttoken: 'secret'\n\t};\n\n\tconst response = await instance('https://httpbin.org/headers', {context});\n\n\t// Let's see the headers\n\tconsole.log(response.body);\n})();\n```\n\n###### responseType\n\nType: `string`<br>\nDefault: `'default'`\n\n**Note:** When using streams, this option is ignored.\n\nParsing method used to retrieve the body from the response.\n\n- `'default'` - if `options.encoding` is `null`, the body will be a Buffer. Otherwise it will be a string unless it's overwritten in a `afterResponse` hook,\n- `'text'` - will always give a string, no matter what's the `options.encoding` or if the body is a custom object,\n- `'json'` - will always give an object, unless it's invalid JSON - then it will throw.\n- `'buffer'` - will always give a Buffer, no matter what's the `options.encoding`. It will throw if the body is a custom object.\n\nThe promise has `.json()` and `.buffer()` and `.text()` functions which set this option automatically.\n\nExample:\n\n```js\nconst {body} = await got(url).json();\n```\n\n###### resolveBodyOnly\n\nType: `string`<br>\nDefault: `false`\n\nWhen set to `true` the promise will return the [Response body](#body-1) instead of the [Response](#response) object.\n\n###### cookieJar\n\nType: `object` | [`tough.CookieJar` instance](https://github.com/salesforce/tough-cookie#cookiejar)\n\n**Note:** If you provide this option, `options.headers.cookie` will be overridden.\n\nCookie support. You don't have to care about parsing or how to store them. [Example](#cookies).\n\n###### cookieJar.setCookie\n\nType: `Function<Promise>`\n\nThe function takes two arguments: `rawCookie` (`string`) and `url` (`string`).\n\n###### cookieJar.getCookieString\n\nType: `Function<Promise>`\n\nThe function takes one argument: `url` (`string`).\n\n###### ignoreInvalidCookies\n\nType: `boolean`<br>\nDefault: `false`\n\nIgnore invalid cookies instead of throwing an error. Only useful when the `cookieJar` option has been set. Not recommended.\n\n###### encoding\n\nType: `string | null`<br>\nDefault: `'utf8'`\n\n[Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data. If `null`, the body is returned as a [`Buffer`](https://nodejs.org/api/buffer.html) (binary data).\n\n###### form\n\nType: `object | true`\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nThe form body is converted to query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n\nIf set to `true` and the `Content-Type` header is not set, it will be set to `application/x-www-form-urlencoded`.\n\n###### searchParams\n\nType: `string | object<string, string | number> | URLSearchParams`\n\nQuery string that will be added to the request URL. This will override the query string in `url`.\n\nIf you need to pass in an array, you can do it using a `URLSearchParams` instance:\n\n```js\nconst got = require('got');\n\nconst searchParams = new URLSearchParams([['key', 'a'], ['key', 'b']]);\n\ngot('https://example.com', {searchParams});\n\nconsole.log(searchParams.toString());\n//=> 'key=a&key=b'\n```\n\nAnd if you need a different array format, you could use the [`query-string`](https://github.com/sindresorhus/query-string) package:\n\n```js\nconst got = require('got');\nconst queryString = require('query-string');\n\nconst searchParams = queryString.stringify({key: ['a', 'b']}, {arrayFormat: 'bracket'});\n\ngot('https://example.com', {searchParams});\n\nconsole.log(searchParams);\n//=> 'key[]=a&key[]=b'\n```\n\n###### timeout\n\nType: `number | object`\n\nMilliseconds to wait for the server to end the response before aborting the request with [`got.TimeoutError`](#gottimeouterror) error (a.k.a. `request` property). By default, there's no timeout.\n\nThis also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n\n- `lookup` starts when a socket is assigned and ends when the hostname has been resolved. Does not apply when using a Unix domain socket.\n- `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n- `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n- `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n- `response` starts when the request has been written to the socket and ends when the response headers are received.\n- `send` starts when the socket is connected and ends with the request has been written to the socket.\n- `request` starts when the request is initiated and ends when the response's end event fires.\n\n###### retry\n\nType: `number | object`<br>\nDefault:\n- limit: `2`\n- calculateDelay: `(attemptCount, retryOptions, error, computedValue) => computedValue`\n- methods: `GET` `PUT` `HEAD` `DELETE` `OPTIONS` `TRACE`\n- statusCodes: [`408`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408) [`413`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413) [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) [`500`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500) [`502`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502) [`503`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503) [`504`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504)\n- maxRetryAfter: `undefined`\n- errorCodes: `ETIMEDOUT` `ECONNRESET` `EADDRINUSE` `ECONNREFUSED` `EPIPE` `ENOTFOUND` `ENETUNREACH` `EAI_AGAIN`\n\nAn object representing `limit`, `calculateDelay`, `methods`, `statusCodes`, `maxRetryAfter` and `errorCodes` fields for maximum retry count, retry handler, allowed methods, allowed status codes, maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time and allowed error codes.\n\n**Note:** When using streams, this option is ignored. If the connection is reset when downloading, you need to catch the error and clear the file you were writing into to prevent duplicated content.\n\nIf `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.<br>\nIf [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n\nDelays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 1).\n\nThe `calculateDelay` property is a `function` with `attemptCount`, `retryOptions`, `error` and `computedValue` arguments for current retry count, the retry options, error and default computed value. The function must return a delay in milliseconds (`0` return value cancels retry).\n\nBy default, it retries *only* on the specified methods, status codes, and on these network errors:\n- `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n- `ECONNRESET`: Connection was forcibly closed by a peer.\n- `EADDRINUSE`: Could not bind to any free port.\n- `ECONNREFUSED`: Connection was refused by the server.\n- `EPIPE`: The remote side of the stream being written has been closed.\n- `ENOTFOUND`: Couldn't resolve the hostname to an IP address.\n- `ENETUNREACH`: No internet connection.\n- `EAI_AGAIN`: DNS lookup timed out.\n\n###### followRedirect\n\nType: `boolean`<br>\nDefault: `true`\n\nDefines if redirect responses should be followed automatically.\n\nNote that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`. This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4).\n\nThis supports [method rewriting](https://tools.ietf.org/html/rfc7231#section-6.4). For example, when sending a POST request and receiving a `302`, it will resend that request to the new location.\n\n###### maxRedirects\n\nType: `number`<br>\nDefault: `10`\n\nIf exceeded, the request will be aborted and a `MaxRedirectsError` will be thrown.\n\n###### decompress\n\nType: `boolean`<br>\nDefault: `true`\n\nDecompress the response automatically. This will set the `accept-encoding` header to `gzip, deflate, br` on Node.js 11.7.0+ or `gzip, deflate` for older Node.js versions, unless you set it yourself.\n\nBrotli (`br`) support requires Node.js 11.7.0 or later.\n\nIf this is disabled, a compressed response is returned as a `Buffer`. This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n\n###### cache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached response data.\n\n###### dnsCache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached DNS data.\n\n###### request\n\nType: `Function`<br>\nDefault: `http.request` `https.request` *(Depending on the protocol)*\n\nCustom request function. The main purpose of this is to [support HTTP2 using a wrapper](#experimental-http2-support).\n\n###### useElectronNet\n\nType: `boolean`<br>\nDefault: `false`\n\nWhen used in Electron, Got will use [`electron.net`](https://electronjs.org/docs/api/net/) instead of the Node.js `http` module. According to the Electron docs, it should be fully compatible, but it's not entirely. See [#443](https://github.com/sindresorhus/got/issues/443) and [#461](https://github.com/sindresorhus/got/issues/461).\n\n###### throwHttpErrors\n\nType: `boolean`<br>\nDefault: `true`\n\nDetermines if a `got.HTTPError` is thrown for error responses (non-2xx status codes).\n\nIf this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing. This may be useful if you are checking for resource availability and are expecting error responses.\n\n###### agent\n\nSame as the [`agent` option](https://nodejs.org/api/http.html#http_http_request_url_options_callback) for `http.request`, but with an extra feature:\n\nIf you require different agents for different protocols, you can pass a map of agents to the `agent` option. This is necessary because a request to one protocol might redirect to another. In such a scenario, Got will switch over to the right protocol agent for you.\n\n```js\nconst got = require('got');\nconst HttpAgent = require('agentkeepalive');\nconst {HttpsAgent} = HttpAgent;\n\ngot('https://sindresorhus.com', {\n\tagent: {\n\t\thttp: new HttpAgent(),\n\t\thttps: new HttpsAgent()\n\t}\n});\n```\n\n###### hooks\n\nType: `object<string, Function[]>`\n\nHooks allow modifications during the request lifecycle. Hook functions may be async and are run serially.\n\n###### hooks.init\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with plain [request options](#options), right before their normalization. This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when the input needs custom handling.\n\nSee the [Request migration guide](documentation/migration-guides.md#breaking-changes) for an example.\n\n**Note:** This hook must be synchronous!\n\n###### hooks.beforeRequest\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options). Got will make no further changes to the request before it is sent (except the body serialization). This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when you want to create an API client that, for example, uses HMAC-signing.\n\nSee the [AWS section](#aws) for an example.\n\n###### hooks.beforeRedirect\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options) and the redirect [response](#response). Got will make no further changes to the request. This is especially useful when you want to avoid dead sites. Example:\n\n```js\nconst got = require('got');\n\ngot('https://example.com', {\n\thooks: {\n\t\tbeforeRedirect: [\n\t\t\t(options, response) => {\n\t\t\t\tif (options.hostname === 'deadSite') {\n\t\t\t\t\toptions.hostname = 'fallbackSite';\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.beforeRetry\n\nType: `Function[]`<br>\nDefault: `[]`\n\n**Note:** When using streams, this hook is ignored.\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options), the error and the retry count. Got will make no further changes to the request. This is especially useful when some extra work is required before the next try. Example:\n\n```js\nconst got = require('got');\n\ngot.post('https://example.com', {\n\thooks: {\n\t\tbeforeRetry: [\n\t\t\t(options, error, retryCount) => {\n\t\t\t\tif (error.statusCode === 413) { // Payload too large\n\t\t\t\t\toptions.body = getNewBody();\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n**Note:** When retrying in a `afterResponse` hook, all remaining `beforeRetry` hooks will be called without the `error` and `retryCount` arguments.\n\n###### hooks.afterResponse\n\nType: `Function[]`<br>\nDefault: `[]`\n\n**Note:** When using streams, this hook is ignored.\n\nCalled with [response object](#response) and a retry function. Calling the retry function will trigger `beforeRetry` hooks.\n\nEach function should return the response. This is especially useful when you want to refresh an access token. Example:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tafterResponse: [\n\t\t\t(response, retryWithMergedOptions) => {\n\t\t\t\tif (response.statusCode === 401) { // Unauthorized\n\t\t\t\t\tconst updatedOptions = {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\ttoken: getNewToken() // Refresh the access token\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Save for further requests\n\t\t\t\t\tinstance.defaults.options = got.mergeOptions(instance.defaults.options, updatedOptions);\n\n\t\t\t\t\t// Make a new retry\n\t\t\t\t\treturn retryWithMergedOptions(updatedOptions);\n\t\t\t\t}\n\n\t\t\t\t// No changes otherwise\n\t\t\t\treturn response;\n\t\t\t}\n\t\t],\n\t\tbeforeRetry: [\n\t\t\t(options, error, retryCount) => {\n\t\t\t\t// This will be called on `retryWithMergedOptions(...)`\n\t\t\t}\n\t\t]\n\t},\n\tmutableDefaults: true\n});\n```\n\n###### hooks.beforeError\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with an `Error` instance. The error is passed to the hook right before it's thrown. This is especially useful when you want to have more detailed errors.\n\n**Note:** Errors thrown while normalizing input options are thrown directly and not part of this hook.\n\n```js\nconst got = require('got');\n\ngot('https://api.github.com/some-endpoint', {\n\thooks: {\n\t\tbeforeError: [\n\t\t\terror => {\n\t\t\t\tconst {response} = error;\n \t\t\t\tif (response && response.body) {\n\t\t\t\t\terror.name = 'GitHubError';\n\t\t\t\t\terror.message = `${response.body.message} (${error.statusCode})`;\n\t\t\t\t}\n\n \t\t\t\treturn error;\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n#### Response\n\nThe response object will typically be a [Node.js HTTP response stream](https://nodejs.org/api/http.html#http_class_http_incomingmessage), however, if returned from the cache it will be a [response-like object](https://github.com/lukechilds/responselike) which behaves in the same way.\n\n##### request\n\nType: `object`\n\n**Note:** This is not a [http.ClientRequest](https://nodejs.org/api/http.html#http_class_http_clientrequest).\n\n- `options` - The Got options that were set on this request.\n\n##### body\n\nType: `string | object | Buffer` *(Depending on `options.responseType`)*\n\nThe result of the request.\n\n##### url\n\nType: `string`\n\nThe request URL or the final URL after redirects.\n\n##### ip\n\nType: `string`\n\nThe remote IP address.\n\n**Note:** Not available when the response is cached. This is hopefully a temporary limitation, see [lukechilds/cacheable-request#86](https://github.com/lukechilds/cacheable-request/issues/86).\n\n##### requestUrl\n\nType: `string`\n\nThe original request URL.\n\n##### timings\n\nType: `object`\n\nThe object contains the following properties:\n\n- `start` - Time when the request started.\n- `socket` - Time when a socket was assigned to the request.\n- `lookup` - Time when the DNS lookup finished.\n- `connect` - Time when the socket successfully connected.\n- `upload` - Time when the request finished uploading.\n- `response` - Time when the request fired the `response` event.\n- `end` - Time when the response fired the `end` event.\n- `error` - Time when the request fired the `error` event.\n- `phases`\n\t- `wait` - `timings.socket - timings.start`\n\t- `dns` - `timings.lookup - timings.socket`\n\t- `tcp` - `timings.connect - timings.lookup`\n\t- `request` - `timings.upload - timings.connect`\n\t- `firstByte` - `timings.response - timings.upload`\n\t- `download` - `timings.end - timings.response`\n\t- `total` - `timings.end - timings.start` or `timings.error - timings.start`\n\n**Note:** The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n\n##### isFromCache\n\nType: `boolean`\n\nWhether the response was retrieved from the cache.\n\n##### redirectUrls\n\nType: `string[]`\n\nThe redirect URLs.\n\n##### retryCount\n\nType: `number`\n\nThe number of times the request was retried.\n\n#### Streams\n\n**Note:** Progress events, redirect events and request/response events can also be used with promises.\n\n**Note:** To access `response.isFromCache` you need to use `got.stream(url, options).isFromCache`. The value will be undefined until the `response` event.\n\n#### got.stream(url, [options])\n\nSets `options.isStream` to `true`.\n\nReturns a [duplex stream](https://nodejs.org/api/stream.html#stream_class_stream_duplex) with additional events:\n\n##### .on('request', request)\n\n`request` event to get the request object of the request.\n\n**Tip:** You can use `request` event to abort request:\n\n```js\ngot.stream('https://github.com')\n\t.on('request', request => setTimeout(() => request.abort(), 50));\n```\n\n##### .on('response', response)\n\nThe `response` event to get the response object of the final request.\n\n##### .on('redirect', response, nextOptions)\n\nThe `redirect` event to get the response object of a redirect. The second argument is options for the next request to the redirect location.\n\n##### .on('uploadProgress', progress)\n##### .on('downloadProgress', progress)\n\nProgress events for uploading (sending a request) and downloading (receiving a response). The `progress` argument is an object like:\n\n```js\n{\n\tpercent: 0.1,\n\ttransferred: 1024,\n\ttotal: 10240\n}\n```\n\nIf it's not possible to retrieve the body size (can happen when streaming), `total` will be `null`.\n\n```js\n(async () => {\n\tconst response = await got('https://sindresorhus.com')\n\t\t.on('downloadProgress', progress => {\n\t\t\t// Report download progress\n\t\t})\n\t\t.on('uploadProgress', progress => {\n\t\t\t// Report upload progress\n\t\t});\n\n\tconsole.log(response);\n})();\n```\n\n##### .on('error', error, body, response)\n\nThe `error` event emitted in case of a protocol error (like `ENOTFOUND` etc.) or status error (4xx or 5xx). The second argument is the body of the server response in case of status error. The third argument is a response object.\n\n#### got.get(url, [options])\n#### got.post(url, [options])\n#### got.put(url, [options])\n#### got.patch(url, [options])\n#### got.head(url, [options])\n#### got.delete(url, [options])\n\nSets `options.method` to the method name and makes a request.\n\n### Instances\n\n#### got.extend(...options)\n\nConfigure a new `got` instance with default `options`. The `options` are merged with the parent instance's `defaults.options` using [`got.mergeOptions`](#gotmergeoptionsparentoptions-newoptions). You can access the resolved options with the `.defaults` property on the instance.\n\n```js\nconst client = got.extend({\n\tprefixUrl: 'https://example.com',\n\theaders: {\n\t\t'x-unicorn': 'rainbow'\n\t}\n});\n\nclient.get('/demo');\n\n/* HTTP Request =>\n * GET /demo HTTP/1.1\n * Host: example.com\n * x-unicorn: rainbow\n */\n```\n\n```js\n(async () => {\n\tconst client = got.extend({\n\t\tprefixUrl: 'httpbin.org',\n\t\theaders: {\n\t\t\t'x-foo': 'bar'\n\t\t}\n\t});\n\tconst {headers} = await client.get('/headers').json();\n\t//=> headers['x-foo'] === 'bar'\n\n\tconst jsonClient = client.extend({\n\t\tresponseType: 'json',\n\t\tresolveBodyOnly: true,\n\t\theaders: {\n\t\t\t'x-baz': 'qux'\n\t\t}\n\t});\n\tconst {headers: headers2} = await jsonClient.get('/headers');\n\t//=> headers2['x-foo'] === 'bar'\n\t//=> headers2['x-baz'] === 'qux'\n})();\n```\n\nAdditionally, `got.extend()` accepts two properties from the `defaults` object: `mutableDefaults` and `handlers`. Example:\n\n```js\n// You can now modify `mutableGot.defaults.options`.\nconst mutableGot = got.extend({mutableDefaults: true});\n\nconst mergedHandlers = got.extend({\n\thandlers: [\n\t\t(options, next) => {\n\t\t\tdelete options.headers.referer;\n\n\t\t\treturn next(options);\n\t\t}\n\t]\n});\n```\n\n**Note:** Handlers can be asynchronous. The recommended approach is:\n\n```js\nconst handler = (options, next) => {\n\tif (options.stream) {\n\t\t// It's a Stream\n\t\treturn next(options);\n\t}\n\n\t// It's a Promise\n\treturn (async () => {\n\t\ttry {\n\t\t\tconst response = await next(options);\n\t\t\tresponse.yourOwnProperty = true;\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\t// Every error will be replaced by this one.\n\t\t\t// Before you receive any error here,\n\t\t\t// it will be passed to the `beforeError` hooks first.\n\t\t\t// Note: this one won't be passed to `beforeError` hook. It's final.\n\t\t\tthrow new Error('Your very own error.');\n\t\t}\n\t})();\n};\n\nconst instance = got.extend({handlers: [handler]});\n```\n\n#### got.extend(...instances)\n\nMerges many instances into a single one:\n- options are merged using [`got.mergeOptions()`](#gotmergeoptionsparentoptions-newoptions) (+ hooks are merged too),\n- handlers are stored in an array (you can access them through `instance.defaults.handlers`).\n\n#### got.extend(...options, ...instances, ...)\n\nIt's possible to combine options and instances.<br>\nIt gives the same effect as `got.extend(...options).extend(...instances)`:\n\n```js\nconst a = {headers: {cat: 'meow'}};\nconst b = got.create({\n\toptions: {\n\t\theaders: {\n\t\t\tcow: 'moo'\n\t\t}\n\t}\n});\n\n// The same as `got.extend(a).extend(b)`.\n// Note `a` is options and `b` is an instance.\ngot.extend(a, b);\n//=> {headers: {cat: 'meow', cow: 'moo'}}\n```\n\n#### got.mergeOptions(parentOptions, newOptions)\n\nExtends parent options. Avoid using [object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals) as it doesn't work recursively:\n\n```js\nconst a = {headers: {cat: 'meow', wolf: ['bark', 'wrrr']}};\nconst b = {headers: {cow: 'moo', wolf: ['auuu']}};\n\n{...a, ...b}            // => {headers: {cow: 'moo', wolf: ['auuu']}}\ngot.mergeOptions(a, b)  // => {headers: {cat: 'meow', cow: 'moo', wolf: ['auuu']}}\n```\n\nOptions are deeply merged to a new object. The value of each key is determined as follows:\n\n- If the new property is set to `undefined`, it keeps the old one.\n- If both properties are an instances of `URLSearchParams`, a new URLSearchParams instance is created. The values are merged using [`urlSearchParams.append(key, value)`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/append).\n- If the parent property is an instance of `URL` and the new value is a `string` or `URL`, a new URL instance is created: [`new URL(new, parent)`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#Syntax).\n- If the new property is a plain `object`:\n\t- If the parent property is a plain `object` too, both values are merged recursively into a new `object`.\n\t- Otherwise, only the new value is deeply cloned.\n- If the new property is an `Array`, it overwrites the old one with a deep clone of the new property.\n- Otherwise, the new value is assigned to the key.\n\n#### got.defaults\n\nType: `object`\n\nThe Got defaults used in that instance.\n\n##### [options](#options)\n\n##### handlers\n\nType: `Function[]`<br>\nDefault: `[]`\n\nAn array of functions. You execute them directly by calling `got()`. They are some sort of \"global hooks\" - these functions are called first. The last handler (*it's hidden*) is either [`asPromise`](source/as-promise.ts) or [`asStream`](source/as-stream.ts), depending on the `options.isStream` property.\n\nEach handler takes two arguments:\n\n###### [options](#options)\n\n###### next()\n\nReturns a `Promise` or a `Stream` depending on [`options.isStream`](#isstream).\n\n```js\nconst settings = {\n\thandlers: [\n\t\t(options, next) => {\n\t\t\tif (options.isStream) {\n\t\t\t\t// It's a Stream, so we can perform stream-specific actions on it\n\t\t\t\treturn next(options)\n\t\t\t\t\t.on('request', request => {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\trequest.abort();\n\t\t\t\t\t\t}, 50);\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\t// It's a Promise\n\t\t\treturn next(options);\n\t\t}\n\t],\n\toptions: got.mergeOptions(got.defaults.options, {\n\t\tresponseType: 'json'\n\t})\n};\n\nconst jsonGot = got.create(settings);\n```\n\n##### mutableDefaults\n\nType: `boolean`<br>\nDefault: `false`\n\nA read-only boolean describing whether the defaults are mutable or not. If set to `true`, you can [update headers over time](#hooksafterresponse), for example, update an access token when it expires.\n\n## Errors\n\nEach error contains an `options` property which are the options Got used to create a request - just to make debugging easier.\n\n#### got.CacheError\n\nWhen a cache method fails, for example, if the database goes down or there's a filesystem error.\n\n#### got.RequestError\n\nWhen a request fails. Contains a `code` property with error class code, like `ECONNREFUSED`.\n\n#### got.ReadError\n\nWhen reading from response stream fails.\n\n#### got.ParseError\n\nWhen server response code is 2xx, and parsing body fails. Includes a `response` property.\n\n#### got.HTTPError\n\nWhen the server response code is not 2xx. Includes a `response` property.\n\n#### got.MaxRedirectsError\n\nWhen the server redirects you more than ten times. Includes a `response` property.\n\n#### got.UnsupportedProtocolError\n\nWhen given an unsupported protocol.\n\n#### got.CancelError\n\nWhen the request is aborted with `.cancel()`.\n\n#### got.TimeoutError\n\nWhen the request is aborted due to a [timeout](#timeout). Includes an `event` and `timings` property.\n\n## Aborting the request\n\nThe promise returned by Got has a [`.cancel()`](https://github.com/sindresorhus/p-cancelable) method which when called, aborts the request.\n\n```js\n(async () => {\n\tconst request = got(url, options);\n\n\t// …\n\n\t// In another part of the code\n\tif (something) {\n\t\trequest.cancel();\n\t}\n\n\t// …\n\n\ttry {\n\t\tawait request;\n\t} catch (error) {\n\t\tif (request.isCanceled) { // Or `error instanceof got.CancelError`\n\t\t\t// Handle cancelation\n\t\t}\n\n\t\t// Handle other errors\n\t}\n})();\n```\n\nWhen using hooks, simply throw an error to abort the request.\n\n```js\n(async () => {\n\tconst request = got(url, {\n\t\thooks: {\n\t\t\tbeforeRequest: [\n\t\t\t\t() => {\n\t\t\t\t\tthrow new Error('Oops. Request canceled.');\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t});\n\n\ttry {\n\t\tawait request;\n\t} catch (error) {\n\t\t// …\n\t}\n})();\n```\n\n<a name=\"cache-adapters\"></a>\n## Cache\n\nGot implements [RFC 7234](http://httpwg.org/specs/rfc7234.html) compliant HTTP caching which works out of the box in-memory and is easily pluggable with a wide range of storage adapters. Fresh cache entries are served directly from the cache, and stale cache entries are revalidated with `If-None-Match`/`If-Modified-Since` headers. You can read more about the underlying cache behavior in the [`cacheable-request` documentation](https://github.com/lukechilds/cacheable-request). For DNS cache, Got uses [`cacheable-lookup`](https://github.com/szmarczak/cacheable-lookup).\n\nYou can use the JavaScript `Map` type as an in-memory cache:\n\n```js\nconst got = require('got');\nconst map = new Map();\n\n(async () => {\n\t\tlet response = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> false\n\n\t\tresponse = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> true\n})();\n```\n\nGot uses [Keyv](https://github.com/lukechilds/keyv) internally to support a wide range of storage adapters. For something more scalable you could use an [official Keyv storage adapter](https://github.com/lukechilds/keyv#official-storage-adapters):\n\n```\n$ npm install @keyv/redis\n```\n\n```js\nconst got = require('got');\nconst KeyvRedis = require('@keyv/redis');\n\nconst redis = new KeyvRedis('redis://user:pass@localhost:6379');\n\ngot('https://sindresorhus.com', {cache: redis});\n```\n\nGot supports anything that follows the Map API, so it's easy to write your own storage adapter or use a third-party solution.\n\nFor example, the following are all valid storage adapters:\n\n```js\nconst storageAdapter = new Map();\n// Or\nconst storageAdapter = require('./my-storage-adapter');\n// Or\nconst QuickLRU = require('quick-lru');\nconst storageAdapter = new QuickLRU({maxSize: 1000});\n\ngot('https://sindresorhus.com', {cache: storageAdapter});\n```\n\nView the [Keyv docs](https://github.com/lukechilds/keyv) for more information on how to use storage adapters.\n\n\n## Proxies\n\nYou can use the [`tunnel`](https://github.com/koichik/node-tunnel) package with the `agent` option to work with proxies:\n\n```js\nconst got = require('got');\nconst tunnel = require('tunnel');\n\ngot('https://sindresorhus.com', {\n\tagent: tunnel.httpOverHttp({\n\t\tproxy: {\n\t\t\thost: 'localhost'\n\t\t}\n\t})\n});\n```\n\nAlternatively, use [`global-agent`](https://github.com/gajus/global-agent) to configure a global proxy for all HTTP/HTTPS traffic in your program.\n\n\n## Cookies\n\nYou can use the [`tough-cookie`](https://github.com/salesforce/tough-cookie) package:\n\n```js\nconst {promisify} = require('util');\nconst got = require('got');\nconst {CookieJar} = require('tough-cookie');\n\n(async () => {\n\tconst cookieJar = new CookieJar();\n\tconst setCookie = promisify(cookieJar.setCookie.bind(cookieJar));\n\n\tawait setCookie('foo=bar', 'https://example.com');\n\tawait got('https://example.com', {cookieJar});\n})();\n```\n\n\n## Form data\n\nYou can use the [`form-data`](https://github.com/form-data/form-data) package to create POST request with form data:\n\n```js\nconst fs = require('fs');\nconst got = require('got');\nconst FormData = require('form-data');\n\nconst form = new FormData();\n\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\ngot.post('https://example.com', {\n\tbody: form\n});\n```\n\n\n## OAuth\n\nYou can use the [`oauth-1.0a`](https://github.com/ddo/oauth-1.0a) package to create a signed OAuth request:\n\n```js\nconst got = require('got');\nconst crypto  = require('crypto');\nconst OAuth = require('oauth-1.0a');\n\nconst oauth = OAuth({\n\tconsumer: {\n\t\tkey: process.env.CONSUMER_KEY,\n\t\tsecret: process.env.CONSUMER_SECRET\n\t},\n\tsignature_method: 'HMAC-SHA1',\n\thash_function: (baseString, key) => crypto.createHmac('sha1', key).update(baseString).digest('base64')\n});\n\nconst token = {\n\tkey: process.env.ACCESS_TOKEN,\n\tsecret: process.env.ACCESS_TOKEN_SECRET\n};\n\nconst url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';\n\ngot(url, {\n\theaders: oauth.toHeader(oauth.authorize({url, method: 'GET'}, token)),\n\tresponseType: 'json'\n});\n```\n\n\n## Unix Domain Sockets\n\nRequests can also be sent via [unix domain sockets](http://serverfault.com/questions/124517/whats-the-difference-between-unix-socket-and-tcp-ip-socket). Use the following URL scheme: `PROTOCOL://unix:SOCKET:PATH`.\n\n- `PROTOCOL` - `http` or `https` *(optional)*\n- `SOCKET` - Absolute path to a unix domain socket, for example: `/var/run/docker.sock`\n- `PATH` - Request path, for example: `/v2/keys`\n\n```js\ngot('http://unix:/var/run/docker.sock:/containers/json');\n\n// Or without protocol (HTTP by default)\ngot('unix:/var/run/docker.sock:/containers/json');\n```\n\n\n## AWS\n\nRequests to AWS services need to have their headers signed. This can be accomplished by using the [`aws4`](https://www.npmjs.com/package/aws4) package. This is an example for querying an [\"API Gateway\"](https://docs.aws.amazon.com/apigateway/api-reference/signing-requests/) with a signed request.\n\n```js\nconst got = require('got');\nconst AWS = require('aws-sdk');\nconst aws4 = require('aws4');\n\nconst chain = new AWS.CredentialProviderChain();\n\n// Create a Got instance to use relative paths and signed requests\nconst awsClient = got.extend({\n\tprefixUrl: 'https://<api-id>.execute-api.<api-region>.amazonaws.com/<stage>/',\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\tasync options => {\n\t\t\t\tconst credentials = await chain.resolvePromise();\n\t\t\t\taws4.sign(options, credentials);\n\t\t\t}\n\t\t]\n\t}\n});\n\nconst response = await awsClient('endpoint/path', {\n\t// Request-specific options\n});\n```\n\n\n## Testing\n\nYou can test your requests by using the [`nock`](https://github.com/node-nock/nock) package to mock an endpoint:\n\n```js\nconst got = require('got');\nconst nock = require('nock');\n\nnock('https://sindresorhus.com')\n\t.get('/')\n\t.reply(200, 'Hello world!');\n\n(async () => {\n\tconst response = await got('https://sindresorhus.com');\n\tconsole.log(response.body);\n\t//=> 'Hello world!'\n})();\n```\n\nFor real integration testing we recommend using [`ava`](https://github.com/avajs/ava) with [`create-test-server`](https://github.com/lukechilds/create-test-server). We're using a macro so we don't have to `server.listen()` and `server.close()` every test. Take a look at one of our tests:\n\n```js\ntest('retry function gets iteration count', withServer, async (t, server, got) => {\n\tlet knocks = 0;\n\tserver.get('/', (request, response) => {\n\t\tif (knocks++ === 1) {\n\t\t\tresponse.end('who`s there?');\n\t\t}\n\t});\n\n\tawait got({\n\t\tretry: {\n\t\t\tcalculateDelay: ({attemptCount}) => {\n\t\t\t\tt.true(is.number(attemptCount));\n\t\t\t\treturn attemptCount < 2;\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\n\n## Tips\n\n### JSON mode\n\nTo pass an object as the body, you need to use the `json` option. It will be stringified using `JSON.stringify`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst {body} = await got.post('https://httpbin.org/anything', {\n\t\tjson: {\n\t\t\thello: 'world'\n\t\t},\n\t\tresponseType: 'json'\n\t});\n\n\tconsole.log(body.data);\n\t//=> '{\"hello\":\"world\"}'\n})();\n```\n\nTo receive a JSON body you can either set `responseType` option to `json` or use `promise.json()`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst {body} = await got.post('https://httpbin.org/anything', {\n\t\tbody: {\n\t\t\thello: 'world'\n\t\t}\n\t}).json();\n\n\tconsole.log(body);\n\t//=> {…}\n})();\n```\n\n### User Agent\n\nIt's a good idea to set the `'user-agent'` header so the provider can more easily see how their resource is used. By default, it's the URL to this repo. You can omit this header by setting it to `undefined`.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': undefined\n\t}\n});\n```\n\n### 304 Responses\n\nBear in mind; if you send an `if-modified-since` header and receive a `304 Not Modified` response, the body will be empty. It's your responsibility to cache and retrieve the body contents.\n\n### Custom endpoints\n\nUse `got.extend()` to make it nicer to work with REST APIs. Especially if you use the `prefixUrl` option.\n\n**Note:** Not to be confused with [`got.create()`](documentation/advanced-creation.md), which has no defaults.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\nconst custom = got.extend({\n\tprefixUrl: 'example.com',\n\tresponseType: 'json',\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\n// Use `custom` exactly how you use `got`\n(async () => {\n\tconst list = await custom('/v1/users/list');\n})();\n```\n\n### Experimental HTTP2 support\n\nGot provides an experimental support for HTTP2 using the [`http2-wrapper`](https://github.com/szmarczak/http2-wrapper) package:\n\n```js\nconst got = require('got');\nconst {request} = require('http2-wrapper');\n\nconst h2got = got.extend({request});\n\n(async () => {\n\tconst {body} = await h2got('https://nghttp2.org/httpbin/headers');\n\tconsole.log(body);\n})();\n```\n\n## Comparison\n\n|                       |       `got`      | [`request`][r0] |  [`node-fetch`][n0]  |    [`ky`][k0]     |  [`axios`][a0]   |  [`superagent`][s0]  |\n|-----------------------|:----------------:|:---------------:|:--------------------:|:-----------------:|:----------------:|:--------------------:|\n| HTTP/2 support        |        ❔        |        ❌       |          ❌         |         ❌        |        ❌       |          ✔️\\*\\*      |\n| Browser support       |        ❌       |        ❌       |          ✔️\\*       |         ✔️        |        ✔️       |          ✔️          |\n| Electron support      |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Promise API           |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Stream API            |        ✔️       |        ✔️       |     Node.js only     |         ❌        |        ❌       |          ✔️          |\n| Request cancelation   |        ✔️       |        ❌       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| RFC compliant caching |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Cookies (out-of-box)  |        ✔️       |        ✔️       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Follows redirects     |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Retries on failure    |        ✔️       |        ❌       |          ❌         |         ✔️        |        ❌       |          ✔️          |\n| Progress events       |        ✔️       |        ❌       |          ❌         |         ✔️\\*\\*\\*  |   Browser only   |          ✔️          |\n| Handles gzip/deflate  |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Advanced timeouts     |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Timings               |        ✔️       |        ✔️       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Errors with metadata  |        ✔️       |        ❌       |          ❌         |         ✔️        |        ✔️       |          ❌          |\n| JSON mode             |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Custom defaults       |        ✔️       |        ✔️       |          ❌         |         ✔️        |        ✔️       |          ❌          |\n| Composable            |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ✔️          |\n| Hooks                 |        ✔️       |        ❌       |          ❌         |         ✔️        |        ✔️       |          ❌          |\n| Issues open           |  [![][gio]][g1]  | [![][rio]][r1]  |    [![][nio]][n1]    |   [![][kio]][k1]  |  [![][aio]][a1] |    [![][sio]][s1]     |\n| Issues closed         |  [![][gic]][g2]  | [![][ric]][r2]  |    [![][nic]][n2]    |   [![][kic]][k2]  |  [![][aic]][a2] |    [![][sic]][s2]     |\n| Downloads             |  [![][gd]][g3]   |  [![][rd]][r3]  |    [![][nd]][n3]     |   [![][kd]][k3]   |  [![][ad]][a3]  |    [![][sd]][s3]      |\n| Coverage              |  [![][gc]][g4]   |  [![][rc]][r4]  |    [![][nc]][n4]     |   [![][kc]][k4]   |  [![][ac]][a4]  |    [![][sc]][s4]      |\n| Build                 |  [![][gb]][g5]   |  [![][rb]][r5]  |    [![][nb]][n5]     |   [![][kb]][k5]   |  [![][ab]][a5]  |    [![][sb]][s5]      |\n| Bugs                  |  [![][gbg]][g6]  | [![][rbg]][r6]  |    [![][nbg]][n6]    |   [![][kbg]][k6]  |  [![][abg]][a6] |    [![][sbg]][s6]     |\n| Dependents            |  [![][gdp]][g7]  | [![][rdp]][r7]  |    [![][ndp]][n7]    |   [![][kdp]][k7]  |  [![][adp]][a7] |    [![][sdp]][s7]     |\n| Install size          |  [![][gis]][g8]  | [![][ris]][r8]  |    [![][nis]][n8]    |   [![][kis]][k8]  |  [![][ais]][a8] |    [![][sis]][s8]     |\n\n\\* It's almost API compatible with the browser `fetch` API.<br>\n\\*\\* Need to switch the protocol manually.<br>\n\\*\\*\\* Currently, only 'DownloadProgress' event is supported, 'UploadProgress' event is not supported.<br>\n❔ Experimental support.\n\n<!-- GITHUB -->\n[k0]: https://github.com/sindresorhus/ky\n[r0]: https://github.com/request/request\n[n0]: https://github.com/bitinn/node-fetch\n[a0]: https://github.com/axios/axios\n[s0]: https://github.com/visionmedia/superagent\n\n<!-- ISSUES OPEN -->\n[gio]: https://badgen.net/github/open-issues/sindresorhus/got?label\n[kio]: https://badgen.net/github/open-issues/sindresorhus/ky?label\n[rio]: https://badgen.net/github/open-issues/request/request?label\n[nio]: https://badgen.net/github/open-issues/bitinn/node-fetch?label\n[aio]: https://badgen.net/github/open-issues/axios/axios?label\n[sio]: https://badgen.net/github/open-issues/visionmedia/superagent?label\n\n[g1]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[k1]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[r1]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[n1]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[a1]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[s1]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n\n<!-- ISSUES CLOSED -->\n[gic]: https://badgen.net/github/closed-issues/sindresorhus/got?label\n[kic]: https://badgen.net/github/closed-issues/sindresorhus/ky?label\n[ric]: https://badgen.net/github/closed-issues/request/request?label\n[nic]: https://badgen.net/github/closed-issues/bitinn/node-fetch?label\n[aic]: https://badgen.net/github/closed-issues/axios/axios?label\n[sic]: https://badgen.net/github/closed-issues/visionmedia/superagent?label\n\n[g2]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[k2]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[r2]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[n2]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[a2]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[s2]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n\n<!-- DOWNLOADS -->\n[gd]: https://badgen.net/npm/dm/got?label\n[kd]: https://badgen.net/npm/dm/ky?label\n[rd]: https://badgen.net/npm/dm/request?label\n[nd]: https://badgen.net/npm/dm/node-fetch?label\n[ad]: https://badgen.net/npm/dm/axios?label\n[sd]: https://badgen.net/npm/dm/superagent?label\n\n[g3]: https://www.npmjs.com/package/got\n[k3]: https://www.npmjs.com/package/ky\n[r3]: https://www.npmjs.com/package/request\n[n3]: https://www.npmjs.com/package/node-fetch\n[a3]: https://www.npmjs.com/package/axios\n[s3]: https://www.npmjs.com/package/superagent\n\n<!-- COVERAGE -->\n[gc]: https://badgen.net/coveralls/c/github/sindresorhus/got?label\n[kc]: https://badgen.net/codecov/c/github/sindresorhus/ky?label\n[rc]: https://badgen.net/coveralls/c/github/request/request?label\n[nc]: https://badgen.net/coveralls/c/github/bitinn/node-fetch?label\n[ac]: https://badgen.net/coveralls/c/github/mzabriskie/axios?label\n[sc]: https://badgen.net/codecov/c/github/visionmedia/superagent?label\n\n[g4]: https://coveralls.io/github/sindresorhus/got\n[k4]: https://codecov.io/gh/sindresorhus/ky\n[r4]: https://coveralls.io/github/request/request\n[n4]: https://coveralls.io/github/bitinn/node-fetch\n[a4]: https://coveralls.io/github/mzabriskie/axios\n[s4]: https://codecov.io/gh/visionmedia/superagent\n\n<!-- BUILD -->\n[gb]: https://badgen.net/travis/sindresorhus/got?label\n[kb]: https://badgen.net/travis/sindresorhus/ky?label\n[rb]: https://badgen.net/travis/request/request?label\n[nb]: https://badgen.net/travis/bitinn/node-fetch?label\n[ab]: https://badgen.net/travis/axios/axios?label\n[sb]: https://badgen.net/travis/visionmedia/superagent?label\n\n[g5]: https://travis-ci.org/sindresorhus/got\n[k5]: https://travis-ci.org/sindresorhus/ky\n[r5]: https://travis-ci.org/request/request\n[n5]: https://travis-ci.org/bitinn/node-fetch\n[a5]: https://travis-ci.org/axios/axios\n[s5]: https://travis-ci.org/visionmedia/superagent\n\n<!-- BUGS -->\n[gbg]: https://badgen.net/github/label-issues/sindresorhus/got/bug/open?label\n[kbg]: https://badgen.net/github/label-issues/sindresorhus/ky/bug/open?label\n[rbg]: https://badgen.net/github/label-issues/request/request/Needs%20investigation/open?label\n[nbg]: https://badgen.net/github/label-issues/bitinn/node-fetch/bug/open?label\n[abg]: https://badgen.net/github/label-issues/axios/axios/type:bug/open?label\n[sbg]: https://badgen.net/github/label-issues/visionmedia/superagent/Bug/open?label\n\n[g6]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[k6]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[r6]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A\"Needs+investigation\"\n[n6]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[a6]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Atype:bug\n[s6]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3ABug\n\n<!-- DEPENDENTS -->\n[gdp]: https://badgen.net/npm/dependents/got?label\n[kdp]: https://badgen.net/npm/dependents/ky?label\n[rdp]: https://badgen.net/npm/dependents/request?label\n[ndp]: https://badgen.net/npm/dependents/node-fetch?label\n[adp]: https://badgen.net/npm/dependents/axios?label\n[sdp]: https://badgen.net/npm/dependents/superagent?label\n\n[g7]: https://www.npmjs.com/package/got?activeTab=dependents\n[k7]: https://www.npmjs.com/package/ky?activeTab=dependents\n[r7]: https://www.npmjs.com/package/request?activeTab=dependents\n[n7]: https://www.npmjs.com/package/node-fetch?activeTab=dependents\n[a7]: https://www.npmjs.com/package/axios?activeTab=dependents\n[s7]: https://www.npmjs.com/package/visionmedia?activeTab=dependents\n\n<!-- INSTALL SIZE -->\n[gis]: https://badgen.net/packagephobia/install/got?label\n[kis]: https://badgen.net/packagephobia/install/ky?label\n[ris]: https://badgen.net/packagephobia/install/request?label\n[nis]: https://badgen.net/packagephobia/install/node-fetch?label\n[ais]: https://badgen.net/packagephobia/install/axios?label\n[sis]: https://badgen.net/packagephobia/install/superagent?label\n\n[g8]: https://packagephobia.now.sh/result?p=got\n[k8]: https://packagephobia.now.sh/result?p=ky\n[r8]: https://packagephobia.now.sh/result?p=request\n[n8]: https://packagephobia.now.sh/result?p=node-fetch\n[a8]: https://packagephobia.now.sh/result?p=axios\n[s8]: https://packagephobia.now.sh/result?p=superagent\n\n#### Install size of the dependencies\n\n|                   Dependency                   |          Install size         |\n|------------------------------------------------|-------------------------------|\n| [@sindresorhus/is][url-is]                     | ![][size-is]                  |\n| [@szmarczak/http-timer][url-http-timer]        | ![][size-http-timer]          |\n| [cacheable-request][url-cacheable-request]     | ![][size-cacheable-request]   |\n| [decompress-response][url-decompress-response] | ![][size-decompress-response] |\n| [duplexer3][url-duplexer3]                     | ![][size-duplexer3]           |\n| [get-stream][url-get-stream]                   | ![][size-get-stream]          |\n| [lowercase-keys][url-lowercase-keys]           | ![][size-lowercase-keys]      |\n| [mimic-response][url-mimic-response]           | ![][size-mimic-response]      |\n| [p-cancelable][url-p-cancelable]               | ![][size-p-cancelable]        |\n| [to-readable-stream][url-to-readable-stream]   | ![][size-to-readable-stream]  |\n|                                                | ![][gis]                      |\n\n[size-is]: https://badgen.net/packagephobia/install/@sindresorhus/is?label\n[size-http-timer]: https://badgen.net/packagephobia/install/@szmarczak/http-timer?label\n[size-cacheable-request]: https://badgen.net/packagephobia/install/cacheable-request?label\n[size-decompress-response]: https://badgen.net/packagephobia/install/decompress-response?label\n[size-duplexer3]: https://badgen.net/packagephobia/install/duplexer3?label\n[size-get-stream]: https://badgen.net/packagephobia/install/get-stream?label\n[size-lowercase-keys]: https://badgen.net/packagephobia/install/lowercase-keys?label\n[size-mimic-response]: https://badgen.net/packagephobia/install/mimic-response?label\n[size-p-cancelable]: https://badgen.net/packagephobia/install/p-cancelable?label\n[size-to-readable-stream]: https://badgen.net/packagephobia/install/to-readable-stream?label\n\n[url-is]: https://github.com/sindresorhus/is\n[url-http-timer]: https://github.com/szmarczak/http-timer\n[url-cacheable-request]: https://github.com/lukechilds/cacheable-request\n[url-decompress-response]: https://github.com/sindresorhus/decompress-response\n[url-duplexer3]: https://github.com/floatdrop/duplexer3\n[url-get-stream]: https://github.com/sindresorhus/get-stream\n[url-lowercase-keys]: https://github.com/sindresorhus/lowercase-keys\n[url-mimic-response]: https://github.com/sindresorhus/mimic-response\n[url-p-cancelable]: https://github.com/sindresorhus/p-cancelable\n[url-to-readable-stream]: https://github.com/sindresorhus/to-readable-stream\n\n## Related\n\n- [gh-got](https://github.com/sindresorhus/gh-got) - Got convenience wrapper to interact with the GitHub API\n- [gl-got](https://github.com/singapore/gl-got) - Got convenience wrapper to interact with the GitLab API\n- [travis-got](https://github.com/samverschueren/travis-got) - Got convenience wrapper to interact with the Travis API\n- [graphql-got](https://github.com/kevva/graphql-got) - Got convenience wrapper to interact with GraphQL\n- [GotQL](https://github.com/khaosdoctor/gotql) - Got convenience wrapper to interact with GraphQL using JSON-parsed queries instead of strings\n- [got-fetch](https://github.com/alexghr/got-fetch) - Got with a `fetch` interface\n\n\n## Maintainers\n\n[![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://sindresorhus.com) | [![Szymon Marczak](https://github.com/szmarczak.png?size=100)](https://github.com/szmarczak) | [![Alexander Tesfamichael](https://github.com/AlexTes.png?size=100)](https://github.com/AlexTes) | [![Brandon Smith](https://github.com/brandon93s.png?size=100)](https://github.com/brandon93s) | [![Luke Childs](https://github.com/lukechilds.png?size=100)](https://github.com/lukechilds)\n---|---|---|---|---\n[Sindre Sorhus](https://sindresorhus.com) | [Szymon Marczak](https://github.com/szmarczak) | [Alexander Tesfamichael](https://alextes.me) | [Brandon Smith](https://github.com/brandon93s) | [Luke Childs](https://github.com/lukechilds)\n\n###### Former\n\n- [Vsevolod Strukchinsky](https://github.com/floatdrop)\n\n\n---\n\n<div align=\"center\">\n\t<b>\n\t\t<a href=\"https://tidelift.com/subscription/pkg/npm-got?utm_source=npm-got&utm_medium=referral&utm_campaign=readme\">Get professional support for this package with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n","types":"dist/source","browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","babel":false,"compileEnhancements":false,"extensions":["ts"],"require":["ts-node/register"]},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"rules":{"@typescript-eslint/explicit-function-return-type":"off","@typescript-eslint/promise-function-async":"off"},"ignores":["documentation/examples/*"]},"gitHead":"5c3d06bbf02011a55d964737f099e849816c344a","readmeFilename":"readme.md","_nodeVersion":"10.17.0","_npmVersion":"6.11.3","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.0.0-beta.1_1574063900990_0.6341987289682078"},"_hasShrinkwrap":false},"10.0.0-beta.2":{"_id":"got@10.0.0-beta.2","name":"got","description":"Simplified HTTP requests","version":"10.0.0-beta.2","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron","brotli"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@sindresorhus/tsconfig":"^0.6.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^3.1.1","@types/node":"^12.12.8","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"^2.7.0","@typescript-eslint/parser":"^2.7.0","ava":"^2.4.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.21.0","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^14.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^7.5.0","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","ts-node":"^8.5.2","typescript":"^3.7.2","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^3.1.0","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^0.2.1","cacheable-request":"^7.0.0","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.8.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"7b7cacc04d59f801731846e66cc6e9ea0ec33f93","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.0.0-beta.2.tgz"},"readme":"<div align=\"center\">\n\t<br>\n\t<br>\n\t<img width=\"360\" src=\"media/logo.svg\" alt=\"Got\">\n\t<br>\n\t<br>\n\t<br>\n\t<p align=\"center\">Huge thanks to <a href=\"https://moxy.studio\"><img src=\"https://sindresorhus.com/assets/thanks/moxy-logo.svg\" width=\"150\"></a> for sponsoring Sindre Sorhus!\n\t</p>\n\t<br>\n\t<br>\n</div>\n\n> Simplified HTTP requests\n\n[![Build Status: Linux](https://travis-ci.org/sindresorhus/got.svg?branch=master)](https://travis-ci.org/sindresorhus/got)\n[![Coverage Status](https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/got?branch=master)\n[![Downloads](https://img.shields.io/npm/dm/got.svg)](https://npmjs.com/got)\n[![Install size](https://packagephobia.now.sh/badge?p=got)](https://packagephobia.now.sh/result?p=got)\n\nGot is a human-friendly and powerful HTTP request library.\n\nIt was created because the popular [`request`](https://github.com/request/request) package is bloated: [![Install size](https://packagephobia.now.sh/badge?p=request)](https://packagephobia.now.sh/result?p=request)\n\nGot is for Node.js. For browsers, we recommend [Ky](https://github.com/sindresorhus/ky).\n\n**This readme reflects the next major version that is currently in development. You probably want [the v9 readme](https://www.npmjs.com/package/got).**\n\n\n## Highlights\n\n- [Promise & stream API](#api)\n- [Request cancelation](#aborting-the-request)\n- [RFC compliant caching](#cache-adapters)\n- [Follows redirects](#followredirect)\n- [Retries on failure](#retry)\n- [Progress events](#onuploadprogress-progress)\n- [Handles gzip/deflate/brotli](#decompress)\n- [Timeout handling](#timeout)\n- [Errors with metadata](#errors)\n- [JSON mode](#json-mode)\n- [WHATWG URL support](#url)\n- [Hooks](#hooks)\n- [Instances with custom defaults](#instances)\n- [Composable](documentation/advanced-creation.md#merging-instances)\n- [Plugins](documentation/lets-make-a-plugin.md)\n- [Electron support](#useelectronnet)\n- [Used by 3000+ packages and 1.4M+ repos](https://github.com/sindresorhus/got/network/dependents)\n- Actively maintained\n\n[Moving from Request?](documentation/migration-guides.md)\n\n[See how Got compares to other HTTP libraries](#comparison)\n\n## Install\n\n```\n$ npm install got\n```\n\n\n## Usage\n\n```js\nconst got = require('got');\n\n(async () => {\n\ttry {\n\t\tconst response = await got('https://sindresorhus.com');\n\t\tconsole.log(response.body);\n\t\t//=> '<!doctype html> ...'\n\t} catch (error) {\n\t\tconsole.log(error.response.body);\n\t\t//=> 'Internal server error ...'\n\t}\n})();\n```\n\n###### Streams\n\n```js\nconst stream = require('stream');\nconst {promisify} = require('util');\nconst fs = require('fs');\nconst got = require('got');\n\nconst pipeline = promisify(stream.pipeline);\n\n(async () => {\n    await pipeline(\n        got.stream('https://sindresorhus.com'),\n        fs.createWriteStream('index.html')\n    );\n\n    // For POST, PUT, and PATCH methods `got.stream` returns a `stream.Writable`\n    await pipeline(\n        fs.createReadStream('index.html'),\n        got.stream.post('https://sindresorhus.com')\n    );\n})();\n```\n\n**Tip:** Using `from.pipe(to)` doesn't forward errors. If you use it, switch to [`Stream.pipeline(from, ..., to, callback)`](https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback) instead (available from Node v10).\n\n### API\n\nIt's a `GET` request by default, but can be changed by using different methods or via `options.method`.\n\n**By default, Got will retry on failure. To disable this option, set [`retry`](#retry) to `0`.**\n\n#### got([url], [options])\n\nReturns a Promise for a [`response` object](#response) or a [stream](#streams-1) if `options.isStream` is set to true.\n\n##### url\n\nType: `string | object`\n\nThe URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\nProperties from `options` will override properties in the parsed `url`.\n\nIf no protocol is specified, it will throw a `TypeError`.\n\n**Note:** this can also be an option.\n\n##### options\n\nType: `object`\n\nAny of the [`https.request`](https://nodejs.org/api/https.html#https_https_request_options_callback) options.\n\n###### prefixUrl\n\nType: `string | URL`\n\nWhen specified, `prefixUrl` will be prepended to `url`. The prefix can be any valid URL, either relative or absolute. A trailing slash `/` is optional, one will be added automatically, if needed, when joining `prefixUrl` and `url`. The `url` argument cannot start with a `/` when using this option.\n\nUseful when used with `got.extend()` to create niche-specific Got-instances.\n\n**Note:** `prefixUrl` will be ignored if the `url` argument is a URL instance.\n\n**Tip:** If the input URL still contains the initial `prefixUrl`, you can change it as many times as you want. Otherwise it will throw an error.\n\n```js\nconst got = require('got');\n\n(async () => {\n\tawait got('unicorn', {prefixUrl: 'https://cats.com'});\n\t//=> 'https://cats.com/unicorn'\n\n\tconst instance = got.extend({\n\t\tprefixUrl: 'https://google.com'\n\t});\n\n\tawait instance('unicorn', {\n\t\thooks: {\n\t\t\tbeforeRequest: [\n\t\t\t\toptions => {\n\t\t\t\t\toptions.prefixUrl = 'https://cats.com';\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t});\n\t//=> 'https://cats.com/unicorn'\n})();\n```\n\n###### headers\n\nType: `object`<br>\nDefault: `{}`\n\nRequest headers.\n\nExisting headers will be overwritten. Headers set to `undefined` will be omitted.\n\n###### isStream\n\nType: `boolean`<br>\nDefault: `false`\n\nReturns a `Stream` instead of a `Promise`. This is equivalent to calling `got.stream(url, [options])`.\n\n###### body\n\nType: `string | Buffer | stream.Readable` or [`form-data` instance](https://github.com/form-data/form-data)\n\n**Note:** The `body` option cannot be used with the `json` or `form` option.\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nIf present in `options` and `options.method` is not set, it will throw a `TypeError`.\n\nThe `content-length` header will be automatically set if `body` is a `string` / `Buffer` / `fs.createReadStream` instance / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n\n###### json\n\nType: `object | Array | number | string | boolean | null` *(JSON-serializable values)*\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nJSON body. If the `Content-Type` header is not set, it will be set to `application/json`.\n\n###### context\n\nType: `object`\n\nUser data. In contrast to other options, `context` is not enumerable.\n\n**Note:** The object is never merged, it's just passed through. Got will not modify the object in any way.\n\nIt's very useful for storing auth tokens:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\toptions => {\n\t\t\t\tif (!options.context && !options.context.token) {\n\t\t\t\t\tthrow new Error('Token required');\n\t\t\t\t}\n\n\t\t\t\toptions.headers.token = options.context.token;\n\t\t\t}\n\t\t]\n\t}\n});\n\n(async () => {\n\tconst context = {\n\t\ttoken: 'secret'\n\t};\n\n\tconst response = await instance('https://httpbin.org/headers', {context});\n\n\t// Let's see the headers\n\tconsole.log(response.body);\n})();\n```\n\n###### responseType\n\nType: `string`<br>\nDefault: `'default'`\n\n**Note:** When using streams, this option is ignored.\n\nParsing method used to retrieve the body from the response.\n\n- `'default'` - Will give a string unless the body is overwritten in a `afterResponse` hook or if `options.decompress` is set to false - Will give a Buffer if the response is compresssed.\n- `'text'` - Will give a string no matter what.\n- `'json'` - Will give an object, unless the body is invalid JSON, then it will throw.\n- `'buffer'` - Will give a Buffer, ignoring `options.encoding`. It will throw if the body is a custom object.\n\nThe promise has `.json()` and `.buffer()` and `.text()` methods which set this option automatically.\n\nExample:\n\n```js\n// This\nconst body = await got(url).json();\n\n// is the same as this\nconst body = await got(url, {responseType: 'json'});\n```\n\n###### resolveBodyOnly\n\nType: `string`<br>\nDefault: `false`\n\nWhen set to `true` the promise will return the [Response body](#body-1) instead of the [Response](#response) object.\n\n###### cookieJar\n\nType: `object` | [`tough.CookieJar` instance](https://github.com/salesforce/tough-cookie#cookiejar)\n\n**Note:** If you provide this option, `options.headers.cookie` will be overridden.\n\nCookie support. You don't have to care about parsing or how to store them. [Example](#cookies).\n\n###### cookieJar.setCookie\n\nType: `Function<Promise>`\n\nThe function takes two arguments: `rawCookie` (`string`) and `url` (`string`).\n\n###### cookieJar.getCookieString\n\nType: `Function<Promise>`\n\nThe function takes one argument: `url` (`string`).\n\n###### ignoreInvalidCookies\n\nType: `boolean`<br>\nDefault: `false`\n\nIgnore invalid cookies instead of throwing an error. Only useful when the `cookieJar` option has been set. Not recommended.\n\n###### encoding\n\nType: `string`<br>\nDefault: `'utf8'`\n\n[Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data.\n\nTo get a [`Buffer`](https://nodejs.org/api/buffer.html), you need to set [`responseType`](#responseType) to `buffer` instead.\n\n###### form\n\nType: `object | true`\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nThe form body is converted to query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n\nIf set to `true` and the `Content-Type` header is not set, it will be set to `application/x-www-form-urlencoded`.\n\n###### searchParams\n\nType: `string | object<string, string | number> | URLSearchParams`\n\nQuery string that will be added to the request URL. This will override the query string in `url`.\n\nIf you need to pass in an array, you can do it using a `URLSearchParams` instance:\n\n```js\nconst got = require('got');\n\nconst searchParams = new URLSearchParams([['key', 'a'], ['key', 'b']]);\n\ngot('https://example.com', {searchParams});\n\nconsole.log(searchParams.toString());\n//=> 'key=a&key=b'\n```\n\nAnd if you need a different array format, you could use the [`query-string`](https://github.com/sindresorhus/query-string) package:\n\n```js\nconst got = require('got');\nconst queryString = require('query-string');\n\nconst searchParams = queryString.stringify({key: ['a', 'b']}, {arrayFormat: 'bracket'});\n\ngot('https://example.com', {searchParams});\n\nconsole.log(searchParams);\n//=> 'key[]=a&key[]=b'\n```\n\n###### timeout\n\nType: `number | object`\n\nMilliseconds to wait for the server to end the response before aborting the request with [`got.TimeoutError`](#gottimeouterror) error (a.k.a. `request` property). By default, there's no timeout.\n\nThis also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n\n- `lookup` starts when a socket is assigned and ends when the hostname has been resolved. Does not apply when using a Unix domain socket.\n- `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n- `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n- `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n- `response` starts when the request has been written to the socket and ends when the response headers are received.\n- `send` starts when the socket is connected and ends with the request has been written to the socket.\n- `request` starts when the request is initiated and ends when the response's end event fires.\n\n###### retry\n\nType: `number | object`<br>\nDefault:\n- limit: `2`\n- calculateDelay: `(attemptCount, retryOptions, error, computedValue) => computedValue`\n- methods: `GET` `PUT` `HEAD` `DELETE` `OPTIONS` `TRACE`\n- statusCodes: [`408`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408) [`413`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413) [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) [`500`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500) [`502`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502) [`503`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503) [`504`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504)\n- maxRetryAfter: `undefined`\n- errorCodes: `ETIMEDOUT` `ECONNRESET` `EADDRINUSE` `ECONNREFUSED` `EPIPE` `ENOTFOUND` `ENETUNREACH` `EAI_AGAIN`\n\nAn object representing `limit`, `calculateDelay`, `methods`, `statusCodes`, `maxRetryAfter` and `errorCodes` fields for maximum retry count, retry handler, allowed methods, allowed status codes, maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time and allowed error codes.\n\n**Note:** When using streams, this option is ignored. If the connection is reset when downloading, you need to catch the error and clear the file you were writing into to prevent duplicated content.\n\nIf `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.<br>\nIf [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n\nDelays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 1).\n\nThe `calculateDelay` property is a `function` with `attemptCount`, `retryOptions`, `error` and `computedValue` arguments for current retry count, the retry options, error and default computed value. The function must return a delay in milliseconds (`0` return value cancels retry).\n\nBy default, it retries *only* on the specified methods, status codes, and on these network errors:\n- `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n- `ECONNRESET`: Connection was forcibly closed by a peer.\n- `EADDRINUSE`: Could not bind to any free port.\n- `ECONNREFUSED`: Connection was refused by the server.\n- `EPIPE`: The remote side of the stream being written has been closed.\n- `ENOTFOUND`: Couldn't resolve the hostname to an IP address.\n- `ENETUNREACH`: No internet connection.\n- `EAI_AGAIN`: DNS lookup timed out.\n\n###### followRedirect\n\nType: `boolean`<br>\nDefault: `true`\n\nDefines if redirect responses should be followed automatically.\n\nNote that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`. This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4).\n\nThis supports [method rewriting](https://tools.ietf.org/html/rfc7231#section-6.4). For example, when sending a POST request and receiving a `302`, it will resend that request to the new location.\n\n###### maxRedirects\n\nType: `number`<br>\nDefault: `10`\n\nIf exceeded, the request will be aborted and a `MaxRedirectsError` will be thrown.\n\n###### decompress\n\nType: `boolean`<br>\nDefault: `true`\n\nDecompress the response automatically. This will set the `accept-encoding` header to `gzip, deflate, br` on Node.js 11.7.0+ or `gzip, deflate` for older Node.js versions, unless you set it yourself.\n\nBrotli (`br`) support requires Node.js 11.7.0 or later.\n\nIf this is disabled, a compressed response is returned as a `Buffer`. This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n\n###### cache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached response data.\n\n###### dnsCache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached DNS data.\n\n###### request\n\nType: `Function`<br>\nDefault: `http.request` `https.request` *(Depending on the protocol)*\n\nCustom request function. The main purpose of this is to [support HTTP2 using a wrapper](#experimental-http2-support).\n\n###### useElectronNet\n\nType: `boolean`<br>\nDefault: `false`\n\nWhen used in Electron, Got will use [`electron.net`](https://electronjs.org/docs/api/net/) instead of the Node.js `http` module. According to the Electron docs, it should be fully compatible, but it's not entirely. See [#443](https://github.com/sindresorhus/got/issues/443) and [#461](https://github.com/sindresorhus/got/issues/461).\n\n###### throwHttpErrors\n\nType: `boolean`<br>\nDefault: `true`\n\nDetermines if a `got.HTTPError` is thrown for error responses (non-2xx status codes).\n\nIf this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing. This may be useful if you are checking for resource availability and are expecting error responses.\n\n###### agent\n\nSame as the [`agent` option](https://nodejs.org/api/http.html#http_http_request_url_options_callback) for `http.request`, but with an extra feature:\n\nIf you require different agents for different protocols, you can pass a map of agents to the `agent` option. This is necessary because a request to one protocol might redirect to another. In such a scenario, Got will switch over to the right protocol agent for you.\n\n```js\nconst got = require('got');\nconst HttpAgent = require('agentkeepalive');\nconst {HttpsAgent} = HttpAgent;\n\ngot('https://sindresorhus.com', {\n\tagent: {\n\t\thttp: new HttpAgent(),\n\t\thttps: new HttpsAgent()\n\t}\n});\n```\n\n###### hooks\n\nType: `object<string, Function[]>`\n\nHooks allow modifications during the request lifecycle. Hook functions may be async and are run serially.\n\n###### hooks.init\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with plain [request options](#options), right before their normalization. This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when the input needs custom handling.\n\nSee the [Request migration guide](documentation/migration-guides.md#breaking-changes) for an example.\n\n**Note:** This hook must be synchronous!\n\n###### hooks.beforeRequest\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options). Got will make no further changes to the request before it is sent (except the body serialization). This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when you want to create an API client that, for example, uses HMAC-signing.\n\nSee the [AWS section](#aws) for an example.\n\n###### hooks.beforeRedirect\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options) and the redirect [response](#response). Got will make no further changes to the request. This is especially useful when you want to avoid dead sites. Example:\n\n```js\nconst got = require('got');\n\ngot('https://example.com', {\n\thooks: {\n\t\tbeforeRedirect: [\n\t\t\t(options, response) => {\n\t\t\t\tif (options.hostname === 'deadSite') {\n\t\t\t\t\toptions.hostname = 'fallbackSite';\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.beforeRetry\n\nType: `Function[]`<br>\nDefault: `[]`\n\n**Note:** When using streams, this hook is ignored.\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options), the error and the retry count. Got will make no further changes to the request. This is especially useful when some extra work is required before the next try. Example:\n\n```js\nconst got = require('got');\n\ngot.post('https://example.com', {\n\thooks: {\n\t\tbeforeRetry: [\n\t\t\t(options, error, retryCount) => {\n\t\t\t\tif (error.statusCode === 413) { // Payload too large\n\t\t\t\t\toptions.body = getNewBody();\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n**Note:** When retrying in a `afterResponse` hook, all remaining `beforeRetry` hooks will be called without the `error` and `retryCount` arguments.\n\n###### hooks.afterResponse\n\nType: `Function[]`<br>\nDefault: `[]`\n\n**Note:** When using streams, this hook is ignored.\n\nCalled with [response object](#response) and a retry function. Calling the retry function will trigger `beforeRetry` hooks.\n\nEach function should return the response. This is especially useful when you want to refresh an access token. Example:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tafterResponse: [\n\t\t\t(response, retryWithMergedOptions) => {\n\t\t\t\tif (response.statusCode === 401) { // Unauthorized\n\t\t\t\t\tconst updatedOptions = {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\ttoken: getNewToken() // Refresh the access token\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Save for further requests\n\t\t\t\t\tinstance.defaults.options = got.mergeOptions(instance.defaults.options, updatedOptions);\n\n\t\t\t\t\t// Make a new retry\n\t\t\t\t\treturn retryWithMergedOptions(updatedOptions);\n\t\t\t\t}\n\n\t\t\t\t// No changes otherwise\n\t\t\t\treturn response;\n\t\t\t}\n\t\t],\n\t\tbeforeRetry: [\n\t\t\t(options, error, retryCount) => {\n\t\t\t\t// This will be called on `retryWithMergedOptions(...)`\n\t\t\t}\n\t\t]\n\t},\n\tmutableDefaults: true\n});\n```\n\n###### hooks.beforeError\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with an `Error` instance. The error is passed to the hook right before it's thrown. This is especially useful when you want to have more detailed errors.\n\n**Note:** Errors thrown while normalizing input options are thrown directly and not part of this hook.\n\n```js\nconst got = require('got');\n\ngot('https://api.github.com/some-endpoint', {\n\thooks: {\n\t\tbeforeError: [\n\t\t\terror => {\n\t\t\t\tconst {response} = error;\n \t\t\t\tif (response && response.body) {\n\t\t\t\t\terror.name = 'GitHubError';\n\t\t\t\t\terror.message = `${response.body.message} (${error.statusCode})`;\n\t\t\t\t}\n\n \t\t\t\treturn error;\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n#### Response\n\nThe response object will typically be a [Node.js HTTP response stream](https://nodejs.org/api/http.html#http_class_http_incomingmessage), however, if returned from the cache it will be a [response-like object](https://github.com/lukechilds/responselike) which behaves in the same way.\n\n##### request\n\nType: `object`\n\n**Note:** This is not a [http.ClientRequest](https://nodejs.org/api/http.html#http_class_http_clientrequest).\n\n- `options` - The Got options that were set on this request.\n\n##### body\n\nType: `string | object | Buffer` *(Depending on `options.responseType`)*\n\nThe result of the request.\n\n##### url\n\nType: `string`\n\nThe request URL or the final URL after redirects.\n\n##### ip\n\nType: `string`\n\nThe remote IP address.\n\n**Note:** Not available when the response is cached. This is hopefully a temporary limitation, see [lukechilds/cacheable-request#86](https://github.com/lukechilds/cacheable-request/issues/86).\n\n##### requestUrl\n\nType: `string`\n\nThe original request URL.\n\n##### timings\n\nType: `object`\n\nThe object contains the following properties:\n\n- `start` - Time when the request started.\n- `socket` - Time when a socket was assigned to the request.\n- `lookup` - Time when the DNS lookup finished.\n- `connect` - Time when the socket successfully connected.\n- `upload` - Time when the request finished uploading.\n- `response` - Time when the request fired the `response` event.\n- `end` - Time when the response fired the `end` event.\n- `error` - Time when the request fired the `error` event.\n- `phases`\n\t- `wait` - `timings.socket - timings.start`\n\t- `dns` - `timings.lookup - timings.socket`\n\t- `tcp` - `timings.connect - timings.lookup`\n\t- `request` - `timings.upload - timings.connect`\n\t- `firstByte` - `timings.response - timings.upload`\n\t- `download` - `timings.end - timings.response`\n\t- `total` - `timings.end - timings.start` or `timings.error - timings.start`\n\n**Note:** The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n\n##### isFromCache\n\nType: `boolean`\n\nWhether the response was retrieved from the cache.\n\n##### redirectUrls\n\nType: `string[]`\n\nThe redirect URLs.\n\n##### retryCount\n\nType: `number`\n\nThe number of times the request was retried.\n\n#### Streams\n\n**Note:** Progress events, redirect events and request/response events can also be used with promises.\n\n**Note:** To access `response.isFromCache` you need to use `got.stream(url, options).isFromCache`. The value will be undefined until the `response` event.\n\n#### got.stream(url, [options])\n\nSets `options.isStream` to `true`.\n\nReturns a [duplex stream](https://nodejs.org/api/stream.html#stream_class_stream_duplex) with additional events:\n\n##### .on('request', request)\n\n`request` event to get the request object of the request.\n\n**Tip:** You can use `request` event to abort request:\n\n```js\ngot.stream('https://github.com')\n\t.on('request', request => setTimeout(() => request.abort(), 50));\n```\n\n##### .on('response', response)\n\nThe `response` event to get the response object of the final request.\n\n##### .on('redirect', response, nextOptions)\n\nThe `redirect` event to get the response object of a redirect. The second argument is options for the next request to the redirect location.\n\n##### .on('uploadProgress', progress)\n##### .on('downloadProgress', progress)\n\nProgress events for uploading (sending a request) and downloading (receiving a response). The `progress` argument is an object like:\n\n```js\n{\n\tpercent: 0.1,\n\ttransferred: 1024,\n\ttotal: 10240\n}\n```\n\nIf it's not possible to retrieve the body size (can happen when streaming), `total` will be `undefined`.\n\n```js\n(async () => {\n\tconst response = await got('https://sindresorhus.com')\n\t\t.on('downloadProgress', progress => {\n\t\t\t// Report download progress\n\t\t})\n\t\t.on('uploadProgress', progress => {\n\t\t\t// Report upload progress\n\t\t});\n\n\tconsole.log(response);\n})();\n```\n\n##### .on('error', error, body, response)\n\nThe `error` event emitted in case of a protocol error (like `ENOTFOUND` etc.) or status error (4xx or 5xx). The second argument is the body of the server response in case of status error. The third argument is a response object.\n\n#### got.get(url, [options])\n#### got.post(url, [options])\n#### got.put(url, [options])\n#### got.patch(url, [options])\n#### got.head(url, [options])\n#### got.delete(url, [options])\n\nSets `options.method` to the method name and makes a request.\n\n### Instances\n\n#### got.extend(...options)\n\nConfigure a new `got` instance with default `options`. The `options` are merged with the parent instance's `defaults.options` using [`got.mergeOptions`](#gotmergeoptionsparentoptions-newoptions). You can access the resolved options with the `.defaults` property on the instance.\n\n```js\nconst client = got.extend({\n\tprefixUrl: 'https://example.com',\n\theaders: {\n\t\t'x-unicorn': 'rainbow'\n\t}\n});\n\nclient.get('/demo');\n\n/* HTTP Request =>\n * GET /demo HTTP/1.1\n * Host: example.com\n * x-unicorn: rainbow\n */\n```\n\n```js\n(async () => {\n\tconst client = got.extend({\n\t\tprefixUrl: 'httpbin.org',\n\t\theaders: {\n\t\t\t'x-foo': 'bar'\n\t\t}\n\t});\n\tconst {headers} = await client.get('/headers').json();\n\t//=> headers['x-foo'] === 'bar'\n\n\tconst jsonClient = client.extend({\n\t\tresponseType: 'json',\n\t\tresolveBodyOnly: true,\n\t\theaders: {\n\t\t\t'x-baz': 'qux'\n\t\t}\n\t});\n\tconst {headers: headers2} = await jsonClient.get('/headers');\n\t//=> headers2['x-foo'] === 'bar'\n\t//=> headers2['x-baz'] === 'qux'\n})();\n```\n\nAdditionally, `got.extend()` accepts two properties from the `defaults` object: `mutableDefaults` and `handlers`. Example:\n\n```js\n// You can now modify `mutableGot.defaults.options`.\nconst mutableGot = got.extend({mutableDefaults: true});\n\nconst mergedHandlers = got.extend({\n\thandlers: [\n\t\t(options, next) => {\n\t\t\tdelete options.headers.referer;\n\n\t\t\treturn next(options);\n\t\t}\n\t]\n});\n```\n\n**Note:** Handlers can be asynchronous. The recommended approach is:\n\n```js\nconst handler = (options, next) => {\n\tif (options.stream) {\n\t\t// It's a Stream\n\t\treturn next(options);\n\t}\n\n\t// It's a Promise\n\treturn (async () => {\n\t\ttry {\n\t\t\tconst response = await next(options);\n\t\t\tresponse.yourOwnProperty = true;\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\t// Every error will be replaced by this one.\n\t\t\t// Before you receive any error here,\n\t\t\t// it will be passed to the `beforeError` hooks first.\n\t\t\t// Note: this one won't be passed to `beforeError` hook. It's final.\n\t\t\tthrow new Error('Your very own error.');\n\t\t}\n\t})();\n};\n\nconst instance = got.extend({handlers: [handler]});\n```\n\n#### got.extend(...instances)\n\nMerges many instances into a single one:\n- options are merged using [`got.mergeOptions()`](#gotmergeoptionsparentoptions-newoptions) (+ hooks are merged too),\n- handlers are stored in an array (you can access them through `instance.defaults.handlers`).\n\n#### got.extend(...options, ...instances, ...)\n\nIt's possible to combine options and instances.<br>\nIt gives the same effect as `got.extend(...options).extend(...instances)`:\n\n```js\nconst a = {headers: {cat: 'meow'}};\nconst b = got.create({\n\toptions: {\n\t\theaders: {\n\t\t\tcow: 'moo'\n\t\t}\n\t}\n});\n\n// The same as `got.extend(a).extend(b)`.\n// Note `a` is options and `b` is an instance.\ngot.extend(a, b);\n//=> {headers: {cat: 'meow', cow: 'moo'}}\n```\n\n#### got.mergeOptions(parentOptions, newOptions)\n\nExtends parent options. Avoid using [object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals) as it doesn't work recursively:\n\n```js\nconst a = {headers: {cat: 'meow', wolf: ['bark', 'wrrr']}};\nconst b = {headers: {cow: 'moo', wolf: ['auuu']}};\n\n{...a, ...b}            // => {headers: {cow: 'moo', wolf: ['auuu']}}\ngot.mergeOptions(a, b)  // => {headers: {cat: 'meow', cow: 'moo', wolf: ['auuu']}}\n```\n\nOptions are deeply merged to a new object. The value of each key is determined as follows:\n\n- If the new property is set to `undefined`, it keeps the old one.\n- If both properties are an instances of `URLSearchParams`, a new URLSearchParams instance is created. The values are merged using [`urlSearchParams.append(key, value)`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/append).\n- If the parent property is an instance of `URL` and the new value is a `string` or `URL`, a new URL instance is created: [`new URL(new, parent)`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#Syntax).\n- If the new property is a plain `object`:\n\t- If the parent property is a plain `object` too, both values are merged recursively into a new `object`.\n\t- Otherwise, only the new value is deeply cloned.\n- If the new property is an `Array`, it overwrites the old one with a deep clone of the new property.\n- Otherwise, the new value is assigned to the key.\n\n#### got.defaults\n\nType: `object`\n\nThe Got defaults used in that instance.\n\n##### [options](#options)\n\n##### handlers\n\nType: `Function[]`<br>\nDefault: `[]`\n\nAn array of functions. You execute them directly by calling `got()`. They are some sort of \"global hooks\" - these functions are called first. The last handler (*it's hidden*) is either [`asPromise`](source/as-promise.ts) or [`asStream`](source/as-stream.ts), depending on the `options.isStream` property.\n\nEach handler takes two arguments:\n\n###### [options](#options)\n\n###### next()\n\nReturns a `Promise` or a `Stream` depending on [`options.isStream`](#isstream).\n\n```js\nconst settings = {\n\thandlers: [\n\t\t(options, next) => {\n\t\t\tif (options.isStream) {\n\t\t\t\t// It's a Stream, so we can perform stream-specific actions on it\n\t\t\t\treturn next(options)\n\t\t\t\t\t.on('request', request => {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\trequest.abort();\n\t\t\t\t\t\t}, 50);\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\t// It's a Promise\n\t\t\treturn next(options);\n\t\t}\n\t],\n\toptions: got.mergeOptions(got.defaults.options, {\n\t\tresponseType: 'json'\n\t})\n};\n\nconst jsonGot = got.create(settings);\n```\n\n##### mutableDefaults\n\nType: `boolean`<br>\nDefault: `false`\n\nA read-only boolean describing whether the defaults are mutable or not. If set to `true`, you can [update headers over time](#hooksafterresponse), for example, update an access token when it expires.\n\n## Errors\n\nEach error contains an `options` property which are the options Got used to create a request - just to make debugging easier.\n\n#### got.CacheError\n\nWhen a cache method fails, for example, if the database goes down or there's a filesystem error.\n\n#### got.RequestError\n\nWhen a request fails. Contains a `code` property with error class code, like `ECONNREFUSED`.\n\n#### got.ReadError\n\nWhen reading from response stream fails.\n\n#### got.ParseError\n\nWhen server response code is 2xx, and parsing body fails. Includes a `response` property.\n\n#### got.HTTPError\n\nWhen the server response code is not 2xx. Includes a `response` property.\n\n#### got.MaxRedirectsError\n\nWhen the server redirects you more than ten times. Includes a `response` property.\n\n#### got.UnsupportedProtocolError\n\nWhen given an unsupported protocol.\n\n#### got.CancelError\n\nWhen the request is aborted with `.cancel()`.\n\n#### got.TimeoutError\n\nWhen the request is aborted due to a [timeout](#timeout). Includes an `event` and `timings` property.\n\n## Aborting the request\n\nThe promise returned by Got has a [`.cancel()`](https://github.com/sindresorhus/p-cancelable) method which when called, aborts the request.\n\n```js\n(async () => {\n\tconst request = got(url, options);\n\n\t// …\n\n\t// In another part of the code\n\tif (something) {\n\t\trequest.cancel();\n\t}\n\n\t// …\n\n\ttry {\n\t\tawait request;\n\t} catch (error) {\n\t\tif (request.isCanceled) { // Or `error instanceof got.CancelError`\n\t\t\t// Handle cancelation\n\t\t}\n\n\t\t// Handle other errors\n\t}\n})();\n```\n\nWhen using hooks, simply throw an error to abort the request.\n\n```js\n(async () => {\n\tconst request = got(url, {\n\t\thooks: {\n\t\t\tbeforeRequest: [\n\t\t\t\t() => {\n\t\t\t\t\tthrow new Error('Oops. Request canceled.');\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t});\n\n\ttry {\n\t\tawait request;\n\t} catch (error) {\n\t\t// …\n\t}\n})();\n```\n\n<a name=\"cache-adapters\"></a>\n## Cache\n\nGot implements [RFC 7234](http://httpwg.org/specs/rfc7234.html) compliant HTTP caching which works out of the box in-memory and is easily pluggable with a wide range of storage adapters. Fresh cache entries are served directly from the cache, and stale cache entries are revalidated with `If-None-Match`/`If-Modified-Since` headers. You can read more about the underlying cache behavior in the [`cacheable-request` documentation](https://github.com/lukechilds/cacheable-request). For DNS cache, Got uses [`cacheable-lookup`](https://github.com/szmarczak/cacheable-lookup).\n\nYou can use the JavaScript `Map` type as an in-memory cache:\n\n```js\nconst got = require('got');\nconst map = new Map();\n\n(async () => {\n\t\tlet response = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> false\n\n\t\tresponse = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> true\n})();\n```\n\nGot uses [Keyv](https://github.com/lukechilds/keyv) internally to support a wide range of storage adapters. For something more scalable you could use an [official Keyv storage adapter](https://github.com/lukechilds/keyv#official-storage-adapters):\n\n```\n$ npm install @keyv/redis\n```\n\n```js\nconst got = require('got');\nconst KeyvRedis = require('@keyv/redis');\n\nconst redis = new KeyvRedis('redis://user:pass@localhost:6379');\n\ngot('https://sindresorhus.com', {cache: redis});\n```\n\nGot supports anything that follows the Map API, so it's easy to write your own storage adapter or use a third-party solution.\n\nFor example, the following are all valid storage adapters:\n\n```js\nconst storageAdapter = new Map();\n// Or\nconst storageAdapter = require('./my-storage-adapter');\n// Or\nconst QuickLRU = require('quick-lru');\nconst storageAdapter = new QuickLRU({maxSize: 1000});\n\ngot('https://sindresorhus.com', {cache: storageAdapter});\n```\n\nView the [Keyv docs](https://github.com/lukechilds/keyv) for more information on how to use storage adapters.\n\n\n## Proxies\n\nYou can use the [`tunnel`](https://github.com/koichik/node-tunnel) package with the `agent` option to work with proxies:\n\n```js\nconst got = require('got');\nconst tunnel = require('tunnel');\n\ngot('https://sindresorhus.com', {\n\tagent: tunnel.httpOverHttp({\n\t\tproxy: {\n\t\t\thost: 'localhost'\n\t\t}\n\t})\n});\n```\n\nAlternatively, use [`global-agent`](https://github.com/gajus/global-agent) to configure a global proxy for all HTTP/HTTPS traffic in your program.\n\n\n## Cookies\n\nYou can use the [`tough-cookie`](https://github.com/salesforce/tough-cookie) package:\n\n```js\nconst {promisify} = require('util');\nconst got = require('got');\nconst {CookieJar} = require('tough-cookie');\n\n(async () => {\n\tconst cookieJar = new CookieJar();\n\tconst setCookie = promisify(cookieJar.setCookie.bind(cookieJar));\n\n\tawait setCookie('foo=bar', 'https://example.com');\n\tawait got('https://example.com', {cookieJar});\n})();\n```\n\n\n## Form data\n\nYou can use the [`form-data`](https://github.com/form-data/form-data) package to create POST request with form data:\n\n```js\nconst fs = require('fs');\nconst got = require('got');\nconst FormData = require('form-data');\n\nconst form = new FormData();\n\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\ngot.post('https://example.com', {\n\tbody: form\n});\n```\n\n\n## OAuth\n\nYou can use the [`oauth-1.0a`](https://github.com/ddo/oauth-1.0a) package to create a signed OAuth request:\n\n```js\nconst got = require('got');\nconst crypto  = require('crypto');\nconst OAuth = require('oauth-1.0a');\n\nconst oauth = OAuth({\n\tconsumer: {\n\t\tkey: process.env.CONSUMER_KEY,\n\t\tsecret: process.env.CONSUMER_SECRET\n\t},\n\tsignature_method: 'HMAC-SHA1',\n\thash_function: (baseString, key) => crypto.createHmac('sha1', key).update(baseString).digest('base64')\n});\n\nconst token = {\n\tkey: process.env.ACCESS_TOKEN,\n\tsecret: process.env.ACCESS_TOKEN_SECRET\n};\n\nconst url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';\n\ngot(url, {\n\theaders: oauth.toHeader(oauth.authorize({url, method: 'GET'}, token)),\n\tresponseType: 'json'\n});\n```\n\n\n## Unix Domain Sockets\n\nRequests can also be sent via [unix domain sockets](http://serverfault.com/questions/124517/whats-the-difference-between-unix-socket-and-tcp-ip-socket). Use the following URL scheme: `PROTOCOL://unix:SOCKET:PATH`.\n\n- `PROTOCOL` - `http` or `https` *(optional)*\n- `SOCKET` - Absolute path to a unix domain socket, for example: `/var/run/docker.sock`\n- `PATH` - Request path, for example: `/v2/keys`\n\n```js\ngot('http://unix:/var/run/docker.sock:/containers/json');\n\n// Or without protocol (HTTP by default)\ngot('unix:/var/run/docker.sock:/containers/json');\n```\n\n\n## AWS\n\nRequests to AWS services need to have their headers signed. This can be accomplished by using the [`aws4`](https://www.npmjs.com/package/aws4) package. This is an example for querying an [\"API Gateway\"](https://docs.aws.amazon.com/apigateway/api-reference/signing-requests/) with a signed request.\n\n```js\nconst got = require('got');\nconst AWS = require('aws-sdk');\nconst aws4 = require('aws4');\n\nconst chain = new AWS.CredentialProviderChain();\n\n// Create a Got instance to use relative paths and signed requests\nconst awsClient = got.extend({\n\tprefixUrl: 'https://<api-id>.execute-api.<api-region>.amazonaws.com/<stage>/',\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\tasync options => {\n\t\t\t\tconst credentials = await chain.resolvePromise();\n\t\t\t\taws4.sign(options, credentials);\n\t\t\t}\n\t\t]\n\t}\n});\n\nconst response = await awsClient('endpoint/path', {\n\t// Request-specific options\n});\n```\n\n\n## Testing\n\nYou can test your requests by using the [`nock`](https://github.com/node-nock/nock) package to mock an endpoint:\n\n```js\nconst got = require('got');\nconst nock = require('nock');\n\nnock('https://sindresorhus.com')\n\t.get('/')\n\t.reply(200, 'Hello world!');\n\n(async () => {\n\tconst response = await got('https://sindresorhus.com');\n\tconsole.log(response.body);\n\t//=> 'Hello world!'\n})();\n```\n\nFor real integration testing we recommend using [`ava`](https://github.com/avajs/ava) with [`create-test-server`](https://github.com/lukechilds/create-test-server). We're using a macro so we don't have to `server.listen()` and `server.close()` every test. Take a look at one of our tests:\n\n```js\ntest('retry function gets iteration count', withServer, async (t, server, got) => {\n\tlet knocks = 0;\n\tserver.get('/', (request, response) => {\n\t\tif (knocks++ === 1) {\n\t\t\tresponse.end('who`s there?');\n\t\t}\n\t});\n\n\tawait got({\n\t\tretry: {\n\t\t\tcalculateDelay: ({attemptCount}) => {\n\t\t\t\tt.true(is.number(attemptCount));\n\t\t\t\treturn attemptCount < 2;\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\n\n## Tips\n\n### JSON mode\n\nTo pass an object as the body, you need to use the `json` option. It will be stringified using `JSON.stringify`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst {body} = await got.post('https://httpbin.org/anything', {\n\t\tjson: {\n\t\t\thello: 'world'\n\t\t},\n\t\tresponseType: 'json'\n\t});\n\n\tconsole.log(body.data);\n\t//=> '{\"hello\":\"world\"}'\n})();\n```\n\nTo receive a JSON body you can either set `responseType` option to `json` or use `promise.json()`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst body = await got.post('https://httpbin.org/anything', {\n\t\tbody: {\n\t\t\thello: 'world'\n\t\t}\n\t}).json();\n\n\tconsole.log(body);\n\t//=> {…}\n})();\n```\n\n### User Agent\n\nIt's a good idea to set the `'user-agent'` header so the provider can more easily see how their resource is used. By default, it's the URL to this repo. You can omit this header by setting it to `undefined`.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': undefined\n\t}\n});\n```\n\n### 304 Responses\n\nBear in mind; if you send an `if-modified-since` header and receive a `304 Not Modified` response, the body will be empty. It's your responsibility to cache and retrieve the body contents.\n\n### Custom endpoints\n\nUse `got.extend()` to make it nicer to work with REST APIs. Especially if you use the `prefixUrl` option.\n\n**Note:** Not to be confused with [`got.create()`](documentation/advanced-creation.md), which has no defaults.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\nconst custom = got.extend({\n\tprefixUrl: 'example.com',\n\tresponseType: 'json',\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\n// Use `custom` exactly how you use `got`\n(async () => {\n\tconst list = await custom('/v1/users/list');\n})();\n```\n\n### Experimental HTTP2 support\n\nGot provides an experimental support for HTTP2 using the [`http2-wrapper`](https://github.com/szmarczak/http2-wrapper) package:\n\n```js\nconst got = require('got');\nconst {request} = require('http2-wrapper');\n\nconst h2got = got.extend({request});\n\n(async () => {\n\tconst {body} = await h2got('https://nghttp2.org/httpbin/headers');\n\tconsole.log(body);\n})();\n```\n\n## Comparison\n\n|                       |       `got`      | [`request`][r0] |  [`node-fetch`][n0]  |    [`ky`][k0]     |  [`axios`][a0]   |  [`superagent`][s0]  |\n|-----------------------|:----------------:|:---------------:|:--------------------:|:-----------------:|:----------------:|:--------------------:|\n| HTTP/2 support        |        ❔        |        ❌       |          ❌         |         ❌        |        ❌       |          ✔️\\*\\*      |\n| Browser support       |        ❌       |        ❌       |          ✔️\\*       |         ✔️        |        ✔️       |          ✔️          |\n| Electron support      |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Promise API           |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Stream API            |        ✔️       |        ✔️       |     Node.js only     |         ❌        |        ❌       |          ✔️          |\n| Request cancelation   |        ✔️       |        ❌       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| RFC compliant caching |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Cookies (out-of-box)  |        ✔️       |        ✔️       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Follows redirects     |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Retries on failure    |        ✔️       |        ❌       |          ❌         |         ✔️        |        ❌       |          ✔️          |\n| Progress events       |        ✔️       |        ❌       |          ❌         |         ✔️\\*\\*\\*  |   Browser only   |          ✔️          |\n| Handles gzip/deflate  |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Advanced timeouts     |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Timings               |        ✔️       |        ✔️       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Errors with metadata  |        ✔️       |        ❌       |          ❌         |         ✔️        |        ✔️       |          ❌          |\n| JSON mode             |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Custom defaults       |        ✔️       |        ✔️       |          ❌         |         ✔️        |        ✔️       |          ❌          |\n| Composable            |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ✔️          |\n| Hooks                 |        ✔️       |        ❌       |          ❌         |         ✔️        |        ✔️       |          ❌          |\n| Issues open           |  [![][gio]][g1]  | [![][rio]][r1]  |    [![][nio]][n1]    |   [![][kio]][k1]  |  [![][aio]][a1] |    [![][sio]][s1]     |\n| Issues closed         |  [![][gic]][g2]  | [![][ric]][r2]  |    [![][nic]][n2]    |   [![][kic]][k2]  |  [![][aic]][a2] |    [![][sic]][s2]     |\n| Downloads             |  [![][gd]][g3]   |  [![][rd]][r3]  |    [![][nd]][n3]     |   [![][kd]][k3]   |  [![][ad]][a3]  |    [![][sd]][s3]      |\n| Coverage              |  [![][gc]][g4]   |  [![][rc]][r4]  |    [![][nc]][n4]     |   [![][kc]][k4]   |  [![][ac]][a4]  |    [![][sc]][s4]      |\n| Build                 |  [![][gb]][g5]   |  [![][rb]][r5]  |    [![][nb]][n5]     |   [![][kb]][k5]   |  [![][ab]][a5]  |    [![][sb]][s5]      |\n| Bugs                  |  [![][gbg]][g6]  | [![][rbg]][r6]  |    [![][nbg]][n6]    |   [![][kbg]][k6]  |  [![][abg]][a6] |    [![][sbg]][s6]     |\n| Dependents            |  [![][gdp]][g7]  | [![][rdp]][r7]  |    [![][ndp]][n7]    |   [![][kdp]][k7]  |  [![][adp]][a7] |    [![][sdp]][s7]     |\n| Install size          |  [![][gis]][g8]  | [![][ris]][r8]  |    [![][nis]][n8]    |   [![][kis]][k8]  |  [![][ais]][a8] |    [![][sis]][s8]     |\n\n\\* It's almost API compatible with the browser `fetch` API.<br>\n\\*\\* Need to switch the protocol manually.<br>\n\\*\\*\\* Currently, only 'DownloadProgress' event is supported, 'UploadProgress' event is not supported.<br>\n❔ Experimental support.\n\n<!-- GITHUB -->\n[k0]: https://github.com/sindresorhus/ky\n[r0]: https://github.com/request/request\n[n0]: https://github.com/bitinn/node-fetch\n[a0]: https://github.com/axios/axios\n[s0]: https://github.com/visionmedia/superagent\n\n<!-- ISSUES OPEN -->\n[gio]: https://badgen.net/github/open-issues/sindresorhus/got?label\n[kio]: https://badgen.net/github/open-issues/sindresorhus/ky?label\n[rio]: https://badgen.net/github/open-issues/request/request?label\n[nio]: https://badgen.net/github/open-issues/bitinn/node-fetch?label\n[aio]: https://badgen.net/github/open-issues/axios/axios?label\n[sio]: https://badgen.net/github/open-issues/visionmedia/superagent?label\n\n[g1]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[k1]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[r1]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[n1]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[a1]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[s1]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n\n<!-- ISSUES CLOSED -->\n[gic]: https://badgen.net/github/closed-issues/sindresorhus/got?label\n[kic]: https://badgen.net/github/closed-issues/sindresorhus/ky?label\n[ric]: https://badgen.net/github/closed-issues/request/request?label\n[nic]: https://badgen.net/github/closed-issues/bitinn/node-fetch?label\n[aic]: https://badgen.net/github/closed-issues/axios/axios?label\n[sic]: https://badgen.net/github/closed-issues/visionmedia/superagent?label\n\n[g2]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[k2]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[r2]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[n2]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[a2]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[s2]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n\n<!-- DOWNLOADS -->\n[gd]: https://badgen.net/npm/dm/got?label\n[kd]: https://badgen.net/npm/dm/ky?label\n[rd]: https://badgen.net/npm/dm/request?label\n[nd]: https://badgen.net/npm/dm/node-fetch?label\n[ad]: https://badgen.net/npm/dm/axios?label\n[sd]: https://badgen.net/npm/dm/superagent?label\n\n[g3]: https://www.npmjs.com/package/got\n[k3]: https://www.npmjs.com/package/ky\n[r3]: https://www.npmjs.com/package/request\n[n3]: https://www.npmjs.com/package/node-fetch\n[a3]: https://www.npmjs.com/package/axios\n[s3]: https://www.npmjs.com/package/superagent\n\n<!-- COVERAGE -->\n[gc]: https://badgen.net/coveralls/c/github/sindresorhus/got?label\n[kc]: https://badgen.net/codecov/c/github/sindresorhus/ky?label\n[rc]: https://badgen.net/coveralls/c/github/request/request?label\n[nc]: https://badgen.net/coveralls/c/github/bitinn/node-fetch?label\n[ac]: https://badgen.net/coveralls/c/github/mzabriskie/axios?label\n[sc]: https://badgen.net/codecov/c/github/visionmedia/superagent?label\n\n[g4]: https://coveralls.io/github/sindresorhus/got\n[k4]: https://codecov.io/gh/sindresorhus/ky\n[r4]: https://coveralls.io/github/request/request\n[n4]: https://coveralls.io/github/bitinn/node-fetch\n[a4]: https://coveralls.io/github/mzabriskie/axios\n[s4]: https://codecov.io/gh/visionmedia/superagent\n\n<!-- BUILD -->\n[gb]: https://badgen.net/travis/sindresorhus/got?label\n[kb]: https://badgen.net/travis/sindresorhus/ky?label\n[rb]: https://badgen.net/travis/request/request?label\n[nb]: https://badgen.net/travis/bitinn/node-fetch?label\n[ab]: https://badgen.net/travis/axios/axios?label\n[sb]: https://badgen.net/travis/visionmedia/superagent?label\n\n[g5]: https://travis-ci.org/sindresorhus/got\n[k5]: https://travis-ci.org/sindresorhus/ky\n[r5]: https://travis-ci.org/request/request\n[n5]: https://travis-ci.org/bitinn/node-fetch\n[a5]: https://travis-ci.org/axios/axios\n[s5]: https://travis-ci.org/visionmedia/superagent\n\n<!-- BUGS -->\n[gbg]: https://badgen.net/github/label-issues/sindresorhus/got/bug/open?label\n[kbg]: https://badgen.net/github/label-issues/sindresorhus/ky/bug/open?label\n[rbg]: https://badgen.net/github/label-issues/request/request/Needs%20investigation/open?label\n[nbg]: https://badgen.net/github/label-issues/bitinn/node-fetch/bug/open?label\n[abg]: https://badgen.net/github/label-issues/axios/axios/type:bug/open?label\n[sbg]: https://badgen.net/github/label-issues/visionmedia/superagent/Bug/open?label\n\n[g6]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[k6]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[r6]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A\"Needs+investigation\"\n[n6]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[a6]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Atype:bug\n[s6]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3ABug\n\n<!-- DEPENDENTS -->\n[gdp]: https://badgen.net/npm/dependents/got?label\n[kdp]: https://badgen.net/npm/dependents/ky?label\n[rdp]: https://badgen.net/npm/dependents/request?label\n[ndp]: https://badgen.net/npm/dependents/node-fetch?label\n[adp]: https://badgen.net/npm/dependents/axios?label\n[sdp]: https://badgen.net/npm/dependents/superagent?label\n\n[g7]: https://www.npmjs.com/package/got?activeTab=dependents\n[k7]: https://www.npmjs.com/package/ky?activeTab=dependents\n[r7]: https://www.npmjs.com/package/request?activeTab=dependents\n[n7]: https://www.npmjs.com/package/node-fetch?activeTab=dependents\n[a7]: https://www.npmjs.com/package/axios?activeTab=dependents\n[s7]: https://www.npmjs.com/package/visionmedia?activeTab=dependents\n\n<!-- INSTALL SIZE -->\n[gis]: https://badgen.net/packagephobia/install/got?label\n[kis]: https://badgen.net/packagephobia/install/ky?label\n[ris]: https://badgen.net/packagephobia/install/request?label\n[nis]: https://badgen.net/packagephobia/install/node-fetch?label\n[ais]: https://badgen.net/packagephobia/install/axios?label\n[sis]: https://badgen.net/packagephobia/install/superagent?label\n\n[g8]: https://packagephobia.now.sh/result?p=got\n[k8]: https://packagephobia.now.sh/result?p=ky\n[r8]: https://packagephobia.now.sh/result?p=request\n[n8]: https://packagephobia.now.sh/result?p=node-fetch\n[a8]: https://packagephobia.now.sh/result?p=axios\n[s8]: https://packagephobia.now.sh/result?p=superagent\n\n#### Install size of the dependencies\n\n|                   Dependency                   |          Install size         |\n|------------------------------------------------|-------------------------------|\n| [@sindresorhus/is][url-is]                     | ![][size-is]                  |\n| [@szmarczak/http-timer][url-http-timer]        | ![][size-http-timer]          |\n| [cacheable-request][url-cacheable-request]     | ![][size-cacheable-request]   |\n| [decompress-response][url-decompress-response] | ![][size-decompress-response] |\n| [duplexer3][url-duplexer3]                     | ![][size-duplexer3]           |\n| [get-stream][url-get-stream]                   | ![][size-get-stream]          |\n| [lowercase-keys][url-lowercase-keys]           | ![][size-lowercase-keys]      |\n| [mimic-response][url-mimic-response]           | ![][size-mimic-response]      |\n| [p-cancelable][url-p-cancelable]               | ![][size-p-cancelable]        |\n| [to-readable-stream][url-to-readable-stream]   | ![][size-to-readable-stream]  |\n|                                                | ![][gis]                      |\n\n[size-is]: https://badgen.net/packagephobia/install/@sindresorhus/is?label\n[size-http-timer]: https://badgen.net/packagephobia/install/@szmarczak/http-timer?label\n[size-cacheable-request]: https://badgen.net/packagephobia/install/cacheable-request?label\n[size-decompress-response]: https://badgen.net/packagephobia/install/decompress-response?label\n[size-duplexer3]: https://badgen.net/packagephobia/install/duplexer3?label\n[size-get-stream]: https://badgen.net/packagephobia/install/get-stream?label\n[size-lowercase-keys]: https://badgen.net/packagephobia/install/lowercase-keys?label\n[size-mimic-response]: https://badgen.net/packagephobia/install/mimic-response?label\n[size-p-cancelable]: https://badgen.net/packagephobia/install/p-cancelable?label\n[size-to-readable-stream]: https://badgen.net/packagephobia/install/to-readable-stream?label\n\n[url-is]: https://github.com/sindresorhus/is\n[url-http-timer]: https://github.com/szmarczak/http-timer\n[url-cacheable-request]: https://github.com/lukechilds/cacheable-request\n[url-decompress-response]: https://github.com/sindresorhus/decompress-response\n[url-duplexer3]: https://github.com/floatdrop/duplexer3\n[url-get-stream]: https://github.com/sindresorhus/get-stream\n[url-lowercase-keys]: https://github.com/sindresorhus/lowercase-keys\n[url-mimic-response]: https://github.com/sindresorhus/mimic-response\n[url-p-cancelable]: https://github.com/sindresorhus/p-cancelable\n[url-to-readable-stream]: https://github.com/sindresorhus/to-readable-stream\n\n## Related\n\n- [gh-got](https://github.com/sindresorhus/gh-got) - Got convenience wrapper to interact with the GitHub API\n- [gl-got](https://github.com/singapore/gl-got) - Got convenience wrapper to interact with the GitLab API\n- [travis-got](https://github.com/samverschueren/travis-got) - Got convenience wrapper to interact with the Travis API\n- [graphql-got](https://github.com/kevva/graphql-got) - Got convenience wrapper to interact with GraphQL\n- [GotQL](https://github.com/khaosdoctor/gotql) - Got convenience wrapper to interact with GraphQL using JSON-parsed queries instead of strings\n- [got-fetch](https://github.com/alexghr/got-fetch) - Got with a `fetch` interface\n\n\n## Maintainers\n\n[![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://sindresorhus.com) | [![Szymon Marczak](https://github.com/szmarczak.png?size=100)](https://github.com/szmarczak) | [![Alexander Tesfamichael](https://github.com/AlexTes.png?size=100)](https://github.com/AlexTes) | [![Brandon Smith](https://github.com/brandon93s.png?size=100)](https://github.com/brandon93s) | [![Luke Childs](https://github.com/lukechilds.png?size=100)](https://github.com/lukechilds)\n---|---|---|---|---\n[Sindre Sorhus](https://sindresorhus.com) | [Szymon Marczak](https://github.com/szmarczak) | [Alexander Tesfamichael](https://alextes.me) | [Brandon Smith](https://github.com/brandon93s) | [Luke Childs](https://github.com/lukechilds)\n\n###### Former\n\n- [Vsevolod Strukchinsky](https://github.com/floatdrop)\n\n\n---\n\n<div align=\"center\">\n\t<b>\n\t\t<a href=\"https://tidelift.com/subscription/pkg/npm-got?utm_source=npm-got&utm_medium=referral&utm_campaign=readme\">Get professional support for this package with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n","funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","babel":false,"compileEnhancements":false,"extensions":["ts"],"require":["ts-node/register"]},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"rules":{"@typescript-eslint/explicit-function-return-type":"off","@typescript-eslint/promise-function-async":"off"},"ignores":["documentation/examples/*"]},"gitHead":"966e7ff37f7bd22c49847b83689b5181a306f528","readmeFilename":"readme.md","_nodeVersion":"10.17.0","_npmVersion":"6.11.3","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.0.0-beta.2_1574657592130_0.7090340178445669"},"_hasShrinkwrap":false},"10.0.0-beta.3":{"_id":"got@10.0.0-beta.3","name":"got","description":"Simplified HTTP requests","version":"10.0.0-beta.3","keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch","net","network","electron","brotli"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@sindresorhus/tsconfig":"^0.6.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"^12.12.14","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"^2.9.0","@typescript-eslint/parser":"^2.9.0","ava":"^2.4.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.23.0","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^14.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^7.5.0","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","ts-node":"^8.5.2","typescript":"^3.7.2","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^3.1.0","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^0.2.1","cacheable-request":"^7.0.0","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.8.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"f86a2b9c0a5bddd340c1dcc19cb831b819465cf8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.0.0-beta.3.tgz"},"readme":"<div align=\"center\">\n\t<br>\n\t<br>\n\t<img width=\"360\" src=\"media/logo.svg\" alt=\"Got\">\n\t<br>\n\t<br>\n\t<br>\n\t<p align=\"center\">Huge thanks to <a href=\"https://moxy.studio\"><img src=\"https://sindresorhus.com/assets/thanks/moxy-logo.svg\" width=\"150\"></a> for sponsoring Sindre Sorhus!\n\t</p>\n\t<br>\n\t<br>\n</div>\n\n> Simplified HTTP requests\n\n[![Build Status: Linux](https://travis-ci.org/sindresorhus/got.svg?branch=master)](https://travis-ci.org/sindresorhus/got)\n[![Coverage Status](https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/got?branch=master)\n[![Downloads](https://img.shields.io/npm/dm/got.svg)](https://npmjs.com/got)\n[![Install size](https://packagephobia.now.sh/badge?p=got)](https://packagephobia.now.sh/result?p=got)\n\nGot is a human-friendly and powerful HTTP request library.\n\nIt was created because the popular [`request`](https://github.com/request/request) package is bloated: [![Install size](https://packagephobia.now.sh/badge?p=request)](https://packagephobia.now.sh/result?p=request)\n\nGot is for Node.js. For browsers, we recommend [Ky](https://github.com/sindresorhus/ky).\n\n**This readme reflects the next major version that is currently in development. You probably want [the v9 readme](https://www.npmjs.com/package/got).**\n\n\n## Highlights\n\n- [Promise & stream API](#api)\n- [Request cancelation](#aborting-the-request)\n- [RFC compliant caching](#cache-adapters)\n- [Follows redirects](#followredirect)\n- [Retries on failure](#retry)\n- [Progress events](#onuploadprogress-progress)\n- [Handles gzip/deflate/brotli](#decompress)\n- [Timeout handling](#timeout)\n- [Errors with metadata](#errors)\n- [JSON mode](#json-mode)\n- [WHATWG URL support](#url)\n- [Hooks](#hooks)\n- [Instances with custom defaults](#instances)\n- [Composable](documentation/advanced-creation.md#merging-instances)\n- [Plugins](documentation/lets-make-a-plugin.md)\n- [Electron support](#useelectronnet)\n- [Used by 3000+ packages and 1.4M+ repos](https://github.com/sindresorhus/got/network/dependents)\n- Actively maintained\n\n[Moving from Request?](documentation/migration-guides.md)\n\n[See how Got compares to other HTTP libraries](#comparison)\n\n## Install\n\n```\n$ npm install got\n```\n\n\n## Usage\n\n```js\nconst got = require('got');\n\n(async () => {\n\ttry {\n\t\tconst response = await got('https://sindresorhus.com');\n\t\tconsole.log(response.body);\n\t\t//=> '<!doctype html> ...'\n\t} catch (error) {\n\t\tconsole.log(error.response.body);\n\t\t//=> 'Internal server error ...'\n\t}\n})();\n```\n\n###### Streams\n\n```js\nconst stream = require('stream');\nconst {promisify} = require('util');\nconst fs = require('fs');\nconst got = require('got');\n\nconst pipeline = promisify(stream.pipeline);\n\n(async () => {\n    await pipeline(\n        got.stream('https://sindresorhus.com'),\n        fs.createWriteStream('index.html')\n    );\n\n    // For POST, PUT, and PATCH methods `got.stream` returns a `stream.Writable`\n    await pipeline(\n        fs.createReadStream('index.html'),\n        got.stream.post('https://sindresorhus.com')\n    );\n})();\n```\n\n**Tip:** Using `from.pipe(to)` doesn't forward errors. If you use it, switch to [`Stream.pipeline(from, ..., to, callback)`](https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback) instead (available from Node v10).\n\n### API\n\nIt's a `GET` request by default, but can be changed by using different methods or via `options.method`.\n\n**By default, Got will retry on failure. To disable this option, set [`retry`](#retry) to `0`.**\n\n#### got([url], [options])\n\nReturns a Promise for a [`response` object](#response) or a [stream](#streams-1) if `options.isStream` is set to true.\n\n##### url\n\nType: `string | object`\n\nThe URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\nProperties from `options` will override properties in the parsed `url`.\n\nIf no protocol is specified, it will throw a `TypeError`.\n\n**Note:** this can also be an option.\n\n##### options\n\nType: `object`\n\nAny of the [`https.request`](https://nodejs.org/api/https.html#https_https_request_options_callback) options.\n\n###### prefixUrl\n\nType: `string | URL`\n\nWhen specified, `prefixUrl` will be prepended to `url`. The prefix can be any valid URL, either relative or absolute. A trailing slash `/` is optional - one will be added automatically.\n\n**Note:** `prefixUrl` will be ignored if the `url` argument is a URL instance.\n\n**Note:** Leading slashes in `input` are disallowed when using this option to enforce consistency and avoid confusion. For example, when the prefix URL is `https://example.com/foo` and the input is `/bar`, there's ambiguity whether the resulting URL would become `https://example.com/foo/bar` or `https://example.com/bar`. The latter is used by browsers.\n\n**Tip:** Useful when used with [`got.extend()`](#custom-endpoints) to create niche-specific Got-instances.\n\n**Tip:** You can change `prefixUrl` using hooks as long as the URL still includes the `prefixUrl`. If the URL doesn't include it anymore, it will throw.\n\n```js\nconst got = require('got');\n\n(async () => {\n\tawait got('unicorn', {prefixUrl: 'https://cats.com'});\n\t//=> 'https://cats.com/unicorn'\n\n\tconst instance = got.extend({\n\t\tprefixUrl: 'https://google.com'\n\t});\n\n\tawait instance('unicorn', {\n\t\thooks: {\n\t\t\tbeforeRequest: [\n\t\t\t\toptions => {\n\t\t\t\t\toptions.prefixUrl = 'https://cats.com';\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t});\n\t//=> 'https://cats.com/unicorn'\n})();\n```\n\n###### headers\n\nType: `object`<br>\nDefault: `{}`\n\nRequest headers.\n\nExisting headers will be overwritten. Headers set to `undefined` will be omitted.\n\n###### isStream\n\nType: `boolean`<br>\nDefault: `false`\n\nReturns a `Stream` instead of a `Promise`. This is equivalent to calling `got.stream(url, [options])`.\n\n###### body\n\nType: `string | Buffer | stream.Readable` or [`form-data` instance](https://github.com/form-data/form-data)\n\n**Note:** The `body` option cannot be used with the `json` or `form` option.\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nIf present in `options` and `options.method` is not set, it will throw a `TypeError`.\n\nThe `content-length` header will be automatically set if `body` is a `string` / `Buffer` / `fs.createReadStream` instance / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n\n###### json\n\nType: `object | Array | number | string | boolean | null` *(JSON-serializable values)*\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nJSON body. If the `Content-Type` header is not set, it will be set to `application/json`.\n\n###### context\n\nType: `object`\n\nUser data. In contrast to other options, `context` is not enumerable.\n\n**Note:** The object is never merged, it's just passed through. Got will not modify the object in any way.\n\nIt's very useful for storing auth tokens:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\toptions => {\n\t\t\t\tif (!options.context && !options.context.token) {\n\t\t\t\t\tthrow new Error('Token required');\n\t\t\t\t}\n\n\t\t\t\toptions.headers.token = options.context.token;\n\t\t\t}\n\t\t]\n\t}\n});\n\n(async () => {\n\tconst context = {\n\t\ttoken: 'secret'\n\t};\n\n\tconst response = await instance('https://httpbin.org/headers', {context});\n\n\t// Let's see the headers\n\tconsole.log(response.body);\n})();\n```\n\n###### responseType\n\nType: `string`<br>\nDefault: `'default'`\n\n**Note:** When using streams, this option is ignored.\n\nParsing method used to retrieve the body from the response.\n\n- `'default'` - Will give a string unless the body is overwritten in a `afterResponse` hook or if `options.decompress` is set to false - Will give a Buffer if the response is compresssed.\n- `'text'` - Will give a string no matter what.\n- `'json'` - Will give an object, unless the body is invalid JSON, then it will throw.\n- `'buffer'` - Will give a Buffer, ignoring `options.encoding`. It will throw if the body is a custom object.\n\nThe promise has `.json()` and `.buffer()` and `.text()` methods which set this option automatically.\n\nExample:\n\n```js\n// This\nconst body = await got(url).json();\n\n// is the same as this\nconst body = await got(url, {responseType: 'json'});\n```\n\n###### resolveBodyOnly\n\nType: `string`<br>\nDefault: `false`\n\nWhen set to `true` the promise will return the [Response body](#body-1) instead of the [Response](#response) object.\n\n###### cookieJar\n\nType: `object` | [`tough.CookieJar` instance](https://github.com/salesforce/tough-cookie#cookiejar)\n\n**Note:** If you provide this option, `options.headers.cookie` will be overridden.\n\nCookie support. You don't have to care about parsing or how to store them. [Example](#cookies).\n\n###### cookieJar.setCookie\n\nType: `Function<Promise>`\n\nThe function takes two arguments: `rawCookie` (`string`) and `url` (`string`).\n\n###### cookieJar.getCookieString\n\nType: `Function<Promise>`\n\nThe function takes one argument: `url` (`string`).\n\n###### ignoreInvalidCookies\n\nType: `boolean`<br>\nDefault: `false`\n\nIgnore invalid cookies instead of throwing an error. Only useful when the `cookieJar` option has been set. Not recommended.\n\n###### encoding\n\nType: `string`<br>\nDefault: `'utf8'`\n\n[Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data.\n\nTo get a [`Buffer`](https://nodejs.org/api/buffer.html), you need to set [`responseType`](#responseType) to `buffer` instead.\n\n###### form\n\nType: `object | true`\n\n**Note:** If you provide this option, `got.stream()` will be read-only.\n\nThe form body is converted to query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n\nIf set to `true` and the `Content-Type` header is not set, it will be set to `application/x-www-form-urlencoded`.\n\n###### searchParams\n\nType: `string | object<string, string | number> | URLSearchParams`\n\nQuery string that will be added to the request URL. This will override the query string in `url`.\n\nIf you need to pass in an array, you can do it using a `URLSearchParams` instance:\n\n```js\nconst got = require('got');\n\nconst searchParams = new URLSearchParams([['key', 'a'], ['key', 'b']]);\n\ngot('https://example.com', {searchParams});\n\nconsole.log(searchParams.toString());\n//=> 'key=a&key=b'\n```\n\nAnd if you need a different array format, you could use the [`query-string`](https://github.com/sindresorhus/query-string) package:\n\n```js\nconst got = require('got');\nconst queryString = require('query-string');\n\nconst searchParams = queryString.stringify({key: ['a', 'b']}, {arrayFormat: 'bracket'});\n\ngot('https://example.com', {searchParams});\n\nconsole.log(searchParams);\n//=> 'key[]=a&key[]=b'\n```\n\n###### timeout\n\nType: `number | object`\n\nMilliseconds to wait for the server to end the response before aborting the request with [`got.TimeoutError`](#gottimeouterror) error (a.k.a. `request` property). By default, there's no timeout.\n\nThis also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n\n- `lookup` starts when a socket is assigned and ends when the hostname has been resolved. Does not apply when using a Unix domain socket.\n- `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n- `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n- `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n- `response` starts when the request has been written to the socket and ends when the response headers are received.\n- `send` starts when the socket is connected and ends with the request has been written to the socket.\n- `request` starts when the request is initiated and ends when the response's end event fires.\n\n###### retry\n\nType: `number | object`<br>\nDefault:\n- limit: `2`\n- calculateDelay: `(attemptCount, retryOptions, error, computedValue) => computedValue`\n- methods: `GET` `PUT` `HEAD` `DELETE` `OPTIONS` `TRACE`\n- statusCodes: [`408`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408) [`413`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413) [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) [`500`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500) [`502`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502) [`503`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503) [`504`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504)\n- maxRetryAfter: `undefined`\n- errorCodes: `ETIMEDOUT` `ECONNRESET` `EADDRINUSE` `ECONNREFUSED` `EPIPE` `ENOTFOUND` `ENETUNREACH` `EAI_AGAIN`\n\nAn object representing `limit`, `calculateDelay`, `methods`, `statusCodes`, `maxRetryAfter` and `errorCodes` fields for maximum retry count, retry handler, allowed methods, allowed status codes, maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time and allowed error codes.\n\n**Note:** When using streams, this option is ignored. If the connection is reset when downloading, you need to catch the error and clear the file you were writing into to prevent duplicated content.\n\nIf `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.<br>\nIf [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n\nDelays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 1).\n\nThe `calculateDelay` property is a `function` with `attemptCount`, `retryOptions`, `error` and `computedValue` arguments for current retry count, the retry options, error and default computed value. The function must return a delay in milliseconds (`0` return value cancels retry).\n\nBy default, it retries *only* on the specified methods, status codes, and on these network errors:\n- `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n- `ECONNRESET`: Connection was forcibly closed by a peer.\n- `EADDRINUSE`: Could not bind to any free port.\n- `ECONNREFUSED`: Connection was refused by the server.\n- `EPIPE`: The remote side of the stream being written has been closed.\n- `ENOTFOUND`: Couldn't resolve the hostname to an IP address.\n- `ENETUNREACH`: No internet connection.\n- `EAI_AGAIN`: DNS lookup timed out.\n\n###### followRedirect\n\nType: `boolean`<br>\nDefault: `true`\n\nDefines if redirect responses should be followed automatically.\n\nNote that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`. This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4).\n\n###### methodRewriting\n\nType: `boolean`<br>\nDefault: `true`\n\nBy default, redirects will use [method rewriting](https://tools.ietf.org/html/rfc7231#section-6.4). For example, when sending a POST request and receiving a `302`, it will resend the body to the new location using the same HTTP method (`POST` in this case).\n\n###### maxRedirects\n\nType: `number`<br>\nDefault: `10`\n\nIf exceeded, the request will be aborted and a `MaxRedirectsError` will be thrown.\n\n###### decompress\n\nType: `boolean`<br>\nDefault: `true`\n\nDecompress the response automatically. This will set the `accept-encoding` header to `gzip, deflate, br` on Node.js 11.7.0+ or `gzip, deflate` for older Node.js versions, unless you set it yourself.\n\nBrotli (`br`) support requires Node.js 11.7.0 or later.\n\nIf this is disabled, a compressed response is returned as a `Buffer`. This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n\n###### cache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached response data.\n\n###### dnsCache\n\nType: `object`<br>\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached DNS data.\n\n###### request\n\nType: `Function`<br>\nDefault: `http.request` `https.request` *(Depending on the protocol)*\n\nCustom request function. The main purpose of this is to [support HTTP2 using a wrapper](#experimental-http2-support).\n\n###### useElectronNet\n\nType: `boolean`<br>\nDefault: `false`\n\nWhen used in Electron, Got will use [`electron.net`](https://electronjs.org/docs/api/net/) instead of the Node.js `http` module. According to the Electron docs, it should be fully compatible, but it's not entirely. See [#443](https://github.com/sindresorhus/got/issues/443) and [#461](https://github.com/sindresorhus/got/issues/461).\n\n###### throwHttpErrors\n\nType: `boolean`<br>\nDefault: `true`\n\nDetermines if a `got.HTTPError` is thrown for error responses (non-2xx status codes).\n\nIf this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing. This may be useful if you are checking for resource availability and are expecting error responses.\n\n###### agent\n\nSame as the [`agent` option](https://nodejs.org/api/http.html#http_http_request_url_options_callback) for `http.request`, but with an extra feature:\n\nIf you require different agents for different protocols, you can pass a map of agents to the `agent` option. This is necessary because a request to one protocol might redirect to another. In such a scenario, Got will switch over to the right protocol agent for you.\n\n```js\nconst got = require('got');\nconst HttpAgent = require('agentkeepalive');\nconst {HttpsAgent} = HttpAgent;\n\ngot('https://sindresorhus.com', {\n\tagent: {\n\t\thttp: new HttpAgent(),\n\t\thttps: new HttpsAgent()\n\t}\n});\n```\n\n###### hooks\n\nType: `object<string, Function[]>`\n\nHooks allow modifications during the request lifecycle. Hook functions may be async and are run serially.\n\n###### hooks.init\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with plain [request options](#options), right before their normalization. This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when the input needs custom handling.\n\nSee the [Request migration guide](documentation/migration-guides.md#breaking-changes) for an example.\n\n**Note:** This hook must be synchronous!\n\n###### hooks.beforeRequest\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options). Got will make no further changes to the request before it is sent (except the body serialization). This is especially useful in conjunction with [`got.extend()`](#instances) and [`got.create()`](documentation/advanced-creation.md) when you want to create an API client that, for example, uses HMAC-signing.\n\nSee the [AWS section](#aws) for an example.\n\n###### hooks.beforeRedirect\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options) and the redirect [response](#response). Got will make no further changes to the request. This is especially useful when you want to avoid dead sites. Example:\n\n```js\nconst got = require('got');\n\ngot('https://example.com', {\n\thooks: {\n\t\tbeforeRedirect: [\n\t\t\t(options, response) => {\n\t\t\t\tif (options.hostname === 'deadSite') {\n\t\t\t\t\toptions.hostname = 'fallbackSite';\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.beforeRetry\n\nType: `Function[]`<br>\nDefault: `[]`\n\n**Note:** When using streams, this hook is ignored.\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options), the error and the retry count. Got will make no further changes to the request. This is especially useful when some extra work is required before the next try. Example:\n\n```js\nconst got = require('got');\n\ngot.post('https://example.com', {\n\thooks: {\n\t\tbeforeRetry: [\n\t\t\t(options, error, retryCount) => {\n\t\t\t\tif (error.statusCode === 413) { // Payload too large\n\t\t\t\t\toptions.body = getNewBody();\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n**Note:** When retrying in a `afterResponse` hook, all remaining `beforeRetry` hooks will be called without the `error` and `retryCount` arguments.\n\n###### hooks.afterResponse\n\nType: `Function[]`<br>\nDefault: `[]`\n\n**Note:** When using streams, this hook is ignored.\n\nCalled with [response object](#response) and a retry function. Calling the retry function will trigger `beforeRetry` hooks.\n\nEach function should return the response. This is especially useful when you want to refresh an access token. Example:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tafterResponse: [\n\t\t\t(response, retryWithMergedOptions) => {\n\t\t\t\tif (response.statusCode === 401) { // Unauthorized\n\t\t\t\t\tconst updatedOptions = {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\ttoken: getNewToken() // Refresh the access token\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Save for further requests\n\t\t\t\t\tinstance.defaults.options = got.mergeOptions(instance.defaults.options, updatedOptions);\n\n\t\t\t\t\t// Make a new retry\n\t\t\t\t\treturn retryWithMergedOptions(updatedOptions);\n\t\t\t\t}\n\n\t\t\t\t// No changes otherwise\n\t\t\t\treturn response;\n\t\t\t}\n\t\t],\n\t\tbeforeRetry: [\n\t\t\t(options, error, retryCount) => {\n\t\t\t\t// This will be called on `retryWithMergedOptions(...)`\n\t\t\t}\n\t\t]\n\t},\n\tmutableDefaults: true\n});\n```\n\n###### hooks.beforeError\n\nType: `Function[]`<br>\nDefault: `[]`\n\nCalled with an `Error` instance. The error is passed to the hook right before it's thrown. This is especially useful when you want to have more detailed errors.\n\n**Note:** Errors thrown while normalizing input options are thrown directly and not part of this hook.\n\n```js\nconst got = require('got');\n\ngot('https://api.github.com/some-endpoint', {\n\thooks: {\n\t\tbeforeError: [\n\t\t\terror => {\n\t\t\t\tconst {response} = error;\n \t\t\t\tif (response && response.body) {\n\t\t\t\t\terror.name = 'GitHubError';\n\t\t\t\t\terror.message = `${response.body.message} (${error.statusCode})`;\n\t\t\t\t}\n\n \t\t\t\treturn error;\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n#### Response\n\nThe response object will typically be a [Node.js HTTP response stream](https://nodejs.org/api/http.html#http_class_http_incomingmessage), however, if returned from the cache it will be a [response-like object](https://github.com/lukechilds/responselike) which behaves in the same way.\n\n##### request\n\nType: `object`\n\n**Note:** This is not a [http.ClientRequest](https://nodejs.org/api/http.html#http_class_http_clientrequest).\n\n- `options` - The Got options that were set on this request.\n\n##### body\n\nType: `string | object | Buffer` *(Depending on `options.responseType`)*\n\nThe result of the request.\n\n##### url\n\nType: `string`\n\nThe request URL or the final URL after redirects.\n\n##### ip\n\nType: `string`\n\nThe remote IP address.\n\n**Note:** Not available when the response is cached. This is hopefully a temporary limitation, see [lukechilds/cacheable-request#86](https://github.com/lukechilds/cacheable-request/issues/86).\n\n##### requestUrl\n\nType: `string`\n\nThe original request URL.\n\n##### timings\n\nType: `object`\n\nThe object contains the following properties:\n\n- `start` - Time when the request started.\n- `socket` - Time when a socket was assigned to the request.\n- `lookup` - Time when the DNS lookup finished.\n- `connect` - Time when the socket successfully connected.\n- `upload` - Time when the request finished uploading.\n- `response` - Time when the request fired the `response` event.\n- `end` - Time when the response fired the `end` event.\n- `error` - Time when the request fired the `error` event.\n- `phases`\n\t- `wait` - `timings.socket - timings.start`\n\t- `dns` - `timings.lookup - timings.socket`\n\t- `tcp` - `timings.connect - timings.lookup`\n\t- `request` - `timings.upload - timings.connect`\n\t- `firstByte` - `timings.response - timings.upload`\n\t- `download` - `timings.end - timings.response`\n\t- `total` - `timings.end - timings.start` or `timings.error - timings.start`\n\n**Note:** The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n\n##### isFromCache\n\nType: `boolean`\n\nWhether the response was retrieved from the cache.\n\n##### redirectUrls\n\nType: `string[]`\n\nThe redirect URLs.\n\n##### retryCount\n\nType: `number`\n\nThe number of times the request was retried.\n\n#### Streams\n\n**Note:** Progress events, redirect events and request/response events can also be used with promises.\n\n**Note:** To access `response.isFromCache` you need to use `got.stream(url, options).isFromCache`. The value will be undefined until the `response` event.\n\n#### got.stream(url, [options])\n\nSets `options.isStream` to `true`.\n\nReturns a [duplex stream](https://nodejs.org/api/stream.html#stream_class_stream_duplex) with additional events:\n\n##### .on('request', request)\n\n`request` event to get the request object of the request.\n\n**Tip:** You can use `request` event to abort request:\n\n```js\ngot.stream('https://github.com')\n\t.on('request', request => setTimeout(() => request.abort(), 50));\n```\n\n##### .on('response', response)\n\nThe `response` event to get the response object of the final request.\n\n##### .on('redirect', response, nextOptions)\n\nThe `redirect` event to get the response object of a redirect. The second argument is options for the next request to the redirect location.\n\n##### .on('uploadProgress', progress)\n##### .on('downloadProgress', progress)\n\nProgress events for uploading (sending a request) and downloading (receiving a response). The `progress` argument is an object like:\n\n```js\n{\n\tpercent: 0.1,\n\ttransferred: 1024,\n\ttotal: 10240\n}\n```\n\nIf it's not possible to retrieve the body size (can happen when streaming), `total` will be `undefined`.\n\n```js\n(async () => {\n\tconst response = await got('https://sindresorhus.com')\n\t\t.on('downloadProgress', progress => {\n\t\t\t// Report download progress\n\t\t})\n\t\t.on('uploadProgress', progress => {\n\t\t\t// Report upload progress\n\t\t});\n\n\tconsole.log(response);\n})();\n```\n\n##### .on('error', error, body, response)\n\nThe `error` event emitted in case of a protocol error (like `ENOTFOUND` etc.) or status error (4xx or 5xx). The second argument is the body of the server response in case of status error. The third argument is a response object.\n\n#### got.get(url, [options])\n#### got.post(url, [options])\n#### got.put(url, [options])\n#### got.patch(url, [options])\n#### got.head(url, [options])\n#### got.delete(url, [options])\n\nSets `options.method` to the method name and makes a request.\n\n### Instances\n\n#### got.extend(...options)\n\nConfigure a new `got` instance with default `options`. The `options` are merged with the parent instance's `defaults.options` using [`got.mergeOptions`](#gotmergeoptionsparentoptions-newoptions). You can access the resolved options with the `.defaults` property on the instance.\n\n```js\nconst client = got.extend({\n\tprefixUrl: 'https://example.com',\n\theaders: {\n\t\t'x-unicorn': 'rainbow'\n\t}\n});\n\nclient.get('/demo');\n\n/* HTTP Request =>\n * GET /demo HTTP/1.1\n * Host: example.com\n * x-unicorn: rainbow\n */\n```\n\n```js\n(async () => {\n\tconst client = got.extend({\n\t\tprefixUrl: 'httpbin.org',\n\t\theaders: {\n\t\t\t'x-foo': 'bar'\n\t\t}\n\t});\n\tconst {headers} = await client.get('/headers').json();\n\t//=> headers['x-foo'] === 'bar'\n\n\tconst jsonClient = client.extend({\n\t\tresponseType: 'json',\n\t\tresolveBodyOnly: true,\n\t\theaders: {\n\t\t\t'x-baz': 'qux'\n\t\t}\n\t});\n\tconst {headers: headers2} = await jsonClient.get('/headers');\n\t//=> headers2['x-foo'] === 'bar'\n\t//=> headers2['x-baz'] === 'qux'\n})();\n```\n\nAdditionally, `got.extend()` accepts two properties from the `defaults` object: `mutableDefaults` and `handlers`. Example:\n\n```js\n// You can now modify `mutableGot.defaults.options`.\nconst mutableGot = got.extend({mutableDefaults: true});\n\nconst mergedHandlers = got.extend({\n\thandlers: [\n\t\t(options, next) => {\n\t\t\tdelete options.headers.referer;\n\n\t\t\treturn next(options);\n\t\t}\n\t]\n});\n```\n\n**Note:** Handlers can be asynchronous. The recommended approach is:\n\n```js\nconst handler = (options, next) => {\n\tif (options.stream) {\n\t\t// It's a Stream\n\t\treturn next(options);\n\t}\n\n\t// It's a Promise\n\treturn (async () => {\n\t\ttry {\n\t\t\tconst response = await next(options);\n\t\t\tresponse.yourOwnProperty = true;\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\t// Every error will be replaced by this one.\n\t\t\t// Before you receive any error here,\n\t\t\t// it will be passed to the `beforeError` hooks first.\n\t\t\t// Note: this one won't be passed to `beforeError` hook. It's final.\n\t\t\tthrow new Error('Your very own error.');\n\t\t}\n\t})();\n};\n\nconst instance = got.extend({handlers: [handler]});\n```\n\n#### got.extend(...instances)\n\nMerges many instances into a single one:\n- options are merged using [`got.mergeOptions()`](#gotmergeoptionsparentoptions-newoptions) (+ hooks are merged too),\n- handlers are stored in an array (you can access them through `instance.defaults.handlers`).\n\n#### got.extend(...options, ...instances, ...)\n\nIt's possible to combine options and instances.<br>\nIt gives the same effect as `got.extend(...options).extend(...instances)`:\n\n```js\nconst a = {headers: {cat: 'meow'}};\nconst b = got.create({\n\toptions: {\n\t\theaders: {\n\t\t\tcow: 'moo'\n\t\t}\n\t}\n});\n\n// The same as `got.extend(a).extend(b)`.\n// Note `a` is options and `b` is an instance.\ngot.extend(a, b);\n//=> {headers: {cat: 'meow', cow: 'moo'}}\n```\n\n#### got.mergeOptions(parentOptions, newOptions)\n\nExtends parent options. Avoid using [object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals) as it doesn't work recursively:\n\n```js\nconst a = {headers: {cat: 'meow', wolf: ['bark', 'wrrr']}};\nconst b = {headers: {cow: 'moo', wolf: ['auuu']}};\n\n{...a, ...b}            // => {headers: {cow: 'moo', wolf: ['auuu']}}\ngot.mergeOptions(a, b)  // => {headers: {cat: 'meow', cow: 'moo', wolf: ['auuu']}}\n```\n\nOptions are deeply merged to a new object. The value of each key is determined as follows:\n\n- If the new property is set to `undefined`, it keeps the old one.\n- If both properties are an instances of `URLSearchParams`, a new URLSearchParams instance is created. The values are merged using [`urlSearchParams.append(key, value)`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/append).\n- If the parent property is an instance of `URL` and the new value is a `string` or `URL`, a new URL instance is created: [`new URL(new, parent)`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#Syntax).\n- If the new property is a plain `object`:\n\t- If the parent property is a plain `object` too, both values are merged recursively into a new `object`.\n\t- Otherwise, only the new value is deeply cloned.\n- If the new property is an `Array`, it overwrites the old one with a deep clone of the new property.\n- Otherwise, the new value is assigned to the key.\n\n#### got.defaults\n\nType: `object`\n\nThe Got defaults used in that instance.\n\n##### [options](#options)\n\n##### handlers\n\nType: `Function[]`<br>\nDefault: `[]`\n\nAn array of functions. You execute them directly by calling `got()`. They are some sort of \"global hooks\" - these functions are called first. The last handler (*it's hidden*) is either [`asPromise`](source/as-promise.ts) or [`asStream`](source/as-stream.ts), depending on the `options.isStream` property.\n\nEach handler takes two arguments:\n\n###### [options](#options)\n\n###### next()\n\nReturns a `Promise` or a `Stream` depending on [`options.isStream`](#isstream).\n\n```js\nconst settings = {\n\thandlers: [\n\t\t(options, next) => {\n\t\t\tif (options.isStream) {\n\t\t\t\t// It's a Stream, so we can perform stream-specific actions on it\n\t\t\t\treturn next(options)\n\t\t\t\t\t.on('request', request => {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\trequest.abort();\n\t\t\t\t\t\t}, 50);\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\t// It's a Promise\n\t\t\treturn next(options);\n\t\t}\n\t],\n\toptions: got.mergeOptions(got.defaults.options, {\n\t\tresponseType: 'json'\n\t})\n};\n\nconst jsonGot = got.create(settings);\n```\n\n##### mutableDefaults\n\nType: `boolean`<br>\nDefault: `false`\n\nA read-only boolean describing whether the defaults are mutable or not. If set to `true`, you can [update headers over time](#hooksafterresponse), for example, update an access token when it expires.\n\n## Errors\n\nEach error contains an `options` property which are the options Got used to create a request - just to make debugging easier.\n\n#### got.CacheError\n\nWhen a cache method fails, for example, if the database goes down or there's a filesystem error.\n\n#### got.RequestError\n\nWhen a request fails. Contains a `code` property with error class code, like `ECONNREFUSED`.\n\n#### got.ReadError\n\nWhen reading from response stream fails.\n\n#### got.ParseError\n\nWhen server response code is 2xx, and parsing body fails. Includes a `response` property.\n\n#### got.HTTPError\n\nWhen the server response code is not 2xx. Includes a `response` property.\n\n#### got.MaxRedirectsError\n\nWhen the server redirects you more than ten times. Includes a `response` property.\n\n#### got.UnsupportedProtocolError\n\nWhen given an unsupported protocol.\n\n#### got.CancelError\n\nWhen the request is aborted with `.cancel()`.\n\n#### got.TimeoutError\n\nWhen the request is aborted due to a [timeout](#timeout). Includes an `event` and `timings` property.\n\n## Aborting the request\n\nThe promise returned by Got has a [`.cancel()`](https://github.com/sindresorhus/p-cancelable) method which when called, aborts the request.\n\n```js\n(async () => {\n\tconst request = got(url, options);\n\n\t// …\n\n\t// In another part of the code\n\tif (something) {\n\t\trequest.cancel();\n\t}\n\n\t// …\n\n\ttry {\n\t\tawait request;\n\t} catch (error) {\n\t\tif (request.isCanceled) { // Or `error instanceof got.CancelError`\n\t\t\t// Handle cancelation\n\t\t}\n\n\t\t// Handle other errors\n\t}\n})();\n```\n\nWhen using hooks, simply throw an error to abort the request.\n\n```js\n(async () => {\n\tconst request = got(url, {\n\t\thooks: {\n\t\t\tbeforeRequest: [\n\t\t\t\t() => {\n\t\t\t\t\tthrow new Error('Oops. Request canceled.');\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t});\n\n\ttry {\n\t\tawait request;\n\t} catch (error) {\n\t\t// …\n\t}\n})();\n```\n\n<a name=\"cache-adapters\"></a>\n## Cache\n\nGot implements [RFC 7234](http://httpwg.org/specs/rfc7234.html) compliant HTTP caching which works out of the box in-memory and is easily pluggable with a wide range of storage adapters. Fresh cache entries are served directly from the cache, and stale cache entries are revalidated with `If-None-Match`/`If-Modified-Since` headers. You can read more about the underlying cache behavior in the [`cacheable-request` documentation](https://github.com/lukechilds/cacheable-request). For DNS cache, Got uses [`cacheable-lookup`](https://github.com/szmarczak/cacheable-lookup).\n\nYou can use the JavaScript `Map` type as an in-memory cache:\n\n```js\nconst got = require('got');\nconst map = new Map();\n\n(async () => {\n\t\tlet response = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> false\n\n\t\tresponse = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> true\n})();\n```\n\nGot uses [Keyv](https://github.com/lukechilds/keyv) internally to support a wide range of storage adapters. For something more scalable you could use an [official Keyv storage adapter](https://github.com/lukechilds/keyv#official-storage-adapters):\n\n```\n$ npm install @keyv/redis\n```\n\n```js\nconst got = require('got');\nconst KeyvRedis = require('@keyv/redis');\n\nconst redis = new KeyvRedis('redis://user:pass@localhost:6379');\n\ngot('https://sindresorhus.com', {cache: redis});\n```\n\nGot supports anything that follows the Map API, so it's easy to write your own storage adapter or use a third-party solution.\n\nFor example, the following are all valid storage adapters:\n\n```js\nconst storageAdapter = new Map();\n// Or\nconst storageAdapter = require('./my-storage-adapter');\n// Or\nconst QuickLRU = require('quick-lru');\nconst storageAdapter = new QuickLRU({maxSize: 1000});\n\ngot('https://sindresorhus.com', {cache: storageAdapter});\n```\n\nView the [Keyv docs](https://github.com/lukechilds/keyv) for more information on how to use storage adapters.\n\n\n## Proxies\n\nYou can use the [`tunnel`](https://github.com/koichik/node-tunnel) package with the `agent` option to work with proxies:\n\n```js\nconst got = require('got');\nconst tunnel = require('tunnel');\n\ngot('https://sindresorhus.com', {\n\tagent: tunnel.httpOverHttp({\n\t\tproxy: {\n\t\t\thost: 'localhost'\n\t\t}\n\t})\n});\n```\n\nAlternatively, use [`global-agent`](https://github.com/gajus/global-agent) to configure a global proxy for all HTTP/HTTPS traffic in your program.\n\n\n## Cookies\n\nYou can use the [`tough-cookie`](https://github.com/salesforce/tough-cookie) package:\n\n```js\nconst {promisify} = require('util');\nconst got = require('got');\nconst {CookieJar} = require('tough-cookie');\n\n(async () => {\n\tconst cookieJar = new CookieJar();\n\tconst setCookie = promisify(cookieJar.setCookie.bind(cookieJar));\n\n\tawait setCookie('foo=bar', 'https://example.com');\n\tawait got('https://example.com', {cookieJar});\n})();\n```\n\n\n## Form data\n\nYou can use the [`form-data`](https://github.com/form-data/form-data) package to create POST request with form data:\n\n```js\nconst fs = require('fs');\nconst got = require('got');\nconst FormData = require('form-data');\n\nconst form = new FormData();\n\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\ngot.post('https://example.com', {\n\tbody: form\n});\n```\n\n\n## OAuth\n\nYou can use the [`oauth-1.0a`](https://github.com/ddo/oauth-1.0a) package to create a signed OAuth request:\n\n```js\nconst got = require('got');\nconst crypto  = require('crypto');\nconst OAuth = require('oauth-1.0a');\n\nconst oauth = OAuth({\n\tconsumer: {\n\t\tkey: process.env.CONSUMER_KEY,\n\t\tsecret: process.env.CONSUMER_SECRET\n\t},\n\tsignature_method: 'HMAC-SHA1',\n\thash_function: (baseString, key) => crypto.createHmac('sha1', key).update(baseString).digest('base64')\n});\n\nconst token = {\n\tkey: process.env.ACCESS_TOKEN,\n\tsecret: process.env.ACCESS_TOKEN_SECRET\n};\n\nconst url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';\n\ngot(url, {\n\theaders: oauth.toHeader(oauth.authorize({url, method: 'GET'}, token)),\n\tresponseType: 'json'\n});\n```\n\n\n## Unix Domain Sockets\n\nRequests can also be sent via [unix domain sockets](http://serverfault.com/questions/124517/whats-the-difference-between-unix-socket-and-tcp-ip-socket). Use the following URL scheme: `PROTOCOL://unix:SOCKET:PATH`.\n\n- `PROTOCOL` - `http` or `https` *(optional)*\n- `SOCKET` - Absolute path to a unix domain socket, for example: `/var/run/docker.sock`\n- `PATH` - Request path, for example: `/v2/keys`\n\n```js\ngot('http://unix:/var/run/docker.sock:/containers/json');\n\n// Or without protocol (HTTP by default)\ngot('unix:/var/run/docker.sock:/containers/json');\n```\n\n\n## AWS\n\nRequests to AWS services need to have their headers signed. This can be accomplished by using the [`aws4`](https://www.npmjs.com/package/aws4) package. This is an example for querying an [\"API Gateway\"](https://docs.aws.amazon.com/apigateway/api-reference/signing-requests/) with a signed request.\n\n```js\nconst got = require('got');\nconst AWS = require('aws-sdk');\nconst aws4 = require('aws4');\n\nconst chain = new AWS.CredentialProviderChain();\n\n// Create a Got instance to use relative paths and signed requests\nconst awsClient = got.extend({\n\tprefixUrl: 'https://<api-id>.execute-api.<api-region>.amazonaws.com/<stage>/',\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\tasync options => {\n\t\t\t\tconst credentials = await chain.resolvePromise();\n\t\t\t\taws4.sign(options, credentials);\n\t\t\t}\n\t\t]\n\t}\n});\n\nconst response = await awsClient('endpoint/path', {\n\t// Request-specific options\n});\n```\n\n\n## Testing\n\nYou can test your requests by using the [`nock`](https://github.com/node-nock/nock) package to mock an endpoint:\n\n```js\nconst got = require('got');\nconst nock = require('nock');\n\nnock('https://sindresorhus.com')\n\t.get('/')\n\t.reply(200, 'Hello world!');\n\n(async () => {\n\tconst response = await got('https://sindresorhus.com');\n\tconsole.log(response.body);\n\t//=> 'Hello world!'\n})();\n```\n\nFor real integration testing we recommend using [`ava`](https://github.com/avajs/ava) with [`create-test-server`](https://github.com/lukechilds/create-test-server). We're using a macro so we don't have to `server.listen()` and `server.close()` every test. Take a look at one of our tests:\n\n```js\ntest('retry function gets iteration count', withServer, async (t, server, got) => {\n\tlet knocks = 0;\n\tserver.get('/', (request, response) => {\n\t\tif (knocks++ === 1) {\n\t\t\tresponse.end('who`s there?');\n\t\t}\n\t});\n\n\tawait got({\n\t\tretry: {\n\t\t\tcalculateDelay: ({attemptCount}) => {\n\t\t\t\tt.true(is.number(attemptCount));\n\t\t\t\treturn attemptCount < 2 ? 1 : 0;\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\n\n## Tips\n\n### JSON mode\n\nTo pass an object as the body, you need to use the `json` option. It will be stringified using `JSON.stringify`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst {body} = await got.post('https://httpbin.org/anything', {\n\t\tjson: {\n\t\t\thello: 'world'\n\t\t},\n\t\tresponseType: 'json'\n\t});\n\n\tconsole.log(body.data);\n\t//=> '{\"hello\":\"world\"}'\n})();\n```\n\nTo receive a JSON body you can either set `responseType` option to `json` or use `promise.json()`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst body = await got.post('https://httpbin.org/anything', {\n\t\tbody: {\n\t\t\thello: 'world'\n\t\t}\n\t}).json();\n\n\tconsole.log(body);\n\t//=> {…}\n})();\n```\n\n### User Agent\n\nIt's a good idea to set the `'user-agent'` header so the provider can more easily see how their resource is used. By default, it's the URL to this repo. You can omit this header by setting it to `undefined`.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': undefined\n\t}\n});\n```\n\n### 304 Responses\n\nBear in mind; if you send an `if-modified-since` header and receive a `304 Not Modified` response, the body will be empty. It's your responsibility to cache and retrieve the body contents.\n\n### Custom endpoints\n\nUse `got.extend()` to make it nicer to work with REST APIs. Especially if you use the `prefixUrl` option.\n\n**Note:** Not to be confused with [`got.create()`](documentation/advanced-creation.md), which has no defaults.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\nconst custom = got.extend({\n\tprefixUrl: 'example.com',\n\tresponseType: 'json',\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\n// Use `custom` exactly how you use `got`\n(async () => {\n\tconst list = await custom('/v1/users/list');\n})();\n```\n\n### Experimental HTTP2 support\n\nGot provides an experimental support for HTTP2 using the [`http2-wrapper`](https://github.com/szmarczak/http2-wrapper) package:\n\n```js\nconst got = require('got');\nconst {request} = require('http2-wrapper');\n\nconst h2got = got.extend({request});\n\n(async () => {\n\tconst {body} = await h2got('https://nghttp2.org/httpbin/headers');\n\tconsole.log(body);\n})();\n```\n\n## Comparison\n\n|                       |       `got`      | [`request`][r0] |  [`node-fetch`][n0]  |    [`ky`][k0]     |  [`axios`][a0]   |  [`superagent`][s0]  |\n|-----------------------|:----------------:|:---------------:|:--------------------:|:-----------------:|:----------------:|:--------------------:|\n| HTTP/2 support        |        ❔        |        ❌       |          ❌         |         ❌        |        ❌       |          ✔️\\*\\*      |\n| Browser support       |        ❌       |        ❌       |          ✔️\\*       |         ✔️        |        ✔️       |          ✔️          |\n| Electron support      |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Promise API           |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Stream API            |        ✔️       |        ✔️       |     Node.js only     |         ❌        |        ❌       |          ✔️          |\n| Request cancelation   |        ✔️       |        ❌       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| RFC compliant caching |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Cookies (out-of-box)  |        ✔️       |        ✔️       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Follows redirects     |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Retries on failure    |        ✔️       |        ❌       |          ❌         |         ✔️        |        ❌       |          ✔️          |\n| Progress events       |        ✔️       |        ❌       |          ❌         |         ✔️\\*\\*\\*  |   Browser only   |          ✔️          |\n| Handles gzip/deflate  |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Advanced timeouts     |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Timings               |        ✔️       |        ✔️       |          ❌         |         ❌        |        ❌       |          ❌          |\n| Errors with metadata  |        ✔️       |        ❌       |          ❌         |         ✔️        |        ✔️       |          ❌          |\n| JSON mode             |        ✔️       |        ✔️       |          ✔️         |         ✔️        |        ✔️       |          ✔️          |\n| Custom defaults       |        ✔️       |        ✔️       |          ❌         |         ✔️        |        ✔️       |          ❌          |\n| Composable            |        ✔️       |        ❌       |          ❌         |         ❌        |        ❌       |          ✔️          |\n| Hooks                 |        ✔️       |        ❌       |          ❌         |         ✔️        |        ✔️       |          ❌          |\n| Issues open           |  [![][gio]][g1]  | [![][rio]][r1]  |    [![][nio]][n1]    |   [![][kio]][k1]  |  [![][aio]][a1] |    [![][sio]][s1]     |\n| Issues closed         |  [![][gic]][g2]  | [![][ric]][r2]  |    [![][nic]][n2]    |   [![][kic]][k2]  |  [![][aic]][a2] |    [![][sic]][s2]     |\n| Downloads             |  [![][gd]][g3]   |  [![][rd]][r3]  |    [![][nd]][n3]     |   [![][kd]][k3]   |  [![][ad]][a3]  |    [![][sd]][s3]      |\n| Coverage              |  [![][gc]][g4]   |  [![][rc]][r4]  |    [![][nc]][n4]     |   [![][kc]][k4]   |  [![][ac]][a4]  |    [![][sc]][s4]      |\n| Build                 |  [![][gb]][g5]   |  [![][rb]][r5]  |    [![][nb]][n5]     |   [![][kb]][k5]   |  [![][ab]][a5]  |    [![][sb]][s5]      |\n| Bugs                  |  [![][gbg]][g6]  | [![][rbg]][r6]  |    [![][nbg]][n6]    |   [![][kbg]][k6]  |  [![][abg]][a6] |    [![][sbg]][s6]     |\n| Dependents            |  [![][gdp]][g7]  | [![][rdp]][r7]  |    [![][ndp]][n7]    |   [![][kdp]][k7]  |  [![][adp]][a7] |    [![][sdp]][s7]     |\n| Install size          |  [![][gis]][g8]  | [![][ris]][r8]  |    [![][nis]][n8]    |   [![][kis]][k8]  |  [![][ais]][a8] |    [![][sis]][s8]     |\n\n\\* It's almost API compatible with the browser `fetch` API.<br>\n\\*\\* Need to switch the protocol manually.<br>\n\\*\\*\\* Currently, only 'DownloadProgress' event is supported, 'UploadProgress' event is not supported.<br>\n❔ Experimental support.\n\n<!-- GITHUB -->\n[k0]: https://github.com/sindresorhus/ky\n[r0]: https://github.com/request/request\n[n0]: https://github.com/bitinn/node-fetch\n[a0]: https://github.com/axios/axios\n[s0]: https://github.com/visionmedia/superagent\n\n<!-- ISSUES OPEN -->\n[gio]: https://badgen.net/github/open-issues/sindresorhus/got?label\n[kio]: https://badgen.net/github/open-issues/sindresorhus/ky?label\n[rio]: https://badgen.net/github/open-issues/request/request?label\n[nio]: https://badgen.net/github/open-issues/bitinn/node-fetch?label\n[aio]: https://badgen.net/github/open-issues/axios/axios?label\n[sio]: https://badgen.net/github/open-issues/visionmedia/superagent?label\n\n[g1]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[k1]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[r1]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[n1]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[a1]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[s1]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n\n<!-- ISSUES CLOSED -->\n[gic]: https://badgen.net/github/closed-issues/sindresorhus/got?label\n[kic]: https://badgen.net/github/closed-issues/sindresorhus/ky?label\n[ric]: https://badgen.net/github/closed-issues/request/request?label\n[nic]: https://badgen.net/github/closed-issues/bitinn/node-fetch?label\n[aic]: https://badgen.net/github/closed-issues/axios/axios?label\n[sic]: https://badgen.net/github/closed-issues/visionmedia/superagent?label\n\n[g2]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[k2]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[r2]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[n2]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[a2]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[s2]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n\n<!-- DOWNLOADS -->\n[gd]: https://badgen.net/npm/dm/got?label\n[kd]: https://badgen.net/npm/dm/ky?label\n[rd]: https://badgen.net/npm/dm/request?label\n[nd]: https://badgen.net/npm/dm/node-fetch?label\n[ad]: https://badgen.net/npm/dm/axios?label\n[sd]: https://badgen.net/npm/dm/superagent?label\n\n[g3]: https://www.npmjs.com/package/got\n[k3]: https://www.npmjs.com/package/ky\n[r3]: https://www.npmjs.com/package/request\n[n3]: https://www.npmjs.com/package/node-fetch\n[a3]: https://www.npmjs.com/package/axios\n[s3]: https://www.npmjs.com/package/superagent\n\n<!-- COVERAGE -->\n[gc]: https://badgen.net/coveralls/c/github/sindresorhus/got?label\n[kc]: https://badgen.net/codecov/c/github/sindresorhus/ky?label\n[rc]: https://badgen.net/coveralls/c/github/request/request?label\n[nc]: https://badgen.net/coveralls/c/github/bitinn/node-fetch?label\n[ac]: https://badgen.net/coveralls/c/github/mzabriskie/axios?label\n[sc]: https://badgen.net/codecov/c/github/visionmedia/superagent?label\n\n[g4]: https://coveralls.io/github/sindresorhus/got\n[k4]: https://codecov.io/gh/sindresorhus/ky\n[r4]: https://coveralls.io/github/request/request\n[n4]: https://coveralls.io/github/bitinn/node-fetch\n[a4]: https://coveralls.io/github/mzabriskie/axios\n[s4]: https://codecov.io/gh/visionmedia/superagent\n\n<!-- BUILD -->\n[gb]: https://badgen.net/travis/sindresorhus/got?label\n[kb]: https://badgen.net/travis/sindresorhus/ky?label\n[rb]: https://badgen.net/travis/request/request?label\n[nb]: https://badgen.net/travis/bitinn/node-fetch?label\n[ab]: https://badgen.net/travis/axios/axios?label\n[sb]: https://badgen.net/travis/visionmedia/superagent?label\n\n[g5]: https://travis-ci.org/sindresorhus/got\n[k5]: https://travis-ci.org/sindresorhus/ky\n[r5]: https://travis-ci.org/request/request\n[n5]: https://travis-ci.org/bitinn/node-fetch\n[a5]: https://travis-ci.org/axios/axios\n[s5]: https://travis-ci.org/visionmedia/superagent\n\n<!-- BUGS -->\n[gbg]: https://badgen.net/github/label-issues/sindresorhus/got/bug/open?label\n[kbg]: https://badgen.net/github/label-issues/sindresorhus/ky/bug/open?label\n[rbg]: https://badgen.net/github/label-issues/request/request/Needs%20investigation/open?label\n[nbg]: https://badgen.net/github/label-issues/bitinn/node-fetch/bug/open?label\n[abg]: https://badgen.net/github/label-issues/axios/axios/type:bug/open?label\n[sbg]: https://badgen.net/github/label-issues/visionmedia/superagent/Bug/open?label\n\n[g6]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[k6]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[r6]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A\"Needs+investigation\"\n[n6]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[a6]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Atype:bug\n[s6]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3ABug\n\n<!-- DEPENDENTS -->\n[gdp]: https://badgen.net/npm/dependents/got?label\n[kdp]: https://badgen.net/npm/dependents/ky?label\n[rdp]: https://badgen.net/npm/dependents/request?label\n[ndp]: https://badgen.net/npm/dependents/node-fetch?label\n[adp]: https://badgen.net/npm/dependents/axios?label\n[sdp]: https://badgen.net/npm/dependents/superagent?label\n\n[g7]: https://www.npmjs.com/package/got?activeTab=dependents\n[k7]: https://www.npmjs.com/package/ky?activeTab=dependents\n[r7]: https://www.npmjs.com/package/request?activeTab=dependents\n[n7]: https://www.npmjs.com/package/node-fetch?activeTab=dependents\n[a7]: https://www.npmjs.com/package/axios?activeTab=dependents\n[s7]: https://www.npmjs.com/package/visionmedia?activeTab=dependents\n\n<!-- INSTALL SIZE -->\n[gis]: https://badgen.net/packagephobia/install/got?label\n[kis]: https://badgen.net/packagephobia/install/ky?label\n[ris]: https://badgen.net/packagephobia/install/request?label\n[nis]: https://badgen.net/packagephobia/install/node-fetch?label\n[ais]: https://badgen.net/packagephobia/install/axios?label\n[sis]: https://badgen.net/packagephobia/install/superagent?label\n\n[g8]: https://packagephobia.now.sh/result?p=got\n[k8]: https://packagephobia.now.sh/result?p=ky\n[r8]: https://packagephobia.now.sh/result?p=request\n[n8]: https://packagephobia.now.sh/result?p=node-fetch\n[a8]: https://packagephobia.now.sh/result?p=axios\n[s8]: https://packagephobia.now.sh/result?p=superagent\n\n#### Install size of the dependencies\n\n|                   Dependency                   |          Install size         |\n|------------------------------------------------|-------------------------------|\n| [@sindresorhus/is][url-is]                     | ![][size-is]                  |\n| [@szmarczak/http-timer][url-http-timer]        | ![][size-http-timer]          |\n| [cacheable-request][url-cacheable-request]     | ![][size-cacheable-request]   |\n| [decompress-response][url-decompress-response] | ![][size-decompress-response] |\n| [duplexer3][url-duplexer3]                     | ![][size-duplexer3]           |\n| [get-stream][url-get-stream]                   | ![][size-get-stream]          |\n| [lowercase-keys][url-lowercase-keys]           | ![][size-lowercase-keys]      |\n| [mimic-response][url-mimic-response]           | ![][size-mimic-response]      |\n| [p-cancelable][url-p-cancelable]               | ![][size-p-cancelable]        |\n| [to-readable-stream][url-to-readable-stream]   | ![][size-to-readable-stream]  |\n|                                                | ![][gis]                      |\n\n[size-is]: https://badgen.net/packagephobia/install/@sindresorhus/is?label\n[size-http-timer]: https://badgen.net/packagephobia/install/@szmarczak/http-timer?label\n[size-cacheable-request]: https://badgen.net/packagephobia/install/cacheable-request?label\n[size-decompress-response]: https://badgen.net/packagephobia/install/decompress-response?label\n[size-duplexer3]: https://badgen.net/packagephobia/install/duplexer3?label\n[size-get-stream]: https://badgen.net/packagephobia/install/get-stream?label\n[size-lowercase-keys]: https://badgen.net/packagephobia/install/lowercase-keys?label\n[size-mimic-response]: https://badgen.net/packagephobia/install/mimic-response?label\n[size-p-cancelable]: https://badgen.net/packagephobia/install/p-cancelable?label\n[size-to-readable-stream]: https://badgen.net/packagephobia/install/to-readable-stream?label\n\n[url-is]: https://github.com/sindresorhus/is\n[url-http-timer]: https://github.com/szmarczak/http-timer\n[url-cacheable-request]: https://github.com/lukechilds/cacheable-request\n[url-decompress-response]: https://github.com/sindresorhus/decompress-response\n[url-duplexer3]: https://github.com/floatdrop/duplexer3\n[url-get-stream]: https://github.com/sindresorhus/get-stream\n[url-lowercase-keys]: https://github.com/sindresorhus/lowercase-keys\n[url-mimic-response]: https://github.com/sindresorhus/mimic-response\n[url-p-cancelable]: https://github.com/sindresorhus/p-cancelable\n[url-to-readable-stream]: https://github.com/sindresorhus/to-readable-stream\n\n## Related\n\n- [gh-got](https://github.com/sindresorhus/gh-got) - Got convenience wrapper to interact with the GitHub API\n- [gl-got](https://github.com/singapore/gl-got) - Got convenience wrapper to interact with the GitLab API\n- [travis-got](https://github.com/samverschueren/travis-got) - Got convenience wrapper to interact with the Travis API\n- [graphql-got](https://github.com/kevva/graphql-got) - Got convenience wrapper to interact with GraphQL\n- [GotQL](https://github.com/khaosdoctor/gotql) - Got convenience wrapper to interact with GraphQL using JSON-parsed queries instead of strings\n- [got-fetch](https://github.com/alexghr/got-fetch) - Got with a `fetch` interface\n\n\n## Maintainers\n\n[![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://sindresorhus.com) | [![Szymon Marczak](https://github.com/szmarczak.png?size=100)](https://github.com/szmarczak) | [![Alexander Tesfamichael](https://github.com/AlexTes.png?size=100)](https://github.com/AlexTes) | [![Brandon Smith](https://github.com/brandon93s.png?size=100)](https://github.com/brandon93s) | [![Luke Childs](https://github.com/lukechilds.png?size=100)](https://github.com/lukechilds)\n---|---|---|---|---\n[Sindre Sorhus](https://sindresorhus.com) | [Szymon Marczak](https://github.com/szmarczak) | [Alexander Tesfamichael](https://alextes.me) | [Brandon Smith](https://github.com/brandon93s) | [Luke Childs](https://github.com/lukechilds)\n\n###### Former\n\n- [Vsevolod Strukchinsky](https://github.com/floatdrop)\n\n\n---\n\n<div align=\"center\">\n\t<b>\n\t\t<a href=\"https://tidelift.com/subscription/pkg/npm-got?utm_source=npm-got&utm_medium=referral&utm_campaign=readme\">Get professional support for this package with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n","funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","babel":false,"compileEnhancements":false,"extensions":["ts"],"require":["ts-node/register"]},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"]},"gitHead":"71b8452efcd173d54700fb090cbe5664da702143","readmeFilename":"readme.md","_nodeVersion":"10.17.0","_npmVersion":"6.13.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.0.0-beta.3_1575183602942_0.26979586213258777"},"_hasShrinkwrap":false},"10.0.0":{"_id":"got@10.0.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.0.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@sindresorhus/tsconfig":"^0.6.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"^12.12.14","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"^2.9.0","@typescript-eslint/parser":"^2.9.0","ava":"^2.4.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.23.0","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^14.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^7.5.0","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","ts-node":"^8.5.2","typescript":"^3.7.2","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^3.1.0","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^0.2.1","cacheable-request":"^7.0.0","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.8.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"de5794240952e81784982a372d936d0be05998e5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.0.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","babel":false,"compileEnhancements":false,"extensions":["ts"],"require":["ts-node/register"]},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"]},"gitHead":"abdfee258a8a18a9db0f8711250cc2cb6d5fb179","_nodeVersion":"10.17.0","_npmVersion":"6.13.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.0.0_1575187589734_0.5423738990459677"},"_hasShrinkwrap":false},"10.0.1":{"_id":"got@10.0.1","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.0.1","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@sindresorhus/tsconfig":"^0.6.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"^12.12.14","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"^2.9.0","@typescript-eslint/parser":"^2.9.0","ava":"^2.4.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.23.0","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^14.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^7.5.0","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","ts-node":"^8.5.2","typescript":"^3.7.2","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^3.1.0","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^0.2.1","cacheable-request":"^7.0.0","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.8.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"0c9eb81a7e5e3baca2dddd611a4bd7c054e31fdd","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.0.1.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","babel":false,"compileEnhancements":false,"extensions":["ts"],"require":["ts-node/register"]},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"]},"gitHead":"8ab83888bd16d0942a82b2cc591afd341cd316e5","_nodeVersion":"10.17.0","_npmVersion":"6.11.3","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.0.1_1575219001900_0.31044601559159"},"_hasShrinkwrap":false},"10.0.2":{"_id":"got@10.0.2","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.0.2","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@sindresorhus/tsconfig":"^0.6.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"^12.12.14","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"2.10.0","@typescript-eslint/parser":"2.10.0","ava":"^2.4.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.23.0","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^14.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^7.5.0","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","ts-node":"^8.5.2","typescript":"^3.7.2","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^3.1.1","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^0.2.1","cacheable-request":"^7.0.0","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.8.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"f03040d966e0ff8da516d92e8689a3f9def44a3c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.0.2.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","babel":false,"compileEnhancements":false,"extensions":["ts"],"require":["ts-node/register"]},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off"}},"gitHead":"a755a1614938b52a87321ad69f183aa76d57153b","_nodeVersion":"10.17.0","_npmVersion":"6.13.2","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.0.2_1575744593506_0.8319115249298918"},"_hasShrinkwrap":false},"10.0.3":{"_id":"got@10.0.3","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.0.3","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@sindresorhus/tsconfig":"^0.6.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"^12.12.14","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"2.10.0","@typescript-eslint/parser":"2.10.0","ava":"^2.4.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.23.0","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^14.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^7.5.0","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","ts-node":"^8.5.2","typescript":"^3.7.2","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^3.1.1","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^0.2.1","cacheable-request":"^7.0.0","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.8.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"0bd93429fd2891de0026ed731a16143e6193e7ac","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.0.3.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","babel":false,"compileEnhancements":false,"extensions":["ts"],"require":["ts-node/register"]},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off"}},"gitHead":"8d533febf7fef4fddb85294a6a59a8bc136259e5","_nodeVersion":"13.0.1","_npmVersion":"6.13.2","maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.0.3_1575917197447_0.6915428770510712"},"_hasShrinkwrap":false},"10.0.4":{"_id":"got@10.0.4","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.0.4","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@sindresorhus/tsconfig":"^0.6.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"^12.12.14","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"2.10.0","@typescript-eslint/parser":"2.10.0","ava":"^2.4.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.23.0","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^14.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^7.5.0","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","ts-node":"^8.5.2","typescript":"^3.7.2","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^3.1.1","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^0.2.1","cacheable-request":"^7.0.0","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.8.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"d3a5a6cafd2f6c342d562513cc2d2d7b6afdcbb4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.0.4.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","babel":false,"compileEnhancements":false,"extensions":["ts"],"require":["ts-node/register"]},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off"}},"gitHead":"d083a5954f2b8db414549fac98fa74856ee286a7","_nodeVersion":"10.17.0","_npmVersion":"6.11.3","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.0.4_1576156374216_0.875709961283806"},"_hasShrinkwrap":false},"10.1.0":{"_id":"got@10.1.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.1.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@sindresorhus/tsconfig":"^0.6.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"^12.12.14","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"2.10.0","@typescript-eslint/parser":"2.10.0","ava":"^2.4.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.23.0","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^14.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^7.5.0","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","ts-node":"^8.5.2","typescript":"^3.7.2","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^3.1.1","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^0.2.1","cacheable-request":"^7.0.0","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.8.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"f8437664bdc95a80638db9e101fa81d6e730b67a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.1.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","babel":false,"compileEnhancements":false,"extensions":["ts"],"require":["ts-node/register"]},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off"}},"gitHead":"db5165217e2b92400de558dafa81d57b9fa17e55","_nodeVersion":"10.17.0","_npmVersion":"6.11.3","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.1.0_1576758632769_0.8372193347609942"},"_hasShrinkwrap":false},"10.2.0":{"_id":"got@10.2.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.2.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@sindresorhus/tsconfig":"^0.7.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"^13.1.0","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"^2.13.0","@typescript-eslint/parser":"^2.13.0","ava":"^2.4.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.24.1","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^15.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^8.0.1","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","ts-node":"^8.5.2","typescript":"^3.7.2","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^3.1.1","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^0.2.1","cacheable-request":"^7.0.0","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.8.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"c7d54e5b41881e5c64952a4013986af12dbab47f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.2.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","babel":false,"compileEnhancements":false,"extensions":["ts"],"require":["ts-node/register"]},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off"}},"gitHead":"8f9847c531f6e47ef4140df1c32fc8837381b5bb","_nodeVersion":"10.17.0","_npmVersion":"6.11.3","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.2.0_1577135153285_0.061861071430093784"},"_hasShrinkwrap":false},"10.2.1":{"_id":"got@10.2.1","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.2.1","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@sindresorhus/tsconfig":"^0.7.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"^13.1.2","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"2.14.0","@typescript-eslint/parser":"2.14.0","ava":"^2.4.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.24.1","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^15.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^8.0.2","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","ts-node":"^8.5.2","typescript":"3.7.4","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^0.2.1","cacheable-request":"^7.0.0","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.8.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"7087485482fb31aa6e6399fd493dd04639da117b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.2.1.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","babel":false,"compileEnhancements":false,"extensions":["ts"],"require":["ts-node/register"]},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off"}},"gitHead":"7c22b19764585d391e3d5761e95c186863326fd9","_nodeVersion":"10.17.0","_npmVersion":"6.13.4","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.2.1_1577903482966_0.19607702609016409"},"_hasShrinkwrap":false},"10.2.2":{"_id":"got@10.2.2","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.2.2","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@sindresorhus/tsconfig":"^0.7.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"^13.1.2","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"2.14.0","@typescript-eslint/parser":"2.14.0","ava":"^2.4.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.24.1","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^15.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^8.0.2","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","ts-node":"^8.5.2","typescript":"3.7.4","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^0.2.1","cacheable-request":"^7.0.0","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.8.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"3cd61dc07db0533c6190a2889b78e0c39c0f52d6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.2.2.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","babel":false,"compileEnhancements":false,"extensions":["ts"],"require":["ts-node/register"]},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off"}},"gitHead":"b288927c18537acac8b0d95833095a9bde1a5280","_nodeVersion":"10.17.0","_npmVersion":"6.13.4","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.2.2_1578756968085_0.21316951816561036"},"_hasShrinkwrap":false},"10.3.0":{"_id":"got@10.3.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.3.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@sindresorhus/tsconfig":"^0.7.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"13.1.2","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"^2.17.0","@typescript-eslint/parser":"^2.17.0","ava":"^2.4.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.24.1","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^15.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^8.1.1","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","ts-node":"^8.5.2","typescript":"3.7.5","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^0.2.1","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.9.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"c67b26b48425d1609dda9004c4013cd379fd15d5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.3.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","babel":false,"compileEnhancements":false,"extensions":["ts"],"require":["ts-node/register"]},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off"}},"gitHead":"689c660441569faad4bf6a98dd75cbd187a78185","_nodeVersion":"10.17.0","_npmVersion":"6.11.3","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.3.0_1579877630228_0.8290251378485691"},"_hasShrinkwrap":false},"10.4.0":{"_id":"got@10.4.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.4.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.0.0","@sindresorhus/tsconfig":"^0.7.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"13.1.2","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"^2.17.0","@typescript-eslint/parser":"^2.17.0","ava":"^3.1.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.24.1","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^15.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^8.1.1","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","typescript":"3.7.5","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^1.0.0","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.9.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"2bd869d3d965716a43bee89d6fc3d16b565109c4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.4.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"concurrency":4,"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off"}},"gitHead":"27cdd982058ed77d6d81b58059217a8a7f2d2471","_nodeVersion":"13.1.0","_npmVersion":"6.13.7","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.4.0_1580456229787_0.8194076863984698"},"_hasShrinkwrap":false},"10.5.0":{"_id":"got@10.5.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.5.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.0","@sindresorhus/tsconfig":"^0.7.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"13.1.2","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"^2.17.0","@typescript-eslint/parser":"^2.17.0","ava":"^3.2.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.24.1","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^15.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^8.1.1","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","typescript":"3.7.5","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^2.0.0","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.9.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"8335299ca0b69b8564971837a455c87ace4779a4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.5.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off"}},"gitHead":"b4a540218efa09292738f63a84b7ed2b63a81175","_nodeVersion":"10.18.1","_npmVersion":"6.13.4","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.5.0_1581019666524_0.04266631567323764"},"_hasShrinkwrap":false},"10.5.1":{"_id":"got@10.5.1","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.5.1","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.0","@sindresorhus/tsconfig":"^0.7.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"13.1.2","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"^2.17.0","@typescript-eslint/parser":"^2.17.0","ava":"^3.2.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.24.1","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^15.0.0","p-event":"^4.0.0","proxyquire":"^2.0.1","sinon":"^8.1.1","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","typescript":"3.7.5","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^2.0.0","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.9.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"8680f6366db65b14ee41717d509dedc4d46f225d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.5.1.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off"}},"gitHead":"78fb85b01fd106f4fe0295f5b136d722b022be58","_nodeVersion":"10.18.1","_npmVersion":"6.13.4","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.5.1_1581057144077_0.5933626961289133"},"_hasShrinkwrap":false},"10.5.2":{"_id":"got@10.5.2","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.5.2","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.0","@sindresorhus/tsconfig":"^0.7.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"13.1.2","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"^2.17.0","@typescript-eslint/parser":"^2.17.0","ava":"^3.2.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.24.1","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^15.0.0","proxyquire":"^2.0.1","sinon":"^8.1.1","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","typescript":"3.7.5","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^2.0.0","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","p-event":"^4.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.9.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"28a35ed7d6dac64fe58074965d9bb17c941b8fe0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.5.2.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off"}},"gitHead":"4f8c555747c45ec2ae33aa12e4e945360a8469f0","_nodeVersion":"10.18.1","_npmVersion":"6.13.4","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.5.2_1581058467510_0.17375661607303794"},"_hasShrinkwrap":false},"10.5.3":{"_id":"got@10.5.3","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.5.3","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.0","@sindresorhus/tsconfig":"^0.7.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"13.1.2","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"^2.17.0","@typescript-eslint/parser":"^2.17.0","ava":"^3.2.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.24.1","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^15.0.0","proxyquire":"^2.0.1","sinon":"^8.1.1","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","typescript":"3.7.5","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^2.0.0","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","p-event":"^4.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.9.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"41112536ace735166a2c144fc31b96112d555120","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.5.3.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off"}},"gitHead":"3c6ca29000707dfad1d51edd013748107806404d","_nodeVersion":"13.7.0","_npmVersion":"6.13.6","maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.5.3_1581178508406_0.584507429728429"},"_hasShrinkwrap":false},"10.5.4":{"_id":"got@10.5.4","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.5.4","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.0","@sindresorhus/tsconfig":"^0.7.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"13.1.2","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"^2.17.0","@typescript-eslint/parser":"^2.17.0","ava":"^3.2.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.24.1","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^15.0.0","proxyquire":"^2.0.1","sinon":"^8.1.1","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","typescript":"3.7.5","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^2.0.0","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","p-event":"^4.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.9.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"1cf7bee3436a80be48a314c197d22df3f7dee7e0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.5.4.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off"}},"gitHead":"f9a719c1b1406afa586eec6bb498ad8361050305","_nodeVersion":"13.7.0","_npmVersion":"6.13.6","maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.5.4_1581184223718_0.5394783796641827"},"_hasShrinkwrap":false},"10.5.5":{"_id":"got@10.5.5","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.5.5","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.0","@sindresorhus/tsconfig":"^0.7.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"13.1.2","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"^2.17.0","@typescript-eslint/parser":"^2.17.0","ava":"^3.2.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.24.1","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^5.1.1","nock":"^11.3.4","np":"^5.1.3","nyc":"^15.0.0","proxyquire":"^2.0.1","sinon":"^8.1.1","slow-stream":"0.0.4","tempy":"^0.3.0","tough-cookie":"^3.0.0","typescript":"3.7.5","xo":"^0.25.3"},"dependencies":{"@sindresorhus/is":"^1.0.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^2.0.0","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","p-event":"^4.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.9.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"9ab2702c2a6b354ff95585144546d3e304a5022f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.5.5.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off"}},"gitHead":"e450fa044efa96ac539b64dcb80f5a076c6592a2","_nodeVersion":"13.7.0","_npmVersion":"6.13.6","maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.5.5_1581192388115_0.5842748309483687"},"_hasShrinkwrap":false},"10.5.6":{"_id":"got@10.5.6","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.5.6","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.0","@sindresorhus/tsconfig":"^0.7.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"13.1.2","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"^2.19.2","@typescript-eslint/parser":"^2.19.2","ava":"^3.3.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.26.0","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^6.0.0","nock":"^11.8.2","np":"^6.0.0","nyc":"^15.0.0","proxyquire":"^2.0.1","sinon":"^8.1.1","slow-stream":"0.0.4","tempy":"^0.4.0","tough-cookie":"^3.0.0","typescript":"3.7.5","xo":"^0.26.0"},"dependencies":{"@sindresorhus/is":"^2.0.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^2.0.0","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","p-event":"^4.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.10.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"fa9cbec9563ad27cff6008e8d48be04aa7788463","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.5.6.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off"}},"gitHead":"68b0d80ffdd71f4654ac58328318933fa19a0f43","_nodeVersion":"13.7.0","_npmVersion":"6.13.6","maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.5.6_1581882843229_0.6537364652090472"},"_hasShrinkwrap":false},"10.5.7":{"_id":"got@10.5.7","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.5.7","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.0","@sindresorhus/tsconfig":"^0.7.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"13.1.2","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"^2.19.2","@typescript-eslint/parser":"^2.19.2","ava":"^3.3.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.26.0","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^6.0.0","nock":"^11.8.2","np":"^6.0.0","nyc":"^15.0.0","proxyquire":"^2.0.1","sinon":"^8.1.1","slow-stream":"0.0.4","tempy":"^0.4.0","tough-cookie":"^3.0.0","typescript":"3.7.5","xo":"^0.26.0"},"dependencies":{"@sindresorhus/is":"^2.0.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^2.0.0","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.0.0","p-cancelable":"^2.0.0","p-event":"^4.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.10.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"bd0ef35404345d31f1d6793ed8133896ea911a19","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.5.7.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off"}},"gitHead":"acefaa4c2a0cb3c33b3f952be29ac0a9cb316e87","_nodeVersion":"13.7.0","_npmVersion":"6.13.6","maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.5.7_1581883785826_0.8388540575896586"},"_hasShrinkwrap":false},"10.6.0":{"_id":"got@10.6.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.6.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"13.1.2","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"^2.19.2","@typescript-eslint/parser":"^2.19.2","ava":"^3.3.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.26.0","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^6.0.0","nock":"^12.0.0","np":"^6.0.0","nyc":"^15.0.0","proxyquire":"^2.0.1","sinon":"^8.1.1","slow-stream":"0.0.4","tempy":"^0.4.0","tough-cookie":"^3.0.0","typescript":"3.7.5","xo":"^0.26.0"},"dependencies":{"@sindresorhus/is":"^2.0.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^2.0.0","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.1.0","p-cancelable":"^2.0.0","p-event":"^4.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.10.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"ac3876261a4d8e5fc4f81186f79955ce7b0501dc","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.6.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"browser":{"decompress-response":false,"electron":false},"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off"}},"gitHead":"33a696694ebb2bd1c995f4800344fdf9b7fa1e86","_nodeVersion":"10.18.1","_npmVersion":"6.13.7","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.6.0_1582184379597_0.8243294570835618"},"_hasShrinkwrap":false},"10.7.0":{"_id":"got@10.7.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"10.7.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","electron","brotli","requests","human-friendly","axios","superagent"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@types/duplexer3":"^0.1.0","@types/express":"^4.17.2","@types/lolex":"^5.1.0","@types/node":"13.1.2","@types/proxyquire":"^1.3.28","@types/sinon":"^7.0.13","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"^2.19.2","@typescript-eslint/parser":"^2.19.2","ava":"^3.3.0","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.26.0","express":"^4.17.1","form-data":"^3.0.0","get-port":"^5.0.0","keyv":"^4.0.0","lolex":"^6.0.0","nock":"^12.0.0","np":"^6.0.0","nyc":"^15.0.0","proxyquire":"^2.0.1","sinon":"^8.1.1","slow-stream":"0.0.4","tempy":"^0.4.0","tough-cookie":"^3.0.0","typescript":"3.7.5","xo":"^0.26.0"},"dependencies":{"@sindresorhus/is":"^2.0.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","cacheable-lookup":"^2.0.0","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","duplexer3":"^0.1.4","get-stream":"^5.0.0","lowercase-keys":"^2.0.0","mimic-response":"^2.1.0","p-cancelable":"^2.0.0","p-event":"^4.0.0","responselike":"^2.0.0","to-readable-stream":"^2.0.0","type-fest":"^0.10.0"},"engines":{"node":">=10"},"main":"dist/source","dist":{"shasum":"62889dbcd6cca32cd6a154cc2d0c6895121d091f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-10.7.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"browser":{"electron":false},"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off"}},"gitHead":"5c74084fe49fe69e3e12e059d6adf46def2af764","_nodeVersion":"10.19.0","_npmVersion":"6.13.4","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_10.7.0_1585075134197_0.9440833449617358"},"_hasShrinkwrap":false},"11.0.0-beta.1":{"_id":"got@11.0.0-beta.1","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.0.0-beta.1","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@types/benchmark":"^1.0.31","@types/express":"^4.17.6","@types/lolex":"^5.1.0","@types/node":"13.1.2","@types/node-fetch":"^2.5.5","@types/request":"^2.48.4","@types/sinon":"^9.0.0","@types/tough-cookie":"^2.3.5","@typescript-eslint/eslint-plugin":"^2.27.0","@typescript-eslint/parser":"^2.27.0","ava":"^3.6.0","axios":"^0.19.2","benchmark":"^2.1.4","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.27.0","express":"^4.17.1","form-data":"^3.0.0","lolex":"^6.0.0","nock":"^12.0.0","node-fetch":"^2.6.0","np":"^6.0.0","nyc":"^15.0.1","p-event":"^4.0.0","sinon":"^9.0.2","slow-stream":"0.0.4","tempy":"^0.5.0","to-readable-stream":"^2.1.0","tough-cookie":"^3.0.0","typescript":"3.7.5","xo":"^0.29.0"},"dependencies":{"@sindresorhus/is":"^2.1.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^4.1.1","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","get-stream":"^5.0.0","http2-wrapper":"^1.0.0-beta.4.3","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"96ffe9dabaf1a77128b17e83a52ab9bc0ae0e471","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.0.0-beta.1.tgz"},"readme":"<div align=\"center\">\n\t<br>\n\t<br>\n\t<img width=\"360\" src=\"media/logo.svg\" alt=\"Got\">\n\t<br>\n\t<br>\n\t<br>\n\t<p align=\"center\">Huge thanks to <a href=\"https://moxy.studio\"><img src=\"https://sindresorhus.com/assets/thanks/moxy-logo.svg\" width=\"150\"></a> for sponsoring Sindre Sorhus!\n\t</p>\n\t<br>\n\t<br>\n</div>\n\n> Human-friendly and powerful HTTP request library for Node.js\n\n[![Build Status: Linux](https://travis-ci.org/sindresorhus/got.svg?branch=master)](https://travis-ci.org/sindresorhus/got)\n[![Coverage Status](https://coveralls.io/repos/github/sindresorhus/got/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/got?branch=master)\n[![Downloads](https://img.shields.io/npm/dm/got.svg)](https://npmjs.com/got)\n[![Install size](https://packagephobia.now.sh/badge?p=got)](https://packagephobia.now.sh/result?p=got)\n\n[Moving from Request?](documentation/migration-guides.md) [*(Note that Request is unmaintained)*](https://github.com/request/request/issues/3142)\n\n[See how Got compares to other HTTP libraries](#comparison)\n\nFor browser usage, we recommend [Ky](https://github.com/sindresorhus/ky) by the same people.\n\n## Highlights\n\n- [Promise API](#api)\n- [Stream API](#streams)\n- [Pagination API](#pagination)\n- [HTTP2 support](#http2)\n- [Request cancelation](#aborting-the-request)\n- [RFC compliant caching](#cache-adapters)\n- [Follows redirects](#followredirect)\n- [Retries on failure](#retry)\n- [Progress events](#onuploadprogress-progress)\n- [Handles gzip/deflate/brotli](#decompress)\n- [Timeout handling](#timeout)\n- [Errors with metadata](#errors)\n- [JSON mode](#json-mode)\n- [WHATWG URL support](#url)\n- [Hooks](#hooks)\n- [Instances with custom defaults](#instances)\n- [Types](#types)\n- [Composable](documentation/advanced-creation.md#merging-instances)\n- [Plugins](documentation/lets-make-a-plugin.md)\n- [Used by 4K+ packages and 1.8M+ repos](https://github.com/sindresorhus/got/network/dependents)\n- [Actively maintained](https://github.com/sindresorhus/got/graphs/contributors)\n\n## Install\n\n```\n$ npm install got\n```\n\n## Usage\n\n```js\nconst got = require('got');\n\n(async () => {\n\ttry {\n\t\tconst response = await got('https://sindresorhus.com');\n\t\tconsole.log(response.body);\n\t\t//=> '<!doctype html> ...'\n\t} catch (error) {\n\t\tconsole.log(error.response.body);\n\t\t//=> 'Internal server error ...'\n\t}\n})();\n```\n\n###### Streams\n\n```js\nconst stream = require('stream');\nconst {promisify} = require('util');\nconst fs = require('fs');\nconst got = require('got');\n\nconst pipeline = promisify(stream.pipeline);\n\n(async () => {\n    await pipeline(\n        got.stream('https://sindresorhus.com'),\n        fs.createWriteStream('index.html')\n    );\n\n    // For POST, PUT, and PATCH methods `got.stream` returns a `stream.Writable`\n    await pipeline(\n        fs.createReadStream('index.html'),\n        got.stream.post('https://sindresorhus.com')\n    );\n})();\n```\n\n**Tip:** `from.pipe(to)` doesn't forward errors. Instead, use [`stream.pipeline(from, ..., to, callback)`](https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback).\n\n### API\n\nIt's a `GET` request by default, but can be changed by using different methods or via [`options.method`](#method).\n\n**By default, Got will retry on failure. To disable this option, set [`options.retry`](#retry) to `0`.**\n\n#### got(url?, options?)\n\nReturns a Promise giving a [Response object](#response) or a [Got Stream](#streams-1) if `options.isStream` is set to true.\n\n##### url\n\nType: `string | object`\n\nThe URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\nProperties from `options` will override properties in the parsed `url`.\n\nIf no protocol is specified, it will throw a `TypeError`.\n\n##### options\n\nType: `object`\n\nAny of the [`https.request`](https://nodejs.org/api/https.html#https_https_request_options_callback) options.\n\n**Note:** Legacy URL support is disabled. `options.path` is supported only for backwards compatibility. Use `options.pathname` and `options.searchParams` instead. `options.auth` has been replaced with `options.username` & `options.password`.\n\n###### method\n\nType: `string`\\\nDefault: `GET`\n\nThe HTTP method used to make the request.\n\n###### prefixUrl\n\nType: `string | URL`\n\nWhen specified, `prefixUrl` will be prepended to `url`. The prefix can be any valid URL, either relative or absolute.\\\nA trailing slash `/` is optional - one will be added automatically.\n\n**Note:** `prefixUrl` will be ignored if the `url` argument is a URL instance.\n\n**Note:** Leading slashes in `input` are disallowed when using this option to enforce consistency and avoid confusion. For example, when the prefix URL is `https://example.com/foo` and the input is `/bar`, there's ambiguity whether the resulting URL would become `https://example.com/foo/bar` or `https://example.com/bar`. The latter is used by browsers.\n\n**Tip:** Useful when used with [`got.extend()`](#custom-endpoints) to create niche-specific Got instances.\n\n**Tip:** You can change `prefixUrl` using hooks as long as the URL still includes the `prefixUrl`. If the URL doesn't include it anymore, it will throw.\n\n```js\nconst got = require('got');\n\n(async () => {\n\tawait got('unicorn', {prefixUrl: 'https://cats.com'});\n\t//=> 'https://cats.com/unicorn'\n\n\tconst instance = got.extend({\n\t\tprefixUrl: 'https://google.com'\n\t});\n\n\tawait instance('unicorn', {\n\t\thooks: {\n\t\t\tbeforeRequest: [\n\t\t\t\toptions => {\n\t\t\t\t\toptions.prefixUrl = 'https://cats.com';\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t});\n\t//=> 'https://cats.com/unicorn'\n})();\n```\n\n###### headers\n\nType: `object`\\\nDefault: `{}`\n\nRequest headers.\n\nExisting headers will be overwritten. Headers set to `undefined` will be omitted.\n\n###### isStream\n\nType: `boolean`\\\nDefault: `false`\n\nReturns a `Stream` instead of a `Promise`. This is equivalent to calling `got.stream(url, options?)`.\n\n###### body\n\nType: `string | Buffer | stream.Readable` or [`form-data` instance](https://github.com/form-data/form-data)\n\n**Note #1:** The `body` option cannot be used with the `json` or `form` option.\n\n**Note #2:** If you provide this option, `got.stream()` will be read-only.\n\n**Note #3:** If you provide a payload with the `GET` or `HEAD` method, it will throw a `TypeError` unless the method is `GET` and the `allowGetBody` option is set to `true`.\n\n**Note #4:** This option is not enumerable and will not be merged with the instance defaults.\n\nThe `content-length` header will be automatically set if `body` is a `string` / `Buffer` / `fs.createReadStream` instance / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n\n###### json\n\nType: `object | Array | number | string | boolean | null` *(JSON-serializable values)*\n\n**Note #1:** If you provide this option, `got.stream()` will be read-only.\\\n**Note #2:** This option is not enumerable and will not be merged with the instance defaults.\n\nJSON body. If the `Content-Type` header is not set, it will be set to `application/json`.\n\n###### context\n\nType: `object`\n\nUser data. In contrast to other options, `context` is not enumerable.\n\n**Note:** The object is never merged, it's just passed through. Got will not modify the object in any way.\n\nIt's very useful for storing auth tokens:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\toptions => {\n\t\t\t\tif (!options.context || !options.context.token) {\n\t\t\t\t\tthrow new Error('Token required');\n\t\t\t\t}\n\n\t\t\t\toptions.headers.token = options.context.token;\n\t\t\t}\n\t\t]\n\t}\n});\n\n(async () => {\n\tconst context = {\n\t\ttoken: 'secret'\n\t};\n\n\tconst response = await instance('https://httpbin.org/headers', {context});\n\n\t// Let's see the headers\n\tconsole.log(response.body);\n})();\n```\n\n###### responseType\n\nType: `string`\\\nDefault: `'text'`\n\n**Note:** When using streams, this option is ignored.\n\nThe parsing method. Can be `'text'`, `'json'` or `'buffer'`.\n\nThe promise also has `.text()`, `.json()` and `.buffer()` methods which return another Got promise for the parsed body.\\\nIt's like setting the options to `{responseType: 'json', resolveBodyOnly: true}` but without affecting the main Got promise.\n\nExample:\n\n```js\n(async () => {\n\tconst responsePromise = got(url);\n\tconst bufferPromise = responsePromise.buffer();\n\tconst jsonPromise = responsePromise.json();\n\n\tconst [response, buffer, json] = Promise.all([responsePromise, bufferPromise, jsonPromise]);\n\t// `response` is an instance of Got Response\n\t// `buffer` is an instance of Buffer\n\t// `json` is an object\n})();\n```\n\n```js\n// This\nconst body = await got(url).json();\n\n// is semantically the same as this\nconst body = await got(url, {responseType: 'json', resolveBodyOnly: true});\n```\n\n###### resolveBodyOnly\n\nType: `boolean`\\\nDefault: `false`\n\nWhen set to `true` the promise will return the [Response body](#body-1) instead of the [Response](#response) object.\n\n###### cookieJar\n\nType: `object` | [`tough.CookieJar` instance](https://github.com/salesforce/tough-cookie#cookiejar)\n\n**Note:** If you provide this option, `options.headers.cookie` will be overridden.\n\nCookie support. You don't have to care about parsing or how to store them. [Example](#cookies).\n\n###### cookieJar.setCookie\n\nType: `Function<Promise>`\n\nThe function takes two arguments: `rawCookie` (`string`) and `url` (`string`).\n\n###### cookieJar.getCookieString\n\nType: `Function<Promise>`\n\nThe function takes one argument: `url` (`string`).\n\n###### ignoreInvalidCookies\n\nType: `boolean`\\\nDefault: `false`\n\nIgnore invalid cookies instead of throwing an error. Only useful when the `cookieJar` option has been set. Not recommended.\n\n###### encoding\n\nType: `string`\\\nDefault: `'utf8'`\n\n[Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data.\n\nTo get a [`Buffer`](https://nodejs.org/api/buffer.html), you need to set [`responseType`](#responseType) to `buffer` instead.\n\n**Note:** This doesn't affect streams! Instead, you need to do `got.stream(...).setEncoding(encoding)`.\n\n###### form\n\nType: `object`\n\n**Note #1:** If you provide this option, `got.stream()` will be read-only.\\\n**Note #2:** This option is not enumerable and will not be merged with the instance defaults.\n\nThe form body is converted to a query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n\nIf the `Content-Type` header is not present, it will be set to `application/x-www-form-urlencoded`.\n\n###### searchParams\n\nType: `string | object<string, string | number> | URLSearchParams`\n\nQuery string that will be added to the request URL. This will override the query string in `url`.\n\nIf you need to pass in an array, you can do it using a `URLSearchParams` instance:\n\n```js\nconst got = require('got');\n\nconst searchParams = new URLSearchParams([['key', 'a'], ['key', 'b']]);\n\ngot('https://example.com', {searchParams});\n\nconsole.log(searchParams.toString());\n//=> 'key=a&key=b'\n```\n\n###### timeout\n\nType: `number | object`\n\nMilliseconds to wait for the server to end the response before aborting the request with [`got.TimeoutError`](#gottimeouterror) error (a.k.a. `request` property). By default, there's no timeout.\n\nThis also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n\n- `lookup` starts when a socket is assigned and ends when the hostname has been resolved. Does not apply when using a Unix domain socket.\n- `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n- `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n- `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n- `response` starts when the request has been written to the socket and ends when the response headers are received.\n- `send` starts when the socket is connected and ends with the request has been written to the socket.\n- `request` starts when the request is initiated and ends when the response's end event fires.\n\n###### retry\n\nType: `number | object`\\\nDefault:\n- limit: `2`\n- calculateDelay: `({attemptCount, retryOptions, error, computedValue}) => computedValue`\n- methods: `GET` `PUT` `HEAD` `DELETE` `OPTIONS` `TRACE`\n- statusCodes: [`408`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408) [`413`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413) [`429`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429) [`500`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500) [`502`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502) [`503`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503) [`504`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504) [`521`](https://support.cloudflare.com/hc/en-us/articles/115003011431#521error) [`522`](https://support.cloudflare.com/hc/en-us/articles/115003011431#522error) [`524`](https://support.cloudflare.com/hc/en-us/articles/115003011431#524error)\n- maxRetryAfter: `undefined`\n- errorCodes: `ETIMEDOUT` `ECONNRESET` `EADDRINUSE` `ECONNREFUSED` `EPIPE` `ENOTFOUND` `ENETUNREACH` `EAI_AGAIN`\n\nAn object representing `limit`, `calculateDelay`, `methods`, `statusCodes`, `maxRetryAfter` and `errorCodes` fields for maximum retry count, retry handler, allowed methods, allowed status codes, maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time and allowed error codes.\n\n**Note:** When using streams, this option is ignored. If the connection is reset when downloading, you need to catch the error and clear the file you were writing into to prevent duplicated content.\n\nIf `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.\\\nIf [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n\nDelays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 1).\n\nThe `calculateDelay` property is a `function` that receives an object with `attemptCount`, `retryOptions`, `error` and `computedValue` properties for current retry count, the retry options, error and default computed value. The function must return a delay in milliseconds (`0` return value cancels retry).\n\nBy default, it retries *only* on the specified methods, status codes, and on these network errors:\n- `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n- `ECONNRESET`: Connection was forcibly closed by a peer.\n- `EADDRINUSE`: Could not bind to any free port.\n- `ECONNREFUSED`: Connection was refused by the server.\n- `EPIPE`: The remote side of the stream being written has been closed.\n- `ENOTFOUND`: Couldn't resolve the hostname to an IP address.\n- `ENETUNREACH`: No internet connection.\n- `EAI_AGAIN`: DNS lookup timed out.\n\n###### followRedirect\n\nType: `boolean`\\\nDefault: `true`\n\nDefines if redirect responses should be followed automatically.\n\nNote that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`. This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4).\n\n###### methodRewriting\n\nType: `boolean`\\\nDefault: `true`\n\nBy default, redirects will use [method rewriting](https://tools.ietf.org/html/rfc7231#section-6.4). For example, when sending a POST request and receiving a `302`, it will resend the body to the new location using the same HTTP method (`POST` in this case).\n\n###### allowGetBody\n\nType: `boolean`\\\nDefault: `false`\n\n**Note:** The [RFC 7321](https://tools.ietf.org/html/rfc7231#section-4.3.1) doesn't specify any particular behavior for the GET method having a payload, therefore **it's considered an [anti-pattern](https://en.wikipedia.org/wiki/Anti-pattern)**.\n\nSet this to `true` to allow sending body for the `GET` method. However, the [HTTP/2 specification](https://tools.ietf.org/html/rfc7540#section-8.1.3) says that `An HTTP GET request includes request header fields and no payload body`, therefore when using the HTTP/2 protocol this option will have no effect. This option is only meant to interact with non-compliant servers when you have no other choice.\n\n###### maxRedirects\n\nType: `number`\\\nDefault: `10`\n\nIf exceeded, the request will be aborted and a `MaxRedirectsError` will be thrown.\n\n###### decompress\n\nType: `boolean`\\\nDefault: `true`\n\nDecompress the response automatically. This will set the `accept-encoding` header to `gzip, deflate, br` on Node.js 11.7.0+ or `gzip, deflate` for older Node.js versions, unless you set it yourself.\n\nBrotli (`br`) support requires Node.js 11.7.0 or later.\n\nIf this is disabled, a compressed response is returned as a `Buffer`. This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n\n###### cache\n\nType: `object`\\\nDefault: `false`\n\n[Cache adapter instance](#cache-adapters) for storing cached response data.\n\n###### dnsCache\n\nType: `object`\\\nDefault: `new CacheableLookup()`\n\nAn instance of [`CacheableLookup`](https://github.com/szmarczak/cacheable-lookup) used for making DNS lookups.\n\n###### request\n\nType: `Function`\\\nDefault: `http.request | https.request` *(Depending on the protocol)*\n\nCustom request function. The main purpose of this is to [support HTTP2 using a wrapper](https://github.com/szmarczak/http2-wrapper).\n\n###### http2\n\nType: `boolean`\\\nDefault: `false`\n\nIf set to `true`, Got will additionally accept HTTP2 requests.\\\nIt will choose either HTTP/1.1 or HTTP/2 depending on the ALPN protocol.\n\n**Note:** Overriding `options.request` will disable HTTP2 support.\n\n**Note:** This option will default to `true` in the next upcoming major release.\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst {headers} = await got('https://nghttp2.org/httpbin/anything', {http2: true});\n\tconsole.log(headers.via);\n\t//=> '2 nghttpx'\n})();\n```\n\n###### throwHttpErrors\n\nType: `boolean`\\\nDefault: `true`\n\nDetermines if a `got.HTTPError` is thrown for error responses (non-2xx status codes).\n\nIf this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing. This may be useful if you are checking for resource availability and are expecting error responses.\n\n###### agent\n\nType: `object`\n\nAn object representing `http`, `https` and `http2` keys for [`http.Agent`](https://nodejs.org/api/http.html#http_class_http_agent), [`https.Agent`](https://nodejs.org/api/https.html#https_class_https_agent) and [`http2wrapper.Agent`](https://github.com/szmarczak/http2-wrapper#new-http2agentoptions) instance. This is necessary because a request to one protocol might redirect to another. In such a scenario, Got will switch over to the right protocol agent for you.\n\nIf a key is not present, it will default to a global agent.\n\n```js\nconst got = require('got');\nconst HttpAgent = require('agentkeepalive');\nconst {HttpsAgent} = HttpAgent;\n\ngot('https://sindresorhus.com', {\n\tagent: {\n\t\thttp: new HttpAgent(),\n\t\thttps: new HttpsAgent()\n\t}\n});\n```\n\n###### hooks\n\nType: `object<string, Function[]>`\n\nHooks allow modifications during the request lifecycle. Hook functions may be async and are run serially.\n\n###### hooks.init\n\nType: `Function[]`\\\nDefault: `[]`\n\nCalled with plain [request options](#options), right before their normalization. This is especially useful in conjunction with [`got.extend()`](#instances) when the input needs custom handling.\n\nSee the [Request migration guide](documentation/migration-guides.md#breaking-changes) for an example.\n\n**Note #1:** This hook must be synchronous!\\\n**Note #2:** Errors in this hook will be converted into an instances of [`RequestError`](#got.requesterror).\\\n**Note #3:** The options object may not have a `url` property. To modify it, use a `beforeRequest` hook instead.\n\n###### hooks.beforeRequest\n\nType: `Function[]`\\\nDefault: `[]`\n\nCalled with [normalized](source/core/index.ts) [request options](#options). Got will make no further changes to the request before it is sent. This is especially useful in conjunction with [`got.extend()`](#instances) when you want to create an API client that, for example, uses HMAC-signing.\n\nSee the [AWS section](#aws) for an example.\n\n###### hooks.beforeRedirect\n\nType: `Function[]`\\\nDefault: `[]`\n\nCalled with [normalized](source/core/index.ts) [request options](#options) and the redirect [response](#response). Got will make no further changes to the request. This is especially useful when you want to avoid dead sites. Example:\n\n```js\nconst got = require('got');\n\ngot('https://example.com', {\n\thooks: {\n\t\tbeforeRedirect: [\n\t\t\t(options, response) => {\n\t\t\t\tif (options.hostname === 'deadSite') {\n\t\t\t\t\toptions.hostname = 'fallbackSite';\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n###### hooks.beforeRetry\n\nType: `Function[]`\\\nDefault: `[]`\n\n**Note:** When using streams, this hook is ignored.\n\nCalled with [normalized](source/normalize-arguments.ts) [request options](#options), the error and the retry count. Got will make no further changes to the request. This is especially useful when some extra work is required before the next try. Example:\n\n```js\nconst got = require('got');\n\ngot.post('https://example.com', {\n\thooks: {\n\t\tbeforeRetry: [\n\t\t\t(options, error, retryCount) => {\n\t\t\t\tif (error.response.statusCode === 413) { // Payload too large\n\t\t\t\t\toptions.body = getNewBody();\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n**Note:** When retrying in a `afterResponse` hook, all remaining `beforeRetry` hooks will be called without the `error` and `retryCount` arguments.\n\n###### hooks.afterResponse\n\nType: `Function[]`\\\nDefault: `[]`\n\n**Note:** When using streams, this hook is ignored.\n\nCalled with [response object](#response) and a retry function. Calling the retry function will trigger `beforeRetry` hooks.\n\nEach function should return the response. This is especially useful when you want to refresh an access token. Example:\n\n```js\nconst got = require('got');\n\nconst instance = got.extend({\n\thooks: {\n\t\tafterResponse: [\n\t\t\t(response, retryWithMergedOptions) => {\n\t\t\t\tif (response.statusCode === 401) { // Unauthorized\n\t\t\t\t\tconst updatedOptions = {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\ttoken: getNewToken() // Refresh the access token\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Save for further requests\n\t\t\t\t\tinstance.defaults.options = got.mergeOptions(instance.defaults.options, updatedOptions);\n\n\t\t\t\t\t// Make a new retry\n\t\t\t\t\treturn retryWithMergedOptions(updatedOptions);\n\t\t\t\t}\n\n\t\t\t\t// No changes otherwise\n\t\t\t\treturn response;\n\t\t\t}\n\t\t],\n\t\tbeforeRetry: [\n\t\t\t(options, error, retryCount) => {\n\t\t\t\t// This will be called on `retryWithMergedOptions(...)`\n\t\t\t}\n\t\t]\n\t},\n\tmutableDefaults: true\n});\n```\n\n###### hooks.beforeError\n\nType: `Function[]`\\\nDefault: `[]`\n\nCalled with an `Error` instance. The error is passed to the hook right before it's thrown. This is especially useful when you want to have more detailed errors.\n\n**Note:** Errors thrown while normalizing input options are thrown directly and not part of this hook.\n\n```js\nconst got = require('got');\n\ngot('https://api.github.com/some-endpoint', {\n\thooks: {\n\t\tbeforeError: [\n\t\t\terror => {\n\t\t\t\tconst {response} = error;\n \t\t\t\tif (response && response.body) {\n\t\t\t\t\terror.name = 'GitHubError';\n\t\t\t\t\terror.message = `${response.body.message} (${response.statusCode})`;\n\t\t\t\t}\n\n \t\t\t\treturn error;\n\t\t\t}\n\t\t]\n\t}\n});\n```\n\n##### pagination\n\nType: `object`\n\n**Note:** We're [looking for feedback](https://github.com/sindresorhus/got/issues/1052), any ideas on how to improve the API are welcome.\n\n###### pagination.transform\n\nType: `Function`\\\nDefault: `response => JSON.parse(response.body)`\n\nA function that transform [`Response`](#response) into an array of items. This is where you should do the parsing.\n\n###### pagination.paginate\n\nType: `Function`\\\nDefault: [`Link` header logic](source/index.ts)\n\nThe function takes three arguments:\n- `response` - The current response object.\n- `allItems` - An array of the emitted items.\n- `currentItems` - Items from the current response.\n\nIt should return an object representing Got options pointing to the next page. If there are no more pages, `false` should be returned.\n\nFor example, if you want to stop when the response contains less items than expected, you can use something like this:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst limit = 10;\n\n\tconst items = got.paginate('https://example.com/items', {\n\t\tsearchParams: {\n\t\t\tlimit,\n\t\t\toffset: 0\n\t\t},\n\t\tpagination: {\n\t\t\tpaginate: (response, allItems, currentItems) => {\n\t\t\t\tconst previousSearchParams = response.request.options.searchParams;\n\t\t\t\tconst {offset: previousOffset} = previousSearchParams;\n\n\t\t\t\tif (currentItems.length < limit) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tsearchParams: {\n\t\t\t\t\t\t...previousSearchParams,\n\t\t\t\t\t\toffset: previousOffset + limit,\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t});\n\n\tconsole.log('Items from all pages:', items);\n})();\n```\n\n###### pagination.filter\n\nType: `Function`\\\nDefault: `(item, allItems, currentItems) => true`\n\nChecks whether the item should be emitted or not.\n\n###### pagination.shouldContinue\n\nType: `Function`\\\nDefault: `(item, allItems, currentItems) => true`\n\nChecks whether the pagination should continue.\n\nFor example, if you need to stop **before** emitting an entry with some flag, you should use `(item, allItems, currentItems) => !item.flag`. If you want to stop **after** emitting the entry, you should use `(item, allItems, currentItems) => allItems.some(entry => entry.flag)` instead.\n\n###### pagination.countLimit\n\nType: `number`\\\nDefault: `Infinity`\n\nThe maximum amount of items that should be emitted.\n\n##### localAddress\n\nType: `string`\n\nThe IP address used to send the request from.\n\n#### Response\n\nThe response object will typically be a [Node.js HTTP response stream](https://nodejs.org/api/http.html#http_class_http_incomingmessage), however, if returned from the cache it will be a [response-like object](https://github.com/lukechilds/responselike) which behaves in the same way.\n\n##### request\n\nType: `object`\n\n**Note:** This is not a [http.ClientRequest](https://nodejs.org/api/http.html#http_class_http_clientrequest).\n\n- `options` - The Got options that were set on this request.\n\n##### body\n\nType: `string | object | Buffer` *(Depending on `options.responseType`)*\n\nThe result of the request.\n\n##### url\n\nType: `string`\n\nThe request URL or the final URL after redirects.\n\n##### ip\n\nType: `string`\n\nThe remote IP address.\n\n**Note:** Not available when the response is cached. This is hopefully a temporary limitation, see [lukechilds/cacheable-request#86](https://github.com/lukechilds/cacheable-request/issues/86).\n\n##### requestUrl\n\nType: `string`\n\nThe original request URL.\n\n##### timings\n\nType: `object`\n\nThe object contains the following properties:\n\n- `start` - Time when the request started.\n- `socket` - Time when a socket was assigned to the request.\n- `lookup` - Time when the DNS lookup finished.\n- `connect` - Time when the socket successfully connected.\n- `secureConnect` - Time when the socket securely connected.\n- `upload` - Time when the request finished uploading.\n- `response` - Time when the request fired `response` event.\n- `end` - Time when the response fired `end` event.\n- `error` - Time when the request fired `error` event.\n- `abort` - Time when the request fired `abort` event.\n- `phases`\n\t- `wait` - `timings.socket - timings.start`\n\t- `dns` - `timings.lookup - timings.socket`\n\t- `tcp` - `timings.connect - timings.lookup`\n\t- `tls` - `timings.secureConnect - timings.connect`\n\t- `request` - `timings.upload - (timings.secureConnect || timings.connect)`\n\t- `firstByte` - `timings.response - timings.upload`\n\t- `download` - `timings.end - timings.response`\n\t- `total` - `(timings.end || timings.error || timings.abort) - timings.start`\n\nIf something has not been measured yet, it will be `undefined`.\n\n**Note:** The time is a `number` representing the milliseconds elapsed since the UNIX epoch.\n\n##### isFromCache\n\nType: `boolean`\n\nWhether the response was retrieved from the cache.\n\n##### redirectUrls\n\nType: `string[]`\n\nThe redirect URLs.\n\n##### retryCount\n\nType: `number`\n\nThe number of times the request was retried.\n\n#### Streams\n\n**Note:** Progress events, redirect events and request/response events can also be used with promises.\n\n**Note:** To access `response.isFromCache` you need to use `got.stream(url, options).isFromCache`. The value will be undefined until the `response` event.\n\n#### got.stream(url, options?)\n\nSets `options.isStream` to `true`.\n\nReturns a [duplex stream](https://nodejs.org/api/stream.html#stream_class_stream_duplex) with additional events:\n\n##### .on('request', request)\n\n`request` event to get the request object of the request.\n\n**Tip:** You can use `request` event to abort request:\n\n```js\ngot.stream('https://github.com')\n\t.on('request', request => setTimeout(() => request.abort(), 50));\n```\n\n##### .on('response', response)\n\nThe `response` event to get the response object of the final request.\n\n##### .on('redirect', response, nextOptions)\n\nThe `redirect` event to get the response object of a redirect. The second argument is options for the next request to the redirect location.\n\n##### .on('uploadProgress', progress)\n##### .uploadProgress\n##### .on('downloadProgress', progress)\n##### .downloadProgress\n\nProgress events for uploading (sending a request) and downloading (receiving a response). The `progress` argument is an object like:\n\n```js\n{\n\tpercent: 0.1,\n\ttransferred: 1024,\n\ttotal: 10240\n}\n```\n\nIf the `content-length` header is missing, `total` will be `undefined`.\n\n```js\n(async () => {\n\tconst response = await got('https://sindresorhus.com')\n\t\t.on('downloadProgress', progress => {\n\t\t\t// Report download progress\n\t\t})\n\t\t.on('uploadProgress', progress => {\n\t\t\t// Report upload progress\n\t\t});\n\n\tconsole.log(response);\n})();\n```\n\n##### .ip\n\nType: `string`\n\nThe remote IP address.\n\n##### .aborted\n\nType: `boolean`\n\nIndicates whether the request has been aborted or not.\n\n##### .timings\n\nThe same as `response.timings`.\n\n##### .isFromCache\n\nThe same as `response.isFromCache`.\n\n##### .on('error', error)\n\nThe emitted `error` is an instance of [`RequestError`](#got.requesterror).\n\n#### Pagination\n\n#### got.paginate(url, options?)\n\nReturns an async iterator:\n\n```js\n(async () => {\n\tconst countLimit = 10;\n\n\tconst pagination = got.paginate('https://api.github.com/repos/sindresorhus/got/commits', {\n\t\tpagination: {countLimit}\n\t});\n\n\tconsole.log(`Printing latest ${countLimit} Got commits (newest to oldest):`);\n\n\tfor await (const commitData of pagination) {\n\t\tconsole.log(commitData.commit.message);\n\t}\n})();\n```\n\nSee [`options.pagination`](#pagination) for more pagination options.\n\n#### got.get(url, options?)\n#### got.post(url, options?)\n#### got.put(url, options?)\n#### got.patch(url, options?)\n#### got.head(url, options?)\n#### got.delete(url, options?)\n\nSets [`options.method`](#method) to the method name and makes a request.\n\n### Instances\n\n#### got.extend(...options)\n\nConfigure a new `got` instance with default `options`. The `options` are merged with the parent instance's `defaults.options` using [`got.mergeOptions`](#gotmergeoptionsparentoptions-newoptions). You can access the resolved options with the `.defaults` property on the instance.\n\n```js\nconst client = got.extend({\n\tprefixUrl: 'https://example.com',\n\theaders: {\n\t\t'x-unicorn': 'rainbow'\n\t}\n});\n\nclient.get('demo');\n\n/* HTTP Request =>\n * GET /demo HTTP/1.1\n * Host: example.com\n * x-unicorn: rainbow\n */\n```\n\n```js\n(async () => {\n\tconst client = got.extend({\n\t\tprefixUrl: 'httpbin.org',\n\t\theaders: {\n\t\t\t'x-foo': 'bar'\n\t\t}\n\t});\n\tconst {headers} = await client.get('headers').json();\n\t//=> headers['x-foo'] === 'bar'\n\n\tconst jsonClient = client.extend({\n\t\tresponseType: 'json',\n\t\tresolveBodyOnly: true,\n\t\theaders: {\n\t\t\t'x-baz': 'qux'\n\t\t}\n\t});\n\tconst {headers: headers2} = await jsonClient.get('headers');\n\t//=> headers2['x-foo'] === 'bar'\n\t//=> headers2['x-baz'] === 'qux'\n})();\n```\n\nAdditionally, `got.extend()` accepts two properties from the `defaults` object: `mutableDefaults` and `handlers`. Example:\n\n```js\n// You can now modify `mutableGot.defaults.options`.\nconst mutableGot = got.extend({mutableDefaults: true});\n\nconst mergedHandlers = got.extend({\n\thandlers: [\n\t\t(options, next) => {\n\t\t\tdelete options.headers.referer;\n\n\t\t\treturn next(options);\n\t\t}\n\t]\n});\n```\n\n**Note:** Handlers can be asynchronous. The recommended approach is:\n\n```js\nconst handler = (options, next) => {\n\tif (options.stream) {\n\t\t// It's a Stream\n\t\treturn next(options);\n\t}\n\n\t// It's a Promise\n\treturn (async () => {\n\t\ttry {\n\t\t\tconst response = await next(options);\n\t\t\tresponse.yourOwnProperty = true;\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\t// Every error will be replaced by this one.\n\t\t\t// Before you receive any error here,\n\t\t\t// it will be passed to the `beforeError` hooks first.\n\t\t\t// Note: this one won't be passed to `beforeError` hook. It's final.\n\t\t\tthrow new Error('Your very own error.');\n\t\t}\n\t})();\n};\n\nconst instance = got.extend({handlers: [handler]});\n```\n\n#### got.extend(...instances)\n\nMerges many instances into a single one:\n- options are merged using [`got.mergeOptions()`](#gotmergeoptionsparentoptions-newoptions) (+ hooks are merged too),\n- handlers are stored in an array (you can access them through `instance.defaults.handlers`).\n\n#### got.extend(...options, ...instances, ...)\n\nIt's possible to combine options and instances.\\\nIt gives the same effect as `got.extend(...options).extend(...instances)`:\n\n```js\nconst a = {headers: {cat: 'meow'}};\nconst b = got.extend({\n\toptions: {\n\t\theaders: {\n\t\t\tcow: 'moo'\n\t\t}\n\t}\n});\n\n// The same as `got.extend(a).extend(b)`.\n// Note `a` is options and `b` is an instance.\ngot.extend(a, b);\n//=> {headers: {cat: 'meow', cow: 'moo'}}\n```\n\n#### got.mergeOptions(parentOptions, newOptions)\n\nExtends parent options. Avoid using [object spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals) as it doesn't work recursively:\n\n```js\nconst a = {headers: {cat: 'meow', wolf: ['bark', 'wrrr']}};\nconst b = {headers: {cow: 'moo', wolf: ['auuu']}};\n\n{...a, ...b}            // => {headers: {cow: 'moo', wolf: ['auuu']}}\ngot.mergeOptions(a, b)  // => {headers: {cat: 'meow', cow: 'moo', wolf: ['auuu']}}\n```\n\nOptions are deeply merged to a new object. The value of each key is determined as follows:\n\n- If the new property is set to `undefined`, it keeps the old one.\n- If both properties are an instances of `URLSearchParams`, a new URLSearchParams instance is created. The values are merged using [`urlSearchParams.append(key, value)`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/append).\n- If the parent property is an instance of `URL` and the new value is a `string` or `URL`, a new URL instance is created: [`new URL(new, parent)`](https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#Syntax).\n- If the new property is a plain `object`:\n\t- If the parent property is a plain `object` too, both values are merged recursively into a new `object`.\n\t- Otherwise, only the new value is deeply cloned.\n- If the new property is an `Array`, it overwrites the old one with a deep clone of the new property.\n- Properties that are not enumerable, such as `context`, `body`, `json`, and `form`, will not be merged.\n```js\nconst a = {json: {cat: 'meow'}};\nconst b = {json: {cow: 'moo'}};\n\ngot.mergeOptions(a, b);\n//=> {json: {cow: 'moo'}}\n```\n- Otherwise, the new value is assigned to the key.\n\n#### got.defaults\n\nType: `object`\n\nThe Got defaults used in that instance.\n\n##### [options](#options)\n\n##### handlers\n\nType: `Function[]`\\\nDefault: `[]`\n\nAn array of functions. You execute them directly by calling `got()`. They are some sort of \"global hooks\" - these functions are called first. The last handler (*it's hidden*) is either [`asPromise`](source/as-promise.ts) or [`asStream`](source/as-stream.ts), depending on the `options.isStream` property.\n\nEach handler takes two arguments:\n\n###### [options](#options)\n\n###### next()\n\nReturns a `Promise` or a `Stream` depending on [`options.isStream`](#isstream).\n\n```js\nconst settings = {\n\thandlers: [\n\t\t(options, next) => {\n\t\t\tif (options.isStream) {\n\t\t\t\t// It's a Stream, so we can perform stream-specific actions on it\n\t\t\t\treturn next(options)\n\t\t\t\t\t.on('request', request => {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\trequest.abort();\n\t\t\t\t\t\t}, 50);\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\t// It's a Promise\n\t\t\treturn next(options);\n\t\t}\n\t],\n\toptions: got.mergeOptions(got.defaults.options, {\n\t\tresponseType: 'json'\n\t})\n};\n\nconst jsonGot = got.extend(settings);\n```\n\n##### mutableDefaults\n\nType: `boolean`\\\nDefault: `false`\n\nA read-only boolean describing whether the defaults are mutable or not. If set to `true`, you can [update headers over time](#hooksafterresponse), for example, update an access token when it expires.\n\n## Types\n\nGot exports some handy TypeScript types and interfaces. See the type definition for all the exported types.\n\n### Got\n\nTypeScript will automatically infer types for Got instances, but in case you want to define something like dependencies, you can import the available types directly from Got.\n\n```ts\nimport {GotRequestMethod} from 'got';\n\ninterface Dependencies {\n\treadonly post: GotRequestMethod\n}\n```\n\n### Hooks\n\nWhen writing hooks, you can refer to their types to keep your interfaces consistent.\n\n```ts\nimport {BeforeRequestHook} from 'got';\n\nconst addAccessToken = (accessToken: string): BeforeRequestHook => options => {\n\toptions.path = `${options.path}?access_token=${accessToken}`;\n}\n```\n\n## Errors\n\nEach error contains an `options` property which are the options Got used to create a request - just to make debugging easier.\\\nAdditionaly, the errors may have `request` (Got Stream) and `response` (Got Response) properties depending on which phase of the request failed.\n\n#### got.CacheError\n\nWhen a cache method fails, for example, if the database goes down or there's a filesystem error.\n\n#### got.RequestError\n\nWhen a request fails. Contains a `code` property with error class code, like `ECONNREFUSED`.\n\n#### got.ReadError\n\nWhen reading from response stream fails.\n\n#### got.ParseError\n\nWhen server response code is 2xx, and parsing body fails. Includes a `response` property.\n\n#### got.HTTPError\n\nWhen the server response code is not 2xx. Includes a `response` property.\n\n#### got.MaxRedirectsError\n\nWhen the server redirects you more than ten times. Includes a `response` property.\n\n#### got.UnsupportedProtocolError\n\nWhen given an unsupported protocol.\n\n#### got.CancelError\n\nWhen the request is aborted with `.cancel()`.\n\n#### got.TimeoutError\n\nWhen the request is aborted due to a [timeout](#timeout). Includes an `event` and `timings` property.\n\n## Aborting the request\n\nThe promise returned by Got has a [`.cancel()`](https://github.com/sindresorhus/p-cancelable) method which when called, aborts the request.\n\n```js\n(async () => {\n\tconst request = got(url, options);\n\n\t// …\n\n\t// In another part of the code\n\tif (something) {\n\t\trequest.cancel();\n\t}\n\n\t// …\n\n\ttry {\n\t\tawait request;\n\t} catch (error) {\n\t\tif (request.isCanceled) { // Or `error instanceof got.CancelError`\n\t\t\t// Handle cancelation\n\t\t}\n\n\t\t// Handle other errors\n\t}\n})();\n```\n\nWhen using hooks, simply throw an error to abort the request.\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst request = got(url, {\n\t\thooks: {\n\t\t\tbeforeRequest: [\n\t\t\t\t() => {\n\t\t\t\t\tthrow new Error('Oops. Request canceled.');\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t});\n\n\ttry {\n\t\tawait request;\n\t} catch (error) {\n\t\t// …\n\t}\n})();\n```\n\nTo abort the Got Stream request, just call `stream.destroy()`.\n\n```js\nconst got = require('got');\n\nconst stream = got.stream(url);\nstream.destroy();\n```\n\n<a name=\"cache-adapters\"></a>\n## Cache\n\nGot implements [RFC 7234](http://httpwg.org/specs/rfc7234.html) compliant HTTP caching which works out of the box in-memory and is easily pluggable with a wide range of storage adapters. Fresh cache entries are served directly from the cache, and stale cache entries are revalidated with `If-None-Match`/`If-Modified-Since` headers. You can read more about the underlying cache behavior in the [`cacheable-request` documentation](https://github.com/lukechilds/cacheable-request). For DNS cache, Got uses [`cacheable-lookup`](https://github.com/szmarczak/cacheable-lookup).\n\nYou can use the JavaScript `Map` type as an in-memory cache:\n\n```js\nconst got = require('got');\n\nconst map = new Map();\n\n(async () => {\n\t\tlet response = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> false\n\n\t\tresponse = await got('https://sindresorhus.com', {cache: map});\n\t\tconsole.log(response.isFromCache);\n\t\t//=> true\n})();\n```\n\nGot uses [Keyv](https://github.com/lukechilds/keyv) internally to support a wide range of storage adapters. For something more scalable you could use an [official Keyv storage adapter](https://github.com/lukechilds/keyv#official-storage-adapters):\n\n```\n$ npm install @keyv/redis\n```\n\n```js\nconst got = require('got');\nconst KeyvRedis = require('@keyv/redis');\n\nconst redis = new KeyvRedis('redis://user:pass@localhost:6379');\n\ngot('https://sindresorhus.com', {cache: redis});\n```\n\nGot supports anything that follows the Map API, so it's easy to write your own storage adapter or use a third-party solution.\n\nFor example, the following are all valid storage adapters:\n\n```js\nconst storageAdapter = new Map();\n// Or\nconst storageAdapter = require('./my-storage-adapter');\n// Or\nconst QuickLRU = require('quick-lru');\nconst storageAdapter = new QuickLRU({maxSize: 1000});\n\ngot('https://sindresorhus.com', {cache: storageAdapter});\n```\n\nView the [Keyv docs](https://github.com/lukechilds/keyv) for more information on how to use storage adapters.\n\n## Proxies\n\nYou can use the [`tunnel`](https://github.com/koichik/node-tunnel) package with the `agent` option to work with proxies:\n\n```js\nconst got = require('got');\nconst tunnel = require('tunnel');\n\ngot('https://sindresorhus.com', {\n\tagent: tunnel.httpOverHttp({\n\t\tproxy: {\n\t\t\thost: 'localhost'\n\t\t}\n\t})\n});\n```\n\nAlternatively, use [`global-agent`](https://github.com/gajus/global-agent) to configure a global proxy for all HTTP/HTTPS traffic in your program.\n\n## Cookies\n\nYou can use the [`tough-cookie`](https://github.com/salesforce/tough-cookie) package:\n\n```js\nconst {promisify} = require('util');\nconst got = require('got');\nconst {CookieJar} = require('tough-cookie');\n\n(async () => {\n\tconst cookieJar = new CookieJar();\n\tconst setCookie = promisify(cookieJar.setCookie.bind(cookieJar));\n\n\tawait setCookie('foo=bar', 'https://example.com');\n\tawait got('https://example.com', {cookieJar});\n})();\n```\n\n## Form data\n\nYou can use the [`form-data`](https://github.com/form-data/form-data) package to create POST request with form data:\n\n```js\nconst fs = require('fs');\nconst got = require('got');\nconst FormData = require('form-data');\n\nconst form = new FormData();\n\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n\ngot.post('https://example.com', {\n\tbody: form\n});\n```\n\n## OAuth\n\nYou can use the [`oauth-1.0a`](https://github.com/ddo/oauth-1.0a) package to create a signed OAuth request:\n\n```js\nconst got = require('got');\nconst crypto  = require('crypto');\nconst OAuth = require('oauth-1.0a');\n\nconst oauth = OAuth({\n\tconsumer: {\n\t\tkey: process.env.CONSUMER_KEY,\n\t\tsecret: process.env.CONSUMER_SECRET\n\t},\n\tsignature_method: 'HMAC-SHA1',\n\thash_function: (baseString, key) => crypto.createHmac('sha1', key).update(baseString).digest('base64')\n});\n\nconst token = {\n\tkey: process.env.ACCESS_TOKEN,\n\tsecret: process.env.ACCESS_TOKEN_SECRET\n};\n\nconst url = 'https://api.twitter.com/1.1/statuses/home_timeline.json';\n\ngot(url, {\n\theaders: oauth.toHeader(oauth.authorize({url, method: 'GET'}, token)),\n\tresponseType: 'json'\n});\n```\n\n## Unix Domain Sockets\n\nRequests can also be sent via [unix domain sockets](http://serverfault.com/questions/124517/whats-the-difference-between-unix-socket-and-tcp-ip-socket). Use the following URL scheme: `PROTOCOL://unix:SOCKET:PATH`.\n\n- `PROTOCOL` - `http` or `https` *(optional)*\n- `SOCKET` - Absolute path to a unix domain socket, for example: `/var/run/docker.sock`\n- `PATH` - Request path, for example: `/v2/keys`\n\n```js\nconst got = require('got');\n\ngot('http://unix:/var/run/docker.sock:/containers/json');\n\n// Or without protocol (HTTP by default)\ngot('unix:/var/run/docker.sock:/containers/json');\n```\n\n## AWS\n\nRequests to AWS services need to have their headers signed. This can be accomplished by using the [`aws4`](https://www.npmjs.com/package/aws4) package. This is an example for querying an [\"API Gateway\"](https://docs.aws.amazon.com/apigateway/api-reference/signing-requests/) with a signed request.\n\n```js\nconst got = require('got');\nconst AWS = require('aws-sdk');\nconst aws4 = require('aws4');\n\nconst chain = new AWS.CredentialProviderChain();\n\n// Create a Got instance to use relative paths and signed requests\nconst awsClient = got.extend({\n\tprefixUrl: 'https://<api-id>.execute-api.<api-region>.amazonaws.com/<stage>/',\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\tasync options => {\n\t\t\t\tconst credentials = await chain.resolvePromise();\n\t\t\t\taws4.sign(options, credentials);\n\t\t\t}\n\t\t]\n\t}\n});\n\nconst response = await awsClient('endpoint/path', {\n\t// Request-specific options\n});\n```\n\n## Testing\n\nYou can test your requests by using the [`nock`](https://github.com/node-nock/nock) package to mock an endpoint:\n\n```js\nconst got = require('got');\nconst nock = require('nock');\n\nnock('https://sindresorhus.com')\n\t.get('/')\n\t.reply(200, 'Hello world!');\n\n(async () => {\n\tconst response = await got('https://sindresorhus.com');\n\tconsole.log(response.body);\n\t//=> 'Hello world!'\n})();\n```\n\nFor real integration testing we recommend using [`ava`](https://github.com/avajs/ava) with [`create-test-server`](https://github.com/lukechilds/create-test-server). We're using a macro so we don't have to `server.listen()` and `server.close()` every test. Take a look at one of our tests:\n\n```js\ntest('retry function gets iteration count', withServer, async (t, server, got) => {\n\tlet knocks = 0;\n\tserver.get('/', (request, response) => {\n\t\tif (knocks++ === 1) {\n\t\t\tresponse.end('who`s there?');\n\t\t}\n\t});\n\n\tawait got({\n\t\tretry: {\n\t\t\tcalculateDelay: ({attemptCount}) => {\n\t\t\t\tt.true(is.number(attemptCount));\n\t\t\t\treturn attemptCount < 2 ? 1 : 0;\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\n## Tips\n\n### JSON mode\n\nTo pass an object as the body, you need to use the `json` option. It will be stringified using `JSON.stringify`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst {body} = await got.post('https://httpbin.org/anything', {\n\t\tjson: {\n\t\t\thello: 'world'\n\t\t},\n\t\tresponseType: 'json'\n\t});\n\n\tconsole.log(body.data);\n\t//=> '{\"hello\":\"world\"}'\n})();\n```\n\nTo receive a JSON body you can either set `responseType` option to `json` or use `promise.json()`. Example:\n\n```js\nconst got = require('got');\n\n(async () => {\n\tconst body = await got.post('https://httpbin.org/anything', {\n\t\tjson: {\n\t\t\thello: 'world'\n\t\t}\n\t}).json();\n\n\tconsole.log(body);\n\t//=> {…}\n})();\n```\n\n### User Agent\n\nIt's a good idea to set the `'user-agent'` header so the provider can more easily see how their resource is used. By default, it's the URL to this repo. You can omit this header by setting it to `undefined`.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\ngot('https://sindresorhus.com', {\n\theaders: {\n\t\t'user-agent': undefined\n\t}\n});\n```\n\n### 304 Responses\n\nBear in mind; if you send an `if-modified-since` header and receive a `304 Not Modified` response, the body will be empty. It's your responsibility to cache and retrieve the body contents.\n\n### Custom endpoints\n\nUse `got.extend()` to make it nicer to work with REST APIs. Especially if you use the `prefixUrl` option.\n\n```js\nconst got = require('got');\nconst pkg = require('./package.json');\n\nconst custom = got.extend({\n\tprefixUrl: 'example.com',\n\tresponseType: 'json',\n\theaders: {\n\t\t'user-agent': `my-package/${pkg.version} (https://github.com/username/my-package)`\n\t}\n});\n\n// Use `custom` exactly how you use `got`\n(async () => {\n\tconst list = await custom('v1/users/list');\n})();\n```\n\n## FAQ\n\n### Why yet another HTTP client?\n\nGot was created because the popular [`request`](https://github.com/request/request) package is bloated: [![Install size](https://packagephobia.now.sh/badge?p=request)](https://packagephobia.now.sh/result?p=request)\\\nFurthermore, Got is fully written in TypeScript and actively maintained.\n\n### Electron support has been removed\n\nThe Electron `net` module is not consistent with the Node.js `http` module. See [#899](https://github.com/sindresorhus/got/issues/899) for more info.\n\n## Comparison\n\n|                       | `got`              | [`request`][r0]    | [`node-fetch`][n0]   | [`ky`][k0]               | [`axios`][a0]      | [`superagent`][s0]     |\n|-----------------------|:------------------:|:------------------:|:--------------------:|:------------------------:|:------------------:|:----------------------:|\n| HTTP/2 support        | :sparkle:          | :x:                | :x:                  | :x:                      | :x:                | :heavy_check_mark:\\*\\* |\n| Browser support       | :x:                | :x:                | :heavy_check_mark:\\* | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark:     |\n| Promise API           | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark:   | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark:     |\n| Stream API            | :heavy_check_mark: | :heavy_check_mark: | Node.js only         | :x:                      | :x:                | :heavy_check_mark:     |\n| Pagination API        | :heavy_check_mark: | :x:                | :x:                  | :x:                      | :x:                | :x:                    |\n| Request cancelation   | :heavy_check_mark: | :x:                | :heavy_check_mark:   | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark:     |\n| RFC compliant caching | :heavy_check_mark: | :x:                | :x:                  | :x:                      | :x:                | :x:                    |\n| Cookies (out-of-box)  | :heavy_check_mark: | :heavy_check_mark: | :x:                  | :x:                      | :x:                | :x:                    |\n| Follows redirects     | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark:   | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark:     |\n| Retries on failure    | :heavy_check_mark: | :x:                | :x:                  | :heavy_check_mark:       | :x:                | :heavy_check_mark:     |\n| Progress events       | :heavy_check_mark: | :x:                | :x:                  | :heavy_check_mark:\\*\\*\\* | Browser only       | :heavy_check_mark:     |\n| Handles gzip/deflate  | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark:   | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark:     |\n| Advanced timeouts     | :heavy_check_mark: | :x:                | :x:                  | :x:                      | :x:                | :x:                    |\n| Timings               | :heavy_check_mark: | :heavy_check_mark: | :x:                  | :x:                      | :x:                | :x:                    |\n| Errors with metadata  | :heavy_check_mark: | :x:                | :x:                  | :heavy_check_mark:       | :heavy_check_mark: | :x:                    |\n| JSON mode             | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark:   | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark:     |\n| Custom defaults       | :heavy_check_mark: | :heavy_check_mark: | :x:                  | :heavy_check_mark:       | :heavy_check_mark: | :x:                    |\n| Composable            | :heavy_check_mark: | :x:                | :x:                  | :x:                      | :x:                | :heavy_check_mark:     |\n| Hooks                 | :heavy_check_mark: | :x:                | :x:                  | :heavy_check_mark:       | :heavy_check_mark: | :x:                    |\n| Issues open           | [![][gio]][g1]     | [![][rio]][r1]     | [![][nio]][n1]       | [![][kio]][k1]           | [![][aio]][a1]     | [![][sio]][s1]         |\n| Issues closed         | [![][gic]][g2]     | [![][ric]][r2]     | [![][nic]][n2]       | [![][kic]][k2]           | [![][aic]][a2]     | [![][sic]][s2]         |\n| Downloads             | [![][gd]][g3]      | [![][rd]][r3]      | [![][nd]][n3]        | [![][kd]][k3]            | [![][ad]][a3]      | [![][sd]][s3]          |\n| Coverage              | [![][gc]][g4]      | [![][rc]][r4]      | [![][nc]][n4]        | [![][kc]][k4]            | [![][ac]][a4]      | [![][sc]][s4]          |\n| Build                 | [![][gb]][g5]      | [![][rb]][r5]      | [![][nb]][n5]        | [![][kb]][k5]            | [![][ab]][a5]      | [![][sb]][s5]          |\n| Bugs                  | [![][gbg]][g6]     | [![][rbg]][r6]     | [![][nbg]][n6]       | [![][kbg]][k6]           | [![][abg]][a6]     | [![][sbg]][s6]         |\n| Dependents            | [![][gdp]][g7]     | [![][rdp]][r7]     | [![][ndp]][n7]       | [![][kdp]][k7]           | [![][adp]][a7]     | [![][sdp]][s7]         |\n| Install size          | [![][gis]][g8]     | [![][ris]][r8]     | [![][nis]][n8]       | [![][kis]][k8]           | [![][ais]][a8]     | [![][sis]][s8]         |\n\n\\* It's almost API compatible with the browser `fetch` API.\\\n\\*\\* Need to switch the protocol manually. Doesn't accept PUSH streams and doesn't reuse HTTP/2 sessions.\\\n\\*\\*\\* Currently, only `DownloadProgress` event is supported, `UploadProgress` event is not supported.\\\n:sparkle: Almost-stable feature, but the API may change. Don't hestitate to try it out!\\\n:grey_question: Feature in early stage of development. Very experimental.\n\n<!-- GITHUB -->\n[k0]: https://github.com/sindresorhus/ky\n[r0]: https://github.com/request/request\n[n0]: https://github.com/bitinn/node-fetch\n[a0]: https://github.com/axios/axios\n[s0]: https://github.com/visionmedia/superagent\n\n<!-- ISSUES OPEN -->\n[gio]: https://badgen.net/github/open-issues/sindresorhus/got?label\n[kio]: https://badgen.net/github/open-issues/sindresorhus/ky?label\n[rio]: https://badgen.net/github/open-issues/request/request?label\n[nio]: https://badgen.net/github/open-issues/bitinn/node-fetch?label\n[aio]: https://badgen.net/github/open-issues/axios/axios?label\n[sio]: https://badgen.net/github/open-issues/visionmedia/superagent?label\n\n[g1]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[k1]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[r1]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[n1]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[a1]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[s1]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n\n<!-- ISSUES CLOSED -->\n[gic]: https://badgen.net/github/closed-issues/sindresorhus/got?label\n[kic]: https://badgen.net/github/closed-issues/sindresorhus/ky?label\n[ric]: https://badgen.net/github/closed-issues/request/request?label\n[nic]: https://badgen.net/github/closed-issues/bitinn/node-fetch?label\n[aic]: https://badgen.net/github/closed-issues/axios/axios?label\n[sic]: https://badgen.net/github/closed-issues/visionmedia/superagent?label\n\n[g2]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[k2]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[r2]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[n2]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[a2]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[s2]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n\n<!-- DOWNLOADS -->\n[gd]: https://badgen.net/npm/dm/got?label\n[kd]: https://badgen.net/npm/dm/ky?label\n[rd]: https://badgen.net/npm/dm/request?label\n[nd]: https://badgen.net/npm/dm/node-fetch?label\n[ad]: https://badgen.net/npm/dm/axios?label\n[sd]: https://badgen.net/npm/dm/superagent?label\n\n[g3]: https://www.npmjs.com/package/got\n[k3]: https://www.npmjs.com/package/ky\n[r3]: https://www.npmjs.com/package/request\n[n3]: https://www.npmjs.com/package/node-fetch\n[a3]: https://www.npmjs.com/package/axios\n[s3]: https://www.npmjs.com/package/superagent\n\n<!-- COVERAGE -->\n[gc]: https://badgen.net/coveralls/c/github/sindresorhus/got?label\n[kc]: https://badgen.net/codecov/c/github/sindresorhus/ky?label\n[rc]: https://badgen.net/coveralls/c/github/request/request?label\n[nc]: https://badgen.net/coveralls/c/github/bitinn/node-fetch?label\n[ac]: https://badgen.net/coveralls/c/github/mzabriskie/axios?label\n[sc]: https://badgen.net/codecov/c/github/visionmedia/superagent?label\n\n[g4]: https://coveralls.io/github/sindresorhus/got\n[k4]: https://codecov.io/gh/sindresorhus/ky\n[r4]: https://coveralls.io/github/request/request\n[n4]: https://coveralls.io/github/bitinn/node-fetch\n[a4]: https://coveralls.io/github/mzabriskie/axios\n[s4]: https://codecov.io/gh/visionmedia/superagent\n\n<!-- BUILD -->\n[gb]: https://badgen.net/travis/sindresorhus/got?label\n[kb]: https://badgen.net/travis/sindresorhus/ky?label\n[rb]: https://badgen.net/travis/request/request?label\n[nb]: https://badgen.net/travis/bitinn/node-fetch?label\n[ab]: https://badgen.net/travis/axios/axios?label\n[sb]: https://badgen.net/travis/visionmedia/superagent?label\n\n[g5]: https://travis-ci.org/sindresorhus/got\n[k5]: https://travis-ci.org/sindresorhus/ky\n[r5]: https://travis-ci.org/request/request\n[n5]: https://travis-ci.org/bitinn/node-fetch\n[a5]: https://travis-ci.org/axios/axios\n[s5]: https://travis-ci.org/visionmedia/superagent\n\n<!-- BUGS -->\n[gbg]: https://badgen.net/github/label-issues/sindresorhus/got/bug/open?label\n[kbg]: https://badgen.net/github/label-issues/sindresorhus/ky/bug/open?label\n[rbg]: https://badgen.net/github/label-issues/request/request/Needs%20investigation/open?label\n[nbg]: https://badgen.net/github/label-issues/bitinn/node-fetch/bug/open?label\n[abg]: https://badgen.net/github/label-issues/axios/axios/type:bug/open?label\n[sbg]: https://badgen.net/github/label-issues/visionmedia/superagent/Bug/open?label\n\n[g6]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[k6]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[r6]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A\"Needs+investigation\"\n[n6]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[a6]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Atype:bug\n[s6]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3ABug\n\n<!-- DEPENDENTS -->\n[gdp]: https://badgen.net/npm/dependents/got?label\n[kdp]: https://badgen.net/npm/dependents/ky?label\n[rdp]: https://badgen.net/npm/dependents/request?label\n[ndp]: https://badgen.net/npm/dependents/node-fetch?label\n[adp]: https://badgen.net/npm/dependents/axios?label\n[sdp]: https://badgen.net/npm/dependents/superagent?label\n\n[g7]: https://www.npmjs.com/package/got?activeTab=dependents\n[k7]: https://www.npmjs.com/package/ky?activeTab=dependents\n[r7]: https://www.npmjs.com/package/request?activeTab=dependents\n[n7]: https://www.npmjs.com/package/node-fetch?activeTab=dependents\n[a7]: https://www.npmjs.com/package/axios?activeTab=dependents\n[s7]: https://www.npmjs.com/package/visionmedia?activeTab=dependents\n\n<!-- INSTALL SIZE -->\n[gis]: https://badgen.net/packagephobia/install/got?label\n[kis]: https://badgen.net/packagephobia/install/ky?label\n[ris]: https://badgen.net/packagephobia/install/request?label\n[nis]: https://badgen.net/packagephobia/install/node-fetch?label\n[ais]: https://badgen.net/packagephobia/install/axios?label\n[sis]: https://badgen.net/packagephobia/install/superagent?label\n\n[g8]: https://packagephobia.now.sh/result?p=got\n[k8]: https://packagephobia.now.sh/result?p=ky\n[r8]: https://packagephobia.now.sh/result?p=request\n[n8]: https://packagephobia.now.sh/result?p=node-fetch\n[a8]: https://packagephobia.now.sh/result?p=axios\n[s8]: https://packagephobia.now.sh/result?p=superagent\n\n[Click here][InstallSizeOfTheDependencies] to see the install size of the Got dependencies.\n\n[InstallSizeOfTheDependencies]: https://packagephobia.now.sh/result?p=@sindresorhus/is@1.0.0,@szmarczak/http-timer@3.1.0,@types/cacheable-request@6.0.1,cacheable-lookup@0.2.1,cacheable-request@7.0.0,decompress-response@5.0.0,duplexer3@0.1.4,get-stream@5.0.0,lowercase-keys@2.0.0,mimic-response@2.0.0,p-cancelable@2.0.0,responselike@2.0.0,to-readable-stream@2.0.0,type-fest@0.8.0\n\n## Related\n\n- [gh-got](https://github.com/sindresorhus/gh-got) - Got convenience wrapper to interact with the GitHub API\n- [gl-got](https://github.com/singapore/gl-got) - Got convenience wrapper to interact with the GitLab API\n- [travis-got](https://github.com/samverschueren/travis-got) - Got convenience wrapper to interact with the Travis API\n- [graphql-got](https://github.com/kevva/graphql-got) - Got convenience wrapper to interact with GraphQL\n- [GotQL](https://github.com/khaosdoctor/gotql) - Got convenience wrapper to interact with GraphQL using JSON-parsed queries instead of strings\n- [got-fetch](https://github.com/alexghr/got-fetch) - Got with a `fetch` interface\n\n## Maintainers\n\n[![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://sindresorhus.com) | [![Szymon Marczak](https://github.com/szmarczak.png?size=100)](https://github.com/szmarczak)\n---|---\n[Sindre Sorhus](https://sindresorhus.com) | [Szymon Marczak](https://github.com/szmarczak)\n\n###### Former\n\n- [Vsevolod Strukchinsky](https://github.com/floatdrop)\n- [Alexander Tesfamichael](https://github.com/alextes)\n- [Brandon Smith](https://github.com/brandon93s)\n- [Luke Childs](https://github.com/lukechilds)\n\n## For enterprise\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of `got` and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-got?utm_source=npm-got&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n","funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","@typescript-eslint/no-base-to-string":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","unicorn/string-content":"off","@typescript-eslint/prefer-readonly-parameter-types":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/no-unsafe-return":"off"}},"gitHead":"5d5df319337e76ca33ed22dbcac49fba8adf8c71","readmeFilename":"readme.md","_nodeVersion":"10.19.0","_npmVersion":"6.13.4","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.0.0-beta.1_1586695727208_0.21593588665525343"},"_hasShrinkwrap":false},"11.0.0":{"_id":"got@11.0.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.0.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@types/benchmark":"^1.0.31","@types/express":"^4.17.6","@types/lolex":"^5.1.0","@types/node":"13.1.2","@types/node-fetch":"^2.5.5","@types/request":"^2.48.4","@types/sinon":"^9.0.0","@types/tough-cookie":"^4.0.0","@typescript-eslint/eslint-plugin":"^2.27.0","@typescript-eslint/parser":"^2.27.0","ava":"^3.6.0","axios":"^0.19.2","benchmark":"^2.1.4","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.27.0","express":"^4.17.1","form-data":"^3.0.0","lolex":"^6.0.0","nock":"^12.0.0","node-fetch":"^2.6.0","np":"^6.0.0","nyc":"^15.0.1","p-event":"^4.0.0","sinon":"^9.0.2","slow-stream":"0.0.4","tempy":"^0.5.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"3.7.5","xo":"^0.29.0"},"dependencies":{"@sindresorhus/is":"^2.1.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^4.1.1","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","get-stream":"^5.0.0","http2-wrapper":"^1.0.0-beta.4.3","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"a5a131a55752309157bb32e1365a6a7f2a8c15b8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.0.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","@typescript-eslint/no-base-to-string":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","unicorn/string-content":"off","@typescript-eslint/prefer-readonly-parameter-types":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/no-unsafe-return":"off"}},"gitHead":"1f6ac4597b797e6fe760a7dc11a3db8bf298aa94","_nodeVersion":"10.19.0","_npmVersion":"6.13.4","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.0.0_1587383641386_0.8298435344117718"},"_hasShrinkwrap":false},"11.0.1":{"_id":"got@11.0.1","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.0.1","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@types/benchmark":"^1.0.31","@types/express":"^4.17.6","@types/lolex":"^5.1.0","@types/node":"13.1.2","@types/node-fetch":"^2.5.5","@types/request":"^2.48.4","@types/sinon":"^9.0.0","@types/tough-cookie":"^4.0.0","@typescript-eslint/eslint-plugin":"^2.27.0","@typescript-eslint/parser":"^2.27.0","ava":"^3.6.0","axios":"^0.19.2","benchmark":"^2.1.4","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.27.0","express":"^4.17.1","form-data":"^3.0.0","lolex":"^6.0.0","nock":"^12.0.0","node-fetch":"^2.6.0","np":"^6.0.0","nyc":"^15.0.1","p-event":"^4.0.0","sinon":"^9.0.2","slow-stream":"0.0.4","tempy":"^0.5.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"3.7.5","xo":"^0.29.0"},"dependencies":{"@sindresorhus/is":"^2.1.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^4.1.1","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","get-stream":"^5.0.0","http2-wrapper":"^1.0.0-beta.4.3","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"515ed43867a2b49d2dfa7b920092fd9299188f28","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.0.1.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","@typescript-eslint/no-base-to-string":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","unicorn/string-content":"off","@typescript-eslint/prefer-readonly-parameter-types":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/no-unsafe-return":"off"}},"gitHead":"090be50d108aaf99c35ec3ff95ac7adaa5217b6b","_nodeVersion":"13.11.0","_npmVersion":"6.13.7","maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.0.1_1587404396042_0.9773292310475763"},"_hasShrinkwrap":false},"11.0.2":{"_id":"got@11.0.2","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.0.2","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@types/benchmark":"^1.0.31","@types/express":"^4.17.6","@types/lolex":"^5.1.0","@types/node":"13.1.2","@types/node-fetch":"^2.5.5","@types/request":"^2.48.4","@types/sinon":"^9.0.0","@types/tough-cookie":"^4.0.0","@typescript-eslint/eslint-plugin":"^2.27.0","@typescript-eslint/parser":"^2.27.0","ava":"^3.6.0","axios":"^0.19.2","benchmark":"^2.1.4","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","eslint-config-xo-typescript":"^0.27.0","express":"^4.17.1","form-data":"^3.0.0","lolex":"^6.0.0","nock":"^12.0.0","node-fetch":"^2.6.0","np":"^6.0.0","nyc":"^15.0.1","p-event":"^4.0.0","sinon":"^9.0.2","slow-stream":"0.0.4","tempy":"^0.5.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"3.7.5","xo":"^0.29.0"},"dependencies":{"@sindresorhus/is":"^2.1.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^4.1.1","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","get-stream":"^5.0.0","http2-wrapper":"^1.0.0-beta.4.4","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"55613d6a1b7040ff9c26cb075defea39eed58d7a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.0.2.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"extends":"xo-typescript","extensions":["ts"],"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","@typescript-eslint/no-base-to-string":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","unicorn/string-content":"off","@typescript-eslint/prefer-readonly-parameter-types":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/no-unsafe-return":"off"}},"gitHead":"835c70bd6fdc5b1ba7e7ffd322490b6d66fb407e","_nodeVersion":"13.13.0","_npmVersion":"6.14.4","maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.0.2_1587547228456_0.7021233289503805"},"_hasShrinkwrap":false},"11.0.3":{"_id":"got@11.0.3","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.0.3","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@types/benchmark":"^1.0.31","@types/express":"^4.17.6","@types/lolex":"^5.1.0","@types/node":"13.1.2","@types/node-fetch":"^2.5.5","@types/request":"^2.48.4","@types/sinon":"^9.0.0","@types/tough-cookie":"^4.0.0","ava":"^3.6.0","axios":"^0.19.2","benchmark":"^2.1.4","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","express":"^4.17.1","form-data":"^3.0.0","lolex":"^6.0.0","nock":"^12.0.0","node-fetch":"^2.6.0","np":"^6.0.0","nyc":"^15.0.1","p-event":"^4.0.0","sinon":"^9.0.2","slow-stream":"0.0.4","tempy":"^0.5.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"3.8.3","xo":"^0.30.0"},"dependencies":{"@sindresorhus/is":"^2.1.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^4.1.1","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","get-stream":"^5.0.0","http2-wrapper":"^1.0.0-beta.4.4","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"1df7678f9768ad3991c03b3efc304795eb29fdad","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.0.3.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","@typescript-eslint/no-base-to-string":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","@typescript-eslint/prefer-readonly-parameter-types":"off","@typescript-eslint/no-floating-promises":"off","@typescript-eslint/method-signature-style":"off","unicorn/no-fn-reference-in-iterator":"off"}},"gitHead":"46cd61b5db7bb7f486b090094c1336a475fc2608","_nodeVersion":"10.20.1","_npmVersion":"6.14.4","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.0.3_1588257490400_0.21706238624846974"},"_hasShrinkwrap":false},"11.1.0":{"_id":"got@11.1.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.1.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@types/benchmark":"^1.0.31","@types/express":"^4.17.6","@types/lolex":"^5.1.0","@types/node":"13.1.2","@types/node-fetch":"^2.5.5","@types/request":"^2.48.4","@types/sinon":"^9.0.0","@types/tough-cookie":"^4.0.0","ava":"^3.6.0","axios":"^0.19.2","benchmark":"^2.1.4","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","express":"^4.17.1","form-data":"^3.0.0","lolex":"^6.0.0","nock":"^12.0.0","node-fetch":"^2.6.0","np":"^6.0.0","nyc":"^15.0.1","p-event":"^4.0.0","sinon":"^9.0.2","slow-stream":"0.0.4","tempy":"^0.5.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"3.8.3","xo":"^0.30.0"},"dependencies":{"@sindresorhus/is":"^2.1.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^4.1.1","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","get-stream":"^5.0.0","http2-wrapper":"^1.0.0-beta.4.4","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"99c0c3404ee17592e553f9ed1c895f920f554ed8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.1.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","@typescript-eslint/no-base-to-string":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","@typescript-eslint/prefer-readonly-parameter-types":"off","@typescript-eslint/no-floating-promises":"off","@typescript-eslint/method-signature-style":"off","unicorn/no-fn-reference-in-iterator":"off"}},"gitHead":"633e46e8cb184e6a2670ffae5f8184fcf710f31b","_nodeVersion":"10.20.1","_npmVersion":"6.14.4","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.1.0_1588420095707_0.7730510830682404"},"_hasShrinkwrap":false},"11.1.1":{"_id":"got@11.1.1","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.1.1","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@types/benchmark":"^1.0.31","@types/express":"^4.17.6","@types/lolex":"^5.1.0","@types/node":"^13.13.4","@types/node-fetch":"^2.5.5","@types/request":"^2.48.4","@types/sinon":"^9.0.0","@types/tough-cookie":"^4.0.0","ava":"^3.6.0","axios":"^0.19.2","benchmark":"^2.1.4","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","express":"^4.17.1","form-data":"^3.0.0","lolex":"^6.0.0","nock":"^12.0.0","node-fetch":"^2.6.0","np":"^6.0.0","nyc":"^15.0.1","p-event":"^4.0.0","sinon":"^9.0.2","slow-stream":"0.0.4","tempy":"^0.5.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"3.8.3","xo":"^0.30.0"},"dependencies":{"@sindresorhus/is":"^2.1.0","@szmarczak/http-timer":"^4.0.0","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^4.1.1","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","get-stream":"^5.0.0","http2-wrapper":"^1.0.0-beta.4.4","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"11f83049df8155b384413547fe163dd4b35b4240","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.1.1.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","@typescript-eslint/no-base-to-string":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","@typescript-eslint/prefer-readonly-parameter-types":"off","@typescript-eslint/no-floating-promises":"off","@typescript-eslint/method-signature-style":"off","unicorn/no-fn-reference-in-iterator":"off"}},"gitHead":"352a3536868a9eb335635902d2aa843424e1b6d6","_nodeVersion":"10.20.1","_npmVersion":"6.14.4","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.1.1_1588758217943_0.056217844200783684"},"_hasShrinkwrap":false},"11.1.2":{"_id":"got@11.1.2","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.1.2","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@types/benchmark":"^1.0.31","@types/express":"^4.17.6","@types/lolex":"^5.1.0","@types/node":"^13.13.4","@types/node-fetch":"^2.5.5","@types/request":"^2.48.4","@types/sinon":"^9.0.0","@types/tough-cookie":"^4.0.0","ava":"^3.6.0","axios":"^0.19.2","benchmark":"^2.1.4","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","express":"^4.17.1","form-data":"^3.0.0","lolex":"^6.0.0","nock":"^12.0.0","node-fetch":"^2.6.0","np":"^6.0.0","nyc":"^15.0.1","p-event":"^4.0.0","sinon":"^9.0.2","slow-stream":"0.0.4","tempy":"^0.5.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"3.8.3","xo":"^0.30.0"},"dependencies":{"@sindresorhus/is":"^2.1.1","@szmarczak/http-timer":"^4.0.5","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^4.3.0","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","get-stream":"^5.1.0","http2-wrapper":"^1.0.0-beta.4.5","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"bb38ed6277670fbd103a1b858cfff9581e62045e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.1.2.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","@typescript-eslint/no-base-to-string":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","@typescript-eslint/prefer-readonly-parameter-types":"off","@typescript-eslint/no-floating-promises":"off","@typescript-eslint/method-signature-style":"off","unicorn/no-fn-reference-in-iterator":"off"}},"gitHead":"812deb690bc67b9bb2a0a28f10ece46c7905c78c","_nodeVersion":"13.13.0","_npmVersion":"6.14.4","maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.1.2_1588936029438_0.0551393555670161"},"_hasShrinkwrap":false},"11.1.3":{"_id":"got@11.1.3","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.1.3","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@types/benchmark":"^1.0.31","@types/express":"^4.17.6","@types/lolex":"^5.1.0","@types/node":"^13.13.4","@types/node-fetch":"^2.5.5","@types/request":"^2.48.4","@types/sinon":"^9.0.0","@types/tough-cookie":"^4.0.0","ava":"^3.6.0","axios":"^0.19.2","benchmark":"^2.1.4","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","express":"^4.17.1","form-data":"^3.0.0","lolex":"^6.0.0","nock":"^12.0.0","node-fetch":"^2.6.0","np":"^6.0.0","nyc":"^15.0.1","p-event":"^4.0.0","sinon":"^9.0.2","slow-stream":"0.0.4","tempy":"^0.5.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"3.8.3","xo":"^0.30.0"},"dependencies":{"@sindresorhus/is":"^2.1.1","@szmarczak/http-timer":"^4.0.5","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^4.3.0","cacheable-request":"^7.0.1","decompress-response":"^5.0.0","get-stream":"^5.1.0","http2-wrapper":"^1.0.0-beta.4.5","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"bcb624c636f9c4da5a82a7d7c9017fcad6e2905a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.1.3.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","@typescript-eslint/no-base-to-string":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","@typescript-eslint/prefer-readonly-parameter-types":"off","@typescript-eslint/no-floating-promises":"off","@typescript-eslint/method-signature-style":"off","unicorn/no-fn-reference-in-iterator":"off"}},"gitHead":"ece94edec31bc8d004f93d74e218d8fd3b442c15","_nodeVersion":"13.13.0","_npmVersion":"6.14.4","maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.1.3_1589115568157_0.6799666573486882"},"_hasShrinkwrap":false},"11.1.4":{"_id":"got@11.1.4","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.1.4","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^1.0.31","@types/express":"^4.17.6","@types/node":"^13.13.4","@types/node-fetch":"^2.5.5","@types/request":"^2.48.4","@types/sinon":"^9.0.0","@types/tough-cookie":"^4.0.0","ava":"^3.6.0","axios":"^0.19.2","benchmark":"^2.1.4","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","express":"^4.17.1","form-data":"^3.0.0","nock":"^12.0.0","node-fetch":"^2.6.0","np":"^6.0.0","nyc":"^15.0.1","p-event":"^4.0.0","sinon":"^9.0.2","slow-stream":"0.0.4","tempy":"^0.5.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"3.8.3","xo":"^0.30.0"},"dependencies":{"@sindresorhus/is":"^2.1.1","@szmarczak/http-timer":"^4.0.5","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^5.0.3","cacheable-request":"^7.0.1","decompress-response":"^6.0.0","get-stream":"^5.1.0","http2-wrapper":"^1.0.0-beta.4.5","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"ecf0064aab26ae4b2989ab52aadd31a17e7bad63","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.1.4.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","@typescript-eslint/no-base-to-string":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","@typescript-eslint/prefer-readonly-parameter-types":"off","@typescript-eslint/no-floating-promises":"off","@typescript-eslint/method-signature-style":"off","unicorn/no-fn-reference-in-iterator":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"775563219d6ba494ffea6e5dfd66557feb32c020","_nodeVersion":"14.2.0","_npmVersion":"6.14.4","maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.1.4_1589646431125_0.22753338093060704"},"_hasShrinkwrap":false},"11.2.0":{"_id":"got@11.2.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.2.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^1.0.31","@types/express":"^4.17.6","@types/node":"^13.13.4","@types/node-fetch":"^2.5.5","@types/request":"^2.48.4","@types/sinon":"^9.0.0","@types/tough-cookie":"^4.0.0","ava":"^3.6.0","axios":"^0.19.2","benchmark":"^2.1.4","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","express":"^4.17.1","form-data":"^3.0.0","nock":"^12.0.0","node-fetch":"^2.6.0","np":"^6.0.0","nyc":"^15.0.1","p-event":"^4.1.0","sinon":"^9.0.2","slow-stream":"0.0.4","tempy":"^0.5.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"3.8.3","xo":"^0.30.0"},"dependencies":{"@sindresorhus/is":"^2.1.1","@szmarczak/http-timer":"^4.0.5","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^5.0.3","cacheable-request":"^7.0.1","decompress-response":"^6.0.0","get-stream":"^5.1.0","http2-wrapper":"^1.0.0-beta.4.5","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"20f76c421378b28db773d6381a450fa1bea92d2b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.2.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","@typescript-eslint/no-base-to-string":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","@typescript-eslint/prefer-readonly-parameter-types":"off","@typescript-eslint/no-floating-promises":"off","@typescript-eslint/method-signature-style":"off","unicorn/no-fn-reference-in-iterator":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"e00dbbcde260efb1c32c33474b1c5781ce34721e","_nodeVersion":"10.20.1","_npmVersion":"6.14.5","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.2.0_1590996963573_0.2921897607237689"},"_hasShrinkwrap":false},"11.3.0":{"_id":"got@11.3.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.3.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^1.0.31","@types/express":"^4.17.6","@types/node":"^13.13.4","@types/node-fetch":"^2.5.5","@types/request":"^2.48.4","@types/sinon":"^9.0.0","@types/tough-cookie":"^4.0.0","ava":"^3.6.0","axios":"^0.19.2","benchmark":"^2.1.4","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","express":"^4.17.1","form-data":"^3.0.0","nock":"^12.0.0","node-fetch":"^2.6.0","np":"^6.0.0","nyc":"^15.0.1","p-event":"^4.1.0","sinon":"^9.0.2","slow-stream":"0.0.4","tempy":"^0.5.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"3.8.3","xo":"^0.30.0"},"dependencies":{"@sindresorhus/is":"^2.1.1","@szmarczak/http-timer":"^4.0.5","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^5.0.3","cacheable-request":"^7.0.1","decompress-response":"^6.0.0","get-stream":"^5.1.0","http2-wrapper":"^1.0.0-beta.4.5","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"25e8da8b0125b3b984613a6b719e678dd2e20406","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.3.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","@typescript-eslint/no-base-to-string":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","@typescript-eslint/prefer-readonly-parameter-types":"off","@typescript-eslint/no-floating-promises":"off","@typescript-eslint/method-signature-style":"off","unicorn/no-fn-reference-in-iterator":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"47239e3f29a6ade38e9353d26eaffa3f79466103","_nodeVersion":"14.4.0","_npmVersion":"6.14.5","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.3.0_1591374664041_0.9621646377182622"},"_hasShrinkwrap":false},"11.4.0":{"_id":"got@11.4.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.4.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^1.0.31","@types/express":"^4.17.6","@types/node":"^13.13.4","@types/node-fetch":"^2.5.5","@types/request":"^2.48.4","@types/sinon":"^9.0.0","@types/tough-cookie":"^4.0.0","ava":"^3.6.0","axios":"^0.19.2","benchmark":"^2.1.4","coveralls":"^3.0.4","create-test-server":"^3.0.1","del-cli":"^3.0.0","delay":"^4.3.0","express":"^4.17.1","form-data":"^3.0.0","get-stream":"^5.1.0","nock":"^12.0.0","node-fetch":"^2.6.0","np":"^6.0.0","nyc":"^15.0.1","p-event":"^4.1.0","sinon":"^9.0.2","slow-stream":"0.0.4","tempy":"^0.5.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"3.8.3","xo":"^0.30.0"},"dependencies":{"@sindresorhus/is":"^2.1.1","@szmarczak/http-timer":"^4.0.5","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^5.0.3","cacheable-request":"^7.0.1","decompress-response":"^6.0.0","http2-wrapper":"^1.0.0-beta.4.5","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"1f0910310572af4efcc6890e1dacd7affb710b39","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.4.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","@typescript-eslint/no-base-to-string":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","@typescript-eslint/prefer-readonly-parameter-types":"off","@typescript-eslint/no-floating-promises":"off","@typescript-eslint/method-signature-style":"off","unicorn/no-fn-reference-in-iterator":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"4845ffd828219ce1d8a894a86451916dcb590c7b","_nodeVersion":"14.2.0","_npmVersion":"6.14.4","maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.4.0_1593863447532_0.7195967078269287"},"_hasShrinkwrap":false},"11.5.0":{"_id":"got@11.5.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.5.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && npm run build && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^1.0.33","@types/express":"^4.17.6","@types/node":"^14.0.14","@types/node-fetch":"^2.5.7","@types/request":"^2.48.5","@types/sinon":"^9.0.4","@types/tough-cookie":"^4.0.0","ava":"^3.10.0","axios":"^0.19.2","benchmark":"^2.1.4","coveralls":"^3.1.0","create-test-server":"^3.0.1","del-cli":"^3.0.1","delay":"^4.3.0","express":"^4.17.1","form-data":"^3.0.0","get-stream":"^5.1.0","nock":"^13.0.2","node-fetch":"^2.6.0","np":"^6.3.0","nyc":"^15.1.0","p-event":"^4.2.0","sinon":"^9.0.2","slow-stream":"0.0.4","tempy":"^0.5.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"3.9.6","xo":"^0.32.1"},"dependencies":{"@sindresorhus/is":"^3.0.0","@szmarczak/http-timer":"^4.0.5","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^5.0.3","cacheable-request":"^7.0.1","decompress-response":"^6.0.0","http2-wrapper":"^1.0.0-beta.4.8","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"55dd61050f666679f46c49c877e1b2e064a7a523","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.5.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","import/no-anonymous-default-export":"off","@typescript-eslint/no-invalid-void-type":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"9834433e3f6d2d42e7f12f64e56e4084249b4b53","_nodeVersion":"14.5.0","_npmVersion":"6.14.5","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.5.0_1594148228343_0.9541068589974018"},"_hasShrinkwrap":false},"11.5.1":{"_id":"got@11.5.1","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.5.1","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && npm run build && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^1.0.33","@types/express":"^4.17.6","@types/node":"^14.0.14","@types/node-fetch":"^2.5.7","@types/request":"^2.48.5","@types/sinon":"^9.0.4","@types/tough-cookie":"^4.0.0","ava":"^3.10.0","axios":"^0.19.2","benchmark":"^2.1.4","coveralls":"^3.1.0","create-test-server":"^3.0.1","del-cli":"^3.0.1","delay":"^4.3.0","express":"^4.17.1","form-data":"^3.0.0","get-stream":"^5.1.0","nock":"^13.0.2","node-fetch":"^2.6.0","np":"^6.3.0","nyc":"^15.1.0","p-event":"^4.2.0","sinon":"^9.0.2","slow-stream":"0.0.4","tempy":"^0.5.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"3.9.6","xo":"^0.32.1"},"dependencies":{"@sindresorhus/is":"^3.0.0","@szmarczak/http-timer":"^4.0.5","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^5.0.3","cacheable-request":"^7.0.1","decompress-response":"^6.0.0","http2-wrapper":"^1.0.0-beta.5.0","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"bf098a270fe80b3fb88ffd5a043a59ebb0a391db","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.5.1.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","import/no-anonymous-default-export":"off","@typescript-eslint/no-invalid-void-type":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"b38e39a47f44de126f5a9f069cf6ee8a90f8f0f2","_nodeVersion":"12.10.0","_npmVersion":"6.14.6","maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.5.1_1594901538072_0.2144647845267349"},"_hasShrinkwrap":false},"11.5.2":{"_id":"got@11.5.2","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.5.2","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && npm run build && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^1.0.33","@types/express":"^4.17.6","@types/node":"^14.0.14","@types/node-fetch":"^2.5.7","@types/request":"^2.48.5","@types/sinon":"^9.0.4","@types/tough-cookie":"^4.0.0","ava":"^3.10.0","axios":"^0.19.2","benchmark":"^2.1.4","coveralls":"^3.1.0","create-test-server":"^3.0.1","del-cli":"^3.0.1","delay":"^4.3.0","express":"^4.17.1","form-data":"^3.0.0","get-stream":"^5.1.0","nock":"^13.0.2","node-fetch":"^2.6.0","np":"^6.3.0","nyc":"^15.1.0","p-event":"^4.2.0","sinon":"^9.0.2","slow-stream":"0.0.4","tempy":"^0.5.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"3.9.6","xo":"^0.32.1"},"dependencies":{"@sindresorhus/is":"^3.0.0","@szmarczak/http-timer":"^4.0.5","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^5.0.3","cacheable-request":"^7.0.1","decompress-response":"^6.0.0","http2-wrapper":"^1.0.0-beta.5.0","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"772e3f3a06d9c7589c7c94dc3c83cdb31ddbf742","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.5.2.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","import/no-anonymous-default-export":"off","@typescript-eslint/no-invalid-void-type":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"b86d971aaed3c91a1e17b1f9d8bdf665ffda1b9d","_nodeVersion":"14.5.0","_npmVersion":"6.14.5","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.5.2_1596797152138_0.8261393039930522"},"_hasShrinkwrap":false},"11.6.0":{"_id":"got@11.6.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.6.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && npm run build && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^1.0.33","@types/express":"^4.17.7","@types/node":"^14.6.0","@types/node-fetch":"^2.5.7","@types/pem":"^1.9.5","@types/pify":"^3.0.2","@types/request":"^2.48.5","@types/sinon":"^9.0.5","@types/tough-cookie":"^4.0.0","ava":"^3.11.1","axios":"^0.20.0","benchmark":"^2.1.4","coveralls":"^3.1.0","create-test-server":"^3.0.1","del-cli":"^3.0.1","delay":"^4.4.0","express":"^4.17.1","form-data":"^3.0.0","get-stream":"^6.0.0","nock":"^13.0.4","node-fetch":"^2.6.0","np":"^6.4.0","nyc":"^15.1.0","p-event":"^4.2.0","pem":"^1.14.4","pify":"^5.0.0","sinon":"^9.0.3","slow-stream":"0.0.4","tempy":"^0.6.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"^4.0.2","xo":"^0.33.0"},"dependencies":{"@sindresorhus/is":"^3.1.1","@szmarczak/http-timer":"^4.0.5","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^5.0.3","cacheable-request":"^7.0.1","decompress-response":"^6.0.0","http2-wrapper":"^1.0.0-beta.5.2","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"4978c78f3cbc3a45ee95381f8bb6efd1db1f4638","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.6.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","import/no-anonymous-default-export":"off","@typescript-eslint/no-invalid-void-type":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"07f7c4dd94973ddcd581c59dfbe1d8f081c14ae3","_nodeVersion":"14.5.0","_npmVersion":"6.14.5","maintainers":[{"email":"sindresorhus@gmail.com","name":"sindresorhus"},{"email":"sz.marczak@gmail.com","name":"szmarczak"}],"_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.6.0_1599054328142_0.17682675559305205"},"_hasShrinkwrap":false},"11.6.1":{"_id":"got@11.6.1","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.6.1","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && npm run build && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^1.0.33","@types/express":"^4.17.7","@types/node":"^14.6.0","@types/node-fetch":"^2.5.7","@types/pem":"^1.9.5","@types/pify":"^3.0.2","@types/request":"^2.48.5","@types/sinon":"^9.0.5","@types/tough-cookie":"^4.0.0","ava":"^3.11.1","axios":"^0.20.0","benchmark":"^2.1.4","coveralls":"^3.1.0","create-test-server":"^3.0.1","del-cli":"^3.0.1","delay":"^4.4.0","express":"^4.17.1","form-data":"^3.0.0","get-stream":"^6.0.0","nock":"^13.0.4","node-fetch":"^2.6.0","np":"^6.4.0","nyc":"^15.1.0","p-event":"^4.2.0","pem":"^1.14.4","pify":"^5.0.0","sinon":"^9.0.3","slow-stream":"0.0.4","tempy":"^0.6.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"^4.0.2","xo":"^0.33.0"},"dependencies":{"@sindresorhus/is":"^3.1.1","@szmarczak/http-timer":"^4.0.5","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^5.0.3","cacheable-request":"^7.0.1","decompress-response":"^6.0.0","http2-wrapper":"^1.0.0-beta.5.2","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"a307122fc136c446f676f7b939d89dbc6ed6b909","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.6.1.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","import/no-anonymous-default-export":"off","@typescript-eslint/no-invalid-void-type":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"b94bf1fc9d6a6cd50ca15353a05feb45277a5763","_nodeVersion":"10.22.0","_npmVersion":"6.14.7","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.6.1_1599586515531_0.6114439537994905"},"_hasShrinkwrap":false},"11.6.2":{"_id":"got@11.6.2","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.6.2","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && npm run build && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^1.0.33","@types/express":"^4.17.7","@types/node":"^14.6.0","@types/node-fetch":"^2.5.7","@types/pem":"^1.9.5","@types/pify":"^3.0.2","@types/request":"^2.48.5","@types/sinon":"^9.0.5","@types/tough-cookie":"^4.0.0","ava":"^3.11.1","axios":"^0.20.0","benchmark":"^2.1.4","coveralls":"^3.1.0","create-test-server":"^3.0.1","del-cli":"^3.0.1","delay":"^4.4.0","express":"^4.17.1","form-data":"^3.0.0","get-stream":"^6.0.0","nock":"^13.0.4","node-fetch":"^2.6.0","np":"^6.4.0","nyc":"^15.1.0","p-event":"^4.2.0","pem":"^1.14.4","pify":"^5.0.0","sinon":"^9.0.3","slow-stream":"0.0.4","tempy":"^0.6.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"^4.0.2","xo":"^0.33.0"},"dependencies":{"@sindresorhus/is":"^3.1.1","@szmarczak/http-timer":"^4.0.5","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^5.0.3","cacheable-request":"^7.0.1","decompress-response":"^6.0.0","http2-wrapper":"^1.0.0-beta.5.2","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"79d7bb8c11df212b97f25565407a1f4ae73210ec","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.6.2.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","import/no-anonymous-default-export":"off","@typescript-eslint/no-invalid-void-type":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"876bff01c14968efefde13acd4234982d7091c13","_nodeVersion":"15.0.0-pre","_npmVersion":"6.14.8","maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.6.2_1599746621615_0.24702747101489253"},"_hasShrinkwrap":false},"11.7.0":{"_id":"got@11.7.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.7.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && npm run build && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^1.0.33","@types/express":"^4.17.7","@types/node":"^14.6.0","@types/node-fetch":"^2.5.7","@types/pem":"^1.9.5","@types/pify":"^3.0.2","@types/request":"^2.48.5","@types/sinon":"^9.0.5","@types/tough-cookie":"^4.0.0","ava":"^3.11.1","axios":"^0.20.0","benchmark":"^2.1.4","coveralls":"^3.1.0","create-test-server":"^3.0.1","del-cli":"^3.0.1","delay":"^4.4.0","express":"^4.17.1","form-data":"^3.0.0","get-stream":"^6.0.0","nock":"^13.0.4","node-fetch":"^2.6.0","np":"^6.4.0","nyc":"^15.1.0","p-event":"^4.2.0","pem":"^1.14.4","pify":"^5.0.0","sinon":"^9.0.3","slow-stream":"0.0.4","tempy":"^0.6.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"^4.0.2","xo":"^0.33.0"},"dependencies":{"@sindresorhus/is":"^3.1.1","@szmarczak/http-timer":"^4.0.5","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^5.0.3","cacheable-request":"^7.0.1","decompress-response":"^6.0.0","http2-wrapper":"^1.0.0-beta.5.2","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"a386360305571a74548872e674932b4ef70d3b24","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.7.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","import/no-anonymous-default-export":"off","@typescript-eslint/no-invalid-void-type":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"5d629587cfd7a1b8603376b3e814c02395be1204","_nodeVersion":"14.11.0","_npmVersion":"6.14.8","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.7.0_1600464699075_0.42043928479729487"},"_hasShrinkwrap":false},"11.8.0":{"_id":"got@11.8.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.8.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && npm run build && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^1.0.33","@types/express":"^4.17.7","@types/node":"^14.14.0","@types/node-fetch":"^2.5.7","@types/pem":"^1.9.5","@types/pify":"^3.0.2","@types/request":"^2.48.5","@types/sinon":"^9.0.5","@types/tough-cookie":"^4.0.0","ava":"^3.11.1","axios":"^0.20.0","benchmark":"^2.1.4","coveralls":"^3.1.0","create-test-server":"^3.0.1","del-cli":"^3.0.1","delay":"^4.4.0","express":"^4.17.1","form-data":"^3.0.0","get-stream":"^6.0.0","nock":"^13.0.4","node-fetch":"^2.6.0","np":"^6.4.0","nyc":"^15.1.0","p-event":"^4.2.0","pem":"^1.14.4","pify":"^5.0.0","sinon":"^9.0.3","slow-stream":"0.0.4","tempy":"^1.0.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"4.0.3","xo":"^0.34.1"},"dependencies":{"@sindresorhus/is":"^4.0.0","@szmarczak/http-timer":"^4.0.5","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^5.0.3","cacheable-request":"^7.0.1","decompress-response":"^6.0.0","http2-wrapper":"^1.0.0-beta.5.2","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"be0920c3586b07fd94add3b5b27cb28f49e6545f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.8.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","import/no-anonymous-default-export":"off","@typescript-eslint/no-implicit-any-catch":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"e0cb8206dacf352ce969267209c5c390f0cafabf","_nodeVersion":"14.11.0","_npmVersion":"6.14.8","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.8.0_1603214001474_0.4369925558684058"},"_hasShrinkwrap":false},"11.8.1":{"_id":"got@11.8.1","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.8.1","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && npm run build && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^1.0.33","@types/express":"^4.17.7","@types/node":"^14.14.0","@types/node-fetch":"^2.5.7","@types/pem":"^1.9.5","@types/pify":"^3.0.2","@types/request":"^2.48.5","@types/sinon":"^9.0.5","@types/tough-cookie":"^4.0.0","ava":"^3.11.1","axios":"^0.20.0","benchmark":"^2.1.4","coveralls":"^3.1.0","create-test-server":"^3.0.1","del-cli":"^3.0.1","delay":"^4.4.0","express":"^4.17.1","form-data":"^3.0.0","get-stream":"^6.0.0","nock":"^13.0.4","node-fetch":"^2.6.0","np":"^6.4.0","nyc":"^15.1.0","p-event":"^4.2.0","pem":"^1.14.4","pify":"^5.0.0","sinon":"^9.0.3","slow-stream":"0.0.4","tempy":"^1.0.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"4.0.3","xo":"^0.34.1"},"dependencies":{"@sindresorhus/is":"^4.0.0","@szmarczak/http-timer":"^4.0.5","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^5.0.3","cacheable-request":"^7.0.1","decompress-response":"^6.0.0","http2-wrapper":"^1.0.0-beta.5.2","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"df04adfaf2e782babb3daabc79139feec2f7e85d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.8.1.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","import/no-anonymous-default-export":"off","@typescript-eslint/no-implicit-any-catch":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"a72ed844c6406b12c84fd5cfe6106e65549946e1","_nodeVersion":"14.12.0","_npmVersion":"6.14.8","_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.8.1_1607600733807_0.13034992112026744"},"_hasShrinkwrap":false},"11.8.2":{"_id":"got@11.8.2","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.8.2","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"repository":{"ShortcutSyntax":"sindresorhus/got"},"license":"MIT","scripts":{"test":"xo && npm run build && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":null,"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^1.0.33","@types/express":"^4.17.7","@types/node":"^14.14.0","@types/node-fetch":"^2.5.7","@types/pem":"^1.9.5","@types/pify":"^3.0.2","@types/request":"^2.48.5","@types/sinon":"^9.0.5","@types/tough-cookie":"^4.0.0","ava":"^3.11.1","axios":"^0.20.0","benchmark":"^2.1.4","coveralls":"^3.1.0","create-test-server":"^3.0.1","del-cli":"^3.0.1","delay":"^4.4.0","express":"^4.17.1","form-data":"^3.0.0","get-stream":"^6.0.0","nock":"^13.0.4","node-fetch":"^2.6.0","np":"^6.4.0","nyc":"^15.1.0","p-event":"^4.2.0","pem":"^1.14.4","pify":"^5.0.0","sinon":"^9.0.3","slow-stream":"0.0.4","tempy":"^1.0.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"4.0.3","xo":"^0.34.1"},"dependencies":{"@sindresorhus/is":"^4.0.0","@szmarczak/http-timer":"^4.0.5","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^5.0.3","cacheable-request":"^7.0.1","decompress-response":"^6.0.0","http2-wrapper":"^1.0.0-beta.5.2","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"files":["dist/source"],"main":"dist/source","dist":{"shasum":"7abb3959ea28c31f3576f1576c1effce23f33599","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.8.2.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","import/no-anonymous-default-export":"off","@typescript-eslint/no-implicit-any-catch":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js"},"11.8.3":{"_id":"got@11.8.3","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.8.3","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && npm run build && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^1.0.33","@types/express":"^4.17.7","@types/node":"^14.14.0","@types/node-fetch":"^2.5.7","@types/pem":"^1.9.5","@types/pify":"^3.0.2","@types/request":"^2.48.5","@types/sinon":"^9.0.5","@types/tough-cookie":"^4.0.0","ava":"^3.11.1","axios":"^0.20.0","benchmark":"^2.1.4","coveralls":"^3.1.0","create-test-server":"^3.0.1","del-cli":"^3.0.1","delay":"^4.4.0","express":"^4.17.1","form-data":"^3.0.0","get-stream":"^6.0.0","nock":"^13.0.4","node-fetch":"^2.6.0","np":"^6.4.0","nyc":"^15.1.0","p-event":"^4.2.0","pem":"^1.14.4","pify":"^5.0.0","sinon":"^9.0.3","slow-stream":"0.0.4","tempy":"^1.0.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"4.0.3","xo":"^0.34.1"},"dependencies":{"@sindresorhus/is":"^4.0.0","@szmarczak/http-timer":"^4.0.5","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^5.0.3","cacheable-request":"^7.0.2","decompress-response":"^6.0.0","http2-wrapper":"^1.0.0-beta.5.2","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"main":"dist/source","dist":{"shasum":"f496c8fdda5d729a90b4905d2b07dbd148170770","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.8.3.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","import/no-anonymous-default-export":"off","@typescript-eslint/no-implicit-any-catch":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"0da732f4650c398f3b2fea672f8916e6c7004c8f","_nodeVersion":"12.22.1","_npmVersion":"8.1.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_11.8.3_1637211741542_0.32008131192231737"},"_hasShrinkwrap":false},"11.8.5":{"_id":"got@11.8.5","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.8.5","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"repository":{"ShortcutSyntax":"sindresorhus/got"},"license":"MIT","scripts":{"test":"xo && npm run build && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":null,"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^1.0.33","@types/express":"^4.17.7","@types/node":"^14.14.0","@types/node-fetch":"^2.5.7","@types/pem":"^1.9.5","@types/pify":"^3.0.2","@types/request":"^2.48.5","@types/sinon":"^9.0.5","@types/tough-cookie":"^4.0.0","ava":"^3.11.1","axios":"^0.20.0","benchmark":"^2.1.4","coveralls":"^3.1.0","create-test-server":"^3.0.1","del-cli":"^3.0.1","delay":"^4.4.0","express":"^4.17.1","form-data":"^3.0.0","get-stream":"^6.0.0","nock":"^13.0.4","node-fetch":"^2.6.0","np":"^6.4.0","nyc":"^15.1.0","p-event":"^4.2.0","pem":"^1.14.4","pify":"^5.0.0","sinon":"^9.0.3","slow-stream":"0.0.4","tempy":"^1.0.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"4.0.3","xo":"^0.34.1"},"dependencies":{"@sindresorhus/is":"^4.0.0","@szmarczak/http-timer":"^4.0.5","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^5.0.3","cacheable-request":"^7.0.2","decompress-response":"^6.0.0","http2-wrapper":"^1.0.0-beta.5.2","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"files":["dist/source"],"main":"dist/source","dist":{"shasum":"ce77d045136de56e8f024bebb82ea349bc730046","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.8.5.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","import/no-anonymous-default-export":"off","@typescript-eslint/no-implicit-any-catch":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js"},"11.8.6":{"_id":"got@11.8.6","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"11.8.6","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"repository":{"ShortcutSyntax":"sindresorhus/got"},"license":"MIT","scripts":{"test":"xo && npm run build && nyc --reporter=html --reporter=text ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":null,"devDependencies":{"@ava/typescript":"^1.1.1","@sindresorhus/tsconfig":"^0.7.0","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^1.0.33","@types/express":"^4.17.7","@types/express-serve-static-core":"4.17.18 - 4.17.30","@types/node":"^14.14.0","@types/node-fetch":"^2.5.7","@types/pem":"^1.9.5","@types/pify":"^3.0.2","@types/request":"^2.48.5","@types/sinon":"^9.0.5","@types/tough-cookie":"^4.0.0","ava":"^3.11.1","axios":"^0.20.0","benchmark":"^2.1.4","coveralls":"^3.1.0","create-test-server":"^3.0.1","del-cli":"^3.0.1","delay":"^4.4.0","express":"^4.17.1","form-data":"^3.0.0","get-stream":"^6.0.0","nock":"^13.0.4","node-fetch":"^2.6.0","np":"^6.4.0","nyc":"^15.1.0","p-event":"^4.2.0","pem":"^1.14.4","pify":"^5.0.0","sinon":"^9.0.3","slow-stream":"0.0.4","tempy":"^1.0.0","to-readable-stream":"^2.1.0","tough-cookie":"^4.0.0","typescript":"4.0.3","xo":"^0.34.1"},"dependencies":{"@sindresorhus/is":"^4.0.0","@szmarczak/http-timer":"^4.0.5","@types/cacheable-request":"^6.0.1","@types/responselike":"^1.0.0","cacheable-lookup":"^5.0.3","cacheable-request":"^7.0.2","decompress-response":"^6.0.0","http2-wrapper":"^1.0.0-beta.5.2","lowercase-keys":"^2.0.0","p-cancelable":"^2.0.0","responselike":"^2.0.0"},"engines":{"node":">=10.19.0"},"files":["dist/source"],"main":"dist/source","dist":{"shasum":"276e827ead8772eddbcfc97170590b841823233a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-11.8.6.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","typescript":{"rewritePaths":{"test/":"dist/test/"}}},"nyc":{"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","import/no-anonymous-default-export":"off","@typescript-eslint/no-implicit-any-catch":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js"},"12.0.0-beta.1":{"_id":"got@12.0.0-beta.1","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.0.0-beta.1","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^2.0.0","@sindresorhus/tsconfig":"^1.0.2","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^2.1.1","@types/express":"^4.17.13","@types/node":"^14.14.45","@types/node-fetch":"^2.5.11","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.11","@types/request":"^2.48.6","@types/sinon":"^9.0.9","@types/tough-cookie":"^4.0.1","ava":"^3.15.0","axios":"^0.21.1","benchmark":"^2.1.4","body-parser":"^1.19.0","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^3.0.1","delay":"^5.0.0","express":"^4.17.1","form-data":"^4.0.0","nock":"^13.1.1","node-fetch":"^2.6.1","np":"^7.5.0","nyc":"^15.1.0","p-event":"^4.2.0","pem":"^1.14.4","pify":"^5.0.0","readable-stream":"^3.6.0","request":"^2.88.2","sinon":"^10.0.0","slow-stream":"0.0.4","tempy":"^1.0.1","to-readable-stream":"^3.0.0","tough-cookie":"^4.0.0","ts-node":"^10.1.0","typescript":"4.3.5","xo":"^0.41.0"},"dependencies":{"@sindresorhus/is":"^4.0.1","@szmarczak/http-timer":"^4.0.6","@types/cacheable-request":"^6.0.2","@types/responselike":"^1.0.0","cacheable-lookup":"^6.0.0","cacheable-request":"^7.0.2","decompress-response":"^6.0.0","get-stream":"^6.0.1","http2-wrapper":"^2.0.7","lowercase-keys":"^2.0.0","p-cancelable":"^2.1.1","responselike":"^2.0.0"},"engines":{"node":">=14.16"},"dist":{"shasum":"de16aba6f75c1c8d1a611c8458f10cbfdec811e3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.0.0-beta.1.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","nonSemVerExperiments":{"nextGenConfig":true,"configurableModuleFormat":true},"extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/no-deprecated-api":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"a9afe86ca9cd336371d6416b0073228eb7779e3f","_nodeVersion":"16.5.0","_npmVersion":"7.19.1","_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_12.0.0-beta.1_1626959984988_0.17374544528153923"},"_hasShrinkwrap":false},"12.0.0-beta.2":{"_id":"got@12.0.0-beta.2","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.0.0-beta.2","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^2.0.0","@sindresorhus/tsconfig":"^1.0.2","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^2.1.1","@types/express":"^4.17.13","@types/node":"^14.14.45","@types/node-fetch":"^2.5.11","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.11","@types/request":"^2.48.6","@types/sinon":"^9.0.9","@types/tough-cookie":"^4.0.1","ava":"^3.15.0","axios":"^0.21.1","benchmark":"^2.1.4","body-parser":"^1.19.0","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^3.0.1","delay":"^5.0.0","express":"^4.17.1","form-data":"^4.0.0","nock":"^13.1.1","node-fetch":"^2.6.1","np":"^7.5.0","nyc":"^15.1.0","p-event":"^4.2.0","pem":"^1.14.4","pify":"^5.0.0","readable-stream":"^3.6.0","request":"^2.88.2","sinon":"^10.0.0","slow-stream":"0.0.4","tempy":"^1.0.1","to-readable-stream":"^3.0.0","tough-cookie":"^4.0.0","ts-node":"^10.1.0","typescript":"4.3.5","xo":"^0.41.0"},"dependencies":{"@sindresorhus/is":"^4.0.1","@szmarczak/http-timer":"^4.0.6","@types/cacheable-request":"^6.0.2","@types/responselike":"^1.0.0","cacheable-lookup":"^6.0.0","cacheable-request":"^7.0.2","decompress-response":"^6.0.0","get-stream":"^6.0.1","http2-wrapper":"^2.0.7","lowercase-keys":"^2.0.0","p-cancelable":"^2.1.1","responselike":"^2.0.0"},"engines":{"node":">=14.16"},"dist":{"shasum":"0fc0ca13c56537a7cab0265ef0f87dae88cd69c9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.0.0-beta.2.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","nonSemVerExperiments":{"nextGenConfig":true,"configurableModuleFormat":true},"extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/no-deprecated-api":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"b83ec560e638467049628478ed1855eaafee8518","_nodeVersion":"16.5.0","_npmVersion":"7.19.1","_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_12.0.0-beta.2_1628113375536_0.3043190016814252"},"_hasShrinkwrap":false},"12.0.0-beta.3":{"_id":"got@12.0.0-beta.3","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.0.0-beta.3","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^2.0.0","@sindresorhus/tsconfig":"^1.0.2","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^2.1.1","@types/express":"^4.17.13","@types/node":"^14.14.45","@types/node-fetch":"^2.5.11","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.11","@types/request":"^2.48.6","@types/sinon":"^9.0.9","@types/tough-cookie":"^4.0.1","ava":"^3.15.0","axios":"^0.21.1","benchmark":"^2.1.4","body-parser":"^1.19.0","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^3.0.1","delay":"^5.0.0","express":"^4.17.1","form-data":"^4.0.0","nock":"^13.1.1","node-fetch":"^2.6.1","np":"^7.5.0","nyc":"^15.1.0","p-event":"^4.2.0","pem":"^1.14.4","pify":"^5.0.0","readable-stream":"^3.6.0","request":"^2.88.2","sinon":"^10.0.0","slow-stream":"0.0.4","tempy":"^1.0.1","to-readable-stream":"^3.0.0","tough-cookie":"^4.0.0","ts-node":"^10.1.0","typescript":"4.3.5","xo":"^0.41.0"},"dependencies":{"@sindresorhus/is":"^4.0.1","@szmarczak/http-timer":"^4.0.6","@types/cacheable-request":"^6.0.2","@types/responselike":"^1.0.0","cacheable-lookup":"^6.0.0","cacheable-request":"^7.0.2","decompress-response":"^6.0.0","get-stream":"^6.0.1","http2-wrapper":"^2.0.7","lowercase-keys":"^2.0.0","p-cancelable":"^2.1.1","responselike":"^2.0.0"},"engines":{"node":">=14.16"},"dist":{"shasum":"e56014d64d66fb679bb4f676f6eccbd78681d25f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.0.0-beta.3.tgz"},"readme":"<div align=\"center\">\n\t<br>\n\t<br>\n\t<img width=\"360\" src=\"media/logo.svg\" alt=\"Got\">\n\t<br>\n\t<br>\n\t<br>\n\t<p>\n\t\t<p>\n\t\t\t<sup>\n\t\t\t\tSindre's open source work is supported by the community.<br>Special thanks to:\n\t\t\t</sup>\n\t\t</p>\n\t\t<br>\n\t\t<a href=\"https://moxy.studio\">\n\t\t\t<img src=\"https://sindresorhus.com/assets/thanks/moxy-logo.svg\" width=\"160\">\n\t\t</a>\n\t\t<br>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://retool.com/?utm_campaign=sindresorhus\">\n\t\t\t<img src=\"https://sindresorhus.com/assets/thanks/retool-logo.svg\" width=\"210\">\n\t\t</a>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://strapi.io/?ref=sindresorhus\">\n\t\t\t<div>\n\t\t\t\t<img src=\"https://sindresorhus.com/assets/thanks/strapi-logo-white-bg.png\" width=\"200\" alt=\"Strapi\">\n\t\t\t</div>\n\t\t\t<b>Strapi is the leading open-source headless CMS.</b>\n\t\t\t<div>\n\t\t\t\t<sup>It’s 100% JavaScript, fully customizable, and developer-first.</sup>\n\t\t\t</div>\n\t\t</a>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://www.monito.com\">\n\t\t\t<img src=\"https://sindresorhus.com/assets/thanks/monito-logo.svg\" width=\"210\">\n\t\t</a>\n\t\t<br>\n\t\t<br>\n\t</p>\n\t<br>\n\t<br>\n</div>\n\n> Human-friendly and powerful HTTP request library for Node.js\n\n<!-- [![Coverage Status](https://codecov.io/gh/sindresorhus/got/branch/main/graph/badge.svg)](https://codecov.io/gh/sindresorhus/got/branch/main) -->\n[![Downloads](https://img.shields.io/npm/dm/got.svg)](https://npmjs.com/got)\n[![Install size](https://packagephobia.now.sh/badge?p=got)](https://packagephobia.now.sh/result?p=got)\n\n[See how Got compares to other HTTP libraries](#comparison)\n\n---\n\nFor browser usage, we recommend [Ky](https://github.com/sindresorhus/ky) by the same people.\n\n---\n\n**Support questions should be asked [here](https://github.com/sindresorhus/got/discussions).**\n\n## Install\n\n```\n$ npm install got\n```\n\n## Take a peek\n\n### JSON mode\n\nGot has a dedicated option for handling JSON payload.\\\nFurthermore, the promise exposes a `.json<T>()` function that returns `Promise<T>`.\n\n```js\nimport got from 'got';\n\nconst {data} = await got.post('https://httpbin.org/anything', {\n\tjson: {\n\t\thello: 'world'\n\t}\n}).json();\n\nconsole.log(data);\n//=> {\"hello\": \"world\"}\n```\n\nFor advanced JSON usage, check out the [`parseJson`](documentation/2-options.md#parsejson) and [`stringifyJson`](documentation/2-options.md#stringifyjson) options.\n\n**For more useful tips like this, visit the [Tips](documentation/tips.md) page.**\n\n## Highlights\n\n- [Used by 6K+ packages and 3M+ repos](https://github.com/sindresorhus/got/network/dependents)\n- [Actively maintained](https://github.com/sindresorhus/got/graphs/contributors)\n- [Trusted by many companies](#widely-used)\n\n## Documentation\n\n#### Main API\n\n- [x] [Promise API](documentation/1-promise.md)\n- [x] [Options](documentation/2-options.md)\n- [x] [Stream API](documentation/3-streams.md)\n- [x] [Pagination API](documentation/4-pagination.md)\n- [x] [Advanced HTTPS API](documentation/5-https.md)\n- [x] [HTTP/2 support](documentation/2-options.md#http2)\n- [x] [`Response` class](documentation/3-streams.md#response-1)\n\n#### Timeouts and retries\n\n- [x] [Advanced timeout handling](documentation/6-timeout.md)\n- [x] [Retries on failure](documentation/7-retry.md)\n- [x] [Errors with metadata](documentation/8-errors.md)\n\n#### Advanced creation\n\n- [x] [Hooks](documentation/9-hooks.md)\n- [x] [Instances](documentation/10-instances.md)\n- [x] [Progress events & other events](documentation/3-streams.md#events)\n- [x] [Plugins](documentation/lets-make-a-plugin.md)\n- [x] [Compose](documentation/examples/advanced-creation.js)\n\n#### Cache, Proxy and UNIX sockets\n\n- [x] [RFC compliant caching](documentation/cache.md)\n- [x] [Proxy support](documentation/tips.md#proxying)\n- [x] [Unix Domain Sockets](documentation/tips.md#unix)\n\n#### Integration\n\n- [x] [TypeScript support](documentation/typescript.md)\n- [x] [AWS](documentation/tips.md#aws)\n- [x] [Testing](documentation/tips.md#testing)\n\n---\n\n### Migration guides\n\n- [Request migration guide](documentation/migration-guides/request.md)\n  - [*(Note that Request is unmaintained)*](https://github.com/request/request/issues/3142)\n- [Axios](documentation/migration-guides/axios.md)\n- [Node.js](documentation/migration-guides/nodejs.md)\n\n## Got plugins\n\n- [`got4aws`](https://github.com/SamVerschueren/got4aws) - Got convenience wrapper to interact with AWS v4 signed APIs\n- [`gh-got`](https://github.com/sindresorhus/gh-got) - Got convenience wrapper to interact with the GitHub API\n- [`gl-got`](https://github.com/singapore/gl-got) - Got convenience wrapper to interact with the GitLab API\n- [`gotql`](https://github.com/khaosdoctor/gotql) - Got convenience wrapper to interact with GraphQL using JSON-parsed queries instead of strings\n- [`got-fetch`](https://github.com/alexghr/got-fetch) - Got with a [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) interface\n\n### Legacy\n\n- [travis-got](https://github.com/samverschueren/travis-got) - Got convenience wrapper to interact with the Travis API\n- [graphql-got](https://github.com/kevva/graphql-got) - Got convenience wrapper to interact with GraphQL\n\n## Comparison\n\n|                       | `got`               | [`request`][r0]    | [`node-fetch`][n0]   | [`ky`][k0]               | [`axios`][a0]      | [`superagent`][s0]     |\n|-----------------------|:-------------------:|:------------------:|:--------------------:|:------------------------:|:------------------:|:----------------------:|\n| HTTP/2 support        | :heavy_check_mark:¹ | :x:                | :x:                  | :x:                      | :x:                | :heavy_check_mark:\\*\\* |\n| Browser support       | :x:                 | :x:                | :heavy_check_mark:\\* | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark:     |\n| Promise API           | :heavy_check_mark:  | :heavy_check_mark: | :heavy_check_mark:   | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark:     |\n| Stream API            | :heavy_check_mark:  | :heavy_check_mark: | Node.js only         | :x:                      | :x:                | :heavy_check_mark:     |\n| Pagination API        | :heavy_check_mark:  | :x:                | :x:                  | :x:                      | :x:                | :x:                    |\n| Request cancelation   | :heavy_check_mark:  | :x:                | :heavy_check_mark:   | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark:     |\n| RFC compliant caching | :heavy_check_mark:  | :x:                | :x:                  | :x:                      | :x:                | :x:                    |\n| Cookies (out-of-box)  | :heavy_check_mark:  | :heavy_check_mark: | :x:                  | :x:                      | :x:                | :x:                    |\n| Follows redirects     | :heavy_check_mark:  | :heavy_check_mark: | :heavy_check_mark:   | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark:     |\n| Retries on failure    | :heavy_check_mark:  | :x:                | :x:                  | :heavy_check_mark:       | :x:                | :heavy_check_mark:     |\n| Progress events       | :heavy_check_mark:  | :x:                | :x:                  | :heavy_check_mark:\\*\\*\\* | Browser only       | :heavy_check_mark:     |\n| Handles gzip/deflate  | :heavy_check_mark:  | :heavy_check_mark: | :heavy_check_mark:   | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark:     |\n| Advanced timeouts     | :heavy_check_mark:  | :x:                | :x:                  | :x:                      | :x:                | :x:                    |\n| Timings               | :heavy_check_mark:  | :heavy_check_mark: | :x:                  | :x:                      | :x:                | :x:                    |\n| Errors with metadata  | :heavy_check_mark:  | :x:                | :x:                  | :heavy_check_mark:       | :heavy_check_mark: | :x:                    |\n| JSON mode             | :heavy_check_mark:  | :heavy_check_mark: | :heavy_check_mark:   | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark:     |\n| Custom defaults       | :heavy_check_mark:  | :heavy_check_mark: | :x:                  | :heavy_check_mark:       | :heavy_check_mark: | :x:                    |\n| Composable            | :heavy_check_mark:  | :x:                | :x:                  | :x:                      | :x:                | :heavy_check_mark:     |\n| Hooks                 | :heavy_check_mark:  | :x:                | :x:                  | :heavy_check_mark:       | :heavy_check_mark: | :x:                    |\n| Issues open           | [![][gio]][g1]      | [![][rio]][r1]     | [![][nio]][n1]       | [![][kio]][k1]           | [![][aio]][a1]     | [![][sio]][s1]         |\n| Issues closed         | [![][gic]][g2]      | [![][ric]][r2]     | [![][nic]][n2]       | [![][kic]][k2]           | [![][aic]][a2]     | [![][sic]][s2]         |\n| Downloads             | [![][gd]][g3]       | [![][rd]][r3]      | [![][nd]][n3]        | [![][kd]][k3]            | [![][ad]][a3]      | [![][sd]][s3]          |\n| Coverage              | TBD       | [![][rc]][r4]      | [![][nc]][n4]        | [![][kc]][k4]            | [![][ac]][a4]      | [![][sc]][s4]          |\n| Build                 | [![][gb]][g5]       | [![][rb]][r5]      | [![][nb]][n5]        | [![][kb]][k5]            | [![][ab]][a5]      | [![][sb]][s5]          |\n| Bugs                  | [![][gbg]][g6]      | [![][rbg]][r6]     | [![][nbg]][n6]       | [![][kbg]][k6]           | [![][abg]][a6]     | [![][sbg]][s6]         |\n| Dependents            | [![][gdp]][g7]      | [![][rdp]][r7]     | [![][ndp]][n7]       | [![][kdp]][k7]           | [![][adp]][a7]     | [![][sdp]][s7]         |\n| Install size          | [![][gis]][g8]      | [![][ris]][r8]     | [![][nis]][n8]       | [![][kis]][k8]           | [![][ais]][a8]     | [![][sis]][s8]         |\n| GitHub stars          | [![][gs]][g9]       | [![][rs]][r9]      | [![][ns]][n9]        | [![][ks]][k9]            | [![][as]][a9]      | [![][ss]][s9]          |\n| TypeScript support    | [![][gts]][g10]     | [![][rts]][r10]    | [![][nts]][n10]      | [![][kts]][k10]          | [![][ats]][a10]    | [![][sts]][s11]        |\n| Last commit           | [![][glc]][g11]     | [![][rlc]][r11]    | [![][nlc]][n11]      | [![][klc]][k11]          | [![][alc]][a11]    | [![][slc]][s11]        |\n\n\\* It's almost API compatible with the browser `fetch` API.\\\n\\*\\* Need to switch the protocol manually. Doesn't accept PUSH streams and doesn't reuse HTTP/2 sessions.\\\n\\*\\*\\* Currently, only `DownloadProgress` event is supported, `UploadProgress` event is not supported.\\\n¹ Requires Node.js 15.10.0 or above.\\\n:sparkle: Almost-stable feature, but the API may change. Don't hesitate to try it out!\\\n:grey_question: Feature in early stage of development. Very experimental.\n\n<!-- GITHUB -->\n[k0]: https://github.com/sindresorhus/ky\n[r0]: https://github.com/request/request\n[n0]: https://github.com/node-fetch/node-fetch\n[a0]: https://github.com/axios/axios\n[s0]: https://github.com/visionmedia/superagent\n\n<!-- ISSUES OPEN -->\n[gio]: https://badgen.net/github/open-issues/sindresorhus/got?label\n[kio]: https://badgen.net/github/open-issues/sindresorhus/ky?label\n[rio]: https://badgen.net/github/open-issues/request/request?label\n[nio]: https://badgen.net/github/open-issues/bitinn/node-fetch?label\n[aio]: https://badgen.net/github/open-issues/axios/axios?label\n[sio]: https://badgen.net/github/open-issues/visionmedia/superagent?label\n\n[g1]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[k1]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[r1]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[n1]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[a1]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[s1]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n\n<!-- ISSUES CLOSED -->\n[gic]: https://badgen.net/github/closed-issues/sindresorhus/got?label\n[kic]: https://badgen.net/github/closed-issues/sindresorhus/ky?label\n[ric]: https://badgen.net/github/closed-issues/request/request?label\n[nic]: https://badgen.net/github/closed-issues/bitinn/node-fetch?label\n[aic]: https://badgen.net/github/closed-issues/axios/axios?label\n[sic]: https://badgen.net/github/closed-issues/visionmedia/superagent?label\n\n[g2]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[k2]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[r2]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[n2]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[a2]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[s2]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n\n<!-- DOWNLOADS -->\n[gd]: https://badgen.net/npm/dm/got?label\n[kd]: https://badgen.net/npm/dm/ky?label\n[rd]: https://badgen.net/npm/dm/request?label\n[nd]: https://badgen.net/npm/dm/node-fetch?label\n[ad]: https://badgen.net/npm/dm/axios?label\n[sd]: https://badgen.net/npm/dm/superagent?label\n\n[g3]: https://www.npmjs.com/package/got\n[k3]: https://www.npmjs.com/package/ky\n[r3]: https://www.npmjs.com/package/request\n[n3]: https://www.npmjs.com/package/node-fetch\n[a3]: https://www.npmjs.com/package/axios\n[s3]: https://www.npmjs.com/package/superagent\n\n<!-- COVERAGE -->\n[gc]: https://badgen.net/coveralls/c/github/sindresorhus/got?label\n[kc]: https://badgen.net/codecov/c/github/sindresorhus/ky?label\n[rc]: https://badgen.net/coveralls/c/github/request/request?label\n[nc]: https://badgen.net/coveralls/c/github/bitinn/node-fetch?label\n[ac]: https://badgen.net/coveralls/c/github/mzabriskie/axios?label\n[sc]: https://badgen.net/codecov/c/github/visionmedia/superagent?label\n\n[g4]: https://coveralls.io/github/sindresorhus/got\n[k4]: https://codecov.io/gh/sindresorhus/ky\n[r4]: https://coveralls.io/github/request/request\n[n4]: https://coveralls.io/github/bitinn/node-fetch\n[a4]: https://coveralls.io/github/mzabriskie/axios\n[s4]: https://codecov.io/gh/visionmedia/superagent\n\n<!-- BUILD -->\n[gb]: https://github.com/sindresorhus/got/actions/workflows/main.yml/badge.svg\n[kb]: https://github.com/sindresorhus/ky/actions/workflows/main.yml/badge.svg\n[rb]: https://badgen.net/travis/request/request?label\n[nb]: https://badgen.net/travis/bitinn/node-fetch?label\n[ab]: https://badgen.net/travis/axios/axios?label\n[sb]: https://badgen.net/travis/visionmedia/superagent?label\n\n[g5]: https://github.com/sindresorhus/got/actions/workflows/main.yml\n[k5]: https://github.com/sindresorhus/ky/actions/workflows/main.yml\n[r5]: https://travis-ci.org/github/request/request\n[n5]: https://travis-ci.org/github/bitinn/node-fetch\n[a5]: https://travis-ci.org/github/axios/axios\n[s5]: https://travis-ci.org/github/visionmedia/superagent\n\n<!-- BUGS -->\n[gbg]: https://badgen.net/github/label-issues/sindresorhus/got/bug/open?label\n[kbg]: https://badgen.net/github/label-issues/sindresorhus/ky/bug/open?label\n[rbg]: https://badgen.net/github/label-issues/request/request/Needs%20investigation/open?label\n[nbg]: https://badgen.net/github/label-issues/bitinn/node-fetch/bug/open?label\n[abg]: https://badgen.net/github/label-issues/axios/axios/type:confirmed%20bug/open?label\n[sbg]: https://badgen.net/github/label-issues/visionmedia/superagent/Bug/open?label\n\n[g6]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[k6]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[r6]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A\"Needs+investigation\"\n[n6]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[a6]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22type%3Aconfirmed+bug%22\n[s6]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3ABug\n\n<!-- DEPENDENTS -->\n[gdp]: https://badgen.net/npm/dependents/got?label\n[kdp]: https://badgen.net/npm/dependents/ky?label\n[rdp]: https://badgen.net/npm/dependents/request?label\n[ndp]: https://badgen.net/npm/dependents/node-fetch?label\n[adp]: https://badgen.net/npm/dependents/axios?label\n[sdp]: https://badgen.net/npm/dependents/superagent?label\n\n[g7]: https://www.npmjs.com/package/got?activeTab=dependents\n[k7]: https://www.npmjs.com/package/ky?activeTab=dependents\n[r7]: https://www.npmjs.com/package/request?activeTab=dependents\n[n7]: https://www.npmjs.com/package/node-fetch?activeTab=dependents\n[a7]: https://www.npmjs.com/package/axios?activeTab=dependents\n[s7]: https://www.npmjs.com/package/visionmedia?activeTab=dependents\n\n<!-- INSTALL SIZE -->\n[gis]: https://badgen.net/packagephobia/install/got?label\n[kis]: https://badgen.net/packagephobia/install/ky?label\n[ris]: https://badgen.net/packagephobia/install/request?label\n[nis]: https://badgen.net/packagephobia/install/node-fetch?label\n[ais]: https://badgen.net/packagephobia/install/axios?label\n[sis]: https://badgen.net/packagephobia/install/superagent?label\n\n[g8]: https://packagephobia.now.sh/result?p=got\n[k8]: https://packagephobia.now.sh/result?p=ky\n[r8]: https://packagephobia.now.sh/result?p=request\n[n8]: https://packagephobia.now.sh/result?p=node-fetch\n[a8]: https://packagephobia.now.sh/result?p=axios\n[s8]: https://packagephobia.now.sh/result?p=superagent\n\n<!-- GITHUB STARS -->\n[gs]: https://badgen.net/github/stars/sindresorhus/got?label\n[ks]: https://badgen.net/github/stars/sindresorhus/ky?label\n[rs]: https://badgen.net/github/stars/request/request?label\n[ns]: https://badgen.net/github/stars/bitinn/node-fetch?label\n[as]: https://badgen.net/github/stars/axios/axios?label\n[ss]: https://badgen.net/github/stars/visionmedia/superagent?label\n\n[g9]: https://github.com/sindresorhus/got\n[k9]: https://github.com/sindresorhus/ky\n[r9]: https://github.com/request/request\n[n9]: https://github.com/node-fetch/node-fetch\n[a9]: https://github.com/axios/axios\n[s9]: https://github.com/visionmedia/superagent\n\n<!-- TYPESCRIPT SUPPORT -->\n[gts]: https://badgen.net/npm/types/got?label\n[kts]: https://badgen.net/npm/types/ky?label\n[rts]: https://badgen.net/npm/types/request?label\n[nts]: https://badgen.net/npm/types/node-fetch?label\n[ats]: https://badgen.net/npm/types/axios?label\n[sts]: https://badgen.net/npm/types/superagent?label\n\n[g10]: https://github.com/sindresorhus/got\n[k10]: https://github.com/sindresorhus/ky\n[r10]: https://github.com/request/request\n[n10]: https://github.com/node-fetch/node-fetch\n[a10]: https://github.com/axios/axios\n[s10]: https://github.com/visionmedia/superagent\n\n<!-- LAST COMMIT -->\n[glc]: https://badgen.net/github/last-commit/sindresorhus/got?label\n[klc]: https://badgen.net/github/last-commit/sindresorhus/ky?label\n[rlc]: https://badgen.net/github/last-commit/request/request?label\n[nlc]: https://badgen.net/github/last-commit/bitinn/node-fetch?label\n[alc]: https://badgen.net/github/last-commit/axios/axios?label\n[slc]: https://badgen.net/github/last-commit/visionmedia/superagent?label\n\n[g11]: https://github.com/sindresorhus/got/commits\n[k11]: https://github.com/sindresorhus/ky/commits\n[r11]: https://github.com/request/request/commits\n[n11]: https://github.com/node-fetch/node-fetch/commits\n[a11]: https://github.com/axios/axios/commits\n[s11]: https://github.com/visionmedia/superagent/commits\n\n[Click here][InstallSizeOfTheDependencies] to see the install size of the Got dependencies.\n\n[InstallSizeOfTheDependencies]: https://packagephobia.com/result?p=@sindresorhus/is@4.0.1,@szmarczak/http-timer@4.0.5,@types/cacheable-request@6.0.1,@types/responselike@1.0.0,cacheable-lookup@6.0.0,cacheable-request@7.0.2,decompress-response@6.0.0,get-stream@6.0.1,http2-wrapper@2.0.5,lowercase-keys@2.0.0,p-cancelable@2.1.1,responselike@2.0.0\n\n## Maintainers\n\n[![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://sindresorhus.com) | [![Szymon Marczak](https://github.com/szmarczak.png?size=100)](https://github.com/szmarczak)\n---|---\n[Sindre Sorhus](https://sindresorhus.com) | [Szymon Marczak](https://github.com/szmarczak)\n\n###### Former\n\n- [Vsevolod Strukchinsky](https://github.com/floatdrop)\n- [Alexander Tesfamichael](https://github.com/alextes)\n- [Brandon Smith](https://github.com/brandon93s)\n- [Luke Childs](https://github.com/lukechilds)\n- [Giovanni Minotti](https://github.com/Giotino)\n\n<a name=\"widely-used\"></a>\n## These amazing companies are using Got\n\n<table>\n<tbody>\n\t<tr>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"https://segment.com\">\n\t\t\t\t<img width=\"90\" valign=\"middle\" src=\"https://user-images.githubusercontent.com/697676/47693700-ddb62500-dbb7-11e8-8332-716a91010c2d.png\">\n\t\t\t</a>\n\t\t</td>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"https://antora.org\">\n\t\t\t\t<img width=\"100\" valign=\"middle\" src=\"https://user-images.githubusercontent.com/79351/47706840-d874cc80-dbef-11e8-87c6-5f0c60cbf5dc.png\">\n\t\t\t</a>\n\t\t</td>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"https://getvoip.com\">\n\t\t\t\t<img width=\"150\" valign=\"middle\" src=\"https://user-images.githubusercontent.com/10832620/47869404-429e9480-dddd-11e8-8a7a-ca43d7f06020.png\">\n\t\t\t</a>\n\t\t</td>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"https://github.com/exoframejs/exoframe\">\n\t\t\t\t<img width=\"150\" valign=\"middle\" src=\"https://user-images.githubusercontent.com/365944/47791460-11a95b80-dd1a-11e8-9070-e8f2a215e03a.png\">\n\t\t\t</a>\n\t\t</td>\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"http://karaokes.moe\">\n\t\t\t\t<img width=\"140\" valign=\"middle\" src=\"https://camo.githubusercontent.com/6860e5fa4684c14d8e1aa65df0aba4e6808ea1a9/687474703a2f2f6b6172616f6b65732e6d6f652f6173736574732f696d616765732f696e6465782e706e67\">\n\t\t\t</a>\n\t\t</td>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"https://github.com/renovatebot/renovate\">\n\t\t\t\t<img width=\"150\" valign=\"middle\" src=\"https://camo.githubusercontent.com/206d470ac709b9a702a97b0c08d6f389a086793d/68747470733a2f2f72656e6f76617465626f742e636f6d2f696d616765732f6c6f676f2e737667\">\n\t\t\t</a>\n\t\t</td>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"https://resist.bot\">\n\t\t\t\t<img width=\"150\" valign=\"middle\" src=\"https://user-images.githubusercontent.com/3322287/51992724-28736180-2473-11e9-9764-599cfda4b012.png\">\n\t\t\t</a>\n\t\t</td>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"https://www.naturalcycles.com\">\n\t\t\t\t<img width=\"150\" valign=\"middle\" src=\"https://user-images.githubusercontent.com/170270/92244143-d0a8a200-eec2-11ea-9fc0-1c07f90b2113.png\">\n\t\t\t</a>\n\t\t</td>\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"https://microlink.io\">\n\t\t\t\t<img width=\"150\" valign=\"middle\" src=\"https://user-images.githubusercontent.com/36894700/91992974-1cc5dc00-ed35-11ea-9d04-f58b42ce6a5e.png\">\n\t\t\t</a>\n\t\t</td>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"https://radity.com\">\n\t\t\t\t<img width=\"150\" valign=\"middle\" src=\"https://user-images.githubusercontent.com/29518613/91814036-97fb9500-ec44-11ea-8c6c-d198cc23ca29.png\">\n\t\t\t</a>\n\t\t</td>\n\t</tr>\n</tbody>\n</table>\n\n<!-- <br> -->\n\n<!-- *Creating an awesome product? Open an issue to get listed here.* -->\n\n<br>\n\n> Segment is a happy user of Got! Got powers the main backend API that our app talks to. It's used by our in-house RPC client that we use to communicate with all microservices.\n>\n> — <a href=\"https://github.com/vadimdemedes\">Vadim Demedes</a>\n\n> Antora, a static site generator for creating documentation sites, uses Got to download the UI bundle. In Antora, the UI bundle (aka theme) is maintained as a separate project. That project exports the UI as a zip file we call the UI bundle. The main site generator downloads that UI from a URL using Got and streams it to vinyl-zip to extract the files. Those files go on to be used to create the HTML pages and supporting assets.\n>\n> — <a href=\"https://github.com/mojavelinux\">Dan Allen</a>\n\n> GetVoIP is happily using Got in production. One of the unique capabilities of Got is the ability to handle Unix sockets which enables us to build a full control interfaces for our docker stack.\n>\n> — <a href=\"https://github.com/danielkalen\">Daniel Kalen</a>\n\n> We're using Got inside of Exoframe to handle all the communication between CLI and server. Exoframe is a self-hosted tool that allows simple one-command deployments using Docker.\n>\n> — <a href=\"https://github.com/yamalight\">Tim Ermilov</a>\n\n> Karaoke Mugen uses Got to fetch content updates from its online server.\n>\n> — <a href=\"https://github.com/AxelTerizaki\">Axel Terizaki</a>\n\n> Renovate uses Got, gh-got and gl-got to send millions of queries per day to GitHub, GitLab, npmjs, PyPi, Packagist, Docker Hub, Terraform, CircleCI, and more.\n>\n> — <a href=\"https://github.com/rarkins\">Rhys Arkins</a>\n\n> Resistbot uses Got to communicate from the API frontend where all correspondence ingresses to the officials lookup database in back.\n>\n> — <a href=\"https://github.com/chris-erickson\">Chris Erickson</a>\n\n> Natural Cycles is using Got to communicate with all kinds of 3rd-party REST APIs (over 9000!).\n>\n> — <a href=\"https://github.com/kirillgroshkov\">Kirill Groshkov</a>\n\n> Microlink is a cloud browser as an API service that uses Got widely as the main HTTP client, serving ~22M requests a month, every time a network call needs to be performed.\n>\n> — <a href=\"https://github.com/Kikobeats\">Kiko Beats</a>\n\n> We’re using Got at Radity. Thanks for such an amazing work!\n>\n> — <a href=\"https://github.com/MirzayevFarid\">Mirzayev Farid</a>\n\n## For enterprise\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of `got` and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-got?utm_source=npm-got&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n","funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","nonSemVerExperiments":{"nextGenConfig":true,"configurableModuleFormat":true},"extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/no-deprecated-api":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","readmeFilename":"readme.md","gitHead":"57367efc5ead58827f58818e6b282e7142be5673","_nodeVersion":"16.5.0","_npmVersion":"7.19.1","_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_12.0.0-beta.3_1628240676124_0.6778869942931924"},"_hasShrinkwrap":false},"12.0.0-beta.4":{"_id":"got@12.0.0-beta.4","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.0.0-beta.4","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^2.0.0","@sindresorhus/tsconfig":"^1.0.2","@sinonjs/fake-timers":"^6.0.1","@types/benchmark":"^2.1.1","@types/express":"^4.17.13","@types/node":"^14.14.45","@types/node-fetch":"^2.5.11","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.11","@types/request":"^2.48.6","@types/sinon":"^9.0.9","@types/tough-cookie":"^4.0.1","ava":"^3.15.0","axios":"^0.21.1","benchmark":"^2.1.4","body-parser":"^1.19.0","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^3.0.1","delay":"^5.0.0","express":"^4.17.1","form-data":"^4.0.0","nock":"^13.1.1","node-fetch":"^2.6.1","np":"^7.5.0","nyc":"^15.1.0","p-event":"^4.2.0","pem":"^1.14.4","pify":"^5.0.0","readable-stream":"^3.6.0","request":"^2.88.2","sinon":"^10.0.0","slow-stream":"0.0.4","tempy":"^1.0.1","to-readable-stream":"^3.0.0","tough-cookie":"^4.0.0","ts-node":"^10.1.0","typescript":"4.3.5","xo":"^0.41.0"},"dependencies":{"@sindresorhus/is":"^4.0.1","@szmarczak/http-timer":"^4.0.6","@types/cacheable-request":"^6.0.2","@types/responselike":"^1.0.0","cacheable-lookup":"^6.0.0","cacheable-request":"^7.0.2","decompress-response":"^6.0.0","get-stream":"^6.0.1","http2-wrapper":"^2.0.7","lowercase-keys":"^2.0.0","p-cancelable":"^2.1.1","responselike":"^2.0.0"},"engines":{"node":">=14.16"},"dist":{"shasum":"e0c8a1ba7ad2bc9796c4f8368527207d3ae52f12","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.0.0-beta.4.tgz"},"readme":"<div align=\"center\">\n\t<br>\n\t<br>\n\t<img width=\"360\" src=\"media/logo.svg\" alt=\"Got\">\n\t<br>\n\t<br>\n\t<br>\n\t<p>\n\t\t<p>\n\t\t\t<sup>\n\t\t\t\tSindre's open source work is supported by the community.<br>Special thanks to:\n\t\t\t</sup>\n\t\t</p>\n\t\t<br>\n\t\t<a href=\"https://moxy.studio\">\n\t\t\t<img src=\"https://sindresorhus.com/assets/thanks/moxy-logo.svg\" width=\"160\">\n\t\t</a>\n\t\t<br>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://retool.com/?utm_campaign=sindresorhus\">\n\t\t\t<img src=\"https://sindresorhus.com/assets/thanks/retool-logo.svg\" width=\"210\">\n\t\t</a>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://strapi.io/?ref=sindresorhus\">\n\t\t\t<div>\n\t\t\t\t<img src=\"https://sindresorhus.com/assets/thanks/strapi-logo-white-bg.png\" width=\"200\" alt=\"Strapi\">\n\t\t\t</div>\n\t\t\t<b>Strapi is the leading open-source headless CMS.</b>\n\t\t\t<div>\n\t\t\t\t<sup>It’s 100% JavaScript, fully customizable, and developer-first.</sup>\n\t\t\t</div>\n\t\t</a>\n\t\t<br>\n\t\t<br>\n\t\t<a href=\"https://www.monito.com\">\n\t\t\t<img src=\"https://sindresorhus.com/assets/thanks/monito-logo.svg\" width=\"210\">\n\t\t</a>\n\t\t<br>\n\t\t<br>\n\t</p>\n\t<br>\n\t<br>\n</div>\n\n> Human-friendly and powerful HTTP request library for Node.js\n\n<!-- [![Coverage Status](https://codecov.io/gh/sindresorhus/got/branch/main/graph/badge.svg)](https://codecov.io/gh/sindresorhus/got/branch/main) -->\n[![Downloads](https://img.shields.io/npm/dm/got.svg)](https://npmjs.com/got)\n[![Install size](https://packagephobia.now.sh/badge?p=got)](https://packagephobia.now.sh/result?p=got)\n\n[See how Got compares to other HTTP libraries](#comparison)\n\n---\n\nFor browser usage, we recommend [Ky](https://github.com/sindresorhus/ky) by the same people.\n\n---\n\n**Support questions should be asked [here](https://github.com/sindresorhus/got/discussions).**\n\n## Install\n\n```\n$ npm install got\n```\n\n## Take a peek\n\n### JSON mode\n\nGot has a dedicated option for handling JSON payload.\\\nFurthermore, the promise exposes a `.json<T>()` function that returns `Promise<T>`.\n\n```js\nimport got from 'got';\n\nconst {data} = await got.post('https://httpbin.org/anything', {\n\tjson: {\n\t\thello: 'world'\n\t}\n}).json();\n\nconsole.log(data);\n//=> {\"hello\": \"world\"}\n```\n\nFor advanced JSON usage, check out the [`parseJson`](documentation/2-options.md#parsejson) and [`stringifyJson`](documentation/2-options.md#stringifyjson) options.\n\n**For more useful tips like this, visit the [Tips](documentation/tips.md) page.**\n\n## Highlights\n\n- [Used by 6K+ packages and 3M+ repos](https://github.com/sindresorhus/got/network/dependents)\n- [Actively maintained](https://github.com/sindresorhus/got/graphs/contributors)\n- [Trusted by many companies](#widely-used)\n\n## Documentation\n\n#### Main API\n\n- [x] [Promise API](documentation/1-promise.md)\n- [x] [Options](documentation/2-options.md)\n- [x] [Stream API](documentation/3-streams.md)\n- [x] [Pagination API](documentation/4-pagination.md)\n- [x] [Advanced HTTPS API](documentation/5-https.md)\n- [x] [HTTP/2 support](documentation/2-options.md#http2)\n- [x] [`Response` class](documentation/3-streams.md#response-1)\n\n#### Timeouts and retries\n\n- [x] [Advanced timeout handling](documentation/6-timeout.md)\n- [x] [Retries on failure](documentation/7-retry.md)\n- [x] [Errors with metadata](documentation/8-errors.md)\n\n#### Advanced creation\n\n- [x] [Hooks](documentation/9-hooks.md)\n- [x] [Instances](documentation/10-instances.md)\n- [x] [Progress events & other events](documentation/3-streams.md#events)\n- [x] [Plugins](documentation/lets-make-a-plugin.md)\n- [x] [Compose](documentation/examples/advanced-creation.js)\n\n#### Cache, Proxy and UNIX sockets\n\n- [x] [RFC compliant caching](documentation/cache.md)\n- [x] [Proxy support](documentation/tips.md#proxying)\n- [x] [Unix Domain Sockets](documentation/tips.md#unix)\n\n#### Integration\n\n- [x] [TypeScript support](documentation/typescript.md)\n- [x] [AWS](documentation/tips.md#aws)\n- [x] [Testing](documentation/tips.md#testing)\n\n---\n\n### Migration guides\n\n- [Request migration guide](documentation/migration-guides/request.md)\n  - [*(Note that Request is unmaintained)*](https://github.com/request/request/issues/3142)\n- [Axios](documentation/migration-guides/axios.md)\n- [Node.js](documentation/migration-guides/nodejs.md)\n\n## Got plugins\n\n- [`got4aws`](https://github.com/SamVerschueren/got4aws) - Got convenience wrapper to interact with AWS v4 signed APIs\n- [`gh-got`](https://github.com/sindresorhus/gh-got) - Got convenience wrapper to interact with the GitHub API\n- [`gl-got`](https://github.com/singapore/gl-got) - Got convenience wrapper to interact with the GitLab API\n- [`gotql`](https://github.com/khaosdoctor/gotql) - Got convenience wrapper to interact with GraphQL using JSON-parsed queries instead of strings\n- [`got-fetch`](https://github.com/alexghr/got-fetch) - Got with a [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) interface\n- [`got-scraping`](https://github.com/apify/got-scraping) - Got wrapper specifically designed for web scraping purposes\n\n### Legacy\n\n- [travis-got](https://github.com/samverschueren/travis-got) - Got convenience wrapper to interact with the Travis API\n- [graphql-got](https://github.com/kevva/graphql-got) - Got convenience wrapper to interact with GraphQL\n\n## Comparison\n\n|                       | `got`               | [`request`][r0]    | [`node-fetch`][n0]   | [`ky`][k0]               | [`axios`][a0]      | [`superagent`][s0]     |\n|-----------------------|:-------------------:|:------------------:|:--------------------:|:------------------------:|:------------------:|:----------------------:|\n| HTTP/2 support        | :heavy_check_mark:¹ | :x:                | :x:                  | :x:                      | :x:                | :heavy_check_mark:\\*\\* |\n| Browser support       | :x:                 | :x:                | :heavy_check_mark:\\* | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark:     |\n| Promise API           | :heavy_check_mark:  | :heavy_check_mark: | :heavy_check_mark:   | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark:     |\n| Stream API            | :heavy_check_mark:  | :heavy_check_mark: | Node.js only         | :x:                      | :x:                | :heavy_check_mark:     |\n| Pagination API        | :heavy_check_mark:  | :x:                | :x:                  | :x:                      | :x:                | :x:                    |\n| Request cancelation   | :heavy_check_mark:  | :x:                | :heavy_check_mark:   | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark:     |\n| RFC compliant caching | :heavy_check_mark:  | :x:                | :x:                  | :x:                      | :x:                | :x:                    |\n| Cookies (out-of-box)  | :heavy_check_mark:  | :heavy_check_mark: | :x:                  | :x:                      | :x:                | :x:                    |\n| Follows redirects     | :heavy_check_mark:  | :heavy_check_mark: | :heavy_check_mark:   | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark:     |\n| Retries on failure    | :heavy_check_mark:  | :x:                | :x:                  | :heavy_check_mark:       | :x:                | :heavy_check_mark:     |\n| Progress events       | :heavy_check_mark:  | :x:                | :x:                  | :heavy_check_mark:\\*\\*\\* | Browser only       | :heavy_check_mark:     |\n| Handles gzip/deflate  | :heavy_check_mark:  | :heavy_check_mark: | :heavy_check_mark:   | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark:     |\n| Advanced timeouts     | :heavy_check_mark:  | :x:                | :x:                  | :x:                      | :x:                | :x:                    |\n| Timings               | :heavy_check_mark:  | :heavy_check_mark: | :x:                  | :x:                      | :x:                | :x:                    |\n| Errors with metadata  | :heavy_check_mark:  | :x:                | :x:                  | :heavy_check_mark:       | :heavy_check_mark: | :x:                    |\n| JSON mode             | :heavy_check_mark:  | :heavy_check_mark: | :heavy_check_mark:   | :heavy_check_mark:       | :heavy_check_mark: | :heavy_check_mark:     |\n| Custom defaults       | :heavy_check_mark:  | :heavy_check_mark: | :x:                  | :heavy_check_mark:       | :heavy_check_mark: | :x:                    |\n| Composable            | :heavy_check_mark:  | :x:                | :x:                  | :x:                      | :x:                | :heavy_check_mark:     |\n| Hooks                 | :heavy_check_mark:  | :x:                | :x:                  | :heavy_check_mark:       | :heavy_check_mark: | :x:                    |\n| Issues open           | [![][gio]][g1]      | [![][rio]][r1]     | [![][nio]][n1]       | [![][kio]][k1]           | [![][aio]][a1]     | [![][sio]][s1]         |\n| Issues closed         | [![][gic]][g2]      | [![][ric]][r2]     | [![][nic]][n2]       | [![][kic]][k2]           | [![][aic]][a2]     | [![][sic]][s2]         |\n| Downloads             | [![][gd]][g3]       | [![][rd]][r3]      | [![][nd]][n3]        | [![][kd]][k3]            | [![][ad]][a3]      | [![][sd]][s3]          |\n| Coverage              | TBD       | [![][rc]][r4]      | [![][nc]][n4]        | [![][kc]][k4]            | [![][ac]][a4]      | [![][sc]][s4]          |\n| Build                 | [![][gb]][g5]       | [![][rb]][r5]      | [![][nb]][n5]        | [![][kb]][k5]            | [![][ab]][a5]      | [![][sb]][s5]          |\n| Bugs                  | [![][gbg]][g6]      | [![][rbg]][r6]     | [![][nbg]][n6]       | [![][kbg]][k6]           | [![][abg]][a6]     | [![][sbg]][s6]         |\n| Dependents            | [![][gdp]][g7]      | [![][rdp]][r7]     | [![][ndp]][n7]       | [![][kdp]][k7]           | [![][adp]][a7]     | [![][sdp]][s7]         |\n| Install size          | [![][gis]][g8]      | [![][ris]][r8]     | [![][nis]][n8]       | [![][kis]][k8]           | [![][ais]][a8]     | [![][sis]][s8]         |\n| GitHub stars          | [![][gs]][g9]       | [![][rs]][r9]      | [![][ns]][n9]        | [![][ks]][k9]            | [![][as]][a9]      | [![][ss]][s9]          |\n| TypeScript support    | [![][gts]][g10]     | [![][rts]][r10]    | [![][nts]][n10]      | [![][kts]][k10]          | [![][ats]][a10]    | [![][sts]][s11]        |\n| Last commit           | [![][glc]][g11]     | [![][rlc]][r11]    | [![][nlc]][n11]      | [![][klc]][k11]          | [![][alc]][a11]    | [![][slc]][s11]        |\n\n\\* It's almost API compatible with the browser `fetch` API.\\\n\\*\\* Need to switch the protocol manually. Doesn't accept PUSH streams and doesn't reuse HTTP/2 sessions.\\\n\\*\\*\\* Currently, only `DownloadProgress` event is supported, `UploadProgress` event is not supported.\\\n¹ Requires Node.js 15.10.0 or above.\\\n:sparkle: Almost-stable feature, but the API may change. Don't hesitate to try it out!\\\n:grey_question: Feature in early stage of development. Very experimental.\n\n<!-- GITHUB -->\n[k0]: https://github.com/sindresorhus/ky\n[r0]: https://github.com/request/request\n[n0]: https://github.com/node-fetch/node-fetch\n[a0]: https://github.com/axios/axios\n[s0]: https://github.com/visionmedia/superagent\n\n<!-- ISSUES OPEN -->\n[gio]: https://badgen.net/github/open-issues/sindresorhus/got?label\n[kio]: https://badgen.net/github/open-issues/sindresorhus/ky?label\n[rio]: https://badgen.net/github/open-issues/request/request?label\n[nio]: https://badgen.net/github/open-issues/bitinn/node-fetch?label\n[aio]: https://badgen.net/github/open-issues/axios/axios?label\n[sio]: https://badgen.net/github/open-issues/visionmedia/superagent?label\n\n[g1]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[k1]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[r1]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[n1]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[a1]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n[s1]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\n\n<!-- ISSUES CLOSED -->\n[gic]: https://badgen.net/github/closed-issues/sindresorhus/got?label\n[kic]: https://badgen.net/github/closed-issues/sindresorhus/ky?label\n[ric]: https://badgen.net/github/closed-issues/request/request?label\n[nic]: https://badgen.net/github/closed-issues/bitinn/node-fetch?label\n[aic]: https://badgen.net/github/closed-issues/axios/axios?label\n[sic]: https://badgen.net/github/closed-issues/visionmedia/superagent?label\n\n[g2]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[k2]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[r2]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[n2]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[a2]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n[s2]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc\n\n<!-- DOWNLOADS -->\n[gd]: https://badgen.net/npm/dm/got?label\n[kd]: https://badgen.net/npm/dm/ky?label\n[rd]: https://badgen.net/npm/dm/request?label\n[nd]: https://badgen.net/npm/dm/node-fetch?label\n[ad]: https://badgen.net/npm/dm/axios?label\n[sd]: https://badgen.net/npm/dm/superagent?label\n\n[g3]: https://www.npmjs.com/package/got\n[k3]: https://www.npmjs.com/package/ky\n[r3]: https://www.npmjs.com/package/request\n[n3]: https://www.npmjs.com/package/node-fetch\n[a3]: https://www.npmjs.com/package/axios\n[s3]: https://www.npmjs.com/package/superagent\n\n<!-- COVERAGE -->\n[gc]: https://badgen.net/coveralls/c/github/sindresorhus/got?label\n[kc]: https://badgen.net/codecov/c/github/sindresorhus/ky?label\n[rc]: https://badgen.net/coveralls/c/github/request/request?label\n[nc]: https://badgen.net/coveralls/c/github/bitinn/node-fetch?label\n[ac]: https://badgen.net/coveralls/c/github/mzabriskie/axios?label\n[sc]: https://badgen.net/codecov/c/github/visionmedia/superagent?label\n\n[g4]: https://coveralls.io/github/sindresorhus/got\n[k4]: https://codecov.io/gh/sindresorhus/ky\n[r4]: https://coveralls.io/github/request/request\n[n4]: https://coveralls.io/github/bitinn/node-fetch\n[a4]: https://coveralls.io/github/mzabriskie/axios\n[s4]: https://codecov.io/gh/visionmedia/superagent\n\n<!-- BUILD -->\n[gb]: https://github.com/sindresorhus/got/actions/workflows/main.yml/badge.svg\n[kb]: https://github.com/sindresorhus/ky/actions/workflows/main.yml/badge.svg\n[rb]: https://badgen.net/travis/request/request?label\n[nb]: https://badgen.net/travis/bitinn/node-fetch?label\n[ab]: https://badgen.net/travis/axios/axios?label\n[sb]: https://badgen.net/travis/visionmedia/superagent?label\n\n[g5]: https://github.com/sindresorhus/got/actions/workflows/main.yml\n[k5]: https://github.com/sindresorhus/ky/actions/workflows/main.yml\n[r5]: https://travis-ci.org/github/request/request\n[n5]: https://travis-ci.org/github/bitinn/node-fetch\n[a5]: https://travis-ci.org/github/axios/axios\n[s5]: https://travis-ci.org/github/visionmedia/superagent\n\n<!-- BUGS -->\n[gbg]: https://badgen.net/github/label-issues/sindresorhus/got/bug/open?label\n[kbg]: https://badgen.net/github/label-issues/sindresorhus/ky/bug/open?label\n[rbg]: https://badgen.net/github/label-issues/request/request/Needs%20investigation/open?label\n[nbg]: https://badgen.net/github/label-issues/bitinn/node-fetch/bug/open?label\n[abg]: https://badgen.net/github/label-issues/axios/axios/type:confirmed%20bug/open?label\n[sbg]: https://badgen.net/github/label-issues/visionmedia/superagent/Bug/open?label\n\n[g6]: https://github.com/sindresorhus/got/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[k6]: https://github.com/sindresorhus/ky/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[r6]: https://github.com/request/request/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A\"Needs+investigation\"\n[n6]: https://github.com/bitinn/node-fetch/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Abug\n[a6]: https://github.com/axios/axios/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3A%22type%3Aconfirmed+bug%22\n[s6]: https://github.com/visionmedia/superagent/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3ABug\n\n<!-- DEPENDENTS -->\n[gdp]: https://badgen.net/npm/dependents/got?label\n[kdp]: https://badgen.net/npm/dependents/ky?label\n[rdp]: https://badgen.net/npm/dependents/request?label\n[ndp]: https://badgen.net/npm/dependents/node-fetch?label\n[adp]: https://badgen.net/npm/dependents/axios?label\n[sdp]: https://badgen.net/npm/dependents/superagent?label\n\n[g7]: https://www.npmjs.com/package/got?activeTab=dependents\n[k7]: https://www.npmjs.com/package/ky?activeTab=dependents\n[r7]: https://www.npmjs.com/package/request?activeTab=dependents\n[n7]: https://www.npmjs.com/package/node-fetch?activeTab=dependents\n[a7]: https://www.npmjs.com/package/axios?activeTab=dependents\n[s7]: https://www.npmjs.com/package/visionmedia?activeTab=dependents\n\n<!-- INSTALL SIZE -->\n[gis]: https://badgen.net/packagephobia/install/got?label\n[kis]: https://badgen.net/packagephobia/install/ky?label\n[ris]: https://badgen.net/packagephobia/install/request?label\n[nis]: https://badgen.net/packagephobia/install/node-fetch?label\n[ais]: https://badgen.net/packagephobia/install/axios?label\n[sis]: https://badgen.net/packagephobia/install/superagent?label\n\n[g8]: https://packagephobia.now.sh/result?p=got\n[k8]: https://packagephobia.now.sh/result?p=ky\n[r8]: https://packagephobia.now.sh/result?p=request\n[n8]: https://packagephobia.now.sh/result?p=node-fetch\n[a8]: https://packagephobia.now.sh/result?p=axios\n[s8]: https://packagephobia.now.sh/result?p=superagent\n\n<!-- GITHUB STARS -->\n[gs]: https://badgen.net/github/stars/sindresorhus/got?label\n[ks]: https://badgen.net/github/stars/sindresorhus/ky?label\n[rs]: https://badgen.net/github/stars/request/request?label\n[ns]: https://badgen.net/github/stars/bitinn/node-fetch?label\n[as]: https://badgen.net/github/stars/axios/axios?label\n[ss]: https://badgen.net/github/stars/visionmedia/superagent?label\n\n[g9]: https://github.com/sindresorhus/got\n[k9]: https://github.com/sindresorhus/ky\n[r9]: https://github.com/request/request\n[n9]: https://github.com/node-fetch/node-fetch\n[a9]: https://github.com/axios/axios\n[s9]: https://github.com/visionmedia/superagent\n\n<!-- TYPESCRIPT SUPPORT -->\n[gts]: https://badgen.net/npm/types/got?label\n[kts]: https://badgen.net/npm/types/ky?label\n[rts]: https://badgen.net/npm/types/request?label\n[nts]: https://badgen.net/npm/types/node-fetch?label\n[ats]: https://badgen.net/npm/types/axios?label\n[sts]: https://badgen.net/npm/types/superagent?label\n\n[g10]: https://github.com/sindresorhus/got\n[k10]: https://github.com/sindresorhus/ky\n[r10]: https://github.com/request/request\n[n10]: https://github.com/node-fetch/node-fetch\n[a10]: https://github.com/axios/axios\n[s10]: https://github.com/visionmedia/superagent\n\n<!-- LAST COMMIT -->\n[glc]: https://badgen.net/github/last-commit/sindresorhus/got?label\n[klc]: https://badgen.net/github/last-commit/sindresorhus/ky?label\n[rlc]: https://badgen.net/github/last-commit/request/request?label\n[nlc]: https://badgen.net/github/last-commit/bitinn/node-fetch?label\n[alc]: https://badgen.net/github/last-commit/axios/axios?label\n[slc]: https://badgen.net/github/last-commit/visionmedia/superagent?label\n\n[g11]: https://github.com/sindresorhus/got/commits\n[k11]: https://github.com/sindresorhus/ky/commits\n[r11]: https://github.com/request/request/commits\n[n11]: https://github.com/node-fetch/node-fetch/commits\n[a11]: https://github.com/axios/axios/commits\n[s11]: https://github.com/visionmedia/superagent/commits\n\n[Click here][InstallSizeOfTheDependencies] to see the install size of the Got dependencies.\n\n[InstallSizeOfTheDependencies]: https://packagephobia.com/result?p=@sindresorhus/is@4.0.1,@szmarczak/http-timer@4.0.5,@types/cacheable-request@6.0.1,@types/responselike@1.0.0,cacheable-lookup@6.0.0,cacheable-request@7.0.2,decompress-response@6.0.0,get-stream@6.0.1,http2-wrapper@2.0.5,lowercase-keys@2.0.0,p-cancelable@2.1.1,responselike@2.0.0\n\n## Maintainers\n\n[![Sindre Sorhus](https://github.com/sindresorhus.png?size=100)](https://sindresorhus.com) | [![Szymon Marczak](https://github.com/szmarczak.png?size=100)](https://github.com/szmarczak)\n---|---\n[Sindre Sorhus](https://sindresorhus.com) | [Szymon Marczak](https://github.com/szmarczak)\n\n###### Former\n\n- [Vsevolod Strukchinsky](https://github.com/floatdrop)\n- [Alexander Tesfamichael](https://github.com/alextes)\n- [Brandon Smith](https://github.com/brandon93s)\n- [Luke Childs](https://github.com/lukechilds)\n- [Giovanni Minotti](https://github.com/Giotino)\n\n<a name=\"widely-used\"></a>\n## These amazing companies are using Got\n\n<table>\n<tbody>\n\t<tr>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"https://segment.com\">\n\t\t\t\t<img width=\"90\" valign=\"middle\" src=\"https://user-images.githubusercontent.com/697676/47693700-ddb62500-dbb7-11e8-8332-716a91010c2d.png\">\n\t\t\t</a>\n\t\t</td>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"https://antora.org\">\n\t\t\t\t<img width=\"100\" valign=\"middle\" src=\"https://user-images.githubusercontent.com/79351/47706840-d874cc80-dbef-11e8-87c6-5f0c60cbf5dc.png\">\n\t\t\t</a>\n\t\t</td>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"https://getvoip.com\">\n\t\t\t\t<img width=\"150\" valign=\"middle\" src=\"https://user-images.githubusercontent.com/10832620/47869404-429e9480-dddd-11e8-8a7a-ca43d7f06020.png\">\n\t\t\t</a>\n\t\t</td>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"https://github.com/exoframejs/exoframe\">\n\t\t\t\t<img width=\"150\" valign=\"middle\" src=\"https://user-images.githubusercontent.com/365944/47791460-11a95b80-dd1a-11e8-9070-e8f2a215e03a.png\">\n\t\t\t</a>\n\t\t</td>\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"http://karaokes.moe\">\n\t\t\t\t<img width=\"140\" valign=\"middle\" src=\"https://camo.githubusercontent.com/6860e5fa4684c14d8e1aa65df0aba4e6808ea1a9/687474703a2f2f6b6172616f6b65732e6d6f652f6173736574732f696d616765732f696e6465782e706e67\">\n\t\t\t</a>\n\t\t</td>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"https://github.com/renovatebot/renovate\">\n\t\t\t\t<img width=\"150\" valign=\"middle\" src=\"https://camo.githubusercontent.com/206d470ac709b9a702a97b0c08d6f389a086793d/68747470733a2f2f72656e6f76617465626f742e636f6d2f696d616765732f6c6f676f2e737667\">\n\t\t\t</a>\n\t\t</td>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"https://resist.bot\">\n\t\t\t\t<img width=\"150\" valign=\"middle\" src=\"https://user-images.githubusercontent.com/3322287/51992724-28736180-2473-11e9-9764-599cfda4b012.png\">\n\t\t\t</a>\n\t\t</td>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"https://www.naturalcycles.com\">\n\t\t\t\t<img width=\"150\" valign=\"middle\" src=\"https://user-images.githubusercontent.com/170270/92244143-d0a8a200-eec2-11ea-9fc0-1c07f90b2113.png\">\n\t\t\t</a>\n\t\t</td>\n\t</tr>\n\t<tr>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"https://microlink.io\">\n\t\t\t\t<img width=\"150\" valign=\"middle\" src=\"https://user-images.githubusercontent.com/36894700/91992974-1cc5dc00-ed35-11ea-9d04-f58b42ce6a5e.png\">\n\t\t\t</a>\n\t\t</td>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"https://radity.com\">\n\t\t\t\t<img width=\"150\" valign=\"middle\" src=\"https://user-images.githubusercontent.com/29518613/91814036-97fb9500-ec44-11ea-8c6c-d198cc23ca29.png\">\n\t\t\t</a>\n\t\t</td>\n\t\t<td align=\"center\">\n\t\t\t<a href=\"https://apify.com\">\n\t\t\t\t<img width=\"150\" valign=\"middle\" src=\"https://user-images.githubusercontent.com/23726914/128673143-958b5930-b677-40ef-8087-5698a0c29c45.png\">\n\t\t\t</a>\n\t\t</td>\n\t</tr>\n</tbody>\n</table>\n\n<!-- <br> -->\n\n<!-- *Creating an awesome product? Open an issue to get listed here.* -->\n\n<br>\n\n> Segment is a happy user of Got! Got powers the main backend API that our app talks to. It's used by our in-house RPC client that we use to communicate with all microservices.\n>\n> — <a href=\"https://github.com/vadimdemedes\">Vadim Demedes</a>\n\n> Antora, a static site generator for creating documentation sites, uses Got to download the UI bundle. In Antora, the UI bundle (aka theme) is maintained as a separate project. That project exports the UI as a zip file we call the UI bundle. The main site generator downloads that UI from a URL using Got and streams it to vinyl-zip to extract the files. Those files go on to be used to create the HTML pages and supporting assets.\n>\n> — <a href=\"https://github.com/mojavelinux\">Dan Allen</a>\n\n> GetVoIP is happily using Got in production. One of the unique capabilities of Got is the ability to handle Unix sockets which enables us to build a full control interfaces for our docker stack.\n>\n> — <a href=\"https://github.com/danielkalen\">Daniel Kalen</a>\n\n> We're using Got inside of Exoframe to handle all the communication between CLI and server. Exoframe is a self-hosted tool that allows simple one-command deployments using Docker.\n>\n> — <a href=\"https://github.com/yamalight\">Tim Ermilov</a>\n\n> Karaoke Mugen uses Got to fetch content updates from its online server.\n>\n> — <a href=\"https://github.com/AxelTerizaki\">Axel Terizaki</a>\n\n> Renovate uses Got, gh-got and gl-got to send millions of queries per day to GitHub, GitLab, npmjs, PyPi, Packagist, Docker Hub, Terraform, CircleCI, and more.\n>\n> — <a href=\"https://github.com/rarkins\">Rhys Arkins</a>\n\n> Resistbot uses Got to communicate from the API frontend where all correspondence ingresses to the officials lookup database in back.\n>\n> — <a href=\"https://github.com/chris-erickson\">Chris Erickson</a>\n\n> Natural Cycles is using Got to communicate with all kinds of 3rd-party REST APIs (over 9000!).\n>\n> — <a href=\"https://github.com/kirillgroshkov\">Kirill Groshkov</a>\n\n> Microlink is a cloud browser as an API service that uses Got widely as the main HTTP client, serving ~22M requests a month, every time a network call needs to be performed.\n>\n> — <a href=\"https://github.com/Kikobeats\">Kiko Beats</a>\n\n> We’re using Got at Radity. Thanks for such an amazing work!\n>\n> — <a href=\"https://github.com/MirzayevFarid\">Mirzayev Farid</a>\n\n> Got has been a crucial component of Apify's scraping for years. We use it to extract data from billions of web pages every month, and we really appreciate the powerful API and extensibility, which allowed us to build our own specialized HTTP client on top of Got. The support has always been stellar too.\n>\n> — <a href=\"https://github.com/mnmkng\">Ondra Urban</a>\n\n## For enterprise\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of `got` and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-got?utm_source=npm-got&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n","funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","nonSemVerExperiments":{"nextGenConfig":true,"configurableModuleFormat":true},"extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/no-deprecated-api":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","readmeFilename":"readme.md","gitHead":"79547b35067f141cd6c1c528e5042fa4662fdf97","_nodeVersion":"16.6.2","_npmVersion":"7.20.3","_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_12.0.0-beta.4_1628752381357_0.948954694873527"},"_hasShrinkwrap":false},"12.0.0":{"_id":"got@12.0.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.0.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^2.0.0","@sindresorhus/tsconfig":"^2.0.0","@sinonjs/fake-timers":"^8.1.0","@types/benchmark":"^2.1.1","@types/express":"^4.17.13","@types/node":"^16.11.12","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.12","@types/request":"^2.48.7","@types/sinon":"^10.0.6","@types/sinonjs__fake-timers":"^8.1.1","@types/tough-cookie":"^4.0.1","ava":"^3.15.0","axios":"^0.24.0","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.19.0","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^4.0.1","delay":"^5.0.0","express":"^4.17.1","form-data":"^4.0.0","formdata-node":"^4.3.1","nock":"^13.2.1","node-fetch":"^3.1.0","np":"^7.6.0","nyc":"^15.1.0","p-event":"^5.0.1","pem":"^1.14.4","pify":"^5.0.0","readable-stream":"^3.6.0","request":"^2.88.2","sinon":"^12.0.1","slow-stream":"0.0.4","tempy":"^2.0.0","then-busboy":"^5.1.1","to-readable-stream":"^3.0.0","tough-cookie":"^4.0.0","ts-node":"^10.4.0","typescript":"4.5.3","xo":"^0.47.0"},"dependencies":{"@sindresorhus/is":"^4.2.0","@szmarczak/http-timer":"^5.0.1","@types/cacheable-request":"^6.0.2","@types/responselike":"^1.0.0","cacheable-lookup":"^6.0.4","cacheable-request":"^7.0.2","decompress-response":"^6.0.0","form-data-encoder":"1.7.1","get-stream":"^6.0.1","http2-wrapper":"^2.1.9","lowercase-keys":"^3.0.0","p-cancelable":"^3.0.0","responselike":"^2.0.0"},"engines":{"node":">=14.16"},"dist":{"shasum":"2ee3d5ff25eabc47dae975d376ddcee1d450bec1","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.0.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","nonSemVerExperiments":{"nextGenConfig":true,"configurableModuleFormat":true},"extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/no-deprecated-api":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"a405e7cb545ef56e8f3158ea9f14fffe8fb2da6e","_nodeVersion":"16.13.0","_npmVersion":"8.3.0","_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_12.0.0_1639146953190_0.9373716951155664"},"_hasShrinkwrap":false},"12.0.1":{"_id":"got@12.0.1","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.0.1","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^2.0.0","@sindresorhus/tsconfig":"^2.0.0","@sinonjs/fake-timers":"^8.1.0","@types/benchmark":"^2.1.1","@types/express":"^4.17.13","@types/node":"^16.11.12","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.12","@types/request":"^2.48.7","@types/sinon":"^10.0.6","@types/sinonjs__fake-timers":"^8.1.1","@types/tough-cookie":"^4.0.1","ava":"^3.15.0","axios":"^0.24.0","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.19.0","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^4.0.1","delay":"^5.0.0","express":"^4.17.1","form-data":"^4.0.0","formdata-node":"^4.3.1","nock":"^13.2.1","node-fetch":"^3.1.0","np":"^7.6.0","nyc":"^15.1.0","p-event":"^5.0.1","pem":"^1.14.4","pify":"^5.0.0","readable-stream":"^3.6.0","request":"^2.88.2","sinon":"^12.0.1","slow-stream":"0.0.4","tempy":"^2.0.0","then-busboy":"^5.1.1","to-readable-stream":"^3.0.0","tough-cookie":"^4.0.0","ts-node":"^10.4.0","typescript":"4.5.3","xo":"^0.47.0"},"dependencies":{"@sindresorhus/is":"^4.2.0","@szmarczak/http-timer":"^5.0.1","@types/cacheable-request":"^6.0.2","@types/responselike":"^1.0.0","cacheable-lookup":"^6.0.4","cacheable-request":"^7.0.2","decompress-response":"^6.0.0","form-data-encoder":"1.7.1","get-stream":"^6.0.1","http2-wrapper":"^2.1.9","lowercase-keys":"^3.0.0","p-cancelable":"^3.0.0","responselike":"^2.0.0"},"engines":{"node":">=14.16"},"dist":{"shasum":"78747f1c5bc7069bbd739636ed8b70c7f2140a39","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.0.1.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","nonSemVerExperiments":{"nextGenConfig":true,"configurableModuleFormat":true},"extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/no-deprecated-api":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"693c4c725ffb378aa740590abbfc8e7af9eb4871","_nodeVersion":"14.17.5","_npmVersion":"8.1.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_12.0.1_1641740212466_0.695904366719936"},"_hasShrinkwrap":false},"12.0.2":{"_id":"got@12.0.2","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.0.2","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^2.0.0","@sindresorhus/tsconfig":"^2.0.0","@sinonjs/fake-timers":"^9.1.1","@types/benchmark":"^2.1.1","@types/express":"^4.17.13","@types/node":"^17.0.21","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.13","@types/request":"^2.48.8","@types/sinon":"^10.0.11","@types/sinonjs__fake-timers":"^8.1.1","@types/tough-cookie":"^4.0.1","ava":"^3.15.0","axios":"^0.26.1","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.19.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^4.0.1","delay":"^5.0.0","express":"^4.17.3","form-data":"^4.0.0","formdata-node":"^4.3.2","nock":"^13.2.4","node-fetch":"^3.2.3","np":"^7.6.0","nyc":"^15.1.0","p-event":"^5.0.1","pem":"^1.14.6","pify":"^5.0.0","readable-stream":"^3.6.0","request":"^2.88.2","sinon":"^13.0.1","slow-stream":"0.0.4","tempy":"^2.0.0","then-busboy":"^5.1.1","to-readable-stream":"^3.0.0","tough-cookie":"^4.0.0","ts-node":"^10.7.0","typescript":"4.6.2","xo":"^0.48.0"},"dependencies":{"@sindresorhus/is":"^4.6.0","@szmarczak/http-timer":"^5.0.1","@types/cacheable-request":"^6.0.2","@types/responselike":"^1.0.0","cacheable-lookup":"^6.0.4","cacheable-request":"^7.0.2","decompress-response":"^6.0.0","form-data-encoder":"1.7.1","get-stream":"^6.0.1","http2-wrapper":"^2.1.10","lowercase-keys":"^3.0.0","p-cancelable":"^3.0.0","responselike":"^2.0.0"},"engines":{"node":">=14.16"},"dist":{"shasum":"8ce4c3baa50bb18a0858d2539caa0fac19e109bf","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.0.2.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","nonSemVerExperiments":{"nextGenConfig":true,"configurableModuleFormat":true},"extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/no-deprecated-api":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"f582a091500702c88f80526a8d1fd6e040b1eee3","_nodeVersion":"16.14.0","_npmVersion":"8.3.2","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_12.0.2_1647413303134_0.10049315937927261"},"_hasShrinkwrap":false},"12.0.3":{"_id":"got@12.0.3","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.0.3","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^2.0.0","@sindresorhus/tsconfig":"^2.0.0","@sinonjs/fake-timers":"^9.1.1","@types/benchmark":"^2.1.1","@types/express":"^4.17.13","@types/node":"^17.0.21","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.13","@types/request":"^2.48.8","@types/sinon":"^10.0.11","@types/sinonjs__fake-timers":"^8.1.1","@types/tough-cookie":"^4.0.1","ava":"^3.15.0","axios":"^0.26.1","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.19.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^4.0.1","delay":"^5.0.0","express":"^4.17.3","form-data":"^4.0.0","formdata-node":"^4.3.2","nock":"^13.2.4","node-fetch":"^3.2.3","np":"^7.6.0","nyc":"^15.1.0","p-event":"^5.0.1","pem":"^1.14.6","pify":"^5.0.0","readable-stream":"^3.6.0","request":"^2.88.2","sinon":"^13.0.1","slow-stream":"0.0.4","tempy":"^2.0.0","then-busboy":"^5.1.1","to-readable-stream":"^3.0.0","tough-cookie":"^4.0.0","ts-node":"^10.7.0","typescript":"4.6.2","xo":"^0.48.0"},"dependencies":{"@sindresorhus/is":"^4.6.0","@szmarczak/http-timer":"^5.0.1","@types/cacheable-request":"^6.0.2","@types/responselike":"^1.0.0","cacheable-lookup":"^6.0.4","cacheable-request":"^7.0.2","decompress-response":"^6.0.0","form-data-encoder":"1.7.1","get-stream":"^6.0.1","http2-wrapper":"^2.1.10","lowercase-keys":"^3.0.0","p-cancelable":"^3.0.0","responselike":"^2.0.0"},"engines":{"node":">=14.16"},"dist":{"shasum":"c7314daab26d42039e624adbf98f6d442e5de749","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.0.3.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","nonSemVerExperiments":{"nextGenConfig":true,"configurableModuleFormat":true},"extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/no-deprecated-api":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"35f30802f252b986408c46d09e1edbaa9fb0a31b","_nodeVersion":"16.14.0","_npmVersion":"8.3.2","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_12.0.3_1648310136534_0.3146835811292821"},"_hasShrinkwrap":false},"12.0.4":{"_id":"got@12.0.4","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.0.4","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^2.0.0","@sindresorhus/tsconfig":"^2.0.0","@sinonjs/fake-timers":"^9.1.1","@types/benchmark":"^2.1.1","@types/express":"^4.17.13","@types/node":"^17.0.21","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.13","@types/request":"^2.48.8","@types/sinon":"^10.0.11","@types/sinonjs__fake-timers":"^8.1.1","@types/tough-cookie":"^4.0.1","ava":"^3.15.0","axios":"^0.26.1","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.19.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^4.0.1","delay":"^5.0.0","express":"^4.17.3","form-data":"^4.0.0","formdata-node":"^4.3.2","nock":"^13.2.4","node-fetch":"^3.2.3","np":"^7.6.0","nyc":"^15.1.0","p-event":"^5.0.1","pem":"^1.14.6","pify":"^5.0.0","readable-stream":"^3.6.0","request":"^2.88.2","sinon":"^13.0.1","slow-stream":"0.0.4","tempy":"^2.0.0","then-busboy":"^5.1.1","to-readable-stream":"^3.0.0","tough-cookie":"^4.0.0","ts-node":"^10.7.0","typescript":"4.6.2","xo":"^0.48.0"},"dependencies":{"@sindresorhus/is":"^4.6.0","@szmarczak/http-timer":"^5.0.1","@types/cacheable-request":"^6.0.2","@types/responselike":"^1.0.0","cacheable-lookup":"^6.0.4","cacheable-request":"^7.0.2","decompress-response":"^6.0.0","form-data-encoder":"1.7.1","get-stream":"^6.0.1","http2-wrapper":"^2.1.10","lowercase-keys":"^3.0.0","p-cancelable":"^3.0.0","responselike":"^2.0.0"},"engines":{"node":">=14.16"},"dist":{"shasum":"e3b6bf6992425f904076fd71aac7030da5122de8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.0.4.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","nonSemVerExperiments":{"nextGenConfig":true,"configurableModuleFormat":true},"extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/no-deprecated-api":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"c693422bcc40bb35d8f51fc6b4bf97cc71913896","_nodeVersion":"14.19.1","_npmVersion":"6.14.16","_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_12.0.4_1650831395062_0.580994266151825"},"_hasShrinkwrap":false},"12.1.0":{"_id":"got@12.1.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.1.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"repository":{"ShortcutSyntax":"sindresorhus/got"},"license":"MIT","scripts":{"test":"xo && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":null,"devDependencies":{"@hapi/bourne":"^2.0.0","@sindresorhus/tsconfig":"^2.0.0","@sinonjs/fake-timers":"^9.1.1","@types/benchmark":"^2.1.1","@types/express":"^4.17.13","@types/node":"^17.0.21","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.13","@types/request":"^2.48.8","@types/sinon":"^10.0.11","@types/sinonjs__fake-timers":"^8.1.1","@types/tough-cookie":"^4.0.1","ava":"^3.15.0","axios":"^0.26.1","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.19.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^4.0.1","delay":"^5.0.0","express":"^4.17.3","form-data":"^4.0.0","formdata-node":"^4.3.2","nock":"^13.2.4","node-fetch":"^3.2.3","np":"^7.6.0","nyc":"^15.1.0","p-event":"^5.0.1","pem":"^1.14.6","pify":"^5.0.0","readable-stream":"^3.6.0","request":"^2.88.2","sinon":"^13.0.1","slow-stream":"0.0.4","tempy":"^2.0.0","then-busboy":"^5.1.1","to-readable-stream":"^3.0.0","tough-cookie":"^4.0.0","ts-node":"^10.7.0","typescript":"4.6.2","xo":"^0.48.0"},"dependencies":{"@sindresorhus/is":"^4.6.0","@szmarczak/http-timer":"^5.0.1","@types/cacheable-request":"^6.0.2","@types/responselike":"^1.0.0","cacheable-lookup":"^6.0.4","cacheable-request":"^7.0.2","decompress-response":"^6.0.0","form-data-encoder":"1.7.1","get-stream":"^6.0.1","http2-wrapper":"^2.1.10","lowercase-keys":"^3.0.0","p-cancelable":"^3.0.0","responselike":"^2.0.0"},"engines":{"node":">=14.16"},"files":["dist/source"],"dist":{"shasum":"099f3815305c682be4fd6b0ee0726d8e4c6b0af4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.1.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"dist/source","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","nonSemVerExperiments":{"nextGenConfig":true,"configurableModuleFormat":true},"extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","node/no-deprecated-api":"off","node/prefer-global/url":"off","node/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js"},"12.2.0":{"_id":"got@12.2.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.2.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^3.0.0","@sindresorhus/tsconfig":"^2.0.0","@sinonjs/fake-timers":"^9.1.1","@types/benchmark":"^2.1.1","@types/express":"^4.17.13","@types/node":"^18.0.1","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.13","@types/request":"^2.48.8","@types/sinon":"^10.0.11","@types/sinonjs__fake-timers":"^8.1.1","@types/tough-cookie":"^4.0.1","ava":"^3.15.0","axios":"^0.27.2","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.19.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^4.0.1","delay":"^5.0.0","express":"^4.17.3","form-data":"^4.0.0","formdata-node":"^4.3.2","nock":"^13.2.4","node-fetch":"^3.2.3","np":"^7.6.0","nyc":"^15.1.0","p-event":"^5.0.1","pem":"^1.14.6","pify":"^6.0.0","readable-stream":"^4.0.0","request":"^2.88.2","sinon":"^14.0.0","slow-stream":"0.0.4","tempy":"^3.0.0","then-busboy":"^5.1.1","to-readable-stream":"^3.0.0","tough-cookie":"^4.0.0","ts-node":"^10.8.2","typescript":"^4.7.4","xo":"^0.50.0"},"dependencies":{"@sindresorhus/is":"^5.2.0","@szmarczak/http-timer":"^5.0.1","@types/cacheable-request":"^6.0.2","@types/responselike":"^1.0.0","cacheable-lookup":"^6.0.4","cacheable-request":"^7.0.2","decompress-response":"^6.0.0","form-data-encoder":"^2.0.1","get-stream":"^6.0.1","http2-wrapper":"^2.1.10","lowercase-keys":"^3.0.0","p-cancelable":"^3.0.0","responselike":"^2.0.0"},"engines":{"node":">=14.16"},"dist":{"shasum":"0b5de8cd48d0a16cd44789fd5fdd071ba3ee1de5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.2.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"./dist/source/index.d.ts","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","nonSemVerExperiments":{"nextGenConfig":true,"configurableModuleFormat":true},"extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","n/no-deprecated-api":"off","n/prefer-global/url":"off","n/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","@typescript-eslint/no-redundant-type-constituents":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"54e00f3b161b32e10f72e919eca0f90b22ac9f74","_nodeVersion":"14.19.3","_npmVersion":"8.3.2","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_12.2.0_1658676643373_0.25373728635469117"},"_hasShrinkwrap":false},"12.3.0":{"_id":"got@12.3.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.3.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^3.0.0","@sindresorhus/tsconfig":"^2.0.0","@sinonjs/fake-timers":"^9.1.1","@types/benchmark":"^2.1.1","@types/express":"^4.17.13","@types/node":"^18.0.1","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.13","@types/request":"^2.48.8","@types/sinon":"^10.0.11","@types/sinonjs__fake-timers":"^8.1.1","@types/tough-cookie":"^4.0.1","ava":"^3.15.0","axios":"^0.27.2","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.19.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^4.0.1","delay":"^5.0.0","express":"^4.17.3","form-data":"^4.0.0","formdata-node":"^4.3.2","nock":"^13.2.4","node-fetch":"^3.2.3","np":"^7.6.0","nyc":"^15.1.0","p-event":"^5.0.1","pem":"^1.14.6","pify":"^6.0.0","readable-stream":"^4.0.0","request":"^2.88.2","sinon":"^14.0.0","slow-stream":"0.0.4","tempy":"^3.0.0","then-busboy":"^5.1.1","to-readable-stream":"^3.0.0","tough-cookie":"^4.0.0","ts-node":"^10.8.2","typescript":"^4.7.4","xo":"^0.50.0"},"dependencies":{"@sindresorhus/is":"^5.2.0","@szmarczak/http-timer":"^5.0.1","@types/cacheable-request":"^6.0.2","@types/responselike":"^1.0.0","cacheable-lookup":"^6.0.4","cacheable-request":"^7.0.2","decompress-response":"^6.0.0","form-data-encoder":"^2.0.1","get-stream":"^6.0.1","http2-wrapper":"^2.1.10","lowercase-keys":"^3.0.0","p-cancelable":"^3.0.0","responselike":"^2.0.0"},"engines":{"node":">=14.16"},"dist":{"shasum":"744625bcb072e7b1fd41a706e0af2bd1f73a2c64","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.3.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"./dist/source/index.d.ts","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","nonSemVerExperiments":{"nextGenConfig":true,"configurableModuleFormat":true},"extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","n/no-deprecated-api":"off","n/prefer-global/url":"off","n/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","@typescript-eslint/no-redundant-type-constituents":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"e032b60ff3285403b8f9627dcdd32aae39867d7a","_nodeVersion":"12.22.1","_npmVersion":"8.3.2","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_12.3.0_1659003775284_0.34192664562462993"},"_hasShrinkwrap":false},"12.3.1":{"_id":"got@12.3.1","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.3.1","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^3.0.0","@sindresorhus/tsconfig":"^2.0.0","@sinonjs/fake-timers":"^9.1.1","@types/benchmark":"^2.1.1","@types/express":"^4.17.13","@types/node":"^18.0.1","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.13","@types/request":"^2.48.8","@types/sinon":"^10.0.11","@types/sinonjs__fake-timers":"^8.1.1","@types/tough-cookie":"^4.0.1","ava":"^3.15.0","axios":"^0.27.2","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.19.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^4.0.1","delay":"^5.0.0","express":"^4.17.3","form-data":"^4.0.0","formdata-node":"^4.3.2","nock":"^13.2.4","node-fetch":"^3.2.3","np":"^7.6.0","nyc":"^15.1.0","p-event":"^5.0.1","pem":"^1.14.6","pify":"^6.0.0","readable-stream":"^4.0.0","request":"^2.88.2","sinon":"^14.0.0","slow-stream":"0.0.4","tempy":"^3.0.0","then-busboy":"^5.1.1","to-readable-stream":"^3.0.0","tough-cookie":"^4.0.0","ts-node":"^10.8.2","typescript":"^4.7.4","xo":"^0.50.0"},"dependencies":{"@sindresorhus/is":"^5.2.0","@szmarczak/http-timer":"^5.0.1","@types/cacheable-request":"^6.0.2","@types/responselike":"^1.0.0","cacheable-lookup":"^6.0.4","cacheable-request":"^7.0.2","decompress-response":"^6.0.0","form-data-encoder":"^2.0.1","get-stream":"^6.0.1","http2-wrapper":"^2.1.10","lowercase-keys":"^3.0.0","p-cancelable":"^3.0.0","responselike":"^2.0.0"},"engines":{"node":">=14.16"},"dist":{"shasum":"79d6ebc0cb8358c424165698ddb828be56e74684","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.3.1.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"./dist/source/index.d.ts","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","nonSemVerExperiments":{"nextGenConfig":true,"configurableModuleFormat":true},"extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","n/no-deprecated-api":"off","n/prefer-global/url":"off","n/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","@typescript-eslint/no-redundant-type-constituents":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"0947389926700036f9fc4a80e05ddfefcdd3680a","_nodeVersion":"18.7.0","_npmVersion":"8.3.2","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_12.3.1_1659784637478_0.5417389872607827"},"_hasShrinkwrap":false},"12.4.0":{"_id":"got@12.4.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.4.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^3.0.0","@sindresorhus/tsconfig":"^2.0.0","@sinonjs/fake-timers":"^9.1.1","@types/benchmark":"^2.1.2","@types/express":"^4.17.13","@types/node":"^18.7.13","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.13","@types/request":"^2.48.8","@types/sinon":"^10.0.11","@types/sinonjs__fake-timers":"^8.1.1","@types/tough-cookie":"^4.0.1","ava":"^3.15.0","axios":"^0.27.2","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.19.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^5.0.0","delay":"^5.0.0","express":"^4.17.3","form-data":"^4.0.0","formdata-node":"^4.3.2","nock":"^13.2.4","node-fetch":"^3.2.3","np":"^7.6.0","nyc":"^15.1.0","p-event":"^5.0.1","pem":"^1.14.6","pify":"^6.0.0","readable-stream":"^4.0.0","request":"^2.88.2","sinon":"^14.0.0","slow-stream":"0.0.4","tempy":"^3.0.0","then-busboy":"^5.1.1","to-readable-stream":"^3.0.0","tough-cookie":"4.0.0","ts-node":"^10.8.2","typescript":"~4.8.2","xo":"^0.52.2"},"dependencies":{"@sindresorhus/is":"^5.2.0","@szmarczak/http-timer":"^5.0.1","@types/cacheable-request":"^6.0.2","cacheable-lookup":"^6.0.4","cacheable-request":"^7.0.2","decompress-response":"^6.0.0","form-data-encoder":"^2.1.0","get-stream":"^6.0.1","http2-wrapper":"^2.1.10","lowercase-keys":"^3.0.0","p-cancelable":"^3.0.0","responselike":"^3.0.0"},"engines":{"node":">=14.16"},"dist":{"shasum":"abb75f2e56076a39e6e5a854ca6f35b24031a831","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.4.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"./dist/source/index.d.ts","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","nonSemVerExperiments":{"nextGenConfig":true,"configurableModuleFormat":true},"extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","n/no-deprecated-api":"off","n/prefer-global/url":"off","n/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","@typescript-eslint/no-redundant-type-constituents":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"231f55d6de3be5d580cd7fcbc4cb28ff2125cade","_nodeVersion":"14.19.3","_npmVersion":"8.3.2","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_12.4.0_1662137241394_0.550847952750845"},"_hasShrinkwrap":false},"12.4.1":{"_id":"got@12.4.1","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.4.1","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^3.0.0","@sindresorhus/tsconfig":"^2.0.0","@sinonjs/fake-timers":"^9.1.1","@types/benchmark":"^2.1.2","@types/express":"^4.17.13","@types/node":"^18.7.13","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.13","@types/request":"^2.48.8","@types/sinon":"^10.0.11","@types/sinonjs__fake-timers":"^8.1.1","@types/tough-cookie":"^4.0.1","ava":"^3.15.0","axios":"^0.27.2","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.19.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^5.0.0","delay":"^5.0.0","express":"^4.17.3","form-data":"^4.0.0","formdata-node":"^4.3.2","nock":"^13.2.4","node-fetch":"^3.2.3","np":"^7.6.0","nyc":"^15.1.0","p-event":"^5.0.1","pem":"^1.14.6","pify":"^6.0.0","readable-stream":"^4.0.0","request":"^2.88.2","sinon":"^14.0.0","slow-stream":"0.0.4","tempy":"^3.0.0","then-busboy":"^5.1.1","to-readable-stream":"^3.0.0","tough-cookie":"4.0.0","ts-node":"^10.8.2","typescript":"~4.8.2","xo":"^0.52.2"},"dependencies":{"@sindresorhus/is":"^5.2.0","@szmarczak/http-timer":"^5.0.1","@types/cacheable-request":"^6.0.2","cacheable-lookup":"^6.0.4","cacheable-request":"^7.0.2","decompress-response":"^6.0.0","form-data-encoder":"^2.1.0","get-stream":"^6.0.1","http2-wrapper":"^2.1.10","lowercase-keys":"^3.0.0","p-cancelable":"^3.0.0","responselike":"^3.0.0"},"engines":{"node":">=14.16"},"dist":{"shasum":"8598311b42591dfd2ed3ca4cdb9a591e2769a0bd","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.4.1.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"./dist/source/index.d.ts","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","nonSemVerExperiments":{"nextGenConfig":true,"configurableModuleFormat":true},"extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","n/no-deprecated-api":"off","n/prefer-global/url":"off","n/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","@typescript-eslint/no-redundant-type-constituents":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"8180a5377a5a80a2bbbeca3cb420e59cd6c47dde","_nodeVersion":"18.6.0","_npmVersion":"8.13.2","_npmUser":{"name":"szmarczak","email":"sz.marczak@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_12.4.1_1662142546870_0.008221693730710244"},"_hasShrinkwrap":false},"12.5.0":{"_id":"got@12.5.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.5.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^3.0.0","@sindresorhus/tsconfig":"^3.0.1","@sinonjs/fake-timers":"^9.1.1","@types/benchmark":"^2.1.2","@types/express":"^4.17.13","@types/node":"^18.7.13","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.13","@types/request":"^2.48.8","@types/sinon":"^10.0.11","@types/sinonjs__fake-timers":"^8.1.1","@types/tough-cookie":"^4.0.1","ava":"^4.3.3","axios":"^0.27.2","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.19.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^5.0.0","delay":"^5.0.0","express":"^4.17.3","form-data":"^4.0.0","formdata-node":"^5.0.0","nock":"^13.2.4","node-fetch":"^3.2.3","np":"^7.6.0","nyc":"^15.1.0","p-event":"^5.0.1","pem":"^1.14.6","pify":"^6.0.0","readable-stream":"^4.0.0","request":"^2.88.2","sinon":"^14.0.0","slow-stream":"0.0.4","tempy":"^3.0.0","then-busboy":"^5.2.1","to-readable-stream":"^3.0.0","tough-cookie":"4.0.0","ts-node":"^10.8.2","type-fest":"^2.19.0","typescript":"~4.8.2","xo":"^0.52.2"},"dependencies":{"@sindresorhus/is":"^5.2.0","@szmarczak/http-timer":"^5.0.1","cacheable-lookup":"^6.0.4","cacheable-request":"^10.1.2","decompress-response":"^6.0.0","form-data-encoder":"^2.1.2","get-stream":"^6.0.1","http2-wrapper":"^2.1.10","lowercase-keys":"^3.0.0","p-cancelable":"^3.0.0","responselike":"^3.0.0"},"engines":{"node":">=14.16"},"dist":{"shasum":"b31c556aa25a14ea06f173da888860984f323d3b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.5.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"./dist/source/index.d.ts","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","n/no-deprecated-api":"off","n/prefer-global/url":"off","n/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","@typescript-eslint/no-redundant-type-constituents":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"73501b63fed981f7958e6f732d7c13791c050126","_nodeVersion":"16.15.0","_npmVersion":"8.3.2","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_12.5.0_1663562692222_0.06973096847524074"},"_hasShrinkwrap":false},"12.5.1":{"_id":"got@12.5.1","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.5.1","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^3.0.0","@sindresorhus/tsconfig":"^3.0.1","@sinonjs/fake-timers":"^9.1.1","@types/benchmark":"^2.1.2","@types/express":"^4.17.13","@types/node":"^18.7.23","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.13","@types/request":"^2.48.8","@types/sinon":"^10.0.11","@types/sinonjs__fake-timers":"^8.1.1","@types/tough-cookie":"^4.0.1","ava":"^4.3.3","axios":"^0.27.2","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.19.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^5.0.0","delay":"^5.0.0","express":"^4.17.3","form-data":"^4.0.0","formdata-node":"^5.0.0","nock":"^13.2.4","node-fetch":"^3.2.3","np":"^7.6.0","nyc":"^15.1.0","p-event":"^5.0.1","pem":"^1.14.6","pify":"^6.0.0","readable-stream":"^4.2.0","request":"^2.88.2","sinon":"^14.0.0","slow-stream":"0.0.4","tempy":"^3.0.0","then-busboy":"^5.2.1","to-readable-stream":"^3.0.0","tough-cookie":"4.0.0","ts-node":"^10.8.2","type-fest":"^3.0.0","typescript":"~4.8.2","xo":"^0.52.2"},"dependencies":{"@sindresorhus/is":"^5.2.0","@szmarczak/http-timer":"^5.0.1","cacheable-lookup":"^7.0.0","cacheable-request":"^10.2.1","decompress-response":"^6.0.0","form-data-encoder":"^2.1.2","get-stream":"^6.0.1","http2-wrapper":"^2.1.10","lowercase-keys":"^3.0.0","p-cancelable":"^3.0.0","responselike":"^3.0.0"},"engines":{"node":">=14.16"},"dist":{"shasum":"0796191c61478273f4cdbeb19d358a75a54a008d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.5.1.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"./dist/source/index.d.ts","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","n/no-deprecated-api":"off","n/prefer-global/url":"off","n/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","@typescript-eslint/no-redundant-type-constituents":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"a4482a54eb67bce79552f9f1ea0a3dcef7585991","_nodeVersion":"14.19.3","_npmVersion":"8.3.2","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_12.5.1_1664263153270_0.00439790451726374"},"_hasShrinkwrap":false},"12.5.2":{"_id":"got@12.5.2","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.5.2","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^3.0.0","@sindresorhus/tsconfig":"^3.0.1","@sinonjs/fake-timers":"^9.1.1","@types/benchmark":"^2.1.2","@types/express":"^4.17.13","@types/node":"^18.7.23","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.13","@types/request":"^2.48.8","@types/sinon":"^10.0.11","@types/sinonjs__fake-timers":"^8.1.1","@types/tough-cookie":"^4.0.1","ava":"^4.3.3","axios":"^0.27.2","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.19.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^5.0.0","delay":"^5.0.0","express":"^4.17.3","form-data":"^4.0.0","formdata-node":"^5.0.0","nock":"^13.2.4","node-fetch":"^3.2.3","np":"^7.6.0","nyc":"^15.1.0","p-event":"^5.0.1","pem":"^1.14.6","pify":"^6.0.0","readable-stream":"^4.2.0","request":"^2.88.2","sinon":"^14.0.0","slow-stream":"0.0.4","tempy":"^3.0.0","then-busboy":"^5.2.1","to-readable-stream":"^3.0.0","tough-cookie":"4.0.0","ts-node":"^10.8.2","type-fest":"^3.0.0","typescript":"~4.8.2","xo":"^0.52.2"},"dependencies":{"@sindresorhus/is":"^5.2.0","@szmarczak/http-timer":"^5.0.1","cacheable-lookup":"^7.0.0","cacheable-request":"^10.2.1","decompress-response":"^6.0.0","form-data-encoder":"^2.1.2","get-stream":"^6.0.1","http2-wrapper":"^2.1.10","lowercase-keys":"^3.0.0","p-cancelable":"^3.0.0","responselike":"^3.0.0"},"engines":{"node":">=14.16"},"dist":{"shasum":"2c1b390918961cf50e61cb02d2085ba203d0df45","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.5.2.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"./dist/source/index.d.ts","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","n/no-deprecated-api":"off","n/prefer-global/url":"off","n/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","@typescript-eslint/no-redundant-type-constituents":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"5f278d74125608b7abe75941cb6a71e21e0fb892","_nodeVersion":"16.15.0","_npmVersion":"8.3.2","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_12.5.2_1665546225805_0.09819918752338164"},"_hasShrinkwrap":false},"12.5.3":{"_id":"got@12.5.3","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.5.3","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"repository":{"ShortcutSyntax":"sindresorhus/got"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":null,"devDependencies":{"@hapi/bourne":"^3.0.0","@sindresorhus/tsconfig":"^3.0.1","@sinonjs/fake-timers":"^9.1.1","@types/benchmark":"^2.1.2","@types/express":"^4.17.13","@types/node":"^18.7.23","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.13","@types/request":"^2.48.8","@types/sinon":"^10.0.11","@types/sinonjs__fake-timers":"^8.1.1","@types/tough-cookie":"^4.0.1","ava":"^4.3.3","axios":"^0.27.2","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.19.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^5.0.0","delay":"^5.0.0","express":"^4.17.3","form-data":"^4.0.0","formdata-node":"^5.0.0","nock":"^13.2.4","node-fetch":"^3.2.3","np":"^7.6.0","nyc":"^15.1.0","p-event":"^5.0.1","pem":"^1.14.6","pify":"^6.0.0","readable-stream":"^4.2.0","request":"^2.88.2","sinon":"^14.0.0","slow-stream":"0.0.4","tempy":"^3.0.0","then-busboy":"^5.2.1","to-readable-stream":"^3.0.0","tough-cookie":"4.0.0","ts-node":"^10.8.2","type-fest":"^3.0.0","typescript":"~4.8.2","xo":"^0.52.2"},"dependencies":{"@sindresorhus/is":"^5.2.0","@szmarczak/http-timer":"^5.0.1","cacheable-lookup":"^7.0.0","cacheable-request":"^10.2.1","decompress-response":"^6.0.0","form-data-encoder":"^2.1.2","get-stream":"^6.0.1","http2-wrapper":"^2.1.10","lowercase-keys":"^3.0.0","p-cancelable":"^3.0.0","responselike":"^3.0.0"},"engines":{"node":">=14.16"},"files":["dist/source"],"dist":{"shasum":"82bdca2dd61258a02e24d668ea6e7abb70ac3598","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.5.3.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"./dist/source/index.d.ts","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","n/no-deprecated-api":"off","n/prefer-global/url":"off","n/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","@typescript-eslint/no-redundant-type-constituents":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js"},"12.6.0":{"_id":"got@12.6.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.6.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"repository":{"ShortcutSyntax":"sindresorhus/got"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":null,"devDependencies":{"@hapi/bourne":"^3.0.0","@sindresorhus/tsconfig":"^3.0.1","@sinonjs/fake-timers":"^10.0.2","@types/benchmark":"^2.1.2","@types/express":"^4.17.17","@types/node":"^18.14.5","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.13","@types/request":"^2.48.8","@types/sinon":"^10.0.11","@types/sinonjs__fake-timers":"^8.1.1","@types/tough-cookie":"^4.0.1","ava":"^5.2.0","axios":"^0.27.2","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.20.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^5.0.0","delay":"^5.0.0","express":"^4.17.3","form-data":"^4.0.0","formdata-node":"^5.0.0","nock":"^13.3.0","node-fetch":"^3.2.3","np":"^7.6.0","nyc":"^15.1.0","p-event":"^5.0.1","pem":"^1.14.6","pify":"^6.0.0","readable-stream":"^4.2.0","request":"^2.88.2","sinon":"^15.0.1","slow-stream":"0.0.4","tempy":"^3.0.0","then-busboy":"^5.2.1","tough-cookie":"4.1.2","ts-node":"^10.8.2","type-fest":"^3.6.1","typescript":"~4.9.5","xo":"^0.53.1"},"dependencies":{"@sindresorhus/is":"^5.2.0","@szmarczak/http-timer":"^5.0.1","cacheable-lookup":"^7.0.0","cacheable-request":"^10.2.8","decompress-response":"^6.0.0","form-data-encoder":"^2.1.2","get-stream":"^6.0.1","http2-wrapper":"^2.1.10","lowercase-keys":"^3.0.0","p-cancelable":"^3.0.0","responselike":"^3.0.0"},"engines":{"node":">=14.16"},"files":["dist/source"],"dist":{"shasum":"8d382ee5de4432c086e83c133efdd474484f6ac7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.6.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"./dist/source/index.d.ts","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","n/no-deprecated-api":"off","n/prefer-global/url":"off","n/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","@typescript-eslint/no-redundant-type-constituents":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js"},"12.6.1":{"_id":"got@12.6.1","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"12.6.1","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"repository":{"ShortcutSyntax":"sindresorhus/got"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":null,"devDependencies":{"@hapi/bourne":"^3.0.0","@sindresorhus/tsconfig":"^3.0.1","@sinonjs/fake-timers":"^10.0.2","@types/benchmark":"^2.1.2","@types/express":"^4.17.17","@types/node":"^18.14.5","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.13","@types/request":"^2.48.8","@types/sinon":"^10.0.11","@types/sinonjs__fake-timers":"^8.1.1","@types/tough-cookie":"^4.0.1","ava":"^5.2.0","axios":"^0.27.2","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.20.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^5.0.0","delay":"^5.0.0","express":"^4.17.3","form-data":"^4.0.0","formdata-node":"^5.0.0","nock":"^13.3.0","node-fetch":"^3.2.3","np":"^7.6.0","nyc":"^15.1.0","p-event":"^5.0.1","pem":"^1.14.6","pify":"^6.0.0","readable-stream":"^4.2.0","request":"^2.88.2","sinon":"^15.0.1","slow-stream":"0.0.4","tempy":"^3.0.0","then-busboy":"^5.2.1","tough-cookie":"4.1.2","ts-node":"^10.8.2","type-fest":"^3.6.1","typescript":"~4.9.5","xo":"^0.53.1"},"dependencies":{"@sindresorhus/is":"^5.2.0","@szmarczak/http-timer":"^5.0.1","cacheable-lookup":"^7.0.0","cacheable-request":"^10.2.8","decompress-response":"^6.0.0","form-data-encoder":"^2.1.2","get-stream":"^6.0.1","http2-wrapper":"^2.1.10","lowercase-keys":"^3.0.0","p-cancelable":"^3.0.0","responselike":"^3.0.0"},"engines":{"node":">=14.16"},"files":["dist/source"],"dist":{"shasum":"8869560d1383353204b5a9435f782df9c091f549","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-12.6.1.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","types":"./dist/source/index.d.ts","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","n/no-deprecated-api":"off","n/prefer-global/url":"off","n/prefer-global/url-search-params":"off","@typescript-eslint/no-implicit-any-catch":"off","unicorn/prefer-node-protocol":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","@typescript-eslint/no-redundant-type-constituents":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js"},"13.0.0":{"_id":"got@13.0.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"13.0.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^3.0.0","@sindresorhus/tsconfig":"^3.0.1","@sinonjs/fake-timers":"^10.0.2","@types/benchmark":"^2.1.2","@types/express":"^4.17.17","@types/node":"^18.14.5","@types/pem":"^1.9.6","@types/pify":"^5.0.1","@types/readable-stream":"^2.3.13","@types/request":"^2.48.8","@types/sinon":"^10.0.11","@types/sinonjs__fake-timers":"^8.1.1","@types/tough-cookie":"^4.0.1","ava":"^5.2.0","axios":"^0.27.2","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.20.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^5.0.0","delay":"^5.0.0","express":"^4.17.3","form-data":"^4.0.0","formdata-node":"^5.0.0","nock":"^13.3.0","node-fetch":"^3.2.3","np":"^7.6.0","nyc":"^15.1.0","p-event":"^5.0.1","pem":"^1.14.6","pify":"^6.0.0","readable-stream":"^4.2.0","request":"^2.88.2","sinon":"^15.0.1","slow-stream":"0.0.4","tempy":"^3.0.0","then-busboy":"^5.2.1","tough-cookie":"4.1.2","ts-node":"^10.8.2","type-fest":"^3.6.1","typescript":"^5.0.4","xo":"^0.54.2"},"dependencies":{"@sindresorhus/is":"^5.2.0","@szmarczak/http-timer":"^5.0.1","cacheable-lookup":"^7.0.0","cacheable-request":"^10.2.8","decompress-response":"^6.0.0","form-data-encoder":"^2.1.2","get-stream":"^6.0.1","http2-wrapper":"^2.1.10","lowercase-keys":"^3.0.0","p-cancelable":"^3.0.0","responselike":"^3.0.0"},"engines":{"node":">=16"},"dist":{"shasum":"a2402862cef27a5d0d1b07c0fb25d12b58175422","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-13.0.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","extensions":{"ts":"module"},"nodeArguments":["--loader=ts-node/esm"]},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","n/no-deprecated-api":"off","@typescript-eslint/no-implicit-any-catch":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","@typescript-eslint/no-redundant-type-constituents":"off","@typescript-eslint/no-unsafe-argument":"off","@typescript-eslint/promise-function-async":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"b1d61c173a681755ac23afb2f155f08801c1e7e4","_nodeVersion":"16.20.0","_npmVersion":"9.2.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_13.0.0_1685201076557_0.12217860632778987"},"_hasShrinkwrap":false},"14.0.0":{"_id":"got@14.0.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"14.0.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && NODE_OPTIONS='--import=tsx/esm' ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^3.0.0","@sindresorhus/tsconfig":"^5.0.0","@sinonjs/fake-timers":"^11.2.2","@types/benchmark":"^2.1.5","@types/express":"^4.17.21","@types/node":"^20.10.0","@types/pem":"^1.14.4","@types/readable-stream":"^4.0.9","@types/request":"^2.48.12","@types/sinon":"^17.0.2","@types/sinonjs__fake-timers":"^8.1.5","ava":"^5.3.1","axios":"^1.6.2","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.20.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^5.1.0","delay":"^6.0.0","express":"^4.18.2","form-data":"^4.0.0","formdata-node":"^6.0.3","nock":"^13.4.0","node-fetch":"^3.3.2","np":"^9.0.0","nyc":"^15.1.0","p-event":"^6.0.0","pem":"^1.14.8","pify":"^6.1.0","readable-stream":"^4.4.2","request":"^2.88.2","sinon":"^17.0.1","slow-stream":"0.0.4","tempy":"^3.1.0","then-busboy":"^5.2.1","tough-cookie":"^4.1.3","tsx":"^4.6.0","type-fest":"^4.8.2","typescript":"^5.3.2","xo":"^0.56.0"},"dependencies":{"@sindresorhus/is":"^6.1.0","@szmarczak/http-timer":"^5.0.1","cacheable-lookup":"^7.0.0","cacheable-request":"^10.2.14","decompress-response":"^6.0.0","form-data-encoder":"^4.0.2","get-stream":"^8.0.1","http2-wrapper":"^2.2.1","lowercase-keys":"^3.0.0","p-cancelable":"^4.0.1","responselike":"^3.0.0"},"engines":{"node":">=20"},"dist":{"shasum":"c95023942e4149cea46701adc7ed591eb9104d37","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-14.0.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","extensions":{"ts":"module"},"workerThreads":false},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","n/no-deprecated-api":"off","@typescript-eslint/no-implicit-any-catch":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","@typescript-eslint/no-redundant-type-constituents":"off","@typescript-eslint/no-unsafe-argument":"off","@typescript-eslint/promise-function-async":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off","unicorn/prefer-event-target":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"3822412385506a1efef6580d270eae14086b9b43","_nodeVersion":"20.9.0","_npmVersion":"9.2.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_14.0.0_1701289210485_0.8148122940233309"},"_hasShrinkwrap":false},"14.1.0":{"_id":"got@14.1.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"14.1.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && NODE_OPTIONS='--import=tsx/esm' ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^3.0.0","@sindresorhus/tsconfig":"^5.0.0","@sinonjs/fake-timers":"^11.2.2","@types/benchmark":"^2.1.5","@types/express":"^4.17.21","@types/node":"^20.10.0","@types/pem":"^1.14.4","@types/readable-stream":"^4.0.9","@types/request":"^2.48.12","@types/sinon":"^17.0.2","@types/sinonjs__fake-timers":"^8.1.5","ava":"^5.3.1","axios":"^1.6.2","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.20.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^5.1.0","delay":"^6.0.0","express":"^4.18.2","form-data":"^4.0.0","formdata-node":"^6.0.3","nock":"^13.4.0","node-fetch":"^3.3.2","np":"^9.0.0","nyc":"^15.1.0","p-event":"^6.0.0","pem":"^1.14.8","pify":"^6.1.0","readable-stream":"^4.4.2","request":"^2.88.2","sinon":"^17.0.1","slow-stream":"0.0.4","tempy":"^3.1.0","then-busboy":"^5.2.1","tough-cookie":"^4.1.3","tsx":"^4.6.0","type-fest":"^4.8.2","typescript":"^5.3.2","xo":"^0.56.0"},"dependencies":{"@sindresorhus/is":"^6.1.0","@szmarczak/http-timer":"^5.0.1","cacheable-lookup":"^7.0.0","cacheable-request":"^10.2.14","decompress-response":"^6.0.0","form-data-encoder":"^4.0.2","get-stream":"^8.0.1","http2-wrapper":"^2.2.1","lowercase-keys":"^3.0.0","p-cancelable":"^4.0.1","responselike":"^3.0.0"},"engines":{"node":">=20"},"dist":{"shasum":"426718b9d2e539efa46c7b413e7659b40d38bb24","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-14.1.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","extensions":{"ts":"module"},"workerThreads":false},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","n/no-deprecated-api":"off","@typescript-eslint/no-implicit-any-catch":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","@typescript-eslint/no-redundant-type-constituents":"off","@typescript-eslint/no-unsafe-argument":"off","@typescript-eslint/promise-function-async":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off","unicorn/prefer-event-target":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"f10e151c87b02ad1ed60d75becd076d17f16f099","_nodeVersion":"20.11.0","_npmVersion":"9.2.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_14.1.0_1706534234259_0.28710337563379706"},"_hasShrinkwrap":false},"14.2.0":{"_id":"got@14.2.0","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"14.2.0","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && NODE_OPTIONS='--import=tsx/esm' ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^3.0.0","@sindresorhus/tsconfig":"^5.0.0","@sinonjs/fake-timers":"^11.2.2","@types/benchmark":"^2.1.5","@types/express":"^4.17.21","@types/node":"^20.10.0","@types/pem":"^1.14.4","@types/readable-stream":"^4.0.9","@types/request":"^2.48.12","@types/sinon":"^17.0.2","@types/sinonjs__fake-timers":"^8.1.5","ava":"^5.3.1","axios":"^1.6.2","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.20.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^5.1.0","delay":"^6.0.0","express":"^4.18.2","form-data":"^4.0.0","formdata-node":"^6.0.3","nock":"^13.4.0","node-fetch":"^3.3.2","np":"^9.0.0","nyc":"^15.1.0","p-event":"^6.0.0","pem":"^1.14.8","pify":"^6.1.0","readable-stream":"^4.4.2","request":"^2.88.2","sinon":"^17.0.1","slow-stream":"0.0.4","tempy":"^3.1.0","then-busboy":"^5.2.1","tough-cookie":"^4.1.3","tsx":"^4.6.0","type-fest":"^4.8.2","typescript":"^5.3.2","xo":"^0.56.0"},"dependencies":{"@sindresorhus/is":"^6.1.0","@szmarczak/http-timer":"^5.0.1","cacheable-lookup":"^7.0.0","cacheable-request":"^10.2.14","decompress-response":"^6.0.0","form-data-encoder":"^4.0.2","get-stream":"^8.0.1","http2-wrapper":"^2.2.1","lowercase-keys":"^3.0.0","p-cancelable":"^4.0.1","responselike":"^3.0.0"},"engines":{"node":">=20"},"dist":{"shasum":"59b453e379e81a6e9e6aa3b39ab3cbde47b1b150","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-14.2.0.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","extensions":{"ts":"module"},"workerThreads":false},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","n/no-deprecated-api":"off","@typescript-eslint/no-implicit-any-catch":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","@typescript-eslint/no-redundant-type-constituents":"off","@typescript-eslint/no-unsafe-argument":"off","@typescript-eslint/promise-function-async":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off","unicorn/prefer-event-target":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"897f3857a8af1baa440d5fbf3918be7bac6938bb","_nodeVersion":"20.11.0","_npmVersion":"9.2.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_14.2.0_1706959285403_0.9540962993313635"},"_hasShrinkwrap":false},"14.2.1":{"_id":"got@14.2.1","name":"got","description":"Human-friendly and powerful HTTP request library for Node.js","version":"14.2.1","keywords":["http","https","http2","get","got","url","uri","request","simple","curl","wget","fetch","net","network","gzip","brotli","requests","human-friendly","axios","superagent","node-fetch","ky"],"homepage":"https://github.com/sindresorhus/got#readme","repository":{"type":"git","url":"git+https://github.com/sindresorhus/got.git"},"bugs":{"url":"https://github.com/sindresorhus/got/issues"},"license":"MIT","scripts":{"test":"xo && tsc --noEmit && NODE_OPTIONS='--import=tsx/esm' ava","release":"np","build":"del-cli dist && tsc","prepare":"npm run build"},"directories":{},"devDependencies":{"@hapi/bourne":"^3.0.0","@sindresorhus/tsconfig":"^5.0.0","@sinonjs/fake-timers":"^11.2.2","@types/benchmark":"^2.1.5","@types/express":"^4.17.21","@types/node":"^20.10.0","@types/pem":"^1.14.4","@types/readable-stream":"^4.0.9","@types/request":"^2.48.12","@types/sinon":"^17.0.2","@types/sinonjs__fake-timers":"^8.1.5","ava":"^5.3.1","axios":"^1.6.2","benchmark":"^2.1.4","bluebird":"^3.7.2","body-parser":"^1.20.2","create-cert":"^1.0.6","create-test-server":"^3.0.1","del-cli":"^5.1.0","delay":"^6.0.0","express":"^4.18.2","form-data":"^4.0.0","formdata-node":"^6.0.3","nock":"^13.4.0","node-fetch":"^3.3.2","np":"^9.0.0","nyc":"^15.1.0","p-event":"^6.0.0","pem":"^1.14.8","pify":"^6.1.0","readable-stream":"^4.4.2","request":"^2.88.2","sinon":"^17.0.1","slow-stream":"0.0.4","tempy":"^3.1.0","then-busboy":"^5.2.1","tough-cookie":"^4.1.3","tsx":"^4.6.0","type-fest":"^4.8.2","typescript":"^5.3.2","xo":"^0.56.0"},"dependencies":{"@sindresorhus/is":"^6.1.0","@szmarczak/http-timer":"^5.0.1","cacheable-lookup":"^7.0.0","cacheable-request":"^10.2.14","decompress-response":"^6.0.0","form-data-encoder":"^4.0.2","get-stream":"^8.0.1","http2-wrapper":"^2.2.1","lowercase-keys":"^3.0.0","p-cancelable":"^4.0.1","responselike":"^3.0.0"},"engines":{"node":">=20"},"dist":{"shasum":"59513971a4f990d7c20f4830cf78145d58b3042d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/got/-/got-14.2.1.tgz"},"funding":"https://github.com/sindresorhus/got?sponsor=1","type":"module","sideEffects":false,"ava":{"files":["test/*"],"timeout":"1m","extensions":{"ts":"module"},"workerThreads":false},"nyc":{"reporter":["text","html","lcov"],"extension":[".ts"],"exclude":["**/test/**"]},"xo":{"ignores":["documentation/examples/*"],"rules":{"@typescript-eslint/no-empty-function":"off","n/no-deprecated-api":"off","@typescript-eslint/no-implicit-any-catch":"off","ava/assertion-arguments":"off","@typescript-eslint/no-unsafe-member-access":"off","@typescript-eslint/no-unsafe-return":"off","@typescript-eslint/no-unsafe-assignment":"off","@typescript-eslint/no-unsafe-call":"off","@typescript-eslint/await-thenable":"off","@typescript-eslint/no-redundant-type-constituents":"off","@typescript-eslint/no-unsafe-argument":"off","@typescript-eslint/promise-function-async":"off","no-lone-blocks":"off","unicorn/no-await-expression-member":"off","unicorn/prefer-event-target":"off"}},"runkitExampleFilename":"./documentation/examples/runkit-example.js","gitHead":"8da9912fc18ea12daa8c11755e85cd14e26bb8b3","_nodeVersion":"18.19.0","_npmVersion":"9.2.0","_npmUser":{"name":"sindresorhus","email":"sindresorhus@gmail.com"},"maintainers":[{"name":"sindresorhus","email":"sindresorhus@gmail.com"},{"name":"szmarczak","email":"sz.marczak@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/got_14.2.1_1709799897271_0.28201012041591955"},"_hasShrinkwrap":false}},"time":{"created":"2022-06-15T16:24:49Z","modified":"2024-03-07T11:47:39Z","0.1.0":"2022-06-15T16:24:49Z","0.1.1":"2022-06-15T16:24:49Z","0.2.0":"2022-06-15T16:24:49Z","0.3.0":"2022-06-15T16:24:49Z","1.0.0":"2022-06-15T16:24:49Z","1.0.1":"2022-06-15T16:24:49Z","1.1.0":"2022-06-15T16:24:49Z","1.2.0":"2022-06-15T16:24:49Z","1.2.1":"2022-06-15T16:24:49Z","1.2.2":"2022-06-15T16:24:49Z","2.0.0":"2022-06-15T16:24:49Z","2.1.0":"2022-06-15T16:24:49Z","2.2.0":"2022-06-15T16:24:49Z","2.3.0":"2022-06-15T16:24:49Z","2.3.1":"2022-06-15T16:24:49Z","2.3.2":"2022-06-15T16:24:49Z","2.4.0":"2022-06-15T16:24:49Z","2.5.0":"2022-06-15T16:24:49Z","2.6.0":"2022-06-15T16:24:49Z","2.7.0":"2022-06-15T16:24:49Z","2.7.1":"2022-06-15T16:24:49Z","2.7.2":"2022-06-15T16:24:49Z","2.8.0":"2022-06-15T16:24:49Z","2.8.1":"2022-06-15T16:24:49Z","2.9.0":"2022-06-15T16:24:49Z","2.9.1":"2022-06-15T16:24:49Z","2.9.2":"2022-06-15T16:24:49Z","3.0.0":"2022-06-15T16:24:49Z","3.1.0":"2022-06-15T16:24:49Z","3.2.0":"2022-06-15T16:24:49Z","3.3.0":"2022-06-15T16:24:49Z","3.3.1":"2022-06-15T16:24:49Z","4.0.0":"2022-06-15T16:24:49Z","4.1.0":"2022-06-15T16:24:49Z","4.1.1":"2022-06-15T16:24:49Z","4.2.0":"2022-06-15T16:24:49Z","5.0.0":"2022-06-15T16:24:49Z","5.1.0":"2022-06-15T16:24:49Z","5.2.0":"2022-06-15T16:24:49Z","5.2.1":"2022-06-15T16:24:49Z","5.3.0":"2022-06-15T16:24:49Z","5.3.1":"2022-06-15T16:24:49Z","5.3.2":"2022-06-15T16:24:49Z","5.4.0":"2022-06-15T16:24:49Z","5.4.1":"2022-06-15T16:24:49Z","5.4.2":"2022-06-15T16:24:49Z","5.5.0":"2022-06-15T16:24:49Z","5.5.1":"2022-06-15T16:24:49Z","5.6.0":"2022-06-15T16:24:49Z","5.7.0":"2022-06-15T16:24:49Z","5.7.1":"2022-06-15T16:24:49Z","6.0.0-rc1":"2022-06-15T16:24:49Z","6.0.0":"2022-06-15T16:24:49Z","6.0.1":"2022-06-15T16:24:49Z","6.0.2":"2022-06-15T16:24:49Z","6.1.0":"2022-06-15T16:24:49Z","6.1.1":"2022-06-15T16:24:49Z","6.1.2":"2022-06-15T16:24:49Z","6.2.0":"2022-06-15T16:24:49Z","6.3.0":"2022-06-15T16:24:49Z","6.5.0":"2022-06-15T16:24:49Z","6.6.0":"2022-06-15T16:24:49Z","6.6.1":"2022-06-15T16:24:49Z","6.6.2":"2022-06-15T16:24:49Z","6.6.3":"2022-06-15T16:24:49Z","6.7.0":"2022-06-15T16:24:49Z","6.7.1":"2022-06-15T16:34:41Z","7.0.0":"2022-06-15T16:24:49Z","7.1.0":"2022-06-15T16:24:49Z","8.0.0":"2022-06-15T16:24:49Z","8.0.1":"2022-06-15T16:24:49Z","8.0.2":"2022-06-15T16:24:49Z","8.0.3":"2022-06-15T16:24:49Z","8.1.0":"2022-06-15T16:24:49Z","8.2.0":"2022-06-15T16:24:49Z","8.3.0":"2022-06-15T16:24:49Z","8.3.1":"2022-06-15T16:24:49Z","8.3.2":"2022-11-22T19:35:45Z","9.0.0":"2022-06-15T16:24:49Z","9.1.0":"2022-06-15T16:24:49Z","9.2.0":"2022-06-15T16:24:49Z","9.2.1":"2022-06-15T16:24:49Z","9.2.2":"2022-06-15T16:24:49Z","9.3.0":"2022-06-15T16:24:49Z","9.3.1":"2022-06-15T16:24:49Z","9.3.2":"2022-06-15T16:24:49Z","9.4.0":"2022-06-15T16:24:49Z","9.5.0":"2022-06-15T16:24:49Z","9.5.1":"2022-06-15T16:24:49Z","9.6.0":"2022-06-28T23:22:33Z","10.0.0-alpha.1.1":"2022-06-15T16:24:49Z","10.0.0-alpha.2":"2022-06-15T16:24:49Z","10.0.0-alpha.2.1":"2022-06-15T16:24:49Z","10.0.0-alpha.2.2":"2022-06-15T16:24:49Z","10.0.0-alpha.3.1":"2022-06-15T16:24:49Z","10.0.0-alpha.3.2":"2022-06-15T16:24:49Z","10.0.0-beta.1":"2022-06-15T16:24:49Z","10.0.0-beta.2":"2022-06-15T16:24:49Z","10.0.0-beta.3":"2022-06-15T16:24:49Z","10.0.0":"2022-06-15T16:24:49Z","10.0.1":"2022-06-15T16:24:49Z","10.0.2":"2022-06-15T16:24:49Z","10.0.3":"2022-06-15T16:24:49Z","10.0.4":"2022-06-15T16:24:49Z","10.1.0":"2022-06-15T16:24:49Z","10.2.0":"2022-06-15T16:24:49Z","10.2.1":"2022-06-15T16:24:49Z","10.2.2":"2022-06-15T16:24:49Z","10.3.0":"2022-06-15T16:24:49Z","10.4.0":"2022-06-15T16:24:49Z","10.5.0":"2022-06-15T16:24:49Z","10.5.1":"2022-06-15T16:24:49Z","10.5.2":"2022-06-15T16:24:49Z","10.5.3":"2022-06-15T16:24:49Z","10.5.4":"2022-06-15T16:24:49Z","10.5.5":"2022-06-15T16:24:49Z","10.5.6":"2022-06-15T16:24:49Z","10.5.7":"2022-06-15T16:24:49Z","10.6.0":"2022-06-15T16:24:49Z","10.7.0":"2022-06-15T16:24:49Z","11.0.0-beta.1":"2022-06-15T16:24:49Z","11.0.0":"2022-06-15T16:24:49Z","11.0.1":"2022-06-15T16:24:49Z","11.0.2":"2022-06-15T16:24:49Z","11.0.3":"2022-06-15T16:24:49Z","11.1.0":"2022-06-15T16:24:49Z","11.1.1":"2022-06-15T16:24:49Z","11.1.2":"2022-06-15T16:24:49Z","11.1.3":"2022-06-15T16:24:49Z","11.1.4":"2022-06-15T16:24:49Z","11.2.0":"2022-06-15T16:24:49Z","11.3.0":"2022-06-15T16:24:49Z","11.4.0":"2022-06-15T16:24:49Z","11.5.0":"2022-06-15T16:24:49Z","11.5.1":"2022-06-15T16:24:49Z","11.5.2":"2022-06-15T16:24:49Z","11.6.0":"2022-06-15T16:24:49Z","11.6.1":"2022-06-15T16:24:49Z","11.6.2":"2022-06-15T16:24:49Z","11.7.0":"2022-06-15T16:24:49Z","11.8.0":"2022-06-15T16:24:49Z","11.8.1":"2022-06-15T16:24:49Z","11.8.2":"2022-07-15T17:00:17Z","11.8.3":"2022-06-15T16:24:49Z","11.8.5":"2022-06-28T23:22:23Z","11.8.6":"2023-01-11T04:50:17Z","12.0.0-beta.1":"2022-06-15T16:24:49Z","12.0.0-beta.2":"2022-06-15T16:24:49Z","12.0.0-beta.3":"2022-06-15T16:24:49Z","12.0.0-beta.4":"2022-06-15T16:24:49Z","12.0.0":"2022-06-15T16:24:49Z","12.0.1":"2022-06-15T16:24:49Z","12.0.2":"2022-06-15T16:24:49Z","12.0.3":"2022-06-15T16:24:49Z","12.0.4":"2022-06-15T16:24:49Z","12.1.0":"2023-08-21T21:53:42Z","12.2.0":"2022-07-24T17:40:28Z","12.3.0":"2022-07-28T11:43:38Z","12.3.1":"2022-08-06T11:40:43Z","12.4.0":"2022-09-02T17:41:56Z","12.4.1":"2022-09-02T20:42:17Z","12.5.0":"2022-09-19T05:45:47Z","12.5.1":"2022-09-27T08:43:18Z","12.5.2":"2022-10-12T05:41:24Z","12.5.3":"2023-01-20T22:45:50Z","12.6.0":"2023-03-21T16:47:31Z","12.6.1":"2023-08-28T18:25:34Z","13.0.0":"2023-05-27T18:04:32Z","14.0.0":"2023-11-29T23:41:19Z","14.1.0":"2024-01-29T17:50:21Z","14.2.0":"2024-02-03T14:50:11Z","14.2.1":"2024-03-07T11:47:39Z"}}