{"_id":"cosmiconfig","_rev":"422eb83c-8cca-4db2-8097-0151bb1d9b76","name":"cosmiconfig","dist-tags":{"latest":"9.0.0","next":"9.0.0-alpha.3"},"versions":{"0.1.0":{"_id":"cosmiconfig@0.1.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"0.1.0","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark"},"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"eslint .","test":"npm run lint && tape test"},"directories":{},"devDependencies":{"eslint":"1.9.0","sinon":"1.17.2","tape":"4.2.2"},"dependencies":{"graceful-fs":"^4.1.2","js-yaml":"^3.4.3","lodash":"^3.10.1","os-homedir":"^1.0.1","parse-json":"^2.2.0","pinkie-promise":"^1.0.0","require-from-string":"^1.1.0","resolve-from":"^1.0.1"},"files":["index.js"],"main":"index.js","dist":{"shasum":"bdfbb256f714ffb2b310d35623f133139a1b6dae","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-0.1.0.tgz"},"gitHead":"ea874b90ee989ab9855badc29d572d2a55944b7c","_from":".","_npmVersion":"3.3.10","_nodeVersion":"4.2.1","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"}]},"0.2.0":{"_id":"cosmiconfig@0.2.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"0.2.0","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark"},"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"eslint .","test":"npm run lint && tape test"},"directories":{},"devDependencies":{"eslint":"1.9.0","sinon":"1.17.2","tape":"4.2.2"},"dependencies":{"graceful-fs":"^4.1.2","js-yaml":"^3.4.3","lodash":"^3.10.1","os-homedir":"^1.0.1","parse-json":"^2.2.0","pinkie-promise":"^1.0.0","require-from-string":"^1.1.0"},"files":["index.js"],"main":"index.js","dist":{"shasum":"2fcad200e61230077fd1e3a6495d0da95edeef1a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-0.2.0.tgz"},"gitHead":"a087b9f0cb4973de60de85bdf19ed98cf62cfe04","_from":".","_npmVersion":"3.3.10","_nodeVersion":"4.2.1","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"}]},"0.3.0":{"_id":"cosmiconfig@0.3.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"0.3.0","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark"},"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"eslint .","test":"npm run lint && tape test"},"directories":{},"devDependencies":{"eslint":"1.9.0","sinon":"1.17.2","tape":"4.2.2"},"dependencies":{"graceful-fs":"^4.1.2","js-yaml":"^3.4.3","lodash":"^3.10.1","os-homedir":"^1.0.1","parse-json":"^2.2.0","pinkie-promise":"^1.0.0","require-from-string":"^1.1.0"},"main":"index.js","dist":{"shasum":"2c9dd2730b045817919c096071b2b61baf0d6b9e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-0.3.0.tgz"},"gitHead":"eb93fd3e83965bd9670cefd966a3b8b9d350fb4b","_from":".","_npmVersion":"3.3.10","_nodeVersion":"4.2.1","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"}]},"0.4.0":{"_id":"cosmiconfig@0.4.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"0.4.0","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark"},"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"eslint .","test":"npm run lint && tape test"},"directories":{},"devDependencies":{"eslint":"1.9.0","sinon":"1.17.2","tape":"4.2.2"},"dependencies":{"graceful-fs":"^4.1.2","js-yaml":"^3.4.3","lodash":"^3.10.1","minimist":"^1.2.0","os-homedir":"^1.0.1","parse-json":"^2.2.0","pinkie-promise":"^1.0.0","require-from-string":"^1.1.0"},"main":"index.js","dist":{"shasum":"386c7c6691df62315b843aeb0a9c83fca0accca6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-0.4.0.tgz"},"gitHead":"67e4e69a2b9634057c0d9f7e2c8e301454418eeb","_from":".","_npmVersion":"3.3.10","_nodeVersion":"4.2.1","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"}]},"0.4.1":{"_id":"cosmiconfig@0.4.1","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"0.4.1","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark"},"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"eslint .","test":"npm run lint && tape test"},"directories":{},"devDependencies":{"eslint":"1.9.0","sinon":"1.17.2","tape":"4.2.2"},"dependencies":{"graceful-fs":"^4.1.2","js-yaml":"^3.4.3","minimist":"^1.2.0","os-homedir":"^1.0.1","parse-json":"^2.2.0","pinkie-promise":"^1.0.0","require-from-string":"^1.1.0"},"main":"index.js","dist":{"shasum":"1a78efb42e8c4e9a1b4fa09ffaab717e6cef626a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-0.4.1.tgz"},"gitHead":"c837ff3e040a069e646ce03fe9fe6c8443d4ad3d","_from":".","_npmVersion":"3.3.10","_nodeVersion":"4.2.1","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"}]},"0.5.0":{"_id":"cosmiconfig@0.5.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"0.5.0","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark"},"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"eslint .","test":"npm run lint && tape test"},"directories":{},"devDependencies":{"eslint":"1.9.0","sinon":"1.17.2","tape":"4.2.2"},"dependencies":{"defaults":"^1.0.3","graceful-fs":"^4.1.2","js-yaml":"^3.4.3","minimist":"^1.2.0","os-homedir":"^1.0.1","parse-json":"^2.2.0","pinkie-promise":"^2.0.0","require-from-string":"^1.1.0"},"main":"index.js","dist":{"shasum":"9a6e8006c034e83c1b995846dcd12405c8ea6c07","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-0.5.0.tgz"},"gitHead":"1374fba1ce19967b06fc314b6a92ab4e2f1aa67a","_from":".","_npmVersion":"3.3.10","_nodeVersion":"4.2.1","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"}]},"1.0.0":{"_id":"cosmiconfig@1.0.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"1.0.0","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"eslint .","pretest":"npm run lint","test":"ava","prepublish":"npm test"},"directories":{},"devDependencies":{"ava":"^0.5.0","eslint":"1.9.0","sinon":"1.17.2"},"dependencies":{"bluebird":"^3.0.5","graceful-fs":"^4.1.2","js-yaml":"^3.4.3","minimist":"^1.2.0","object-assign":"^4.0.1","os-homedir":"^1.0.1","parse-json":"^2.2.0","require-from-string":"^1.1.0"},"files":["index.js","lib"],"main":"index.js","dist":{"shasum":"132ff8b46e2bb1df735a8c3e9db1ff6ca90643a2","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-1.0.0.tgz"},"gitHead":"edcd9fde279416790a3dede34c65d420cf28fbb0","_from":".","_npmVersion":"3.3.10","_nodeVersion":"4.2.1","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"}]},"1.0.1":{"_id":"cosmiconfig@1.0.1","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"1.0.1","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"eslint .","pretest":"npm run lint","test":"ava","prepublish":"npm test"},"directories":{},"devDependencies":{"ava":"^0.5.0","eslint":"1.9.0","sinon":"1.17.2"},"dependencies":{"graceful-fs":"^4.1.2","js-yaml":"^3.4.3","minimist":"^1.2.0","object-assign":"^4.0.1","os-homedir":"^1.0.1","parse-json":"^2.2.0","pinkie-promise":"^2.0.0","require-from-string":"^1.1.0"},"files":["index.js","lib"],"main":"index.js","dist":{"shasum":"27995f978268fe941d8dae8924fc0c9a6b55c74f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-1.0.1.tgz"},"gitHead":"38ca03025b7ee82bc4479fcffbac88027e999b4c","_from":".","_npmVersion":"3.4.1","_nodeVersion":"5.1.0","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"}]},"1.0.2":{"_id":"cosmiconfig@1.0.2","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"1.0.2","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"eslint .","pretest":"npm run lint","test":"ava","prepublish":"npm test"},"directories":{},"devDependencies":{"ava":"0.9.1","eslint":"1.10.3","sinon":"1.17.2"},"dependencies":{"graceful-fs":"^4.1.2","js-yaml":"^3.4.3","minimist":"^1.2.0","object-assign":"^4.0.1","os-homedir":"^1.0.1","parse-json":"^2.2.0","pinkie-promise":"^2.0.0","require-from-string":"^1.1.0"},"files":["index.js","lib"],"main":"index.js","dist":{"shasum":"84225dd0ae301a5ac83a4f4d6636104f7065c826","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-1.0.2.tgz"},"gitHead":"1135486e4483208dcd0047cf6588581be9a892a4","_from":".","_npmVersion":"3.5.3","_nodeVersion":"5.4.0","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"}]},"1.1.0":{"_id":"cosmiconfig@1.1.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"1.1.0","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"eslint .","pretest":"npm run lint","test":"ava","prepublish":"npm test"},"directories":{},"devDependencies":{"ava":"0.9.1","eslint":"1.10.3","lodash":"4.0.0","sinon":"1.17.2"},"dependencies":{"graceful-fs":"^4.1.2","js-yaml":"^3.4.3","minimist":"^1.2.0","object-assign":"^4.0.1","os-homedir":"^1.0.1","parse-json":"^2.2.0","pinkie-promise":"^2.0.0","require-from-string":"^1.1.0"},"files":["index.js","lib"],"main":"index.js","dist":{"shasum":"0dea0f9804efdfb929fbb1b188e25553ea053d37","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-1.1.0.tgz"},"gitHead":"3bf5bef54fc18e8193a8e0b34f3cd17eb1033dea","_from":".","_npmVersion":"3.5.3","_nodeVersion":"5.4.0","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"}]},"2.0.0":{"_id":"cosmiconfig@2.0.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"2.0.0","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"eslint .","ava":"ava test/*.test.js","coverage":"nyc npm run ava && nyc report --reporter=html && open coverage/index.html","test":"npm run ava && npm run lint","prepublish":"npm test"},"directories":{},"devDependencies":{"ava":"0.16.0","eslint":"3.5.0","eslint-config-davidtheclark-node":"^0.2.0","eslint-plugin-node":"^2.0.0","expect":"^1.20.2","lodash":"4.16.1","nyc":"^8.3.0","sinon":"1.17.6"},"dependencies":{"graceful-fs":"^4.1.2","js-yaml":"^3.4.3","minimist":"^1.2.0","os-homedir":"^1.0.1","parse-json":"^2.2.0","require-from-string":"^1.1.0"},"engines":{"node":"4"},"files":["index.js","lib"],"main":"index.js","dist":{"shasum":"0a4a456b8e62de679370d86de5e17b12bf08fafb","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-2.0.0.tgz"},"gitHead":"31fec2c5179bc4d5494789be2b046c738c4f4fca","_from":".","_npmVersion":"2.15.11","_nodeVersion":"4.6.0","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/cosmiconfig-2.0.0.tgz_1475937068818_0.0514873587526381"}},"2.0.1":{"_id":"cosmiconfig@2.0.1","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"2.0.1","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"eslint .","ava":"ava test/*.test.js","coverage":"nyc npm run ava && nyc report --reporter=html && open coverage/index.html","test":"npm run ava && npm run lint","prepublish":"npm test"},"directories":{},"devDependencies":{"ava":"0.16.0","eslint":"3.5.0","eslint-config-davidtheclark-node":"^0.2.0","eslint-plugin-node":"^2.0.0","expect":"^1.20.2","lodash":"4.16.1","nyc":"^8.3.0","sinon":"1.17.6"},"dependencies":{"graceful-fs":"^4.1.2","js-yaml":"^3.4.3","minimist":"^1.2.0","os-homedir":"^1.0.1","parse-json":"^2.2.0","require-from-string":"^1.1.0"},"engines":{"node":"4"},"files":["index.js","lib"],"main":"index.js","dist":{"shasum":"7bd3cb61a9f5a4a807c0a04b2905a99a6a868f23","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-2.0.1.tgz"},"gitHead":"529cb128016f3f09bc876100b3eba2d89934da6c","_from":".","_npmVersion":"2.15.11","_nodeVersion":"4.6.0","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/cosmiconfig-2.0.1.tgz_1476198181717_0.8488575008232147"}},"2.0.2":{"_id":"cosmiconfig@2.0.2","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"2.0.2","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"eslint .","ava":"ava test/*.test.js","coverage":"nyc npm run ava && nyc report --reporter=html && open coverage/index.html","test":"npm run ava && npm run lint","prepublish":"npm test"},"directories":{},"devDependencies":{"ava":"0.16.0","eslint":"3.5.0","eslint-config-davidtheclark-node":"^0.2.0","eslint-plugin-node":"^2.0.0","expect":"^1.20.2","lodash":"4.16.1","nyc":"^8.3.0","sinon":"1.17.6"},"dependencies":{"graceful-fs":"^4.1.2","js-yaml":"^3.4.3","minimist":"^1.2.0","os-homedir":"^1.0.1","parse-json":"^2.2.0","require-from-string":"^1.1.0"},"engines":{"node":">=4"},"files":["index.js","lib"],"main":"index.js","dist":{"shasum":"555501957f17b849d44488d55dd2275a6452fff1","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-2.0.2.tgz"},"gitHead":"2c5ace504ebab0d67f1481dda443189d4c9506ae","_from":".","_npmVersion":"2.15.11","_nodeVersion":"4.6.0","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/cosmiconfig-2.0.2.tgz_1476209549923_0.25399640412069857"}},"2.1.0":{"_id":"cosmiconfig@2.1.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"2.1.0","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"node-version-gte-4 && eslint . || echo \"ESLint not supported\"","ava":"ava test/*.test.js","coverage":"nyc npm run ava && nyc report --reporter=html && open coverage/index.html","test":"npm run ava && npm run lint","prepublish":"npm test"},"directories":{},"devDependencies":{"ava":"0.16.0","eslint":"3.5.0","eslint-config-davidtheclark-node":"^0.2.0","eslint-plugin-node":"^2.0.0","expect":"^1.20.2","lodash":"4.16.1","node-version-check":"^2.1.1","nyc":"^8.3.0","sinon":"1.17.6"},"dependencies":{"graceful-fs":"^4.1.2","js-yaml":"^3.4.3","minimist":"^1.2.0","object-assign":"^4.1.0","os-homedir":"^1.0.1","parse-json":"^2.2.0","require-from-string":"^1.1.0"},"engines":{"node":">=0.12"},"files":["index.js","lib"],"main":"index.js","dist":{"shasum":"26e384a2055ea4e087050e5e08d53eb4eac8f86e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-2.1.0.tgz"},"gitHead":"141c4adb5244b6abbb98a941f662a07ed70c8783","_from":".","_npmVersion":"2.15.11","_nodeVersion":"4.6.0","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/cosmiconfig-2.1.0.tgz_1476412220096_0.5366442145314068"}},"2.1.1":{"_id":"cosmiconfig@2.1.1","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"2.1.1","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"node-version-gte-4 && eslint . || echo \"ESLint not supported\"","ava":"ava test/*.test.js","coverage":"nyc npm run ava && nyc report --reporter=html && open coverage/index.html","test":"npm run ava && npm run lint"},"directories":{},"devDependencies":{"ava":"0.16.0","eslint":"3.5.0","eslint-config-davidtheclark-node":"^0.2.0","eslint-plugin-node":"^2.0.0","expect":"^1.20.2","lodash":"4.16.1","node-version-check":"^2.1.1","nyc":"^8.3.0","sinon":"1.17.6"},"dependencies":{"js-yaml":"^3.4.3","minimist":"^1.2.0","object-assign":"^4.1.0","os-homedir":"^1.0.1","parse-json":"^2.2.0","require-from-string":"^1.1.0"},"engines":{"node":">=0.12"},"files":["index.js","lib"],"main":"index.js","dist":{"shasum":"817f2c2039347a1e9bf7d090c0923e53f749ca82","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-2.1.1.tgz"},"gitHead":"833385b0897c7d698e346442cc260a40f0e8eb9d","_from":".","_npmVersion":"4.0.2","_nodeVersion":"4.6.1","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/cosmiconfig-2.1.1.tgz_1480883998374_0.7163176657631993"}},"2.1.2":{"_id":"cosmiconfig@2.1.2","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"2.1.2","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"node-version-gte-4 && eslint . || echo \"ESLint not supported\"","tape":"tape test/*.test.js | tap-spec","coverage":"nyc npm run tape && nyc report --reporter=html && open coverage/index.html","test":"npm run tape && npm run lint"},"directories":{},"devDependencies":{"eslint":"^3.13.0","eslint-config-davidtheclark-node":"^0.2.0","eslint-plugin-node":"^3.0.5","expect":"^1.20.2","lodash":"^4.17.4","node-version-check":"^2.1.1","nyc":"^10.0.0","sinon":"^1.17.7","tap-spec":"^4.1.1","tape":"^4.6.3"},"dependencies":{"is-directory":"^0.3.1","js-yaml":"^3.4.3","json-parse-helpfulerror":"^1.0.3","minimist":"^1.2.0","object-assign":"^4.1.0","os-homedir":"^1.0.1","require-from-string":"^1.1.0"},"engines":{"node":">=0.12"},"files":["index.js","lib"],"main":"index.js","dist":{"shasum":"c43ae86d238f08f1728a345ed60ceb0aef63c060","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-2.1.2.tgz"},"gitHead":"324ba6e6899822218027c145220faad3da52a231","_from":".","_npmVersion":"4.5.0","_nodeVersion":"6.10.0","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/cosmiconfig-2.1.2.tgz_1493170533469_0.09523397800512612"}},"2.1.3":{"_id":"cosmiconfig@2.1.3","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"2.1.3","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"node-version-gte-4 && eslint . || echo \"ESLint not supported\"","tape":"tape test/*.test.js | tap-spec","coverage":"nyc npm run tape && nyc report --reporter=html && open coverage/index.html","test":"npm run tape && npm run lint"},"directories":{},"devDependencies":{"eslint":"^3.13.0","eslint-config-davidtheclark-node":"^0.2.0","eslint-plugin-node":"^3.0.5","expect":"^1.20.2","lodash":"^4.17.4","node-version-check":"^2.1.1","nyc":"^10.0.0","sinon":"^1.17.7","tap-spec":"^4.1.1","tape":"^4.6.3"},"dependencies":{"is-directory":"^0.3.1","js-yaml":"^3.4.3","minimist":"^1.2.0","object-assign":"^4.1.0","os-homedir":"^1.0.1","parse-json":"^2.2.0","require-from-string":"^1.1.0"},"engines":{"node":">=0.12"},"files":["index.js","lib"],"main":"index.js","dist":{"shasum":"952771eb0dddc1cb3fa2f6fbe51a522e93b3ee0a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-2.1.3.tgz"},"gitHead":"334065d9f7b557170a38b3f920bf5e90cecfab72","_from":".","_npmVersion":"4.5.0","_nodeVersion":"6.10.0","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/cosmiconfig-2.1.3.tgz_1493484678373_0.50360560673289"}},"2.2.0":{"_id":"cosmiconfig@2.2.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"2.2.0","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"node-version-gte-4 && eslint . || echo \"ESLint not supported\"","tape":"tape test/*.test.js | tap-spec","coverage":"nyc npm run tape && nyc report --reporter=html && open coverage/index.html","test":"npm run tape && npm run lint"},"directories":{},"devDependencies":{"eslint":"^4.2.0","eslint-config-davidtheclark-node":"^0.2.0","eslint-plugin-node":"^3.0.5","expect":"^1.20.2","lodash":"^4.17.4","node-version-check":"^2.2.0","nyc":"^11.0.3","sinon":"^2.3.8","tap-spec":"^4.1.1","tape":"^4.7.0"},"dependencies":{"is-directory":"^0.3.1","is-promise":"^2.1.0","js-yaml":"^3.9.0","minimist":"^1.2.0","object-assign":"^4.1.1","os-homedir":"^1.0.1","parse-json":"^2.2.0","require-from-string":"^1.1.0"},"engines":{"node":">=0.12"},"files":["index.js","lib"],"main":"index.js","dist":{"shasum":"a14ef6f81bf4cc8b7c708730a4010c41b4ab35b8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-2.2.0.tgz"},"gitHead":"bfa7721399d8a094796725456ddf0a143379f0a2","_npmVersion":"5.3.0","_nodeVersion":"6.11.1","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig-2.2.0.tgz_1500645658522_0.9643848484847695"}},"2.2.1":{"_id":"cosmiconfig@2.2.1","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"2.2.1","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"node-version-gte-4 && eslint . || echo \"ESLint not supported\"","tape":"tape test/*.test.js | tap-spec","coverage":"nyc npm run tape && nyc report --reporter=html && open coverage/index.html","test":"npm run tape && npm run lint"},"directories":{},"devDependencies":{"eslint":"^3.13.0","eslint-config-davidtheclark-node":"^0.2.0","eslint-plugin-node":"^3.0.5","expect":"^1.20.2","lodash":"^4.17.4","node-version-check":"^2.1.1","nyc":"^10.0.0","sinon":"^1.17.7","tap-spec":"^4.1.1","tape":"^4.6.3"},"dependencies":{"is-directory":"^0.3.1","js-yaml":"^3.4.3","minimist":"^1.2.0","object-assign":"^4.1.0","os-homedir":"^1.0.1","parse-json":"^2.2.0","require-from-string":"^1.1.0"},"engines":{"node":">=0.12"},"files":["index.js","lib"],"main":"index.js","dist":{"shasum":"7fbdc6fb47597d5f88175de1df696b66d36e5944","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-2.2.1.tgz"},"gitHead":"a004ec9d36adf0b4d47a527f2bb8cff12aca0405","_npmVersion":"5.3.0","_nodeVersion":"6.11.1","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"email":"sudo.suhas@gmail.com","name":"sudo-suhas"},{"email":"david.dave.clark@gmail.com","name":"davidtheclark"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig-2.2.1.tgz_1500650393526_0.31028774357400835"}},"2.2.2":{"_id":"cosmiconfig@2.2.2","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"2.2.2","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"lint":"node-version-gte-4 && eslint . || echo \"ESLint not supported\"","tape":"tape test/*.test.js | tap-spec","coverage":"nyc npm run tape && nyc report --reporter=html && open coverage/index.html","test":"npm run tape && npm run lint"},"directories":{},"devDependencies":{"eslint":"^3.13.0","eslint-config-davidtheclark-node":"^0.2.0","eslint-plugin-node":"^3.0.5","expect":"^1.20.2","lodash":"^4.17.4","node-version-check":"^2.1.1","nyc":"^10.0.0","sinon":"^1.17.7","tap-spec":"^4.1.1","tape":"^4.6.3"},"dependencies":{"is-directory":"^0.3.1","js-yaml":"^3.4.3","minimist":"^1.2.0","object-assign":"^4.1.0","os-homedir":"^1.0.1","parse-json":"^2.2.0","require-from-string":"^1.1.0"},"engines":{"node":">=0.12"},"files":["index.js","lib"],"main":"index.js","dist":{"shasum":"6173cebd56fac042c1f4390edf7af6c07c7cb892","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-2.2.2.tgz"},"gitHead":"6ba8acded691b08e550436de3bbad7d25598ad75","_npmVersion":"5.3.0","_nodeVersion":"6.11.1","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"email":"sudo.suhas@gmail.com","name":"sudo-suhas"},{"email":"david.dave.clark@gmail.com","name":"davidtheclark"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig-2.2.2.tgz_1500820216479_0.9056716256309301"}},"3.0.0":{"_id":"cosmiconfig@3.0.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"3.0.0","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"precommit":"lint-staged && jest && flow check","lint":"eslint .","lint:fix":"eslint . --fix","pretest":"npm run lint && flow check","test":"jest","test:watch":"jest --watch","coverage":"jest --coverage --coverageReporters=html --coverageReporters=text","build":"flow-remove-types src --out-dir dist --quiet","prepublishOnly":"npm run build"},"directories":{},"devDependencies":{"babel-eslint":"^7.2.3","babel-plugin-transform-flow-strip-types":"^6.22.0","eslint":"^4.5.0","eslint-config-davidtheclark-node":"^0.2.0","eslint-config-prettier":"^2.3.0","eslint-plugin-flowtype":"^2.35.1","eslint-plugin-node":"^3.0.5","flow-bin":"^0.54.1","flow-remove-types":"^1.2.1","husky":"^0.14.3","jest":"^20.0.4","lint-staged":"^4.0.4","prettier":"^1.6.1"},"dependencies":{"is-directory":"^0.3.1","js-yaml":"^3.9.0","parse-json":"^2.2.0","require-from-string":"^1.1.0"},"engines":{"node":">=4"},"files":["index.js","dist"],"main":"dist/index.js","dist":{"shasum":"9c465e02f5a7cc6e8f7e5975fce4a1b712d7d936","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-3.0.0.tgz"},"lint-staged":{"*.js":["eslint --fix","prettier --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/*.js"]},"babel":{"plugins":["transform-flow-strip-types"]},"gitHead":"e9226f1310f36dadd0323d68ab0256e976be8645","_npmVersion":"5.4.2","_nodeVersion":"6.11.3","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"email":"sudo.suhas@gmail.com","name":"sudo-suhas"},{"email":"david.dave.clark@gmail.com","name":"davidtheclark"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig-3.0.0.tgz_1505525636771_0.17221695114858449"}},"3.0.1":{"_id":"cosmiconfig@3.0.1","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"3.0.1","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"precommit":"lint-staged && jest && flow check","lint":"eslint .","lint:fix":"eslint . --fix","pretest":"npm run lint && flow check","test":"jest --coverage","test:watch":"jest --watch","coverage":"jest --coverage --coverageReporters=html --coverageReporters=text","build":"flow-remove-types src --out-dir dist --quiet","prepublishOnly":"npm run build"},"directories":{},"devDependencies":{"babel-eslint":"^8.0.0","babel-plugin-transform-flow-strip-types":"^6.22.0","eslint":"^4.7.0","eslint-config-davidtheclark-node":"^0.2.0","eslint-config-prettier":"^2.5.0","eslint-plugin-flowtype":"^2.35.1","eslint-plugin-node":"^3.0.5","flow-bin":"^0.54.1","flow-remove-types":"^1.2.1","husky":"^0.14.3","jest":"^21.1.0","lint-staged":"^4.2.1","prettier":"^1.7.0"},"dependencies":{"is-directory":"^0.3.1","js-yaml":"^3.9.0","parse-json":"^3.0.0","require-from-string":"^2.0.1"},"engines":{"node":">=4"},"files":["dist"],"main":"dist/index.js","dist":{"shasum":"d290e2b657a7f3a335257a0d306587836650fdc0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-3.0.1.tgz"},"lint-staged":{"*.js":["eslint --fix","prettier --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/*.js"],"coverageThreshold":{"global":{"branches":100,"functions":100,"lines":100,"statements":100}}},"babel":{"plugins":["transform-flow-strip-types"]},"gitHead":"2dac2f9165c01a571f5c61648ff3c0079d4a4bee","_npmVersion":"5.3.0","_nodeVersion":"8.5.0","_npmUser":{"name":"sudo-suhas","email":"sudo.suhas@gmail.com"},"maintainers":[{"email":"sudo.suhas@gmail.com","name":"sudo-suhas"},{"email":"david.dave.clark@gmail.com","name":"davidtheclark"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig-3.0.1.tgz_1505660827478_0.797999853733927"}},"3.1.0":{"_id":"cosmiconfig@3.1.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"3.1.0","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"precommit":"lint-staged && jest && flow check","lint":"eslint .","lint:fix":"eslint . --fix","pretest":"npm run lint && flow check","test":"jest --coverage","test:watch":"jest --watch","coverage":"jest --coverage --coverageReporters=html --coverageReporters=text","build":"flow-remove-types src --out-dir dist --quiet","prepublishOnly":"npm run build"},"directories":{},"devDependencies":{"babel-eslint":"^8.0.0","babel-plugin-transform-flow-strip-types":"^6.22.0","eslint":"^4.7.0","eslint-config-davidtheclark-node":"^0.2.0","eslint-config-prettier":"^2.5.0","eslint-plugin-flowtype":"^2.35.1","eslint-plugin-node":"^3.0.5","flow-bin":"^0.54.1","flow-remove-types":"^1.2.1","husky":"^0.14.3","jest":"^21.1.0","lint-staged":"^4.2.1","prettier":"^1.7.0"},"dependencies":{"is-directory":"^0.3.1","js-yaml":"^3.9.0","parse-json":"^3.0.0","require-from-string":"^2.0.1"},"engines":{"node":">=4"},"files":["dist"],"main":"dist/index.js","dist":{"shasum":"640a94bf9847f321800403cd273af60665c73397","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-3.1.0.tgz"},"lint-staged":{"*.js":["eslint --fix","prettier --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/*.js"],"coverageThreshold":{"global":{"branches":100,"functions":100,"lines":100,"statements":100}}},"babel":{"plugins":["transform-flow-strip-types"]},"gitHead":"930926e7ca4e4f4c6cd57c371748a6c9d45083d8","_npmVersion":"5.3.0","_nodeVersion":"8.6.0","_npmUser":{"name":"sudo-suhas","email":"sudo.suhas@gmail.com"},"maintainers":[{"email":"sudo.suhas@gmail.com","name":"sudo-suhas"},{"email":"david.dave.clark@gmail.com","name":"davidtheclark"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig-3.1.0.tgz_1506906985338_0.6278869041707367"}},"4.0.0":{"_id":"cosmiconfig@4.0.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"4.0.0","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"precommit":"lint-staged && jest && flow check","lint":"eslint .","lint:fix":"eslint . --fix","format":"prettier --write \"{src/*.js,test/*.js}\"","pretest":"npm run lint && flow check","test":"jest --coverage","test:watch":"jest --watch","coverage":"jest --coverage --coverageReporters=html --coverageReporters=text","build":"flow-remove-types src --out-dir dist --quiet","prepublishOnly":"npm run build"},"directories":{},"devDependencies":{"babel-eslint":"^8.0.3","babel-plugin-transform-flow-strip-types":"^6.22.0","eslint":"^4.12.1","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^2.9.0","eslint-plugin-flowtype":"^2.39.1","eslint-plugin-node":"^5.2.1","flow-bin":"^0.54.1","flow-remove-types":"^1.2.3","husky":"^0.14.3","jest":"^21.2.1","lint-staged":"^6.0.0","prettier":"^1.8.2"},"dependencies":{"is-directory":"^0.3.1","js-yaml":"^3.9.0","parse-json":"^4.0.0","require-from-string":"^2.0.1"},"engines":{"node":">=4"},"files":["dist"],"main":"dist/index.js","dist":{"shasum":"760391549580bbd2df1e562bc177b13c290972dc","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-4.0.0.tgz"},"lint-staged":{"*.js":["eslint --fix","prettier --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/*.js"],"coverageThreshold":{"global":{"branches":100,"functions":100,"lines":100,"statements":100}}},"babel":{"plugins":["transform-flow-strip-types"]},"gitHead":"e520cde1cbbbd528e8b0533c3f02bcb35e8a359e","_npmVersion":"5.5.1","_nodeVersion":"8.9.3","_npmUser":{"name":"sudo-suhas","email":"sudo.suhas@gmail.com"},"maintainers":[{"email":"sudo.suhas@gmail.com","name":"sudo-suhas"},{"email":"david.dave.clark@gmail.com","name":"davidtheclark"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig-4.0.0.tgz_1516072984111_0.9652654137462378"}},"5.0.1":{"_id":"cosmiconfig@5.0.1","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"5.0.1","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"precommit":"lint-staged && jest && flow check","lint:md-partial":"remark -u remark-preset-davidtheclark --frail --quiet --no-stdout --output --","lint:md":"npm run lint:md-partial -- *.md","lint:fix":"eslint . --fix","lint":"eslint . && npm run lint:md","format":"prettier --write \"{src/*.js,test/*.js}\"","pretest":"npm run lint && flow check","test":"jest --coverage","test:watch":"jest --watch","coverage":"jest --coverage --coverageReporters=html --coverageReporters=text","build":"flow-remove-types src --out-dir dist --quiet","prepublishOnly":"npm run build"},"directories":{},"devDependencies":{"babel-eslint":"^8.0.3","babel-plugin-transform-flow-strip-types":"^6.22.0","del":"^3.0.0","eslint":"^4.12.1","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^2.9.0","eslint-plugin-flowtype":"^2.39.1","eslint-plugin-node":"^5.2.1","flow-bin":"^0.68.0","flow-remove-types":"^1.2.3","husky":"^0.14.3","jest":"^21.2.1","lint-staged":"^6.0.0","make-dir":"^1.2.0","parent-module":"^0.1.0","prettier":"^1.8.2","remark-cli":"^5.0.0","remark-preset-davidtheclark":"^0.7.0"},"dependencies":{"is-directory":"^0.3.1","js-yaml":"^3.9.0","parse-json":"^4.0.0"},"engines":{"node":">=4"},"files":["dist"],"main":"dist/index.js","dist":{"shasum":"1467d4b6010116a3adcc1d8cbcc126d993a5afa9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-5.0.1.tgz"},"lint-staged":{"*.js":["eslint --fix","prettier --write","git add"],"*.md":["npm run lint:md-partial","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/*.js"],"coverageReporters":["text","html"],"coverageThreshold":{"global":{"branches":100,"functions":100,"lines":100,"statements":100}},"resetModules":true,"resetMocks":true},"babel":{"plugins":["transform-flow-strip-types"]},"gitHead":"493c62aca93b9b79ea75b0768f7b425e685e2d57","_npmVersion":"6.0.0","_nodeVersion":"8.11.1","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"email":"david.dave.clark@gmail.com","name":"davidtheclark"},{"email":"sudo.suhas@gmail.com","name":"sudo-suhas"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_5.0.1_1525539670694_0.4144289824136158"},"_hasShrinkwrap":false},"5.0.2":{"_id":"cosmiconfig@5.0.2","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"5.0.2","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"precommit":"lint-staged && jest && flow check","lint:md-partial":"remark -u remark-preset-davidtheclark --frail --quiet --no-stdout --output --","lint:md":"npm run lint:md-partial -- *.md","lint:fix":"eslint . --fix","lint":"eslint . && npm run lint:md","format":"prettier --write \"{src/*.js,test/*.js}\"","pretest":"npm run lint && flow check","test":"jest --coverage","test:watch":"jest --watch","coverage":"jest --coverage --coverageReporters=html --coverageReporters=text","build":"flow-remove-types src --out-dir dist --quiet","prepublishOnly":"npm run build"},"directories":{},"devDependencies":{"babel-eslint":"^8.0.3","babel-plugin-transform-flow-strip-types":"^6.22.0","del":"^3.0.0","eslint":"^4.12.1","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^2.9.0","eslint-plugin-flowtype":"^2.39.1","eslint-plugin-node":"^5.2.1","flow-bin":"^0.68.0","flow-remove-types":"^1.2.3","husky":"^0.14.3","jest":"^21.2.1","lint-staged":"^6.0.0","make-dir":"^1.2.0","parent-module":"^0.1.0","prettier":"^1.8.2","remark-cli":"^5.0.0","remark-preset-davidtheclark":"^0.7.0"},"dependencies":{"is-directory":"^0.3.1","js-yaml":"^3.9.0","parse-json":"^4.0.0"},"engines":{"node":">=4"},"files":["dist"],"main":"dist/index.js","dist":{"shasum":"03f8965ae4675317a0015b4a5a48a470d9baeada","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-5.0.2.tgz"},"lint-staged":{"*.js":["eslint --fix","prettier --write","git add"],"*.md":["npm run lint:md-partial","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/*.js"],"coverageReporters":["text","html"],"coverageThreshold":{"global":{"branches":100,"functions":100,"lines":100,"statements":100}},"resetModules":true,"resetMocks":true},"babel":{"plugins":["transform-flow-strip-types"]},"gitHead":"e454aba02a6acfa45a3f9eb7d0784fb03b266acf","_npmVersion":"6.0.0","_nodeVersion":"8.11.1","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"email":"david.dave.clark@gmail.com","name":"davidtheclark"},{"email":"sudo.suhas@gmail.com","name":"sudo-suhas"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_5.0.2_1525731090723_0.5044492278052646"},"_hasShrinkwrap":false},"5.0.3":{"_id":"cosmiconfig@5.0.3","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"5.0.3","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"precommit":"lint-staged && jest && flow check","lint:md-partial":"remark -u remark-preset-davidtheclark --frail --quiet --no-stdout --output --","lint:md":"npm run lint:md-partial -- *.md","lint:fix":"eslint . --fix","lint":"eslint . && npm run lint:md","format":"prettier --write \"{src/*.js,test/*.js}\"","pretest":"npm run lint && flow check","test":"jest --coverage","test:watch":"jest --watch","coverage":"jest --coverage --coverageReporters=html --coverageReporters=text","build":"flow-remove-types src --out-dir dist --quiet","prepublishOnly":"npm run build"},"directories":{},"devDependencies":{"babel-eslint":"^8.0.3","babel-plugin-transform-flow-strip-types":"^6.22.0","del":"^3.0.0","eslint":"^4.12.1","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^2.9.0","eslint-plugin-flowtype":"^2.39.1","eslint-plugin-node":"^5.2.1","flow-bin":"^0.68.0","flow-remove-types":"^1.2.3","husky":"^0.14.3","jest":"^21.2.1","lint-staged":"^6.0.0","make-dir":"^1.2.0","parent-module":"^0.1.0","prettier":"^1.8.2","remark-cli":"^5.0.0","remark-preset-davidtheclark":"^0.7.0"},"dependencies":{"is-directory":"^0.3.1","js-yaml":"^3.9.0","parse-json":"^4.0.0"},"engines":{"node":">=4"},"files":["dist"],"main":"dist/index.js","dist":{"shasum":"299c08ebce9d2df8a2c9ec3f11e55b1c2e897bf3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-5.0.3.tgz"},"lint-staged":{"*.js":["eslint --fix","prettier --write","git add"],"*.md":["npm run lint:md-partial","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/*.js"],"coverageReporters":["text","html"],"coverageThreshold":{"global":{"branches":100,"functions":100,"lines":100,"statements":100}},"resetModules":true,"resetMocks":true},"babel":{"plugins":["transform-flow-strip-types"]},"gitHead":"fa5f52ef43e9eea14105fc13c6c6f49556c99c77","_npmVersion":"5.6.0","_nodeVersion":"8.11.1","_npmUser":{"name":"sudo-suhas","email":"sudo.suhas@gmail.com"},"maintainers":[{"email":"david.dave.clark@gmail.com","name":"davidtheclark"},{"email":"sudo.suhas@gmail.com","name":"sudo-suhas"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_5.0.3_1526355359309_0.2329486190334984"},"_hasShrinkwrap":false},"5.0.4":{"_id":"cosmiconfig@5.0.4","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"5.0.4","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"precommit":"lint-staged && jest && flow check","lint:md-partial":"remark -u remark-preset-davidtheclark --frail --quiet --no-stdout --output --","lint:md":"npm run lint:md-partial -- *.md","lint:fix":"eslint . --fix","lint":"eslint . && npm run lint:md","format":"prettier --write \"{src/*.js,test/*.js}\"","pretest":"npm run lint && flow check","test":"jest --coverage","test:watch":"jest --watch","coverage":"jest --coverage --coverageReporters=html --coverageReporters=text","build":"flow-remove-types src --out-dir dist --quiet","prepublishOnly":"npm run build"},"directories":{},"devDependencies":{"babel-eslint":"^8.0.3","babel-plugin-transform-flow-strip-types":"^6.22.0","del":"^3.0.0","eslint":"^4.12.1","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^2.9.0","eslint-plugin-flowtype":"^2.39.1","eslint-plugin-node":"^5.2.1","flow-bin":"^0.68.0","flow-remove-types":"^1.2.3","husky":"^0.14.3","jest":"^21.2.1","lint-staged":"^6.0.0","make-dir":"^1.2.0","parent-module":"^0.1.0","prettier":"^1.8.2","remark-cli":"^5.0.0","remark-preset-davidtheclark":"^0.7.0"},"dependencies":{"is-directory":"^0.3.1","js-yaml":"^3.9.0","parse-json":"^4.0.0"},"engines":{"node":">=4"},"files":["dist"],"main":"dist/index.js","dist":{"shasum":"fe4c1fccf8947ab30911760eace33784749eb51e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-5.0.4.tgz"},"lint-staged":{"*.js":["eslint --fix","prettier --write","git add"],"*.md":["npm run lint:md-partial","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/*.js"],"coverageReporters":["text","html"],"coverageThreshold":{"global":{"branches":100,"functions":100,"lines":100,"statements":100}},"resetModules":true,"resetMocks":true},"babel":{"plugins":["transform-flow-strip-types"]},"gitHead":"6106aeca2d5729d5955c37ab80494e470b712ca1","_npmVersion":"6.0.0","_nodeVersion":"8.11.1","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"email":"david.dave.clark@gmail.com","name":"davidtheclark"},{"email":"sudo.suhas@gmail.com","name":"sudo-suhas"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_5.0.4_1526750722153_0.24526780173289553"},"_hasShrinkwrap":false},"5.0.5":{"_id":"cosmiconfig@5.0.5","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"5.0.5","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"precommit":"lint-staged && jest && flow check","lint:md-partial":"remark -u remark-preset-davidtheclark --frail --quiet --no-stdout --output --","lint:md":"npm run lint:md-partial -- *.md","lint:fix":"eslint . --fix","lint":"eslint . && npm run lint:md","format":"prettier --write \"{src/*.js,test/*.js}\"","pretest":"npm run lint && flow check","test":"jest --coverage","test:watch":"jest --watch","coverage":"jest --coverage --coverageReporters=html --coverageReporters=text","build":"flow-remove-types src --out-dir dist --quiet","prepublishOnly":"npm run build"},"directories":{},"devDependencies":{"babel-eslint":"^8.0.3","babel-plugin-transform-flow-strip-types":"^6.22.0","del":"^3.0.0","eslint":"^4.12.1","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^2.9.0","eslint-plugin-flowtype":"^2.39.1","eslint-plugin-node":"^5.2.1","flow-bin":"^0.68.0","flow-remove-types":"^1.2.3","husky":"^0.14.3","jest":"^21.2.1","lint-staged":"^6.0.0","make-dir":"^1.2.0","parent-module":"^0.1.0","prettier":"^1.8.2","remark-cli":"^5.0.0","remark-preset-davidtheclark":"^0.7.0"},"dependencies":{"is-directory":"^0.3.1","js-yaml":"^3.9.0","parse-json":"^4.0.0"},"engines":{"node":">=4"},"files":["dist"],"main":"dist/index.js","dist":{"shasum":"a809e3c2306891ce17ab70359dc8bdf661fe2cd0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-5.0.5.tgz"},"lint-staged":{"*.js":["eslint --fix","prettier --write","git add"],"*.md":["npm run lint:md-partial","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/*.js"],"coverageReporters":["text","html","lcov"],"coverageThreshold":{"global":{"branches":100,"functions":100,"lines":100,"statements":100}},"resetModules":true,"resetMocks":true},"babel":{"plugins":["transform-flow-strip-types"]},"gitHead":"5ce57f0758a143cffcf52415b5a0d155675332bb","_npmVersion":"6.0.0","_nodeVersion":"8.11.1","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"email":"david.dave.clark@gmail.com","name":"davidtheclark"},{"email":"sudo.suhas@gmail.com","name":"sudo-suhas"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_5.0.5_1526955040307_0.5628565018623786"},"_hasShrinkwrap":false},"5.0.6":{"_id":"cosmiconfig@5.0.6","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"5.0.6","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"precommit":"lint-staged && jest && flow check","lint:md-partial":"remark -u remark-preset-davidtheclark --frail --quiet --no-stdout --output --","lint:md":"npm run lint:md-partial -- *.md","lint:fix":"eslint . --fix","lint":"eslint . && npm run lint:md","format":"prettier --write \"{src/*.js,test/*.js}\"","pretest":"npm run lint && flow check","test":"jest --coverage","test:watch":"jest --watch","coverage":"jest --coverage --coverageReporters=html --coverageReporters=text","build":"flow-remove-types src --out-dir dist --quiet","prepublishOnly":"npm run build"},"directories":{},"devDependencies":{"babel-eslint":"^8.0.3","babel-plugin-transform-flow-strip-types":"^6.22.0","del":"^3.0.0","eslint":"^4.12.1","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^2.9.0","eslint-plugin-flowtype":"^2.39.1","eslint-plugin-node":"^5.2.1","flow-bin":"^0.68.0","flow-remove-types":"^1.2.3","husky":"^0.14.3","jest":"^21.2.1","lint-staged":"^6.0.0","make-dir":"^1.2.0","parent-module":"^0.1.0","prettier":"^1.8.2","remark-cli":"^5.0.0","remark-preset-davidtheclark":"^0.7.0"},"dependencies":{"is-directory":"^0.3.1","js-yaml":"^3.9.0","parse-json":"^4.0.0"},"engines":{"node":">=4"},"files":["dist"],"main":"dist/index.js","dist":{"shasum":"dca6cf680a0bd03589aff684700858c81abeeb39","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-5.0.6.tgz"},"lint-staged":{"*.js":["eslint --fix","prettier --write","git add"],"*.md":["npm run lint:md-partial","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/*.js"],"coverageReporters":["text","html","lcov"],"coverageThreshold":{"global":{"branches":100,"functions":100,"lines":100,"statements":100}},"resetModules":true,"resetMocks":true},"babel":{"plugins":["transform-flow-strip-types"]},"gitHead":"599594916041a66e3963268bb9893e4c7724ca55","_npmVersion":"6.3.0","_nodeVersion":"8.11.1","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"email":"david.dave.clark@gmail.com","name":"davidtheclark"},{"email":"sudo.suhas@gmail.com","name":"sudo-suhas"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_5.0.6_1533825124009_0.5502853986113991"},"_hasShrinkwrap":false},"5.0.7":{"_id":"cosmiconfig@5.0.7","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"5.0.7","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"precommit":"lint-staged && jest && flow check","lint:md-partial":"remark -u remark-preset-davidtheclark --frail --quiet --no-stdout --output --","lint:md":"npm run lint:md-partial -- *.md","lint:fix":"eslint . --fix","lint":"eslint . && npm run lint:md","format":"prettier --write \"{src/*.js,test/*.js}\"","pretest":"npm run lint && flow check","test":"jest --coverage","test:watch":"jest --watch","coverage":"jest --coverage --coverageReporters=html --coverageReporters=text","build":"flow-remove-types src --out-dir dist --quiet","prepublishOnly":"npm run build"},"directories":{},"devDependencies":{"babel-eslint":"^8.0.3","babel-plugin-transform-flow-strip-types":"^6.22.0","del":"^3.0.0","eslint":"^4.12.1","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^2.9.0","eslint-plugin-flowtype":"^2.39.1","eslint-plugin-node":"^5.2.1","flow-bin":"^0.68.0","flow-remove-types":"^1.2.3","husky":"^0.14.3","jest":"^21.2.1","lint-staged":"^6.0.0","make-dir":"^1.2.0","parent-module":"^0.1.0","prettier":"^1.8.2","remark-cli":"^5.0.0","remark-preset-davidtheclark":"^0.7.0"},"dependencies":{"import-fresh":"^2.0.0","is-directory":"^0.3.1","js-yaml":"^3.9.0","parse-json":"^4.0.0"},"engines":{"node":">=4"},"main":"dist/index.js","dist":{"shasum":"39826b292ee0d78eda137dfa3173bd1c21a43b04","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-5.0.7.tgz"},"lint-staged":{"*.js":["eslint --fix","prettier --write","git add"],"*.md":["npm run lint:md-partial","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/*.js"],"coverageReporters":["text","html","lcov"],"coverageThreshold":{"global":{"branches":100,"functions":100,"lines":100,"statements":100}},"resetModules":true,"resetMocks":true},"babel":{"plugins":["transform-flow-strip-types"]},"gitHead":"323d8f21ee8e182815cfac6711cee144a74f65d3","_npmVersion":"6.4.1","_nodeVersion":"8.11.1","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"email":"david.dave.clark@gmail.com","name":"davidtheclark"},{"email":"sudo.suhas@gmail.com","name":"sudo-suhas"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_5.0.7_1541644873823_0.5878130624403042"},"_hasShrinkwrap":false},"5.1.0":{"_id":"cosmiconfig@5.1.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"5.1.0","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"precommit":"lint-staged && jest && flow check","lint:md-partial":"remark -u remark-preset-davidtheclark --frail --quiet --no-stdout --output --","lint:md":"npm run lint:md-partial -- *.md","lint:fix":"eslint . --fix","lint":"eslint . && npm run lint:md","format":"prettier --write \"{src/*.js,test/*.js}\"","pretest":"npm run lint && flow check","test":"jest --coverage","test:watch":"jest --watch","coverage":"jest --coverage --coverageReporters=html --coverageReporters=text","build":"flow-remove-types src --out-dir dist --quiet","prepublishOnly":"npm run build"},"directories":{},"devDependencies":{"babel-eslint":"^8.0.3","babel-plugin-transform-flow-strip-types":"^6.22.0","del":"^3.0.0","eslint":"^4.12.1","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^2.9.0","eslint-plugin-flowtype":"^2.39.1","eslint-plugin-node":"^5.2.1","flow-bin":"^0.68.0","flow-remove-types":"^1.2.3","husky":"^0.14.3","jest":"^21.2.1","lint-staged":"^6.0.0","make-dir":"^1.2.0","parent-module":"^0.1.0","prettier":"^1.8.2","remark-cli":"^5.0.0","remark-preset-davidtheclark":"^0.7.0"},"dependencies":{"import-fresh":"^2.0.0","is-directory":"^0.3.1","js-yaml":"^3.9.0","lodash.get":"^4.4.2","parse-json":"^4.0.0"},"engines":{"node":">=4"},"main":"dist/index.js","dist":{"shasum":"6c5c35e97f37f985061cdf653f114784231185cf","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-5.1.0.tgz"},"lint-staged":{"*.js":["eslint --fix","prettier --write","git add"],"*.md":["npm run lint:md-partial","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/*.js"],"coverageReporters":["text","html","lcov"],"coverageThreshold":{"global":{"branches":100,"functions":100,"lines":100,"statements":100}},"resetModules":true,"resetMocks":true},"babel":{"plugins":["transform-flow-strip-types"]},"gitHead":"71da3267ff24b3e80bd0e5fc955b4c45942c3548","_npmVersion":"6.5.0","_nodeVersion":"8.14.0","_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"maintainers":[{"email":"david.dave.clark@gmail.com","name":"davidtheclark"},{"email":"sudo.suhas@gmail.com","name":"sudo-suhas"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_5.1.0_1550447879993_0.4726436965960332"},"_hasShrinkwrap":false},"5.2.0":{"_id":"cosmiconfig@5.2.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"5.2.0","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"precommit":"lint-staged && jest && flow check","lint:md-partial":"remark -u remark-preset-davidtheclark --frail --quiet --no-stdout --output --","lint:md":"npm run lint:md-partial -- *.md","lint:fix":"eslint . --fix","lint":"eslint . && npm run lint:md","format":"prettier --write \"{src/*.js,test/*.js}\"","pretest":"npm run lint && flow check","test":"jest --coverage","test:watch":"jest --watch","coverage":"jest --coverage --coverageReporters=html --coverageReporters=text","build":"flow-remove-types src --out-dir dist --quiet","prepublishOnly":"npm run build"},"directories":{},"devDependencies":{"babel-eslint":"^8.0.3","babel-plugin-transform-flow-strip-types":"^6.22.0","del":"^3.0.0","eslint":"^4.12.1","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^2.9.0","eslint-plugin-flowtype":"^2.39.1","eslint-plugin-node":"^5.2.1","flow-bin":"^0.68.0","flow-remove-types":"^1.2.3","husky":"^0.14.3","jest":"^21.2.1","lint-staged":"^6.0.0","make-dir":"^1.2.0","parent-module":"^0.1.0","prettier":"^1.8.2","remark-cli":"^5.0.0","remark-preset-davidtheclark":"^0.7.0"},"dependencies":{"import-fresh":"^2.0.0","is-directory":"^0.3.1","js-yaml":"^3.13.0","parse-json":"^4.0.0"},"engines":{"node":">=4"},"main":"dist/index.js","dist":{"shasum":"45038e4d28a7fe787203aede9c25bca4a08b12c8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-5.2.0.tgz"},"lint-staged":{"*.js":["eslint --fix","prettier --write","git add"],"*.md":["npm run lint:md-partial","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/*.js"],"coverageReporters":["text","html","lcov"],"coverageThreshold":{"global":{"branches":100,"functions":100,"lines":100,"statements":100}},"resetModules":true,"resetMocks":true},"babel":{"plugins":["transform-flow-strip-types"]},"gitHead":"f1750cde0b9c53bc577efa60d012a85a4dc4b823","_nodeVersion":"8.14.0","_npmVersion":"6.9.0","maintainers":[{"email":"david.dave.clark@gmail.com","name":"davidtheclark"},{"email":"sudo.suhas@gmail.com","name":"sudo-suhas"}],"_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_5.2.0_1553451522790_0.4067340719793242"},"_hasShrinkwrap":false},"5.2.1":{"_id":"cosmiconfig@5.2.1","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"5.2.1","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com","url":""},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru","url":""},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com","url":""}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"precommit":"lint-staged && jest && flow check","lint:md-partial":"remark -u remark-preset-davidtheclark --frail --quiet --no-stdout --output --","lint:md":"npm run lint:md-partial -- *.md","lint:fix":"eslint . --fix","lint":"eslint . && npm run lint:md","format":"prettier --write \"{src/*.js,test/*.js}\"","pretest":"npm run lint && flow check","test":"jest --coverage","test:watch":"jest --watch","coverage":"jest --coverage --coverageReporters=html --coverageReporters=text","build":"flow-remove-types src --out-dir dist --quiet","prepublishOnly":"npm run build"},"directories":null,"devDependencies":{"babel-eslint":"^8.0.3","babel-plugin-transform-flow-strip-types":"^6.22.0","del":"^3.0.0","eslint":"^4.12.1","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^2.9.0","eslint-plugin-flowtype":"^2.39.1","eslint-plugin-node":"^5.2.1","flow-bin":"^0.68.0","flow-remove-types":"^1.2.3","husky":"^0.14.3","jest":"^21.2.1","lint-staged":"^6.0.0","make-dir":"^1.2.0","parent-module":"^0.1.0","prettier":"^1.8.2","remark-cli":"^5.0.0","remark-preset-davidtheclark":"^0.7.0"},"dependencies":{"import-fresh":"^2.0.0","is-directory":"^0.3.1","js-yaml":"^3.13.1","parse-json":"^4.0.0"},"engines":{"node":">=4"},"files":["dist"],"main":"dist/index.js","dist":{"shasum":"040f726809c591e77a17c0a3626ca45b4f168b1a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-5.2.1.tgz"},"lint-staged":{"*.js":["eslint --fix","prettier --write","git add"],"*.md":["npm run lint:md-partial","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/*.js"],"coverageReporters":["text","html","lcov"],"coverageThreshold":{"global":{"branches":100,"functions":100,"lines":100,"statements":100}},"resetModules":true,"resetMocks":true},"babel":{"plugins":["transform-flow-strip-types"]}},"6.0.0":{"_id":"cosmiconfig@6.0.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"6.0.0","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com","url":""},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru","url":""},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com","url":""}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"del-cli --dot=true \"./dist/**/*\"","build":"npm run clean && npm run build:compile && npm run build:types","build:compile":"cross-env NODE_ENV=production babel src -d dist --verbose --extensions .js,.ts --ignore \"**/**/*.test.js\",\"**/**/*.test.ts\" --source-maps","build:types":"cross-env NODE_ENV=production tsc --project tsconfig.types.json","dev":"npm run clean && npm run build:compile -- --watch","lint":"eslint --ext .js,.ts . && npm run lint:md","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","typescript":"tsc","test":"jest --coverage","test:watch":"jest --watch","check:all":"npm run test && npm run typescript && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build"},"directories":null,"devDependencies":{"@babel/cli":"^7.6.4","@babel/core":"^7.6.4","@babel/preset-env":"^7.6.3","@babel/preset-typescript":"^7.6.0","@types/jest":"^24.0.19","@types/node":"^12.11.5","@typescript-eslint/eslint-plugin":"^2.5.0","@typescript-eslint/parser":"^2.5.0","cross-env":"^6.0.3","del":"^5.1.0","del-cli":"^3.0.0","eslint":"^6.5.1","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^6.4.0","eslint-plugin-import":"^2.18.2","eslint-plugin-jest":"^22.20.0","eslint-plugin-node":"^10.0.0","husky":"^3.0.9","jest":"^24.9.0","lint-staged":"^9.4.2","make-dir":"^3.0.0","parent-module":"^2.0.0","prettier":"^1.18.2","remark-preset-davidtheclark":"^0.10.0","typescript":"^3.6.4"},"dependencies":{"@types/parse-json":"^4.0.0","import-fresh":"^3.1.0","parse-json":"^5.0.0","path-type":"^4.0.0","yaml":"^1.7.2"},"engines":{"node":">=8"},"files":["dist"],"main":"dist/index.js","dist":{"shasum":"da4fee853c52f6b1e6935f41c1a2fc50bd4a9982","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-6.0.0.tgz"},"types":"dist/index.d.ts","husky":{"hooks":{"pre-commit":"lint-staged && npm run typescript && npm run test","pre-push":"npm run check:all"}},"lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write","git add"],"*.{json,yml,yaml}":["prettier --write","git add"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format","git add"]},"prettier":{"trailingComma":"all","arrowParens":"always","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/**/*.{js,ts}"],"coverageReporters":["text","html","lcov"],"coverageThreshold":{"global":{"branches":100,"functions":100,"lines":100,"statements":100}},"resetModules":true,"resetMocks":true,"restoreMocks":true},"babel":{"presets":[["@babel/preset-env",{"targets":{"node":"8.9"}}],"@babel/preset-typescript"]}},"7.0.0":{"_id":"cosmiconfig@7.0.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"7.0.0","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com"},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"del-cli --dot=true \"./dist/**/*\"","build":"npm run clean && npm run build:compile && npm run build:types","build:compile":"cross-env NODE_ENV=production babel src -d dist --verbose --extensions .js,.ts --ignore \"**/**/*.test.js\",\"**/**/*.test.ts\" --source-maps","build:types":"cross-env NODE_ENV=production tsc --project tsconfig.types.json","dev":"npm run clean && npm run build:compile -- --watch","lint":"eslint --ext .js,.ts . && npm run lint:md","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","typescript":"tsc","test":"jest --coverage","test:watch":"jest --watch","check:all":"npm run test && npm run typescript && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build"},"directories":{},"devDependencies":{"@babel/cli":"^7.10.4","@babel/core":"^7.10.4","@babel/preset-env":"^7.10.4","@babel/preset-typescript":"^7.10.4","@types/jest":"^26.0.4","@types/node":"^14.0.22","@typescript-eslint/eslint-plugin":"^3.6.0","@typescript-eslint/parser":"^3.6.0","cross-env":"^7.0.2","del":"^5.1.0","del-cli":"^3.0.1","eslint":"^7.4.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^6.11.0","eslint-plugin-import":"^2.22.0","eslint-plugin-jest":"^23.18.0","eslint-plugin-node":"^11.1.0","husky":"^4.2.5","jest":"^26.1.0","lint-staged":"^10.2.11","make-dir":"^3.1.0","parent-module":"^2.0.0","prettier":"^2.0.5","remark-preset-davidtheclark":"^0.12.0","typescript":"^3.9.6"},"dependencies":{"@types/parse-json":"^4.0.0","import-fresh":"^3.2.1","parse-json":"^5.0.0","path-type":"^4.0.0","yaml":"^1.10.0"},"engines":{"node":">=10"},"main":"dist/index.js","dist":{"shasum":"ef9b44d773959cae63ddecd122de23853b60f8d3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-7.0.0.tgz"},"types":"dist/index.d.ts","husky":{"hooks":{"pre-commit":"lint-staged && npm run typescript && npm run test","pre-push":"npm run check:all"}},"lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"prettier":{"trailingComma":"all","arrowParens":"always","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/**/*.{js,ts}"],"coverageReporters":["text","html","lcov"],"coverageThreshold":{"global":{"branches":100,"functions":100,"lines":100,"statements":100}},"resetModules":true,"resetMocks":true,"restoreMocks":true},"babel":{"presets":[["@babel/preset-env",{"targets":{"node":"10"}}],"@babel/preset-typescript"]},"gitHead":"07e7637b74cb01b23f351bc1586390d20eed881f","_nodeVersion":"12.18.0","_npmVersion":"6.14.6","maintainers":[{"email":"david.dave.clark@gmail.com","name":"davidtheclark"},{"email":"sudo.suhas@gmail.com","name":"sudo-suhas"}],"_npmUser":{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_7.0.0_1596312099515_0.9850646036429751"},"_hasShrinkwrap":false},"7.0.1":{"_id":"cosmiconfig@7.0.1","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"7.0.1","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com","url":""},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru","url":""},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com","url":""}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"del-cli --dot=true \"./dist/**/*\"","build":"npm run clean && npm run build:compile && npm run build:types","build:compile":"cross-env NODE_ENV=production babel src -d dist --verbose --extensions .js,.ts --ignore \"**/**/*.test.js\",\"**/**/*.test.ts\" --source-maps","build:types":"cross-env NODE_ENV=production tsc --project tsconfig.types.json","dev":"npm run clean && npm run build:compile -- --watch","lint":"eslint --ext .js,.ts . && npm run lint:md","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","typescript":"tsc","test":"jest --coverage","test:watch":"jest --watch","check:all":"npm run test && npm run typescript && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build"},"directories":null,"devDependencies":{"@babel/cli":"^7.10.4","@babel/core":"^7.10.4","@babel/preset-env":"^7.10.4","@babel/preset-typescript":"^7.10.4","@types/jest":"^26.0.4","@types/node":"^14.0.22","@typescript-eslint/eslint-plugin":"^3.6.0","@typescript-eslint/parser":"^3.6.0","cross-env":"^7.0.2","del":"^5.1.0","del-cli":"^3.0.1","eslint":"^7.4.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^6.11.0","eslint-plugin-import":"^2.22.0","eslint-plugin-jest":"^23.18.0","eslint-plugin-node":"^11.1.0","husky":"^4.2.5","jest":"^26.1.0","lint-staged":"^10.2.11","make-dir":"^3.1.0","parent-module":"^2.0.0","prettier":"^2.0.5","remark-preset-davidtheclark":"^0.12.0","typescript":"^3.9.6"},"dependencies":{"@types/parse-json":"^4.0.0","import-fresh":"^3.2.1","parse-json":"^5.0.0","path-type":"^4.0.0","yaml":"^1.10.0"},"engines":{"node":">=10"},"files":["dist"],"main":"dist/index.js","dist":{"shasum":"714d756522cace867867ccb4474c5d01bbae5d6d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-7.0.1.tgz"},"types":"dist/index.d.ts","husky":{"hooks":{"pre-commit":"lint-staged && npm run typescript && npm run test","pre-push":"npm run check:all"}},"lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"prettier":{"trailingComma":"all","arrowParens":"always","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/**/*.{js,ts}"],"coverageReporters":["text","html","lcov"],"coverageThreshold":{"global":{"branches":100,"functions":100,"lines":100,"statements":100}},"resetModules":true,"resetMocks":true,"restoreMocks":true},"babel":{"presets":[["@babel/preset-env",{"targets":{"node":"10"}}],"@babel/preset-typescript"]}},"7.1.0":{"_id":"cosmiconfig@7.1.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"7.1.0","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com","url":""},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru","url":""},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com","url":""}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"del-cli --dot=true \"./dist/**/*\"","build":"npm run clean && npm run build:compile && npm run build:types","build:compile":"cross-env NODE_ENV=production babel src -d dist --verbose --extensions .js,.ts --ignore \"**/**/*.test.js\",\"**/**/*.test.ts\" --source-maps","build:types":"cross-env NODE_ENV=production tsc --project tsconfig.types.json","dev":"npm run clean && npm run build:compile -- --watch","lint":"eslint --ext .js,.ts . && npm run lint:md","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","typescript":"tsc","test":"jest --coverage","test:watch":"jest --watch","check:all":"npm run test && npm run typescript && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build"},"directories":null,"devDependencies":{"@babel/cli":"^7.10.4","@babel/core":"^7.10.4","@babel/preset-env":"^7.10.4","@babel/preset-typescript":"^7.10.4","@types/jest":"^26.0.4","@types/node":"^14.0.22","@typescript-eslint/eslint-plugin":"^3.6.0","@typescript-eslint/parser":"^3.6.0","cross-env":"^7.0.2","del":"^5.1.0","del-cli":"^3.0.1","eslint":"^7.4.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^6.11.0","eslint-plugin-import":"^2.22.0","eslint-plugin-jest":"^23.18.0","eslint-plugin-node":"^11.1.0","husky":"^4.2.5","jest":"^26.1.0","lint-staged":"^10.2.11","make-dir":"^3.1.0","parent-module":"^2.0.0","prettier":"^2.0.5","remark-preset-davidtheclark":"^0.12.0","typescript":"^3.9.6"},"dependencies":{"@types/parse-json":"^4.0.0","import-fresh":"^3.2.1","parse-json":"^5.0.0","path-type":"^4.0.0","yaml":"^1.10.0"},"engines":{"node":">=10"},"files":["dist"],"main":"dist/index.js","dist":{"shasum":"1443b9afa596b670082ea46cbd8f6a62b84635f6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-7.1.0.tgz"},"types":"dist/index.d.ts","husky":{"hooks":{"pre-commit":"lint-staged && npm run typescript && npm run test","pre-push":"npm run check:all"}},"lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"prettier":{"trailingComma":"all","arrowParens":"always","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/**/*.{js,ts}"],"coverageReporters":["text","html","lcov"],"coverageThreshold":{"global":{"branches":100,"functions":100,"lines":100,"statements":100}},"resetModules":true,"resetMocks":true,"restoreMocks":true},"babel":{"presets":[["@babel/preset-env",{"targets":{"node":"10"}}],"@babel/preset-typescript"]}},"8.0.0":{"_id":"cosmiconfig@8.0.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"8.0.0","keywords":["load","configuration","config"],"homepage":"https://github.com/davidtheclark/cosmiconfig#readme","author":{"name":"David Clark","email":"david.dave.clark@gmail.com","url":""},"contributors":[{"name":"Bogdan Chadkin","email":"trysound@yandex.ru","url":""},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com","url":""}],"repository":{"type":"git","url":"git+https://github.com/davidtheclark/cosmiconfig.git"},"bugs":{"url":"https://github.com/davidtheclark/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"del-cli --dot=true \"./dist/**/*\"","build":"npm run clean && npm run build:compile && npm run build:types","build:compile":"cross-env NODE_ENV=production babel src -d dist --verbose --extensions .js,.ts --ignore \"**/**/*.test.js\",\"**/**/*.test.ts\" --source-maps","build:types":"cross-env NODE_ENV=production tsc --project tsconfig.types.json","dev":"npm run clean && npm run build:compile -- --watch","lint":"eslint --ext .js,.ts . && npm run lint:md","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","typescript":"tsc","test":"jest --coverage","test:watch":"jest --watch","check:all":"npm run test && npm run typescript && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build"},"directories":null,"devDependencies":{"@babel/cli":"^7.10.4","@babel/core":"^7.10.4","@babel/preset-env":"^7.10.4","@babel/preset-typescript":"^7.10.4","@types/jest":"^26.0.4","@types/js-yaml":"^4.0.5","@types/node":"^14.0.22","@types/parse-json":"^4.0.0","@typescript-eslint/eslint-plugin":"^3.6.0","@typescript-eslint/parser":"^3.6.0","cross-env":"^7.0.2","del":"^5.1.0","del-cli":"^3.0.1","eslint":"^7.4.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^6.11.0","eslint-plugin-import":"^2.22.0","eslint-plugin-jest":"^23.18.0","eslint-plugin-node":"^11.1.0","husky":"^4.2.5","jest":"^26.1.0","lint-staged":"^10.2.11","make-dir":"^3.1.0","parent-module":"^2.0.0","prettier":"^2.0.5","remark-preset-davidtheclark":"^0.12.0","typescript":"^3.9.6"},"dependencies":{"import-fresh":"^3.2.1","js-yaml":"^4.1.0","parse-json":"^5.0.0","path-type":"^4.0.0"},"engines":{"node":">=14"},"files":["dist"],"main":"dist/index.js","dist":{"shasum":"e9feae014eab580f858f8a0288f38997a7bebe97","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-8.0.0.tgz"},"types":"dist/index.d.ts","husky":{"hooks":{"pre-commit":"lint-staged && npm run typescript && npm run test","pre-push":"npm run check:all"}},"lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"prettier":{"trailingComma":"all","arrowParens":"always","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/**/*.{js,ts}"],"coverageReporters":["text","html","lcov"],"coverageThreshold":{"global":{"branches":100,"functions":100,"lines":100,"statements":100}},"resetModules":true,"resetMocks":true,"restoreMocks":true},"babel":{"presets":[["@babel/preset-env",{"targets":{"node":"14"}}],"@babel/preset-typescript"]}},"8.1.0":{"_id":"cosmiconfig@8.1.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"8.1.0","keywords":["load","configuration","config"],"homepage":"https://github.com/cosmiconfig/cosmiconfig#readme","author":{"name":"Daniel Fischer","email":"daniel@d-fischer.dev"},"contributors":[{"name":"David Clark","email":"david.dave.clark@gmail.com"},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/cosmiconfig/cosmiconfig.git"},"bugs":{"url":"https://github.com/cosmiconfig/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"del-cli --dot=true \"./dist/**/*\"","build":"npm run clean && npm run build:compile && npm run build:types","build:compile":"cross-env NODE_ENV=production babel src -d dist --verbose --extensions .js,.ts --ignore \"**/**/*.test.js\",\"**/**/*.test.ts\" --source-maps","build:types":"cross-env NODE_ENV=production tsc --project tsconfig.types.json","dev":"npm run clean && npm run build:compile -- --watch","lint":"eslint --ext .js,.ts . && npm run lint:md","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","typescript":"tsc","test":"jest --coverage","test:watch":"jest --watch","check:all":"npm run test && npm run typescript && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build"},"directories":{},"devDependencies":{"@babel/cli":"^7.10.4","@babel/core":"^7.10.4","@babel/preset-env":"^7.10.4","@babel/preset-typescript":"^7.10.4","@types/jest":"^26.0.4","@types/js-yaml":"^4.0.5","@types/node":"^14.0.22","@types/parse-json":"^4.0.0","@typescript-eslint/eslint-plugin":"^3.6.0","@typescript-eslint/parser":"^3.6.0","cross-env":"^7.0.2","del":"^5.1.0","del-cli":"^3.0.1","eslint":"^7.4.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^6.11.0","eslint-plugin-import":"^2.22.0","eslint-plugin-jest":"^23.18.0","eslint-plugin-node":"^11.1.0","husky":"^4.2.5","jest":"^26.1.0","lint-staged":"^10.2.11","make-dir":"^3.1.0","parent-module":"^2.0.0","prettier":"^2.0.5","remark-preset-davidtheclark":"^0.12.0","typescript":"^3.9.6"},"dependencies":{"import-fresh":"^3.2.1","js-yaml":"^4.1.0","parse-json":"^5.0.0","path-type":"^4.0.0"},"engines":{"node":">=14"},"main":"dist/index.js","dist":{"shasum":"947e174c796483ccf0a48476c24e4fefb7e1aea8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-8.1.0.tgz"},"types":"dist/index.d.ts","husky":{"hooks":{"pre-commit":"lint-staged && npm run typescript && npm run test","pre-push":"npm run check:all"}},"lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"funding":"https://github.com/sponsors/d-fischer","prettier":{"trailingComma":"all","arrowParens":"always","singleQuote":true,"printWidth":80,"tabWidth":2},"jest":{"testEnvironment":"node","collectCoverageFrom":["src/**/*.{js,ts}"],"coverageReporters":["text","html","lcov"],"coverageThreshold":{"global":{"branches":100,"functions":100,"lines":100,"statements":100}},"resetModules":true,"resetMocks":true,"restoreMocks":true},"babel":{"presets":[["@babel/preset-env",{"targets":{"node":"14"}}],"@babel/preset-typescript"]},"gitHead":"5633110822a5e35e0f6d6e7102ce69875a9ff6bc","_nodeVersion":"18.11.0","_npmVersion":"8.19.2","_npmUser":{"name":"d-fischer","email":"daniel@d-fischer.dev"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},{"name":"ybiquitous","email":"ybiquitous@gmail.com"},{"name":"sudo-suhas","email":"sudo.suhas@gmail.com"},{"name":"d-fischer","email":"daniel@d-fischer.dev"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_8.1.0_1677275860454_0.0031086881552699897"},"_hasShrinkwrap":false},"8.1.1":{"_id":"cosmiconfig@8.1.1","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"8.1.1","keywords":["load","configuration","config"],"homepage":"https://github.com/cosmiconfig/cosmiconfig#readme","author":{"name":"Daniel Fischer","email":"daniel@d-fischer.dev"},"contributors":[{"name":"David Clark","email":"david.dave.clark@gmail.com"},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/cosmiconfig/cosmiconfig.git"},"bugs":{"url":"https://github.com/cosmiconfig/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"del-cli --dot=true \"./dist/**/*\"","build":"npm run clean && npm run build:compile && npm run build:types","build:compile":"cross-env NODE_ENV=production babel src -d dist --verbose --extensions .js,.ts --ignore \"**/**/*.test.js\",\"**/**/*.test.ts\" --source-maps","build:types":"cross-env NODE_ENV=production tsc --project tsconfig.types.json","dev":"npm run clean && npm run build:compile -- --watch","lint":"eslint --ext .js,.ts . && npm run lint:md","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","typescript":"tsc","test":"vitest run --coverage","test:watch":"vitest","check:all":"npm run test && npm run typescript && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build"},"directories":{},"devDependencies":{"@babel/cli":"^7.10.4","@babel/core":"^7.10.4","@babel/preset-env":"^7.10.4","@babel/preset-typescript":"^7.10.4","@types/js-yaml":"^4.0.5","@types/node":"^14.0.22","@types/parse-json":"^4.0.0","@typescript-eslint/eslint-plugin":"^5.54.1","@typescript-eslint/parser":"^5.54.1","@vitest/coverage-istanbul":"^0.29.2","cross-env":"^7.0.2","del":"^5.1.0","del-cli":"^3.0.1","eslint":"^8.36.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^6.11.0","eslint-import-resolver-typescript":"^3.5.3","eslint-plugin-import":"^2.22.0","eslint-plugin-node":"^11.1.0","eslint-plugin-vitest":"^0.0.54","husky":"^4.2.5","lint-staged":"^10.2.11","make-dir":"^3.1.0","parent-module":"^2.0.0","prettier":"^2.0.5","remark-preset-davidtheclark":"^0.12.0","typescript":"^4.9.5","vitest":"^0.29.2"},"dependencies":{"import-fresh":"^3.2.1","js-yaml":"^4.1.0","parse-json":"^5.0.0","path-type":"^4.0.0"},"engines":{"node":">=14"},"main":"dist/index.js","dist":{"shasum":"46f82063efe81bb8b8fdb212a45ba785606283e3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-8.1.1.tgz"},"types":"dist/index.d.ts","husky":{"hooks":{"pre-commit":"lint-staged && npm run typescript && npm run test","pre-push":"npm run check:all"}},"lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"funding":"https://github.com/sponsors/d-fischer","prettier":{"trailingComma":"all","arrowParens":"always","singleQuote":true,"printWidth":80,"tabWidth":2},"babel":{"presets":[["@babel/preset-env",{"targets":{"node":"14"}}],"@babel/preset-typescript"]},"gitHead":"193cb57ed96a3c84e14855000aa64f3fcd95ee6f","_nodeVersion":"18.15.0","_npmVersion":"9.6.2","_npmUser":{"name":"d-fischer","email":"daniel@d-fischer.dev"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},{"name":"ybiquitous","email":"ybiquitous@gmail.com"},{"name":"sudo-suhas","email":"sudo.suhas@gmail.com"},{"name":"d-fischer","email":"daniel@d-fischer.dev"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_8.1.1_1679062286154_0.991406064098546"},"_hasShrinkwrap":false},"8.1.2":{"_id":"cosmiconfig@8.1.2","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"8.1.2","keywords":["load","configuration","config"],"homepage":"https://github.com/cosmiconfig/cosmiconfig#readme","author":{"name":"Daniel Fischer","email":"daniel@d-fischer.dev"},"contributors":[{"name":"David Clark","email":"david.dave.clark@gmail.com"},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/cosmiconfig/cosmiconfig.git"},"bugs":{"url":"https://github.com/cosmiconfig/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"del-cli --dot=true \"./dist/**/*\"","build":"npm run clean && npm run build:compile && npm run build:types","build:compile":"cross-env NODE_ENV=production babel src -d dist --verbose --extensions .js,.ts --ignore \"**/**/*.test.js\",\"**/**/*.test.ts\" --source-maps","build:types":"cross-env NODE_ENV=production tsc --project tsconfig.types.json","dev":"npm run clean && npm run build:compile -- --watch","lint":"eslint --ext .js,.ts . && npm run lint:md","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","typescript":"tsc","test":"vitest run --coverage","test:watch":"vitest","check:all":"npm run test && npm run typescript && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build"},"directories":{},"devDependencies":{"@babel/cli":"^7.10.4","@babel/core":"^7.10.4","@babel/preset-env":"^7.10.4","@babel/preset-typescript":"^7.10.4","@types/js-yaml":"^4.0.5","@types/node":"^14.0.22","@types/parse-json":"^4.0.0","@typescript-eslint/eslint-plugin":"^5.54.1","@typescript-eslint/parser":"^5.54.1","@vitest/coverage-istanbul":"^0.29.2","cross-env":"^7.0.2","del":"^5.1.0","del-cli":"^3.0.1","eslint":"^8.36.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^6.11.0","eslint-import-resolver-typescript":"^3.5.3","eslint-plugin-import":"^2.22.0","eslint-plugin-node":"^11.1.0","eslint-plugin-vitest":"^0.0.54","husky":"^4.2.5","lint-staged":"^10.2.11","make-dir":"^3.1.0","parent-module":"^2.0.0","prettier":"^2.0.5","remark-preset-davidtheclark":"^0.12.0","typescript":"^4.9.5","vitest":"^0.29.2"},"dependencies":{"import-fresh":"^3.2.1","js-yaml":"^4.1.0","parse-json":"^5.0.0","path-type":"^4.0.0"},"engines":{"node":">=14"},"main":"dist/index.js","dist":{"shasum":"3a9af12d5663d041cd2ab448e9a0e62035ea902a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-8.1.2.tgz"},"types":"dist/index.d.ts","husky":{"hooks":{"pre-commit":"lint-staged && npm run typescript && npm run test","pre-push":"npm run check:all"}},"lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"funding":"https://github.com/sponsors/d-fischer","prettier":{"trailingComma":"all","arrowParens":"always","singleQuote":true,"printWidth":80,"tabWidth":2},"babel":{"presets":[["@babel/preset-env",{"targets":{"node":"14"}}],"@babel/preset-typescript"]},"gitHead":"49b1586d98cabd7578483a4aaffce40f48780ab8","_nodeVersion":"18.15.0","_npmVersion":"9.6.2","_npmUser":{"name":"d-fischer","email":"daniel@d-fischer.dev"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},{"name":"ybiquitous","email":"ybiquitous@gmail.com"},{"name":"sudo-suhas","email":"sudo.suhas@gmail.com"},{"name":"d-fischer","email":"daniel@d-fischer.dev"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_8.1.2_1679072559924_0.6696259633882069"},"_hasShrinkwrap":false},"8.1.3":{"_id":"cosmiconfig@8.1.3","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"8.1.3","keywords":["load","configuration","config"],"homepage":"https://github.com/cosmiconfig/cosmiconfig#readme","author":{"name":"Daniel Fischer","email":"daniel@d-fischer.dev"},"contributors":[{"name":"David Clark","email":"david.dave.clark@gmail.com"},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/cosmiconfig/cosmiconfig.git"},"bugs":{"url":"https://github.com/cosmiconfig/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"del-cli --dot=true \"./dist/**/*\"","build":"npm run clean && npm run build:compile && npm run build:types","build:compile":"cross-env NODE_ENV=production babel src -d dist --verbose --extensions .js,.ts --ignore \"**/**/*.test.js\",\"**/**/*.test.ts\" --source-maps","build:types":"cross-env NODE_ENV=production tsc --project tsconfig.types.json","dev":"npm run clean && npm run build:compile -- --watch","lint":"eslint --ext .js,.ts . && npm run lint:md","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","typescript":"tsc","test":"vitest run --coverage","test:watch":"vitest","check:all":"npm run test && npm run typescript && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build"},"directories":{},"devDependencies":{"@babel/cli":"^7.10.4","@babel/core":"^7.10.4","@babel/preset-env":"^7.10.4","@babel/preset-typescript":"^7.10.4","@types/js-yaml":"^4.0.5","@types/node":"^14.0.22","@types/parse-json":"^4.0.0","@typescript-eslint/eslint-plugin":"^5.54.1","@typescript-eslint/parser":"^5.54.1","@vitest/coverage-istanbul":"^0.29.2","cross-env":"^7.0.2","del":"^5.1.0","del-cli":"^3.0.1","eslint":"^8.36.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^6.11.0","eslint-import-resolver-typescript":"^3.5.3","eslint-plugin-import":"^2.22.0","eslint-plugin-node":"^11.1.0","eslint-plugin-vitest":"^0.0.54","husky":"^4.2.5","lint-staged":"^10.2.11","make-dir":"^3.1.0","parent-module":"^2.0.0","prettier":"^2.0.5","remark-preset-davidtheclark":"^0.12.0","typescript":"^4.9.5","vitest":"^0.29.2"},"dependencies":{"import-fresh":"^3.2.1","js-yaml":"^4.1.0","parse-json":"^5.0.0","path-type":"^4.0.0"},"engines":{"node":">=14"},"main":"dist/index.js","dist":{"shasum":"0e614a118fcc2d9e5afc2f87d53cd09931015689","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-8.1.3.tgz"},"types":"dist/index.d.ts","husky":{"hooks":{"pre-commit":"lint-staged && npm run typescript && npm run test","pre-push":"npm run check:all"}},"lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"funding":"https://github.com/sponsors/d-fischer","prettier":{"trailingComma":"all","arrowParens":"always","singleQuote":true,"printWidth":80,"tabWidth":2},"babel":{"presets":[["@babel/preset-env",{"targets":{"node":"14"}}],"@babel/preset-typescript"]},"gitHead":"dee5198fd96c3f64b8b004cca9117f06aafe1212","_nodeVersion":"18.15.0","_npmVersion":"9.6.2","_npmUser":{"name":"d-fischer","email":"daniel@d-fischer.dev"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},{"name":"ybiquitous","email":"ybiquitous@gmail.com"},{"name":"sudo-suhas","email":"sudo.suhas@gmail.com"},{"name":"d-fischer","email":"daniel@d-fischer.dev"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_8.1.3_1679172675932_0.6114107865329328"},"_hasShrinkwrap":false},"8.2.0":{"_id":"cosmiconfig@8.2.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, or CommonJS module","version":"8.2.0","keywords":["load","configuration","config"],"homepage":"https://github.com/cosmiconfig/cosmiconfig#readme","author":{"name":"Daniel Fischer","email":"daniel@d-fischer.dev","url":""},"contributors":[{"name":"David Clark","email":"david.dave.clark@gmail.com","url":""},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru","url":""},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com","url":""}],"repository":{"type":"git","url":"git+https://github.com/cosmiconfig/cosmiconfig.git"},"bugs":{"url":"https://github.com/cosmiconfig/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"del-cli --dot=true \"./dist/**/*\"","build":"npm run clean && npm run build:compile && npm run build:types","build:compile":"cross-env NODE_ENV=production babel src -d dist --verbose --extensions .js,.ts --ignore \"**/**/*.test.js\",\"**/**/*.test.ts\" --source-maps","build:types":"cross-env NODE_ENV=production tsc --project tsconfig.types.json","dev":"npm run clean && npm run build:compile -- --watch","lint":"eslint --ext .js,.ts . && npm run lint:md","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","typescript":"tsc","test":"vitest run --coverage","test:watch":"vitest","check:all":"npm run test && npm run typescript && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build"},"directories":null,"devDependencies":{"@babel/cli":"^7.19.3","@babel/core":"^7.20.2","@babel/preset-env":"^7.20.2","@babel/preset-typescript":"^7.18.6","@types/js-yaml":"^4.0.5","@types/node":"^14.0.22","@types/parse-json":"^4.0.0","@typescript-eslint/eslint-plugin":"^5.54.1","@typescript-eslint/parser":"^5.54.1","@vitest/coverage-istanbul":"^0.29.2","cross-env":"^7.0.2","del":"^5.1.0","del-cli":"^3.0.1","eslint":"^8.36.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^6.11.0","eslint-import-resolver-typescript":"^3.5.3","eslint-plugin-import":"^2.22.0","eslint-plugin-node":"^11.1.0","eslint-plugin-vitest":"^0.0.54","husky":"^4.2.5","lint-staged":"^10.2.11","make-dir":"^3.1.0","parent-module":"^2.0.0","prettier":"^2.0.5","remark-preset-davidtheclark":"^0.12.0","typescript":"^4.9.5","vitest":"^0.29.2"},"dependencies":{"import-fresh":"^3.2.1","js-yaml":"^4.1.0","parse-json":"^5.0.0","path-type":"^4.0.0"},"engines":{"node":">=14"},"files":["dist"],"main":"dist/index.js","dist":{"shasum":"f7d17c56a590856cd1e7cee98734dca272b0d8fd","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-8.2.0.tgz"},"types":"dist/index.d.ts","husky":{"hooks":{"pre-commit":"lint-staged && npm run typescript && npm run test","pre-push":"npm run check:all"}},"lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"funding":"https://github.com/sponsors/d-fischer","prettier":{"trailingComma":"all","arrowParens":"always","singleQuote":true,"printWidth":80,"tabWidth":2},"babel":{"presets":[["@babel/preset-env",{"targets":{"node":"14"},"exclude":["proposal-dynamic-import"]}],"@babel/preset-typescript"]}},"8.3.0":{"_id":"cosmiconfig@8.3.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, TypeScript module, and more!","version":"8.3.0","keywords":["load","configuration","config"],"homepage":"https://github.com/cosmiconfig/cosmiconfig#readme","author":{"name":"Daniel Fischer","email":"daniel@d-fischer.dev"},"contributors":[{"name":"Randolf J","email":"jrandolf@google.com"},{"name":"David Clark","email":"david.dave.clark@gmail.com"},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/cosmiconfig/cosmiconfig.git"},"bugs":{"url":"https://github.com/cosmiconfig/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"git clean -Xdf -e '!node_modules' .","build":"npm run build:tsc","build:tsc":"cross-env NODE_ENV=production tsc -b","dev":"npm run build:tsc -- --watch","lint":"eslint --ext .js,.ts .","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","test":"vitest run --coverage","test:watch":"vitest","check:all":"npm run test && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build","prepare":"husky install"},"directories":{},"devDependencies":{"@types/js-yaml":"^4.0.5","@types/node":"~18","@types/parse-json":"^4.0.0","@typescript-eslint/eslint-plugin":"^6.5.0","@typescript-eslint/parser":"^6.5.0","@vitest/coverage-istanbul":"^0.34.3","cross-env":"^7.0.3","del":"^7.1.0","del-cli":"^5.1.0","eslint":"^8.48.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^9.0.0","eslint-import-resolver-typescript":"^3.6.0","eslint-plugin-import":"^2.28.1","eslint-plugin-node":"^11.1.0","eslint-plugin-vitest":"^0.2.8","husky":"^8.0.3","lint-staged":"^14.0.1","make-dir":"^4.0.0","parent-module":"^3.0.0","prettier":"^3.0.3","remark-preset-davidtheclark":"^0.12.0","typescript":"^5.2.2","vitest":"^0.34.3"},"peerDependencies":{"typescript":">=4.9.5"},"dependencies":{"import-fresh":"^3.3.0","js-yaml":"^4.1.0","parse-json":"^5.2.0","path-type":"^4.0.0"},"engines":{"node":">=18"},"main":"dist/index.js","dist":{"shasum":"a90c59a5cf02ca4419f9f2071682e096edb4f6fd","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-8.3.0.tgz"},"types":"dist/index.d.ts","lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"funding":"https://github.com/sponsors/d-fischer","peerDependenciesMeta":{"typescript":{"optional":true}},"gitHead":"6476b36bb266ab69f2df43ee3fa7ac9cca2ab7ea","_nodeVersion":"18.17.1","_npmVersion":"9.6.7","_npmUser":{"name":"jrandolf","email":"jrandolf@google.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},{"name":"d-fischer","email":"daniel@d-fischer.dev"},{"name":"jrandolf","email":"jrandolf@google.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_8.3.0_1693671341805_0.39252977719476734"},"_hasShrinkwrap":false},"8.3.1":{"_id":"cosmiconfig@8.3.1","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, TypeScript module, and more!","version":"8.3.1","keywords":["load","configuration","config"],"homepage":"https://github.com/cosmiconfig/cosmiconfig#readme","author":{"name":"Daniel Fischer","email":"daniel@d-fischer.dev"},"contributors":[{"name":"Randolf J","email":"jrandolf@google.com"},{"name":"David Clark","email":"david.dave.clark@gmail.com"},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/cosmiconfig/cosmiconfig.git"},"bugs":{"url":"https://github.com/cosmiconfig/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"git clean -Xdf -e '!node_modules' .","build":"npm run build:tsc","build:tsc":"cross-env NODE_ENV=production tsc -b","dev":"npm run build:tsc -- --watch","lint":"eslint --ext .js,.ts .","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","test":"vitest run --coverage","test:watch":"vitest","check:all":"npm run test && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build","prepare":"husky install"},"directories":{},"devDependencies":{"@types/js-yaml":"^4.0.5","@types/node":"~18","@types/parse-json":"^4.0.0","@typescript-eslint/eslint-plugin":"^6.5.0","@typescript-eslint/parser":"^6.5.0","@vitest/coverage-istanbul":"^0.34.3","cross-env":"^7.0.3","del":"^7.1.0","del-cli":"^5.1.0","eslint":"^8.48.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^9.0.0","eslint-import-resolver-typescript":"^3.6.0","eslint-plugin-import":"^2.28.1","eslint-plugin-node":"^11.1.0","eslint-plugin-vitest":"^0.2.8","husky":"^8.0.3","lint-staged":"^14.0.1","make-dir":"^4.0.0","parent-module":"^3.0.0","prettier":"^3.0.3","remark-preset-davidtheclark":"^0.12.0","typescript":"^5.2.2","vitest":"^0.34.3"},"peerDependencies":{"typescript":">=4.9.5"},"dependencies":{"import-fresh":"^3.3.0","js-yaml":"^4.1.0","parse-json":"^5.2.0","path-type":"^4.0.0"},"engines":{"node":">=18"},"main":"dist/index.js","dist":{"shasum":"9a505171ad61f777763af9c48d452629a5b087f8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-8.3.1.tgz"},"types":"dist/index.d.ts","lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"funding":"https://github.com/sponsors/d-fischer","peerDependenciesMeta":{"typescript":{"optional":true}},"gitHead":"408c9cc41002ba53afe6068441cfc7a80a7f0e24","_nodeVersion":"18.17.1","_npmVersion":"9.6.7","_npmUser":{"name":"jrandolf","email":"jrandolf@google.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},{"name":"d-fischer","email":"daniel@d-fischer.dev"},{"name":"jrandolf","email":"jrandolf@google.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_8.3.1_1693684656282_0.7497260846325773"},"_hasShrinkwrap":false},"8.3.2":{"_id":"cosmiconfig@8.3.2","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, TypeScript module, and more!","version":"8.3.2","keywords":["load","configuration","config"],"homepage":"https://github.com/cosmiconfig/cosmiconfig#readme","author":{"name":"Daniel Fischer","email":"daniel@d-fischer.dev"},"contributors":[{"name":"Randolf J","email":"jrandolf@google.com"},{"name":"David Clark","email":"david.dave.clark@gmail.com"},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/cosmiconfig/cosmiconfig.git"},"bugs":{"url":"https://github.com/cosmiconfig/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"git clean -Xdf -e '!node_modules' .","build":"npm run build:tsc","build:tsc":"cross-env NODE_ENV=production tsc -b","dev":"npm run build:tsc -- --watch","lint":"eslint --ext .js,.ts .","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","test":"vitest run --coverage","test:watch":"vitest","check:all":"npm run test && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build","prepare":"husky install"},"directories":{},"devDependencies":{"@types/js-yaml":"^4.0.5","@types/node":"~18","@types/parse-json":"^4.0.0","@typescript-eslint/eslint-plugin":"^6.5.0","@typescript-eslint/parser":"^6.5.0","@vitest/coverage-istanbul":"^0.34.3","cross-env":"^7.0.3","del":"^7.1.0","del-cli":"^5.1.0","eslint":"^8.48.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^9.0.0","eslint-import-resolver-typescript":"^3.6.0","eslint-plugin-import":"^2.28.1","eslint-plugin-node":"^11.1.0","eslint-plugin-vitest":"^0.2.8","husky":"^8.0.3","lint-staged":"^14.0.1","make-dir":"^4.0.0","parent-module":"^3.0.0","prettier":"^3.0.3","remark-preset-davidtheclark":"^0.12.0","typescript":"^5.2.2","vitest":"^0.34.3"},"peerDependencies":{"typescript":">=4.9.5"},"dependencies":{"import-fresh":"^3.3.0","js-yaml":"^4.1.0","parse-json":"^5.2.0","path-type":"^4.0.0"},"engines":{"node":">=18"},"main":"dist/index.js","dist":{"shasum":"020213ad7387482a1f3fdd5c77c300ed2c72e162","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-8.3.2.tgz"},"types":"dist/index.d.ts","lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"funding":"https://github.com/sponsors/d-fischer","peerDependenciesMeta":{"typescript":{"optional":true}},"gitHead":"6cb1e76f9b42f583bf91c9654d7b6d81fc4fc141","_nodeVersion":"18.17.1","_npmVersion":"9.6.7","_npmUser":{"name":"jrandolf","email":"jrandolf@google.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},{"name":"d-fischer","email":"daniel@d-fischer.dev"},{"name":"jrandolf","email":"jrandolf@google.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_8.3.2_1693686819994_0.537097995712521"},"_hasShrinkwrap":false},"8.3.3":{"_id":"cosmiconfig@8.3.3","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, TypeScript module, and more!","version":"8.3.3","keywords":["load","configuration","config"],"homepage":"https://github.com/cosmiconfig/cosmiconfig#readme","author":{"name":"Daniel Fischer","email":"daniel@d-fischer.dev"},"contributors":[{"name":"Randolf J","email":"jrandolf@google.com"},{"name":"David Clark","email":"david.dave.clark@gmail.com"},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/cosmiconfig/cosmiconfig.git"},"bugs":{"url":"https://github.com/cosmiconfig/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"git clean -Xdf -e '!node_modules' .","build":"npm run build:tsc","build:tsc":"cross-env NODE_ENV=production tsc -b","dev":"npm run build:tsc -- --watch","lint":"eslint --ext .js,.ts .","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","test":"vitest run --coverage","test:watch":"vitest","check:all":"npm run test && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build","prepare":"husky install"},"directories":{},"devDependencies":{"@types/js-yaml":"^4.0.5","@types/node":"^14","@types/parse-json":"^4.0.0","@typescript-eslint/eslint-plugin":"^6.5.0","@typescript-eslint/parser":"^6.5.0","@vitest/coverage-istanbul":"^0.34.3","cross-env":"^7.0.3","del":"^7.1.0","del-cli":"^5.1.0","eslint":"^8.48.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^9.0.0","eslint-import-resolver-typescript":"^3.6.0","eslint-plugin-import":"^2.28.1","eslint-plugin-node":"^11.1.0","eslint-plugin-vitest":"^0.2.8","husky":"^8.0.3","lint-staged":"^14.0.1","make-dir":"^4.0.0","parent-module":"^3.0.0","prettier":"^3.0.3","remark-preset-davidtheclark":"^0.12.0","typescript":"^5.2.2","vitest":"^0.34.3"},"peerDependencies":{"typescript":">=4.9.5"},"dependencies":{"import-fresh":"^3.3.0","js-yaml":"^4.1.0","parse-json":"^5.2.0","path-type":"^4.0.0"},"engines":{"node":">=14"},"main":"dist/index.js","dist":{"shasum":"45985f9f39f3c9330288ef642b1dcb7342bd76d7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-8.3.3.tgz"},"types":"dist/index.d.ts","lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"funding":"https://github.com/sponsors/d-fischer","peerDependenciesMeta":{"typescript":{"optional":true}},"gitHead":"bd90c8975cda6f03069260aa870a3ae1f547a80a","_nodeVersion":"18.17.1","_npmVersion":"9.6.7","_npmUser":{"name":"jrandolf","email":"jrandolf@google.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},{"name":"d-fischer","email":"daniel@d-fischer.dev"},{"name":"jrandolf","email":"jrandolf@google.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_8.3.3_1693770797584_0.345946471695898"},"_hasShrinkwrap":false},"8.3.4":{"_id":"cosmiconfig@8.3.4","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, TypeScript module, and more!","version":"8.3.4","keywords":["load","configuration","config"],"homepage":"https://github.com/cosmiconfig/cosmiconfig#readme","author":{"name":"Daniel Fischer","email":"daniel@d-fischer.dev"},"contributors":[{"name":"Randolf J","email":"jrandolf@google.com"},{"name":"David Clark","email":"david.dave.clark@gmail.com"},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/cosmiconfig/cosmiconfig.git"},"bugs":{"url":"https://github.com/cosmiconfig/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"git clean -Xdf -e '!node_modules' .","build":"npm run build:tsc","build:tsc":"cross-env NODE_ENV=production tsc -b","dev":"npm run build:tsc -- --watch","lint":"eslint --ext .js,.ts .","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","test":"vitest run --coverage","test:watch":"vitest","check:all":"npm run test && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build","prepare":"husky install"},"directories":{},"devDependencies":{"@types/js-yaml":"^4.0.5","@types/node":"^14","@types/parse-json":"^4.0.0","@typescript-eslint/eslint-plugin":"^6.5.0","@typescript-eslint/parser":"^6.5.0","@vitest/coverage-istanbul":"^0.34.3","cross-env":"^7.0.3","del":"^7.1.0","del-cli":"^5.1.0","eslint":"^8.48.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^9.0.0","eslint-import-resolver-typescript":"^3.6.0","eslint-plugin-import":"^2.28.1","eslint-plugin-node":"^11.1.0","eslint-plugin-vitest":"^0.2.8","husky":"^8.0.3","lint-staged":"^14.0.1","make-dir":"^4.0.0","parent-module":"^3.0.0","prettier":"^3.0.3","remark-preset-davidtheclark":"^0.12.0","typescript":"^5.2.2","vitest":"^0.34.3"},"peerDependencies":{"typescript":">=4.9.5"},"dependencies":{"import-fresh":"^3.3.0","js-yaml":"^4.1.0","parse-json":"^5.2.0","path-type":"^4.0.0"},"engines":{"node":">=14"},"main":"dist/index.js","dist":{"shasum":"ee1356e7f24e248a6bb34ec5d438c3dcebeb410c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-8.3.4.tgz"},"types":"dist/index.d.ts","lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"funding":"https://github.com/sponsors/d-fischer","peerDependenciesMeta":{"typescript":{"optional":true}},"gitHead":"f4eb2d78ea2cc52ee766e113011cbc4601c1c706","_nodeVersion":"18.17.1","_npmVersion":"9.6.7","_npmUser":{"name":"jrandolf","email":"jrandolf@google.com"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},{"name":"d-fischer","email":"daniel@d-fischer.dev"},{"name":"jrandolf","email":"jrandolf@google.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_8.3.4_1693856008550_0.3381592209287818"},"_hasShrinkwrap":false},"8.3.5":{"_id":"cosmiconfig@8.3.5","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, TypeScript module, and more!","version":"8.3.5","keywords":["load","configuration","config"],"homepage":"https://github.com/cosmiconfig/cosmiconfig#readme","author":{"name":"Daniel Fischer","email":"daniel@d-fischer.dev"},"contributors":[{"name":"Randolf J","email":"jrandolf@google.com"},{"name":"David Clark","email":"david.dave.clark@gmail.com"},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/cosmiconfig/cosmiconfig.git"},"bugs":{"url":"https://github.com/cosmiconfig/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"git clean -Xdf -e '!node_modules' .","build":"npm run build:tsc","build:tsc":"cross-env NODE_ENV=production tsc -b","dev":"npm run build:tsc -- --watch","lint":"eslint --ext .js,.ts .","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","test":"vitest run --coverage","test:watch":"vitest","check:all":"npm run test && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build","prepare":"husky install"},"directories":{},"devDependencies":{"@types/js-yaml":"^4.0.5","@types/node":"^14","@types/parse-json":"^4.0.0","@typescript-eslint/eslint-plugin":"^6.5.0","@typescript-eslint/parser":"^6.5.0","@vitest/coverage-istanbul":"^0.34.3","cross-env":"^7.0.3","del":"^7.1.0","del-cli":"^5.1.0","eslint":"^8.48.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^9.0.0","eslint-import-resolver-typescript":"^3.6.0","eslint-plugin-import":"^2.28.1","eslint-plugin-node":"^11.1.0","eslint-plugin-vitest":"^0.2.8","husky":"^8.0.3","lint-staged":"^14.0.1","make-dir":"^4.0.0","parent-module":"^3.0.0","prettier":"^3.0.3","remark-preset-davidtheclark":"^0.12.0","typescript":"^5.2.2","vitest":"^0.34.3"},"peerDependencies":{"typescript":">=4.9.5"},"dependencies":{"import-fresh":"^3.3.0","js-yaml":"^4.1.0","parse-json":"^5.2.0","path-type":"^4.0.0"},"engines":{"node":">=14"},"main":"dist/index.js","dist":{"shasum":"3b3897ddd042d022d5a207d4c8832e54f5301977","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-8.3.5.tgz"},"types":"dist/index.d.ts","lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"funding":"https://github.com/sponsors/d-fischer","peerDependenciesMeta":{"typescript":{"optional":true}},"gitHead":"8550adb3da7c91866b3a8862b5b5caf42866b0a4","_nodeVersion":"18.17.1","_npmVersion":"9.6.7","_npmUser":{"name":"d-fischer","email":"daniel@d-fischer.dev"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},{"name":"d-fischer","email":"daniel@d-fischer.dev"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_8.3.5_1694211127650_0.4523669359290263"},"_hasShrinkwrap":false},"8.3.6":{"_id":"cosmiconfig@8.3.6","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, TypeScript module, and more!","version":"8.3.6","keywords":["load","configuration","config"],"homepage":"https://github.com/cosmiconfig/cosmiconfig#readme","author":{"name":"Daniel Fischer","email":"daniel@d-fischer.dev","url":""},"contributors":[{"name":"Randolf J","email":"jrandolf@google.com","url":""},{"name":"David Clark","email":"david.dave.clark@gmail.com","url":""},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru","url":""},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com","url":""}],"repository":{"type":"git","url":"git+https://github.com/cosmiconfig/cosmiconfig.git"},"bugs":{"url":"https://github.com/cosmiconfig/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"git clean -Xdf -e '!node_modules' .","build":"npm run build:tsc","build:tsc":"cross-env NODE_ENV=production tsc -b","dev":"npm run build:tsc -- --watch","lint":"eslint --ext .js,.ts .","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","test":"vitest run --coverage","test:watch":"vitest","check:all":"npm run test && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build","prepare":"husky install"},"directories":null,"devDependencies":{"@types/js-yaml":"^4.0.5","@types/node":"^14","@types/parse-json":"^4.0.0","@typescript-eslint/eslint-plugin":"^6.5.0","@typescript-eslint/parser":"^6.5.0","@vitest/coverage-istanbul":"^0.34.3","cross-env":"^7.0.3","del":"^7.1.0","del-cli":"^5.1.0","eslint":"^8.48.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^9.0.0","eslint-import-resolver-typescript":"^3.6.0","eslint-plugin-import":"^2.28.1","eslint-plugin-node":"^11.1.0","eslint-plugin-vitest":"^0.2.8","husky":"^8.0.3","lint-staged":"^14.0.1","make-dir":"^4.0.0","parent-module":"^3.0.0","prettier":"^3.0.3","remark-preset-davidtheclark":"^0.12.0","typescript":"^5.2.2","vitest":"^0.34.3"},"peerDependencies":{"typescript":">=4.9.5"},"dependencies":{"import-fresh":"^3.3.0","js-yaml":"^4.1.0","parse-json":"^5.2.0","path-type":"^4.0.0"},"engines":{"node":">=14"},"files":["dist"],"main":"dist/index.js","dist":{"shasum":"060a2b871d66dba6c8538ea1118ba1ac16f5fae3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-8.3.6.tgz"},"types":"dist/index.d.ts","lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"funding":"https://github.com/sponsors/d-fischer","peerDependenciesMeta":{"typescript":{"optional":true}}},"9.0.0-alpha.0":{"_id":"cosmiconfig@9.0.0-alpha.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, TypeScript module, and more!","version":"9.0.0-alpha.0","keywords":["load","configuration","config"],"homepage":"https://github.com/cosmiconfig/cosmiconfig#readme","author":{"name":"Daniel Fischer","email":"daniel@d-fischer.dev"},"contributors":[{"name":"Randolf J","email":"jrandolf@google.com"},{"name":"David Clark","email":"david.dave.clark@gmail.com"},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/cosmiconfig/cosmiconfig.git"},"bugs":{"url":"https://github.com/cosmiconfig/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"git clean -Xdf -e '!node_modules' .","build":"npm run build:tsc","build:tsc":"cross-env NODE_ENV=production tsc -b","dev":"npm run build:tsc -- --watch","lint":"eslint --ext .js,.ts .","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","test":"vitest run --coverage","test:watch":"vitest","check:all":"npm run test && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build","prepare":"husky install"},"directories":{},"devDependencies":{"@types/js-yaml":"^4.0.5","@types/node":"^14","@types/parse-json":"^4.0.0","@typescript-eslint/eslint-plugin":"^6.5.0","@typescript-eslint/parser":"^6.5.0","@vitest/coverage-istanbul":"^0.34.3","cross-env":"^7.0.3","del":"^7.1.0","del-cli":"^5.1.0","eslint":"^8.48.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^9.0.0","eslint-import-resolver-typescript":"^3.6.0","eslint-plugin-import":"^2.28.1","eslint-plugin-node":"^11.1.0","eslint-plugin-vitest":"^0.2.8","husky":"^8.0.3","lint-staged":"^14.0.1","make-dir":"^4.0.0","parent-module":"^3.0.0","prettier":"^3.0.3","remark-preset-davidtheclark":"^0.12.0","typescript":"^5.2.2","vitest":"^0.34.3"},"peerDependencies":{"typescript":">=4.9.5"},"dependencies":{"env-paths":"^2.2.1","import-fresh":"^3.3.0","js-yaml":"^4.1.0","parse-json":"^5.2.0","path-type":"^4.0.0"},"engines":{"node":">=14"},"main":"dist/index.js","dist":{"shasum":"8c057d43d7164d9ed7f26872cdecd1e133e32873","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-9.0.0-alpha.0.tgz"},"readme":"# cosmiconfig\n\n[![codecov](https://codecov.io/gh/cosmiconfig/cosmiconfig/branch/main/graph/badge.svg)](https://codecov.io/gh/cosmiconfig/cosmiconfig)\n\nCosmiconfig searches for and loads configuration for your program.\n\nIt features smart defaults based on conventional expectations in the JavaScript ecosystem.\nBut it's also flexible enough to search wherever you'd like to search, and load whatever you'd like to load.\n\nBy default, Cosmiconfig will check the current directory for the following:\n\n- a `package.json` property\n- a JSON or YAML, extensionless \"rc file\"\n- an \"rc file\" with the extensions `.json`, `.yaml`, `.yml`, `.js`, `.ts`, `.mjs`, or `.cjs`\n- any of the above two inside a `.config` subdirectory\n- a `.config.js`, `.config.ts`, `.config.mjs`, or `.config.cjs` file\n\nFor example, if your module's name is \"myapp\", cosmiconfig will search up the directory tree for configuration in the following places:\n\n- a `myapp` property in `package.json`\n- a `.myapprc` file in JSON or YAML format\n- a `.myapprc.json`, `.myapprc.yaml`, `.myapprc.yml`, `.myapprc.js`, `.myapprc.ts`, `.myapprc.mjs`, or `.myapprc.cjs` file\n- a `myapprc`, `myapprc.json`, `myapprc.yaml`, `myapprc.yml`, `myapprc.js`, `myapprc.ts`, `myapprc.mjs`, or `myapprc.cjs` file inside a `.config` subdirectory\n- a `myapp.config.js`, `myapp.config.ts`, `myapp.config.mjs`, or `myapp.config.cjs` file\n\nOptionally, you can tell it to search up the directory tree using [search strategies],\nchecking each of these places in each directory, until it finds some acceptable configuration (or hits the home directory).\n\n## Table of contents\n\n- [Installation](#installation)\n- [Usage for tooling developers](#usage-for-tooling-developers)\n- [Result](#result)\n- [Asynchronous API](#asynchronous-api)\n  - [cosmiconfig()](#cosmiconfig-1)\n  - [explorer.search()](#explorersearch)\n  - [explorer.load()](#explorerload)\n  - [explorer.clearLoadCache()](#explorerclearloadcache)\n  - [explorer.clearSearchCache()](#explorerclearsearchcache)\n  - [explorer.clearCaches()](#explorerclearcaches)\n- [Synchronous API](#synchronous-api)\n  - [cosmiconfigSync()](#cosmiconfigsync)\n  - [explorerSync.search()](#explorersyncsearch)\n  - [explorerSync.load()](#explorersyncload)\n  - [explorerSync.clearLoadCache()](#explorersyncclearloadcache)\n  - [explorerSync.clearSearchCache()](#explorersyncclearsearchcache)\n  - [explorerSync.clearCaches()](#explorersyncclearcaches)\n- [cosmiconfigOptions](#cosmiconfigoptions)\n  - [searchStrategy](#searchstrategy)\n  - [searchPlaces](#searchplaces)\n  - [loaders](#loaders)\n  - [packageProp](#packageprop)\n  - [stopDir](#stopdir)\n  - [cache](#cache)\n  - [transform](#transform)\n  - [ignoreEmptySearchPlaces](#ignoreemptysearchplaces)\n- [Loading JS modules](#loading-js-modules)\n- [Caching](#caching)\n- [Differences from rc](#differences-from-rc)\n- [Usage for end users](#usage-for-end-users)\n  - [Imports](#imports)\n- [Contributing & Development](#contributing--development)\n\n## Installation\n\n```\nnpm install cosmiconfig\n```\n\nTested in Node 14+.\n\n## Usage for tooling developers\n\n*If you are an end user (i.e. a user of a tool that uses cosmiconfig, like `prettier` or `stylelint`),\nyou can skip down to [the end user section](#usage-for-end-users).*\n\nCreate a Cosmiconfig explorer, then either `search` for or directly `load` a configuration file.\n\n```js\nconst { cosmiconfig, cosmiconfigSync } = require('cosmiconfig');\n// ...\nconst explorer = cosmiconfig(moduleName);\n\n// Search for a configuration by walking up directories.\n// See documentation for search, below.\nexplorer.search()\n  .then((result) => {\n    // result.config is the parsed configuration object.\n    // result.filepath is the path to the config file that was found.\n    // result.isEmpty is true if there was nothing to parse in the config file.\n  })\n  .catch((error) => {\n    // Do something constructive.\n  });\n\n// Load a configuration directly when you know where it should be.\n// The result object is the same as for search.\n// See documentation for load, below.\nexplorer.load(pathToConfig).then(/* ... */);\n\n// You can also search and load synchronously.\nconst explorerSync = cosmiconfigSync(moduleName);\n\nconst searchedFor = explorerSync.search();\nconst loaded = explorerSync.load(pathToConfig);\n```\n\n## Result\n\nThe result object you get from `search` or `load` has the following properties:\n\n- **config:** The parsed configuration object. `undefined` if the file is empty.\n- **filepath:** The path to the configuration file that was found.\n- **isEmpty:** `true` if the configuration file is empty. This property will not be present if the configuration file is not empty.\n\n## Asynchronous API\n\n### cosmiconfig()\n\n```js\nconst { cosmiconfig } = require('cosmiconfig');\nconst explorer = cosmiconfig(moduleName, /* optional */ cosmiconfigOptions)\n```\n\nCreates a cosmiconfig instance (\"explorer\") configured according to the arguments, and initializes its caches.\n\n#### moduleName\n\nType: `string`. **Required.**\n\nYour module name. This is used to create the default [`searchPlaces`] and [`packageProp`].\n\nIf your [`searchPlaces`] value will include files, as it does by default (e.g. `${moduleName}rc`), your `moduleName` must consist of characters allowed in filenames. That means you should not copy scoped package names, such as `@my-org/my-package`, directly into `moduleName`.\n\n**[`cosmiconfigOptions`] are documented below.**\nYou may not need them, and should first read about the functions you'll use.\n\n### explorer.search()\n\n```js\nexplorer.search([searchFrom]).then(result => { /* ... */ })\n```\n\nSearches for a configuration file. Returns a Promise that resolves with a [result] or with `null`, if no configuration file is found.\n\nYou can do the same thing synchronously with [`explorerSync.search()`].\n\nLet's say your module name is `goldengrahams` so you initialized with `const explorer = cosmiconfig('goldengrahams');`.\nHere's how your default [`search()`] will work:\n\n- Starting from `process.cwd()` (or some other directory defined by the `searchFrom` argument to [`search()`]), look for configuration objects in the following places:\n  1. A `goldengrahams` property in a `package.json` file.\n  2. A `.goldengrahamsrc` file with JSON or YAML syntax.\n  3. A `.goldengrahamsrc.json`, `.goldengrahamsrc.yaml`, `.goldengrahamsrc.yml`, `.goldengrahamsrc.js`, `.goldengrahamsrc.ts`, `.goldengrahamsrc.mjs`, or `.goldengrahamsrc.cjs` file. (To learn more about how JS files are loaded, see [\"Loading JS modules\"].)\n  4. A `goldengrahamsrc`, `goldengrahamsrc.json`, `goldengrahamsrc.yaml`, `goldengrahamsrc.yml`, `goldengrahamsrc.js`, `goldengrahamsrc.ts`, `goldengrahamsrc.mjs`, or `goldengrahamsrc.cjs` file in the `.config` subdirectory.\n  5. A `goldengrahams.config.js`, `goldengrahams.config.ts`, `goldengrahams.config.mjs`, or `goldengrahams.config.cjs` file. (To learn more about how JS files are loaded, see [\"Loading JS modules\"].)\n- If none of those searches reveal a configuration object, continue depending on the current search strategy:\n  - If it's `none` (which is the default if you don't specify a [`stopDir`] option), stop here and return/resolve with `null`.\n  - If it's `global` (which is the default if you specify a [`stopDir`] option), move up one directory level and try again,\n    recursing until arriving at the configured [`stopDir`] option, which defaults to the user's home directory.\n    - After arriving at the [`stopDir`], the global configuration directory (as defined by [`env-paths`] without prefix) is also checked,\n      looking at the files `config`, `config.json`, `config.yaml`, `config.yml`, `config.js`, `config.ts`, `config.cjs`, and `config.mjs`\n      in the directory `~/.config/goldengrahams/` (on Linux; see [`env-paths`] documentation for other OSs).\n  - If it's `project`, check whether a `package.json` file is present in the current directory, and if not,\n    move up one directory level and try again, recursing until there is one.\n- If at any point a parsable configuration is found, the [`search()`] Promise resolves with its [result] \\(or, with [`explorerSync.search()`], the [result] is returned).\n- If no configuration object is found, the [`search()`] Promise resolves with `null` (or, with [`explorerSync.search()`], `null` is returned).\n- If a configuration object is found *but is malformed* (causing a parsing error), the [`search()`] Promise rejects with that error (so you should `.catch()` it). (Or, with [`explorerSync.search()`], the error is thrown.)\n\n**If you know exactly where your configuration file should be, you can use [`load()`], instead.**\n\n**The search process is highly customizable.**\nUse the cosmiconfig options [`searchPlaces`] and [`loaders`] to precisely define where you want to look for configurations and how you want to load them.\n\n#### searchFrom\n\nType: `string`.\nDefault: `process.cwd()`.\n\nA filename.\n[`search()`] will start its search here.\n\nIf the value is a directory, that's where the search starts.\nIf it's a file, the search starts in that file's directory.\n\n### explorer.load()\n\n```js\nexplorer.load(loadPath).then(result => { /* ... */ })\n```\n\nLoads a configuration file. Returns a Promise that resolves with a [result] or rejects with an error (if the file does not exist or cannot be loaded).\n\nUse `load` if you already know where the configuration file is and you just need to load it.\n\n```js\nexplorer.load('load/this/file.json'); // Tries to load load/this/file.json.\n```\n\nIf you load a `package.json` file, the result will be derived from whatever property is specified as your [`packageProp`].\n\nYou can do the same thing synchronously with [`explorerSync.load()`].\n\n### explorer.clearLoadCache()\n\nClears the cache used in [`load()`].\n\n### explorer.clearSearchCache()\n\nClears the cache used in [`search()`].\n\n### explorer.clearCaches()\n\nPerforms both [`clearLoadCache()`] and [`clearSearchCache()`].\n\n## Synchronous API\n\n### cosmiconfigSync()\n\n```js\nconst { cosmiconfigSync } = require('cosmiconfig');\nconst explorerSync = cosmiconfigSync(moduleName, /* optional */ cosmiconfigOptions)\n```\n\nCreates a *synchronous* cosmiconfig instance (\"explorerSync\") configured according to the arguments, and initializes its caches.\n\nSee [`cosmiconfig()`](#cosmiconfig-1).\n\n### explorerSync.search()\n\n```js\nconst result = explorerSync.search([searchFrom]);\n```\n\nSynchronous version of [`explorer.search()`].\n\nReturns a [result] or `null`.\n\n### explorerSync.load()\n\n```js\nconst result = explorerSync.load(loadPath);\n```\n\nSynchronous version of [`explorer.load()`].\n\nReturns a [result].\n\n### explorerSync.clearLoadCache()\n\nClears the cache used in [`load()`].\n\n### explorerSync.clearSearchCache()\n\nClears the cache used in [`search()`].\n\n### explorerSync.clearCaches()\n\nPerforms both [`clearLoadCache()`] and [`clearSearchCache()`].\n\n## cosmiconfigOptions\n\nType: `Object`.\n\nPossible options are documented below.\n\n### searchStrategy\n\nType: `string`\nDefault: `global` if [`stopDir`] is specified, `none` otherwise.\n\nThe strategy that should be used to determine which directories to check for configuration files.\n\n- `none`: Only checks in the current working directory.\n- `project`: Starts in the current working directory, traversing upwards until a `package.json` file is found.\n- `global`: Starts in the current working directory, traversing upwards until the configured [`stopDir`]\n  (or the current user's home directory if none is given). Then, if no configuration is found, also look in the\n  operating system's default configuration directory (according to [`env-paths`] without prefix),\n  where a different set of file names is checked:\n\n```js\n[\n  `config`,\n  `config.json`,\n  `config.yaml`,\n  `config.yml`,\n  `config.js`,\n  `config.ts`,\n  `config.cjs`,\n  `config.mjs`\n]\n```\n\n### searchPlaces\n\nType: `Array<string>`.\nDefault: See below.\n\nAn array of places that [`search()`] will check in each directory as it moves up the directory tree.\nEach place is relative to the directory being searched, and the places are checked in the specified order.\n\n**Default `searchPlaces`:**\n\nFor the [asynchronous API](#asynchronous-api), these are the default `searchPlaces`:\n\n```js\n[\n  'package.json',\n  `.${moduleName}rc`,\n  `.${moduleName}rc.json`,\n  `.${moduleName}rc.yaml`,\n  `.${moduleName}rc.yml`,\n  `.${moduleName}rc.js`,\n  `.${moduleName}rc.ts`,\n  `.${moduleName}rc.mjs`,\n  `.${moduleName}rc.cjs`,\n  `.config/${moduleName}rc`,\n  `.config/${moduleName}rc.json`,\n  `.config/${moduleName}rc.yaml`,\n  `.config/${moduleName}rc.yml`,\n  `.config/${moduleName}rc.js`,\n  `.config/${moduleName}rc.ts`,\n  `.config/${moduleName}rc.mjs`,\n  `.config/${moduleName}rc.cjs`,\n  `${moduleName}.config.js`,\n  `${moduleName}.config.ts`,\n  `${moduleName}.config.mjs`,\n  `${moduleName}.config.cjs`,\n];\n```\n\nFor the [synchronous API](#synchronous-api), the only difference is that `.mjs` files are not included. See [\"Loading JS modules\"] for more information.\n\nCreate your own array to search more, fewer, or altogether different places.\n\nEvery item in `searchPlaces` needs to have a loader in [`loaders`] that corresponds to its extension.\n(Common extensions are covered by default loaders.)\nRead more about [`loaders`] below.\n\n`package.json` is a special value: When it is included in `searchPlaces`, Cosmiconfig will always parse it as JSON and load a property within it, not the whole file.\nThat property is defined with the [`packageProp`] option, and defaults to your module name.\n\nExamples, with a module named `porgy`:\n\n```js\n// Disallow extensions on rc files:\n['package.json', '.porgyrc', 'porgy.config.js']\n```\n\n```js\n// Limit the options dramatically:\n['package.json', '.porgyrc']\n```\n\n```js\n// Maybe you want to look for a wide variety of JS flavors:\n[\n  'porgy.config.js',\n  'porgy.config.mjs',\n  'porgy.config.ts',\n  'porgy.config.coffee'\n]\n// ^^ You will need to designate a custom loader to tell\n// Cosmiconfig how to handle `.coffee` files.\n```\n\n```js\n// Look within a .config/ subdirectory of every searched directory:\n[\n  'package.json',\n  '.porgyrc',\n  '.config/.porgyrc',\n  '.porgyrc.json',\n  '.config/.porgyrc.json'\n]\n```\n\n### loaders\n\nType: `Object`.\nDefault: See below.\n\nAn object that maps extensions to the loader functions responsible for loading and parsing files with those extensions.\n\nCosmiconfig exposes its default loaders on the named export `defaultLoaders` and `defaultLoadersSync`.\n\n**Default `loaders`:**\n\n```js\nconst { defaultLoaders, defaultLoadersSync } = require('cosmiconfig');\n\nconsole.log(Object.entries(defaultLoaders));\n// [\n//   [ '.mjs', [Function: loadJs] ],\n//   [ '.cjs', [Function: loadJs] ],\n//   [ '.js', [Function: loadJs] ],\n//   [ '.ts', [Function: loadTs] ],\n//   [ '.json', [Function: loadJson] ],\n//   [ '.yaml', [Function: loadYaml] ],\n//   [ '.yml', [Function: loadYaml] ],\n//   [ 'noExt', [Function: loadYaml] ]\n// ]\n\nconsole.log(Object.entries(defaultLoadersSync));\n// [\n//   [ '.cjs', [Function: loadJsSync] ],\n//   [ '.js', [Function: loadJsSync] ],\n//   [ '.ts', [Function: loadTsSync] ],\n//   [ '.json', [Function: loadJson] ],\n//   [ '.yaml', [Function: loadYaml] ],\n//   [ '.yml', [Function: loadYaml] ],\n//   [ 'noExt', [Function: loadYaml] ]\n// ]\n```\n\n(YAML is a superset of JSON; which means YAML parsers can parse JSON; which is how extensionless files can be either YAML *or* JSON with only one parser.)\n\n**If you provide a `loaders` object, your object will be *merged* with the defaults.**\nSo you can override one or two without having to override them all.\n\n**Keys in `loaders`** are extensions (starting with a period), or `noExt` to specify the loader for files *without* extensions, like `.myapprc`.\n\n**Values in `loaders`** are a loader function (described below) whose values are loader functions.\n\n**The most common use case for custom loaders value is to load extensionless `rc` files as strict JSON**, instead of JSON *or* YAML (the default).\nTo accomplish that, provide the following `loaders` value:\n\n```js\n{\n  noExt: defaultLoaders['.json'];\n}\n```\n\nIf you want to load files that are not handled by the loader functions Cosmiconfig exposes, you can write a custom loader function or use one from NPM if it exists.\n\n**Use cases for custom loader function:**\n\n- Allow configuration syntaxes that aren't handled by Cosmiconfig's defaults, like JSON5, INI, or XML.\n- Parse JS files with Babel before deriving the configuration.\n\n**Custom loader functions** have the following signature:\n\n```ts\n// Sync\ntype SyncLoader = (filepath: string, content: string) => Object | null\n\n// Async\ntype AsyncLoader = (filepath: string, content: string) => Object | null | Promise<Object | null>\n```\n\nCosmiconfig reads the file when it checks whether the file exists, so it will provide you with both the file's path and its content.\nDo whatever you need to, and return either a configuration object or `null` (or, for async-only loaders, a Promise that resolves with one of those).\n`null` indicates that no real configuration was found and the search should continue.\n\nA few things to note:\n\n- If you use a custom loader, be aware of whether it's sync or async: you cannot use async customer loaders with the sync API ([`cosmiconfigSync()`]).\n- **Special JS syntax can also be handled by using a `require` hook**, because `defaultLoaders['.js']` just uses `require`.\n  Whether you use custom loaders or a `require` hook is up to you.\n\nExamples:\n\n```js\n// Allow JSON5 syntax:\ncosmiconfig('foo', {\n  loaders: {\n    '.json': json5Loader\n  }\n});\n\n// Allow a special configuration syntax of your own creation:\ncosmiconfig('foo', {\n  loaders: {\n    '.special': specialLoader\n  }\n});\n\n// Allow many flavors of JS, using custom loaders:\ncosmiconfig('foo', {\n  loaders: {\n    '.coffee': coffeeScriptLoader\n  }\n});\n\n// Allow many flavors of JS but rely on require hooks:\ncosmiconfig('foo', {\n  loaders: {\n    '.coffee': defaultLoaders['.js']\n  }\n});\n```\n\n### packageProp\n\nType: `string | Array<string>`.\nDefault: `` `${moduleName}` ``.\n\nName of the property in `package.json` to look for.\n\nUse a period-delimited string or an array of strings to describe a path to nested properties.\n\nFor example, the value `'configs.myPackage'` or `['configs', 'myPackage']` will get you the `\"myPackage\"` value in a `package.json` like this:\n\n```json\n{\n  \"configs\": {\n    \"myPackage\": {\"option\":  \"value\"}\n  }\n}\n```\n\nIf nested property names within the path include periods, you need to use an array of strings. For example, the value `['configs', 'foo.bar', 'baz']` will get you the `\"baz\"` value in a `package.json` like this:\n\n```json\n{\n  \"configs\": {\n    \"foo.bar\": {\n      \"baz\": {\"option\":  \"value\"}\n    }\n  }\n}\n```\n\nIf a string includes period but corresponds to a top-level property name, it will not be interpreted as a period-delimited path. For example, the value `'one.two'` will get you the `\"three\"` value in a `package.json` like this:\n\n```json\n{\n  \"one.two\": \"three\",\n  \"one\": {\n    \"two\": \"four\"\n  }\n}\n```\n\n### stopDir\n\nType: `string`.\nDefault: Absolute path to your home directory.\n\nDirectory where the search will stop.\n\n### cache\n\nType: `boolean`.\nDefault: `true`.\n\nIf `false`, no caches will be used.\nRead more about [\"Caching\"](#caching) below.\n\n### transform\n\nType: `(Result) => Promise<Result> | Result`.\n\nA function that transforms the parsed configuration. Receives the [result].\n\nIf using [`search()`] or [`load()`] \\(which are async), the transform function can return the transformed result or return a Promise that resolves with the transformed result.\nIf using `cosmiconfigSync`, [`search()`] or [`load()`], the function must be synchronous and return the transformed result.\n\nThe reason you might use this option — instead of simply applying your transform function some other way — is that *the transformed result will be cached*. If your transformation involves additional filesystem I/O or other potentially slow processing, you can use this option to avoid repeating those steps every time a given configuration is searched or loaded.\n\n### ignoreEmptySearchPlaces\n\nType: `boolean`.\nDefault: `true`.\n\nBy default, if [`search()`] encounters an empty file (containing nothing but whitespace) in one of the [`searchPlaces`], it will ignore the empty file and move on.\nIf you'd like to load empty configuration files, instead, set this option to `false`.\n\nWhy might you want to load empty configuration files?\nIf you want to throw an error, or if an empty configuration file means something to your program.\n\n## Loading JS modules\n\nYour end users can provide JS configuration files as ECMAScript modules (ESM) under the following conditions:\n\n- You (the cosmiconfig user) use cosmiconfig's [asynchronous API](#asynchronous-api).\n- Your end user runs a version of Node that supports ESM ([>=12.17.0](https://nodejs.org/en/blog/release/v12.17.0/), or earlier with the `--experimental-modules` flag).\n- Your end user provides an `.mjs` configuration file, or a `.js` file whose nearest parent `package.json` file contains `\"type\": \"module\"`. (See [Node's method for determining a file's module system](https://nodejs.org/api/packages.html#packages_determining_module_system).)\n\nWith cosmiconfig's [asynchronous API](#asynchronous-api), the default [`searchPlaces`] include `.js`, `.ts`, `.mjs`, and `.cjs` files. Cosmiconfig loads all these file types with the [dynamic `import` function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#dynamic_imports).\n\nWith the [synchronous API](#synchronous-api), JS configuration files are always treated as CommonJS, and `.mjs` files are ignored, because there is no synchronous API for the dynamic `import` function.\n\n## Caching\n\nAs of v2, cosmiconfig uses caching to reduce the need for repetitious reading of the filesystem or expensive transforms. Every new cosmiconfig instance (created with `cosmiconfig()`) has its own caches.\n\nTo avoid or work around caching, you can do the following:\n\n- Set the `cosmiconfig` option [`cache`] to `false`.\n- Use the cache-clearing methods [`clearLoadCache()`], [`clearSearchCache()`], and [`clearCaches()`].\n- Create separate instances of cosmiconfig (separate \"explorers\").\n\n## Differences from [rc](https://github.com/dominictarr/rc)\n\n[rc](https://github.com/dominictarr/rc) serves its focused purpose well. cosmiconfig differs in a few key ways — making it more useful for some projects, less useful for others:\n\n- Looks for configuration in some different places: in a `package.json` property, an rc file, a `.config.js` file, and rc files with extensions.\n- Built-in support for JSON, YAML, and CommonJS formats.\n- Stops at the first configuration found, instead of finding all that can be found up the directory tree and merging them automatically.\n- Options.\n- Asynchronous by default (though can be run synchronously).\n\n## Usage for end users\n\nWhen configuring a tool, you can use multiple file formats and put these in multiple places.\n\nUsually, a tool would mention this in its own README file,\nbut by default, these are the following places, where `{NAME}` represents the name of the tool:\n\n```\npackage.json\n.{NAME}rc\n.{NAME}rc.json\n.{NAME}rc.yaml\n.{NAME}rc.yml\n.{NAME}rc.js\n.{NAME}rc.ts\n.{NAME}rc.cjs\n.config/{NAME}rc\n.config/{NAME}rc.json\n.config/{NAME}rc.yaml\n.config/{NAME}rc.yml\n.config/{NAME}rc.js\n.config/{NAME}rc.ts\n.config/{NAME}rc.mjs\n.config/{NAME}rc.cjs\n{NAME}.config.js\n{NAME}.config.ts\n{NAME}.config.mjs\n{NAME}.config.cjs\n```\n\nThe contents of these files are defined by the tool.\nFor example, you can configure prettier to enforce semicolons at the end of the line\nusing a file named `.config/prettierrc.yml`:\n\n```yaml\nsemi: true\n```\n\nAdditionally, you have the option to put a property named after the tool in your `package.json` file,\nwith the contents of that property being the same as the file contents. To use the same example as above:\n\n```json\n{\n  \"name\": \"your-project\",\n  \"dependencies\": {},\n  \"prettier\": {\n    \"semi\": true\n  }\n}\n```\n\nThis has the advantage that you can put the configuration of all tools\n(at least the ones that use cosmiconfig) in one file.\n\nYou can also add a `cosmiconfig` key within your `package.json` file or create one of the following files\nto configure `cosmiconfig` itself:\n\n```\n.config/config.json\n.config/config.yaml\n.config/config.yml\n.config/config.js\n.config/config.ts\n.config/config.cjs\n```\n\nThe following properties are currently actively supported in these places:\n\n```yaml\ncosmiconfig:\n  # adds places where configuration files are being searched\n  searchPlaces:\n    - .config/{name}.yml\n  # to enforce a custom naming convention and format, don't merge the above with the tool-defined search places\n  # (`true` is the default setting)\n  mergeSearchPlaces: false\n```\n\n> **Note:** technically, you can overwrite all options described in [cosmiconfigOptions](#cosmiconfigoptions) here,\n> but everything not listed above should be used at your own risk, as it has not been tested explicitly.\n> The only exceptions to this are the `loaders` property, which is explicitly not supported at this time,\n> and the `searchStrategy` property, which is intentionally disallowed.\n\nYou can also add more root properties outside the `cosmiconfig` property\nto configure your tools, entirely eliminating the need to look for additional configuration files:\n\n```yaml\ncosmiconfig:\n  searchPlaces: []\n\nprettier:\n  semi: true\n```\n\n### Imports\n\nWherever you put your configuration (the package.json file, a root config file or a package-specific config file),\nyou can use the special `$import` key to import another file as a base.\n\nFor example, you can import from an npm package (in this example, `@foocorp/config`).\n\n`.prettierrc.base.yml` in said npm package could define some company-wide defaults:\n\n```yaml\nprintWidth: 120\nsemi: true\ntabWidth: 2\n```\n\nAnd then, the `.prettierrc.yml` file in the project itself would just reference that file,\noptionally overriding the defaults with project-specific settings:\n\n```yaml\n$import: node_modules/@foocorp/config/.prettierrc.base.yml\n# we want more space!\nprintWidth: 200\n```\n\nIt is possible to import multiple base files by specifying an array of paths,\nwhich will be processed in declaration order;\nthat means that the last entry will win if there are conflicting properties.\n\nIt is also possible to import file formats other than the importing format\nas long as they are supported by the loaders specified by the developer of the tool you're configuring. \n\n```yaml\n$import: [first.yml, second.json, third.config.js]\n```\n\n## Contributing & Development\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md). By participating in this project you agree to abide by its terms.\n\nAnd please do participate!\n\n[result]: #result\n\n[`load()`]: #explorerload\n\n[`search()`]: #explorersearch\n\n[`clearloadcache()`]: #explorerclearloadcache\n\n[`clearsearchcache()`]: #explorerclearsearchcache\n\n[`cosmiconfig()`]: #cosmiconfig\n\n[`cosmiconfigSync()`]: #cosmiconfigsync\n\n[`clearcaches()`]: #explorerclearcaches\n\n[`packageprop`]: #packageprop\n\n[`cache`]: #cache\n\n[`stopdir`]: #stopdir\n\n[`searchplaces`]: #searchplaces\n\n[`loaders`]: #loaders\n\n[`cosmiconfigoptions`]: #cosmiconfigoptions\n\n[`explorerSync.search()`]: #explorersyncsearch\n\n[`explorerSync.load()`]: #explorersyncload\n\n[`explorer.search()`]: #explorersearch\n\n[`explorer.load()`]: #explorerload\n\n[\"Loading JS modules\"]: #loading-js-modules\n\n[`env-paths`]: https://github.com/sindresorhus/env-paths\n\n[search strategies]: #searchstrategy\n","types":"dist/index.d.ts","lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"funding":"https://github.com/sponsors/d-fischer","peerDependenciesMeta":{"typescript":{"optional":true}},"readmeFilename":"README.md","gitHead":"77e5629c77f96a3f6f15a822a2c17188cb440ba2","_nodeVersion":"18.17.1","_npmVersion":"9.6.7","_npmUser":{"name":"d-fischer","email":"daniel@d-fischer.dev"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},{"name":"d-fischer","email":"daniel@d-fischer.dev"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_9.0.0-alpha.0_1697489525376_0.011878279186915641"},"_hasShrinkwrap":false},"9.0.0-alpha.1":{"_id":"cosmiconfig@9.0.0-alpha.1","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, TypeScript module, and more!","version":"9.0.0-alpha.1","keywords":["load","configuration","config"],"homepage":"https://github.com/cosmiconfig/cosmiconfig#readme","author":{"name":"Daniel Fischer","email":"daniel@d-fischer.dev"},"contributors":[{"name":"Randolf J","email":"jrandolf@google.com"},{"name":"David Clark","email":"david.dave.clark@gmail.com"},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/cosmiconfig/cosmiconfig.git"},"bugs":{"url":"https://github.com/cosmiconfig/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"git clean -Xdf -e '!node_modules' .","build":"npm run build:tsc","build:tsc":"cross-env NODE_ENV=production tsc -b","dev":"npm run build:tsc -- --watch","lint":"eslint --ext .js,.ts .","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","test":"vitest run --coverage","test:watch":"vitest","check:all":"npm run test && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build","prepare":"husky install"},"directories":{},"devDependencies":{"@types/js-yaml":"^4.0.5","@types/node":"^14","@types/parse-json":"^4.0.0","@typescript-eslint/eslint-plugin":"^6.5.0","@typescript-eslint/parser":"^6.5.0","@vitest/coverage-istanbul":"^0.34.3","cross-env":"^7.0.3","del":"^7.1.0","del-cli":"^5.1.0","eslint":"^8.48.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^9.0.0","eslint-import-resolver-typescript":"^3.6.0","eslint-plugin-import":"^2.28.1","eslint-plugin-node":"^11.1.0","eslint-plugin-vitest":"^0.2.8","husky":"^8.0.3","lint-staged":"^14.0.1","make-dir":"^4.0.0","parent-module":"^3.0.0","prettier":"^3.0.3","remark-preset-davidtheclark":"^0.12.0","typescript":"^5.2.2","vitest":"^0.34.3"},"peerDependencies":{"typescript":">=4.9.5"},"dependencies":{"env-paths":"^2.2.1","import-fresh":"^3.3.0","js-yaml":"^4.1.0","parse-json":"^5.2.0","path-type":"^4.0.0"},"engines":{"node":">=14"},"main":"dist/index.js","dist":{"shasum":"7588773e767041e4ed774dd01de119ec15e4f134","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-9.0.0-alpha.1.tgz"},"readme":"# cosmiconfig\n\n[![codecov](https://codecov.io/gh/cosmiconfig/cosmiconfig/branch/main/graph/badge.svg)](https://codecov.io/gh/cosmiconfig/cosmiconfig)\n\nCosmiconfig searches for and loads configuration for your program.\n\nIt features smart defaults based on conventional expectations in the JavaScript ecosystem.\nBut it's also flexible enough to search wherever you'd like to search, and load whatever you'd like to load.\n\nBy default, Cosmiconfig will check the current directory for the following:\n\n- a `package.json` property\n- a JSON or YAML, extensionless \"rc file\"\n- an \"rc file\" with the extensions `.json`, `.yaml`, `.yml`, `.js`, `.ts`, `.mjs`, or `.cjs`\n- any of the above two inside a `.config` subdirectory\n- a `.config.js`, `.config.ts`, `.config.mjs`, or `.config.cjs` file\n\nFor example, if your module's name is \"myapp\", cosmiconfig will search up the directory tree for configuration in the following places:\n\n- a `myapp` property in `package.json`\n- a `.myapprc` file in JSON or YAML format\n- a `.myapprc.json`, `.myapprc.yaml`, `.myapprc.yml`, `.myapprc.js`, `.myapprc.ts`, `.myapprc.mjs`, or `.myapprc.cjs` file\n- a `myapprc`, `myapprc.json`, `myapprc.yaml`, `myapprc.yml`, `myapprc.js`, `myapprc.ts`, `myapprc.mjs`, or `myapprc.cjs` file inside a `.config` subdirectory\n- a `myapp.config.js`, `myapp.config.ts`, `myapp.config.mjs`, or `myapp.config.cjs` file\n\nOptionally, you can tell it to search up the directory tree using [search strategies],\nchecking each of these places in each directory, until it finds some acceptable configuration (or hits the home directory).\n\n## Table of contents\n\n- [Installation](#installation)\n- [Usage for tooling developers](#usage-for-tooling-developers)\n- [Result](#result)\n- [Asynchronous API](#asynchronous-api)\n  - [cosmiconfig()](#cosmiconfig-1)\n  - [explorer.search()](#explorersearch)\n  - [explorer.load()](#explorerload)\n  - [explorer.clearLoadCache()](#explorerclearloadcache)\n  - [explorer.clearSearchCache()](#explorerclearsearchcache)\n  - [explorer.clearCaches()](#explorerclearcaches)\n- [Synchronous API](#synchronous-api)\n  - [cosmiconfigSync()](#cosmiconfigsync)\n  - [explorerSync.search()](#explorersyncsearch)\n  - [explorerSync.load()](#explorersyncload)\n  - [explorerSync.clearLoadCache()](#explorersyncclearloadcache)\n  - [explorerSync.clearSearchCache()](#explorersyncclearsearchcache)\n  - [explorerSync.clearCaches()](#explorersyncclearcaches)\n- [cosmiconfigOptions](#cosmiconfigoptions)\n  - [searchStrategy](#searchstrategy)\n  - [searchPlaces](#searchplaces)\n  - [loaders](#loaders)\n  - [packageProp](#packageprop)\n  - [stopDir](#stopdir)\n  - [cache](#cache)\n  - [transform](#transform)\n  - [ignoreEmptySearchPlaces](#ignoreemptysearchplaces)\n- [Loading JS modules](#loading-js-modules)\n- [Caching](#caching)\n- [Differences from rc](#differences-from-rc)\n- [Usage for end users](#usage-for-end-users)\n  - [Imports](#imports)\n- [Contributing & Development](#contributing--development)\n\n## Installation\n\n```\nnpm install cosmiconfig\n```\n\nTested in Node 14+.\n\n## Usage for tooling developers\n\n*If you are an end user (i.e. a user of a tool that uses cosmiconfig, like `prettier` or `stylelint`),\nyou can skip down to [the end user section](#usage-for-end-users).*\n\nCreate a Cosmiconfig explorer, then either `search` for or directly `load` a configuration file.\n\n```js\nconst { cosmiconfig, cosmiconfigSync } = require('cosmiconfig');\n// ...\nconst explorer = cosmiconfig(moduleName);\n\n// Search for a configuration by walking up directories.\n// See documentation for search, below.\nexplorer.search()\n  .then((result) => {\n    // result.config is the parsed configuration object.\n    // result.filepath is the path to the config file that was found.\n    // result.isEmpty is true if there was nothing to parse in the config file.\n  })\n  .catch((error) => {\n    // Do something constructive.\n  });\n\n// Load a configuration directly when you know where it should be.\n// The result object is the same as for search.\n// See documentation for load, below.\nexplorer.load(pathToConfig).then(/* ... */);\n\n// You can also search and load synchronously.\nconst explorerSync = cosmiconfigSync(moduleName);\n\nconst searchedFor = explorerSync.search();\nconst loaded = explorerSync.load(pathToConfig);\n```\n\n## Result\n\nThe result object you get from `search` or `load` has the following properties:\n\n- **config:** The parsed configuration object. `undefined` if the file is empty.\n- **filepath:** The path to the configuration file that was found.\n- **isEmpty:** `true` if the configuration file is empty. This property will not be present if the configuration file is not empty.\n\n## Asynchronous API\n\n### cosmiconfig()\n\n```js\nconst { cosmiconfig } = require('cosmiconfig');\nconst explorer = cosmiconfig(moduleName, /* optional */ cosmiconfigOptions)\n```\n\nCreates a cosmiconfig instance (\"explorer\") configured according to the arguments, and initializes its caches.\n\n#### moduleName\n\nType: `string`. **Required.**\n\nYour module name. This is used to create the default [`searchPlaces`] and [`packageProp`].\n\nIf your [`searchPlaces`] value will include files, as it does by default (e.g. `${moduleName}rc`), your `moduleName` must consist of characters allowed in filenames. That means you should not copy scoped package names, such as `@my-org/my-package`, directly into `moduleName`.\n\n**[`cosmiconfigOptions`] are documented below.**\nYou may not need them, and should first read about the functions you'll use.\n\n### explorer.search()\n\n```js\nexplorer.search([searchFrom]).then(result => { /* ... */ })\n```\n\nSearches for a configuration file. Returns a Promise that resolves with a [result] or with `null`, if no configuration file is found.\n\nYou can do the same thing synchronously with [`explorerSync.search()`].\n\nLet's say your module name is `goldengrahams` so you initialized with `const explorer = cosmiconfig('goldengrahams');`.\nHere's how your default [`search()`] will work:\n\n- Starting from `process.cwd()` (or some other directory defined by the `searchFrom` argument to [`search()`]), look for configuration objects in the following places:\n  1. A `goldengrahams` property in a `package.json` file.\n  2. A `.goldengrahamsrc` file with JSON or YAML syntax.\n  3. A `.goldengrahamsrc.json`, `.goldengrahamsrc.yaml`, `.goldengrahamsrc.yml`, `.goldengrahamsrc.js`, `.goldengrahamsrc.ts`, `.goldengrahamsrc.mjs`, or `.goldengrahamsrc.cjs` file. (To learn more about how JS files are loaded, see [\"Loading JS modules\"].)\n  4. A `goldengrahamsrc`, `goldengrahamsrc.json`, `goldengrahamsrc.yaml`, `goldengrahamsrc.yml`, `goldengrahamsrc.js`, `goldengrahamsrc.ts`, `goldengrahamsrc.mjs`, or `goldengrahamsrc.cjs` file in the `.config` subdirectory.\n  5. A `goldengrahams.config.js`, `goldengrahams.config.ts`, `goldengrahams.config.mjs`, or `goldengrahams.config.cjs` file. (To learn more about how JS files are loaded, see [\"Loading JS modules\"].)\n- If none of those searches reveal a configuration object, continue depending on the current search strategy:\n  - If it's `none` (which is the default if you don't specify a [`stopDir`] option), stop here and return/resolve with `null`.\n  - If it's `global` (which is the default if you specify a [`stopDir`] option), move up one directory level and try again,\n    recursing until arriving at the configured [`stopDir`] option, which defaults to the user's home directory.\n    - After arriving at the [`stopDir`], the global configuration directory (as defined by [`env-paths`] without prefix) is also checked,\n      looking at the files `config`, `config.json`, `config.yaml`, `config.yml`, `config.js`, `config.ts`, `config.cjs`, and `config.mjs`\n      in the directory `~/.config/goldengrahams/` (on Linux; see [`env-paths`] documentation for other OSs).\n  - If it's `project`, check whether a `package.json` file is present in the current directory, and if not,\n    move up one directory level and try again, recursing until there is one.\n- If at any point a parsable configuration is found, the [`search()`] Promise resolves with its [result] \\(or, with [`explorerSync.search()`], the [result] is returned).\n- If no configuration object is found, the [`search()`] Promise resolves with `null` (or, with [`explorerSync.search()`], `null` is returned).\n- If a configuration object is found *but is malformed* (causing a parsing error), the [`search()`] Promise rejects with that error (so you should `.catch()` it). (Or, with [`explorerSync.search()`], the error is thrown.)\n\n**If you know exactly where your configuration file should be, you can use [`load()`], instead.**\n\n**The search process is highly customizable.**\nUse the cosmiconfig options [`searchPlaces`] and [`loaders`] to precisely define where you want to look for configurations and how you want to load them.\n\n#### searchFrom\n\nType: `string`.\nDefault: `process.cwd()`.\n\nA filename.\n[`search()`] will start its search here.\n\nIf the value is a directory, that's where the search starts.\nIf it's a file, the search starts in that file's directory.\n\n### explorer.load()\n\n```js\nexplorer.load(loadPath).then(result => { /* ... */ })\n```\n\nLoads a configuration file. Returns a Promise that resolves with a [result] or rejects with an error (if the file does not exist or cannot be loaded).\n\nUse `load` if you already know where the configuration file is and you just need to load it.\n\n```js\nexplorer.load('load/this/file.json'); // Tries to load load/this/file.json.\n```\n\nIf you load a `package.json` file, the result will be derived from whatever property is specified as your [`packageProp`].\n\nYou can do the same thing synchronously with [`explorerSync.load()`].\n\n### explorer.clearLoadCache()\n\nClears the cache used in [`load()`].\n\n### explorer.clearSearchCache()\n\nClears the cache used in [`search()`].\n\n### explorer.clearCaches()\n\nPerforms both [`clearLoadCache()`] and [`clearSearchCache()`].\n\n## Synchronous API\n\n### cosmiconfigSync()\n\n```js\nconst { cosmiconfigSync } = require('cosmiconfig');\nconst explorerSync = cosmiconfigSync(moduleName, /* optional */ cosmiconfigOptions)\n```\n\nCreates a *synchronous* cosmiconfig instance (\"explorerSync\") configured according to the arguments, and initializes its caches.\n\nSee [`cosmiconfig()`](#cosmiconfig-1).\n\n### explorerSync.search()\n\n```js\nconst result = explorerSync.search([searchFrom]);\n```\n\nSynchronous version of [`explorer.search()`].\n\nReturns a [result] or `null`.\n\n### explorerSync.load()\n\n```js\nconst result = explorerSync.load(loadPath);\n```\n\nSynchronous version of [`explorer.load()`].\n\nReturns a [result].\n\n### explorerSync.clearLoadCache()\n\nClears the cache used in [`load()`].\n\n### explorerSync.clearSearchCache()\n\nClears the cache used in [`search()`].\n\n### explorerSync.clearCaches()\n\nPerforms both [`clearLoadCache()`] and [`clearSearchCache()`].\n\n## cosmiconfigOptions\n\nType: `Object`.\n\nPossible options are documented below.\n\n### searchStrategy\n\nType: `string`\nDefault: `global` if [`stopDir`] is specified, `none` otherwise.\n\nThe strategy that should be used to determine which directories to check for configuration files.\n\n- `none`: Only checks in the current working directory.\n- `project`: Starts in the current working directory, traversing upwards until a `package.json` file is found.\n- `global`: Starts in the current working directory, traversing upwards until the configured [`stopDir`]\n  (or the current user's home directory if none is given). Then, if no configuration is found, also look in the\n  operating system's default configuration directory (according to [`env-paths`] without prefix),\n  where a different set of file names is checked:\n\n```js\n[\n  `config`,\n  `config.json`,\n  `config.yaml`,\n  `config.yml`,\n  `config.js`,\n  `config.ts`,\n  `config.cjs`,\n  `config.mjs`\n]\n```\n\n### searchPlaces\n\nType: `Array<string>`.\nDefault: See below.\n\nAn array of places that [`search()`] will check in each directory as it moves up the directory tree.\nEach place is relative to the directory being searched, and the places are checked in the specified order.\n\n**Default `searchPlaces`:**\n\nFor the [asynchronous API](#asynchronous-api), these are the default `searchPlaces`:\n\n```js\n[\n  'package.json',\n  `.${moduleName}rc`,\n  `.${moduleName}rc.json`,\n  `.${moduleName}rc.yaml`,\n  `.${moduleName}rc.yml`,\n  `.${moduleName}rc.js`,\n  `.${moduleName}rc.ts`,\n  `.${moduleName}rc.mjs`,\n  `.${moduleName}rc.cjs`,\n  `.config/${moduleName}rc`,\n  `.config/${moduleName}rc.json`,\n  `.config/${moduleName}rc.yaml`,\n  `.config/${moduleName}rc.yml`,\n  `.config/${moduleName}rc.js`,\n  `.config/${moduleName}rc.ts`,\n  `.config/${moduleName}rc.mjs`,\n  `.config/${moduleName}rc.cjs`,\n  `${moduleName}.config.js`,\n  `${moduleName}.config.ts`,\n  `${moduleName}.config.mjs`,\n  `${moduleName}.config.cjs`,\n];\n```\n\nFor the [synchronous API](#synchronous-api), the only difference is that `.mjs` files are not included. See [\"Loading JS modules\"] for more information.\n\nCreate your own array to search more, fewer, or altogether different places.\n\nEvery item in `searchPlaces` needs to have a loader in [`loaders`] that corresponds to its extension.\n(Common extensions are covered by default loaders.)\nRead more about [`loaders`] below.\n\n`package.json` is a special value: When it is included in `searchPlaces`, Cosmiconfig will always parse it as JSON and load a property within it, not the whole file.\nThat property is defined with the [`packageProp`] option, and defaults to your module name.\n\nExamples, with a module named `porgy`:\n\n```js\n// Disallow extensions on rc files:\n['package.json', '.porgyrc', 'porgy.config.js']\n```\n\n```js\n// Limit the options dramatically:\n['package.json', '.porgyrc']\n```\n\n```js\n// Maybe you want to look for a wide variety of JS flavors:\n[\n  'porgy.config.js',\n  'porgy.config.mjs',\n  'porgy.config.ts',\n  'porgy.config.coffee'\n]\n// ^^ You will need to designate a custom loader to tell\n// Cosmiconfig how to handle `.coffee` files.\n```\n\n```js\n// Look within a .config/ subdirectory of every searched directory:\n[\n  'package.json',\n  '.porgyrc',\n  '.config/.porgyrc',\n  '.porgyrc.json',\n  '.config/.porgyrc.json'\n]\n```\n\n### loaders\n\nType: `Object`.\nDefault: See below.\n\nAn object that maps extensions to the loader functions responsible for loading and parsing files with those extensions.\n\nCosmiconfig exposes its default loaders on the named export `defaultLoaders` and `defaultLoadersSync`.\n\n**Default `loaders`:**\n\n```js\nconst { defaultLoaders, defaultLoadersSync } = require('cosmiconfig');\n\nconsole.log(Object.entries(defaultLoaders));\n// [\n//   [ '.mjs', [Function: loadJs] ],\n//   [ '.cjs', [Function: loadJs] ],\n//   [ '.js', [Function: loadJs] ],\n//   [ '.ts', [Function: loadTs] ],\n//   [ '.json', [Function: loadJson] ],\n//   [ '.yaml', [Function: loadYaml] ],\n//   [ '.yml', [Function: loadYaml] ],\n//   [ 'noExt', [Function: loadYaml] ]\n// ]\n\nconsole.log(Object.entries(defaultLoadersSync));\n// [\n//   [ '.cjs', [Function: loadJsSync] ],\n//   [ '.js', [Function: loadJsSync] ],\n//   [ '.ts', [Function: loadTsSync] ],\n//   [ '.json', [Function: loadJson] ],\n//   [ '.yaml', [Function: loadYaml] ],\n//   [ '.yml', [Function: loadYaml] ],\n//   [ 'noExt', [Function: loadYaml] ]\n// ]\n```\n\n(YAML is a superset of JSON; which means YAML parsers can parse JSON; which is how extensionless files can be either YAML *or* JSON with only one parser.)\n\n**If you provide a `loaders` object, your object will be *merged* with the defaults.**\nSo you can override one or two without having to override them all.\n\n**Keys in `loaders`** are extensions (starting with a period), or `noExt` to specify the loader for files *without* extensions, like `.myapprc`.\n\n**Values in `loaders`** are a loader function (described below) whose values are loader functions.\n\n**The most common use case for custom loaders value is to load extensionless `rc` files as strict JSON**, instead of JSON *or* YAML (the default).\nTo accomplish that, provide the following `loaders` value:\n\n```js\n{\n  noExt: defaultLoaders['.json'];\n}\n```\n\nIf you want to load files that are not handled by the loader functions Cosmiconfig exposes, you can write a custom loader function or use one from NPM if it exists.\n\n**Use cases for custom loader function:**\n\n- Allow configuration syntaxes that aren't handled by Cosmiconfig's defaults, like JSON5, INI, or XML.\n- Parse JS files with Babel before deriving the configuration.\n\n**Custom loader functions** have the following signature:\n\n```ts\n// Sync\ntype SyncLoader = (filepath: string, content: string) => Object | null\n\n// Async\ntype AsyncLoader = (filepath: string, content: string) => Object | null | Promise<Object | null>\n```\n\nCosmiconfig reads the file when it checks whether the file exists, so it will provide you with both the file's path and its content.\nDo whatever you need to, and return either a configuration object or `null` (or, for async-only loaders, a Promise that resolves with one of those).\n`null` indicates that no real configuration was found and the search should continue.\n\nA few things to note:\n\n- If you use a custom loader, be aware of whether it's sync or async: you cannot use async customer loaders with the sync API ([`cosmiconfigSync()`]).\n- **Special JS syntax can also be handled by using a `require` hook**, because `defaultLoaders['.js']` just uses `require`.\n  Whether you use custom loaders or a `require` hook is up to you.\n\nExamples:\n\n```js\n// Allow JSON5 syntax:\ncosmiconfig('foo', {\n  loaders: {\n    '.json': json5Loader\n  }\n});\n\n// Allow a special configuration syntax of your own creation:\ncosmiconfig('foo', {\n  loaders: {\n    '.special': specialLoader\n  }\n});\n\n// Allow many flavors of JS, using custom loaders:\ncosmiconfig('foo', {\n  loaders: {\n    '.coffee': coffeeScriptLoader\n  }\n});\n\n// Allow many flavors of JS but rely on require hooks:\ncosmiconfig('foo', {\n  loaders: {\n    '.coffee': defaultLoaders['.js']\n  }\n});\n```\n\n### packageProp\n\nType: `string | Array<string>`.\nDefault: `` `${moduleName}` ``.\n\nName of the property in `package.json` to look for.\n\nUse a period-delimited string or an array of strings to describe a path to nested properties.\n\nFor example, the value `'configs.myPackage'` or `['configs', 'myPackage']` will get you the `\"myPackage\"` value in a `package.json` like this:\n\n```json\n{\n  \"configs\": {\n    \"myPackage\": {\"option\":  \"value\"}\n  }\n}\n```\n\nIf nested property names within the path include periods, you need to use an array of strings. For example, the value `['configs', 'foo.bar', 'baz']` will get you the `\"baz\"` value in a `package.json` like this:\n\n```json\n{\n  \"configs\": {\n    \"foo.bar\": {\n      \"baz\": {\"option\":  \"value\"}\n    }\n  }\n}\n```\n\nIf a string includes period but corresponds to a top-level property name, it will not be interpreted as a period-delimited path. For example, the value `'one.two'` will get you the `\"three\"` value in a `package.json` like this:\n\n```json\n{\n  \"one.two\": \"three\",\n  \"one\": {\n    \"two\": \"four\"\n  }\n}\n```\n\n### stopDir\n\nType: `string`.\nDefault: Absolute path to your home directory.\n\nDirectory where the search will stop.\n\n### cache\n\nType: `boolean`.\nDefault: `true`.\n\nIf `false`, no caches will be used.\nRead more about [\"Caching\"](#caching) below.\n\n### transform\n\nType: `(Result) => Promise<Result> | Result`.\n\nA function that transforms the parsed configuration. Receives the [result].\n\nIf using [`search()`] or [`load()`] \\(which are async), the transform function can return the transformed result or return a Promise that resolves with the transformed result.\nIf using `cosmiconfigSync`, [`search()`] or [`load()`], the function must be synchronous and return the transformed result.\n\nThe reason you might use this option — instead of simply applying your transform function some other way — is that *the transformed result will be cached*. If your transformation involves additional filesystem I/O or other potentially slow processing, you can use this option to avoid repeating those steps every time a given configuration is searched or loaded.\n\n### ignoreEmptySearchPlaces\n\nType: `boolean`.\nDefault: `true`.\n\nBy default, if [`search()`] encounters an empty file (containing nothing but whitespace) in one of the [`searchPlaces`], it will ignore the empty file and move on.\nIf you'd like to load empty configuration files, instead, set this option to `false`.\n\nWhy might you want to load empty configuration files?\nIf you want to throw an error, or if an empty configuration file means something to your program.\n\n## Loading JS modules\n\nYour end users can provide JS configuration files as ECMAScript modules (ESM) under the following conditions:\n\n- You (the cosmiconfig user) use cosmiconfig's [asynchronous API](#asynchronous-api).\n- Your end user runs a version of Node that supports ESM ([>=12.17.0](https://nodejs.org/en/blog/release/v12.17.0/), or earlier with the `--experimental-modules` flag).\n- Your end user provides an `.mjs` configuration file, or a `.js` file whose nearest parent `package.json` file contains `\"type\": \"module\"`. (See [Node's method for determining a file's module system](https://nodejs.org/api/packages.html#packages_determining_module_system).)\n\nWith cosmiconfig's [asynchronous API](#asynchronous-api), the default [`searchPlaces`] include `.js`, `.ts`, `.mjs`, and `.cjs` files. Cosmiconfig loads all these file types with the [dynamic `import` function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#dynamic_imports).\n\nWith the [synchronous API](#synchronous-api), JS configuration files are always treated as CommonJS, and `.mjs` files are ignored, because there is no synchronous API for the dynamic `import` function.\n\n## Caching\n\nAs of v2, cosmiconfig uses caching to reduce the need for repetitious reading of the filesystem or expensive transforms. Every new cosmiconfig instance (created with `cosmiconfig()`) has its own caches.\n\nTo avoid or work around caching, you can do the following:\n\n- Set the `cosmiconfig` option [`cache`] to `false`.\n- Use the cache-clearing methods [`clearLoadCache()`], [`clearSearchCache()`], and [`clearCaches()`].\n- Create separate instances of cosmiconfig (separate \"explorers\").\n\n## Differences from [rc](https://github.com/dominictarr/rc)\n\n[rc](https://github.com/dominictarr/rc) serves its focused purpose well. cosmiconfig differs in a few key ways — making it more useful for some projects, less useful for others:\n\n- Looks for configuration in some different places: in a `package.json` property, an rc file, a `.config.js` file, and rc files with extensions.\n- Built-in support for JSON, YAML, and CommonJS formats.\n- Stops at the first configuration found, instead of finding all that can be found up the directory tree and merging them automatically.\n- Options.\n- Asynchronous by default (though can be run synchronously).\n\n## Usage for end users\n\nWhen configuring a tool, you can use multiple file formats and put these in multiple places.\n\nUsually, a tool would mention this in its own README file,\nbut by default, these are the following places, where `{NAME}` represents the name of the tool:\n\n```\npackage.json\n.{NAME}rc\n.{NAME}rc.json\n.{NAME}rc.yaml\n.{NAME}rc.yml\n.{NAME}rc.js\n.{NAME}rc.ts\n.{NAME}rc.cjs\n.config/{NAME}rc\n.config/{NAME}rc.json\n.config/{NAME}rc.yaml\n.config/{NAME}rc.yml\n.config/{NAME}rc.js\n.config/{NAME}rc.ts\n.config/{NAME}rc.mjs\n.config/{NAME}rc.cjs\n{NAME}.config.js\n{NAME}.config.ts\n{NAME}.config.mjs\n{NAME}.config.cjs\n```\n\nThe contents of these files are defined by the tool.\nFor example, you can configure prettier to enforce semicolons at the end of the line\nusing a file named `.config/prettierrc.yml`:\n\n```yaml\nsemi: true\n```\n\nAdditionally, you have the option to put a property named after the tool in your `package.json` file,\nwith the contents of that property being the same as the file contents. To use the same example as above:\n\n```json\n{\n  \"name\": \"your-project\",\n  \"dependencies\": {},\n  \"prettier\": {\n    \"semi\": true\n  }\n}\n```\n\nThis has the advantage that you can put the configuration of all tools\n(at least the ones that use cosmiconfig) in one file.\n\nYou can also add a `cosmiconfig` key within your `package.json` file or create one of the following files\nto configure `cosmiconfig` itself:\n\n```\n.config/config.json\n.config/config.yaml\n.config/config.yml\n.config/config.js\n.config/config.ts\n.config/config.cjs\n```\n\nThe following properties are currently actively supported in these places:\n\n```yaml\ncosmiconfig:\n  # adds places where configuration files are being searched\n  searchPlaces:\n    - .config/{name}.yml\n  # to enforce a custom naming convention and format, don't merge the above with the tool-defined search places\n  # (`true` is the default setting)\n  mergeSearchPlaces: false\n```\n\n> **Note:** technically, you can overwrite all options described in [cosmiconfigOptions](#cosmiconfigoptions) here,\n> but everything not listed above should be used at your own risk, as it has not been tested explicitly.\n> The only exceptions to this are the `loaders` property, which is explicitly not supported at this time,\n> and the `searchStrategy` property, which is intentionally disallowed.\n\nYou can also add more root properties outside the `cosmiconfig` property\nto configure your tools, entirely eliminating the need to look for additional configuration files:\n\n```yaml\ncosmiconfig:\n  searchPlaces: []\n\nprettier:\n  semi: true\n```\n\n### Imports\n\nWherever you put your configuration (the package.json file, a root config file or a package-specific config file),\nyou can use the special `$import` key to import another file as a base.\n\nFor example, you can import from an npm package (in this example, `@foocorp/config`).\n\n`.prettierrc.base.yml` in said npm package could define some company-wide defaults:\n\n```yaml\nprintWidth: 120\nsemi: true\ntabWidth: 2\n```\n\nAnd then, the `.prettierrc.yml` file in the project itself would just reference that file,\noptionally overriding the defaults with project-specific settings:\n\n```yaml\n$import: node_modules/@foocorp/config/.prettierrc.base.yml\n# we want more space!\nprintWidth: 200\n```\n\nIt is possible to import multiple base files by specifying an array of paths,\nwhich will be processed in declaration order;\nthat means that the last entry will win if there are conflicting properties.\n\nIt is also possible to import file formats other than the importing format\nas long as they are supported by the loaders specified by the developer of the tool you're configuring. \n\n```yaml\n$import: [first.yml, second.json, third.config.js]\n```\n\n## Contributing & Development\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md). By participating in this project you agree to abide by its terms.\n\nAnd please do participate!\n\n[result]: #result\n\n[`load()`]: #explorerload\n\n[`search()`]: #explorersearch\n\n[`clearloadcache()`]: #explorerclearloadcache\n\n[`clearsearchcache()`]: #explorerclearsearchcache\n\n[`cosmiconfig()`]: #cosmiconfig\n\n[`cosmiconfigSync()`]: #cosmiconfigsync\n\n[`clearcaches()`]: #explorerclearcaches\n\n[`packageprop`]: #packageprop\n\n[`cache`]: #cache\n\n[`stopdir`]: #stopdir\n\n[`searchplaces`]: #searchplaces\n\n[`loaders`]: #loaders\n\n[`cosmiconfigoptions`]: #cosmiconfigoptions\n\n[`explorerSync.search()`]: #explorersyncsearch\n\n[`explorerSync.load()`]: #explorersyncload\n\n[`explorer.search()`]: #explorersearch\n\n[`explorer.load()`]: #explorerload\n\n[\"Loading JS modules\"]: #loading-js-modules\n\n[`env-paths`]: https://github.com/sindresorhus/env-paths\n\n[search strategies]: #searchstrategy\n","types":"dist/index.d.ts","lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"funding":"https://github.com/sponsors/d-fischer","peerDependenciesMeta":{"typescript":{"optional":true}},"gitHead":"c6378b3b7ad3c6754d6d878c6bacdd9f1a5d642c","readmeFilename":"README.md","_nodeVersion":"18.17.1","_npmVersion":"9.6.7","_npmUser":{"name":"d-fischer","email":"daniel@d-fischer.dev"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},{"name":"d-fischer","email":"daniel@d-fischer.dev"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_9.0.0-alpha.1_1697549811324_0.3927031695358063"},"_hasShrinkwrap":false},"9.0.0-alpha.2":{"_id":"cosmiconfig@9.0.0-alpha.2","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, TypeScript module, and more!","version":"9.0.0-alpha.2","keywords":["load","configuration","config"],"homepage":"https://github.com/cosmiconfig/cosmiconfig#readme","author":{"name":"Daniel Fischer","email":"daniel@d-fischer.dev"},"contributors":[{"name":"Randolf J","email":"jrandolf@google.com"},{"name":"David Clark","email":"david.dave.clark@gmail.com"},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/cosmiconfig/cosmiconfig.git"},"bugs":{"url":"https://github.com/cosmiconfig/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"git clean -Xdf -e '!node_modules' .","build":"npm run build:tsc","build:tsc":"cross-env NODE_ENV=production tsc -b","dev":"npm run build:tsc -- --watch","lint":"eslint --ext .js,.ts .","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","test":"vitest run --coverage","test:watch":"vitest","check:all":"npm run test && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build","prepare":"husky install"},"directories":{},"devDependencies":{"@types/js-yaml":"^4.0.5","@types/node":"^14","@types/parse-json":"^4.0.0","@typescript-eslint/eslint-plugin":"^6.5.0","@typescript-eslint/parser":"^6.5.0","@vitest/coverage-istanbul":"^0.34.3","cross-env":"^7.0.3","del":"^7.1.0","del-cli":"^5.1.0","eslint":"^8.48.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^9.0.0","eslint-import-resolver-typescript":"^3.6.0","eslint-plugin-import":"^2.28.1","eslint-plugin-node":"^11.1.0","eslint-plugin-vitest":"^0.2.8","husky":"^8.0.3","lint-staged":"^14.0.1","make-dir":"^4.0.0","parent-module":"^3.0.0","prettier":"^3.0.3","remark-preset-davidtheclark":"^0.12.0","typescript":"^5.2.2","vitest":"^0.34.3"},"peerDependencies":{"typescript":">=4.9.5"},"dependencies":{"env-paths":"^2.2.1","import-fresh":"^3.3.0","js-yaml":"^4.1.0","parse-json":"^5.2.0","path-type":"^4.0.0"},"engines":{"node":">=14"},"main":"dist/index.js","dist":{"shasum":"910b80358afaf9f32c53ea0f5006bf54de4fc330","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-9.0.0-alpha.2.tgz"},"types":"dist/index.d.ts","lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"funding":"https://github.com/sponsors/d-fischer","peerDependenciesMeta":{"typescript":{"optional":true}},"gitHead":"76d26bdc397760086c7ff0302b2f154ca94390ae","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","_npmUser":{"name":"d-fischer","email":"daniel@d-fischer.dev"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},{"name":"d-fischer","email":"daniel@d-fischer.dev"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_9.0.0-alpha.2_1699808956005_0.7209094685169644"},"_hasShrinkwrap":false},"9.0.0-alpha.3":{"_id":"cosmiconfig@9.0.0-alpha.3","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, TypeScript module, and more!","version":"9.0.0-alpha.3","keywords":["load","configuration","config"],"homepage":"https://github.com/cosmiconfig/cosmiconfig#readme","author":{"name":"Daniel Fischer","email":"daniel@d-fischer.dev"},"contributors":[{"name":"Randolf J","email":"jrandolf@google.com"},{"name":"David Clark","email":"david.dave.clark@gmail.com"},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru"},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com"}],"repository":{"type":"git","url":"git+https://github.com/cosmiconfig/cosmiconfig.git"},"bugs":{"url":"https://github.com/cosmiconfig/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"git clean -Xdf -e '!node_modules' .","build":"npm run build:tsc","build:tsc":"cross-env NODE_ENV=production tsc -b","dev":"npm run build:tsc -- --watch","lint":"eslint --ext .js,.ts .","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","test":"vitest run --coverage","test:watch":"vitest","check:all":"npm run test && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build","prepare":"husky install"},"directories":{},"devDependencies":{"@types/js-yaml":"^4.0.5","@types/node":"^14","@types/parse-json":"^4.0.0","@typescript-eslint/eslint-plugin":"^6.5.0","@typescript-eslint/parser":"^6.5.0","@vitest/coverage-istanbul":"^0.34.3","cross-env":"^7.0.3","eslint":"^8.48.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^9.0.0","eslint-import-resolver-typescript":"^3.6.0","eslint-plugin-import":"^2.28.1","eslint-plugin-node":"^11.1.0","eslint-plugin-vitest":"^0.2.8","husky":"^8.0.3","lint-staged":"^14.0.1","parent-module":"^3.0.0","prettier":"^3.0.3","remark-preset-davidtheclark":"^0.12.0","typescript":"^5.2.2","vitest":"^0.34.3"},"peerDependencies":{"typescript":">=4.9.5"},"dependencies":{"env-paths":"^2.2.1","import-fresh":"^3.3.0","js-yaml":"^4.1.0","parse-json":"^5.2.0"},"engines":{"node":">=14"},"main":"dist/index.js","dist":{"shasum":"8671d4b0a1e4844373a78515290754cc859f8d59","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-9.0.0-alpha.3.tgz"},"types":"dist/index.d.ts","lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"funding":"https://github.com/sponsors/d-fischer","peerDependenciesMeta":{"typescript":{"optional":true}},"gitHead":"5839d5eda86a9f8c05e0ea6dd6052a3edf73181a","_nodeVersion":"18.18.2","_npmVersion":"9.8.1","_npmUser":{"name":"d-fischer","email":"daniel@d-fischer.dev"},"maintainers":[{"name":"davidtheclark","email":"david.dave.clark@gmail.com"},{"name":"d-fischer","email":"daniel@d-fischer.dev"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/cosmiconfig_9.0.0-alpha.3_1699813863029_0.30331521514672466"},"_hasShrinkwrap":false},"9.0.0":{"_id":"cosmiconfig@9.0.0","name":"cosmiconfig","description":"Find and load configuration from a package.json property, rc file, TypeScript module, and more!","version":"9.0.0","keywords":["load","configuration","config"],"homepage":"https://github.com/cosmiconfig/cosmiconfig#readme","author":{"name":"Daniel Fischer","email":"daniel@d-fischer.dev","url":""},"contributors":[{"name":"Randolf J","email":"jrandolf@google.com","url":""},{"name":"David Clark","email":"david.dave.clark@gmail.com","url":""},{"name":"Bogdan Chadkin","email":"trysound@yandex.ru","url":""},{"name":"Suhas Karanth","email":"sudo.suhas@gmail.com","url":""}],"repository":{"type":"git","url":"git+https://github.com/cosmiconfig/cosmiconfig.git"},"bugs":{"url":"https://github.com/cosmiconfig/cosmiconfig/issues"},"license":"MIT","scripts":{"clean":"git clean -Xdf -e '!node_modules' .","build":"npm run build:tsc","build:tsc":"cross-env NODE_ENV=production tsc -b","dev":"npm run build:tsc -- --watch","lint":"eslint --ext .js,.ts .","lint:fix":"eslint --ext .js,.ts . --fix","lint:md":"remark-preset-davidtheclark","format":"prettier \"**/*.{js,ts,json,yml,yaml}\" --write","format:md":"remark-preset-davidtheclark --format","format:check":"prettier \"**/*.{js,ts,json,yml,yaml}\" --check","test":"vitest run --coverage","test:watch":"vitest","check:all":"npm run test && npm run lint && npm run format:check","prepublishOnly":"npm run check:all && npm run build","prepare":"husky install"},"directories":null,"devDependencies":{"@types/js-yaml":"^4.0.5","@types/node":"^14","@types/parse-json":"^4.0.0","@typescript-eslint/eslint-plugin":"^6.5.0","@typescript-eslint/parser":"^6.5.0","@vitest/coverage-istanbul":"^0.34.3","cross-env":"^7.0.3","eslint":"^8.48.0","eslint-config-davidtheclark-node":"^0.2.2","eslint-config-prettier":"^9.0.0","eslint-import-resolver-typescript":"^3.6.0","eslint-plugin-import":"^2.28.1","eslint-plugin-node":"^11.1.0","eslint-plugin-vitest":"^0.2.8","husky":"^8.0.3","lint-staged":"^14.0.1","parent-module":"^3.0.0","prettier":"^3.0.3","remark-preset-davidtheclark":"^0.12.0","typescript":"^5.2.2","vitest":"^0.34.3"},"peerDependencies":{"typescript":">=4.9.5"},"dependencies":{"env-paths":"^2.2.1","import-fresh":"^3.3.0","js-yaml":"^4.1.0","parse-json":"^5.2.0"},"engines":{"node":">=14"},"files":["dist"],"main":"dist/index.js","dist":{"shasum":"34c3fc58287b915f3ae905ab6dc3de258b55ad9d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/cosmiconfig/-/cosmiconfig-9.0.0.tgz"},"types":"dist/index.d.ts","lint-staged":{"*.{js,ts}":["eslint --fix","prettier --write"],"*.{json,yml,yaml}":["prettier --write"],"*.md":["remark-preset-davidtheclark","remark-preset-davidtheclark --format"]},"funding":"https://github.com/sponsors/d-fischer","peerDependenciesMeta":{"typescript":{"optional":true}}}},"time":{"created":"2022-06-15T16:24:36Z","modified":"2024-02-13T08:10:38Z","0.1.0":"2022-06-15T16:24:36Z","0.2.0":"2022-06-15T16:24:36Z","0.3.0":"2022-06-15T16:24:36Z","0.4.0":"2022-06-15T16:24:36Z","0.4.1":"2022-06-15T16:24:36Z","0.5.0":"2022-06-15T16:24:36Z","1.0.0":"2022-06-15T16:24:36Z","1.0.1":"2022-06-15T16:24:36Z","1.0.2":"2022-06-15T16:24:36Z","1.1.0":"2022-06-15T16:24:36Z","2.0.0":"2022-06-15T16:24:36Z","2.0.1":"2022-06-15T16:24:36Z","2.0.2":"2022-06-15T16:24:36Z","2.1.0":"2022-06-15T16:24:36Z","2.1.1":"2022-06-15T16:24:36Z","2.1.2":"2022-06-15T16:24:36Z","2.1.3":"2022-06-15T16:24:36Z","2.2.0":"2022-06-15T16:24:36Z","2.2.1":"2022-06-15T16:24:36Z","2.2.2":"2022-06-15T16:24:36Z","3.0.0":"2022-06-15T16:24:36Z","3.0.1":"2022-06-15T16:24:36Z","3.1.0":"2022-06-15T16:24:36Z","4.0.0":"2022-06-15T16:24:36Z","5.0.1":"2022-06-15T16:24:36Z","5.0.2":"2022-06-15T16:24:36Z","5.0.3":"2022-06-15T16:24:36Z","5.0.4":"2022-06-15T16:24:36Z","5.0.5":"2022-06-15T16:24:36Z","5.0.6":"2022-06-15T16:24:36Z","5.0.7":"2022-06-15T16:24:36Z","5.1.0":"2022-06-15T16:24:36Z","5.2.0":"2022-06-15T16:24:36Z","5.2.1":"2022-06-15T16:34:27Z","6.0.0":"2023-01-13T12:59:38Z","7.0.0":"2022-06-15T16:24:36Z","7.0.1":"2022-11-22T19:35:27Z","7.1.0":"2023-01-12T10:49:29Z","8.0.0":"2023-02-12T23:48:21Z","8.1.0":"2023-02-24T23:50:56Z","8.1.1":"2023-03-17T14:40:01Z","8.1.2":"2023-03-17T17:43:24Z","8.1.3":"2023-03-18T20:55:10Z","8.2.0":"2023-08-07T20:29:45Z","8.3.0":"2023-09-02T17:42:35Z","8.3.1":"2023-09-02T20:48:37Z","8.3.2":"2023-09-02T20:48:37Z","8.3.3":"2023-09-03T20:46:39Z","8.3.4":"2023-09-04T20:49:09Z","8.3.5":"2023-09-08T23:54:41Z","8.3.6":"2023-12-19T06:18:54Z","9.0.0-alpha.0":"2023-10-16T23:51:34Z","9.0.0-alpha.1":"2023-10-17T17:56:05Z","9.0.0-alpha.2":"2023-11-12T20:47:50Z","9.0.0-alpha.3":"2023-11-12T23:54:38Z","9.0.0":"2024-02-13T08:10:38Z"}}