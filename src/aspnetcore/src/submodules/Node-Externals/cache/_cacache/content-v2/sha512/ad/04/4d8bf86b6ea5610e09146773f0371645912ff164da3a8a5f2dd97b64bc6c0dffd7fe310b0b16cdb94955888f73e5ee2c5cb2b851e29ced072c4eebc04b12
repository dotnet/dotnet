{"_id":"pretty-format","_rev":"29a93b11-f2f5-4eb8-b624-95c4e56c5a09","name":"pretty-format","dist-tags":{"latest":"29.7.0","next":"30.0.0-alpha.3"},"versions":{"1.0.0":{"_id":"pretty-format@1.0.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"1.0.0","keywords":["boilerplate","es6","node","starter","kit","transpile","6to5","babel"],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"gulp","test-browser":"gulp test-browser","build":"gulp build","coverage":"gulp coverage"},"directories":{},"devDependencies":{"babel":"^4.3.0","babelify":"^5.0.3","browserify":"^8.1.1","chai":"^2.0.0","del":"^1.1.1","esperanto":"^0.6.7","glob":"^4.3.5","gulp":"^3.8.10","gulp-babel":"^4.0.0","gulp-file":"^0.2.0","gulp-filter":"^2.0.0","gulp-istanbul":"^0.6.0","gulp-jscs":"^1.4.0","gulp-jshint":"^1.9.0","gulp-livereload":"^3.4.0","gulp-load-plugins":"^0.8.0","gulp-mocha":"^2.0.0","gulp-notify":"^2.1.0","gulp-plumber":"^0.6.6","gulp-rename":"^1.2.0","gulp-sourcemaps":"^1.3.0","gulp-uglifyjs":"^0.6.0","isparta":"^2.2.0","jshint-stylish":"^1.0.0","mkdirp":"^0.5.0","mocha":"^2.1.0","run-sequence":"^1.0.2","sinon":"^1.12.2","sinon-chai":"^2.7.0","vinyl-source-stream":"^1.0.0"},"dependencies":{"lodash":"^3.4.0"},"main":"dist/pretty-format.js","dist":{"shasum":"ce2aa8e552a93cb0d20f23c625313a843d657a77","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-1.0.0.tgz"},"babelBoilerplateOptions":{"entryFileName":"pretty-format","exportVarName":"PrettyFormat","mochaGlobals":["stub","spy","expect"]},"gitHead":"f5033177cce46717f1883ca3bfb17a2c39b495a1","_from":".","_npmVersion":"2.3.0","_nodeVersion":"0.10.36","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"thejameskyle","email":"me@thejameskyle.com"}]},"1.1.0":{"_id":"pretty-format@1.1.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"1.1.0","keywords":["boilerplate","es6","node","starter","kit","transpile","6to5","babel"],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"gulp","test-browser":"gulp test-browser","build":"gulp build","coverage":"gulp coverage"},"directories":{},"devDependencies":{"babel":"^4.3.0","babelify":"^5.0.3","browserify":"^8.1.1","chai":"^2.0.0","del":"^1.1.1","esperanto":"^0.6.7","glob":"^4.3.5","gulp":"^3.8.10","gulp-babel":"^4.0.0","gulp-file":"^0.2.0","gulp-filter":"^2.0.0","gulp-istanbul":"^0.6.0","gulp-jscs":"^1.4.0","gulp-jshint":"^1.9.0","gulp-livereload":"^3.4.0","gulp-load-plugins":"^0.8.0","gulp-mocha":"^2.0.0","gulp-notify":"^2.1.0","gulp-plumber":"^0.6.6","gulp-rename":"^1.2.0","gulp-sourcemaps":"^1.3.0","gulp-uglifyjs":"^0.6.0","isparta":"^2.2.0","jshint-stylish":"^1.0.0","mkdirp":"^0.5.0","mocha":"^2.1.0","run-sequence":"^1.0.2","sinon":"^1.12.2","sinon-chai":"^2.7.0","vinyl-source-stream":"^1.0.0"},"dependencies":{"lodash":"^3.4.0"},"main":"dist/pretty-format.js","dist":{"shasum":"dafccca3f9922601c2090b411e312e88fd705262","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-1.1.0.tgz"},"babelBoilerplateOptions":{"entryFileName":"pretty-format","exportVarName":"PrettyFormat","mochaGlobals":["stub","spy","expect"]},"gitHead":"57e24007ae9e526a847e1627ef9119bd983667ae","_from":".","_npmVersion":"2.3.0","_nodeVersion":"0.10.36","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"thejameskyle","email":"me@thejameskyle.com"}]},"1.1.1":{"_id":"pretty-format@1.1.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"1.1.1","keywords":["boilerplate","es6","node","starter","kit","transpile","6to5","babel"],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"gulp","test-browser":"gulp test-browser","build":"gulp build","coverage":"gulp coverage"},"directories":{},"devDependencies":{"babel":"^4.3.0","babelify":"^5.0.3","browserify":"^8.1.1","chai":"^2.0.0","del":"^1.1.1","esperanto":"^0.6.7","glob":"^4.3.5","gulp":"^3.8.10","gulp-babel":"^4.0.0","gulp-file":"^0.2.0","gulp-filter":"^2.0.0","gulp-istanbul":"^0.6.0","gulp-jscs":"^1.4.0","gulp-jshint":"^1.9.0","gulp-livereload":"^3.4.0","gulp-load-plugins":"^0.8.0","gulp-mocha":"^2.0.0","gulp-notify":"^2.1.0","gulp-plumber":"^0.6.6","gulp-rename":"^1.2.0","gulp-sourcemaps":"^1.3.0","gulp-uglifyjs":"^0.6.0","isparta":"^2.2.0","jshint-stylish":"^1.0.0","mkdirp":"^0.5.0","mocha":"^2.1.0","run-sequence":"^1.0.2","sinon":"^1.12.2","sinon-chai":"^2.7.0","vinyl-source-stream":"^1.0.0"},"dependencies":{"lodash":"^3.4.0"},"main":"dist/pretty-format.js","dist":{"shasum":"19235bc0abcb1926ea461c6e2584d9ff49ab126e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-1.1.1.tgz"},"babelBoilerplateOptions":{"entryFileName":"pretty-format","exportVarName":"PrettyFormat","mochaGlobals":["stub","spy","expect"]},"gitHead":"1f3cac5be4c339af4297f9b97e48a9e1c8307370","_from":".","_npmVersion":"2.3.0","_nodeVersion":"0.10.36","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"thejameskyle","email":"me@thejameskyle.com"}]},"1.2.0":{"_id":"pretty-format@1.2.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"1.2.0","keywords":["boilerplate","es6","node","starter","kit","transpile","6to5","babel"],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"gulp","test-browser":"gulp test-browser","build":"gulp build","coverage":"gulp coverage"},"directories":{},"devDependencies":{"babel":"^4.3.0","babelify":"^5.0.3","browserify":"^8.1.1","chai":"^2.0.0","del":"^1.1.1","esperanto":"^0.6.7","glob":"^4.3.5","gulp":"^3.8.10","gulp-babel":"^4.0.0","gulp-file":"^0.2.0","gulp-filter":"^2.0.0","gulp-istanbul":"^0.6.0","gulp-jscs":"^1.4.0","gulp-jshint":"^1.9.0","gulp-livereload":"^3.4.0","gulp-load-plugins":"^0.8.0","gulp-mocha":"^2.0.0","gulp-notify":"^2.1.0","gulp-plumber":"^0.6.6","gulp-rename":"^1.2.0","gulp-sourcemaps":"^1.3.0","gulp-uglifyjs":"^0.6.0","isparta":"^2.2.0","jshint-stylish":"^1.0.0","mkdirp":"^0.5.0","mocha":"^2.1.0","run-sequence":"^1.0.2","sinon":"^1.12.2","sinon-chai":"^2.7.0","vinyl-source-stream":"^1.0.0"},"dependencies":{"lodash":"^3.4.0"},"main":"dist/pretty-format.js","dist":{"shasum":"69376de6b777da76ed273f7ed5d76289f115cdb9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-1.2.0.tgz"},"babelBoilerplateOptions":{"entryFileName":"pretty-format","exportVarName":"PrettyFormat","mochaGlobals":["stub","spy","expect"]},"gitHead":"554b33cc08b0048d41db88dc0440974afebce5fa","_from":".","_npmVersion":"2.3.0","_nodeVersion":"0.10.36","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"thejameskyle","email":"me@thejameskyle.com"}]},"2.0.0":{"_id":"pretty-format@2.0.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"2.0.0","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"mocha test.js"},"directories":{},"devDependencies":{"mocha":"^2.1.0"},"dependencies":{"lodash":"^4.13.1"},"main":"index.js","dist":{"shasum":"040492380331ffffccd75e153dac72dbcc7ec378","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-2.0.0.tgz"},"gitHead":"37d2b08cf05dba367d026d5921e3e6f4505689de","_from":".","_npmVersion":"3.8.3","_nodeVersion":"5.10.1","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-2.0.0.tgz_1464818545698_0.25608914671465755"}},"2.1.0":{"_id":"pretty-format@2.1.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"2.1.0","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"mocha test.js"},"directories":{},"devDependencies":{"mocha":"^2.1.0"},"dependencies":{"lodash":"^4.13.1"},"main":"index.js","dist":{"shasum":"476ffab78d55d8c43474b999bfa817e345d117c3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-2.1.0.tgz"},"gitHead":"06b0943f6b43c685c8a3153e372f20d894ca0e69","_from":".","_npmVersion":"3.8.3","_nodeVersion":"5.10.1","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-2.1.0.tgz_1464825138448_0.10198654420673847"}},"3.0.0":{"_id":"pretty-format@3.0.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"3.0.0","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"mocha test.js"},"directories":{},"devDependencies":{"mocha":"^2.1.0"},"dependencies":{"lodash":"^4.13.1"},"main":"index.js","dist":{"shasum":"52db9fe7e9e6393b0387a218ebc085d99fe7d160","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-3.0.0.tgz"},"gitHead":"247edd4f36664cd60407a310d4ca835218034cb8","_from":".","_npmVersion":"3.8.3","_nodeVersion":"5.10.1","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-3.0.0.tgz_1465850033484_0.756478788331151"}},"3.1.0":{"_id":"pretty-format@3.1.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"3.1.0","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"mocha test.js"},"directories":{},"devDependencies":{"mocha":"^2.1.0"},"dependencies":{"lodash":"^4.13.1"},"main":"index.js","dist":{"shasum":"1fc982197f0e8da0dae57da0cb65cd03db25f20e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-3.1.0.tgz"},"gitHead":"bc0c4d481a51204724019a526c9164eaa48817ed","_from":".","_npmVersion":"2.14.9","_nodeVersion":"0.12.9","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-3.1.0.tgz_1465878718616_0.28907121275551617"}},"3.2.0":{"_id":"pretty-format@3.2.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"3.2.0","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"mocha test.js test-plugins-ReactTestComponent.js"},"directories":{},"devDependencies":{"mocha":"^2.1.0","react":"15.2.0-rc.1"},"dependencies":{"lodash":"^4.13.1"},"main":"index.js","dist":{"shasum":"30ba2f8ded37451af53d632fee1fe34b660a285f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-3.2.0.tgz"},"gitHead":"9254efec454215c5c2c1789b0c679c9b8d0b14ec","_from":".","_npmVersion":"3.8.6","_nodeVersion":"6.0.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-3.2.0.tgz_1465961024482_0.2189729092642665"}},"3.3.0":{"_id":"pretty-format@3.3.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"3.3.0","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"mocha test.js"},"directories":{},"devDependencies":{"mocha":"^2.1.0","react":"15.2.0-rc.1"},"dependencies":{"lodash":"^4.13.1"},"main":"index.js","dist":{"shasum":"1dd02939d41bc88fa01b0b7e76bb39562f37ba01","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-3.3.0.tgz"},"gitHead":"e39d00679d4e5e43f23d8a7ef29f2d5c844ec46a","_from":".","_npmVersion":"3.8.6","_nodeVersion":"6.0.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-3.3.0.tgz_1465972283646_0.32496382878161967"}},"3.3.1":{"_id":"pretty-format@3.3.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"3.3.1","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest"},"directories":{},"devDependencies":{"jest":"^12.1.0","react":"15.2.0-rc.1"},"dependencies":{"lodash":"^4.13.1"},"main":"index.js","dist":{"shasum":"54c1d4a7e705382017837d51916d8ec6662e4726","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-3.3.1.tgz"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"gitHead":"ede3ded058074a8176512d31891b8999bc9b7ea5","_from":".","_npmVersion":"3.8.3","_nodeVersion":"5.10.1","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-3.3.1.tgz_1466530860016_0.6480775438249111"}},"3.3.2":{"_id":"pretty-format@3.3.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"3.3.2","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest"},"directories":{},"devDependencies":{"jest":"^12.1.0","react":"15.2.0-rc.1"},"dependencies":{"lodash":"^4.13.1"},"main":"index.js","dist":{"shasum":"1643a3030cb27e6c73280d9dc9602dc203daf9bf","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-3.3.2.tgz"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"gitHead":"457b319dcf7ab6b2455820ffd6896b70d0d5e475","_from":".","_npmVersion":"3.8.6","_nodeVersion":"6.0.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-3.3.2.tgz_1466630764906_0.5482108551077545"}},"3.4.0":{"_id":"pretty-format@3.4.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"3.4.0","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest","perf":"node perf/test.js"},"directories":{},"devDependencies":{"chalk":"^1.1.3","jest":"^12.1.0","left-pad":"^1.1.0","react":"15.2.0-rc.1"},"main":"index.js","dist":{"shasum":"81f5266888e6d51515c8d6728228cb50bf9730e8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-3.4.0.tgz"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"gitHead":"12988cafd9b8dce7c58cc47491f08fedbafae658","_from":".","_npmVersion":"3.9.5","_nodeVersion":"6.2.2","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-3.4.0.tgz_1467492135459_0.17039876943454146"}},"3.4.1":{"_id":"pretty-format@3.4.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"3.4.1","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest","perf":"node perf/test.js"},"directories":{},"devDependencies":{"chalk":"^1.1.3","jest":"^12.1.0","left-pad":"^1.1.0","react":"15.2.0-rc.1"},"main":"index.js","dist":{"shasum":"e0a39a07407c6f8c38b07cbfee2df9907939c7f8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-3.4.1.tgz"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"gitHead":"a8de0a5fc54bd9014f66d7a51c2ec5b63fb4a101","_from":".","_npmVersion":"3.9.5","_nodeVersion":"6.2.2","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-3.4.1.tgz_1467654558509_0.23463946976698935"}},"3.4.2":{"_id":"pretty-format@3.4.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"3.4.2","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest","perf":"node perf/test.js"},"directories":{},"devDependencies":{"chalk":"^1.1.3","jest":"^12.1.0","left-pad":"^1.1.0","react":"15.2.0-rc.1"},"main":"index.js","dist":{"shasum":"186dbba514433bac3b3b616f8c806a0d5834ab3f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-3.4.2.tgz"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"gitHead":"06b59f7d1d610f85753908dc5b275e76025d668c","_from":".","_npmVersion":"3.9.5","_nodeVersion":"6.2.2","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-3.4.2.tgz_1467769452652_0.2976850795093924"}},"3.4.3":{"_id":"pretty-format@3.4.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"3.4.3","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest","perf":"node perf/test.js"},"directories":{},"devDependencies":{"chalk":"^1.1.3","jest":"^12.1.0","left-pad":"^1.1.0","react":"15.2.0-rc.1"},"main":"index.js","dist":{"shasum":"1f5be6a5c252099a5920d3093fef60845f2286ab","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-3.4.3.tgz"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"gitHead":"d1f6f577307decbce99bf256274e4f2920df3725","_from":".","_npmVersion":"3.9.5","_nodeVersion":"6.2.2","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-3.4.3.tgz_1467786479000_0.7793948103208095"}},"3.5.0":{"_id":"pretty-format@3.5.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"3.5.0","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest","perf":"node perf/test.js"},"directories":{},"devDependencies":{"chalk":"^1.1.3","jest":"^13.2.3","left-pad":"^1.1.0","react":"15.2.0-rc.1"},"main":"index.js","dist":{"shasum":"1d795f73086faae09df6c40feb1698134df9ba2d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-3.5.0.tgz"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"gitHead":"38b091e8d1bb50f9ec3435cef6c72bd124859f9c","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.3.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-3.5.0.tgz_1467966560716_0.14394370932132006"}},"3.5.1":{"_id":"pretty-format@3.5.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"3.5.1","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest","perf":"node perf/test.js"},"directories":{},"devDependencies":{"chalk":"^1.1.3","jest":"^13.2.3","left-pad":"^1.1.0","react":"15.2.0-rc.1"},"main":"index.js","dist":{"shasum":"a3f5239a15bed8f56c70d313467616771ca26cc0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-3.5.1.tgz"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"gitHead":"8487a02de74e5747bd0a7e8491ed2eef1ed952f9","_from":".","_npmVersion":"3.8.6","_nodeVersion":"5.12.0","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-3.5.1.tgz_1470071183130_0.9069960319902748"}},"3.5.2":{"_id":"pretty-format@3.5.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"3.5.2","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest","perf":"node perf/test.js"},"directories":{},"devDependencies":{"chalk":"^1.1.3","jest":"^14.1.0","left-pad":"^1.1.1","react":"15.3.0"},"main":"index.js","dist":{"shasum":"e97a0285f076a4ed722406522f9116773d169310","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-3.5.2.tgz"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"gitHead":"ee8df7bead23e719db01719ecc23ed8c71ba1ffc","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.3.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-3.5.2.tgz_1470279216845_0.8327156249433756"}},"3.5.3":{"_id":"pretty-format@3.5.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"3.5.3","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest","perf":"node perf/test.js"},"directories":{},"devDependencies":{"chalk":"^1.1.3","jest":"^14.1.0","left-pad":"^1.1.1","react":"15.3.0"},"main":"index.js","dist":{"shasum":"539dfe29335c42f18c233dcca23eebcc1d41f1c8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-3.5.3.tgz"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"gitHead":"973e169d9d8f7c78758972c68406e5c7ff891276","_from":".","_npmVersion":"3.8.6","_nodeVersion":"5.12.0","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-3.5.3.tgz_1470875030957_0.45410665567032993"}},"3.6.0":{"_id":"pretty-format@3.6.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"3.6.0","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest","perf":"node perf/test.js"},"directories":{},"devDependencies":{"chalk":"^1.1.3","jest":"^14.1.0","left-pad":"^1.1.1","react":"15.3.0"},"main":"index.js","dist":{"shasum":"c1c06ee737a3281971c89e0f25cc1387ea4d5d80","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-3.6.0.tgz"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"gitHead":"a0c81c42ba2d62e61a5eecbc39c6f5cb475df67d","_from":".","_npmVersion":"3.8.6","_nodeVersion":"5.12.0","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-3.6.0.tgz_1471465208714_0.31411029887385666"}},"3.7.0":{"_id":"pretty-format@3.7.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"3.7.0","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest","perf":"node perf/test.js"},"directories":{},"devDependencies":{"chalk":"^1.1.3","jest":"^14.1.0","left-pad":"^1.1.1","react":"15.3.0"},"main":"index.js","dist":{"shasum":"0bf7f828cafe6e86ffd6c9dd5a707867f35651ab","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-3.7.0.tgz"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"gitHead":"bc9409fb6d727d42082f2ff87870d7f49723130c","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.5.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-3.7.0.tgz_1472742965635_0.8393159916158766"}},"3.8.0":{"_id":"pretty-format@3.8.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"3.8.0","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest","perf":"node perf/test.js"},"directories":{},"devDependencies":{"chalk":"^1.1.3","jest":"^15.1.1","left-pad":"^1.1.1","react":"15.3.0"},"main":"index.js","dist":{"shasum":"bfbed56d5e9a776645f4b1ff7aa1a3ac4fa3c385","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-3.8.0.tgz"},"jest":{"testEnvironment":"node","verbose":true},"gitHead":"556f97f5ba896f15bf8e07e191636d31828f63a8","_from":".","_npmVersion":"3.8.6","_nodeVersion":"5.12.0","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-3.8.0.tgz_1473558204046_0.3871619531419128"}},"4.0.0":{"_id":"pretty-format@4.0.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"4.0.0","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest","perf":"node perf/test.js"},"directories":{},"devDependencies":{"chalk":"^1.1.3","jest":"^15.1.1","left-pad":"^1.1.1","react":"15.3.0"},"main":"index.js","dist":{"shasum":"eef0236ad1672ee5d6f36629d3e9e2454d01266c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-4.0.0.tgz"},"jest":{"testEnvironment":"node","verbose":true},"gitHead":"9b2e2f48d564a67848c72bf42160938867366c18","_from":".","_npmVersion":"3.8.6","_nodeVersion":"5.12.0","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-4.0.0.tgz_1473559349051_0.9919021637178957"}},"4.1.0":{"_id":"pretty-format@4.1.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"4.1.0","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest","perf":"node perf/test.js"},"directories":{},"devDependencies":{"chalk":"^1.1.3","jest":"^15.1.1","left-pad":"^1.1.1","react":"15.3.0"},"main":"index.js","dist":{"shasum":"fcd582438146d039a93a670fc18c72aa71325577","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-4.1.0.tgz"},"jest":{"testEnvironment":"node","verbose":true},"gitHead":"d03f38d418dbe342a0f9f8e8e787b50f3c2317dc","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.6.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-4.1.0.tgz_1474370567756_0.6978352644946426"}},"4.2.0":{"_id":"pretty-format@4.2.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"4.2.0","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest","perf":"node perf/test.js"},"directories":{},"devDependencies":{"chalk":"^1.1.3","jest":"^15.1.1","left-pad":"^1.1.1","react":"15.3.0"},"main":"index.js","dist":{"shasum":"6e2adb73eb423cbcc52077705d68c7504332013b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-4.2.0.tgz"},"jest":{"testEnvironment":"node","verbose":true},"gitHead":"a870fef3ddcfb0fc77b84e391dcbeebfa02e19f5","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.6.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-4.2.0.tgz_1474431819370_0.05452787992544472"}},"4.2.1":{"_id":"pretty-format@4.2.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"4.2.1","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest","perf":"node perf/test.js"},"directories":{},"devDependencies":{"chalk":"^1.1.3","jest":"^15.1.1","left-pad":"^1.1.1","react":"15.3.0"},"main":"index.js","dist":{"shasum":"b1dad18c3be0c8209e64c7791fa67e252d2d3e07","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-4.2.1.tgz"},"jest":{"testEnvironment":"node","verbose":true},"gitHead":"03fe50978332e63fb6b1107cf86d7744561dd22e","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.6.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-4.2.1.tgz_1474439807179_0.30846197600476444"}},"4.2.2":{"_id":"pretty-format@4.2.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"4.2.2","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest","perf":"node perf/test.js"},"directories":{},"devDependencies":{"chalk":"^1.1.3","jest":"^15.1.1","left-pad":"^1.1.1","react":"15.3.0"},"main":"index.js","dist":{"shasum":"f80bf8d98a6f4d20997a51d18bf331f2ad789a64","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-4.2.2.tgz"},"jest":{"testEnvironment":"node","verbose":true},"gitHead":"e593df850acd3a8087e3eb5fc46f66e7c93c3426","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-4.2.2.tgz_1478041303477_0.29300490533933043"}},"4.2.3":{"_id":"pretty-format@4.2.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"4.2.3","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest","perf":"node perf/test.js"},"directories":{},"devDependencies":{"chalk":"^1.1.3","jest":"^15.1.1","left-pad":"^1.1.1","react":"15.3.0"},"main":"index.js","dist":{"shasum":"8894c2ac81419cf801629d8f66320a25380d8b05","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-4.2.3.tgz"},"jest":{"testEnvironment":"node","verbose":true},"gitHead":"ef22c76692bae5e111cd7432b3dd694f5c4d0f12","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-4.2.3.tgz_1478801682352_0.8379785239230841"}},"4.3.0":{"_id":"pretty-format@4.3.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"4.3.0","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest","perf":"node perf/test.js"},"directories":{},"devDependencies":{"chalk":"^1.1.3","jest":"^15.1.1","left-pad":"^1.1.1","react":"15.3.0"},"main":"index.js","dist":{"shasum":"67d3de28fd37957ada895b94452ae539396d97c8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-4.3.0.tgz"},"jest":{"testEnvironment":"node","verbose":true},"gitHead":"8e3c166225d556a49e835db7919a346fd0a0cb11","_from":".","_npmVersion":"3.10.9","_nodeVersion":"7.1.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-4.3.0.tgz_1479452901694_0.7598880641162395"}},"4.3.1":{"_id":"pretty-format@4.3.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"4.3.1","keywords":[],"homepage":"https://github.com/thejameskle/pretty-format","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"license":"MIT","scripts":{"test":"jest","perf":"node perf/test.js"},"directories":{},"devDependencies":{"chalk":"^1.1.3","jest":"^15.1.1","left-pad":"^1.1.1","react":"15.3.0"},"main":"index.js","dist":{"shasum":"530be5c42b3c05b36414a7a2a4337aa80acd0e8d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-4.3.1.tgz"},"jest":{"testEnvironment":"node","verbose":true},"gitHead":"49ae3bab31388b5633c3029203e573f59d59f4a1","_from":".","_npmVersion":"3.10.9","_nodeVersion":"7.1.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-4.3.1.tgz_1479479968899_0.5202373208012432"}},"18.0.0":{"_id":"pretty-format@18.0.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"18.0.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","scripts":{"test":"../../packages/jest-cli/bin/jest.js","perf":"node perf/test.js"},"directories":{},"dependencies":{"ansi-styles":"^2.2.1"},"main":"build/index.js","dist":{"shasum":"5f45c59fe2ed6749d46765429679670b08b21137","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-18.0.0.tgz"},"_from":".","_npmVersion":"3.10.9","_nodeVersion":"7.2.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-18.0.0.tgz_1481801077732_0.5574890447314829"}},"18.1.0":{"_id":"pretty-format@18.1.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"18.1.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","scripts":{"test":"../../packages/jest-cli/bin/jest.js","perf":"node perf/test.js"},"directories":{},"dependencies":{"ansi-styles":"^2.2.1"},"main":"build/index.js","dist":{"shasum":"fb65a86f7a7f9194963eee91865c1bcf1039e284","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-18.1.0.tgz"},"_from":".","_npmVersion":"3.10.10","_nodeVersion":"7.3.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-18.1.0.tgz_1482976055665_0.7535617861431092"}},"18.5.0-alpha.7da3df39":{"_id":"pretty-format@18.5.0-alpha.7da3df39","name":"pretty-format","description":"Stringify any JavaScript value.","version":"18.5.0-alpha.7da3df39","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","scripts":{},"directories":{},"dependencies":{"ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"e990895d97195b0ff0cbd7d1dd8d8e179be43ce3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-18.5.0-alpha.7da3df39.tgz"},"_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.5.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-18.5.0-alpha.7da3df39.tgz_1487350677326_0.2225903368089348"}},"19.0.0":{"_id":"pretty-format@19.0.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"19.0.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","scripts":{},"directories":{},"dependencies":{"ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"56530d32acb98a3fa4851c4e2b9d37b420684c84","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-19.0.0.tgz"},"_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.5.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-19.0.0.tgz_1487669430940_0.7767606938723475"}},"19.1.0-alpha.eed82034":{"_id":"pretty-format@19.1.0-alpha.eed82034","name":"pretty-format","description":"Stringify any JavaScript value.","version":"19.1.0-alpha.eed82034","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","scripts":{},"directories":{},"dependencies":{"ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"970654771b23bb904f7362f814c38c95e339cd1d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-19.1.0-alpha.eed82034.tgz"},"_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.2","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"fb","email":"opensource+npm@fb.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-19.1.0-alpha.eed82034.tgz_1489711281837_0.8856345196254551"}},"19.2.0-alpha.993e64af":{"_id":"pretty-format@19.2.0-alpha.993e64af","name":"pretty-format","description":"Stringify any JavaScript value.","version":"19.2.0-alpha.993e64af","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","scripts":{},"directories":{},"dependencies":{"ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"e15683e06787f4656ccc5e6f850928a9dcd9e032","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-19.2.0-alpha.993e64af.tgz"},"browser":"build-es5/index.js","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.9.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"fb","email":"opensource+npm@fb.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-19.2.0-alpha.993e64af.tgz_1493912259929_0.5100777607876807"}},"19.3.0-alpha.85402254":{"_id":"pretty-format@19.3.0-alpha.85402254","name":"pretty-format","description":"Stringify any JavaScript value.","version":"19.3.0-alpha.85402254","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","scripts":{},"directories":{},"dependencies":{"ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"e0cdbd5b0bd06242dc2c00434bed3f9124e6f108","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-19.3.0-alpha.85402254.tgz"},"browser":"build-es5/index.js","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.9.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"fb","email":"opensource+npm@fb.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-19.3.0-alpha.85402254.tgz_1493984901988_0.14289735327474773"}},"20.0.0":{"_id":"pretty-format@20.0.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"20.0.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","scripts":{},"directories":{},"dependencies":{"ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"bd100f330e707e4f49fef3f234d6e915242a6e7e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-20.0.0.tgz"},"browser":"build-es5/index.js","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.9.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"fb","email":"opensource+npm@fb.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-20.0.0.tgz_1494073956310_0.3826066949404776"}},"20.0.1":{"_id":"pretty-format@20.0.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"20.0.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","scripts":{},"directories":{},"dependencies":{"ansi-regex":"^2.1.1","ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"ba95329771907c189643dd251e244061ff642350","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-20.0.1.tgz"},"browser":"build-es5/index.js","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.9.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"fb","email":"opensource+npm@fb.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-20.0.1.tgz_1494499807965_0.6633350073825568"}},"20.0.2":{"_id":"pretty-format@20.0.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"20.0.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","scripts":{},"directories":{},"dependencies":{"ansi-regex":"^2.1.1","ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"91831cb1d8fbedb783b58a1e3fcdf88c1bd7cfd1","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-20.0.2.tgz"},"browser":"build-es5/index.js","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.10.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"fb","email":"opensource+npm@fb.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-20.0.2.tgz_1495018221751_0.7365539520978928"}},"20.0.3":{"_id":"pretty-format@20.0.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"20.0.3","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","scripts":{},"directories":{},"dependencies":{"ansi-regex":"^2.1.1","ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"020e350a560a1fe1a98dc3beb6ccffb386de8b14","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-20.0.3.tgz"},"browser":"build-es5/index.js","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.10.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"fb","email":"opensource+npm@fb.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-20.0.3.tgz_1495018631891_0.5346766302827746"}},"20.1.0-alpha.1":{"_id":"pretty-format@20.1.0-alpha.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"20.1.0-alpha.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","directories":{},"dependencies":{"ansi-regex":"^2.1.1","ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"51092a6e850b27d0f9e94b03ad71350145dda215","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-20.1.0-alpha.1.tgz"},"_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-alpha.1.tgz_1498644980434_0.827074789442122"}},"20.1.0-alpha.2":{"_id":"pretty-format@20.1.0-alpha.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"20.1.0-alpha.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","directories":{},"dependencies":{"ansi-regex":"^2.1.1","ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"f6c08b56fee1d84936a18fea2edd1e1a03faaa5a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-20.1.0-alpha.2.tgz"},"_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-alpha.2.tgz_1498754206978_0.7984285997226834"}},"20.1.0-alpha.3":{"_id":"pretty-format@20.1.0-alpha.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"20.1.0-alpha.3","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","directories":{},"dependencies":{"ansi-regex":"^2.1.1","ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"ea1dd3874bc638c5d6237528ca2f6a087923257d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-20.1.0-alpha.3.tgz"},"_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-alpha.3.tgz_1498832453553_0.9796057401690632"}},"20.1.0-beta.1":{"_id":"pretty-format@20.1.0-beta.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"20.1.0-beta.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"4c8dbd96fde7b61b965e311af142a60235ecf72a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-20.1.0-beta.1.tgz"},"_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-beta.1.tgz_1499942021825_0.3699762055184692"}},"20.1.0-chi.1":{"_id":"pretty-format@20.1.0-chi.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"20.1.0-chi.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"36439fb4ca2bb68e76a0d965170a354e7b2bfc99","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-20.1.0-chi.1.tgz"},"_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-chi.1.tgz_1500027904420_0.6980449620168656"}},"20.1.0-delta.1":{"_id":"pretty-format@20.1.0-delta.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"20.1.0-delta.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"f1d31d80b5bd8724b33f3065acb1457710213d0d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-20.1.0-delta.1.tgz"},"_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-delta.1.tgz_1500367613994_0.9472515909001231"}},"20.1.0-delta.2":{"_id":"pretty-format@20.1.0-delta.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"20.1.0-delta.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"b30fb1f421158115db5c2561aee3e0932058b4cf","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-20.1.0-delta.2.tgz"},"_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-delta.2.tgz_1500469003591_0.6975763365626335"}},"20.1.0-delta.3":{"_id":"pretty-format@20.1.0-delta.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"20.1.0-delta.3","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"1f84f5ba81dc2d9670aa629e87369650da3bdf62","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-20.1.0-delta.3.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-delta.3.tgz_1501020745661_0.15517720603384078"}},"20.1.0-delta.4":{"_id":"pretty-format@20.1.0-delta.4","name":"pretty-format","description":"Stringify any JavaScript value.","version":"20.1.0-delta.4","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"4867b8e91e1eb7a97b2b02bd46bf9829f6fe1c89","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-20.1.0-delta.4.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-delta.4.tgz_1501175948595_0.7395031834021211"}},"20.1.0-delta.5":{"_id":"pretty-format@20.1.0-delta.5","name":"pretty-format","description":"Stringify any JavaScript value.","version":"20.1.0-delta.5","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"7a45a00938192cb306606b04c84a885a1501e0ff","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-20.1.0-delta.5.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.0.0","_npmUser":{"name":"aaronabramov","email":"aaron@abramov.io"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-delta.5.tgz_1501605216720_0.6961817897390574"}},"20.1.0-echo.1":{"_id":"pretty-format@20.1.0-echo.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"20.1.0-echo.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"3b97907461d90a06b2e7531185cb1b529eb186f3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-20.1.0-echo.1.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-echo.1.tgz_1502210993548_0.23874914622865617"}},"21.0.0-alpha.1":{"_id":"pretty-format@21.0.0-alpha.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.0.0-alpha.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"ce06c788260803f557e569d0e2a526510375df34","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.0.0-alpha.1.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.0.0-alpha.1.tgz_1502446445030_0.3482506617438048"}},"21.0.0-alpha.2":{"_id":"pretty-format@21.0.0-alpha.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.0.0-alpha.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"0122a9d5f73b9895ee9ba5954aeb817fb988f9c3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.0.0-alpha.2.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.0.0","_npmUser":{"name":"aaronabramov","email":"aaron@abramov.io"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.0.0-alpha.2.tgz_1503353208575_0.771268846001476"}},"21.0.0-beta.1":{"_id":"pretty-format@21.0.0-beta.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.0.0-beta.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"main":"build/index.js","dist":{"shasum":"53fb4572e1ab46b44cad62fd91863f4cd9d40225","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.0.0-beta.1.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.0.0-beta.1.tgz_1503610009937_0.9285495886579156"}},"21.0.0":{"_id":"pretty-format@21.0.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.0.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"bea1522c4c47e49b44db5b6fbf83e7737251f305","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.0.0.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.0.0.tgz_1504537314379_0.43319351389072835"}},"21.0.2":{"_id":"pretty-format@21.0.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.0.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"76adcebd836c41ccd2e6b626e70f63050d2a3534","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.0.2.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.0.2.tgz_1504880367068_0.5469620125368237"}},"21.1.0":{"_id":"pretty-format@21.1.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.1.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"BSD-3-Clause","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"557428254323832ee8b7c971cb613442bea67f61","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.1.0.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.1.0.tgz_1505353814511_0.45887886406853795"}},"21.2.0":{"_id":"pretty-format@21.2.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.2.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"8ca29556ad13eed5db48a3096b98bab9c321c6fa","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.2.0.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.2.0.tgz_1506457337974_0.018551710061728954"}},"21.2.1":{"_id":"pretty-format@21.2.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.2.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"ae5407f3cf21066cd011aa1ba5fce7b6a2eddb36","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.2.1.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.2.1.tgz_1506550502084_0.2247674383688718"}},"21.3.0-alpha.1e3ee68e":{"_id":"pretty-format@21.3.0-alpha.1e3ee68e","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.3.0-alpha.1e3ee68e","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"a3bad57fa8925ca2e7b5fe66454ac3d30371a314","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.3.0-alpha.1e3ee68e.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-alpha.1e3ee68e.tgz_1506608440405_0.08250383823178709"}},"21.3.0-alpha.eff7a1cf":{"_id":"pretty-format@21.3.0-alpha.eff7a1cf","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.3.0-alpha.eff7a1cf","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"c8d2648ce88753abcdfaa407b555b853db796068","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.3.0-alpha.eff7a1cf.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-alpha.eff7a1cf.tgz_1506876408988_0.26944437134079635"}},"21.3.0-beta.1":{"_id":"pretty-format@21.3.0-beta.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.3.0-beta.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"0525f192e6722eae942a9ecb93eab7ef4faa2440","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.3.0-beta.1.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.1.tgz_1507114118268_0.1342497942969203"}},"21.3.0-beta.2":{"_id":"pretty-format@21.3.0-beta.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.3.0-beta.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"781840c8d10bc37c4438c61ab50678917a9f8a7d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.3.0-beta.2.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.2.tgz_1507888445329_0.3785671025980264"}},"21.3.0-beta.3":{"_id":"pretty-format@21.3.0-beta.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.3.0-beta.3","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"f52e763ef855a5e0b093fc4af201592e896512f9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.3.0-beta.3.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.3.tgz_1508960044838_0.6422023139894009"}},"21.3.0-beta.4":{"_id":"pretty-format@21.3.0-beta.4","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.3.0-beta.4","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"6b3b8aba0b7097f821156e5fd1e3bc0fa923b17f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.3.0-beta.4.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.4.tgz_1509024417918_0.15134358499199152"}},"21.3.0-beta.5":{"_id":"pretty-format@21.3.0-beta.5","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.3.0-beta.5","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"7293f1b7cd5af9e4d451d3fce2d9edf37be1225a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.3.0-beta.5.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.5.tgz_1509628650932_0.5733425945509225"}},"21.3.0-beta.6":{"_id":"pretty-format@21.3.0-beta.6","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.3.0-beta.6","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"9e7124609ce93e236214032f812d01fd87dffdac","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.3.0-beta.6.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.6.tgz_1509726094359_0.6912878968287259"}},"21.3.0-beta.7":{"_id":"pretty-format@21.3.0-beta.7","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.3.0-beta.7","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"5cd0599fc79e89ac4d5f639d9d7aeb83cfa85d11","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.3.0-beta.7.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.7.tgz_1509961188645_0.923250918276608"}},"21.3.0-beta.8":{"_id":"pretty-format@21.3.0-beta.8","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.3.0-beta.8","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"66cb61c4658c2ecab21251495d6d6c102a25b4ba","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.3.0-beta.8.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.8.tgz_1510076622582_0.9108345645945519"}},"21.3.0-beta.9":{"_id":"pretty-format@21.3.0-beta.9","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.3.0-beta.9","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"dedd97b728c818f8e9c8818fc4c35c156cae01a5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.3.0-beta.9.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.5.1","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.9.tgz_1511356652309_0.2100884655956179"}},"21.3.0-beta.10":{"_id":"pretty-format@21.3.0-beta.10","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.3.0-beta.10","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"6899d96e7b41420cdae15813f5695969e211b5bc","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.3.0-beta.10.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.10.tgz_1511613564251_0.8827821186278015"}},"21.3.0-beta.11":{"_id":"pretty-format@21.3.0-beta.11","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.3.0-beta.11","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"3a32f4b33b868e20f73018de91a27cc2764643f4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.3.0-beta.11.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.11.tgz_1511965880572_0.03304202784784138"}},"21.3.0-beta.12":{"_id":"pretty-format@21.3.0-beta.12","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.3.0-beta.12","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"fc74dd91aa8a0af1667abd705d59fa31b9295616","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.3.0-beta.12.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.12.tgz_1512499714975_0.8375277179293334"}},"21.3.0-beta.13":{"_id":"pretty-format@21.3.0-beta.13","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.3.0-beta.13","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"e67a45a517de01a119ddb02804cd7232efea34af","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.3.0-beta.13.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.13.tgz_1512571028845_0.16150664957240224"}},"21.3.0-beta.14":{"_id":"pretty-format@21.3.0-beta.14","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.3.0-beta.14","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"21ae2e5d29656d54498b7b0ccefda842810eeba5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.3.0-beta.14.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.6.0","_nodeVersion":"9.2.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.14.tgz_1513075955153_0.6669253744184971"}},"21.3.0-beta.15":{"_id":"pretty-format@21.3.0-beta.15","name":"pretty-format","description":"Stringify any JavaScript value.","version":"21.3.0-beta.15","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"702708a64be53619b2c10138dc5a594056fd1569","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-21.3.0-beta.15.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.6.0","_nodeVersion":"9.2.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.15.tgz_1513344458991_0.48647130909375846"}},"22.0.0":{"_id":"pretty-format@22.0.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"22.0.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"3c1da8d100e7e0b0ff1d839f4743b002d5907531","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-22.0.0.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-22.0.0.tgz_1513595004523_0.2027169002685696"}},"22.0.1":{"_id":"pretty-format@22.0.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"22.0.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"65074c3946f544f6cd8445581293f532e0b3761c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-22.0.1.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.6.0","_nodeVersion":"9.2.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-22.0.1.tgz_1513628965104_0.48569458769634366"}},"22.0.2":{"_id":"pretty-format@22.0.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"22.0.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"c8a2fa835682ad259badd8ad70093f69a0704bad","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-22.0.2.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.6.0","_nodeVersion":"9.2.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-22.0.2.tgz_1513691584424_0.41861588321626186"}},"22.0.3":{"_id":"pretty-format@22.0.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"22.0.3","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"a2bfa59fc33ad24aa4429981bb52524b41ba5dd7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-22.0.3.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.6.0","_nodeVersion":"9.2.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-22.0.3.tgz_1513695534694_0.9589479956775904"}},"22.0.5":{"_id":"pretty-format@22.0.5","name":"pretty-format","description":"Stringify any JavaScript value.","version":"22.0.5","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"8bad3f12b2b84c76fc57a976bde6770eb4043c69","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-22.0.5.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-22.0.5.tgz_1515510592727_0.8857751328032464"}},"22.0.6":{"_id":"pretty-format@22.0.6","name":"pretty-format","description":"Stringify any JavaScript value.","version":"22.0.6","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"bbb78e38445f263c2d3b9e281f4b844380990720","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-22.0.6.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.6.0","_nodeVersion":"9.3.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-22.0.6.tgz_1515664005346_0.2216013662982732"}},"22.1.0":{"_id":"pretty-format@22.1.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"22.1.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"2277605b40ed4529ae4db51ff62f4be817647914","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-22.1.0.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.6.0","_nodeVersion":"9.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-22.1.0.tgz_1516017435817_0.08602811326272786"}},"22.4.0":{"_id":"pretty-format@22.4.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"22.4.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"237b1f7e1c50ed03bc65c03ccc29d7c8bb7beb94","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-22.4.0.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_22.4.0_1519128211238_0.3710352585898531"},"_hasShrinkwrap":false},"22.4.3":{"_id":"pretty-format@22.4.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"22.4.3","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"f873d780839a9c02e9664c8a082e9ee79eaac16f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-22.4.3.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_22.4.3_1521648490562_0.8268179225620371"},"_hasShrinkwrap":false},"23.0.0-alpha.2":{"_id":"pretty-format@23.0.0-alpha.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.0.0-alpha.2","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"c16ab6df05ae34b94536f9aa193ba642db2f9b3c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.0.0-alpha.2.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","readmeFilename":"README.md","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-alpha.2_1522060847231_0.13993785091764677"},"_hasShrinkwrap":false},"23.0.0-alpha.4":{"_id":"pretty-format@23.0.0-alpha.4","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.0.0-alpha.4","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"50990fdbbdfe353da0c1046d965f3c5c9b98866e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.0.0-alpha.4.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","readmeFilename":"README.md","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-alpha.4_1522067501793_0.4253621525737654"},"_hasShrinkwrap":false},"23.0.0-alpha.5":{"_id":"pretty-format@23.0.0-alpha.5","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.0.0-alpha.5","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"49441032994ce2b1cfa74531c1c9d9a36fe59e90","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.0.0-alpha.5.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","readmeFilename":"README.md","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-alpha.5_1523387900663_0.46189603391715317"},"_hasShrinkwrap":false},"23.0.0-alpha.7":{"_id":"pretty-format@23.0.0-alpha.7","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.0.0-alpha.7","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"d4a28747c40adf084100315e12c1eb49f122081d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.0.0-alpha.7.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","readmeFilename":"README.md","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-alpha.7_1523991319820_0.6475940960465933"},"_hasShrinkwrap":false},"23.0.0-alpha.3r":{"_id":"pretty-format@23.0.0-alpha.3r","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.0.0-alpha.3r","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":{},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"c32c5faf5cd5a88c2b286aefe061644df7e434ce","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.0.0-alpha.3r.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","readmeFilename":"README.md","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-alpha.3r_1525093812918_0.42840596561445365"},"_hasShrinkwrap":false},"23.0.0-alpha.5r":{"_id":"pretty-format@23.0.0-alpha.5r","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.0.0-alpha.5r","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"094d001344ba1857b19c6a943949b879f833202b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.0.0-alpha.5r.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","readmeFilename":"README.md","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-alpha.5r_1523425969823_0.716644474951514"},"_hasShrinkwrap":false},"23.0.0-alpha.6r":{"_id":"pretty-format@23.0.0-alpha.6r","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.0.0-alpha.6r","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"a50d8381a231f8ae231a8255d7e3de7a6c0d2fe5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.0.0-alpha.6r.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","readmeFilename":"README.md","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-alpha.6r_1523516494617_0.22010912614011202"},"_hasShrinkwrap":false},"23.0.0-beta.0":{"_id":"pretty-format@23.0.0-beta.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.0.0-beta.0","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"9a61b677f3b61e16001d288aeb51a15d6c9c83b2","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.0.0-beta.0.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","readmeFilename":"README.md","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-beta.0_1524219047082_0.4477683770943728"},"_hasShrinkwrap":false},"23.0.0-beta.1":{"_id":"pretty-format@23.0.0-beta.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.0.0-beta.1","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"f71c105088a74509cf8a8df49612abaf00b017a4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.0.0-beta.1.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","readmeFilename":"README.md","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-beta.1_1524325464570_0.7195881897469456"},"_hasShrinkwrap":false},"23.0.0-beta.2":{"_id":"pretty-format@23.0.0-beta.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.0.0-beta.2","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":{},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"fe04b98bfb7ae8ec7a46615f36c36901b59de5a9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.0.0-beta.2.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","readmeFilename":"README.md","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-beta.2_1524777457327_0.08931287476959171"},"_hasShrinkwrap":false},"23.0.0-beta.3r":{"_id":"pretty-format@23.0.0-beta.3r","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.0.0-beta.3r","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":{},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"983b39930da7536a3ad40753128f563d37321c88","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.0.0-beta.3r.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","readmeFilename":"README.md","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-beta.3r_1525094095640_0.8607787653648153"},"_hasShrinkwrap":false},"23.0.0-charlie.0":{"_id":"pretty-format@23.0.0-charlie.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.0.0-charlie.0","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":{},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"4b3d1f9f7aa61db4aeab3a75a993c036b98c1477","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.0.0-charlie.0.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","readmeFilename":"README.md","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-charlie.0_1525258583633_0.7890023758873661"},"_hasShrinkwrap":false},"23.0.0-charlie.1":{"_id":"pretty-format@23.0.0-charlie.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.0.0-charlie.1","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":{},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"cb5fde20ad5f5d2e38197c5f07340e694233e986","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.0.0-charlie.1.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","readmeFilename":"README.md","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-charlie.1_1525349415837_0.9022465978031704"},"_hasShrinkwrap":false},"23.0.0-charlie.2":{"_id":"pretty-format@23.0.0-charlie.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.0.0-charlie.2","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":{},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"ab87c9fd8ff445bd2ace394c84000201a041f217","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.0.0-charlie.2.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","readmeFilename":"README.md","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-charlie.2_1526377887160_0.16335274965802293"},"_hasShrinkwrap":false},"23.0.0-charlie.3":{"_id":"pretty-format@23.0.0-charlie.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.0.0-charlie.3","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":{},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"b251f1bdd5da81110c8d48842ac722405085f5fc","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.0.0-charlie.3.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","readmeFilename":"README.md","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-charlie.3_1527001141117_0.6048019972719636"},"_hasShrinkwrap":false},"23.0.0-charlie.4":{"_id":"pretty-format@23.0.0-charlie.4","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.0.0-charlie.4","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":{},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"9b3f34aa66113f497b637a9b72a9c8a5ff749d0d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.0.0-charlie.4.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","readmeFilename":"README.md","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-charlie.4_1527072146060_0.2617374969989241"},"_hasShrinkwrap":false},"23.0.0":{"_id":"pretty-format@23.0.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.0.0","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":{},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"b66dc584a0907b1969783c4c20e4d1180b18ac75","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.0.0.tgz"},"browser":"build-es5/index.js","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0_1527182786416_0.3664543715646642"},"_hasShrinkwrap":false},"23.0.1":{"_id":"pretty-format@23.0.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.0.1","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":{},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"d61d065268e4c759083bccbca27a01ad7c7601f4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.0.1.tgz"},"browser":"build-es5/index.js","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.1_1527435057085_0.6097930469393269"},"_hasShrinkwrap":false},"23.2.0":{"_id":"pretty-format@23.2.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.2.0","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":{},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"3b0aaa63c018a53583373c1cb3a5d96cc5e83017","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.2.0.tgz"},"browser":"build-es5/index.js","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.2.0_1529935516862_0.6045534628074585"},"_hasShrinkwrap":false},"23.5.0":{"_id":"pretty-format@23.5.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.5.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"0f9601ad9da70fe690a269cd3efca732c210687c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.5.0.tgz"},"browser":"build-es5/index.js","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.5.0_1533909102720_0.21408303510420867"},"_hasShrinkwrap":false},"23.6.0":{"_id":"pretty-format@23.6.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"23.6.0","author":{"name":"James Kyle","email":"me@thejameskyle.com","url":""},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":null,"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"5eaac8eeb6b33b987b7fe6097ea6a8a146ab5760","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-23.6.0.tgz"},"browser":"build-es5/index.js"},"24.0.0-alpha.0":{"_id":"pretty-format@24.0.0-alpha.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.0.0-alpha.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^4.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"b7dde608501b681b8eaccf56522f93b97abad6cd","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.0.0-alpha.0.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","gitHead":"22f67d49ffcce7a5b6d6891438b837b3b26ba9db","readmeFilename":"README.md","_npmVersion":"5.6.0","_nodeVersion":"8.10.0","_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.0.0-alpha.0_1539951166013_0.3702080103625105"},"_hasShrinkwrap":false},"24.0.0-alpha.1":{"_id":"pretty-format@24.0.0-alpha.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.0.0-alpha.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^4.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"38dc7af33801d644755235be1940fc1b1799e112","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.0.0-alpha.1.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","gitHead":"4954f46708415174c48a58f296a605fbe1244a31","readmeFilename":"README.md","_npmVersion":"5.6.0","_nodeVersion":"8.10.0","_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.0.0-alpha.1_1540222549216_0.9692385031286568"},"_hasShrinkwrap":false},"24.0.0-alpha.2":{"_id":"pretty-format@24.0.0-alpha.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.0.0-alpha.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^4.0.0","ansi-styles":"^3.2.0"},"engines":{"node":">= 6"},"main":"build/index.js","dist":{"shasum":"cbcd7609a4e594c478f46aa1b6d652d285342671","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.0.0-alpha.2.tgz"},"browser":"build-es5/index.js","gitHead":"c5e36835cff4b241327db9cf58c8f6f7227ed1f7","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.0.0-alpha.2_1540464679697_0.9806271720599484"},"_hasShrinkwrap":false},"24.0.0-alpha.4":{"_id":"pretty-format@24.0.0-alpha.4","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.0.0-alpha.4","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^4.0.0","ansi-styles":"^3.2.0"},"engines":{"node":">= 6"},"main":"build/index.js","dist":{"shasum":"cc1f7497e2496b71f8ad99f1526096e515fada03","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.0.0-alpha.4.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","gitHead":"e41f0bb257c6652c3100b97a1087f9f812fbea0d","readmeFilename":"README.md","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.0.0-alpha.4_1540571595114_0.5456319880913951"},"_hasShrinkwrap":false},"24.0.0-alpha.5":{"_id":"pretty-format@24.0.0-alpha.5","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.0.0-alpha.5","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^4.0.0","ansi-styles":"^3.2.0"},"engines":{"node":">= 6"},"main":"build/index.js","dist":{"shasum":"7d55172dd88d5cc874353f2b60403f3a41e248fa","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.0.0-alpha.5.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","gitHead":"2c18a53e8ff2437bba5fcb8076b754ac5f79f9f8","readmeFilename":"README.md","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.0.0-alpha.5_1541769165697_0.919979009351394"},"_hasShrinkwrap":false},"24.0.0-alpha.6":{"_id":"pretty-format@24.0.0-alpha.6","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.0.0-alpha.6","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^4.0.0","ansi-styles":"^3.2.0"},"engines":{"node":">= 6"},"main":"build/index.js","dist":{"shasum":"25ad2fa46b342d6278bf241c5d2114d4376fbac1","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.0.0-alpha.6.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","gitHead":"49d08403a941e596eda1279c07a1eaf4d4a73dad","readmeFilename":"README.md","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.0.0-alpha.6_1541785782719_0.07882660895723093"},"_hasShrinkwrap":false},"24.0.0-alpha.7":{"_id":"pretty-format@24.0.0-alpha.7","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.0.0-alpha.7","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^4.0.0","ansi-styles":"^3.2.0"},"main":"build/index.js","dist":{"shasum":"c3f932635a38569921eac940b2217bb774ef4d18","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.0.0-alpha.7.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","gitHead":"4954f46708415174c48a58f296a605fbe1244a31","readmeFilename":"README.md","_npmVersion":"5.6.0","_nodeVersion":"8.10.0","_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.0.0-alpha.7_1544544476167_0.4371508942416136"},"_hasShrinkwrap":false},"24.0.0-alpha.8":{"_id":"pretty-format@24.0.0-alpha.8","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.0.0-alpha.8","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^4.0.0","ansi-styles":"^3.2.0"},"engines":{"node":">= 6"},"main":"build/index.js","dist":{"shasum":"522f73193f1e837850030068ecaecbe0b7f7d06c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.0.0-alpha.8.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","gitHead":"700e0dadb85f5dc8ff5dac6c7e98956690049734","readmeFilename":"README.md","_npmVersion":"5.6.0","_nodeVersion":"8.10.0","_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.0.0-alpha.8_1544730472585_0.11588537364178064"},"_hasShrinkwrap":false},"24.0.0-alpha.9":{"_id":"pretty-format@24.0.0-alpha.9","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.0.0-alpha.9","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^4.0.0","ansi-styles":"^3.2.0"},"engines":{"node":">= 6"},"main":"build/index.js","dist":{"shasum":"d01a940d5c9a8bd38315f2dd3dc971df8547b172","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.0.0-alpha.9.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","gitHead":"c7caa7ba5904d0c61e586694cde5f536639e4afc","readmeFilename":"README.md","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.0.0-alpha.9_1545229558375_0.622054766681222"},"_hasShrinkwrap":false},"24.0.0-alpha.10":{"_id":"pretty-format@24.0.0-alpha.10","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.0.0-alpha.10","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^4.0.0","ansi-styles":"^3.2.0"},"engines":{"node":">= 6"},"main":"build/index.js","dist":{"shasum":"9e6b234714171b275148e36ad6524c8b6ab984b5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.0.0-alpha.10.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","gitHead":"722049ccd66947d48296dcb666bc99fccab86065","readmeFilename":"README.md","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.0.0-alpha.10_1547053470936_0.439009740803185"},"_hasShrinkwrap":false},"24.0.0-alpha.11":{"_id":"pretty-format@24.0.0-alpha.11","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.0.0-alpha.11","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^4.0.0","ansi-styles":"^3.2.0"},"engines":{"node":">= 6"},"main":"build/index.js","dist":{"shasum":"5127d0bf9f712e3c9f5cc5df5ae4a2fc46dfacaa","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.0.0-alpha.11.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","gitHead":"6a066c6afe2ae08669a27d3b703a6cf0d898e7b7","readmeFilename":"README.md","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.0.0-alpha.11_1547145307057_0.6328115400351251"},"_hasShrinkwrap":false},"24.0.0-alpha.12":{"_id":"pretty-format@24.0.0-alpha.12","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.0.0-alpha.12","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^4.0.0","ansi-styles":"^3.2.0"},"engines":{"node":">= 6"},"main":"build/index.js","dist":{"shasum":"eb3e3ccadbe7fe823bf5604de9e123abdf9b2d35","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.0.0-alpha.12.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","gitHead":"4f2bcb861d1f0fb150c05970362e52a38c31f67e","readmeFilename":"README.md","_npmVersion":"5.6.0","_nodeVersion":"8.11.3","_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.0.0-alpha.12_1547218879190_0.3313568015150097"},"_hasShrinkwrap":false},"24.0.0-alpha.13":{"_id":"pretty-format@24.0.0-alpha.13","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.0.0-alpha.13","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^4.0.0","ansi-styles":"^3.2.0"},"engines":{"node":">= 6"},"main":"build/index.js","dist":{"shasum":"f1bcbcbbfafd4cc1d4d871047d56f0fedbd030d6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.0.0-alpha.13.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","gitHead":"6de22dde9a10f775adc7b6f80080bdd224f6ae31","readmeFilename":"README.md","_nodeVersion":"8.11.3","_npmVersion":"lerna/3.10.5/node@v8.11.3+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.0.0-alpha.13_1548256528812_0.6154443589171268"},"_hasShrinkwrap":false},"24.0.0-alpha.15":{"_id":"pretty-format@24.0.0-alpha.15","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.0.0-alpha.15","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^4.0.0","ansi-styles":"^3.2.0"},"engines":{"node":">= 6"},"main":"build/index.js","dist":{"shasum":"b677da08e7ff63beebc2c7cc8cec52bdafd44fd4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.0.0-alpha.15.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","gitHead":"28971c5f794330e8acc6861288e6daafcd32238e","readmeFilename":"README.md","_nodeVersion":"8.11.3","_npmVersion":"lerna/3.10.5/node@v8.11.3+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.0.0-alpha.15_1548352352669_0.8565869268003767"},"_hasShrinkwrap":false},"24.0.0-alpha.16":{"_id":"pretty-format@24.0.0-alpha.16","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.0.0-alpha.16","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^4.0.0","ansi-styles":"^3.2.0"},"engines":{"node":">= 6"},"main":"build/index.js","dist":{"shasum":"cb681b24c5520c31458c4df9274f6f1f68815f99","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.0.0-alpha.16.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","browser":"build-es5/index.js","gitHead":"634e5a54f46b2a62d1dc81a170562e6f4e55ad60","readmeFilename":"README.md","_nodeVersion":"8.11.3","_npmVersion":"lerna/3.10.5/node@v8.11.3+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.0.0-alpha.16_1548423723701_0.7082266533575321"},"_hasShrinkwrap":false},"24.0.0":{"_id":"pretty-format@24.0.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.0.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^4.0.0","ansi-styles":"^3.2.0"},"engines":{"node":">= 6"},"main":"build/index.js","dist":{"shasum":"cb6599fd73ac088e37ed682f61291e4678f48591","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.0.0.tgz"},"browser":"build-es5/index.js","gitHead":"634e5a54f46b2a62d1dc81a170562e6f4e55ad60","_nodeVersion":"8.11.3","_npmVersion":"lerna/3.10.5/node@v8.11.3+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.0.0_1548428698756_0.3964871886317509"},"_hasShrinkwrap":false},"24.2.0-alpha.0":{"_id":"pretty-format@24.2.0-alpha.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.2.0-alpha.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/ansi-regex":"^4.0.0","@types/ansi-styles":"^3.2.1","@types/react":"*","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^24.2.0-alpha.0","ansi-regex":"^4.0.0","ansi-styles":"^3.2.0"},"engines":{"node":">= 6"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"2002b94909973e765d7a05d28770eb17ade476a4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.2.0-alpha.0.tgz"},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n- Supports all built-in JavaScript types\n  - primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  - other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  - collection types:\n    - `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    - `Map`, `Set`, `WeakMap`, `WeakSet`\n    - `Object`\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  - similar performance to `JSON.stringify` in v8\n  - significantly faster than `util.format` in Node.js\n- Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"build/index.d.ts","browser":"build-es5/index.js","gitHead":"800f2f803d01c8ae194d71b251e4965dd70e5bf2","readmeFilename":"README.md","_nodeVersion":"8.11.3","_npmVersion":"lerna/3.13.1/node@v8.11.3+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.2.0-alpha.0_1551797202724_0.37915218536956163"},"_hasShrinkwrap":false},"24.3.0":{"_id":"pretty-format@24.3.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.3.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/ansi-regex":"^4.0.0","@types/ansi-styles":"^3.2.1","@types/react":"*","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^24.3.0","ansi-regex":"^4.0.0","ansi-styles":"^3.2.0"},"engines":{"node":">= 6"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"e7eaefecd28d714fc6425dc2d5f9ed30e1188b26","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.3.0.tgz"},"types":"build/index.d.ts","browser":"build-es5/index.js","gitHead":"3a7a4f3a3f5489ac8e07dcddf76bb949c482ec87","_nodeVersion":"8.11.3","_npmVersion":"lerna/3.13.1/node@v8.11.3+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.3.0_1551963579497_0.521788719833167"},"_hasShrinkwrap":false},"24.3.1":{"_id":"pretty-format@24.3.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.3.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/ansi-regex":"^4.0.0","@types/ansi-styles":"^3.2.1","@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^24.3.0","ansi-regex":"^4.0.0","ansi-styles":"^3.2.0","react-is":"^16.8.4"},"engines":{"node":">= 6"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"ae4a98e93d73d86913a8a7dd1a7c3c900f8fda59","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.3.1.tgz"},"types":"build/index.d.ts","browser":"build-es5/index.js","gitHead":"65c6e9d5e398711c011078bb72648c77fc8a8cb3","_nodeVersion":"8.11.3","_npmVersion":"lerna/3.13.1/node@v8.11.3+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.3.1_1552000340349_0.3039072455196825"},"_hasShrinkwrap":false},"24.4.0":{"_id":"pretty-format@24.4.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.4.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/ansi-regex":"^4.0.0","@types/ansi-styles":"^3.2.1","@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^24.3.0","ansi-regex":"^4.0.0","ansi-styles":"^3.2.0","react-is":"^16.8.4"},"engines":{"node":">= 6"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"48db91969eb89f272c1bf3514bc5d5b228b3e722","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.4.0.tgz"},"types":"build/index.d.ts","browser":"build-es5/index.js","gitHead":"a018000fc162db3cfd0ebf9f23fdb734f05821a6","_nodeVersion":"8.11.3","_npmVersion":"lerna/3.13.1/node@v8.11.3+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.4.0_1552316269282_0.7008450752930335"},"_hasShrinkwrap":false},"24.5.0":{"_id":"pretty-format@24.5.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.5.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/ansi-regex":"^4.0.0","@types/ansi-styles":"^3.2.1","@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^24.5.0","ansi-regex":"^4.0.0","ansi-styles":"^3.2.0","react-is":"^16.8.4"},"engines":{"node":">= 6"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"cc69a0281a62cd7242633fc135d6930cd889822d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.5.0.tgz"},"types":"build/index.d.ts","browser":"build-es5/index.js","gitHead":"800533020f5b2f153615c821ed7cb12fd868fa6f","_nodeVersion":"8.11.3","_npmVersion":"lerna/3.13.1/node@v8.11.3+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"}],"_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.5.0_1552408587076_0.3403435260679679"},"_hasShrinkwrap":false},"24.6.0":{"_id":"pretty-format@24.6.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.6.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/ansi-regex":"^4.0.0","@types/ansi-styles":"^3.2.1","@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^24.6.0","ansi-regex":"^4.0.0","ansi-styles":"^3.2.0","react-is":"^16.8.4"},"engines":{"node":">= 6"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"66124fe5ea5c4d473337a204ece220e8fdc9806c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.6.0.tgz"},"types":"build/index.d.ts","browser":"build-es5/index.js","gitHead":"04e6a66d2ba8b18bee080bb28547db74a255d2c7","_nodeVersion":"8.11.3","_npmVersion":"lerna/3.13.1/node@v8.11.3+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"}],"_npmUser":{"name":"rubennorte","email":"rubennorte@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.6.0_1554157582735_0.10815463953542226"},"_hasShrinkwrap":false},"24.7.0":{"_id":"pretty-format@24.7.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.7.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/ansi-regex":"^4.0.0","@types/ansi-styles":"^3.2.1","@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^24.7.0","ansi-regex":"^4.0.0","ansi-styles":"^3.2.0","react-is":"^16.8.4"},"engines":{"node":">= 6"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"d23106bc2edcd776079c2daa5da02bcb12ed0c10","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.7.0.tgz"},"types":"build/index.d.ts","browser":"build-es5/index.js","gitHead":"eb0413622542bc0f70c32950d9daeeab9f6802ac","_nodeVersion":"11.12.0","_npmVersion":"lerna/3.13.1/node@v11.12.0+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"}],"_npmUser":{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.7.0_1554263717891_0.10220866426617281"},"_hasShrinkwrap":false},"24.8.0":{"_id":"pretty-format@24.8.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.8.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/ansi-regex":"^4.0.0","@types/ansi-styles":"^3.2.1","@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^24.8.0","ansi-regex":"^4.0.0","ansi-styles":"^3.2.0","react-is":"^16.8.4"},"engines":{"node":">= 6"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"8dae7044f58db7cb8be245383b565a963e3c27f2","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.8.0.tgz"},"types":"build/index.d.ts","browser":"build-es5/index.js","gitHead":"845728f24b3ef41e450595c384e9b5c9fdf248a4","_nodeVersion":"11.12.0","_npmVersion":"lerna/3.13.1/node@v11.12.0+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"}],"_npmUser":{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.8.0_1557021741471_0.5377404816199578"},"_hasShrinkwrap":false},"24.9.0":{"_id":"pretty-format@24.9.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"24.9.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/ansi-regex":"^4.0.0","@types/ansi-styles":"^3.2.1","@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^24.9.0","ansi-regex":"^4.0.0","ansi-styles":"^3.2.0","react-is":"^16.8.4"},"engines":{"node":">= 6"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"12fac31b37019a4eea3c11aa9a959eb7628aa7c9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-24.9.0.tgz"},"types":"build/index.d.ts","browser":"build-es5/index.js","gitHead":"9ad0f4bc6b8bdd94989804226c28c9960d9da7d1","_nodeVersion":"11.12.0","_npmVersion":"lerna/3.15.0/node@v11.12.0+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"}],"_npmUser":{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_24.9.0_1565934954829_0.4757742416820441"},"_hasShrinkwrap":false},"25.0.0":{"_id":"pretty-format@25.0.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"25.0.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/ansi-regex":"^4.0.0","@types/ansi-styles":"^3.2.1","@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^25.0.0","ansi-regex":"^4.0.0","ansi-styles":"^4.0.0","react-is":"^16.8.4"},"engines":{"node":">= 8"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"d127ef4972649531cc6eeb55c9e0d250350c48e7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-25.0.0.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"build/index.d.ts","browser":"build-es5/index.js","gitHead":"ff9269be05fd8316e95232198fce3463bf2f270e","readmeFilename":"README.md","_nodeVersion":"11.12.0","_npmVersion":"lerna/3.16.4/node@v11.12.0+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"}],"_npmUser":{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_25.0.0_1566444240697_0.5785760721309063"},"_hasShrinkwrap":false},"25.1.0":{"_id":"pretty-format@25.1.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"25.1.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^25.1.0","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 8.3"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"ed869bdaec1356fc5ae45de045e2c8ec7b07b0c8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-25.1.0.tgz"},"types":"build/index.d.ts","browser":"build-es5/index.js","gitHead":"170eee11d03b0ed5c60077982fdbc3bafd403638","_nodeVersion":"10.16.0","_npmVersion":"lerna/3.20.2/node@v10.16.0+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"}],"_npmUser":{"name":"davidzilburg","email":"davidzilburg@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_25.1.0_1579654793256_0.9387436370817765"},"_hasShrinkwrap":false},"25.2.0-alpha.86":{"_id":"pretty-format@25.2.0-alpha.86","name":"pretty-format","description":"Stringify any JavaScript value.","version":"25.2.0-alpha.86","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^25.2.0-alpha.86+cd98198c9","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 8.3"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"1ccedddb8246e99c6ad06fd8efd25461125a39ec","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-25.2.0-alpha.86.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"build/index.d.ts","browser":"build-es5/index.js","gitHead":"cd98198c9397d8b69c55155d7b224d62ef117a90","readmeFilename":"README.md","_nodeVersion":"12.14.1","_npmVersion":"lerna/3.20.2/node@v12.14.1+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_25.2.0-alpha.86_1585156587794_0.14831469129049846"},"_hasShrinkwrap":false},"25.2.0":{"_id":"pretty-format@25.2.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"25.2.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^25.2.0","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 8.3"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"645003fb5da71a0ded46c90007dff0e03857de7d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-25.2.0.tgz"},"types":"build/index.d.ts","browser":"build-es5/index.js","gitHead":"9f0339c1c762e39f869f7df63e88470287728b93","_nodeVersion":"12.14.1","_npmVersion":"lerna/3.20.2/node@v12.14.1+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_25.2.0_1585159083399_0.26118180077433273"},"_hasShrinkwrap":false},"25.2.1-alpha.1":{"_id":"pretty-format@25.2.1-alpha.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"25.2.1-alpha.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^25.2.1-alpha.1+5cc2ccdac","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 8.3"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"7e8b60ad1aaa42e955f851c1ea54e0a5912cb07a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-25.2.1-alpha.1.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"build/index.d.ts","typesVersions":{"<3.8":{"*":["ts3.4/*"]}},"browser":"build-es5/index.js","gitHead":"5cc2ccdacb1b2433581222252e43cb5a1f6861a9","readmeFilename":"README.md","_nodeVersion":"12.14.1","_npmVersion":"lerna/3.20.2/node@v12.14.1+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_25.2.1-alpha.1_1585209261034_0.08136996983938283"},"_hasShrinkwrap":false},"25.2.1-alpha.2":{"_id":"pretty-format@25.2.1-alpha.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"25.2.1-alpha.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^25.2.1-alpha.2+79b7ab67c","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 8.3"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"0d30e1878c8b9f39d0fa05281d574c843b867381","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-25.2.1-alpha.2.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"build/index.d.ts","typesVersions":{"<3.8":{"build/*":["build/ts3.4/*"]}},"browser":"build-es5/index.js","gitHead":"79b7ab67c63d3708f9689e25fbc0e8b0094bd019","readmeFilename":"README.md","_nodeVersion":"12.14.1","_npmVersion":"lerna/3.20.2/node@v12.14.1+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_25.2.1-alpha.2_1585210230452_0.3280669812852628"},"_hasShrinkwrap":false},"25.2.1":{"_id":"pretty-format@25.2.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"25.2.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^25.2.1","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 8.3"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"3b8f7b9241faa6736cdbc32879bee18454d1318d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-25.2.1.tgz"},"types":"build/index.d.ts","typesVersions":{"<3.8":{"build/*":["build/ts3.4/*"]}},"browser":"build-es5/index.js","gitHead":"a679390828b6c30aeaa547d8c4dc9aed6531e357","_nodeVersion":"12.14.1","_npmVersion":"lerna/3.20.2/node@v12.14.1+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_25.2.1_1585213271441_0.8557830050456996"},"_hasShrinkwrap":false},"25.2.3":{"_id":"pretty-format@25.2.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"25.2.3","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^25.2.3","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 8.3"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"ba6e9603a0d80fa2e470b1fed55de1f9bfd81421","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-25.2.3.tgz"},"types":"build/index.d.ts","typesVersions":{"<3.8":{"build/*":["build/ts3.4/*"]}},"browser":"build-es5/index.js","gitHead":"6f8bf80c38567ba076ae979af2dedb42b285b2d5","_nodeVersion":"12.14.1","_npmVersion":"lerna/3.20.2/node@v12.14.1+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_25.2.3_1585254286302_0.8069525036328202"},"_hasShrinkwrap":false},"25.2.5":{"_id":"pretty-format@25.2.5","name":"pretty-format","description":"Stringify any JavaScript value.","version":"25.2.5","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^25.2.5","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 8.3"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"cf43adf52cd479188b6a78b279f770e7e6b271e0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-25.2.5.tgz"},"types":"build/index.d.ts","typesVersions":{"<3.8":{"build/*":["build/ts3.4/*"]}},"browser":"build-es5/index.js","gitHead":"964ec0ea0754caa2d8bef16dc89c1f926971f5eb","_nodeVersion":"12.14.1","_npmVersion":"lerna/3.20.2/node@v12.14.1+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_25.2.5_1585822984548_0.6111607829865207"},"_hasShrinkwrap":false},"25.2.6":{"_id":"pretty-format@25.2.6","name":"pretty-format","description":"Stringify any JavaScript value.","version":"25.2.6","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^25.2.6","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 8.3"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"542a1c418d019bbf1cca2e3620443bc1323cb8d7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-25.2.6.tgz"},"types":"build/index.d.ts","typesVersions":{"<3.8":{"build/*":["build/ts3.4/*"]}},"browser":"build-es5/index.js","gitHead":"43207b743df164e9e58bd483dd9167b9084da18b","_nodeVersion":"12.14.1","_npmVersion":"lerna/3.20.2/node@v12.14.1+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_25.2.6_1585823356284_0.49923386717166696"},"_hasShrinkwrap":false},"25.3.0":{"_id":"pretty-format@25.3.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"25.3.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^25.3.0","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 8.3"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"d0a4f988ff4a6cd350342fdabbb809aeb4d49ad5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-25.3.0.tgz"},"types":"build/index.d.ts","typesVersions":{"<3.8":{"build/*":["build/ts3.4/*"]}},"browser":"build-es5/index.js","gitHead":"45a4936d96d74cdee6b91122a51a556e3ebe6dc8","_nodeVersion":"12.16.1","_npmVersion":"lerna/3.20.2/node@v12.16.1+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_25.3.0_1586352065592_0.6521314664307742"},"_hasShrinkwrap":false},"25.4.0":{"_id":"pretty-format@25.4.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"25.4.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^25.4.0","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 8.3"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"c58801bb5c4926ff4a677fe43f9b8b99812c7830","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-25.4.0.tgz"},"types":"build/index.d.ts","typesVersions":{"<3.8":{"build/*":["build/ts3.4/*"]}},"browser":"build-es5/index.js","gitHead":"5b129d714cadb818be28afbe313cbeae8fbb1dde","_nodeVersion":"12.16.1","_npmVersion":"lerna/3.20.2/node@v12.16.1+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_25.4.0_1587333024724_0.15668900300821842"},"_hasShrinkwrap":false},"25.5.0":{"_id":"pretty-format@25.5.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"25.5.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^25.5.0","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 8.3"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"7873c1d774f682c34b8d48b6743a2bf2ac55791a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-25.5.0.tgz"},"types":"build/index.d.ts","typesVersions":{"<3.8":{"build/*":["build/ts3.4/*"]}},"browser":"build-es5/index.js","gitHead":"ddd73d18adfb982b9b0d94bad7d41c9f78567ca7","_nodeVersion":"12.16.1","_npmVersion":"lerna/3.20.2/node@v12.16.1+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_25.5.0_1588103121046_0.437551209581599"},"_hasShrinkwrap":false},"26.0.0-alpha.0":{"_id":"pretty-format@26.0.0-alpha.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"26.0.0-alpha.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^26.0.0-alpha.0","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 10.14.2"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"39ca843d9ddae9d8c8d511fcaf0ee3a6e1a1d3fe","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-26.0.0-alpha.0.tgz"},"types":"build/index.d.ts","gitHead":"ba962e7e9669a4a2f723c2536c97462c8ddfff2d","_nodeVersion":"12.16.3","_npmVersion":"lerna/3.20.2/node@v12.16.3+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_26.0.0-alpha.0_1588421580286_0.2865787878999875"},"_hasShrinkwrap":false},"26.0.0-alpha.1":{"_id":"pretty-format@26.0.0-alpha.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"26.0.0-alpha.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^25.2.6","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^26.0.0-alpha.1","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 10.14.2"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"e9349eca22cde5b973a441a524ab9506f93c5689","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-26.0.0-alpha.1.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"build/index.d.ts","gitHead":"2bac04ffb8e533d12a072998da5c3751a41b796f","readmeFilename":"README.md","_nodeVersion":"12.16.3","_npmVersion":"lerna/3.20.2/node@v12.16.3+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_26.0.0-alpha.1_1588531681337_0.22206005318311317"},"_hasShrinkwrap":false},"26.0.0-alpha.2":{"_id":"pretty-format@26.0.0-alpha.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"26.0.0-alpha.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^25.2.6","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^26.0.0-alpha.2","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 10.14.2"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"23e9c58713a40036cad21222afcef8378893febc","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-26.0.0-alpha.2.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"build/index.d.ts","gitHead":"68b65afc97688bd5b0b433f8f585da57dcd1d418","readmeFilename":"README.md","_nodeVersion":"12.16.3","_npmVersion":"lerna/3.20.2/node@v12.16.3+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_26.0.0-alpha.2_1588608326737_0.6471885134701545"},"_hasShrinkwrap":false},"26.0.0":{"_id":"pretty-format@26.0.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"26.0.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^25.2.6","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^26.0.0","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 10.14.2"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"d9762345ab8bfbb91d704d9e7a18e77b79389ecf","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-26.0.0.tgz"},"types":"build/index.d.ts","gitHead":"343532a21f640ac2709c4076eef57e52279542e1","_nodeVersion":"12.16.3","_npmVersion":"lerna/3.20.2/node@v12.16.3+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_26.0.0_1588614784971_0.45714553811274006"},"_hasShrinkwrap":false},"26.0.1-alpha.0":{"_id":"pretty-format@26.0.1-alpha.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"26.0.1-alpha.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^25.2.6","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^26.0.1-alpha.0","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 10.14.2"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"d74222656995a2dd57b4902f5520534d5ba1294a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-26.0.1-alpha.0.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"build/index.d.ts","gitHead":"fb04716adb223ce2da1e6bb2b4ce7c011bad1807","readmeFilename":"README.md","_nodeVersion":"12.16.3","_npmVersion":"lerna/3.20.2/node@v12.16.3+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_26.0.1-alpha.0_1588630557032_0.6479744224171478"},"_hasShrinkwrap":false},"26.0.1":{"_id":"pretty-format@26.0.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"26.0.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^25.2.6","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^26.0.1","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 10.14.2"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"a4fe54fe428ad2fd3413ca6bbd1ec8c2e277e197","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-26.0.1.tgz"},"types":"build/index.d.ts","gitHead":"40b8e1e157c9981dda5a68d73fff647e80fc9f5c","_nodeVersion":"12.16.3","_npmVersion":"lerna/3.20.2/node@v12.16.3+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_26.0.1_1588675244825_0.7195190465853294"},"_hasShrinkwrap":false},"26.1.0":{"_id":"pretty-format@26.1.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"26.1.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^25.2.6","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^26.1.0","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 10.14.2"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"272b9cd1f1a924ab5d443dc224899d7a65cb96ec","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-26.1.0.tgz"},"types":"build/index.d.ts","gitHead":"817d8b6aca845dd4fcfd7f8316293e69f3a116c5","_nodeVersion":"12.18.1","_npmVersion":"lerna/3.20.2/node@v12.18.1+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_26.1.0_1592925310707_0.3402205445744704"},"_hasShrinkwrap":false},"26.2.0":{"_id":"pretty-format@26.2.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"26.2.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^26.2.0","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^26.2.0","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 10.14.2"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"83ecc8d7de676ff224225055e72bd64821cec4f1","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-26.2.0.tgz"},"types":"build/index.d.ts","gitHead":"4a716811a309dae135b780a87dc1647b285800eb","_nodeVersion":"12.18.1","_npmVersion":"lerna/3.20.2/node@v12.18.1+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_26.2.0_1596103902126_0.9841052534829695"},"_hasShrinkwrap":false},"26.3.0":{"_id":"pretty-format@26.3.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"26.3.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^26.3.0","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^26.3.0","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 10.14.2"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"d9a7b4bb2948cabc646e6a7729b12f686f3fed36","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-26.3.0.tgz"},"types":"build/index.d.ts","gitHead":"3a7e06fe855515a848241bb06a6f6e117847443d","_nodeVersion":"12.18.1","_npmVersion":"lerna/3.22.1/node@v12.18.1+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_26.3.0_1597059108189_0.5347288199257358"},"_hasShrinkwrap":false},"26.4.0":{"_id":"pretty-format@26.4.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"26.4.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^26.3.0","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^26.3.0","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 10.14.2"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"c08073f531429e9e5024049446f42ecc9f933a3b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-26.4.0.tgz"},"types":"build/index.d.ts","gitHead":"0b1e41d1d93ce4d15646f4a39fd5a7ffae5f43c3","_nodeVersion":"12.18.1","_npmVersion":"lerna/3.22.1/node@v12.18.1+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_26.4.0_1597266017827_0.26687810722358507"},"_hasShrinkwrap":false},"26.4.2":{"_id":"pretty-format@26.4.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"26.4.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^26.3.0","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^26.3.0","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 10"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"d081d032b398e801e2012af2df1214ef75a81237","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-26.4.2.tgz"},"types":"build/index.d.ts","gitHead":"2586a798260886c28b6d28256cdfe354e039d5d1","_nodeVersion":"12.18.1","_npmVersion":"lerna/3.22.1/node@v12.18.1+x64 (darwin)","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"davidzilburg@gmail.com","name":"davidzilburg"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"rubennorte@gmail.com","name":"rubennorte"},{"email":"scott.hovestadt@gmail.com","name":"scotthovestadt"},{"email":"sbekkhus91@gmail.com","name":"simenb"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_26.4.2_1598098196527_0.4485991105059288"},"_hasShrinkwrap":false},"26.5.0":{"_id":"pretty-format@26.5.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"26.5.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^26.5.0","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^26.5.0","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 10"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"3320e4952f8e6918fc8c26c6df7aad9734818ac2","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-26.5.0.tgz"},"types":"build/index.d.ts","gitHead":"68d1b1b638bc7464c2794a957c1b894de7da2ee3","_nodeVersion":"12.18.1","_npmVersion":"lerna/3.22.1/node@v12.18.1+x64 (darwin)","maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_26.5.0_1601890094897_0.6435085745347244"},"_hasShrinkwrap":false},"26.5.2":{"_id":"pretty-format@26.5.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"26.5.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^26.5.2","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^26.5.2","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 10"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"5d896acfdaa09210683d34b6dc0e6e21423cd3e1","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-26.5.2.tgz"},"types":"build/index.d.ts","gitHead":"d2bacceb51e7f05c9cb6d764d5cd886a2fd71267","_nodeVersion":"12.18.1","_npmVersion":"lerna/3.22.1/node@v12.18.1+x64 (darwin)","maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_26.5.2_1601981564548_0.2252929830964001"},"_hasShrinkwrap":false},"26.6.0":{"_id":"pretty-format@26.6.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"26.6.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^26.6.0","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^26.6.0","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^16.12.0"},"engines":{"node":">= 10"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"1e1030e3c70e3ac1c568a5fd15627671ea159391","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-26.6.0.tgz"},"types":"build/index.d.ts","gitHead":"b254fd82fdedcba200e1c7eddeaab83a09bdaaef","_nodeVersion":"12.19.0","_npmVersion":"lerna/3.22.1/node@v12.19.0+x64 (darwin)","maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_26.6.0_1603108717608_0.242439414276991"},"_hasShrinkwrap":false},"26.6.1":{"_id":"pretty-format@26.6.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"26.6.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^26.6.1","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^26.6.1","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^17.0.1"},"engines":{"node":">= 10"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"af9a2f63493a856acddeeb11ba6bcf61989660a8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-26.6.1.tgz"},"types":"build/index.d.ts","gitHead":"f6366db60e32f1763e612288bf3984bcfa7a0a15","_nodeVersion":"12.19.0","_npmVersion":"lerna/3.22.1/node@v12.19.0+x64 (darwin)","maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_26.6.1_1603443961787_0.4553846582958705"},"_hasShrinkwrap":false},"26.6.2":{"_id":"pretty-format@26.6.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"26.6.2","author":{"name":"James Kyle","email":"me@thejameskyle.com","url":""},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":null,"devDependencies":{"@types/react":"*","@types/react-is":"^16.7.1","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^26.6.2","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^26.6.2","ansi-regex":"^5.0.0","ansi-styles":"^4.0.0","react-is":"^17.0.1"},"engines":{"node":">= 10"},"main":"build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"e35c2705f14cb7fe2fe94fa078345b444120fc93","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-26.6.2.tgz"},"types":"build/index.d.ts","gitHead":"4c46930615602cbf983fb7e8e82884c282a624d5"},"27.0.0-next.0":{"_id":"pretty-format@27.0.0-next.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.0.0-next.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.0.0-next.0","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.0.0-next.0","ansi-regex":"^5.0.0","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"ca1e1d9fedfee2e549a339dba0dd833da8d30e2e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.0.0-next.0.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"4f77c70602cab8419794f10fa39510f13baafef8","readmeFilename":"README.md","_nodeVersion":"14.15.0","_npmVersion":"lerna/3.22.1/node@v14.15.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.0.0-next.0_1607189114164_0.776010043379239"},"_hasShrinkwrap":false},"27.0.0-next.1":{"_id":"pretty-format@27.0.0-next.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.0.0-next.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.0.0-next.1","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.0.0-next.1","ansi-regex":"^5.0.0","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"cf8446b65d51e1c2af9c47bd8bf15e65ca9b9680","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.0.0-next.1.tgz"},"types":"./build/index.d.ts","gitHead":"774c1898bbb078c20fa53906d535335babc6585d","_nodeVersion":"14.15.0","_npmVersion":"lerna/3.22.1/node@v14.15.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.0.0-next.1_1607345001418_0.9044469356101592"},"_hasShrinkwrap":false},"27.0.0-next.3":{"_id":"pretty-format@27.0.0-next.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.0.0-next.3","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.0.0-next.3","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.0.0-next.3","ansi-regex":"^5.0.0","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"1dab8c1e36ca9266a8b91a3b2aab0e6c1223bd96","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.0.0-next.3.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"2e34f2cfaf9b6864c3ad4bdca05d3097d3108a41","readmeFilename":"README.md","_nodeVersion":"14.15.3","_npmVersion":"lerna/3.22.1/node@v14.15.3+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.0.0-next.3_1613686188495_0.5727726322376101"},"_hasShrinkwrap":false},"27.0.0-next.5":{"_id":"pretty-format@27.0.0-next.5","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.0.0-next.5","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.0.0-next.3","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.0.0-next.3","ansi-regex":"^5.0.0","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"9d5c606645bee6149354fc4fcefb27899b51aedf","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.0.0-next.5.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"0a2b94282170b6d4cc26c2d2003cc04ffebe5e3f","readmeFilename":"README.md","_nodeVersion":"14.15.3","_npmVersion":"lerna/4.0.0/node@v14.15.3+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.0.0-next.5_1615813397108_0.859500618184837"},"_hasShrinkwrap":false},"27.0.0-next.6":{"_id":"pretty-format@27.0.0-next.6","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.0.0-next.6","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.0.0-next.6","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.0.0-next.3","ansi-regex":"^5.0.0","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"939db422c273e8537c9b12d5146ccefdef5cccf5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.0.0-next.6.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"974d2f22b7deeb4f683fb38dd1ee3a0e984916df","readmeFilename":"README.md","_nodeVersion":"14.15.3","_npmVersion":"lerna/4.0.0/node@v14.15.3+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.0.0-next.6_1616701197091_0.4323549634272008"},"_hasShrinkwrap":false},"27.0.0-next.7":{"_id":"pretty-format@27.0.0-next.7","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.0.0-next.7","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.0.0-next.7","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.0.0-next.7","ansi-regex":"^5.0.0","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"48fcf4058857114c6326410894ad39ac97e84555","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.0.0-next.7.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"28c763e6be8f57bda89238b95dc801460c2d6601","readmeFilename":"README.md","_nodeVersion":"14.15.3","_npmVersion":"lerna/4.0.0/node@v14.15.3+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.0.0-next.7_1617371273959_0.7513344253300966"},"_hasShrinkwrap":false},"27.0.0-next.8":{"_id":"pretty-format@27.0.0-next.8","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.0.0-next.8","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.0.0-next.8","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.0.0-next.8","ansi-regex":"^5.0.0","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"4dc6c34580949180a40c38957ac5e92693f10f2e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.0.0-next.8.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"d7ba5030e274b52f029179dfdb860349a36eea37","readmeFilename":"README.md","_nodeVersion":"14.15.3","_npmVersion":"lerna/4.0.0/node@v14.15.3+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.0.0-next.8_1618267349142_0.02346708839333833"},"_hasShrinkwrap":false},"27.0.0-next.9":{"_id":"pretty-format@27.0.0-next.9","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.0.0-next.9","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.0.0-next.9","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.0.0-next.8","ansi-regex":"^5.0.0","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"37272be62520236a17e77038d1c9dd15a6e695ad","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.0.0-next.9.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"d836f33f98845794b4eae8149548a81ddcfc6521","readmeFilename":"README.md","_nodeVersion":"14.16.1","_npmVersion":"lerna/4.0.0/node@v14.16.1+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.0.0-next.9_1620109501875_0.5944508303070835"},"_hasShrinkwrap":false},"27.0.0-next.10":{"_id":"pretty-format@27.0.0-next.10","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.0.0-next.10","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.0.0-next.10","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.0.0-next.10","ansi-regex":"^5.0.0","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"401893221e71a1f944fbfbca97a94437a1719a15","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.0.0-next.10.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"6f44529270310b7dbdf9a0b72b21b5cd50fda4b1","readmeFilename":"README.md","_nodeVersion":"14.17.0","_npmVersion":"lerna/4.0.0/node@v14.17.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.0.0-next.10_1621519876460_0.9198787476049779"},"_hasShrinkwrap":false},"27.0.0-next.11":{"_id":"pretty-format@27.0.0-next.11","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.0.0-next.11","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.0.0-next.11","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.0.0-next.10","ansi-regex":"^5.0.0","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"5badcab597ad026fbcfea6d2b6ac7f61afb5e88b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.0.0-next.11.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"e2eb9aeee8aacd441f1c8ac992c698ac4d303f60","readmeFilename":"README.md","_nodeVersion":"14.17.0","_npmVersion":"lerna/4.0.0/node@v14.17.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.0.0-next.11_1621549722252_0.765175572961817"},"_hasShrinkwrap":false},"27.0.0":{"_id":"pretty-format@27.0.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.0.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.0.0-next.11","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.0.0-next.10","ansi-regex":"^5.0.0","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"df5389b8e3064b5b41f55f156bd125b7e55cbe64","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.0.0.tgz"},"types":"./build/index.d.ts","gitHead":"be16e47afcc9f64653b9a47782cb48a5ca243e65","_nodeVersion":"14.17.0","_npmVersion":"lerna/4.0.0/node@v14.17.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.0.0_1621930504103_0.04777645672754249"},"_hasShrinkwrap":false},"27.0.1":{"_id":"pretty-format@27.0.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.0.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.0.1","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.0.1","ansi-regex":"^5.0.0","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"c4094621dfbd3e8ab751964d1cf01edc6f88474d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.0.1.tgz"},"types":"./build/index.d.ts","gitHead":"2cb20e945a26b2c9867b30b787e81f6317e59aa1","_nodeVersion":"14.17.0","_npmVersion":"lerna/4.0.0/node@v14.17.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.0.1_1621937189610_0.1666170729839298"},"_hasShrinkwrap":false},"27.0.2":{"_id":"pretty-format@27.0.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.0.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.0.2","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.0.2","ansi-regex":"^5.0.0","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"9283ff8c4f581b186b2d4da461617143dca478a4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.0.2.tgz"},"types":"./build/index.d.ts","gitHead":"7ca8a22b8453e95c63842ee6aa4d8d8d8b4f9612","_nodeVersion":"14.17.0","_npmVersion":"lerna/4.0.0/node@v14.17.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.0.2_1622290032622_0.30911559142867273"},"_hasShrinkwrap":false},"27.0.6":{"_id":"pretty-format@27.0.6","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.0.6","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.0.6","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.0.6","ansi-regex":"^5.0.0","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"ab770c47b2c6f893a21aefc57b75da63ef49a11f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.0.6.tgz"},"types":"./build/index.d.ts","gitHead":"d257d1c44ba62079bd4307ae78ba226d47c56ac9","_nodeVersion":"14.17.1","_npmVersion":"lerna/4.0.0/node@v14.17.1+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.0.6_1624899935644_0.5213734473603584"},"_hasShrinkwrap":false},"27.1.0":{"_id":"pretty-format@27.1.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.1.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.1.0","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.1.0","ansi-regex":"^5.0.0","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"022f3fdb19121e0a2612f3cff8d724431461b9ca","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.1.0.tgz"},"types":"./build/index.d.ts","gitHead":"5ef792e957e83428d868a18618b8629e32719993","_nodeVersion":"14.17.5","_npmVersion":"lerna/4.0.0/node@v14.17.5+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.1.0_1630058376503_0.5870293893812262"},"_hasShrinkwrap":false},"27.1.1":{"_id":"pretty-format@27.1.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.1.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.1.1","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.1.1","ansi-regex":"^5.0.0","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"cbaf9ec6cd7cfc3141478b6f6293c0ccdbe968e0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.1.1.tgz"},"types":"./build/index.d.ts","gitHead":"111198b62dbfc3a730f7b1693e311608e834fe1d","_nodeVersion":"14.17.5","_npmVersion":"lerna/4.0.0/node@v14.17.5+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.1.1_1631095930894_0.8509631842344652"},"_hasShrinkwrap":false},"27.2.0":{"_id":"pretty-format@27.2.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.2.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.2.0","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.1.1","ansi-regex":"^5.0.0","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"ee37a94ce2a79765791a8649ae374d468c18ef19","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.2.0.tgz"},"types":"./build/index.d.ts","gitHead":"b05635c539f8f673dfed5bf05ea727a8d5d7bbe2","_nodeVersion":"14.17.5","_npmVersion":"lerna/4.0.0/node@v14.17.5+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.2.0_1631520394504_0.7457474256325933"},"_hasShrinkwrap":false},"27.2.2":{"_id":"pretty-format@27.2.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.2.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.2.0","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.1.1","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"c080f1ab7ac64302e4d438f208596fc649dbeeb3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.2.2.tgz"},"types":"./build/index.d.ts","gitHead":"f54d96fec55518640b900d6994b2c4153316d1ed","_nodeVersion":"14.17.6","_npmVersion":"lerna/4.0.0/node@v14.17.6+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.2.2_1632576906925_0.7330380426794147"},"_hasShrinkwrap":false},"27.2.3":{"_id":"pretty-format@27.2.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.2.3","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.2.3","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.2.3","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"c76710de6ebd8b1b412a5668bacf4a6c2f21a029","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.2.3.tgz"},"types":"./build/index.d.ts","gitHead":"ae53efe274dee5464d11f1b574d2d825685cd031","_nodeVersion":"14.17.6","_npmVersion":"lerna/4.0.0/node@v14.17.6+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.2.3_1632823880653_0.6784063197390855"},"_hasShrinkwrap":false},"27.2.4":{"_id":"pretty-format@27.2.4","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.2.4","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.2.4","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.2.4","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"08ea39c5eab41b082852d7093059a091f6ddc748","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.2.4.tgz"},"types":"./build/index.d.ts","gitHead":"5886f6c4d681aa9fc9bfc2517efd2b7f6035a4cd","_nodeVersion":"14.17.6","_npmVersion":"lerna/4.0.0/node@v14.17.6+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.2.4_1632924287010_0.21851018986795312"},"_hasShrinkwrap":false},"27.2.5":{"_id":"pretty-format@27.2.5","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.2.5","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.2.5","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.2.5","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"7cfe2a8e8f01a5b5b29296a0b70f4140df0830c5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.2.5.tgz"},"types":"./build/index.d.ts","gitHead":"251b8014e8e3ac8da2fca88b5a1bc401f3b92326","_nodeVersion":"14.17.6","_npmVersion":"lerna/4.0.0/node@v14.17.6+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.2.5_1633700359574_0.7141862870197635"},"_hasShrinkwrap":false},"27.3.0":{"_id":"pretty-format@27.3.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.3.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.3.0","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.2.5","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"ab4679ffc25dd9bc29bab220a4a70a873a19600e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.3.0.tgz"},"types":"./build/index.d.ts","gitHead":"14b0c2c1d6f81b64adf8b827649ece80a4448cfc","_nodeVersion":"14.17.6","_npmVersion":"lerna/4.0.0/node@v14.17.6+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.3.0_1634495685899_0.8009134202052051"},"_hasShrinkwrap":false},"27.3.1":{"_id":"pretty-format@27.3.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.3.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.3.1","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.2.5","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"7e9486365ccdd4a502061fa761d3ab9ca1b78df5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.3.1.tgz"},"types":"./build/index.d.ts","gitHead":"4f3328f3227aa0668486f819b3353af5b6cc797b","_nodeVersion":"14.17.6","_npmVersion":"lerna/4.0.0/node@v14.17.6+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.3.1_1634626651703_0.4872332383578355"},"_hasShrinkwrap":false},"27.4.0":{"_id":"pretty-format@27.4.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.4.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.4.0","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.4.0","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"440a7b86612a18b0865831a6d8585d989a5420e9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.4.0.tgz"},"types":"./build/index.d.ts","gitHead":"0dc6dde296550370ade2574d6665748fed37f9c9","_nodeVersion":"16.13.0","_npmVersion":"lerna/4.0.0/node@v16.13.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.4.0_1638193019856_0.8309245901723756"},"_hasShrinkwrap":false},"27.4.1":{"_id":"pretty-format@27.4.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.4.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.4.1","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.4.1","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"64e20137590b3232744a36163237981337c90931","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.4.1.tgz"},"types":"./build/index.d.ts","gitHead":"fa4a3982766b107ff604ba54081d9e4378f318a9","_nodeVersion":"16.13.0","_npmVersion":"lerna/4.0.0/node@v16.13.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.4.1_1638261426799_0.08379534400524391"},"_hasShrinkwrap":false},"27.4.2":{"_id":"pretty-format@27.4.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.4.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"4.0.0-rc.9","jest-util":"^27.4.2","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/types":"^27.4.2","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"e4ce92ad66c3888423d332b40477c87d1dac1fb8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.4.2.tgz"},"types":"./build/index.d.ts","gitHead":"7965591f785e936ada194f9d58f852735b50ab1c","_nodeVersion":"16.13.0","_npmVersion":"lerna/4.0.0/node@v16.13.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.4.2_1638273218468_0.20123205262825183"},"_hasShrinkwrap":false},"27.4.6":{"_id":"pretty-format@27.4.6","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.4.6","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"^4.0.0","jest-util":"^27.4.2","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"1b784d2f53c68db31797b2348fa39b49e31846b7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.4.6.tgz"},"types":"./build/index.d.ts","gitHead":"644d2d3e53536b0d67e395c0f35f8555a67beb1e","_nodeVersion":"16.13.0","_npmVersion":"lerna/4.0.0/node@v16.13.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.4.6_1641337411542_0.9835501585120774"},"_hasShrinkwrap":false},"27.5.0":{"_id":"pretty-format@27.5.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.5.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"^4.0.0","jest-util":"^27.5.0","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"71e1af7a4b587d259fa4668dcd3e94af077767cb","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.5.0.tgz"},"types":"./build/index.d.ts","gitHead":"247cbe6026a590deaf0d23edecc7b2779a4aace9","_nodeVersion":"16.13.2","_npmVersion":"lerna/4.0.0/node@v16.13.2+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_27.5.0_1644055157991_0.7455466791377452"},"_hasShrinkwrap":false},"27.5.1":{"_id":"pretty-format@27.5.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"27.5.1","author":{"name":"James Kyle","email":"me@thejameskyle.com","url":""},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":null,"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"^4.0.0","jest-util":"^27.5.1","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"2181879fdea51a7a5851fb39d920faa63f01d88e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-27.5.1.tgz"},"types":"./build/index.d.ts","gitHead":"67c1aa20c5fec31366d733e901fee2b981cb1850"},"28.0.0-alpha.0":{"_id":"pretty-format@28.0.0-alpha.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"28.0.0-alpha.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"^4.0.0","jest-util":"^28.0.0-alpha.0","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^12.13.0 || ^14.15.0 || ^16.13.0 || >=17.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"1436aa165d4ce8bf90abb42f8d3f77b498a16d58","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-28.0.0-alpha.0.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                   | type      | default    | description                                             |\n| :-------------------- | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`          | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`         | `function`| `undefined`| compare function used when sorting object keys          |\n| `escapeRegex`         | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`        | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`           | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`              | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`            | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`                 | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`             | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printBasicPrototype` | `boolean` | `false`    | print the prototype for plain objects and arrays        |\n| `printFunctionName`   | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`               | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`       | `function`| compare function used when sorting object keys          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"89275b08977065d98e42ad71fcf223f4ad169f09","readmeFilename":"README.md","_nodeVersion":"16.14.0","_npmVersion":"lerna/4.0.0/node@v16.14.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_28.0.0-alpha.0_1644517047209_0.9110405280838838"},"_hasShrinkwrap":false},"28.0.0-alpha.1":{"_id":"pretty-format@28.0.0-alpha.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"28.0.0-alpha.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"^4.0.0","jest-util":"^28.0.0-alpha.1","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/schemas":"^28.0.0-alpha.1","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^12.13.0 || ^14.15.0 || ^16.13.0 || >=17.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"3a87ad1585b52dd3c314b35badf99e1bdf823bb9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-28.0.0-alpha.1.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                   | type      | default    | description                                             |\n| :-------------------- | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`          | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`         | `function`| `undefined`| compare function used when sorting object keys          |\n| `escapeRegex`         | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`        | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`           | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`              | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`            | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`                 | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`             | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printBasicPrototype` | `boolean` | `false`    | print the prototype for plain objects and arrays        |\n| `printFunctionName`   | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`               | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`       | `function`| compare function used when sorting object keys          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"d30164dde1847166fa0faec98d20abffd85e6ffd","readmeFilename":"README.md","_nodeVersion":"16.14.0","_npmVersion":"lerna/4.0.0/node@v16.14.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_28.0.0-alpha.1_1644960414110_0.8406425425879609"},"_hasShrinkwrap":false},"28.0.0-alpha.2":{"_id":"pretty-format@28.0.0-alpha.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"28.0.0-alpha.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"^4.0.0","jest-util":"^28.0.0-alpha.2","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/schemas":"^28.0.0-alpha.2","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^12.13.0 || ^14.15.0 || ^16.13.0 || >=17.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"e89a8b3d77b6e5bc1cb9a57fcb68089fbc96cee7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-28.0.0-alpha.2.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                   | type      | default    | description                                             |\n| :-------------------- | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`          | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`         | `function`| `undefined`| compare function used when sorting object keys          |\n| `escapeRegex`         | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`        | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`           | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`              | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`            | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `maxWidth`            | `number`  | `Infinity` | number of elements to print in arrays, sets, and so on  |\n| `min`                 | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`             | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printBasicPrototype` | `boolean` | `false`    | print the prototype for plain objects and arrays        |\n| `printFunctionName`   | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`               | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`       | `function`| compare function used when sorting object keys          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"694d6bfea56f9cb49d0c7309cdbfff032da198c2","readmeFilename":"README.md","_nodeVersion":"16.14.0","_npmVersion":"lerna/4.0.0/node@v16.14.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_28.0.0-alpha.2_1645035120150_0.4279390848744169"},"_hasShrinkwrap":false},"28.0.0-alpha.3":{"_id":"pretty-format@28.0.0-alpha.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"28.0.0-alpha.3","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"^4.0.0","jest-util":"^28.0.0-alpha.3","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/schemas":"^28.0.0-alpha.3","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^12.13.0 || ^14.15.0 || ^16.13.0 || >=17.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"3640879f93293f2c36f804ed9a0cf4558b9de72a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-28.0.0-alpha.3.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                   | type      | default    | description                                             |\n| :-------------------- | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`          | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`         | `function`| `undefined`| compare function used when sorting object keys          |\n| `escapeRegex`         | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`        | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`           | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`              | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`            | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `maxWidth`            | `number`  | `Infinity` | number of elements to print in arrays, sets, and so on  |\n| `min`                 | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`             | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printBasicPrototype` | `boolean` | `false`    | print the prototype for plain objects and arrays        |\n| `printFunctionName`   | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`               | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`       | `function`| compare function used when sorting object keys          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"fc30b27bd94bb7ebeaadc72626ebbdba535150d2","readmeFilename":"README.md","_nodeVersion":"16.14.0","_npmVersion":"lerna/4.0.0/node@v16.14.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_28.0.0-alpha.3_1645112541087_0.8638536537967649"},"_hasShrinkwrap":false},"28.0.0-alpha.4":{"_id":"pretty-format@28.0.0-alpha.4","name":"pretty-format","description":"Stringify any JavaScript value.","version":"28.0.0-alpha.4","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"^4.0.0","jest-util":"^28.0.0-alpha.4","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/schemas":"^28.0.0-alpha.3","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^12.13.0 || ^14.15.0 || ^16.13.0 || >=17.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"18037743f425769734e6d6cb81742d1be50cf8cb","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-28.0.0-alpha.4.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                   | type      | default    | description                                             |\n| :-------------------- | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`          | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`         | `function`| `undefined`| compare function used when sorting object keys          |\n| `escapeRegex`         | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`        | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`           | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`              | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`            | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `maxWidth`            | `number`  | `Infinity` | number of elements to print in arrays, sets, and so on  |\n| `min`                 | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`             | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printBasicPrototype` | `boolean` | `false`    | print the prototype for plain objects and arrays        |\n| `printFunctionName`   | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`               | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`       | `function`| compare function used when sorting object keys          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `string`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `string`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"c13dab19491ba6b57c2d703e7d7c4b20189e1e17","readmeFilename":"README.md","_nodeVersion":"16.14.0","_npmVersion":"lerna/4.0.0/node@v16.14.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_28.0.0-alpha.4_1645532034396_0.6724369004713402"},"_hasShrinkwrap":false},"28.0.0-alpha.5":{"_id":"pretty-format@28.0.0-alpha.5","name":"pretty-format","description":"Stringify any JavaScript value.","version":"28.0.0-alpha.5","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"^4.0.0","jest-util":"^28.0.0-alpha.5","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/schemas":"^28.0.0-alpha.3","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^12.13.0 || ^14.15.0 || ^16.13.0 || >=17.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"4de87bceb13bcddda77d1ba8b37bd270f3c6f389","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-28.0.0-alpha.5.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                   | type      | default    | description                                             |\n| :-------------------- | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`          | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`         | `function`| `undefined`| compare function used when sorting object keys          |\n| `escapeRegex`         | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`        | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`           | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`              | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`            | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `maxWidth`            | `number`  | `Infinity` | number of elements to print in arrays, sets, and so on  |\n| `min`                 | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`             | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printBasicPrototype` | `boolean` | `false`    | print the prototype for plain objects and arrays        |\n| `printFunctionName`   | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`               | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`       | `function`| compare function used when sorting object keys          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `string`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `string`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"46fb19b2628bd87676c10730ba19592c30b05478","readmeFilename":"README.md","_nodeVersion":"16.14.0","_npmVersion":"lerna/4.0.0/node@v16.14.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_28.0.0-alpha.5_1645736237951_0.49014202807759455"},"_hasShrinkwrap":false},"28.0.0-alpha.6":{"_id":"pretty-format@28.0.0-alpha.6","name":"pretty-format","description":"Stringify any JavaScript value.","version":"28.0.0-alpha.6","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"^4.0.0","jest-util":"^28.0.0-alpha.6","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/schemas":"^28.0.0-alpha.3","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^12.13.0 || ^14.15.0 || ^16.13.0 || >=17.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"200d65bb7e118ce3fbee6b8955065837ca0b51c9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-28.0.0-alpha.6.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                   | type      | default    | description                                             |\n| :-------------------- | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`          | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`         | `function`| `undefined`| compare function used when sorting object keys          |\n| `escapeRegex`         | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`        | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`           | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`              | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`            | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `maxWidth`            | `number`  | `Infinity` | number of elements to print in arrays, sets, and so on  |\n| `min`                 | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`             | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printBasicPrototype` | `boolean` | `false`    | print the prototype for plain objects and arrays        |\n| `printFunctionName`   | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`               | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`       | `function`| compare function used when sorting object keys          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `string`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `string`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? `[${name}]`\n      : `${config.min ? '' : `${name} `}[${serializeItems(\n          array,\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n        )}]`;\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"6284ada4adb7008f5f8673b1a7b1c789d2e508fb","readmeFilename":"README.md","_nodeVersion":"16.14.0","_npmVersion":"lerna/4.0.0/node@v16.14.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_28.0.0-alpha.6_1646123543138_0.36579205309415164"},"_hasShrinkwrap":false},"28.0.0-alpha.7":{"_id":"pretty-format@28.0.0-alpha.7","name":"pretty-format","description":"Stringify any JavaScript value.","version":"28.0.0-alpha.7","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"^4.0.0","jest-util":"^28.0.0-alpha.7","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/schemas":"^28.0.0-alpha.3","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^12.13.0 || ^14.15.0 || ^16.13.0 || >=17.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"0a570dd71fc8286669e733e3aaf834482f6889d4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-28.0.0-alpha.7.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                   | type      | default    | description                                             |\n| :-------------------- | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`          | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`         | `function`| `undefined`| compare function used when sorting object keys          |\n| `escapeRegex`         | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`        | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`           | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`              | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`            | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `maxWidth`            | `number`  | `Infinity` | number of elements to print in arrays, sets, and so on  |\n| `min`                 | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`             | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printBasicPrototype` | `boolean` | `false`    | print the prototype for plain objects and arrays        |\n| `printFunctionName`   | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`               | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`       | `function`| compare function used when sorting object keys          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `string`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `string`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? `[${name}]`\n      : `${config.min ? '' : `${name} `}[${serializeItems(\n          array,\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n        )}]`;\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"06f58f8ca70abc9c09d554967935b58ce85c48d6","readmeFilename":"README.md","_nodeVersion":"16.14.0","_npmVersion":"lerna/4.0.0/node@v16.14.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_28.0.0-alpha.7_1646560959672_0.2511284546495116"},"_hasShrinkwrap":false},"28.0.0-alpha.8":{"_id":"pretty-format@28.0.0-alpha.8","name":"pretty-format","description":"Stringify any JavaScript value.","version":"28.0.0-alpha.8","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"*","@types/react-is":"^17.0.0","@types/react-test-renderer":"*","immutable":"^4.0.0","jest-util":"^28.0.0-alpha.8","react":"*","react-dom":"*","react-test-renderer":"*"},"dependencies":{"@jest/schemas":"^28.0.0-alpha.3","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^17.0.1"},"engines":{"node":"^12.13.0 || ^14.15.0 || ^16.13.0 || >=17.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"311117b922c9d5d6d1421b6f0340c0f2d3973410","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-28.0.0-alpha.8.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                   | type      | default    | description                                             |\n| :-------------------- | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`          | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`         | `function`| `undefined`| compare function used when sorting object keys          |\n| `escapeRegex`         | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`        | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`           | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`              | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`            | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `maxWidth`            | `number`  | `Infinity` | number of elements to print in arrays, sets, and so on  |\n| `min`                 | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`             | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printBasicPrototype` | `boolean` | `false`    | print the prototype for plain objects and arrays        |\n| `printFunctionName`   | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`               | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`       | `function`| compare function used when sorting object keys          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `string`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `string`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? `[${name}]`\n      : `${config.min ? '' : `${name} `}[${serializeItems(\n          array,\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n        )}]`;\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"d915e7df92b220dbe6e124585ba6459838a6c41c","readmeFilename":"README.md","_nodeVersion":"16.14.2","_npmVersion":"lerna/4.0.0/node@v16.14.2+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_28.0.0-alpha.8_1649170779027_0.21054515954145026"},"_hasShrinkwrap":false},"28.0.0-alpha.9":{"_id":"pretty-format@28.0.0-alpha.9","name":"pretty-format","description":"Stringify any JavaScript value.","version":"28.0.0-alpha.9","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","expect":"^28.0.0-alpha.9","immutable":"^4.0.0","jest-util":"^28.0.0-alpha.9","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^28.0.0-alpha.3","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^12.13.0 || ^14.15.0 || ^16.13.0 || >=17.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"f91a5153ba51aa071fcd08fc63336df97026aa07","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-28.0.0-alpha.9.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                   | type      | default    | description                                             |\n| :-------------------- | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`          | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`         | `function`| `undefined`| compare function used when sorting object keys          |\n| `escapeRegex`         | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`        | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`           | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`              | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`            | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `maxWidth`            | `number`  | `Infinity` | number of elements to print in arrays, sets, and so on  |\n| `min`                 | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`             | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printBasicPrototype` | `boolean` | `false`    | print the prototype for plain objects and arrays        |\n| `printFunctionName`   | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`               | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`       | `function`| compare function used when sorting object keys          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `string`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `string`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? `[${name}]`\n      : `${config.min ? '' : `${name} `}[${serializeItems(\n          array,\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n        )}]`;\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"7c63f5981eb20d4b89a4c04f3675e0050d8d7887","readmeFilename":"README.md","_nodeVersion":"16.14.2","_npmVersion":"lerna/4.0.0/node@v16.14.2+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_28.0.0-alpha.9_1650365954013_0.5782213305662727"},"_hasShrinkwrap":false},"28.0.0":{"_id":"pretty-format@28.0.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"28.0.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","expect":"^28.0.0","immutable":"^4.0.0","jest-util":"^28.0.0","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^28.0.0","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^12.13.0 || ^14.15.0 || ^16.13.0 || >=17.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"d0bd7ece4a113692865ec493df0a26490c791d21","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-28.0.0.tgz"},"types":"./build/index.d.ts","gitHead":"8f9b812faf8e4d241d560a8574f0c6ed20a89365","_nodeVersion":"16.14.2","_npmVersion":"lerna/4.0.0/node@v16.14.2+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_28.0.0_1650888486611_0.7246886855603005"},"_hasShrinkwrap":false},"28.0.1":{"_id":"pretty-format@28.0.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"28.0.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","expect":"^28.0.1","immutable":"^4.0.0","jest-util":"^28.0.1","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^28.0.0","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^12.13.0 || ^14.15.0 || ^16.13.0 || >=17.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"ae6753bd2bf26fdd552f41194568ccbef23d22af","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-28.0.1.tgz"},"types":"./build/index.d.ts","gitHead":"0a08639e4299f07becf1020a761adfec83536018","_nodeVersion":"16.14.2","_npmVersion":"lerna/4.0.0/node@v16.14.2+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_28.0.1_1650967352300_0.6302006512233063"},"_hasShrinkwrap":false},"28.0.2":{"_id":"pretty-format@28.0.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"28.0.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","expect":"^28.0.2","immutable":"^4.0.0","jest-util":"^28.0.2","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^28.0.2","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"6a24d71cbb61a5e5794ba7513fe22101675481bc","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-28.0.2.tgz"},"types":"./build/index.d.ts","gitHead":"279ee6658d763f024d51f340fab6a37c17d94502","_nodeVersion":"16.15.0","_npmVersion":"lerna/4.0.0/node@v16.15.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_28.0.2_1651045441612_0.8638898920815299"},"_hasShrinkwrap":false},"28.1.0":{"_id":"pretty-format@28.1.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"28.1.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","expect":"^28.1.0","immutable":"^4.0.0","jest-util":"^28.1.0","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^28.0.2","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"8f5836c6a0dfdb834730577ec18029052191af55","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-28.1.0.tgz"},"types":"./build/index.d.ts","gitHead":"f5db241312f46528389e55c38221e6b6968622cf","_nodeVersion":"16.15.0","_npmVersion":"lerna/4.0.0/node@v16.15.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_28.1.0_1651834133317_0.5061198094419364"},"_hasShrinkwrap":false},"28.1.1":{"_id":"pretty-format@28.1.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"28.1.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","expect":"^28.1.1","immutable":"^4.0.0","jest-util":"^28.1.1","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^28.0.2","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"f731530394e0f7fcd95aba6b43c50e02d86b95cb","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-28.1.1.tgz"},"types":"./build/index.d.ts","gitHead":"eb954f8874960920ac50a8f976bb333fbb06ada9","_nodeVersion":"16.15.1","_npmVersion":"lerna/4.0.0/node@v16.15.1+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_28.1.1_1654582175397_0.28329124387424587"},"_hasShrinkwrap":false},"28.1.3":{"_id":"pretty-format@28.1.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"28.1.3","author":{"name":"James Kyle","email":"me@thejameskyle.com","url":""},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":null,"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","expect":"^28.1.3","immutable":"^4.0.0","jest-util":"^28.1.3","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^28.1.3","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"c9fba8cedf99ce50963a11b27d982a9ae90970d5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-28.1.3.tgz"},"types":"./build/index.d.ts","gitHead":"2cce069800dab3fc8ca7c469b32d2e2b2f7e2bb1"},"29.0.0-alpha.0":{"_id":"pretty-format@29.0.0-alpha.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.0.0-alpha.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","expect":"^29.0.0-alpha.0","immutable":"^4.0.0","jest-util":"^29.0.0-alpha.0","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.0.0-alpha.0","ansi-regex":"^5.0.1","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"934f5469a2641c2212034e7e26f43784a8ee3a20","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.0.0-alpha.0.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                   | type      | default    | description                                             |\n| :-------------------- | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`          | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`         | `function`| `undefined`| compare function used when sorting object keys          |\n| `escapeRegex`         | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`        | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`           | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`              | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`            | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `maxWidth`            | `number`  | `Infinity` | number of elements to print in arrays, sets, and so on  |\n| `min`                 | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`             | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printBasicPrototype` | `boolean` | `false`    | print the prototype for plain objects and arrays        |\n| `printFunctionName`   | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`               | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`       | `function`| compare function used when sorting object keys          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `string`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `string`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? `[${name}]`\n      : `${config.min ? '' : `${name} `}[${serializeItems(\n          array,\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n        )}]`;\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"6862afb00307b52f32eedee977a9b3041355f184","readmeFilename":"README.md","_nodeVersion":"16.15.1","_npmVersion":"lerna/4.0.0/node@v16.15.1+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.0.0-alpha.0_1658095626813_0.7693977634747002"},"_hasShrinkwrap":false},"29.0.0-alpha.1":{"_id":"pretty-format@29.0.0-alpha.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.0.0-alpha.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","expect":"^29.0.0-alpha.1","immutable":"^4.0.0","jest-util":"^29.0.0-alpha.0","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.0.0-alpha.0","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"0983500df3b2f43432d92609cdb756e2aa16ffbf","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.0.0-alpha.1.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                   | type      | default    | description                                             |\n| :-------------------- | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`          | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`         | `function`| `undefined`| compare function used when sorting object keys          |\n| `escapeRegex`         | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`        | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`           | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`              | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`            | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `maxWidth`            | `number`  | `Infinity` | number of elements to print in arrays, sets, and so on  |\n| `min`                 | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`             | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printBasicPrototype` | `boolean` | `false`    | print the prototype for plain objects and arrays        |\n| `printFunctionName`   | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`               | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`       | `function`| compare function used when sorting object keys          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `string`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `string`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? `[${name}]`\n      : `${config.min ? '' : `${name} `}[${serializeItems(\n          array,\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n        )}]`;\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"10f1e7f52d9f876e6fb7f20c1903fdcddd8db8b1","readmeFilename":"README.md","_nodeVersion":"16.15.1","_npmVersion":"lerna/4.0.0/node@v16.15.1+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.0.0-alpha.1_1659601408591_0.6820707347770099"},"_hasShrinkwrap":false},"29.0.0-alpha.3":{"_id":"pretty-format@29.0.0-alpha.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.0.0-alpha.3","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","expect":"^29.0.0-alpha.3","immutable":"^4.0.0","jest-util":"^29.0.0-alpha.3","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.0.0-alpha.3","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"d09e7d8738f4503f5454d4ac7649cca8717ae7c3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.0.0-alpha.3.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                   | type      | default    | description                                             |\n| :-------------------- | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`          | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`         | `function`| `undefined`| compare function used when sorting object keys          |\n| `escapeRegex`         | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`        | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`           | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`              | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`            | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `maxWidth`            | `number`  | `Infinity` | number of elements to print in arrays, sets, and so on  |\n| `min`                 | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`             | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printBasicPrototype` | `boolean` | `false`    | print the prototype for plain objects and arrays        |\n| `printFunctionName`   | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`               | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`       | `function`| compare function used when sorting object keys          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `string`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `string`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? `[${name}]`\n      : `${config.min ? '' : `${name} `}[${serializeItems(\n          array,\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n        )}]`;\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"09981873c55442e5e494d42012f518b7d3d41fbd","readmeFilename":"README.md","_nodeVersion":"16.15.1","_npmVersion":"lerna/1.10.0/node@v16.15.1+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.0.0-alpha.3_1659879696286_0.7638393311736449"},"_hasShrinkwrap":false},"29.0.0-alpha.4":{"_id":"pretty-format@29.0.0-alpha.4","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.0.0-alpha.4","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","expect":"^29.0.0-alpha.4","immutable":"^4.0.0","jest-util":"^29.0.0-alpha.4","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.0.0-alpha.3","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"a185eeef2831a3986459b4b23fdc5ecacb844a87","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.0.0-alpha.4.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                   | type      | default    | description                                             |\n| :-------------------- | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`          | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`         | `function`| `undefined`| compare function used when sorting object keys          |\n| `escapeRegex`         | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`        | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`           | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`              | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`            | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `maxWidth`            | `number`  | `Infinity` | number of elements to print in arrays, sets, and so on  |\n| `min`                 | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`             | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printBasicPrototype` | `boolean` | `false`    | print the prototype for plain objects and arrays        |\n| `printFunctionName`   | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`               | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`       | `function`| compare function used when sorting object keys          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `string`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `string`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? `[${name}]`\n      : `${config.min ? '' : `${name} `}[${serializeItems(\n          array,\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n        )}]`;\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"98a833bd4bc0bdcfcee5d4f04c2833400c4e2933","readmeFilename":"README.md","_nodeVersion":"16.15.1","_npmVersion":"lerna/1.10.0/node@v16.15.1+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.0.0-alpha.4_1659963934800_0.646159528420519"},"_hasShrinkwrap":false},"29.0.0-alpha.6":{"_id":"pretty-format@29.0.0-alpha.6","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.0.0-alpha.6","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","expect":"^29.0.0-alpha.6","immutable":"^4.0.0","jest-util":"^29.0.0-alpha.6","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.0.0-alpha.3","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"fd7f4d58c14c60a41b0a29d77efe173d4ba3d75b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.0.0-alpha.6.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                   | type      | default    | description                                             |\n| :-------------------- | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`          | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`         | `function`| `undefined`| compare function used when sorting object keys          |\n| `escapeRegex`         | `boolean` | `false`    | escape special characters in regular expressions        |\n| `escapeString`        | `boolean` | `true`     | escape special characters in strings                    |\n| `highlight`           | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`              | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`            | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `maxWidth`            | `number`  | `Infinity` | number of elements to print in arrays, sets, and so on  |\n| `min`                 | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`             | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printBasicPrototype` | `boolean` | `false`    | print the prototype for plain objects and arrays        |\n| `printFunctionName`   | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`               | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `compareKeys`       | `function`| compare function used when sorting object keys          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `escapeString`      | `boolean` | escape special characters in strings                    |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `string`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `string`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? `[${name}]`\n      : `${config.min ? '' : `${name} `}[${serializeItems(\n          array,\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n        )}]`;\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"4def94b073cad300e99de378ba900e6ba9b7032f","readmeFilename":"README.md","_nodeVersion":"16.15.1","_npmVersion":"lerna/1.10.0/node@v16.15.1+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.0.0-alpha.6_1660917468319_0.2431144175949127"},"_hasShrinkwrap":false},"29.0.0":{"_id":"pretty-format@29.0.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.0.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","expect":"^29.0.0","immutable":"^4.0.0","jest-util":"^29.0.0","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.0.0","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"a9a604ca71678f803f34f6563a25a638fce267ba","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.0.0.tgz"},"types":"./build/index.d.ts","gitHead":"75006e46c76f6fda14bbc0548f86edb2ba087cd2","_nodeVersion":"16.17.0","_npmVersion":"lerna/1.10.0/node@v16.17.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.0.0_1661430808341_0.9411779135138714"},"_hasShrinkwrap":false},"29.0.1":{"_id":"pretty-format@29.0.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.0.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","expect":"^29.0.1","immutable":"^4.0.0","jest-util":"^29.0.1","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.0.0","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"2f8077114cdac92a59b464292972a106410c7ad0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.0.1.tgz"},"types":"./build/index.d.ts","gitHead":"b959a3d3bdf324ed1c7358f76ab238a8b0b0cf93","_nodeVersion":"16.17.0","_npmVersion":"lerna/1.10.0/node@v16.17.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.0.1_1661520882041_0.8620373554141116"},"_hasShrinkwrap":false},"29.0.2":{"_id":"pretty-format@29.0.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.0.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","expect":"^29.0.2","immutable":"^4.0.0","jest-util":"^29.0.2","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.0.0","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"7f7666a7bf05ba2bcacde61be81c6db64f6f3be6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.0.2.tgz"},"types":"./build/index.d.ts","gitHead":"616fcf56bb8481d29ba29cc34be32a92b1cf85e5","_nodeVersion":"16.17.0","_npmVersion":"lerna/1.10.0/node@v16.17.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.0.2_1662202099646_0.6622745079603374"},"_hasShrinkwrap":false},"29.0.3":{"_id":"pretty-format@29.0.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.0.3","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","expect":"^29.0.3","immutable":"^4.0.0","jest-util":"^29.0.3","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.0.0","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"23d5f8cabc9cbf209a77d49409d093d61166a811","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.0.3.tgz"},"types":"./build/index.d.ts","gitHead":"77f865da39af5b3e1c114dc347e49257eb3dcfd1","_nodeVersion":"16.17.0","_npmVersion":"lerna/1.10.0/node@v16.17.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.0.3_1662820898280_0.5999375072132109"},"_hasShrinkwrap":false},"29.1.0":{"_id":"pretty-format@29.1.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.1.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","immutable":"^4.0.0","jest-util":"^29.1.0","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.0.0","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"ea3de2feed5b8d19c537a12fe478ddc8b45da6b8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.1.0.tgz"},"types":"./build/index.d.ts","gitHead":"51f10300daf90db003a1749ceaed1084c4f74811","_nodeVersion":"16.17.0","_npmVersion":"lerna/1.11.3/node@v16.17.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.1.0_1664350658480_0.45739552930662986"},"_hasShrinkwrap":false},"29.1.2":{"_id":"pretty-format@29.1.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.1.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","immutable":"^4.0.0","jest-util":"^29.1.2","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.0.0","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"b1f6b75be7d699be1a051f5da36e8ae9e76a8e6a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.1.2.tgz"},"types":"./build/index.d.ts","gitHead":"3c31dd619e8c022cde53f40fa12ea2a67f4752ce","_nodeVersion":"16.17.0","_npmVersion":"lerna/1.11.3/node@v16.17.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.1.2_1664522564599_0.29613090444740164"},"_hasShrinkwrap":false},"29.2.0":{"_id":"pretty-format@29.2.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.2.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","immutable":"^4.0.0","jest-util":"^29.2.0","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.0.0","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"1d4ea56fb46079b44efd9ed59c14f70f2950a61b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.2.0.tgz"},"types":"./build/index.d.ts","gitHead":"ee5b37a4f4433afcfffb0356cea47739d8092287","_nodeVersion":"16.17.0","_npmVersion":"lerna/1.11.3/node@v16.17.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.2.0_1665738826366_0.8868311397692656"},"_hasShrinkwrap":false},"29.2.1":{"_id":"pretty-format@29.2.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.2.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","immutable":"^4.0.0","jest-util":"^29.2.1","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.0.0","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"86e7748fe8bbc96a6a4e04fa99172630907a9611","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.2.1.tgz"},"types":"./build/index.d.ts","gitHead":"4551c0fdd4d25b7206824957c7bcc6baf61e63bf","_nodeVersion":"16.17.0","_npmVersion":"lerna/1.11.3/node@v16.17.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.2.1_1666108810954_0.4642202645094913"},"_hasShrinkwrap":false},"29.3.1":{"_id":"pretty-format@29.3.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.3.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","immutable":"^4.0.0","jest-util":"^29.3.1","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.0.0","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"1841cac822b02b4da8971dacb03e8a871b4722da","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.3.1.tgz"},"types":"./build/index.d.ts","gitHead":"05deb8393c4ad71e19be2567b704dfd3a2ab5fc9","_nodeVersion":"16.17.0","_npmVersion":"lerna/1.11.3/node@v16.17.0+x64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.3.1_1667948181790_0.6288508562159885"},"_hasShrinkwrap":false},"29.4.0":{"_id":"pretty-format@29.4.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.4.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","immutable":"^4.0.0","jest-util":"^29.4.0","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.4.0","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"766f071bb1c53f1ef8000c105bbeb649e86eb993","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.4.0.tgz"},"types":"./build/index.d.ts","gitHead":"4bc0e8acaf990e6618a7bed1dca67760c20bb12a","_nodeVersion":"16.19.0","_npmVersion":"lerna/1.13.0/node@v16.19.0+arm64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.4.0_1674557749379_0.08312055675861663"},"_hasShrinkwrap":false},"29.4.1":{"_id":"pretty-format@29.4.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.4.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","immutable":"^4.0.0","jest-util":"^29.4.1","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.4.0","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"0da99b532559097b8254298da7c75a0785b1751c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.4.1.tgz"},"types":"./build/index.d.ts","gitHead":"bc84c8a15649aaaefdd624dc83824518c17467ed","_nodeVersion":"16.19.0","_npmVersion":"lerna/1.13.0/node@v16.19.0+arm64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.4.1_1674745715008_0.8630518276533083"},"_hasShrinkwrap":false},"29.4.2":{"_id":"pretty-format@29.4.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.4.2","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","immutable":"^4.0.0","jest-util":"^29.4.2","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.4.2","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"64bf5ccc0d718c03027d94ac957bdd32b3fb2401","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.4.2.tgz"},"types":"./build/index.d.ts","gitHead":"f0fc92e8443f09546c7ec0472bf9bce44fe5898f","_nodeVersion":"16.19.0","_npmVersion":"lerna/1.13.0/node@v16.19.0+arm64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.4.2_1675777525724_0.5004565008979032"},"_hasShrinkwrap":false},"29.4.3":{"_id":"pretty-format@29.4.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.4.3","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","immutable":"^4.0.0","jest-util":"^29.4.3","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.4.3","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"25500ada21a53c9e8423205cf0337056b201244c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.4.3.tgz"},"types":"./build/index.d.ts","gitHead":"a49c88610e49a3242576160740a32a2fe11161e1","_nodeVersion":"18.14.0","_npmVersion":"lerna/1.13.0/node@v18.14.0+arm64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.4.3_1676462240384_0.7010023448990954"},"_hasShrinkwrap":false},"29.5.0":{"_id":"pretty-format@29.5.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.5.0","author":{"name":"James Kyle","email":"me@thejameskyle.com","url":""},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":null,"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^17.0.0","@types/react-test-renderer":"17.0.2","immutable":"^4.0.0","jest-util":"^29.5.0","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.4.3","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"283134e74f70e2e3e7229336de0e4fce94ccde5a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.5.0.tgz"},"types":"./build/index.d.ts","gitHead":"39f3beda6b396665bebffab94e8d7c45be30454c"},"29.6.0":{"_id":"pretty-format@29.6.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.6.0","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^18.0.0","@types/react-test-renderer":"17.0.2","immutable":"^4.0.0","jest-util":"^29.6.0","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.6.0","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"c90c8f145187fe73240662527a513599c16f3b97","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.6.0.tgz"},"types":"./build/index.d.ts","gitHead":"c1e5b8a38ef54bb138409f89831942ebf6a7a67e","_nodeVersion":"18.16.1","_npmVersion":"lerna/1.13.0/node@v18.16.1+arm64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.6.0_1688484345028_0.8853895362115405"},"_hasShrinkwrap":false},"29.6.1":{"_id":"pretty-format@29.6.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.6.1","homepage":"https://github.com/facebook/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^18.0.0","@types/react-test-renderer":"17.0.2","immutable":"^4.0.0","jest-util":"^29.6.1","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.6.0","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"ec838c288850b7c4f9090b867c2d4f4edbfb0f3e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.6.1.tgz"},"types":"./build/index.d.ts","gitHead":"1f019afdcdfc54a6664908bb45f343db4e3d0848","_nodeVersion":"18.16.1","_npmVersion":"lerna/1.13.0/node@v18.16.1+arm64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"scotthovestadt","email":"scott.hovestadt@gmail.com"},{"name":"rubennorte","email":"rubennorte@gmail.com"},{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"fb","email":"opensource+npm@fb.com"},{"name":"aaronabramov","email":"aaron@abramov.io"},{"name":"davidzilburg","email":"davidzilburg@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_29.6.1_1688653097488_0.9030095453365572"},"_hasShrinkwrap":false},"29.6.2":{"_id":"pretty-format@29.6.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.6.2","author":{"name":"James Kyle","email":"me@thejameskyle.com","url":""},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","directories":null,"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^18.0.0","@types/react-test-renderer":"17.0.2","immutable":"^4.0.0","jest-util":"^29.6.2","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.6.0","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"3d5829261a8a4d89d8b9769064b29c50ed486a47","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.6.2.tgz"},"types":"./build/index.d.ts","gitHead":"0fd5b1c37555f485c56a6ad2d6b010a72204f9f6"},"29.6.3":{"_id":"pretty-format@29.6.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.6.3","author":{"name":"James Kyle","email":"me@thejameskyle.com","url":""},"repository":{"type":"git","url":"https://github.com/jestjs/jest.git"},"license":"MIT","directories":null,"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^18.0.0","@types/react-test-renderer":"17.0.2","immutable":"^4.0.0","jest-util":"^29.6.3","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.6.3","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"d432bb4f1ca6f9463410c3fb25a0ba88e594ace7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.6.3.tgz"},"types":"./build/index.d.ts","gitHead":"fb7d95c8af6e0d65a8b65348433d8a0ea0725b5b"},"29.7.0":{"_id":"pretty-format@29.7.0","name":"pretty-format","description":"Stringify any JavaScript value.","version":"29.7.0","author":{"name":"James Kyle","email":"me@thejameskyle.com","url":""},"repository":{"type":"git","url":"https://github.com/jestjs/jest.git"},"license":"MIT","directories":null,"devDependencies":{"@types/react":"^17.0.3","@types/react-is":"^18.0.0","@types/react-test-renderer":"17.0.2","immutable":"^4.0.0","jest-util":"^29.7.0","react":"17.0.2","react-dom":"^17.0.1","react-test-renderer":"17.0.2"},"dependencies":{"@jest/schemas":"^29.6.3","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^14.15.0 || ^16.10.0 || >=18.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"ca42c758310f365bfa71a0bda0a807160b776812","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-29.7.0.tgz"},"types":"./build/index.d.ts","gitHead":"4e56991693da7cd4c3730dc3579a1dd1403ee630"},"30.0.0-alpha.1":{"_id":"pretty-format@30.0.0-alpha.1","name":"pretty-format","description":"Stringify any JavaScript value.","version":"30.0.0-alpha.1","homepage":"https://github.com/jestjs/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/jestjs/jest.git"},"bugs":{"url":"https://github.com/jestjs/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^18.2.0","@types/react-is":"^18.0.0","@types/react-test-renderer":"^18.0.1","immutable":"^4.0.0","jest-util":"30.0.0-alpha.1","react":"18.2.0","react-dom":"18.2.0","react-test-renderer":"18.2.0"},"dependencies":{"@jest/schemas":"30.0.0-alpha.1","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^16.10.0 || ^18.12.0 || >=20.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"ce4eb0a89959c3bcfd5d590acf90666ba5a92f31","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-30.0.0-alpha.1.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                   | type             | default     | description                                                                             |\n| :-------------------- | :--------------- | :---------- | :-------------------------------------------------------------------------------------- |\n| `callToJSON`          | `boolean`        | `true`      | call `toJSON` method (if it exists) on objects                                          |\n| `compareKeys`         | `function\\|null` | `undefined` | compare function used when sorting object keys, `null` can be used to skip over sorting |\n| `escapeRegex`         | `boolean`        | `false`     | escape special characters in regular expressions                                        |\n| `escapeString`        | `boolean`        | `true`      | escape special characters in strings                                                    |\n| `highlight`           | `boolean`        | `false`     | highlight syntax with colors in terminal (some plugins)                                 |\n| `indent`              | `number`         | `2`         | spaces in each level of indentation                                                     |\n| `maxDepth`            | `number`         | `Infinity`  | levels to print in arrays, objects, elements, and so on                                 |\n| `maxWidth`            | `number`         | `Infinity`  | number of elements to print in arrays, sets, and so on                                  |\n| `min`                 | `boolean`        | `false`     | minimize added space: no indentation nor line breaks                                    |\n| `plugins`             | `array`          | `[]`        | plugins to serialize application-specific data types                                    |\n| `printBasicPrototype` | `boolean`        | `false`     | print the prototype for plain objects and arrays                                        |\n| `printFunctionName`   | `boolean`        | `true`      | include or omit the name of a function                                                  |\n| `theme`               | `object`         |             | colors to highlight syntax in terminal                                                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type             | description                                                                             |\n| :------------------ | :--------------- | :-------------------------------------------------------------------------------------- |\n| `callToJSON`        | `boolean`        | call `toJSON` method (if it exists) on objects                                          |\n| `compareKeys`       | `function\\|null` | compare function used when sorting object keys, `null` can be used to skip over sorting |\n| `colors`            | `Object`         | escape codes for colors to highlight syntax                                             |\n| `escapeRegex`       | `boolean`        | escape special characters in regular expressions                                        |\n| `escapeString`      | `boolean`        | escape special characters in strings                                                    |\n| `indent`            | `string`         | spaces in each level of indentation                                                     |\n| `maxDepth`          | `number`         | levels to print in arrays, objects, elements, and so on                                 |\n| `min`               | `boolean`        | minimize added space: no indentation nor line breaks                                    |\n| `plugins`           | `array`          | plugins to serialize application-specific data types                                    |\n| `printFunctionName` | `boolean`        | include or omit the name of a function                                                  |\n| `spacingInner`      | `string`         | spacing to separate items in a list                                                     |\n| `spacingOuter`      | `string`         | spacing to enclose a list of items                                                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? `[${name}]`\n      : `${config.min ? '' : `${name} `}[${serializeItems(\n          array,\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n        )}]`;\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"d005cb2505c041583e0c5636d006e08666a54b63","readmeFilename":"README.md","_nodeVersion":"20.9.0","_npmVersion":"lerna/1.13.0/node@v20.9.0+arm64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"aaronabramov","email":"aaron@abramov.io"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_30.0.0-alpha.1_1698672788870_0.7112117761424848"},"_hasShrinkwrap":false},"30.0.0-alpha.2":{"_id":"pretty-format@30.0.0-alpha.2","name":"pretty-format","description":"Stringify any JavaScript value.","version":"30.0.0-alpha.2","homepage":"https://github.com/jestjs/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/jestjs/jest.git"},"bugs":{"url":"https://github.com/jestjs/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^18.2.0","@types/react-is":"^18.0.0","@types/react-test-renderer":"^18.0.1","immutable":"^4.0.0","jest-util":"30.0.0-alpha.2","react":"18.2.0","react-dom":"18.2.0","react-test-renderer":"18.2.0"},"dependencies":{"@jest/schemas":"30.0.0-alpha.2","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^16.10.0 || ^18.12.0 || >=20.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"f69024bc3cc0398fa4d86a9b44c32028006e94ea","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-30.0.0-alpha.2.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                   | type             | default     | description                                                                             |\n| :-------------------- | :--------------- | :---------- | :-------------------------------------------------------------------------------------- |\n| `callToJSON`          | `boolean`        | `true`      | call `toJSON` method (if it exists) on objects                                          |\n| `compareKeys`         | `function\\|null` | `undefined` | compare function used when sorting object keys, `null` can be used to skip over sorting |\n| `escapeRegex`         | `boolean`        | `false`     | escape special characters in regular expressions                                        |\n| `escapeString`        | `boolean`        | `true`      | escape special characters in strings                                                    |\n| `highlight`           | `boolean`        | `false`     | highlight syntax with colors in terminal (some plugins)                                 |\n| `indent`              | `number`         | `2`         | spaces in each level of indentation                                                     |\n| `maxDepth`            | `number`         | `Infinity`  | levels to print in arrays, objects, elements, and so on                                 |\n| `maxWidth`            | `number`         | `Infinity`  | number of elements to print in arrays, sets, and so on                                  |\n| `min`                 | `boolean`        | `false`     | minimize added space: no indentation nor line breaks                                    |\n| `plugins`             | `array`          | `[]`        | plugins to serialize application-specific data types                                    |\n| `printBasicPrototype` | `boolean`        | `false`     | print the prototype for plain objects and arrays                                        |\n| `printFunctionName`   | `boolean`        | `true`      | include or omit the name of a function                                                  |\n| `theme`               | `object`         |             | colors to highlight syntax in terminal                                                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type             | description                                                                             |\n| :------------------ | :--------------- | :-------------------------------------------------------------------------------------- |\n| `callToJSON`        | `boolean`        | call `toJSON` method (if it exists) on objects                                          |\n| `compareKeys`       | `function\\|null` | compare function used when sorting object keys, `null` can be used to skip over sorting |\n| `colors`            | `Object`         | escape codes for colors to highlight syntax                                             |\n| `escapeRegex`       | `boolean`        | escape special characters in regular expressions                                        |\n| `escapeString`      | `boolean`        | escape special characters in strings                                                    |\n| `indent`            | `string`         | spaces in each level of indentation                                                     |\n| `maxDepth`          | `number`         | levels to print in arrays, objects, elements, and so on                                 |\n| `min`               | `boolean`        | minimize added space: no indentation nor line breaks                                    |\n| `plugins`           | `array`          | plugins to serialize application-specific data types                                    |\n| `printFunctionName` | `boolean`        | include or omit the name of a function                                                  |\n| `spacingInner`      | `string`         | spacing to separate items in a list                                                     |\n| `spacingOuter`      | `string`         | spacing to enclose a list of items                                                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? `[${name}]`\n      : `${config.min ? '' : `${name} `}[${serializeItems(\n          array,\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n        )}]`;\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"c04d13d7abd22e47b0997f6027886aed225c9ce4","readmeFilename":"README.md","_nodeVersion":"20.9.0","_npmVersion":"lerna/2.7.0/node@v20.9.0+arm64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"aaronabramov","email":"aaron@abramov.io"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_30.0.0-alpha.2_1700126899059_0.350975848984892"},"_hasShrinkwrap":false},"30.0.0-alpha.3":{"_id":"pretty-format@30.0.0-alpha.3","name":"pretty-format","description":"Stringify any JavaScript value.","version":"30.0.0-alpha.3","homepage":"https://github.com/jestjs/jest#readme","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"repository":{"type":"git","url":"git+https://github.com/jestjs/jest.git"},"bugs":{"url":"https://github.com/jestjs/jest/issues"},"license":"MIT","directories":{},"devDependencies":{"@types/react":"^18.2.0","@types/react-is":"^18.0.0","@types/react-test-renderer":"^18.0.1","immutable":"^4.0.0","jest-util":"30.0.0-alpha.3","react":"18.2.0","react-dom":"18.2.0","react-test-renderer":"18.2.0"},"dependencies":{"@jest/schemas":"30.0.0-alpha.3","ansi-styles":"^5.0.0","react-is":"^18.0.0"},"engines":{"node":"^16.10.0 || ^18.12.0 || >=20.0.0"},"main":"./build/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"c0e7dfd029f81681a59ea8c82e5dcec823c42951","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/pretty-format/-/pretty-format-30.0.0-alpha.3.tgz"},"readme":"# pretty-format\n\nStringify any JavaScript value.\n\n- Serialize built-in JavaScript types.\n- Serialize application-specific data types with built-in or user-defined plugins.\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst {format: prettyFormat} = require('pretty-format'); // CommonJS\n```\n\n```js\nimport {format as prettyFormat} from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n<!-- prettier-ignore -->\n| key                   | type             | default     | description                                                                             |\n| :-------------------- | :--------------- | :---------- | :-------------------------------------------------------------------------------------- |\n| `callToJSON`          | `boolean`        | `true`      | call `toJSON` method (if it exists) on objects                                          |\n| `compareKeys`         | `function\\|null` | `undefined` | compare function used when sorting object keys, `null` can be used to skip over sorting |\n| `escapeRegex`         | `boolean`        | `false`     | escape special characters in regular expressions                                        |\n| `escapeString`        | `boolean`        | `true`      | escape special characters in strings                                                    |\n| `highlight`           | `boolean`        | `false`     | highlight syntax with colors in terminal (some plugins)                                 |\n| `indent`              | `number`         | `2`         | spaces in each level of indentation                                                     |\n| `maxDepth`            | `number`         | `Infinity`  | levels to print in arrays, objects, elements, and so on                                 |\n| `maxWidth`            | `number`         | `Infinity`  | number of elements to print in arrays, sets, and so on                                  |\n| `min`                 | `boolean`        | `false`     | minimize added space: no indentation nor line breaks                                    |\n| `plugins`             | `array`          | `[]`        | plugins to serialize application-specific data types                                    |\n| `printBasicPrototype` | `boolean`        | `false`     | print the prototype for plain objects and arrays                                        |\n| `printFunctionName`   | `boolean`        | `true`      | include or omit the name of a function                                                  |\n| `theme`               | `object`         |             | colors to highlight syntax in terminal                                                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n- `ReactElement` for elements from `react`\n- `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst React = require('react');\nconst renderer = require('react-test-renderer');\nconst {format: prettyFormat, plugins} = require('pretty-format');\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport React from 'react';\nimport renderer from 'react-test-renderer';\nimport {plugins, format as prettyFormat} from 'pretty-format';\n\nconst {ReactElement, ReactTestComponent} = plugins;\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n- `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n- `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n- `TypeError: Cannot read property 'whatever' of null`\n- `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- unchanging `config` object: derived from `options`\n- current `indentation` string: concatenate to `indent` from `config`\n- current `depth` number: compare to `maxDepth` from `config`\n- current `refs` array: find circular references in objects\n- `printer` callback function: serialize children\n\n### config\n\n<!-- prettier-ignore -->\n| key                 | type             | description                                                                             |\n| :------------------ | :--------------- | :-------------------------------------------------------------------------------------- |\n| `callToJSON`        | `boolean`        | call `toJSON` method (if it exists) on objects                                          |\n| `compareKeys`       | `function\\|null` | compare function used when sorting object keys, `null` can be used to skip over sorting |\n| `colors`            | `Object`         | escape codes for colors to highlight syntax                                             |\n| `escapeRegex`       | `boolean`        | escape special characters in regular expressions                                        |\n| `escapeString`      | `boolean`        | escape special characters in strings                                                    |\n| `indent`            | `string`         | spaces in each level of indentation                                                     |\n| `maxDepth`          | `number`         | levels to print in arrays, objects, elements, and so on                                 |\n| `min`               | `boolean`        | minimize added space: no indentation nor line breaks                                    |\n| `plugins`           | `array`          | plugins to serialize application-specific data types                                    |\n| `printFunctionName` | `boolean`        | include or omit the name of a function                                                  |\n| `spacingInner`      | `string`         | spacing to separate items in a list                                                     |\n| `spacingOuter`      | `string`         | spacing to enclose a list of items                                                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n- `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n- `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Side note: `pretty-format` does not need a plugin to serialize arrays.\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? `[${name}]`\n      : `${config.min ? '' : `${name} `}[${serializeItems(\n          array,\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n        )}]`;\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n- that **do not** depend on options other than `highlight` or `min`\n- that **do not** depend on `depth` or `refs` in recursive traversal, and\n- if values either\n  - do **not** require indentation, or\n  - do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n- `val` which “passed the test”\n- current `printer(valChild)` callback function: serialize children\n- current `indenter(lines)` callback function: indent lines at the next level\n- unchanging `config` object: derived from `options`\n- unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n- `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n- `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n- the key is the same (for example, `tag`)\n- the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","types":"./build/index.d.ts","gitHead":"e267aff33d105399f2134bad7c8f82285104f3da","readmeFilename":"README.md","_nodeVersion":"20.11.1","_npmVersion":"lerna/3.2.1/node@v20.11.1+arm64 (darwin)","_npmUser":{"name":"simenb","email":"sbekkhus91@gmail.com"},"maintainers":[{"name":"simenb","email":"sbekkhus91@gmail.com"},{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"aaronabramov","email":"aaron@abramov.io"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_30.0.0-alpha.3_1708427337839_0.24680493026514982"},"_hasShrinkwrap":false}},"time":{"created":"2022-11-21T18:11:05Z","modified":"2024-02-20T14:46:23Z","1.0.0":"2022-11-21T18:11:05Z","1.1.0":"2022-11-21T18:11:05Z","1.1.1":"2022-11-21T18:11:05Z","1.2.0":"2022-11-21T18:11:05Z","2.0.0":"2022-11-21T18:11:05Z","2.1.0":"2022-11-21T18:11:05Z","3.0.0":"2022-11-21T18:11:05Z","3.1.0":"2022-11-21T18:11:05Z","3.2.0":"2022-11-21T18:11:05Z","3.3.0":"2022-11-21T18:11:05Z","3.3.1":"2022-11-21T18:11:05Z","3.3.2":"2022-11-21T18:11:05Z","3.4.0":"2022-11-21T18:11:05Z","3.4.1":"2022-11-21T18:11:05Z","3.4.2":"2022-11-21T18:11:05Z","3.4.3":"2022-11-21T18:11:05Z","3.5.0":"2022-11-21T18:11:05Z","3.5.1":"2022-11-21T18:11:05Z","3.5.2":"2022-11-21T18:11:05Z","3.5.3":"2022-11-21T18:11:05Z","3.6.0":"2022-11-21T18:11:05Z","3.7.0":"2022-11-21T18:11:05Z","3.8.0":"2022-11-21T18:11:05Z","4.0.0":"2022-11-21T18:11:05Z","4.1.0":"2022-11-21T18:11:05Z","4.2.0":"2022-11-21T18:11:05Z","4.2.1":"2022-11-21T18:11:05Z","4.2.2":"2022-11-21T18:11:05Z","4.2.3":"2022-11-21T18:11:05Z","4.3.0":"2022-11-21T18:11:05Z","4.3.1":"2022-11-21T18:11:05Z","18.0.0":"2022-11-21T18:11:05Z","18.1.0":"2022-11-21T18:11:05Z","18.5.0-alpha.7da3df39":"2022-11-21T18:11:05Z","19.0.0":"2022-11-21T18:11:05Z","19.1.0-alpha.eed82034":"2022-11-21T18:11:05Z","19.2.0-alpha.993e64af":"2022-11-21T18:11:05Z","19.3.0-alpha.85402254":"2022-11-21T18:11:05Z","20.0.0":"2022-11-21T18:11:05Z","20.0.1":"2022-11-21T18:11:05Z","20.0.2":"2022-11-21T18:11:05Z","20.0.3":"2022-11-21T18:11:05Z","20.1.0-alpha.1":"2022-11-21T18:11:05Z","20.1.0-alpha.2":"2022-11-21T18:11:05Z","20.1.0-alpha.3":"2022-11-21T18:11:05Z","20.1.0-beta.1":"2022-11-21T18:11:05Z","20.1.0-chi.1":"2022-11-21T18:11:05Z","20.1.0-delta.1":"2022-11-21T18:11:05Z","20.1.0-delta.2":"2022-11-21T18:11:05Z","20.1.0-delta.3":"2022-11-21T18:11:05Z","20.1.0-delta.4":"2022-11-21T18:11:05Z","20.1.0-delta.5":"2022-11-21T18:11:05Z","20.1.0-echo.1":"2022-11-21T18:11:05Z","21.0.0-alpha.1":"2022-11-21T18:11:05Z","21.0.0-alpha.2":"2022-11-21T18:11:05Z","21.0.0-beta.1":"2022-11-21T18:11:05Z","21.0.0":"2022-11-21T18:11:05Z","21.0.2":"2022-11-21T18:11:05Z","21.1.0":"2022-11-21T18:11:05Z","21.2.0":"2022-11-21T18:11:05Z","21.2.1":"2022-11-21T18:11:05Z","21.3.0-alpha.1e3ee68e":"2022-11-21T18:11:05Z","21.3.0-alpha.eff7a1cf":"2022-11-21T18:11:05Z","21.3.0-beta.1":"2022-11-21T18:11:05Z","21.3.0-beta.2":"2022-11-21T18:11:05Z","21.3.0-beta.3":"2022-11-21T18:11:05Z","21.3.0-beta.4":"2022-11-21T18:11:05Z","21.3.0-beta.5":"2022-11-21T18:11:05Z","21.3.0-beta.6":"2022-11-21T18:11:05Z","21.3.0-beta.7":"2022-11-21T18:11:05Z","21.3.0-beta.8":"2022-11-21T18:11:05Z","21.3.0-beta.9":"2022-11-21T18:11:05Z","21.3.0-beta.10":"2022-11-21T18:11:05Z","21.3.0-beta.11":"2022-11-21T18:11:05Z","21.3.0-beta.12":"2022-11-21T18:11:05Z","21.3.0-beta.13":"2022-11-21T18:11:05Z","21.3.0-beta.14":"2022-11-21T18:11:05Z","21.3.0-beta.15":"2022-11-21T18:11:05Z","22.0.0":"2022-11-21T18:11:05Z","22.0.1":"2022-11-21T18:11:05Z","22.0.2":"2022-11-21T18:11:05Z","22.0.3":"2022-11-21T18:11:05Z","22.0.5":"2022-11-21T18:11:05Z","22.0.6":"2022-11-21T18:11:05Z","22.1.0":"2022-11-21T18:11:05Z","22.4.0":"2022-11-21T18:11:05Z","22.4.3":"2022-11-21T18:11:05Z","23.0.0-alpha.2":"2022-11-21T18:11:05Z","23.0.0-alpha.4":"2022-11-21T18:11:05Z","23.0.0-alpha.5":"2022-11-21T18:11:05Z","23.0.0-alpha.7":"2022-11-21T18:11:05Z","23.0.0-alpha.3r":"2022-11-21T18:11:05Z","23.0.0-alpha.5r":"2022-11-21T18:11:05Z","23.0.0-alpha.6r":"2022-11-21T18:11:05Z","23.0.0-beta.0":"2022-11-21T18:11:05Z","23.0.0-beta.1":"2022-11-21T18:11:05Z","23.0.0-beta.2":"2022-11-21T18:11:05Z","23.0.0-beta.3r":"2022-11-21T18:11:05Z","23.0.0-charlie.0":"2022-11-21T18:11:05Z","23.0.0-charlie.1":"2022-11-21T18:11:05Z","23.0.0-charlie.2":"2022-11-21T18:11:05Z","23.0.0-charlie.3":"2022-11-21T18:11:05Z","23.0.0-charlie.4":"2022-11-21T18:11:05Z","23.0.0":"2022-11-21T18:11:05Z","23.0.1":"2022-11-21T18:11:05Z","23.2.0":"2022-11-21T18:11:05Z","23.5.0":"2022-11-21T18:11:05Z","23.6.0":"2023-05-12T14:29:32Z","24.0.0-alpha.0":"2022-11-21T18:11:05Z","24.0.0-alpha.1":"2022-11-21T18:11:05Z","24.0.0-alpha.2":"2022-11-21T18:11:05Z","24.0.0-alpha.4":"2022-11-21T18:11:05Z","24.0.0-alpha.5":"2022-11-21T18:11:05Z","24.0.0-alpha.6":"2022-11-21T18:11:05Z","24.0.0-alpha.7":"2022-11-21T18:11:05Z","24.0.0-alpha.8":"2022-11-21T18:11:05Z","24.0.0-alpha.9":"2022-11-21T18:11:05Z","24.0.0-alpha.10":"2022-11-21T18:11:05Z","24.0.0-alpha.11":"2022-11-21T18:11:05Z","24.0.0-alpha.12":"2022-11-21T18:11:05Z","24.0.0-alpha.13":"2022-11-21T18:11:05Z","24.0.0-alpha.15":"2022-11-21T18:11:05Z","24.0.0-alpha.16":"2022-11-21T18:11:05Z","24.0.0":"2022-11-21T18:11:05Z","24.2.0-alpha.0":"2022-11-21T18:11:05Z","24.3.0":"2022-11-21T18:11:05Z","24.3.1":"2022-11-21T18:11:05Z","24.4.0":"2022-11-21T18:11:05Z","24.5.0":"2022-11-21T18:11:05Z","24.6.0":"2022-11-21T18:11:05Z","24.7.0":"2022-11-21T18:11:05Z","24.8.0":"2022-11-21T18:11:05Z","24.9.0":"2022-11-21T18:11:05Z","25.0.0":"2022-11-21T18:11:05Z","25.1.0":"2022-11-21T18:11:05Z","25.2.0-alpha.86":"2022-11-21T18:11:05Z","25.2.0":"2022-11-21T18:11:05Z","25.2.1-alpha.1":"2022-11-21T18:11:05Z","25.2.1-alpha.2":"2022-11-21T18:11:05Z","25.2.1":"2022-11-21T18:11:05Z","25.2.3":"2022-11-21T18:11:05Z","25.2.5":"2022-11-21T18:11:05Z","25.2.6":"2022-11-21T18:11:05Z","25.3.0":"2022-11-21T18:11:05Z","25.4.0":"2022-11-21T18:11:05Z","25.5.0":"2022-11-21T18:11:05Z","26.0.0-alpha.0":"2022-11-21T18:11:05Z","26.0.0-alpha.1":"2022-11-21T18:11:05Z","26.0.0-alpha.2":"2022-11-21T18:11:05Z","26.0.0":"2022-11-21T18:11:05Z","26.0.1-alpha.0":"2022-11-21T18:11:05Z","26.0.1":"2022-11-21T18:11:05Z","26.1.0":"2022-11-21T18:11:05Z","26.2.0":"2022-11-21T18:11:05Z","26.3.0":"2022-11-21T18:11:05Z","26.4.0":"2022-11-21T18:11:05Z","26.4.2":"2022-11-21T18:11:05Z","26.5.0":"2022-11-21T18:11:05Z","26.5.2":"2022-11-21T18:11:05Z","26.6.0":"2022-11-21T18:11:05Z","26.6.1":"2022-11-21T18:11:05Z","26.6.2":"2022-11-21T18:12:01Z","27.0.0-next.0":"2022-11-21T18:11:05Z","27.0.0-next.1":"2022-11-21T18:11:05Z","27.0.0-next.3":"2022-11-21T18:11:05Z","27.0.0-next.5":"2022-11-21T18:11:05Z","27.0.0-next.6":"2022-11-21T18:11:05Z","27.0.0-next.7":"2022-11-21T18:11:05Z","27.0.0-next.8":"2022-11-21T18:11:05Z","27.0.0-next.9":"2022-11-21T18:11:05Z","27.0.0-next.10":"2022-11-21T18:11:05Z","27.0.0-next.11":"2022-11-21T18:11:05Z","27.0.0":"2022-11-21T18:11:05Z","27.0.1":"2022-11-21T18:11:05Z","27.0.2":"2022-11-21T18:11:05Z","27.0.6":"2022-11-21T18:11:05Z","27.1.0":"2022-11-21T18:11:05Z","27.1.1":"2022-11-21T18:11:05Z","27.2.0":"2022-11-21T18:11:05Z","27.2.2":"2022-11-21T18:11:05Z","27.2.3":"2022-11-21T18:11:05Z","27.2.4":"2022-11-21T18:11:05Z","27.2.5":"2022-11-21T18:11:05Z","27.3.0":"2022-11-21T18:11:05Z","27.3.1":"2022-11-21T18:11:05Z","27.4.0":"2022-11-21T18:11:05Z","27.4.1":"2022-11-21T18:11:05Z","27.4.2":"2022-11-21T18:11:05Z","27.4.6":"2022-11-21T18:11:05Z","27.5.0":"2022-11-21T18:11:05Z","27.5.1":"2023-01-13T12:59:26Z","28.0.0-alpha.0":"2022-11-21T18:11:05Z","28.0.0-alpha.1":"2022-11-21T18:11:05Z","28.0.0-alpha.2":"2022-11-21T18:11:05Z","28.0.0-alpha.3":"2022-11-21T18:11:05Z","28.0.0-alpha.4":"2022-11-21T18:11:05Z","28.0.0-alpha.5":"2022-11-21T18:11:05Z","28.0.0-alpha.6":"2022-11-21T18:11:05Z","28.0.0-alpha.7":"2022-11-21T18:11:05Z","28.0.0-alpha.8":"2022-11-21T18:11:05Z","28.0.0-alpha.9":"2022-11-21T18:11:05Z","28.0.0":"2022-11-21T18:11:05Z","28.0.1":"2022-11-21T18:11:05Z","28.0.2":"2022-11-21T18:11:05Z","28.1.0":"2022-11-21T18:11:05Z","28.1.1":"2022-11-21T18:11:05Z","28.1.3":"2023-01-13T12:59:38Z","29.0.0-alpha.0":"2022-11-21T18:11:05Z","29.0.0-alpha.1":"2022-11-21T18:11:05Z","29.0.0-alpha.3":"2022-11-21T18:11:05Z","29.0.0-alpha.4":"2022-11-21T18:11:05Z","29.0.0-alpha.6":"2022-11-21T18:11:05Z","29.0.0":"2022-11-21T18:11:05Z","29.0.1":"2022-11-21T18:11:05Z","29.0.2":"2022-11-21T18:11:05Z","29.0.3":"2022-11-21T18:11:05Z","29.1.0":"2022-11-21T18:11:05Z","29.1.2":"2022-11-21T18:11:05Z","29.2.0":"2022-11-21T18:11:05Z","29.2.1":"2022-11-21T18:11:05Z","29.3.1":"2022-11-21T18:11:05Z","29.4.0":"2023-01-24T11:53:51Z","29.4.1":"2023-01-26T17:48:51Z","29.4.2":"2023-02-07T14:41:14Z","29.4.3":"2023-02-15T14:53:15Z","29.5.0":"2023-03-24T16:54:54Z","29.6.0":"2023-07-04T17:47:26Z","29.6.1":"2023-07-06T14:45:28Z","29.6.2":"2023-08-07T20:04:56Z","29.6.3":"2023-08-22T22:36:40Z","29.7.0":"2023-12-19T06:19:14Z","30.0.0-alpha.1":"2023-10-30T17:43:39Z","30.0.0-alpha.2":"2023-11-16T14:41:23Z","30.0.0-alpha.3":"2024-02-20T14:46:23Z"}}