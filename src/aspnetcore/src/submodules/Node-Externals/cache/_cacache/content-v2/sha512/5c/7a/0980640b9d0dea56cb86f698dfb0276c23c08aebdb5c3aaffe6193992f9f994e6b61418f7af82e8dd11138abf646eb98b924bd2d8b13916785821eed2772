{"_id":"yargs-parser","_rev":"daefb3ff-43c3-4db4-b575-ae80d8f9e299","name":"yargs-parser","dist-tags":{"latest":"21.1.1","next":"20.2.6","alpha":"1.1.1-alpha3","latest-15":"15.0.3","latest-13":"13.1.2","latest-5":"5.0.1"},"versions":{"1.0.0":{"_id":"yargs-parser@1.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"1.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"author":{"name":"Ben Coe","email":"ben@npmjs.com"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"chai":"^3.4.1","coveralls":"^2.11.6","mocha":"^2.3.4","nyc":"^5.3.0","standard":"^5.4.1"},"dependencies":{"camelcase":"^2.0.1"},"main":"index.js","dist":{"shasum":"0a64d7fffaf2063ef1d817ffbb29b0a553e75f1d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-1.0.0.tgz"},"gitHead":"220bddc3f010f158703a0401234bea611cde49b9","_from":".","_npmVersion":"3.3.0","_nodeVersion":"3.2.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"}]},"1.1.0":{"_id":"yargs-parser@1.1.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"1.1.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"chai":"^3.4.1","coveralls":"^2.11.6","mocha":"^2.3.4","nyc":"^5.3.0","rimraf":"^2.5.1","standard":"^5.4.1"},"dependencies":{"camelcase":"^2.0.1","find-up":"^1.1.0","pkg-conf":"^1.1.1"},"main":"index.js","dist":{"shasum":"395ac847eb10c8298cb6c5547b4bc8484c3c0a9a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-1.1.0.tgz"},"gitHead":"56a1e3b3f473b5111201bf3c024b7a823c764f4e","_from":".","_npmVersion":"3.3.0","_nodeVersion":"3.2.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"}]},"1.1.1-alpha":{"_id":"yargs-parser@1.1.1-alpha","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"1.1.1-alpha","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"chai":"^3.4.1","coveralls":"^2.11.6","mocha":"^2.3.4","nyc":"^5.3.0","rimraf":"^2.5.1","standard":"^5.4.1"},"dependencies":{"app-root-path":"^1.0.0","camelcase":"^2.0.1","pkg-conf":"^1.1.1"},"main":"index.js","dist":{"shasum":"cec04c7c9bd83630bc27a75f47a1200ea2a17a7d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-1.1.1-alpha.tgz"},"gitHead":"6aa47d9b5a01f58eef52eeb03ff7dfbe38dee41c","_from":".","_npmVersion":"3.3.0","_nodeVersion":"3.2.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"}]},"1.1.1-alpha2":{"_id":"yargs-parser@1.1.1-alpha2","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"1.1.1-alpha2","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"chai":"^3.4.1","coveralls":"^2.11.6","mocha":"^2.3.4","nyc":"^5.3.0","rimraf":"^2.5.1","standard":"^5.4.1"},"dependencies":{"camelcase":"^2.0.1","pkg-conf":"^1.1.1"},"main":"index.js","dist":{"shasum":"900e0893db36fff838457735550907a0e67d80e6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-1.1.1-alpha2.tgz"},"gitHead":"56a1e3b3f473b5111201bf3c024b7a823c764f4e","_from":".","_npmVersion":"3.3.0","_nodeVersion":"3.2.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"}]},"1.1.1-alpha3":{"_id":"yargs-parser@1.1.1-alpha3","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"1.1.1-alpha3","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"chai":"^3.4.1","coveralls":"^2.11.6","mocha":"^2.3.4","nyc":"^5.3.0","rimraf":"^2.5.1","standard":"^5.4.1"},"dependencies":{"camelcase":"^2.0.1","pkg-conf":"^1.1.1","require-main-filename":"^1.0.0"},"main":"index.js","dist":{"shasum":"b2aa0257f333b15302818770d1b0c7eb6b80ce49","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-1.1.1-alpha3.tgz"},"gitHead":"7f957e37be87f2b70c33cf855c02cc5b19684856","_from":".","_npmVersion":"3.3.0","_nodeVersion":"3.2.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"}]},"2.0.0":{"_id":"yargs-parser@2.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"2.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.6","mocha":"^2.4.5","nyc":"^5.6.0","standard":"^5.4.1"},"dependencies":{"camelcase":"^2.1.0","lodash.assign":"^4.0.2"},"main":"index.js","dist":{"shasum":"7fa0be0f4f48d6ffaa467dfbc8b1aa8f776ba5c2","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-2.0.0.tgz"},"gitHead":"1c5dcebaa87e28a00d50a9255ea5035549f96d1e","_from":".","_npmVersion":"3.3.0","_nodeVersion":"3.2.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-5-east.internal.npmjs.com","tmp":"tmp/yargs-parser-2.0.0.tgz_1454791157643_0.925775176146999"}},"2.1.0":{"_id":"yargs-parser@2.1.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"2.1.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.6","mocha":"^2.4.5","nyc":"^5.6.0","standard":"^5.4.1"},"dependencies":{"camelcase":"^2.1.0","lodash.assign":"^4.0.2"},"main":"index.js","dist":{"shasum":"5f214362f948a085389abf34a78d8b5eef0b1350","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-2.1.0.tgz"},"gitHead":"78f49ffde9a3305facb66b2faeae862b33d0745e","_from":".","_npmVersion":"3.3.0","_nodeVersion":"3.2.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-9-west.internal.npmjs.com","tmp":"tmp/yargs-parser-2.1.0.tgz_1455440640589_0.058524578576907516"}},"2.1.1":{"_id":"yargs-parser@2.1.1","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"2.1.1","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.6","mocha":"^2.4.5","nyc":"^5.6.0","standard":"^5.4.1"},"dependencies":{"camelcase":"^2.1.0","lodash.assign":"^4.0.2"},"main":"index.js","dist":{"shasum":"6bbb36d28cc03e2d57d172b4017d612e5ff6a0b6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-2.1.1.tgz"},"gitHead":"05c8df71668228f022c21c995a6cf281564313b1","_from":".","_npmVersion":"3.3.0","_nodeVersion":"3.2.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-9-west.internal.npmjs.com","tmp":"tmp/yargs-parser-2.1.1.tgz_1456210467734_0.12809900217689574"}},"2.1.2":{"_id":"yargs-parser@2.1.2","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"2.1.2","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.8","mocha":"^2.4.5","nyc":"^6.1.1","standard":"^6.0.8"},"dependencies":{"camelcase":"^2.1.1","lodash.assign":"^4.0.6"},"main":"index.js","dist":{"shasum":"e675aa728c72d9e95bd419c962c75a9e92f1c9da","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-2.1.2.tgz"},"gitHead":"4ee3318d1420c97b0bd8b4e5d1641eb33cb122e6","_from":".","_npmVersion":"3.3.0","_nodeVersion":"3.2.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/yargs-parser-2.1.2.tgz_1458500649814_0.29023746121674776"}},"2.2.0":{"_id":"yargs-parser@2.2.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"2.2.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.8","mocha":"^2.4.5","nyc":"^6.1.1","standard":"^6.0.8"},"dependencies":{"camelcase":"^2.1.1","lodash.assign":"^4.0.6"},"main":"index.js","dist":{"shasum":"29c4185b9c42c259f6ebbe054d1f46014e71d73b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-2.2.0.tgz"},"gitHead":"48b1e6a338f80417b3fd0fc3e39ae181332fdcb5","_from":".","_npmVersion":"3.3.12","_nodeVersion":"5.1.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/yargs-parser-2.2.0.tgz_1459318523723_0.7542532840743661"}},"2.4.0-next":{"_id":"yargs-parser@2.4.0-next","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"2.4.0-next","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","version":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.8","mocha":"^2.4.5","nyc":"^6.4.0","standard":"^6.0.8","standard-version":"^2.1.2"},"dependencies":{"camelcase":"^2.1.1","lodash.assign":"^4.0.6"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"537d617a12162a652c875eec7d3ea9df0fe12cf6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-2.4.0-next.tgz"},"gitHead":"4a504775a708b270822511c25531db8d69119a04","_from":".","_npmVersion":"3.3.12","_nodeVersion":"5.1.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/yargs-parser-2.4.0-next.tgz_1460343866053_0.5493791722692549"}},"2.4.0":{"_id":"yargs-parser@2.4.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"2.4.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","version":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.8","mocha":"^2.4.5","nyc":"^6.4.0","standard":"^6.0.8","standard-version":"^2.1.2"},"dependencies":{"camelcase":"^2.1.1","lodash.assign":"^4.0.6"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"1f367dc9c6cfa5660b6971230f3b277fc5e3adca","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-2.4.0.tgz"},"gitHead":"4a504775a708b270822511c25531db8d69119a04","_from":".","_npmVersion":"3.3.12","_nodeVersion":"5.1.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/yargs-parser-2.4.0.tgz_1460354642776_0.13956820615567267"}},"2.4.1":{"_id":"yargs-parser@2.4.1","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"2.4.1","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","version":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.8","mocha":"^2.4.5","nyc":"^7.0.0","standard":"^7.1.0","standard-version":"^2.1.2"},"dependencies":{"camelcase":"^3.0.0","lodash.assign":"^4.0.6"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"85568de3cf150ff49fa51825f03a8c880ddcc5c4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-2.4.1.tgz"},"gitHead":"e7c71d5b8e0088596aef17a4e2b0261a85fca713","_from":".","_npmVersion":"3.3.12","_nodeVersion":"5.1.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"},{"name":"nexdrew","email":"andrew@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/yargs-parser-2.4.1.tgz_1468709489453_0.7414652374573052"}},"3.1.0":{"_id":"yargs-parser@3.1.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"3.1.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^7.1.0","standard":"^7.1.0","standard-version":"^2.1.2"},"dependencies":{"camelcase":"^3.0.0","lodash.assign":"^4.1.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"5bc511dc1b0551275bfb15344874ded8d22d2604","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-3.1.0.tgz"},"gitHead":"948e1cde41adb6142f47c0ce38992f8d1f58e10f","_from":".","_npmVersion":"3.10.6","_nodeVersion":"5.1.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"},{"name":"nexdrew","email":"andrew@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/yargs-parser-3.1.0.tgz_1470723974935_0.08871294185519218"}},"3.2.0":{"_id":"yargs-parser@3.2.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"3.2.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^7.1.0","standard":"^7.1.0","standard-version":"^2.1.2"},"dependencies":{"camelcase":"^3.0.0","lodash.assign":"^4.1.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"5081355d19d9d0c8c5d81ada908cb4e6d186664f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-3.2.0.tgz"},"gitHead":"a4c4f0c4e9417c968feec98caa39d69983bf31ec","_from":".","_npmVersion":"3.10.6","_nodeVersion":"5.1.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"},{"name":"nexdrew","email":"andrew@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/yargs-parser-3.2.0.tgz_1471118009225_0.3763321761507541"}},"4.0.0":{"_id":"yargs-parser@4.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"4.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^8.1.0","standard":"^8.0.0","standard-version":"^2.1.2"},"dependencies":{"camelcase":"^3.0.0","lodash.assign":"^4.1.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"a36825f971a02bb6059797116d14e6588be586f0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-4.0.0.tgz"},"gitHead":"ec6df1ca43f110250dfaf8cc5660e8d827a72667","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.5.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"},{"name":"nexdrew","email":"andrew@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/yargs-parser-4.0.0.tgz_1474868319878_0.024560872232541442"}},"4.0.1":{"_id":"yargs-parser@4.0.1","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"4.0.1","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^8.1.0","standard":"^8.0.0","standard-version":"^2.1.2"},"dependencies":{"camelcase":"^3.0.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"7f6fbfa24bbf512846240529c68e88130c6c713b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-4.0.1.tgz"},"gitHead":"b43b7c1b3d92307bf1ee4b319d30a07656d25617","_from":".","_npmVersion":"2.15.1","_nodeVersion":"0.10.47","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"},{"name":"nexdrew","email":"andrew@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/yargs-parser-4.0.1.tgz_1475217375019_0.16979361232370138"}},"4.0.2":{"_id":"yargs-parser@4.0.2","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"4.0.2","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^8.1.0","standard":"^8.0.0","standard-version":"^2.1.2"},"dependencies":{"camelcase":"^3.0.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"7f7173a8c7cca1d81dc7c18692fc07c2c2e2b1e0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-4.0.2.tgz"},"gitHead":"466e38b97c1ead7b6b777500cf4392a2c7645921","_from":".","_npmVersion":"2.15.1","_nodeVersion":"0.10.47","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"},{"name":"nexdrew","email":"andrew@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/yargs-parser-4.0.2.tgz_1475218337015_0.34343091025948524"}},"4.1.0":{"_id":"yargs-parser@4.1.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"4.1.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^8.1.0","standard":"^8.0.0","standard-version":"^3.0.0"},"dependencies":{"camelcase":"^3.0.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"313df030f20124124aeae8fbab2da53ec28c56d7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-4.1.0.tgz"},"gitHead":"a491feb6711a8b6eda11755bebf73ead8e182d30","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.5.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"},{"name":"nexdrew","email":"andrew@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/yargs-parser-4.1.0.tgz_1478500309828_0.6643792404793203"}},"4.2.0":{"_id":"yargs-parser@4.2.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"4.2.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^10.0.0","standard":"^8.0.0","standard-version":"^3.0.0"},"dependencies":{"camelcase":"^3.0.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"6ced869cd05a3dca6a1eaee38b68aeed4b0b4101","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-4.2.0.tgz"},"gitHead":"941d8f3a5eaa008986816185c05b02a12ff0abeb","_from":".","_npmVersion":"3.10.9","_nodeVersion":"7.2.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"},{"name":"nexdrew","email":"andrew@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/yargs-parser-4.2.0.tgz_1480618162618_0.04404683620668948"}},"4.2.1-candidate.0":{"_id":"yargs-parser@4.2.1-candidate.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"4.2.1-candidate.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^10.0.0","standard":"^8.0.0","standard-version":"^4.0.0"},"dependencies":{"camelcase":"^3.0.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"182c95b17190db70c80c5cfb6dec3609acfe51ee","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-4.2.1-candidate.0.tgz"},"gitHead":"924b014ac25ecbaa2a01f40c2100512a68bdba1d","_from":".","_npmVersion":"3.10.9","_nodeVersion":"7.1.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"},{"name":"nexdrew","email":"andrew@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/yargs-parser-4.2.1-candidate.0.tgz_1483743098860_0.751906061777845"}},"4.2.1-candidate.1":{"_id":"yargs-parser@4.2.1-candidate.1","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"4.2.1-candidate.1","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^10.0.0","standard":"^8.0.0","standard-version":"^4.0.0"},"dependencies":{"camelcase":"^3.0.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"6982d85251771d897f9b96788e9fe9a53a42db32","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-4.2.1-candidate.1.tgz"},"gitHead":"924b014ac25ecbaa2a01f40c2100512a68bdba1d","_from":".","_npmVersion":"3.10.9","_nodeVersion":"7.1.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"},{"name":"nexdrew","email":"andrew@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/yargs-parser-4.2.1-candidate.1.tgz_1483744955649_0.30080202664248645"}},"4.2.1":{"_id":"yargs-parser@4.2.1","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"4.2.1","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^10.0.0","standard":"^8.0.0","standard-version":"^4.0.0"},"dependencies":{"camelcase":"^3.0.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"29cceac0dc4f03c6c87b4a9f217dd18c9f74871c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-4.2.1.tgz"},"gitHead":"924b014ac25ecbaa2a01f40c2100512a68bdba1d","_from":".","_npmVersion":"3.10.9","_nodeVersion":"7.1.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"},{"name":"nexdrew","email":"andrew@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/yargs-parser-4.2.1.tgz_1483386157947_0.938966978341341"}},"5.0.0-security.0":{"_id":"yargs-parser@5.0.0-security.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"5.0.0-security.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^10.0.0","standard":"^8.0.0","standard-version":"^4.0.0"},"dependencies":{"camelcase":"^3.0.0","object.assign":"^4.1.0"},"main":"index.js","dist":{"shasum":"4ff7271d25f90ac15643b86076a2ab499ec9ee24","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-5.0.0-security.0.tgz"},"readme":"# yargs-parser\n\n[![Build Status](https://travis-ci.org/yargs/yargs-parser.png)](https://travis-ci.org/yargs/yargs-parser)\n[![Coverage Status](https://coveralls.io/repos/yargs/yargs-parser/badge.svg?branch=)](https://coveralls.io/r/yargs/yargs-parser?branch=master)\n[![NPM version](https://img.shields.io/npm/v/yargs-parser.svg)](https://www.npmjs.com/package/yargs-parser)\n[![Windows Tests](https://img.shields.io/appveyor/ci/bcoe/yargs-parser/master.svg?label=Windows%20Tests)](https://ci.appveyor.com/project/bcoe/yargs-parser)\n[![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version)\n\n\nThe mighty option parser used by [yargs](https://github.com/yargs/yargs).\n\nvisit the [yargs website](http://yargs.js.org/) for more examples, and thorough usage instructions.\n\n<img width=\"250\" src=\"https://github.com/yargs/yargs-parser/blob/master/yargs-logo.png\">\n\n## Example\n\n```sh\nnpm i yargs-parser --save\n```\n\n```js\nvar argv = require('yargs-parser')(process.argv.slice(2))\nconsole.log(argv)\n```\n\n```sh\nnode example.js --foo=33 --bar hello\n{ _: [], foo: 33, bar: 'hello' }\n```\n\n_or parse a string!_\n\n```js\nvar argv = require('./')('--foo=99 --bar=33')\nconsole.log(argv)\n```\n\n```sh\n{ _: [], foo: 99, bar: 33 }\n```\n\nConvert an array of mixed types before passing to `yargs-parser`:\n\n```js\nvar parse = require('yargs-parser')\nparse(['-f', 11, '--zoom', 55].join(' '))   // <-- array to string\nparse(['-f', 11, '--zoom', 55].map(String)) // <-- array of strings\n```\n\n## API\n\n### require('yargs-parser')(args, opts={})\n\nParses command line arguments returning a simple mapping of keys and values.\n\n**expects:**\n\n* `args`: a string or array of strings representing the options to parse.\n* `opts`: provide a set of hints indicating how `args` should be parsed:\n  * `opts.alias`: an object representing the set of aliases for a key: `{alias: {foo: ['f']}}`.\n  * `opts.array`: indicate that keys should be parsed as an array: `{array: ['foo', 'bar']}`.\n  * `opts.boolean`: arguments should be parsed as booleans: `{boolean: ['x', 'y']}`.\n  * `opts.config`: indicate a key that represents a path to a configuration file (this file will be loaded and parsed).\n  * `opts.coerce`: provide a custom synchronous function that returns a coerced value from the argument provided\n    (or throws an error), e.g. `{coerce: {foo: function (arg) {return modifiedArg}}}`.\n  * `opts.count`: indicate a key that should be used as a counter, e.g., `-vvv` = `{v: 3}`.\n  * `opts.default`: provide default values for keys: `{default: {x: 33, y: 'hello world!'}}`.\n  * `opts.envPrefix`: environment variables (`process.env`) with the prefix provided should be parsed.\n  * `opts.narg`: specify that a key requires `n` arguments: `{narg: {x: 2}}`.\n  * `opts.normalize`: `path.normalize()` will be applied to values set to this key.\n  * `opts.string`: keys should be treated as strings (even if they resemble a number `-x 33`).\n  * `opts.configuration`: provide configuration options to the yargs-parser (see: [configuration](#configuration)).\n  * `opts.number`: keys should be treated as numbers.\n\n**returns:**\n\n* `obj`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n\n### require('yargs-parser').detailed(args, opts={})\n\nParses a command line string, returning detailed information required by the\nyargs engine.\n\n**expects:**\n\n* `args`: a string or array of strings representing options to parse.\n* `opts`: provide a set of hints indicating how `args`, inputs are identical to `require('yargs-parser')(args, opts={})`.\n\n**returns:**\n\n* `argv`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n* `error`: populated with an error object if an exception occurred during parsing.\n* `aliases`: the inferred list of aliases built by combining lists in `opts.alias`.\n* `newAliases`: any new aliases added via camel-case expansion.\n* `configuration`: the configuration loaded from the `yargs` stanza in package.json.\n\n<a name=\"configuration\"></a>\n### Configuration\n\nThe yargs-parser applies several automated transformations on the keys provided\nin `args`. These features can be turned on and off using the `configuration` field\nof `opts`.\n\n```js\nvar parsed = parser(['--no-dice'], {\n  configuration: {\n    'boolean-negation': false\n  }\n})\n```\n\n### short option groups\n\n* default: `true`.\n* key: `short-option-groups`.\n\nShould a group of short-options be treated as boolean flags?\n\n```sh\nnode example.js -abc\n{ _: [], a: true, b: true, c: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -abc\n{ _: [], abc: true }\n```\n\n### camel-case expansion\n\n* default: `true`.\n* key: `camel-case-expansion`.\n\nShould hyphenated arguments be expanded into camel-case aliases?\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true, fooBar: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true }\n```\n\n### dot-notation\n\n* default: `true`\n* key: `dot-notation`\n\nShould keys that contain `.` be treated as objects?\n\n```sh\nnode example.js --foo.bar\n{ _: [], foo: { bar: true } }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo.bar\n{ _: [], \"foo.bar\": true }\n```\n\n### parse numbers\n\n* default: `true`\n* key: `parse-numbers`\n\nShould keys that look like numbers be treated as such?\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: 99.3 }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: \"99.3\" }\n```\n\n### boolean negation\n\n* default: `true`\n* key: `boolean-negation`\n\nShould variables prefixed with `--no` be treated as negations?\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --no-foo\n{ _: [], \"no-foo\": true }\n```\n\n### duplicate arguments array\n\n* default: `true`\n* key: `duplicate-arguments-array`\n\nShould arguments be coerced into an array when duplicated:\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: [1, 2] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: 2 }\n```\n\n### flatten duplicate arrays\n\n* default: `true`\n* key: `flatten-duplicate-arrays`\n\nShould array arguments be coerced into a single array when duplicated:\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [1, 2, 3, 4] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [[1, 2], [3, 4]] }\n```\n\n## Special Thanks\n\nThe yargs project evolves from optimist and minimist. It owes its\nexistence to a lot of James Halliday's hard work. Thanks [substack](https://github.com/substack) **beep** **boop** \\o/\n\n## License\n\nISC\n","readmeFilename":"README.md","gitHead":"47742078426f0e4e02aa988062b5fb0fa61182b9","_nodeVersion":"12.16.3","_npmVersion":"6.14.4","maintainers":[{"email":"bencoe@gmail.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"},{"email":"bencoe+oss-bot@gmail.com","name":"oss-bot"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_5.0.0-security.0_1590107529717_0.46046677875730246"},"_hasShrinkwrap":false},"5.0.0":{"_id":"yargs-parser@5.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"5.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"author":{"name":"Ben Coe","email":"ben@npmjs.com","url":""},"repository":{"url":"git@github.com:yargs/yargs-parser.git"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":null,"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^10.0.0","standard":"^8.0.0","standard-version":"^4.0.0"},"dependencies":{"camelcase":"^3.0.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"275ecf0d7ffe05c77e64e7c86e4cd94bf0e1228a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-5.0.0.tgz"}},"5.0.1":{"_id":"yargs-parser@5.0.1","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"5.0.1","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"author":{"name":"Ben Coe","email":"ben@npmjs.com","url":""},"repository":{"url":"git@github.com:yargs/yargs-parser.git"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":null,"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^10.0.0","standard":"^8.0.0","standard-version":"^4.0.0"},"dependencies":{"camelcase":"^3.0.0","object.assign":"^4.1.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"7ede329c1d8cdbbe209bd25cdb990e9b1ebbb394","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-5.0.1.tgz"}},"6.0.0":{"_id":"yargs-parser@6.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"6.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^10.0.0","standard":"^10.0.2","standard-version":"^4.0.0"},"dependencies":{"camelcase":"^4.1.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"d8c91626b560b3fd1173390c28b882aa4171920d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-6.0.0.tgz"},"gitHead":"4a383cf0902f4f7205847267ef0f2c4220ace660","_from":".","_npmVersion":"2.15.11","_nodeVersion":"4.8.2","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"},{"name":"nexdrew","email":"andrew@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/yargs-parser-6.0.0.tgz_1493599951495_0.06887614144943655"}},"6.0.1":{"_id":"yargs-parser@6.0.1","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"6.0.1","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^10.0.0","standard":"^10.0.2","standard-version":"^4.0.0"},"dependencies":{"camelcase":"^4.1.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"0026e672e284e7df459111d2e51462efad725350","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-6.0.1.tgz"},"gitHead":"05522182f903a74e3458fb5adba92a4bfbf9653d","_from":".","_npmVersion":"2.15.11","_nodeVersion":"4.8.2","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"name":"bcoe","email":"ben@npmjs.com"},{"name":"nexdrew","email":"andrew@npmjs.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/yargs-parser-6.0.1.tgz_1493618237360_0.13729879376478493"}},"7.0.0":{"_id":"yargs-parser@7.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"7.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"author":{"name":"Ben Coe","email":"ben@npmjs.com","url":""},"repository":{"url":"git@github.com:yargs/yargs-parser.git"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":null,"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^10.0.0","standard":"^10.0.2","standard-version":"^4.0.0"},"dependencies":{"camelcase":"^4.1.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"8d0ac42f16ea55debd332caf4c4038b3e3f5dfd9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-7.0.0.tgz"}},"8.0.0":{"_id":"yargs-parser@8.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"8.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^11.2.1","standard":"^10.0.2","standard-version":"^4.0.0"},"dependencies":{"camelcase":"^4.1.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"21d476330e5a82279a4b881345bf066102e219c6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-8.0.0.tgz"},"gitHead":"c7eee910d73ad24970f3addbf884cfa47092b3f8","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.11.4","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"email":"andrewbgoode@gmail.com","name":"nexdrew"},{"email":"ben@npmjs.com","name":"bcoe"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser-8.0.0.tgz_1507184524796_0.6527229540515691"}},"8.1.0":{"_id":"yargs-parser@8.1.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"8.1.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"pretest":"standard","test":"nyc mocha test/*.js","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^11.4.1","standard":"^10.0.2","standard-version":"^4.3.0-candidate.0"},"dependencies":{"camelcase":"^4.1.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"f1376a33b6629a5d063782944da732631e966950","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-8.1.0.tgz"},"gitHead":"29b02489b2111be89de94bf24f36e8ec8a6ba9e2","_npmVersion":"5.5.1","_nodeVersion":"9.3.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"email":"andrewbgoode@gmail.com","name":"nexdrew"},{"email":"ben@npmjs.com","name":"bcoe"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser-8.1.0.tgz_1513750813446_0.41336237522773445"}},"9.0.0":{"_id":"yargs-parser@9.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"9.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"test":"nyc mocha test/*.js","posttest":"standard","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^11.4.1","standard":"^10.0.2","standard-version":"^4.3.0"},"dependencies":{"camelcase":"^4.1.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"1026f0827af0567ad73a65cdebe60c5f11a6117a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-9.0.0.tgz"},"gitHead":"9734d9c24d6f6aa94ebd7f1d5093e309ae1d2a0a","_from":".","_npmVersion":"2.15.11","_nodeVersion":"4.8.7","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"email":"andrewbgoode@gmail.com","name":"nexdrew"},{"email":"ben@npmjs.com","name":"bcoe"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser-9.0.0.tgz_1516488463416_0.8724576800595969"}},"9.0.1":{"_id":"yargs-parser@9.0.1","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"9.0.1","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"test":"nyc mocha test/*.js","posttest":"standard","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^11.4.1","standard":"^10.0.2","standard-version":"^4.3.0"},"dependencies":{"camelcase":"^4.1.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"d1feb4b244d2ccd04a2ed2a81f4998387ed81a68","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-9.0.1.tgz"},"gitHead":"cf0d9d0b3e9e2565498c5ccf3c771828204dd88c","_npmVersion":"5.4.2","_nodeVersion":"8.8.1","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"email":"andrewbgoode@gmail.com","name":"nexdrew"},{"email":"ben@npmjs.com","name":"bcoe"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser-9.0.1.tgz_1516489420320_0.9541788336355239"}},"9.0.2":{"_id":"yargs-parser@9.0.2","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"9.0.2","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"test":"nyc mocha test/*.js","posttest":"standard","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^11.4.1","standard":"^10.0.2","standard-version":"^4.3.0"},"dependencies":{"camelcase":"^4.1.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"9ccf6a43460fe4ed40a9bb68f48d43b8a68cc077","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-9.0.2.tgz"},"gitHead":"523aecd52ac5aec7c1e4aabf0fbd4992ba660bd0","_from":".","_npmVersion":"2.15.11","_nodeVersion":"4.8.7","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"email":"andrewbgoode@gmail.com","name":"nexdrew"},{"email":"ben@npmjs.com","name":"bcoe"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser-9.0.2.tgz_1516490623727_0.7419105849694461"}},"10.0.0":{"_id":"yargs-parser@10.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"10.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"test":"nyc mocha test/*.js","posttest":"standard","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^11.4.1","standard":"^10.0.2","standard-version":"^4.3.0"},"dependencies":{"camelcase":"^4.1.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"c737c93de2567657750cb1f2c00be639fd19c994","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-10.0.0.tgz"},"gitHead":"8c9706ff2c16e415fed6a89336c6cbfde7779eb3","_npmVersion":"5.6.0","_nodeVersion":"9.10.1","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"email":"ben@npmjs.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_10.0.0_1522807810210_0.12159316833474909"},"_hasShrinkwrap":false},"10.1.0":{"_id":"yargs-parser@10.1.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"10.1.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"author":{"name":"Ben Coe","email":"ben@npmjs.com","url":""},"repository":{"url":"git@github.com:yargs/yargs-parser.git"},"license":"ISC","scripts":{"test":"nyc mocha test/*.js","posttest":"standard","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":null,"devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.12","mocha":"^3.0.1","nyc":"^11.4.1","standard":"^10.0.2","standard-version":"^4.3.0"},"dependencies":{"camelcase":"^4.1.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"7202265b89f7e9e9f2e5765e0fe735a905edbaa8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-10.1.0.tgz"}},"11.0.0":{"_id":"yargs-parser@11.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"11.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"test":"nyc mocha test/*.js","posttest":"standard","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^5.2.0","nyc":"^13.0.1","standard":"^12.0.1","standard-version":"^4.4.0"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"main":"index.js","dist":{"shasum":"d9fd0f0cd551a2a2ef9bbf42606ffb6211634232","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-11.0.0.tgz"},"engine":{"node":">=6"},"gitHead":"68dd3a18f04b819c25b48f523a861c81c17c82b8","_npmVersion":"6.4.1","_nodeVersion":"10.10.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"email":"ben@npmjs.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_11.0.0_1538866348083_0.0617863942875192"},"_hasShrinkwrap":false},"11.1.0":{"_id":"yargs-parser@11.1.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"11.1.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"test":"nyc mocha test/*.js","posttest":"standard","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^5.2.0","nyc":"^13.0.1","standard":"^12.0.1","standard-version":"^4.4.0"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"main":"index.js","dist":{"shasum":"0b8104116367bf663089b24e5801438ab50396a3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-11.1.0.tgz"},"engine":{"node":">=6"},"gitHead":"1eb726b30e78f6f76c1ba66dbcb49a92cbc4b6ff","_npmVersion":"6.4.1","_nodeVersion":"10.11.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"email":"ben@npmjs.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_11.1.0_1541809804088_0.014179245602807145"},"_hasShrinkwrap":false},"11.1.1":{"_id":"yargs-parser@11.1.1","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"11.1.1","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"author":{"name":"Ben Coe","email":"ben@npmjs.com","url":""},"repository":{"url":"git@github.com:yargs/yargs-parser.git"},"license":"ISC","scripts":{"test":"nyc mocha test/*.js","posttest":"standard","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":null,"devDependencies":{"chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^5.2.0","nyc":"^13.0.1","standard":"^12.0.1","standard-version":"^4.4.0"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"879a0865973bca9f6bab5cbdf3b1c67ec7d3bcf4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-11.1.1.tgz"},"engine":{"node":">=6"}},"12.0.0":{"_id":"yargs-parser@12.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"12.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"test":"nyc mocha test/*.js","posttest":"standard","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^5.2.0","nyc":"^13.0.1","standard":"^12.0.1","standard-version":"^4.4.0"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"main":"index.js","dist":{"shasum":"18aa348854747dfe1002d01bd87d65df10d40a84","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-12.0.0.tgz"},"engine":{"node":">=6"},"gitHead":"ea6ce0572b32797e965c620ee93a47a9a02201ee","_npmVersion":"6.5.0","_nodeVersion":"11.8.0","_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"maintainers":[{"email":"ben@npmjs.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_12.0.0_1548722976357_0.9759821039563321"},"_hasShrinkwrap":false},"13.0.0-candidate.0":{"_id":"yargs-parser@13.0.0-candidate.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"13.0.0-candidate.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"test":"nyc mocha test/*.js","posttest":"standard","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^5.2.0","nyc":"^13.0.1","standard":"^12.0.1","standard-version":"^4.4.0"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"main":"index.js","dist":{"shasum":"b7257bfab97e63007bb8e41a62aed9f509a5e64b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-13.0.0-candidate.0.tgz"},"readme":"# yargs-parser\n\n[![Build Status](https://travis-ci.org/yargs/yargs-parser.svg)](https://travis-ci.org/yargs/yargs-parser)\n[![Coverage Status](https://coveralls.io/repos/yargs/yargs-parser/badge.svg?branch=)](https://coveralls.io/r/yargs/yargs-parser?branch=master)\n[![NPM version](https://img.shields.io/npm/v/yargs-parser.svg)](https://www.npmjs.com/package/yargs-parser)\n[![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version)\n\n\nThe mighty option parser used by [yargs](https://github.com/yargs/yargs).\n\nvisit the [yargs website](http://yargs.js.org/) for more examples, and thorough usage instructions.\n\n<img width=\"250\" src=\"https://raw.githubusercontent.com/yargs/yargs-parser/master/yargs-logo.png\">\n\n## Example\n\n```sh\nnpm i yargs-parser --save\n```\n\n```js\nvar argv = require('yargs-parser')(process.argv.slice(2))\nconsole.log(argv)\n```\n\n```sh\nnode example.js --foo=33 --bar hello\n{ _: [], foo: 33, bar: 'hello' }\n```\n\n_or parse a string!_\n\n```js\nvar argv = require('./')('--foo=99 --bar=33')\nconsole.log(argv)\n```\n\n```sh\n{ _: [], foo: 99, bar: 33 }\n```\n\nConvert an array of mixed types before passing to `yargs-parser`:\n\n```js\nvar parse = require('yargs-parser')\nparse(['-f', 11, '--zoom', 55].join(' '))   // <-- array to string\nparse(['-f', 11, '--zoom', 55].map(String)) // <-- array of strings\n```\n\n## API\n\n### require('yargs-parser')(args, opts={})\n\nParses command line arguments returning a simple mapping of keys and values.\n\n**expects:**\n\n* `args`: a string or array of strings representing the options to parse.\n* `opts`: provide a set of hints indicating how `args` should be parsed:\n  * `opts.alias`: an object representing the set of aliases for a key: `{alias: {foo: ['f']}}`.\n  * `opts.array`: indicate that keys should be parsed as an array: `{array: ['foo', 'bar']}`.\n     Indicate that keys should be parsed as an array and coerced to booleans / numbers:\n     `{array: [{ key: 'foo', boolean: true }, {key: 'bar', number: true}]}`.\n  * `opts.boolean`: arguments should be parsed as booleans: `{boolean: ['x', 'y']}`.\n  * `opts.config`: indicate a key that represents a path to a configuration file (this file will be loaded and parsed).\n  * `opts.coerce`: provide a custom synchronous function that returns a coerced value from the argument provided\n    (or throws an error), e.g. `{coerce: {foo: function (arg) {return modifiedArg}}}`.\n  * `opts.count`: indicate a key that should be used as a counter, e.g., `-vvv` = `{v: 3}`.\n  * `opts.default`: provide default values for keys: `{default: {x: 33, y: 'hello world!'}}`.\n  * `opts.envPrefix`: environment variables (`process.env`) with the prefix provided should be parsed.\n  * `opts.narg`: specify that a key requires `n` arguments: `{narg: {x: 2}}`.\n  * `opts.normalize`: `path.normalize()` will be applied to values set to this key.\n  * `opts.string`: keys should be treated as strings (even if they resemble a number `-x 33`).\n  * `opts.configuration`: provide configuration options to the yargs-parser (see: [configuration](#configuration)).\n  * `opts.number`: keys should be treated as numbers.\n\n**returns:**\n\n* `obj`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n  * [optional] `--`:  an array with arguments after the end-of-options flag `--`.\n\n### require('yargs-parser').detailed(args, opts={})\n\nParses a command line string, returning detailed information required by the\nyargs engine.\n\n**expects:**\n\n* `args`: a string or array of strings representing options to parse.\n* `opts`: provide a set of hints indicating how `args`, inputs are identical to `require('yargs-parser')(args, opts={})`.\n\n**returns:**\n\n* `argv`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n* `error`: populated with an error object if an exception occurred during parsing.\n* `aliases`: the inferred list of aliases built by combining lists in `opts.alias`.\n* `newAliases`: any new aliases added via camel-case expansion.\n* `configuration`: the configuration loaded from the `yargs` stanza in package.json.\n\n<a name=\"configuration\"></a>\n\n### Configuration\n\nThe yargs-parser applies several automated transformations on the keys provided\nin `args`. These features can be turned on and off using the `configuration` field\nof `opts`.\n\n```js\nvar parsed = parser(['--no-dice'], {\n  configuration: {\n    'boolean-negation': false\n  }\n})\n```\n\n### short option groups\n\n* default: `true`.\n* key: `short-option-groups`.\n\nShould a group of short-options be treated as boolean flags?\n\n```sh\nnode example.js -abc\n{ _: [], a: true, b: true, c: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -abc\n{ _: [], abc: true }\n```\n\n### camel-case expansion\n\n* default: `true`.\n* key: `camel-case-expansion`.\n\nShould hyphenated arguments be expanded into camel-case aliases?\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true, fooBar: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true }\n```\n\n### dot-notation\n\n* default: `true`\n* key: `dot-notation`\n\nShould keys that contain `.` be treated as objects?\n\n```sh\nnode example.js --foo.bar\n{ _: [], foo: { bar: true } }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo.bar\n{ _: [], \"foo.bar\": true }\n```\n\n### parse numbers\n\n* default: `false`\n* key: `parse-numbers`\n\nShould keys that look like numbers be treated as such?\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: 99.3 }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: \"99.3\" }\n```\n\n### boolean negation\n\n* default: `true`\n* key: `boolean-negation`\n\nShould variables prefixed with `--no` be treated as negations?\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --no-foo\n{ _: [], \"no-foo\": true }\n```\n\n### combine arrays\n\n* default: `false`\n* key: `combine-arrays`\n\nShould arrays be combined when provided by both command line arguments and\na configuration file.\n\n### duplicate arguments array\n\n* default: `true`\n* key: `duplicate-arguments-array`\n\nShould arguments be coerced into an array when duplicated:\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: [1, 2] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: 2 }\n```\n\n### flatten duplicate arrays\n\n* default: `true`\n* key: `flatten-duplicate-arrays`\n\nShould array arguments be coerced into a single array when duplicated:\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [1, 2, 3, 4] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [[1, 2], [3, 4]] }\n```\n\n### negation prefix\n\n* default: `no-`\n* key: `negation-prefix`\n\nThe prefix to use for negated boolean variables.\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if set to `quux`:_\n\n```sh\nnode example.js --quuxfoo\n{ _: [], foo: false }\n```\n\n### populate --\n\n* default: `false`.\n* key: `populate--`\n\nShould unparsed flags be stored in `--` or `_`.\n\n_If disabled:_\n\n```sh\nnode example.js a -b -- x y\n{ _: [ 'a', 'x', 'y' ], b: true }\n```\n\n_If enabled:_\n\n```sh\nnode example.js a -b -- x y\n{ _: [ 'a' ], '--': [ 'x', 'y' ], b: true }\n```\n\n### set placeholder key\n\n* default: `false`.\n* key: `set-placeholder-key`.\n\nShould a placeholder be added for keys not set via the corresponding CLI argument?\n\n_If disabled:_\n\n```sh\nnode example.js -a 1 -c 2\n{ _: [], a: 1, c: 2 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js -a 1 -c 2\n{ _: [], a: 1, b: undefined, c: 2 }\n```\n\n### halt at non-option\n\n* default: `false`.\n* key: `halt-at-non-option`.\n\nShould parsing stop at the first text argument? This is similar to how e.g. `ssh` parses its command line.\n\n_If disabled:_\n\n```sh\nnode example.js -a run b -x y\n{ _: [ 'run', 'b', 'y' ], a: true, x: true }\n```\n\n_If enabled:_\n\n```sh\nnode example.js -a run b -x y\n{ _: [ 'run', 'b', '-x', 'y' ], a: true }\n```\n\n## Special Thanks\n\nThe yargs project evolves from optimist and minimist. It owes its\nexistence to a lot of James Halliday's hard work. Thanks [substack](https://github.com/substack) **beep** **boop** \\o/\n\n## License\n\nISC\n","engine":{"node":">=6"},"readmeFilename":"README.md","gitHead":"3cb7ce250ee4be1de80b6d4cb51586bfeae54c96","_nodeVersion":"10.12.0","_npmVersion":"6.6.0","maintainers":[{"email":"ben@npmjs.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"}],"_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_13.0.0-candidate.0_1549140225376_0.7639099993697989"},"_hasShrinkwrap":false},"13.0.0":{"_id":"yargs-parser@13.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"13.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"test":"nyc mocha test/*.js","posttest":"standard","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^5.2.0","nyc":"^13.0.1","standard":"^12.0.1","standard-version":"^4.4.0"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"main":"index.js","dist":{"shasum":"3fc44f3e76a8bdb1cc3602e860108602e5ccde8b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-13.0.0.tgz"},"engine":{"node":">=6"},"gitHead":"1404f79dd9bfda5fbab3d4474e3132e1bfff31a7","_nodeVersion":"10.12.0","_npmVersion":"6.6.0","maintainers":[{"email":"ben@npmjs.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"}],"_npmUser":{"name":"bcoe","email":"ben@npmjs.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_13.0.0_1549143058131_0.7755253777302005"},"_hasShrinkwrap":false},"13.1.0":{"_id":"yargs-parser@13.1.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"13.1.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"test":"nyc mocha test/*.js","posttest":"standard","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^5.2.0","nyc":"^14.1.0","standard":"^12.0.1","standard-version":"^6.0.0"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"main":"index.js","dist":{"shasum":"7016b6dd03e28e1418a510e258be4bff5a31138f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-13.1.0.tgz"},"engine":{"node":">=6"},"gitHead":"69ddfedf03024ac0e9e45d0a18daa0964e4c1c34","_nodeVersion":"11.15.0","_npmVersion":"6.7.0","maintainers":[{"email":"ben@npmjs.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"}],"_npmUser":{"name":"bcoe","email":"bencoe@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_13.1.0_1557091985001_0.36882552076158537"},"_hasShrinkwrap":false},"13.1.1":{"_id":"yargs-parser@13.1.1","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"13.1.1","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"author":{"name":"Ben Coe","email":"ben@npmjs.com","url":""},"repository":{"url":"git@github.com:yargs/yargs-parser.git"},"license":"ISC","scripts":{"test":"nyc mocha test/*.js","posttest":"standard","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":null,"devDependencies":{"chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^5.2.0","nyc":"^14.1.0","standard":"^12.0.1","standard-version":"^6.0.0"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"d26058532aa06d365fe091f6a1fc06b2f7e5eca0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-13.1.1.tgz"},"engine":{"node":">=6"}},"13.1.2":{"_id":"yargs-parser@13.1.2","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"13.1.2","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"author":{"name":"Ben Coe","email":"ben@npmjs.com","url":""},"repository":{"url":"git@github.com:yargs/yargs-parser.git"},"license":"ISC","scripts":{"test":"nyc mocha test/*.js","posttest":"standard","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":null,"devDependencies":{"chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^5.2.0","nyc":"^14.1.0","standard":"^12.0.1","standard-version":"^6.0.0"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"130f09702ebaeef2650d54ce6e3e5706f7a4fb38","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-13.1.2.tgz"},"engine":{"node":">=6"}},"14.0.0":{"_id":"yargs-parser@14.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"14.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"test":"nyc mocha test/*.js","posttest":"standard","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^5.2.0","nyc":"^14.1.0","standard":"^12.0.1","standard-version":"^6.0.0"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"main":"index.js","dist":{"shasum":"42e25777b06718ec99eac2c3a98ad3de73b6818f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-14.0.0.tgz"},"engine":{"node":">=6"},"gitHead":"ac11361ab90204698499ca06e292fac47088971a","_nodeVersion":"12.9.1","_npmVersion":"6.10.2","maintainers":[{"email":"ben@npmjs.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"}],"_npmUser":{"name":"bcoe","email":"bencoe@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_14.0.0_1567798588617_0.6216679368978903"},"_hasShrinkwrap":false},"15.0.0":{"_id":"yargs-parser@15.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"15.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"test":"nyc mocha test/*.js","posttest":"standard","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^5.2.0","nyc":"^14.1.0","standard":"^12.0.1","standard-version":"^6.0.0"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"main":"index.js","dist":{"shasum":"cdd7a97490ec836195f59f3f4dbe5ea9e8f75f08","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-15.0.0.tgz"},"engine":{"node":">=6"},"gitHead":"eab0cb6511adcf8db9405307fc082493b4709bba","_nodeVersion":"12.11.1","_npmVersion":"6.11.3","maintainers":[{"email":"ben@npmjs.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"}],"_npmUser":{"name":"bcoe","email":"bencoe@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_15.0.0_1570406958777_0.6645281426519596"},"_hasShrinkwrap":false},"15.0.1":{"_id":"yargs-parser@15.0.1","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"15.0.1","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"test":"nyc mocha test/*.js","posttest":"standard","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^5.2.0","nyc":"^14.1.0","standard":"^12.0.1","standard-version":"^6.0.0"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"main":"index.js","dist":{"shasum":"54786af40b820dcb2fb8025b11b4d659d76323b3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-15.0.1.tgz"},"readme":"# yargs-parser\n\n[![Build Status](https://travis-ci.org/yargs/yargs-parser.svg)](https://travis-ci.org/yargs/yargs-parser)\n[![Coverage Status](https://coveralls.io/repos/yargs/yargs-parser/badge.svg?branch=)](https://coveralls.io/r/yargs/yargs-parser?branch=master)\n[![NPM version](https://img.shields.io/npm/v/yargs-parser.svg)](https://www.npmjs.com/package/yargs-parser)\n[![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version)\n\n\nThe mighty option parser used by [yargs](https://github.com/yargs/yargs).\n\nvisit the [yargs website](http://yargs.js.org/) for more examples, and thorough usage instructions.\n\n<img width=\"250\" src=\"https://raw.githubusercontent.com/yargs/yargs-parser/master/yargs-logo.png\">\n\n## Example\n\n```sh\nnpm i yargs-parser --save\n```\n\n```js\nvar argv = require('yargs-parser')(process.argv.slice(2))\nconsole.log(argv)\n```\n\n```sh\nnode example.js --foo=33 --bar hello\n{ _: [], foo: 33, bar: 'hello' }\n```\n\n_or parse a string!_\n\n```js\nvar argv = require('yargs-parser')('--foo=99 --bar=33')\nconsole.log(argv)\n```\n\n```sh\n{ _: [], foo: 99, bar: 33 }\n```\n\nConvert an array of mixed types before passing to `yargs-parser`:\n\n```js\nvar parse = require('yargs-parser')\nparse(['-f', 11, '--zoom', 55].join(' '))   // <-- array to string\nparse(['-f', 11, '--zoom', 55].map(String)) // <-- array of strings\n```\n\n## API\n\n### require('yargs-parser')(args, opts={})\n\nParses command line arguments returning a simple mapping of keys and values.\n\n**expects:**\n\n* `args`: a string or array of strings representing the options to parse.\n* `opts`: provide a set of hints indicating how `args` should be parsed:\n  * `opts.alias`: an object representing the set of aliases for a key: `{alias: {foo: ['f']}}`.\n  * `opts.array`: indicate that keys should be parsed as an array: `{array: ['foo', 'bar']}`.<br>\n    Indicate that keys should be parsed as an array and coerced to booleans / numbers:<br>\n    `{array: [{ key: 'foo', boolean: true }, {key: 'bar', number: true}]}`.\n  * `opts.boolean`: arguments should be parsed as booleans: `{boolean: ['x', 'y']}`.\n  * `opts.coerce`: provide a custom synchronous function that returns a coerced value from the argument provided\n    (or throws an error). For arrays the function is called only once for the entire array:<br>\n    `{coerce: {foo: function (arg) {return modifiedArg}}}`.\n  * `opts.config`: indicate a key that represents a path to a configuration file (this file will be loaded and parsed).\n  * `opts.configObjects`: configuration objects to parse, their properties will be set as arguments:<br>\n    `{configObjects: [{'x': 5, 'y': 33}, {'z': 44}]}`.\n  * `opts.configuration`: provide configuration options to the yargs-parser (see: [configuration](#configuration)).\n  * `opts.count`: indicate a key that should be used as a counter, e.g., `-vvv` = `{v: 3}`.\n  * `opts.default`: provide default values for keys: `{default: {x: 33, y: 'hello world!'}}`.\n  * `opts.envPrefix`: environment variables (`process.env`) with the prefix provided should be parsed.\n  * `opts.narg`: specify that a key requires `n` arguments: `{narg: {x: 2}}`.\n  * `opts.normalize`: `path.normalize()` will be applied to values set to this key.\n  * `opts.number`: keys should be treated as numbers.\n  * `opts.string`: keys should be treated as strings (even if they resemble a number `-x 33`).\n\n**returns:**\n\n* `obj`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n  * [optional] `--`:  an array with arguments after the end-of-options flag `--`.\n\n### require('yargs-parser').detailed(args, opts={})\n\nParses a command line string, returning detailed information required by the\nyargs engine.\n\n**expects:**\n\n* `args`: a string or array of strings representing options to parse.\n* `opts`: provide a set of hints indicating how `args`, inputs are identical to `require('yargs-parser')(args, opts={})`.\n\n**returns:**\n\n* `argv`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n* `error`: populated with an error object if an exception occurred during parsing.\n* `aliases`: the inferred list of aliases built by combining lists in `opts.alias`.\n* `newAliases`: any new aliases added via camel-case expansion.\n* `configuration`: the configuration loaded from the `yargs` stanza in package.json.\n\n<a name=\"configuration\"></a>\n\n### Configuration\n\nThe yargs-parser applies several automated transformations on the keys provided\nin `args`. These features can be turned on and off using the `configuration` field\nof `opts`.\n\n```js\nvar parsed = parser(['--no-dice'], {\n  configuration: {\n    'boolean-negation': false\n  }\n})\n```\n\n### short option groups\n\n* default: `true`.\n* key: `short-option-groups`.\n\nShould a group of short-options be treated as boolean flags?\n\n```sh\nnode example.js -abc\n{ _: [], a: true, b: true, c: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -abc\n{ _: [], abc: true }\n```\n\n### camel-case expansion\n\n* default: `true`.\n* key: `camel-case-expansion`.\n\nShould hyphenated arguments be expanded into camel-case aliases?\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true, fooBar: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true }\n```\n\n### dot-notation\n\n* default: `true`\n* key: `dot-notation`\n\nShould keys that contain `.` be treated as objects?\n\n```sh\nnode example.js --foo.bar\n{ _: [], foo: { bar: true } }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo.bar\n{ _: [], \"foo.bar\": true }\n```\n\n### parse numbers\n\n* default: `true`\n* key: `parse-numbers`\n\nShould keys that look like numbers be treated as such?\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: 99.3 }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: \"99.3\" }\n```\n\n### boolean negation\n\n* default: `true`\n* key: `boolean-negation`\n\nShould variables prefixed with `--no` be treated as negations?\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --no-foo\n{ _: [], \"no-foo\": true }\n```\n\n### combine arrays\n\n* default: `false`\n* key: `combine-arrays`\n\nShould arrays be combined when provided by both command line arguments and\na configuration file.\n\n### duplicate arguments array\n\n* default: `true`\n* key: `duplicate-arguments-array`\n\nShould arguments be coerced into an array when duplicated:\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: [1, 2] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: 2 }\n```\n\n### flatten duplicate arrays\n\n* default: `true`\n* key: `flatten-duplicate-arrays`\n\nShould array arguments be coerced into a single array when duplicated:\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [1, 2, 3, 4] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [[1, 2], [3, 4]] }\n```\n\n### negation prefix\n\n* default: `no-`\n* key: `negation-prefix`\n\nThe prefix to use for negated boolean variables.\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if set to `quux`:_\n\n```sh\nnode example.js --quuxfoo\n{ _: [], foo: false }\n```\n\n### populate --\n\n* default: `false`.\n* key: `populate--`\n\nShould unparsed flags be stored in `--` or `_`.\n\n_If disabled:_\n\n```sh\nnode example.js a -b -- x y\n{ _: [ 'a', 'x', 'y' ], b: true }\n```\n\n_If enabled:_\n\n```sh\nnode example.js a -b -- x y\n{ _: [ 'a' ], '--': [ 'x', 'y' ], b: true }\n```\n\n### set placeholder key\n\n* default: `false`.\n* key: `set-placeholder-key`.\n\nShould a placeholder be added for keys not set via the corresponding CLI argument?\n\n_If disabled:_\n\n```sh\nnode example.js -a 1 -c 2\n{ _: [], a: 1, c: 2 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js -a 1 -c 2\n{ _: [], a: 1, b: undefined, c: 2 }\n```\n\n### halt at non-option\n\n* default: `false`.\n* key: `halt-at-non-option`.\n\nShould parsing stop at the first positional argument? This is similar to how e.g. `ssh` parses its command line.\n\n_If disabled:_\n\n```sh\nnode example.js -a run b -x y\n{ _: [ 'b' ], a: 'run', x: 'y' }\n```\n\n_If enabled:_\n\n```sh\nnode example.js -a run b -x y\n{ _: [ 'b', '-x', 'y' ], a: 'run' }\n```\n\n### strip aliased\n\n* default: `false`\n* key: `strip-aliased`\n\nShould aliases be removed before returning results?\n\n_If disabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1, 'test-alias': 1, testAlias: 1 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1 }\n```\n\n### strip dashed\n\n* default: `false`\n* key: `strip-dashed`\n\nShould dashed keys be removed before returning results?  This option has no effect if\n`camel-case-expansion` is disabled.\n\n_If disabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], testField: 1 }\n```\n\n### unknown options as args\n\n* default: `false`\n* key: `unknown-options-as-args`\n\nShould unknown options be treated like regular arguments?  An unknown option is one that is not\nconfigured in `opts`.\n\n_If disabled_\n\n```sh\nnode example.js --unknown-option --known-option 2 --string-option --unknown-option2\n{ _: [], unknownOption: true, knownOption: 2, stringOption: '', unknownOption2: true }\n```\n\n_If enabled_\n\n```sh\nnode example.js --unknown-option --known-option 2 --string-option --unknown-option2\n{ _: ['--unknown-option'], knownOption: 2, stringOption: '--unknown-option2' }\n```\n\n## Special Thanks\n\nThe yargs project evolves from optimist and minimist. It owes its\nexistence to a lot of James Halliday's hard work. Thanks [substack](https://github.com/substack) **beep** **boop** \\o/\n\n## License\n\nISC\n","engine":{"node":">=6"},"readmeFilename":"README.md","gitHead":"c893d3072f7d31243b750b1d599b0826b8aaefa4","_nodeVersion":"13.10.1","_npmVersion":"6.13.7","maintainers":[{"email":"bencoe@gmail.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"},{"email":"bencoe+oss-bot@gmail.com","name":"oss-bot"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_15.0.1_1584133008538_0.9364694488660432"},"_hasShrinkwrap":false},"15.0.2":{"_id":"yargs-parser@15.0.2","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"15.0.2","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"test":"nyc mocha test/*.js","posttest":"standard","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^5.2.0","nyc":"^14.1.0","standard":"^12.0.1","standard-version":"^6.0.0"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"main":"index.js","dist":{"shasum":"7dcfd94904f2b1ce3053948ca809f7750f074e27","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-15.0.2.tgz"},"readme":"# yargs-parser\n\n[![Build Status](https://travis-ci.org/yargs/yargs-parser.svg)](https://travis-ci.org/yargs/yargs-parser)\n[![Coverage Status](https://coveralls.io/repos/yargs/yargs-parser/badge.svg?branch=)](https://coveralls.io/r/yargs/yargs-parser?branch=master)\n[![NPM version](https://img.shields.io/npm/v/yargs-parser.svg)](https://www.npmjs.com/package/yargs-parser)\n[![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version)\n\n\nThe mighty option parser used by [yargs](https://github.com/yargs/yargs).\n\nvisit the [yargs website](http://yargs.js.org/) for more examples, and thorough usage instructions.\n\n<img width=\"250\" src=\"https://raw.githubusercontent.com/yargs/yargs-parser/master/yargs-logo.png\">\n\n## Example\n\n```sh\nnpm i yargs-parser --save\n```\n\n```js\nvar argv = require('yargs-parser')(process.argv.slice(2))\nconsole.log(argv)\n```\n\n```sh\nnode example.js --foo=33 --bar hello\n{ _: [], foo: 33, bar: 'hello' }\n```\n\n_or parse a string!_\n\n```js\nvar argv = require('yargs-parser')('--foo=99 --bar=33')\nconsole.log(argv)\n```\n\n```sh\n{ _: [], foo: 99, bar: 33 }\n```\n\nConvert an array of mixed types before passing to `yargs-parser`:\n\n```js\nvar parse = require('yargs-parser')\nparse(['-f', 11, '--zoom', 55].join(' '))   // <-- array to string\nparse(['-f', 11, '--zoom', 55].map(String)) // <-- array of strings\n```\n\n## API\n\n### require('yargs-parser')(args, opts={})\n\nParses command line arguments returning a simple mapping of keys and values.\n\n**expects:**\n\n* `args`: a string or array of strings representing the options to parse.\n* `opts`: provide a set of hints indicating how `args` should be parsed:\n  * `opts.alias`: an object representing the set of aliases for a key: `{alias: {foo: ['f']}}`.\n  * `opts.array`: indicate that keys should be parsed as an array: `{array: ['foo', 'bar']}`.<br>\n    Indicate that keys should be parsed as an array and coerced to booleans / numbers:<br>\n    `{array: [{ key: 'foo', boolean: true }, {key: 'bar', number: true}]}`.\n  * `opts.boolean`: arguments should be parsed as booleans: `{boolean: ['x', 'y']}`.\n  * `opts.coerce`: provide a custom synchronous function that returns a coerced value from the argument provided\n    (or throws an error). For arrays the function is called only once for the entire array:<br>\n    `{coerce: {foo: function (arg) {return modifiedArg}}}`.\n  * `opts.config`: indicate a key that represents a path to a configuration file (this file will be loaded and parsed).\n  * `opts.configObjects`: configuration objects to parse, their properties will be set as arguments:<br>\n    `{configObjects: [{'x': 5, 'y': 33}, {'z': 44}]}`.\n  * `opts.configuration`: provide configuration options to the yargs-parser (see: [configuration](#configuration)).\n  * `opts.count`: indicate a key that should be used as a counter, e.g., `-vvv` = `{v: 3}`.\n  * `opts.default`: provide default values for keys: `{default: {x: 33, y: 'hello world!'}}`.\n  * `opts.envPrefix`: environment variables (`process.env`) with the prefix provided should be parsed.\n  * `opts.narg`: specify that a key requires `n` arguments: `{narg: {x: 2}}`.\n  * `opts.normalize`: `path.normalize()` will be applied to values set to this key.\n  * `opts.number`: keys should be treated as numbers.\n  * `opts.string`: keys should be treated as strings (even if they resemble a number `-x 33`).\n\n**returns:**\n\n* `obj`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n  * [optional] `--`:  an array with arguments after the end-of-options flag `--`.\n\n### require('yargs-parser').detailed(args, opts={})\n\nParses a command line string, returning detailed information required by the\nyargs engine.\n\n**expects:**\n\n* `args`: a string or array of strings representing options to parse.\n* `opts`: provide a set of hints indicating how `args`, inputs are identical to `require('yargs-parser')(args, opts={})`.\n\n**returns:**\n\n* `argv`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n* `error`: populated with an error object if an exception occurred during parsing.\n* `aliases`: the inferred list of aliases built by combining lists in `opts.alias`.\n* `newAliases`: any new aliases added via camel-case expansion.\n* `configuration`: the configuration loaded from the `yargs` stanza in package.json.\n\n<a name=\"configuration\"></a>\n\n### Configuration\n\nThe yargs-parser applies several automated transformations on the keys provided\nin `args`. These features can be turned on and off using the `configuration` field\nof `opts`.\n\n```js\nvar parsed = parser(['--no-dice'], {\n  configuration: {\n    'boolean-negation': false\n  }\n})\n```\n\n### short option groups\n\n* default: `true`.\n* key: `short-option-groups`.\n\nShould a group of short-options be treated as boolean flags?\n\n```sh\nnode example.js -abc\n{ _: [], a: true, b: true, c: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -abc\n{ _: [], abc: true }\n```\n\n### camel-case expansion\n\n* default: `true`.\n* key: `camel-case-expansion`.\n\nShould hyphenated arguments be expanded into camel-case aliases?\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true, fooBar: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true }\n```\n\n### dot-notation\n\n* default: `true`\n* key: `dot-notation`\n\nShould keys that contain `.` be treated as objects?\n\n```sh\nnode example.js --foo.bar\n{ _: [], foo: { bar: true } }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo.bar\n{ _: [], \"foo.bar\": true }\n```\n\n### parse numbers\n\n* default: `true`\n* key: `parse-numbers`\n\nShould keys that look like numbers be treated as such?\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: 99.3 }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: \"99.3\" }\n```\n\n### boolean negation\n\n* default: `true`\n* key: `boolean-negation`\n\nShould variables prefixed with `--no` be treated as negations?\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --no-foo\n{ _: [], \"no-foo\": true }\n```\n\n### combine arrays\n\n* default: `false`\n* key: `combine-arrays`\n\nShould arrays be combined when provided by both command line arguments and\na configuration file.\n\n### duplicate arguments array\n\n* default: `true`\n* key: `duplicate-arguments-array`\n\nShould arguments be coerced into an array when duplicated:\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: [1, 2] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: 2 }\n```\n\n### flatten duplicate arrays\n\n* default: `true`\n* key: `flatten-duplicate-arrays`\n\nShould array arguments be coerced into a single array when duplicated:\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [1, 2, 3, 4] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [[1, 2], [3, 4]] }\n```\n\n### negation prefix\n\n* default: `no-`\n* key: `negation-prefix`\n\nThe prefix to use for negated boolean variables.\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if set to `quux`:_\n\n```sh\nnode example.js --quuxfoo\n{ _: [], foo: false }\n```\n\n### populate --\n\n* default: `false`.\n* key: `populate--`\n\nShould unparsed flags be stored in `--` or `_`.\n\n_If disabled:_\n\n```sh\nnode example.js a -b -- x y\n{ _: [ 'a', 'x', 'y' ], b: true }\n```\n\n_If enabled:_\n\n```sh\nnode example.js a -b -- x y\n{ _: [ 'a' ], '--': [ 'x', 'y' ], b: true }\n```\n\n### set placeholder key\n\n* default: `false`.\n* key: `set-placeholder-key`.\n\nShould a placeholder be added for keys not set via the corresponding CLI argument?\n\n_If disabled:_\n\n```sh\nnode example.js -a 1 -c 2\n{ _: [], a: 1, c: 2 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js -a 1 -c 2\n{ _: [], a: 1, b: undefined, c: 2 }\n```\n\n### halt at non-option\n\n* default: `false`.\n* key: `halt-at-non-option`.\n\nShould parsing stop at the first positional argument? This is similar to how e.g. `ssh` parses its command line.\n\n_If disabled:_\n\n```sh\nnode example.js -a run b -x y\n{ _: [ 'b' ], a: 'run', x: 'y' }\n```\n\n_If enabled:_\n\n```sh\nnode example.js -a run b -x y\n{ _: [ 'b', '-x', 'y' ], a: 'run' }\n```\n\n### strip aliased\n\n* default: `false`\n* key: `strip-aliased`\n\nShould aliases be removed before returning results?\n\n_If disabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1, 'test-alias': 1, testAlias: 1 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1 }\n```\n\n### strip dashed\n\n* default: `false`\n* key: `strip-dashed`\n\nShould dashed keys be removed before returning results?  This option has no effect if\n`camel-case-expansion` is disabled.\n\n_If disabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], testField: 1 }\n```\n\n### unknown options as args\n\n* default: `false`\n* key: `unknown-options-as-args`\n\nShould unknown options be treated like regular arguments?  An unknown option is one that is not\nconfigured in `opts`.\n\n_If disabled_\n\n```sh\nnode example.js --unknown-option --known-option 2 --string-option --unknown-option2\n{ _: [], unknownOption: true, knownOption: 2, stringOption: '', unknownOption2: true }\n```\n\n_If enabled_\n\n```sh\nnode example.js --unknown-option --known-option 2 --string-option --unknown-option2\n{ _: ['--unknown-option'], knownOption: 2, stringOption: '--unknown-option2' }\n```\n\n## Special Thanks\n\nThe yargs project evolves from optimist and minimist. It owes its\nexistence to a lot of James Halliday's hard work. Thanks [substack](https://github.com/substack) **beep** **boop** \\o/\n\n## License\n\nISC\n","engine":{"node":">=6"},"readmeFilename":"README.md","gitHead":"49ea4ef042f7d9af78d7bb4090a5f37bff067bc3","_nodeVersion":"14.16.1","_npmVersion":"6.14.12","_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"maintainers":[{"name":"bcoe","email":"bencoe@gmail.com"},{"name":"nexdrew","email":"andrewbgoode@gmail.com"},{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_15.0.2_1624229552794_0.03604810751077081"},"_hasShrinkwrap":false},"15.0.3":{"_id":"yargs-parser@15.0.3","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"15.0.3","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"test":"nyc mocha test/*.js","posttest":"standard","coverage":"nyc report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^5.2.0","nyc":"^14.1.0","standard":"^12.0.1","standard-version":"^6.0.0"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"main":"index.js","dist":{"shasum":"316e263d5febe8b38eef61ac092b33dfcc9b1115","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-15.0.3.tgz"},"readme":"# yargs-parser\n\n[![Build Status](https://travis-ci.org/yargs/yargs-parser.svg)](https://travis-ci.org/yargs/yargs-parser)\n[![Coverage Status](https://coveralls.io/repos/yargs/yargs-parser/badge.svg?branch=)](https://coveralls.io/r/yargs/yargs-parser?branch=master)\n[![NPM version](https://img.shields.io/npm/v/yargs-parser.svg)](https://www.npmjs.com/package/yargs-parser)\n[![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version)\n\n\nThe mighty option parser used by [yargs](https://github.com/yargs/yargs).\n\nvisit the [yargs website](http://yargs.js.org/) for more examples, and thorough usage instructions.\n\n<img width=\"250\" src=\"https://raw.githubusercontent.com/yargs/yargs-parser/master/yargs-logo.png\">\n\n## Example\n\n```sh\nnpm i yargs-parser --save\n```\n\n```js\nvar argv = require('yargs-parser')(process.argv.slice(2))\nconsole.log(argv)\n```\n\n```sh\nnode example.js --foo=33 --bar hello\n{ _: [], foo: 33, bar: 'hello' }\n```\n\n_or parse a string!_\n\n```js\nvar argv = require('yargs-parser')('--foo=99 --bar=33')\nconsole.log(argv)\n```\n\n```sh\n{ _: [], foo: 99, bar: 33 }\n```\n\nConvert an array of mixed types before passing to `yargs-parser`:\n\n```js\nvar parse = require('yargs-parser')\nparse(['-f', 11, '--zoom', 55].join(' '))   // <-- array to string\nparse(['-f', 11, '--zoom', 55].map(String)) // <-- array of strings\n```\n\n## API\n\n### require('yargs-parser')(args, opts={})\n\nParses command line arguments returning a simple mapping of keys and values.\n\n**expects:**\n\n* `args`: a string or array of strings representing the options to parse.\n* `opts`: provide a set of hints indicating how `args` should be parsed:\n  * `opts.alias`: an object representing the set of aliases for a key: `{alias: {foo: ['f']}}`.\n  * `opts.array`: indicate that keys should be parsed as an array: `{array: ['foo', 'bar']}`.<br>\n    Indicate that keys should be parsed as an array and coerced to booleans / numbers:<br>\n    `{array: [{ key: 'foo', boolean: true }, {key: 'bar', number: true}]}`.\n  * `opts.boolean`: arguments should be parsed as booleans: `{boolean: ['x', 'y']}`.\n  * `opts.coerce`: provide a custom synchronous function that returns a coerced value from the argument provided\n    (or throws an error). For arrays the function is called only once for the entire array:<br>\n    `{coerce: {foo: function (arg) {return modifiedArg}}}`.\n  * `opts.config`: indicate a key that represents a path to a configuration file (this file will be loaded and parsed).\n  * `opts.configObjects`: configuration objects to parse, their properties will be set as arguments:<br>\n    `{configObjects: [{'x': 5, 'y': 33}, {'z': 44}]}`.\n  * `opts.configuration`: provide configuration options to the yargs-parser (see: [configuration](#configuration)).\n  * `opts.count`: indicate a key that should be used as a counter, e.g., `-vvv` = `{v: 3}`.\n  * `opts.default`: provide default values for keys: `{default: {x: 33, y: 'hello world!'}}`.\n  * `opts.envPrefix`: environment variables (`process.env`) with the prefix provided should be parsed.\n  * `opts.narg`: specify that a key requires `n` arguments: `{narg: {x: 2}}`.\n  * `opts.normalize`: `path.normalize()` will be applied to values set to this key.\n  * `opts.number`: keys should be treated as numbers.\n  * `opts.string`: keys should be treated as strings (even if they resemble a number `-x 33`).\n\n**returns:**\n\n* `obj`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n  * [optional] `--`:  an array with arguments after the end-of-options flag `--`.\n\n### require('yargs-parser').detailed(args, opts={})\n\nParses a command line string, returning detailed information required by the\nyargs engine.\n\n**expects:**\n\n* `args`: a string or array of strings representing options to parse.\n* `opts`: provide a set of hints indicating how `args`, inputs are identical to `require('yargs-parser')(args, opts={})`.\n\n**returns:**\n\n* `argv`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n* `error`: populated with an error object if an exception occurred during parsing.\n* `aliases`: the inferred list of aliases built by combining lists in `opts.alias`.\n* `newAliases`: any new aliases added via camel-case expansion.\n* `configuration`: the configuration loaded from the `yargs` stanza in package.json.\n\n<a name=\"configuration\"></a>\n\n### Configuration\n\nThe yargs-parser applies several automated transformations on the keys provided\nin `args`. These features can be turned on and off using the `configuration` field\nof `opts`.\n\n```js\nvar parsed = parser(['--no-dice'], {\n  configuration: {\n    'boolean-negation': false\n  }\n})\n```\n\n### short option groups\n\n* default: `true`.\n* key: `short-option-groups`.\n\nShould a group of short-options be treated as boolean flags?\n\n```sh\nnode example.js -abc\n{ _: [], a: true, b: true, c: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -abc\n{ _: [], abc: true }\n```\n\n### camel-case expansion\n\n* default: `true`.\n* key: `camel-case-expansion`.\n\nShould hyphenated arguments be expanded into camel-case aliases?\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true, fooBar: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true }\n```\n\n### dot-notation\n\n* default: `true`\n* key: `dot-notation`\n\nShould keys that contain `.` be treated as objects?\n\n```sh\nnode example.js --foo.bar\n{ _: [], foo: { bar: true } }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo.bar\n{ _: [], \"foo.bar\": true }\n```\n\n### parse numbers\n\n* default: `true`\n* key: `parse-numbers`\n\nShould keys that look like numbers be treated as such?\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: 99.3 }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: \"99.3\" }\n```\n\n### boolean negation\n\n* default: `true`\n* key: `boolean-negation`\n\nShould variables prefixed with `--no` be treated as negations?\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --no-foo\n{ _: [], \"no-foo\": true }\n```\n\n### combine arrays\n\n* default: `false`\n* key: `combine-arrays`\n\nShould arrays be combined when provided by both command line arguments and\na configuration file.\n\n### duplicate arguments array\n\n* default: `true`\n* key: `duplicate-arguments-array`\n\nShould arguments be coerced into an array when duplicated:\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: [1, 2] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: 2 }\n```\n\n### flatten duplicate arrays\n\n* default: `true`\n* key: `flatten-duplicate-arrays`\n\nShould array arguments be coerced into a single array when duplicated:\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [1, 2, 3, 4] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [[1, 2], [3, 4]] }\n```\n\n### negation prefix\n\n* default: `no-`\n* key: `negation-prefix`\n\nThe prefix to use for negated boolean variables.\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if set to `quux`:_\n\n```sh\nnode example.js --quuxfoo\n{ _: [], foo: false }\n```\n\n### populate --\n\n* default: `false`.\n* key: `populate--`\n\nShould unparsed flags be stored in `--` or `_`.\n\n_If disabled:_\n\n```sh\nnode example.js a -b -- x y\n{ _: [ 'a', 'x', 'y' ], b: true }\n```\n\n_If enabled:_\n\n```sh\nnode example.js a -b -- x y\n{ _: [ 'a' ], '--': [ 'x', 'y' ], b: true }\n```\n\n### set placeholder key\n\n* default: `false`.\n* key: `set-placeholder-key`.\n\nShould a placeholder be added for keys not set via the corresponding CLI argument?\n\n_If disabled:_\n\n```sh\nnode example.js -a 1 -c 2\n{ _: [], a: 1, c: 2 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js -a 1 -c 2\n{ _: [], a: 1, b: undefined, c: 2 }\n```\n\n### halt at non-option\n\n* default: `false`.\n* key: `halt-at-non-option`.\n\nShould parsing stop at the first positional argument? This is similar to how e.g. `ssh` parses its command line.\n\n_If disabled:_\n\n```sh\nnode example.js -a run b -x y\n{ _: [ 'b' ], a: 'run', x: 'y' }\n```\n\n_If enabled:_\n\n```sh\nnode example.js -a run b -x y\n{ _: [ 'b', '-x', 'y' ], a: 'run' }\n```\n\n### strip aliased\n\n* default: `false`\n* key: `strip-aliased`\n\nShould aliases be removed before returning results?\n\n_If disabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1, 'test-alias': 1, testAlias: 1 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1 }\n```\n\n### strip dashed\n\n* default: `false`\n* key: `strip-dashed`\n\nShould dashed keys be removed before returning results?  This option has no effect if\n`camel-case-expansion` is disabled.\n\n_If disabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], testField: 1 }\n```\n\n### unknown options as args\n\n* default: `false`\n* key: `unknown-options-as-args`\n\nShould unknown options be treated like regular arguments?  An unknown option is one that is not\nconfigured in `opts`.\n\n_If disabled_\n\n```sh\nnode example.js --unknown-option --known-option 2 --string-option --unknown-option2\n{ _: [], unknownOption: true, knownOption: 2, stringOption: '', unknownOption2: true }\n```\n\n_If enabled_\n\n```sh\nnode example.js --unknown-option --known-option 2 --string-option --unknown-option2\n{ _: ['--unknown-option'], knownOption: 2, stringOption: '--unknown-option2' }\n```\n\n## Special Thanks\n\nThe yargs project evolves from optimist and minimist. It owes its\nexistence to a lot of James Halliday's hard work. Thanks [substack](https://github.com/substack) **beep** **boop** \\o/\n\n## License\n\nISC\n","engine":{"node":">=6"},"readmeFilename":"README.md","gitHead":"50a7aeb43f3f723c74e043c355ef474ff7db644c","_nodeVersion":"14.16.1","_npmVersion":"6.14.12","_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"maintainers":[{"name":"bcoe","email":"bencoe@gmail.com"},{"name":"nexdrew","email":"andrewbgoode@gmail.com"},{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_15.0.3_1624229576730_0.869088214577121"},"_hasShrinkwrap":false},"16.0.0":{"_id":"yargs-parser@16.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"16.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"test":"c8 --reporter=text --reporter=html  mocha test/*.js","posttest":"standard","coverage":"c8 report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"c8":"^6.0.0","chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^5.2.0","standard":"^12.0.1","standard-version":"^6.0.0"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"main":"index.js","dist":{"shasum":"534baab6f1c1c0c80adc2f57d1bcd55117a56bb2","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-16.0.0.tgz"},"engine":{"node":">=6"},"gitHead":"212814fe5219d0033abffac90aecc908f2f399ec","_npmVersion":"6.4.1","_nodeVersion":"8.16.2","_npmUser":{"name":"bcoe","email":"bencoe@gmail.com"},"maintainers":[{"email":"ben@npmjs.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_16.0.0_1572144865121_0.8044309101457034"},"_hasShrinkwrap":false},"16.1.0":{"_id":"yargs-parser@16.1.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"16.1.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"test":"c8 --reporter=text --reporter=html  mocha test/*.js","posttest":"standard","coverage":"c8 report --reporter=text-lcov | coveralls","release":"standard-version"},"directories":{},"devDependencies":{"c8":"^6.0.0","chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^5.2.0","standard":"^12.0.1","standard-version":"^6.0.0"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"main":"index.js","dist":{"shasum":"73747d53ae187e7b8dbe333f95714c76ea00ecf1","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-16.1.0.tgz"},"engine":{"node":">=6"},"gitHead":"36d31b6666b634c056a04ab52b352b6077b30a56","_nodeVersion":"11.15.0","_npmVersion":"6.7.0","maintainers":[{"email":"ben@npmjs.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"}],"_npmUser":{"name":"bcoe","email":"bencoe@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_16.1.0_1572648065317_0.8458569388254156"},"_hasShrinkwrap":false},"17.0.0":{"_id":"yargs-parser@17.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"17.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"url":"git+ssh://git@github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"fix":"standard --fix","test":"c8 --reporter=text --reporter=html  mocha test/*.js","posttest":"standard","coverage":"c8 report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"c8":"^7.0.1","chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^7.0.0","standard":"^14.3.1"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"engines":{"node":">=6"},"main":"index.js","dist":{"shasum":"cb2586e6fd445b17ced264dd4a38c60bdb35b7ec","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-17.0.0.tgz"},"gitHead":"485d2817ba77aa1a930964d03b8ea4ddb265b686","_nodeVersion":"13.3.0","_npmVersion":"6.13.1","maintainers":[{"email":"ben@npmjs.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"}],"_npmUser":{"name":"bcoe","email":"bencoe@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_17.0.0_1581306731725_0.9270805280711054"},"_hasShrinkwrap":false},"17.0.1":{"_id":"yargs-parser@17.0.1","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"17.0.1","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"fix":"standard --fix","test":"c8 --reporter=text --reporter=html  mocha test/*.js","posttest":"standard","coverage":"c8 report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"c8":"^7.0.1","chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^7.0.0","standard":"^14.3.1"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"engines":{"node":">=6"},"main":"index.js","dist":{"shasum":"e1c421e9cf4ea30ff159e2580f94ece3bc492392","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-17.0.1.tgz"},"gitHead":"b0d65c62a6658b98f5c0947e95206b57dd56b808","_nodeVersion":"12.15.0","_npmVersion":"6.13.4","maintainers":[{"email":"ben@npmjs.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"}],"_npmUser":{"name":"bcoe","email":"bencoe@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_17.0.1_1583010207521_0.9968647433543869"},"_hasShrinkwrap":false},"17.1.0":{"_id":"yargs-parser@17.1.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"17.1.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"fix":"standard --fix","test":"c8 --reporter=text --reporter=html  mocha test/*.js","posttest":"standard","coverage":"c8 report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"c8":"^7.0.1","chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^7.0.0","standard":"^14.3.1"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"engines":{"node":">=6"},"main":"index.js","dist":{"shasum":"b95ff3201e98b89e86070f92bef636016a0b0766","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-17.1.0.tgz"},"_nodeVersion":"10.18.1","_npmVersion":"6.13.4","maintainers":[{"email":"ben@npmjs.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_17.1.0_1583026541794_0.7428620499821355"},"_hasShrinkwrap":false},"18.0.0":{"_id":"yargs-parser@18.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"18.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"fix":"standard --fix","test":"c8 --reporter=text --reporter=html  mocha test/*.js","posttest":"standard","coverage":"c8 report --reporter=text-lcov | coveralls"},"directories":{},"devDependencies":{"c8":"^7.0.1","chai":"^4.2.0","coveralls":"^3.0.2","mocha":"^7.0.0","standard":"^14.3.1"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"engines":{"node":">=6"},"main":"index.js","dist":{"shasum":"cb32a77e173f7ab758fe32b8a498b16433fc977e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-18.0.0.tgz"},"_nodeVersion":"10.18.1","_npmVersion":"6.13.4","maintainers":[{"email":"bencoe@gmail.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"},{"email":"bencoe+oss-bot@gmail.com","name":"oss-bot"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_18.0.0_1583128910795_0.8276999530541411"},"_hasShrinkwrap":false},"18.1.0":{"_id":"yargs-parser@18.1.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"18.1.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"fix":"standard --fix","test":"c8 --reporter=text --reporter=html  mocha test/*.js","posttest":"standard","coverage":"c8 report --check-coverage check-coverage --lines=100 --branches=97 --statements=100"},"directories":{},"devDependencies":{"c8":"^7.0.1","chai":"^4.2.0","mocha":"^7.0.0","standard":"^14.3.1"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"engines":{"node":">=6"},"main":"index.js","dist":{"shasum":"1b0ab1118ebd41f68bb30e729f4c83df36ae84c3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-18.1.0.tgz"},"_nodeVersion":"10.18.1","_npmVersion":"6.13.4","maintainers":[{"email":"bencoe@gmail.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"},{"email":"bencoe+oss-bot@gmail.com","name":"oss-bot"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_18.1.0_1583610184250_0.37246233287754427"},"_hasShrinkwrap":false},"18.1.1-beta.0":{"_id":"yargs-parser@18.1.1-beta.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"18.1.1-beta.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"fix":"standard --fix","test":"c8 --reporter=text --reporter=html  mocha test/*.js","posttest":"standard","coverage":"c8 report --check-coverage check-coverage --lines=100 --branches=97 --statements=100"},"directories":{},"devDependencies":{"c8":"^7.0.1","chai":"^4.2.0","mocha":"^7.0.0","standard":"^14.3.1"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"engines":{"node":">=6"},"main":"index.js","dist":{"shasum":"fd67039f77ffbd4bb1c928272d7138cd9282c52f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-18.1.1-beta.0.tgz"},"readme":"# yargs-parser\n\n[![Build Status](https://travis-ci.org/yargs/yargs-parser.svg)](https://travis-ci.org/yargs/yargs-parser)\n[![NPM version](https://img.shields.io/npm/v/yargs-parser.svg)](https://www.npmjs.com/package/yargs-parser)\n[![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version)\n\n\nThe mighty option parser used by [yargs](https://github.com/yargs/yargs).\n\nvisit the [yargs website](http://yargs.js.org/) for more examples, and thorough usage instructions.\n\n<img width=\"250\" src=\"https://raw.githubusercontent.com/yargs/yargs-parser/master/yargs-logo.png\">\n\n## Example\n\n```sh\nnpm i yargs-parser --save\n```\n\n```js\nvar argv = require('yargs-parser')(process.argv.slice(2))\nconsole.log(argv)\n```\n\n```sh\nnode example.js --foo=33 --bar hello\n{ _: [], foo: 33, bar: 'hello' }\n```\n\n_or parse a string!_\n\n```js\nvar argv = require('yargs-parser')('--foo=99 --bar=33')\nconsole.log(argv)\n```\n\n```sh\n{ _: [], foo: 99, bar: 33 }\n```\n\nConvert an array of mixed types before passing to `yargs-parser`:\n\n```js\nvar parse = require('yargs-parser')\nparse(['-f', 11, '--zoom', 55].join(' '))   // <-- array to string\nparse(['-f', 11, '--zoom', 55].map(String)) // <-- array of strings\n```\n\n## API\n\n### require('yargs-parser')(args, opts={})\n\nParses command line arguments returning a simple mapping of keys and values.\n\n**expects:**\n\n* `args`: a string or array of strings representing the options to parse.\n* `opts`: provide a set of hints indicating how `args` should be parsed:\n  * `opts.alias`: an object representing the set of aliases for a key: `{alias: {foo: ['f']}}`.\n  * `opts.array`: indicate that keys should be parsed as an array: `{array: ['foo', 'bar']}`.<br>\n    Indicate that keys should be parsed as an array and coerced to booleans / numbers:<br>\n    `{array: [{ key: 'foo', boolean: true }, {key: 'bar', number: true}]}`.\n  * `opts.boolean`: arguments should be parsed as booleans: `{boolean: ['x', 'y']}`.\n  * `opts.coerce`: provide a custom synchronous function that returns a coerced value from the argument provided\n    (or throws an error). For arrays the function is called only once for the entire array:<br>\n    `{coerce: {foo: function (arg) {return modifiedArg}}}`.\n  * `opts.config`: indicate a key that represents a path to a configuration file (this file will be loaded and parsed).\n  * `opts.configObjects`: configuration objects to parse, their properties will be set as arguments:<br>\n    `{configObjects: [{'x': 5, 'y': 33}, {'z': 44}]}`.\n  * `opts.configuration`: provide configuration options to the yargs-parser (see: [configuration](#configuration)).\n  * `opts.count`: indicate a key that should be used as a counter, e.g., `-vvv` = `{v: 3}`.\n  * `opts.default`: provide default values for keys: `{default: {x: 33, y: 'hello world!'}}`.\n  * `opts.envPrefix`: environment variables (`process.env`) with the prefix provided should be parsed.\n  * `opts.narg`: specify that a key requires `n` arguments: `{narg: {x: 2}}`.\n  * `opts.normalize`: `path.normalize()` will be applied to values set to this key.\n  * `opts.number`: keys should be treated as numbers.\n  * `opts.string`: keys should be treated as strings (even if they resemble a number `-x 33`).\n\n**returns:**\n\n* `obj`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n  * [optional] `--`:  an array with arguments after the end-of-options flag `--`.\n\n### require('yargs-parser').detailed(args, opts={})\n\nParses a command line string, returning detailed information required by the\nyargs engine.\n\n**expects:**\n\n* `args`: a string or array of strings representing options to parse.\n* `opts`: provide a set of hints indicating how `args`, inputs are identical to `require('yargs-parser')(args, opts={})`.\n\n**returns:**\n\n* `argv`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n  * [optional] `--`:  an array with arguments after the end-of-options flag `--`.\n* `error`: populated with an error object if an exception occurred during parsing.\n* `aliases`: the inferred list of aliases built by combining lists in `opts.alias`.\n* `newAliases`: any new aliases added via camel-case expansion:\n  * `boolean`: `{ fooBar: true }`\n* `defaulted`: any new argument created by `opts.default`, no aliases included.\n  * `boolean`: `{ foo: true }`\n* `configuration`: given by default settings and `opts.configuration`.\n\n<a name=\"configuration\"></a>\n\n### Configuration\n\nThe yargs-parser applies several automated transformations on the keys provided\nin `args`. These features can be turned on and off using the `configuration` field\nof `opts`.\n\n```js\nvar parsed = parser(['--no-dice'], {\n  configuration: {\n    'boolean-negation': false\n  }\n})\n```\n\n### short option groups\n\n* default: `true`.\n* key: `short-option-groups`.\n\nShould a group of short-options be treated as boolean flags?\n\n```sh\nnode example.js -abc\n{ _: [], a: true, b: true, c: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -abc\n{ _: [], abc: true }\n```\n\n### camel-case expansion\n\n* default: `true`.\n* key: `camel-case-expansion`.\n\nShould hyphenated arguments be expanded into camel-case aliases?\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true, fooBar: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true }\n```\n\n### dot-notation\n\n* default: `true`\n* key: `dot-notation`\n\nShould keys that contain `.` be treated as objects?\n\n```sh\nnode example.js --foo.bar\n{ _: [], foo: { bar: true } }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo.bar\n{ _: [], \"foo.bar\": true }\n```\n\n### parse numbers\n\n* default: `true`\n* key: `parse-numbers`\n\nShould keys that look like numbers be treated as such?\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: 99.3 }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: \"99.3\" }\n```\n\n### boolean negation\n\n* default: `true`\n* key: `boolean-negation`\n\nShould variables prefixed with `--no` be treated as negations?\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --no-foo\n{ _: [], \"no-foo\": true }\n```\n\n### combine arrays\n\n* default: `false`\n* key: `combine-arrays`\n\nShould arrays be combined when provided by both command line arguments and\na configuration file.\n\n### duplicate arguments array\n\n* default: `true`\n* key: `duplicate-arguments-array`\n\nShould arguments be coerced into an array when duplicated:\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: [1, 2] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: 2 }\n```\n\n### flatten duplicate arrays\n\n* default: `true`\n* key: `flatten-duplicate-arrays`\n\nShould array arguments be coerced into a single array when duplicated:\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [1, 2, 3, 4] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [[1, 2], [3, 4]] }\n```\n\n### greedy arrays\n\n* default: `true`\n* key: `greedy-arrays`\n\nShould arrays consume more than one positional argument following their flag.\n\n```sh\nnode example --arr 1 2\n{ _[], arr: [1, 2] }\n```\n\n_if disabled:_\n\n```sh\nnode example --arr 1 2\n{ _[2], arr: [1] }\n```\n\n**Note: in `v18.0.0` we are considering defaulting greedy arrays to `false`.**\n\n### nargs eats options\n\n* default: `false`\n* key: `nargs-eats-options`\n\nShould nargs consume dash options as well as positional arguments.\n\n### negation prefix\n\n* default: `no-`\n* key: `negation-prefix`\n\nThe prefix to use for negated boolean variables.\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if set to `quux`:_\n\n```sh\nnode example.js --quuxfoo\n{ _: [], foo: false }\n```\n\n### populate --\n\n* default: `false`.\n* key: `populate--`\n\nShould unparsed flags be stored in `--` or `_`.\n\n_If disabled:_\n\n```sh\nnode example.js a -b -- x y\n{ _: [ 'a', 'x', 'y' ], b: true }\n```\n\n_If enabled:_\n\n```sh\nnode example.js a -b -- x y\n{ _: [ 'a' ], '--': [ 'x', 'y' ], b: true }\n```\n\n### set placeholder key\n\n* default: `false`.\n* key: `set-placeholder-key`.\n\nShould a placeholder be added for keys not set via the corresponding CLI argument?\n\n_If disabled:_\n\n```sh\nnode example.js -a 1 -c 2\n{ _: [], a: 1, c: 2 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js -a 1 -c 2\n{ _: [], a: 1, b: undefined, c: 2 }\n```\n\n### halt at non-option\n\n* default: `false`.\n* key: `halt-at-non-option`.\n\nShould parsing stop at the first positional argument? This is similar to how e.g. `ssh` parses its command line.\n\n_If disabled:_\n\n```sh\nnode example.js -a run b -x y\n{ _: [ 'b' ], a: 'run', x: 'y' }\n```\n\n_If enabled:_\n\n```sh\nnode example.js -a run b -x y\n{ _: [ 'b', '-x', 'y' ], a: 'run' }\n```\n\n### strip aliased\n\n* default: `false`\n* key: `strip-aliased`\n\nShould aliases be removed before returning results?\n\n_If disabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1, 'test-alias': 1, testAlias: 1 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1 }\n```\n\n### strip dashed\n\n* default: `false`\n* key: `strip-dashed`\n\nShould dashed keys be removed before returning results?  This option has no effect if\n`camel-case-expansion` is disabled.\n\n_If disabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], testField: 1 }\n```\n\n### unknown options as args\n\n* default: `false`\n* key: `unknown-options-as-args`\n\nShould unknown options be treated like regular arguments?  An unknown option is one that is not\nconfigured in `opts`.\n\n_If disabled_\n\n```sh\nnode example.js --unknown-option --known-option 2 --string-option --unknown-option2\n{ _: [], unknownOption: true, knownOption: 2, stringOption: '', unknownOption2: true }\n```\n\n_If enabled_\n\n```sh\nnode example.js --unknown-option --known-option 2 --string-option --unknown-option2\n{ _: ['--unknown-option'], knownOption: 2, stringOption: '--unknown-option2' }\n```\n\n## Special Thanks\n\nThe yargs project evolves from optimist and minimist. It owes its\nexistence to a lot of James Halliday's hard work. Thanks [substack](https://github.com/substack) **beep** **boop** \\o/\n\n## License\n\nISC\n","readmeFilename":"README.md","gitHead":"366a9ae6a1ca4ebe0a90a55028e35d45247a8240","_nodeVersion":"13.10.1","_npmVersion":"6.13.7","maintainers":[{"email":"bencoe@gmail.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"},{"email":"bencoe+oss-bot@gmail.com","name":"oss-bot"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_18.1.1-beta.0_1584037211673_0.6470280159620365"},"_hasShrinkwrap":false},"18.1.1":{"_id":"yargs-parser@18.1.1","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"18.1.1","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"fix":"standard --fix","test":"c8 --reporter=text --reporter=html  mocha test/*.js","posttest":"standard","coverage":"c8 report --check-coverage check-coverage --lines=100 --branches=97 --statements=100"},"directories":{},"devDependencies":{"c8":"^7.0.1","chai":"^4.2.0","mocha":"^7.0.0","standard":"^14.3.1"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"engines":{"node":">=6"},"main":"index.js","dist":{"shasum":"bf7407b915427fc760fcbbccc6c82b4f0ffcbd37","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-18.1.1.tgz"},"_nodeVersion":"10.18.1","_npmVersion":"6.13.4","maintainers":[{"email":"bencoe@gmail.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"},{"email":"bencoe+oss-bot@gmail.com","name":"oss-bot"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_18.1.1_1584343188407_0.9606261345395488"},"_hasShrinkwrap":false},"18.1.2":{"_id":"yargs-parser@18.1.2","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"18.1.2","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"fix":"standard --fix","test":"c8 --reporter=text --reporter=html  mocha test/*.js","posttest":"standard","coverage":"c8 report --check-coverage check-coverage --lines=100 --branches=97 --statements=100"},"directories":{},"devDependencies":{"c8":"^7.0.1","chai":"^4.2.0","mocha":"^7.0.0","standard":"^14.3.1"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"engines":{"node":">=6"},"main":"index.js","dist":{"shasum":"2f482bea2136dbde0861683abea7756d30b504f1","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-18.1.2.tgz"},"_nodeVersion":"10.19.0","_npmVersion":"6.13.4","maintainers":[{"email":"bencoe@gmail.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"},{"email":"bencoe+oss-bot@gmail.com","name":"oss-bot"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_18.1.2_1585242868059_0.9371700418010991"},"_hasShrinkwrap":false},"18.1.3":{"_id":"yargs-parser@18.1.3","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"18.1.3","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"author":{"name":"Ben Coe","email":"ben@npmjs.com","url":""},"repository":{"type":"git","url":"https://github.com/yargs/yargs-parser.git"},"license":"ISC","scripts":{"fix":"standard --fix","test":"c8 --reporter=text --reporter=html  mocha test/*.js","posttest":"standard","coverage":"c8 report --check-coverage check-coverage --lines=100 --branches=97 --statements=100"},"directories":null,"devDependencies":{"c8":"^7.0.1","chai":"^4.2.0","mocha":"^7.0.0","standard":"^14.3.1"},"dependencies":{"camelcase":"^5.0.0","decamelize":"^1.2.0"},"engines":{"node":">=6"},"files":["lib","index.js"],"main":"index.js","dist":{"shasum":"be68c4975c6b2abf469236b0c870362fab09a7b0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-18.1.3.tgz"}},"19.0.0-beta.0":{"_id":"yargs-parser@19.0.0-beta.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"19.0.0-beta.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"fix":"standardx --fix ./*.ts && standardx --fix **/*.ts","pretest":"npm run compile -- -p tsconfig.test.json","test":"c8 --reporter=text --reporter=html mocha test/*.js","posttest":"npm run check","coverage":"c8 report --check-coverage","check":"standardx ./*.ts && standardx **/*.ts","compile":"rimraf build && tsc","prepare":"npm run compile"},"directories":{},"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^8.0.0","@types/node":"^10.0.3","@typescript-eslint/eslint-plugin":"^3.0.0","@typescript-eslint/parser":"^3.0.0","c8":"^7.1.2","chai":"^4.2.0","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^2.0.0-alpha.4","mocha":"^8.0.0","rimraf":"^3.0.2","standardx":"^5.0.0","typescript":"^3.7.0"},"dependencies":{"camelcase":"^6.0.0","decamelize":"^4.0.0"},"engines":{"node":">=10"},"main":"build/index.js","dist":{"shasum":"88826b3e6277ae168dc8525f2adac6cc3ef3a249","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-19.0.0-beta.0.tgz"},"readme":"# yargs-parser\n\n[![Build Status](https://travis-ci.org/yargs/yargs-parser.svg)](https://travis-ci.org/yargs/yargs-parser)\n[![NPM version](https://img.shields.io/npm/v/yargs-parser.svg)](https://www.npmjs.com/package/yargs-parser)\n[![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version)\n\n\nThe mighty option parser used by [yargs](https://github.com/yargs/yargs).\n\nvisit the [yargs website](http://yargs.js.org/) for more examples, and thorough usage instructions.\n\n<img width=\"250\" src=\"https://raw.githubusercontent.com/yargs/yargs-parser/master/yargs-logo.png\">\n\n## Example\n\n```sh\nnpm i yargs-parser --save\n```\n\n```js\nvar argv = require('yargs-parser')(process.argv.slice(2))\nconsole.log(argv)\n```\n\n```sh\nnode example.js --foo=33 --bar hello\n{ _: [], foo: 33, bar: 'hello' }\n```\n\n_or parse a string!_\n\n```js\nvar argv = require('yargs-parser')('--foo=99 --bar=33')\nconsole.log(argv)\n```\n\n```sh\n{ _: [], foo: 99, bar: 33 }\n```\n\nConvert an array of mixed types before passing to `yargs-parser`:\n\n```js\nvar parse = require('yargs-parser')\nparse(['-f', 11, '--zoom', 55].join(' '))   // <-- array to string\nparse(['-f', 11, '--zoom', 55].map(String)) // <-- array of strings\n```\n\n## API\n\n### require('yargs-parser')(args, opts={})\n\nParses command line arguments returning a simple mapping of keys and values.\n\n**expects:**\n\n* `args`: a string or array of strings representing the options to parse.\n* `opts`: provide a set of hints indicating how `args` should be parsed:\n  * `opts.alias`: an object representing the set of aliases for a key: `{alias: {foo: ['f']}}`.\n  * `opts.array`: indicate that keys should be parsed as an array: `{array: ['foo', 'bar']}`.<br>\n    Indicate that keys should be parsed as an array and coerced to booleans / numbers:<br>\n    `{array: [{ key: 'foo', boolean: true }, {key: 'bar', number: true}]}`.\n  * `opts.boolean`: arguments should be parsed as booleans: `{boolean: ['x', 'y']}`.\n  * `opts.coerce`: provide a custom synchronous function that returns a coerced value from the argument provided\n    (or throws an error). For arrays the function is called only once for the entire array:<br>\n    `{coerce: {foo: function (arg) {return modifiedArg}}}`.\n  * `opts.config`: indicate a key that represents a path to a configuration file (this file will be loaded and parsed).\n  * `opts.configObjects`: configuration objects to parse, their properties will be set as arguments:<br>\n    `{configObjects: [{'x': 5, 'y': 33}, {'z': 44}]}`.\n  * `opts.configuration`: provide configuration options to the yargs-parser (see: [configuration](#configuration)).\n  * `opts.count`: indicate a key that should be used as a counter, e.g., `-vvv` = `{v: 3}`.\n  * `opts.default`: provide default values for keys: `{default: {x: 33, y: 'hello world!'}}`.\n  * `opts.envPrefix`: environment variables (`process.env`) with the prefix provided should be parsed.\n  * `opts.narg`: specify that a key requires `n` arguments: `{narg: {x: 2}}`.\n  * `opts.normalize`: `path.normalize()` will be applied to values set to this key.\n  * `opts.number`: keys should be treated as numbers.\n  * `opts.string`: keys should be treated as strings (even if they resemble a number `-x 33`).\n\n**returns:**\n\n* `obj`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n  * [optional] `--`:  an array with arguments after the end-of-options flag `--`.\n\n### require('yargs-parser').detailed(args, opts={})\n\nParses a command line string, returning detailed information required by the\nyargs engine.\n\n**expects:**\n\n* `args`: a string or array of strings representing options to parse.\n* `opts`: provide a set of hints indicating how `args`, inputs are identical to `require('yargs-parser')(args, opts={})`.\n\n**returns:**\n\n* `argv`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n  * [optional] `--`:  an array with arguments after the end-of-options flag `--`.\n* `error`: populated with an error object if an exception occurred during parsing.\n* `aliases`: the inferred list of aliases built by combining lists in `opts.alias`.\n* `newAliases`: any new aliases added via camel-case expansion:\n  * `boolean`: `{ fooBar: true }`\n* `defaulted`: any new argument created by `opts.default`, no aliases included.\n  * `boolean`: `{ foo: true }`\n* `configuration`: given by default settings and `opts.configuration`.\n\n<a name=\"configuration\"></a>\n\n### Configuration\n\nThe yargs-parser applies several automated transformations on the keys provided\nin `args`. These features can be turned on and off using the `configuration` field\nof `opts`.\n\n```js\nvar parsed = parser(['--no-dice'], {\n  configuration: {\n    'boolean-negation': false\n  }\n})\n```\n\n### short option groups\n\n* default: `true`.\n* key: `short-option-groups`.\n\nShould a group of short-options be treated as boolean flags?\n\n```sh\nnode example.js -abc\n{ _: [], a: true, b: true, c: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -abc\n{ _: [], abc: true }\n```\n\n### camel-case expansion\n\n* default: `true`.\n* key: `camel-case-expansion`.\n\nShould hyphenated arguments be expanded into camel-case aliases?\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true, fooBar: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true }\n```\n\n### dot-notation\n\n* default: `true`\n* key: `dot-notation`\n\nShould keys that contain `.` be treated as objects?\n\n```sh\nnode example.js --foo.bar\n{ _: [], foo: { bar: true } }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo.bar\n{ _: [], \"foo.bar\": true }\n```\n\n### parse numbers\n\n* default: `true`\n* key: `parse-numbers`\n\nShould keys that look like numbers be treated as such?\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: 99.3 }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: \"99.3\" }\n```\n\n### boolean negation\n\n* default: `true`\n* key: `boolean-negation`\n\nShould variables prefixed with `--no` be treated as negations?\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --no-foo\n{ _: [], \"no-foo\": true }\n```\n\n### combine arrays\n\n* default: `false`\n* key: `combine-arrays`\n\nShould arrays be combined when provided by both command line arguments and\na configuration file.\n\n### duplicate arguments array\n\n* default: `true`\n* key: `duplicate-arguments-array`\n\nShould arguments be coerced into an array when duplicated:\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: [1, 2] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: 2 }\n```\n\n### flatten duplicate arrays\n\n* default: `true`\n* key: `flatten-duplicate-arrays`\n\nShould array arguments be coerced into a single array when duplicated:\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [1, 2, 3, 4] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [[1, 2], [3, 4]] }\n```\n\n### greedy arrays\n\n* default: `true`\n* key: `greedy-arrays`\n\nShould arrays consume more than one positional argument following their flag.\n\n```sh\nnode example --arr 1 2\n{ _[], arr: [1, 2] }\n```\n\n_if disabled:_\n\n```sh\nnode example --arr 1 2\n{ _[2], arr: [1] }\n```\n\n**Note: in `v18.0.0` we are considering defaulting greedy arrays to `false`.**\n\n### nargs eats options\n\n* default: `false`\n* key: `nargs-eats-options`\n\nShould nargs consume dash options as well as positional arguments.\n\n### negation prefix\n\n* default: `no-`\n* key: `negation-prefix`\n\nThe prefix to use for negated boolean variables.\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if set to `quux`:_\n\n```sh\nnode example.js --quuxfoo\n{ _: [], foo: false }\n```\n\n### populate --\n\n* default: `false`.\n* key: `populate--`\n\nShould unparsed flags be stored in `--` or `_`.\n\n_If disabled:_\n\n```sh\nnode example.js a -b -- x y\n{ _: [ 'a', 'x', 'y' ], b: true }\n```\n\n_If enabled:_\n\n```sh\nnode example.js a -b -- x y\n{ _: [ 'a' ], '--': [ 'x', 'y' ], b: true }\n```\n\n### set placeholder key\n\n* default: `false`.\n* key: `set-placeholder-key`.\n\nShould a placeholder be added for keys not set via the corresponding CLI argument?\n\n_If disabled:_\n\n```sh\nnode example.js -a 1 -c 2\n{ _: [], a: 1, c: 2 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js -a 1 -c 2\n{ _: [], a: 1, b: undefined, c: 2 }\n```\n\n### halt at non-option\n\n* default: `false`.\n* key: `halt-at-non-option`.\n\nShould parsing stop at the first positional argument? This is similar to how e.g. `ssh` parses its command line.\n\n_If disabled:_\n\n```sh\nnode example.js -a run b -x y\n{ _: [ 'b' ], a: 'run', x: 'y' }\n```\n\n_If enabled:_\n\n```sh\nnode example.js -a run b -x y\n{ _: [ 'b', '-x', 'y' ], a: 'run' }\n```\n\n### strip aliased\n\n* default: `false`\n* key: `strip-aliased`\n\nShould aliases be removed before returning results?\n\n_If disabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1, 'test-alias': 1, testAlias: 1 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1 }\n```\n\n### strip dashed\n\n* default: `false`\n* key: `strip-dashed`\n\nShould dashed keys be removed before returning results?  This option has no effect if\n`camel-case-expansion` is disabled.\n\n_If disabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], testField: 1 }\n```\n\n### unknown options as args\n\n* default: `false`\n* key: `unknown-options-as-args`\n\nShould unknown options be treated like regular arguments?  An unknown option is one that is not\nconfigured in `opts`.\n\n_If disabled_\n\n```sh\nnode example.js --unknown-option --known-option 2 --string-option --unknown-option2\n{ _: [], unknownOption: true, knownOption: 2, stringOption: '', unknownOption2: true }\n```\n\n_If enabled_\n\n```sh\nnode example.js --unknown-option --known-option 2 --string-option --unknown-option2\n{ _: ['--unknown-option'], knownOption: 2, stringOption: '--unknown-option2' }\n```\n\n## Supported Node.js Versions\n\nLibraries in this ecosystem make a best effort to track\n[Node.js' release schedule](https://nodejs.org/en/about/releases/). Here's [a\npost on why we think this is important](https://medium.com/the-node-js-collection/maintainers-should-consider-following-node-js-release-schedule-ab08ed4de71a).\n\n## Special Thanks\n\nThe yargs project evolves from optimist and minimist. It owes its\nexistence to a lot of James Halliday's hard work. Thanks [substack](https://github.com/substack) **beep** **boop** \\o/\n\n## License\n\nISC\n","standardx":{"ignore":["build","example.js"]},"readmeFilename":"README.md","_nodeVersion":"10.20.1","_npmVersion":"6.14.4","maintainers":[{"email":"bencoe@gmail.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"},{"email":"bencoe+oss-bot@gmail.com","name":"oss-bot"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_19.0.0-beta.0_1595116850495_0.1820343685833763"},"_hasShrinkwrap":false},"19.0.0-beta.1":{"_id":"yargs-parser@19.0.0-beta.1","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"19.0.0-beta.1","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"fix":"standardx --fix ./*.ts && standardx --fix **/*.ts","pretest":"npm run compile -- -p tsconfig.test.json","test":"c8 --reporter=text --reporter=html mocha test/*.js","posttest":"npm run check","coverage":"c8 report --check-coverage","check":"standardx ./*.ts && standardx **/*.ts","compile":"rimraf build && tsc","prepare":"npm run compile"},"directories":{},"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^8.0.0","@types/node":"^10.0.3","@typescript-eslint/eslint-plugin":"^3.0.0","@typescript-eslint/parser":"^3.0.0","c8":"^7.1.2","chai":"^4.2.0","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^2.0.0-alpha.4","mocha":"^8.0.0","rimraf":"^3.0.2","standardx":"^5.0.0","typescript":"^3.7.0"},"dependencies":{"camelcase":"^6.0.0","decamelize":"^4.0.0"},"engines":{"node":">=10"},"main":"build/index.js","dist":{"shasum":"f62e950d437550774e9a1a720841c7a39322f16a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-19.0.0-beta.1.tgz"},"readme":"# yargs-parser\n\n[![Build Status](https://travis-ci.org/yargs/yargs-parser.svg)](https://travis-ci.org/yargs/yargs-parser)\n[![NPM version](https://img.shields.io/npm/v/yargs-parser.svg)](https://www.npmjs.com/package/yargs-parser)\n[![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version)\n\n\nThe mighty option parser used by [yargs](https://github.com/yargs/yargs).\n\nvisit the [yargs website](http://yargs.js.org/) for more examples, and thorough usage instructions.\n\n<img width=\"250\" src=\"https://raw.githubusercontent.com/yargs/yargs-parser/master/yargs-logo.png\">\n\n## Example\n\n```sh\nnpm i yargs-parser --save\n```\n\n```js\nvar argv = require('yargs-parser')(process.argv.slice(2))\nconsole.log(argv)\n```\n\n```sh\nnode example.js --foo=33 --bar hello\n{ _: [], foo: 33, bar: 'hello' }\n```\n\n_or parse a string!_\n\n```js\nvar argv = require('yargs-parser')('--foo=99 --bar=33')\nconsole.log(argv)\n```\n\n```sh\n{ _: [], foo: 99, bar: 33 }\n```\n\nConvert an array of mixed types before passing to `yargs-parser`:\n\n```js\nvar parse = require('yargs-parser')\nparse(['-f', 11, '--zoom', 55].join(' '))   // <-- array to string\nparse(['-f', 11, '--zoom', 55].map(String)) // <-- array of strings\n```\n\n## API\n\n### require('yargs-parser')(args, opts={})\n\nParses command line arguments returning a simple mapping of keys and values.\n\n**expects:**\n\n* `args`: a string or array of strings representing the options to parse.\n* `opts`: provide a set of hints indicating how `args` should be parsed:\n  * `opts.alias`: an object representing the set of aliases for a key: `{alias: {foo: ['f']}}`.\n  * `opts.array`: indicate that keys should be parsed as an array: `{array: ['foo', 'bar']}`.<br>\n    Indicate that keys should be parsed as an array and coerced to booleans / numbers:<br>\n    `{array: [{ key: 'foo', boolean: true }, {key: 'bar', number: true}]}`.\n  * `opts.boolean`: arguments should be parsed as booleans: `{boolean: ['x', 'y']}`.\n  * `opts.coerce`: provide a custom synchronous function that returns a coerced value from the argument provided\n    (or throws an error). For arrays the function is called only once for the entire array:<br>\n    `{coerce: {foo: function (arg) {return modifiedArg}}}`.\n  * `opts.config`: indicate a key that represents a path to a configuration file (this file will be loaded and parsed).\n  * `opts.configObjects`: configuration objects to parse, their properties will be set as arguments:<br>\n    `{configObjects: [{'x': 5, 'y': 33}, {'z': 44}]}`.\n  * `opts.configuration`: provide configuration options to the yargs-parser (see: [configuration](#configuration)).\n  * `opts.count`: indicate a key that should be used as a counter, e.g., `-vvv` = `{v: 3}`.\n  * `opts.default`: provide default values for keys: `{default: {x: 33, y: 'hello world!'}}`.\n  * `opts.envPrefix`: environment variables (`process.env`) with the prefix provided should be parsed.\n  * `opts.narg`: specify that a key requires `n` arguments: `{narg: {x: 2}}`.\n  * `opts.normalize`: `path.normalize()` will be applied to values set to this key.\n  * `opts.number`: keys should be treated as numbers.\n  * `opts.string`: keys should be treated as strings (even if they resemble a number `-x 33`).\n\n**returns:**\n\n* `obj`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n  * [optional] `--`:  an array with arguments after the end-of-options flag `--`.\n\n### require('yargs-parser').detailed(args, opts={})\n\nParses a command line string, returning detailed information required by the\nyargs engine.\n\n**expects:**\n\n* `args`: a string or array of strings representing options to parse.\n* `opts`: provide a set of hints indicating how `args`, inputs are identical to `require('yargs-parser')(args, opts={})`.\n\n**returns:**\n\n* `argv`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n  * [optional] `--`:  an array with arguments after the end-of-options flag `--`.\n* `error`: populated with an error object if an exception occurred during parsing.\n* `aliases`: the inferred list of aliases built by combining lists in `opts.alias`.\n* `newAliases`: any new aliases added via camel-case expansion:\n  * `boolean`: `{ fooBar: true }`\n* `defaulted`: any new argument created by `opts.default`, no aliases included.\n  * `boolean`: `{ foo: true }`\n* `configuration`: given by default settings and `opts.configuration`.\n\n<a name=\"configuration\"></a>\n\n### Configuration\n\nThe yargs-parser applies several automated transformations on the keys provided\nin `args`. These features can be turned on and off using the `configuration` field\nof `opts`.\n\n```js\nvar parsed = parser(['--no-dice'], {\n  configuration: {\n    'boolean-negation': false\n  }\n})\n```\n\n### short option groups\n\n* default: `true`.\n* key: `short-option-groups`.\n\nShould a group of short-options be treated as boolean flags?\n\n```sh\nnode example.js -abc\n{ _: [], a: true, b: true, c: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -abc\n{ _: [], abc: true }\n```\n\n### camel-case expansion\n\n* default: `true`.\n* key: `camel-case-expansion`.\n\nShould hyphenated arguments be expanded into camel-case aliases?\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true, fooBar: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true }\n```\n\n### dot-notation\n\n* default: `true`\n* key: `dot-notation`\n\nShould keys that contain `.` be treated as objects?\n\n```sh\nnode example.js --foo.bar\n{ _: [], foo: { bar: true } }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo.bar\n{ _: [], \"foo.bar\": true }\n```\n\n### parse numbers\n\n* default: `true`\n* key: `parse-numbers`\n\nShould keys that look like numbers be treated as such?\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: 99.3 }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: \"99.3\" }\n```\n\n### boolean negation\n\n* default: `true`\n* key: `boolean-negation`\n\nShould variables prefixed with `--no` be treated as negations?\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --no-foo\n{ _: [], \"no-foo\": true }\n```\n\n### combine arrays\n\n* default: `false`\n* key: `combine-arrays`\n\nShould arrays be combined when provided by both command line arguments and\na configuration file.\n\n### duplicate arguments array\n\n* default: `true`\n* key: `duplicate-arguments-array`\n\nShould arguments be coerced into an array when duplicated:\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: [1, 2] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: 2 }\n```\n\n### flatten duplicate arrays\n\n* default: `true`\n* key: `flatten-duplicate-arrays`\n\nShould array arguments be coerced into a single array when duplicated:\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [1, 2, 3, 4] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [[1, 2], [3, 4]] }\n```\n\n### greedy arrays\n\n* default: `true`\n* key: `greedy-arrays`\n\nShould arrays consume more than one positional argument following their flag.\n\n```sh\nnode example --arr 1 2\n{ _[], arr: [1, 2] }\n```\n\n_if disabled:_\n\n```sh\nnode example --arr 1 2\n{ _[2], arr: [1] }\n```\n\n**Note: in `v18.0.0` we are considering defaulting greedy arrays to `false`.**\n\n### nargs eats options\n\n* default: `false`\n* key: `nargs-eats-options`\n\nShould nargs consume dash options as well as positional arguments.\n\n### negation prefix\n\n* default: `no-`\n* key: `negation-prefix`\n\nThe prefix to use for negated boolean variables.\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if set to `quux`:_\n\n```sh\nnode example.js --quuxfoo\n{ _: [], foo: false }\n```\n\n### populate --\n\n* default: `false`.\n* key: `populate--`\n\nShould unparsed flags be stored in `--` or `_`.\n\n_If disabled:_\n\n```sh\nnode example.js a -b -- x y\n{ _: [ 'a', 'x', 'y' ], b: true }\n```\n\n_If enabled:_\n\n```sh\nnode example.js a -b -- x y\n{ _: [ 'a' ], '--': [ 'x', 'y' ], b: true }\n```\n\n### set placeholder key\n\n* default: `false`.\n* key: `set-placeholder-key`.\n\nShould a placeholder be added for keys not set via the corresponding CLI argument?\n\n_If disabled:_\n\n```sh\nnode example.js -a 1 -c 2\n{ _: [], a: 1, c: 2 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js -a 1 -c 2\n{ _: [], a: 1, b: undefined, c: 2 }\n```\n\n### halt at non-option\n\n* default: `false`.\n* key: `halt-at-non-option`.\n\nShould parsing stop at the first positional argument? This is similar to how e.g. `ssh` parses its command line.\n\n_If disabled:_\n\n```sh\nnode example.js -a run b -x y\n{ _: [ 'b' ], a: 'run', x: 'y' }\n```\n\n_If enabled:_\n\n```sh\nnode example.js -a run b -x y\n{ _: [ 'b', '-x', 'y' ], a: 'run' }\n```\n\n### strip aliased\n\n* default: `false`\n* key: `strip-aliased`\n\nShould aliases be removed before returning results?\n\n_If disabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1, 'test-alias': 1, testAlias: 1 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1 }\n```\n\n### strip dashed\n\n* default: `false`\n* key: `strip-dashed`\n\nShould dashed keys be removed before returning results?  This option has no effect if\n`camel-case-expansion` is disabled.\n\n_If disabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], testField: 1 }\n```\n\n### unknown options as args\n\n* default: `false`\n* key: `unknown-options-as-args`\n\nShould unknown options be treated like regular arguments?  An unknown option is one that is not\nconfigured in `opts`.\n\n_If disabled_\n\n```sh\nnode example.js --unknown-option --known-option 2 --string-option --unknown-option2\n{ _: [], unknownOption: true, knownOption: 2, stringOption: '', unknownOption2: true }\n```\n\n_If enabled_\n\n```sh\nnode example.js --unknown-option --known-option 2 --string-option --unknown-option2\n{ _: ['--unknown-option'], knownOption: 2, stringOption: '--unknown-option2' }\n```\n\n## Supported Node.js Versions\n\nLibraries in this ecosystem make a best effort to track\n[Node.js' release schedule](https://nodejs.org/en/about/releases/). Here's [a\npost on why we think this is important](https://medium.com/the-node-js-collection/maintainers-should-consider-following-node-js-release-schedule-ab08ed4de71a).\n\n## Special Thanks\n\nThe yargs project evolves from optimist and minimist. It owes its\nexistence to a lot of James Halliday's hard work. Thanks [substack](https://github.com/substack) **beep** **boop** \\o/\n\n## License\n\nISC\n","standardx":{"ignore":["build","example.js"]},"readmeFilename":"README.md","_nodeVersion":"10.20.1","_npmVersion":"6.14.4","maintainers":[{"email":"bencoe@gmail.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"},{"email":"bencoe+oss-bot@gmail.com","name":"oss-bot"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_19.0.0-beta.1_1595125090951_0.6617361432774247"},"_hasShrinkwrap":false},"19.0.0-beta.2":{"_id":"yargs-parser@19.0.0-beta.2","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"19.0.0-beta.2","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","posttest":"npm run check","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","postbuild:cjs":"node scripts/replace-legacy-export.cjs","prepare":"npm run compile"},"directories":{},"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^8.0.0","@types/node":"^10.0.3","@typescript-eslint/eslint-plugin":"^3.0.0","@typescript-eslint/parser":"^3.0.0","@wessberg/rollup-plugin-ts":"^1.2.28","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^2.0.0-alpha.4","mocha":"^8.0.0","puppeteer":"^5.2.1","rimraf":"^3.0.2","rollup":"^2.22.1","serve":"^11.3.2","standardx":"^5.0.0","start-server-and-test":"^1.11.2","typescript":"^3.7.0"},"engines":{"node":">=10"},"main":"build/index.cjs","dist":{"shasum":"2fb2cd25ae344c9f4c899610b1ef42a5ef2496dd","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-19.0.0-beta.2.tgz"},"readme":"# yargs-parser\n\n[![Build Status](https://travis-ci.org/yargs/yargs-parser.svg)](https://travis-ci.org/yargs/yargs-parser)\n[![NPM version](https://img.shields.io/npm/v/yargs-parser.svg)](https://www.npmjs.com/package/yargs-parser)\n[![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version)\n\n\nThe mighty option parser used by [yargs](https://github.com/yargs/yargs).\n\nvisit the [yargs website](http://yargs.js.org/) for more examples, and thorough usage instructions.\n\n<img width=\"250\" src=\"https://raw.githubusercontent.com/yargs/yargs-parser/master/yargs-logo.png\">\n\n## Example\n\n```sh\nnpm i yargs-parser --save\n```\n\n```js\nvar argv = require('yargs-parser')(process.argv.slice(2))\nconsole.log(argv)\n```\n\n```sh\nnode example.js --foo=33 --bar hello\n{ _: [], foo: 33, bar: 'hello' }\n```\n\n_or parse a string!_\n\n```js\nvar argv = require('yargs-parser')('--foo=99 --bar=33')\nconsole.log(argv)\n```\n\n```sh\n{ _: [], foo: 99, bar: 33 }\n```\n\nConvert an array of mixed types before passing to `yargs-parser`:\n\n```js\nvar parse = require('yargs-parser')\nparse(['-f', 11, '--zoom', 55].join(' '))   // <-- array to string\nparse(['-f', 11, '--zoom', 55].map(String)) // <-- array of strings\n```\n\n## Deno Example\n\nAs of `v19` `yargs-parser` supports [Deno](https://github.com/denoland/deno):\n\n```typescript\nimport parser from \"https://github.com/yargs/yargs-parser/raw/deno/deno.ts\";\n\nconst argv = parser('--foo=99 --bar=9987930', {\n  string: ['bar']\n})\nconsole.log(argv)\n```\n\n## ESM Example\n\n\n\n## API\n\n### require('yargs-parser')(args, opts={})\n\nParses command line arguments returning a simple mapping of keys and values.\n\n**expects:**\n\n* `args`: a string or array of strings representing the options to parse.\n* `opts`: provide a set of hints indicating how `args` should be parsed:\n  * `opts.alias`: an object representing the set of aliases for a key: `{alias: {foo: ['f']}}`.\n  * `opts.array`: indicate that keys should be parsed as an array: `{array: ['foo', 'bar']}`.<br>\n    Indicate that keys should be parsed as an array and coerced to booleans / numbers:<br>\n    `{array: [{ key: 'foo', boolean: true }, {key: 'bar', number: true}]}`.\n  * `opts.boolean`: arguments should be parsed as booleans: `{boolean: ['x', 'y']}`.\n  * `opts.coerce`: provide a custom synchronous function that returns a coerced value from the argument provided\n    (or throws an error). For arrays the function is called only once for the entire array:<br>\n    `{coerce: {foo: function (arg) {return modifiedArg}}}`.\n  * `opts.config`: indicate a key that represents a path to a configuration file (this file will be loaded and parsed).\n  * `opts.configObjects`: configuration objects to parse, their properties will be set as arguments:<br>\n    `{configObjects: [{'x': 5, 'y': 33}, {'z': 44}]}`.\n  * `opts.configuration`: provide configuration options to the yargs-parser (see: [configuration](#configuration)).\n  * `opts.count`: indicate a key that should be used as a counter, e.g., `-vvv` = `{v: 3}`.\n  * `opts.default`: provide default values for keys: `{default: {x: 33, y: 'hello world!'}}`.\n  * `opts.envPrefix`: environment variables (`process.env`) with the prefix provided should be parsed.\n  * `opts.narg`: specify that a key requires `n` arguments: `{narg: {x: 2}}`.\n  * `opts.normalize`: `path.normalize()` will be applied to values set to this key.\n  * `opts.number`: keys should be treated as numbers.\n  * `opts.string`: keys should be treated as strings (even if they resemble a number `-x 33`).\n\n**returns:**\n\n* `obj`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n  * [optional] `--`:  an array with arguments after the end-of-options flag `--`.\n\n### require('yargs-parser').detailed(args, opts={})\n\nParses a command line string, returning detailed information required by the\nyargs engine.\n\n**expects:**\n\n* `args`: a string or array of strings representing options to parse.\n* `opts`: provide a set of hints indicating how `args`, inputs are identical to `require('yargs-parser')(args, opts={})`.\n\n**returns:**\n\n* `argv`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n  * [optional] `--`:  an array with arguments after the end-of-options flag `--`.\n* `error`: populated with an error object if an exception occurred during parsing.\n* `aliases`: the inferred list of aliases built by combining lists in `opts.alias`.\n* `newAliases`: any new aliases added via camel-case expansion:\n  * `boolean`: `{ fooBar: true }`\n* `defaulted`: any new argument created by `opts.default`, no aliases included.\n  * `boolean`: `{ foo: true }`\n* `configuration`: given by default settings and `opts.configuration`.\n\n<a name=\"configuration\"></a>\n\n### Configuration\n\nThe yargs-parser applies several automated transformations on the keys provided\nin `args`. These features can be turned on and off using the `configuration` field\nof `opts`.\n\n```js\nvar parsed = parser(['--no-dice'], {\n  configuration: {\n    'boolean-negation': false\n  }\n})\n```\n\n### short option groups\n\n* default: `true`.\n* key: `short-option-groups`.\n\nShould a group of short-options be treated as boolean flags?\n\n```sh\nnode example.js -abc\n{ _: [], a: true, b: true, c: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -abc\n{ _: [], abc: true }\n```\n\n### camel-case expansion\n\n* default: `true`.\n* key: `camel-case-expansion`.\n\nShould hyphenated arguments be expanded into camel-case aliases?\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true, fooBar: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true }\n```\n\n### dot-notation\n\n* default: `true`\n* key: `dot-notation`\n\nShould keys that contain `.` be treated as objects?\n\n```sh\nnode example.js --foo.bar\n{ _: [], foo: { bar: true } }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo.bar\n{ _: [], \"foo.bar\": true }\n```\n\n### parse numbers\n\n* default: `true`\n* key: `parse-numbers`\n\nShould keys that look like numbers be treated as such?\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: 99.3 }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: \"99.3\" }\n```\n\n### boolean negation\n\n* default: `true`\n* key: `boolean-negation`\n\nShould variables prefixed with `--no` be treated as negations?\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --no-foo\n{ _: [], \"no-foo\": true }\n```\n\n### combine arrays\n\n* default: `false`\n* key: `combine-arrays`\n\nShould arrays be combined when provided by both command line arguments and\na configuration file.\n\n### duplicate arguments array\n\n* default: `true`\n* key: `duplicate-arguments-array`\n\nShould arguments be coerced into an array when duplicated:\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: [1, 2] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: 2 }\n```\n\n### flatten duplicate arrays\n\n* default: `true`\n* key: `flatten-duplicate-arrays`\n\nShould array arguments be coerced into a single array when duplicated:\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [1, 2, 3, 4] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [[1, 2], [3, 4]] }\n```\n\n### greedy arrays\n\n* default: `true`\n* key: `greedy-arrays`\n\nShould arrays consume more than one positional argument following their flag.\n\n```sh\nnode example --arr 1 2\n{ _[], arr: [1, 2] }\n```\n\n_if disabled:_\n\n```sh\nnode example --arr 1 2\n{ _[2], arr: [1] }\n```\n\n**Note: in `v18.0.0` we are considering defaulting greedy arrays to `false`.**\n\n### nargs eats options\n\n* default: `false`\n* key: `nargs-eats-options`\n\nShould nargs consume dash options as well as positional arguments.\n\n### negation prefix\n\n* default: `no-`\n* key: `negation-prefix`\n\nThe prefix to use for negated boolean variables.\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if set to `quux`:_\n\n```sh\nnode example.js --quuxfoo\n{ _: [], foo: false }\n```\n\n### populate --\n\n* default: `false`.\n* key: `populate--`\n\nShould unparsed flags be stored in `--` or `_`.\n\n_If disabled:_\n\n```sh\nnode example.js a -b -- x y\n{ _: [ 'a', 'x', 'y' ], b: true }\n```\n\n_If enabled:_\n\n```sh\nnode example.js a -b -- x y\n{ _: [ 'a' ], '--': [ 'x', 'y' ], b: true }\n```\n\n### set placeholder key\n\n* default: `false`.\n* key: `set-placeholder-key`.\n\nShould a placeholder be added for keys not set via the corresponding CLI argument?\n\n_If disabled:_\n\n```sh\nnode example.js -a 1 -c 2\n{ _: [], a: 1, c: 2 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js -a 1 -c 2\n{ _: [], a: 1, b: undefined, c: 2 }\n```\n\n### halt at non-option\n\n* default: `false`.\n* key: `halt-at-non-option`.\n\nShould parsing stop at the first positional argument? This is similar to how e.g. `ssh` parses its command line.\n\n_If disabled:_\n\n```sh\nnode example.js -a run b -x y\n{ _: [ 'b' ], a: 'run', x: 'y' }\n```\n\n_If enabled:_\n\n```sh\nnode example.js -a run b -x y\n{ _: [ 'b', '-x', 'y' ], a: 'run' }\n```\n\n### strip aliased\n\n* default: `false`\n* key: `strip-aliased`\n\nShould aliases be removed before returning results?\n\n_If disabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1, 'test-alias': 1, testAlias: 1 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1 }\n```\n\n### strip dashed\n\n* default: `false`\n* key: `strip-dashed`\n\nShould dashed keys be removed before returning results?  This option has no effect if\n`camel-case-expansion` is disabled.\n\n_If disabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], testField: 1 }\n```\n\n### unknown options as args\n\n* default: `false`\n* key: `unknown-options-as-args`\n\nShould unknown options be treated like regular arguments?  An unknown option is one that is not\nconfigured in `opts`.\n\n_If disabled_\n\n```sh\nnode example.js --unknown-option --known-option 2 --string-option --unknown-option2\n{ _: [], unknownOption: true, knownOption: 2, stringOption: '', unknownOption2: true }\n```\n\n_If enabled_\n\n```sh\nnode example.js --unknown-option --known-option 2 --string-option --unknown-option2\n{ _: ['--unknown-option'], knownOption: 2, stringOption: '--unknown-option2' }\n```\n\n## Supported Node.js Versions\n\nLibraries in this ecosystem make a best effort to track\n[Node.js' release schedule](https://nodejs.org/en/about/releases/). Here's [a\npost on why we think this is important](https://medium.com/the-node-js-collection/maintainers-should-consider-following-node-js-release-schedule-ab08ed4de71a).\n\n## Special Thanks\n\nThe yargs project evolves from optimist and minimist. It owes its\nexistence to a lot of James Halliday's hard work. Thanks [substack](https://github.com/substack) **beep** **boop** \\o/\n\n## License\n\nISC\n","type":"module","module":"./build/lib/index.js","types":"./build/index.cjs.d.ts","standardx":{"ignore":["build"]},"readmeFilename":"README.md","gitHead":"6c2d6406e04c33b8c0086708c9f5245fdd3a6467","_nodeVersion":"12.18.2","_npmVersion":"6.14.5","maintainers":[{"email":"bencoe@gmail.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"},{"email":"bencoe+oss-bot@gmail.com","name":"oss-bot"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_19.0.0-beta.2_1596518663711_0.24804913162630826"},"_hasShrinkwrap":false},"19.0.0-beta.3":{"_id":"yargs-parser@19.0.0-beta.3","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"19.0.0-beta.3","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","posttest":"npm run check","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","postbuild:cjs":"node scripts/replace-legacy-export.cjs","prepare":"npm run compile"},"directories":{},"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^8.0.0","@types/node":"^10.0.3","@typescript-eslint/eslint-plugin":"^3.0.0","@typescript-eslint/parser":"^3.0.0","@wessberg/rollup-plugin-ts":"^1.2.28","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^2.0.0-alpha.4","mocha":"^8.0.0","puppeteer":"^5.2.1","rimraf":"^3.0.2","rollup":"^2.22.1","serve":"^11.3.2","standardx":"^5.0.0","start-server-and-test":"^1.11.2","typescript":"^3.7.0"},"engines":{"node":">=10"},"main":"build/index.cjs","dist":{"shasum":"549c9cf969266709cd512df1fa1e80fec5d17d92","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-19.0.0-beta.3.tgz"},"readme":"# yargs-parser\n\n[![Build Status](https://travis-ci.org/yargs/yargs-parser.svg)](https://travis-ci.org/yargs/yargs-parser)\n[![NPM version](https://img.shields.io/npm/v/yargs-parser.svg)](https://www.npmjs.com/package/yargs-parser)\n[![Standard Version](https://img.shields.io/badge/release-standard%20version-brightgreen.svg)](https://github.com/conventional-changelog/standard-version)\n\n\nThe mighty option parser used by [yargs](https://github.com/yargs/yargs).\n\nvisit the [yargs website](http://yargs.js.org/) for more examples, and thorough usage instructions.\n\n<img width=\"250\" src=\"https://raw.githubusercontent.com/yargs/yargs-parser/master/yargs-logo.png\">\n\n## Example\n\n```sh\nnpm i yargs-parser --save\n```\n\n```js\nconst argv = require('yargs-parser')(process.argv.slice(2))\nconsole.log(argv)\n```\n\n```sh\nnode example.js --foo=33 --bar hello\n{ _: [], foo: 33, bar: 'hello' }\n```\n\n_or parse a string!_\n\n```js\nconst argv = require('yargs-parser')('--foo=99 --bar=33')\nconsole.log(argv)\n```\n\n```sh\n{ _: [], foo: 99, bar: 33 }\n```\n\nConvert an array of mixed types before passing to `yargs-parser`:\n\n```js\nconst parse = require('yargs-parser')\nparse(['-f', 11, '--zoom', 55].join(' '))   // <-- array to string\nparse(['-f', 11, '--zoom', 55].map(String)) // <-- array of strings\n```\n\n## Deno Example\n\nAs of `v19` `yargs-parser` supports [Deno](https://github.com/denoland/deno):\n\n```typescript\nimport parser from \"https://deno.land/x/yargs_parser/deno.ts\";\n\nconst argv = parser('--foo=99 --bar=9987930', {\n  string: ['bar']\n})\nconsole.log(argv)\n```\n\n## ESM Example\n\nAs of `v19` `yargs-parser` supports ESM (_both in Node.js and in the browser_):\n\n**Node.js:**\n\n```js\nimport parser from 'yargs-parser'\n\nconst argv = parser('--foo=99 --bar=9987930', {\n  string: ['bar']\n})\nconsole.log(argv)\n```\n\n**Browsers:**\n\n```html\n<!doctype html>\n<body>\n  <script type=\"module\">\n    import parser from \"https://unpkg.com/yargs-parser@19.0.0/browser.js\";\n\n    const argv = parser('--foo=99 --bar=9987930', {\n      string: ['bar']\n    })\n    console.log(argv)\n  </script>\n</body>\n```\n\n## API\n\n### parser(args, opts={})\n\nParses command line arguments returning a simple mapping of keys and values.\n\n**expects:**\n\n* `args`: a string or array of strings representing the options to parse.\n* `opts`: provide a set of hints indicating how `args` should be parsed:\n  * `opts.alias`: an object representing the set of aliases for a key: `{alias: {foo: ['f']}}`.\n  * `opts.array`: indicate that keys should be parsed as an array: `{array: ['foo', 'bar']}`.<br>\n    Indicate that keys should be parsed as an array and coerced to booleans / numbers:<br>\n    `{array: [{ key: 'foo', boolean: true }, {key: 'bar', number: true}]}`.\n  * `opts.boolean`: arguments should be parsed as booleans: `{boolean: ['x', 'y']}`.\n  * `opts.coerce`: provide a custom synchronous function that returns a coerced value from the argument provided\n    (or throws an error). For arrays the function is called only once for the entire array:<br>\n    `{coerce: {foo: function (arg) {return modifiedArg}}}`.\n  * `opts.config`: indicate a key that represents a path to a configuration file (this file will be loaded and parsed).\n  * `opts.configObjects`: configuration objects to parse, their properties will be set as arguments:<br>\n    `{configObjects: [{'x': 5, 'y': 33}, {'z': 44}]}`.\n  * `opts.configuration`: provide configuration options to the yargs-parser (see: [configuration](#configuration)).\n  * `opts.count`: indicate a key that should be used as a counter, e.g., `-vvv` = `{v: 3}`.\n  * `opts.default`: provide default values for keys: `{default: {x: 33, y: 'hello world!'}}`.\n  * `opts.envPrefix`: environment variables (`process.env`) with the prefix provided should be parsed.\n  * `opts.narg`: specify that a key requires `n` arguments: `{narg: {x: 2}}`.\n  * `opts.normalize`: `path.normalize()` will be applied to values set to this key.\n  * `opts.number`: keys should be treated as numbers.\n  * `opts.string`: keys should be treated as strings (even if they resemble a number `-x 33`).\n\n**returns:**\n\n* `obj`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n  * [optional] `--`:  an array with arguments after the end-of-options flag `--`.\n\n### require('yargs-parser').detailed(args, opts={})\n\nParses a command line string, returning detailed information required by the\nyargs engine.\n\n**expects:**\n\n* `args`: a string or array of strings representing options to parse.\n* `opts`: provide a set of hints indicating how `args`, inputs are identical to `require('yargs-parser')(args, opts={})`.\n\n**returns:**\n\n* `argv`: an object representing the parsed value of `args`\n  * `key/value`: key value pairs for each argument and their aliases.\n  * `_`: an array representing the positional arguments.\n  * [optional] `--`:  an array with arguments after the end-of-options flag `--`.\n* `error`: populated with an error object if an exception occurred during parsing.\n* `aliases`: the inferred list of aliases built by combining lists in `opts.alias`.\n* `newAliases`: any new aliases added via camel-case expansion:\n  * `boolean`: `{ fooBar: true }`\n* `defaulted`: any new argument created by `opts.default`, no aliases included.\n  * `boolean`: `{ foo: true }`\n* `configuration`: given by default settings and `opts.configuration`.\n\n<a name=\"configuration\"></a>\n\n### Configuration\n\nThe yargs-parser applies several automated transformations on the keys provided\nin `args`. These features can be turned on and off using the `configuration` field\nof `opts`.\n\n```js\nvar parsed = parser(['--no-dice'], {\n  configuration: {\n    'boolean-negation': false\n  }\n})\n```\n\n### short option groups\n\n* default: `true`.\n* key: `short-option-groups`.\n\nShould a group of short-options be treated as boolean flags?\n\n```sh\nnode example.js -abc\n{ _: [], a: true, b: true, c: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -abc\n{ _: [], abc: true }\n```\n\n### camel-case expansion\n\n* default: `true`.\n* key: `camel-case-expansion`.\n\nShould hyphenated arguments be expanded into camel-case aliases?\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true, fooBar: true }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo-bar\n{ _: [], 'foo-bar': true }\n```\n\n### dot-notation\n\n* default: `true`\n* key: `dot-notation`\n\nShould keys that contain `.` be treated as objects?\n\n```sh\nnode example.js --foo.bar\n{ _: [], foo: { bar: true } }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo.bar\n{ _: [], \"foo.bar\": true }\n```\n\n### parse numbers\n\n* default: `true`\n* key: `parse-numbers`\n\nShould keys that look like numbers be treated as such?\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: 99.3 }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --foo=99.3\n{ _: [], foo: \"99.3\" }\n```\n\n### boolean negation\n\n* default: `true`\n* key: `boolean-negation`\n\nShould variables prefixed with `--no` be treated as negations?\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if disabled:_\n\n```sh\nnode example.js --no-foo\n{ _: [], \"no-foo\": true }\n```\n\n### combine arrays\n\n* default: `false`\n* key: `combine-arrays`\n\nShould arrays be combined when provided by both command line arguments and\na configuration file.\n\n### duplicate arguments array\n\n* default: `true`\n* key: `duplicate-arguments-array`\n\nShould arguments be coerced into an array when duplicated:\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: [1, 2] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 -x 2\n{ _: [], x: 2 }\n```\n\n### flatten duplicate arrays\n\n* default: `true`\n* key: `flatten-duplicate-arrays`\n\nShould array arguments be coerced into a single array when duplicated:\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [1, 2, 3, 4] }\n```\n\n_if disabled:_\n\n```sh\nnode example.js -x 1 2 -x 3 4\n{ _: [], x: [[1, 2], [3, 4]] }\n```\n\n### greedy arrays\n\n* default: `true`\n* key: `greedy-arrays`\n\nShould arrays consume more than one positional argument following their flag.\n\n```sh\nnode example --arr 1 2\n{ _[], arr: [1, 2] }\n```\n\n_if disabled:_\n\n```sh\nnode example --arr 1 2\n{ _[2], arr: [1] }\n```\n\n**Note: in `v18.0.0` we are considering defaulting greedy arrays to `false`.**\n\n### nargs eats options\n\n* default: `false`\n* key: `nargs-eats-options`\n\nShould nargs consume dash options as well as positional arguments.\n\n### negation prefix\n\n* default: `no-`\n* key: `negation-prefix`\n\nThe prefix to use for negated boolean variables.\n\n```sh\nnode example.js --no-foo\n{ _: [], foo: false }\n```\n\n_if set to `quux`:_\n\n```sh\nnode example.js --quuxfoo\n{ _: [], foo: false }\n```\n\n### populate --\n\n* default: `false`.\n* key: `populate--`\n\nShould unparsed flags be stored in `--` or `_`.\n\n_If disabled:_\n\n```sh\nnode example.js a -b -- x y\n{ _: [ 'a', 'x', 'y' ], b: true }\n```\n\n_If enabled:_\n\n```sh\nnode example.js a -b -- x y\n{ _: [ 'a' ], '--': [ 'x', 'y' ], b: true }\n```\n\n### set placeholder key\n\n* default: `false`.\n* key: `set-placeholder-key`.\n\nShould a placeholder be added for keys not set via the corresponding CLI argument?\n\n_If disabled:_\n\n```sh\nnode example.js -a 1 -c 2\n{ _: [], a: 1, c: 2 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js -a 1 -c 2\n{ _: [], a: 1, b: undefined, c: 2 }\n```\n\n### halt at non-option\n\n* default: `false`.\n* key: `halt-at-non-option`.\n\nShould parsing stop at the first positional argument? This is similar to how e.g. `ssh` parses its command line.\n\n_If disabled:_\n\n```sh\nnode example.js -a run b -x y\n{ _: [ 'b' ], a: 'run', x: 'y' }\n```\n\n_If enabled:_\n\n```sh\nnode example.js -a run b -x y\n{ _: [ 'b', '-x', 'y' ], a: 'run' }\n```\n\n### strip aliased\n\n* default: `false`\n* key: `strip-aliased`\n\nShould aliases be removed before returning results?\n\n_If disabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1, 'test-alias': 1, testAlias: 1 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1 }\n```\n\n### strip dashed\n\n* default: `false`\n* key: `strip-dashed`\n\nShould dashed keys be removed before returning results?  This option has no effect if\n`camel-case-expansion` is disabled.\n\n_If disabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], 'test-field': 1, testField: 1 }\n```\n\n_If enabled:_\n\n```sh\nnode example.js --test-field 1\n{ _: [], testField: 1 }\n```\n\n### unknown options as args\n\n* default: `false`\n* key: `unknown-options-as-args`\n\nShould unknown options be treated like regular arguments?  An unknown option is one that is not\nconfigured in `opts`.\n\n_If disabled_\n\n```sh\nnode example.js --unknown-option --known-option 2 --string-option --unknown-option2\n{ _: [], unknownOption: true, knownOption: 2, stringOption: '', unknownOption2: true }\n```\n\n_If enabled_\n\n```sh\nnode example.js --unknown-option --known-option 2 --string-option --unknown-option2\n{ _: ['--unknown-option'], knownOption: 2, stringOption: '--unknown-option2' }\n```\n\n## Supported Node.js Versions\n\nLibraries in this ecosystem make a best effort to track\n[Node.js' release schedule](https://nodejs.org/en/about/releases/). Here's [a\npost on why we think this is important](https://medium.com/the-node-js-collection/maintainers-should-consider-following-node-js-release-schedule-ab08ed4de71a).\n\n## Special Thanks\n\nThe yargs project evolves from optimist and minimist. It owes its\nexistence to a lot of James Halliday's hard work. Thanks [substack](https://github.com/substack) **beep** **boop** \\o/\n\n## License\n\nISC\n","type":"module","module":"./build/lib/index.js","types":"./build/index.cjs.d.ts","standardx":{"ignore":["build"]},"readmeFilename":"README.md","gitHead":"1a925d86b27f325dcf6e028f5990d7d420d071bb","_nodeVersion":"14.7.0","_npmVersion":"6.14.7","maintainers":[{"email":"bencoe@gmail.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"},{"email":"bencoe+oss-bot@gmail.com","name":"oss-bot"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_19.0.0-beta.3_1596687392232_0.5382567348196192"},"_hasShrinkwrap":false},"19.0.0":{"_id":"yargs-parser@19.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"19.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","posttest":"npm run check","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","postbuild:cjs":"node scripts/replace-legacy-export.cjs","prepare":"npm run compile"},"directories":{},"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^8.0.0","@types/node":"^10.0.3","@typescript-eslint/eslint-plugin":"^3.0.0","@typescript-eslint/parser":"^3.0.0","@wessberg/rollup-plugin-ts":"^1.2.28","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^2.0.0-alpha.4","mocha":"^8.0.0","puppeteer":"^5.2.1","rimraf":"^3.0.2","rollup":"^2.22.1","serve":"^11.3.2","standardx":"^5.0.0","start-server-and-test":"^1.11.2","typescript":"^3.7.0"},"engines":{"node":">=10"},"main":"build/index.cjs","dist":{"shasum":"41ca31398dd1ef8f7988970c5b493e2dc1e049b5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-19.0.0.tgz"},"type":"module","module":"./build/lib/index.js","types":"./build/index.cjs.d.ts","standardx":{"ignore":["build"]},"_nodeVersion":"10.20.1","_npmVersion":"6.14.4","maintainers":[{"email":"bencoe@gmail.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"},{"email":"bencoe+oss-bot@gmail.com","name":"oss-bot"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_19.0.0_1596946573647_0.45474221602457354"},"_hasShrinkwrap":false},"19.0.1":{"_id":"yargs-parser@19.0.1","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"19.0.1","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","posttest":"npm run check","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","postbuild:cjs":"node scripts/replace-legacy-export.cjs","prepare":"npm run compile"},"directories":{},"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^8.0.0","@types/node":"^10.0.3","@typescript-eslint/eslint-plugin":"^3.0.0","@typescript-eslint/parser":"^3.0.0","@wessberg/rollup-plugin-ts":"^1.2.28","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^2.0.0-alpha.4","mocha":"^8.0.0","puppeteer":"^5.2.1","rimraf":"^3.0.2","rollup":"^2.22.1","serve":"^11.3.2","standardx":"^5.0.0","start-server-and-test":"^1.11.2","typescript":"^3.7.0"},"engines":{"node":">=10"},"main":"build/index.cjs","dist":{"shasum":"34b444580905d0f67e89f31283d8dc1f8bd53d47","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-19.0.1.tgz"},"type":"module","module":"./build/lib/index.js","types":"./build/index.cjs.d.ts","standardx":{"ignore":["build"]},"_nodeVersion":"10.20.1","_npmVersion":"6.14.4","maintainers":[{"email":"bencoe@gmail.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"},{"email":"bencoe+oss-bot@gmail.com","name":"oss-bot"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_19.0.1_1596947259223_0.9111392300384109"},"_hasShrinkwrap":false},"19.0.4":{"_id":"yargs-parser@19.0.4","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"19.0.4","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","posttest":"npm run check","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","prepare":"npm run compile"},"directories":{},"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^8.0.0","@types/node":"^10.0.3","@typescript-eslint/eslint-plugin":"^3.0.0","@typescript-eslint/parser":"^3.0.0","@wessberg/rollup-plugin-ts":"^1.2.28","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^2.0.0-alpha.4","mocha":"^8.0.0","puppeteer":"^5.2.1","rimraf":"^3.0.2","rollup":"^2.22.1","rollup-plugin-cleanup":"^3.1.1","serve":"^11.3.2","standardx":"^5.0.0","start-server-and-test":"^1.11.2","ts-transform-default-export":"^1.0.2","typescript":"^4.0.0"},"engines":{"node":">=10"},"main":"build/index.cjs","dist":{"shasum":"99183a3a59268b205c6b04177f2a5bfb46e79ba7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-19.0.4.tgz"},"type":"module","module":"./build/lib/index.js","types":"./build/index.cjs.d.ts","standardx":{"ignore":["build"]},"gitHead":"a02860af8d2e254f6c6a5fc7e14a9ee871c8470b","_nodeVersion":"14.8.0","_npmVersion":"6.14.7","maintainers":[{"email":"bencoe@gmail.com","name":"bcoe"},{"email":"andrewbgoode@gmail.com","name":"nexdrew"},{"email":"bencoe+oss-bot@gmail.com","name":"oss-bot"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_19.0.4_1598506734640_0.34169996729973806"},"_hasShrinkwrap":false},"20.0.0":{"_id":"yargs-parser@20.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"20.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","posttest":"npm run check","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","prepare":"npm run compile"},"directories":{},"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^8.0.0","@types/node":"^10.0.3","@typescript-eslint/eslint-plugin":"^3.0.0","@typescript-eslint/parser":"^3.0.0","@wessberg/rollup-plugin-ts":"^1.2.28","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^2.0.0-alpha.4","mocha":"^8.0.0","puppeteer":"^5.2.1","rimraf":"^3.0.2","rollup":"^2.22.1","rollup-plugin-cleanup":"^3.1.1","serve":"^11.3.2","standardx":"^5.0.0","start-server-and-test":"^1.11.2","ts-transform-default-export":"^1.0.2","typescript":"^4.0.0"},"engines":{"node":">=10"},"main":"build/index.cjs","dist":{"shasum":"c65a1daaa977ad63cebdd52159147b789a4e19a9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-20.0.0.tgz"},"type":"module","module":"./build/lib/index.js","standardx":{"ignore":["build"]},"gitHead":"1639a00e4667a36a459d6c796e66ca04cc60274a","_nodeVersion":"14.9.0","_npmVersion":"6.14.8","maintainers":[{"name":"bcoe","email":"bencoe@gmail.com"},{"name":"nexdrew","email":"andrewbgoode@gmail.com"},{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_20.0.0_1599674016326_0.5179191473459579"},"_hasShrinkwrap":false},"20.1.0":{"_id":"yargs-parser@20.1.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"20.1.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","posttest":"npm run check","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","prepare":"npm run compile"},"directories":{},"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^8.0.0","@types/node":"^10.0.3","@typescript-eslint/eslint-plugin":"^3.0.0","@typescript-eslint/parser":"^3.0.0","@wessberg/rollup-plugin-ts":"^1.2.28","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^2.0.0-alpha.4","mocha":"^8.0.0","puppeteer":"^5.2.1","rimraf":"^3.0.2","rollup":"^2.22.1","rollup-plugin-cleanup":"^3.1.1","serve":"^11.3.2","standardx":"^5.0.0","start-server-and-test":"^1.11.2","ts-transform-default-export":"^1.0.2","typescript":"^4.0.0"},"engines":{"node":">=10"},"main":"build/index.cjs","dist":{"shasum":"9abade5095ac4391156496743e60d5ec9a5b486c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-20.1.0.tgz"},"type":"module","module":"./build/lib/index.js","standardx":{"ignore":["build"]},"gitHead":"4ef11c7a8b8ef0f0eae3a7873585849467bcfef2","_nodeVersion":"14.10.1","_npmVersion":"6.14.8","maintainers":[{"name":"bcoe","email":"bencoe@gmail.com"},{"name":"nexdrew","email":"andrewbgoode@gmail.com"},{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_20.1.0_1600576447371_0.7613555040774866"},"_hasShrinkwrap":false},"20.2.0":{"_id":"yargs-parser@20.2.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"20.2.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","posttest":"npm run check","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","prepare":"npm run compile"},"directories":{},"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^8.0.0","@types/node":"^10.0.3","@typescript-eslint/eslint-plugin":"^3.0.0","@typescript-eslint/parser":"^3.0.0","@wessberg/rollup-plugin-ts":"^1.2.28","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^2.0.0-alpha.4","mocha":"^8.0.0","puppeteer":"^5.2.1","rimraf":"^3.0.2","rollup":"^2.22.1","rollup-plugin-cleanup":"^3.1.1","serve":"^11.3.2","standardx":"^5.0.0","start-server-and-test":"^1.11.2","ts-transform-default-export":"^1.0.2","typescript":"^4.0.0"},"engines":{"node":">=10"},"main":"build/index.cjs","dist":{"shasum":"944791ca2be2e08ddadd3d87e9de4c6484338605","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-20.2.0.tgz"},"type":"module","module":"./build/lib/index.js","standardx":{"ignore":["build"]},"gitHead":"f0f5566b41b1ba75aad24517103a68a59b1db364","_nodeVersion":"14.10.1","_npmVersion":"6.14.8","maintainers":[{"name":"bcoe","email":"bencoe@gmail.com"},{"name":"nexdrew","email":"andrewbgoode@gmail.com"},{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_20.2.0_1600656848435_0.09022688866373763"},"_hasShrinkwrap":false},"20.2.1":{"_id":"yargs-parser@20.2.1","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"20.2.1","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","posttest":"npm run check","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","prepare":"npm run compile"},"directories":{},"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^8.0.0","@types/node":"^10.0.3","@typescript-eslint/eslint-plugin":"^3.0.0","@typescript-eslint/parser":"^3.0.0","@wessberg/rollup-plugin-ts":"^1.2.28","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^2.0.0-alpha.4","mocha":"^8.0.0","puppeteer":"^5.2.1","rimraf":"^3.0.2","rollup":"^2.22.1","rollup-plugin-cleanup":"^3.1.1","serve":"^11.3.2","standardx":"^5.0.0","start-server-and-test":"^1.11.2","ts-transform-default-export":"^1.0.2","typescript":"^4.0.0"},"engines":{"node":">=10"},"main":"build/index.cjs","dist":{"shasum":"28f3773c546cdd8a69ddae68116b48a5da328e77","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-20.2.1.tgz"},"type":"module","module":"./build/lib/index.js","standardx":{"ignore":["build"]},"gitHead":"0bbec4a3e6b79cc3163bbf3727cfe69eaa25e94b","_nodeVersion":"14.11.0","_npmVersion":"6.14.8","maintainers":[{"name":"bcoe","email":"bencoe@gmail.com"},{"name":"nexdrew","email":"andrewbgoode@gmail.com"},{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_20.2.1_1601576610954_0.2034961510597899"},"_hasShrinkwrap":false},"20.2.2":{"_id":"yargs-parser@20.2.2","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"20.2.2","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"author":{"name":"Ben Coe","email":"ben@npmjs.com","url":""},"repository":{"type":"git","url":"https://github.com/yargs/yargs-parser.git"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","posttest":"npm run check","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","prepare":"npm run compile"},"directories":null,"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^8.0.0","@types/node":"^10.0.3","@typescript-eslint/eslint-plugin":"^3.0.0","@typescript-eslint/parser":"^3.0.0","@wessberg/rollup-plugin-ts":"^1.2.28","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^3.0.0","mocha":"^8.0.0","puppeteer":"^5.2.1","rimraf":"^3.0.2","rollup":"^2.22.1","rollup-plugin-cleanup":"^3.1.1","serve":"^11.3.2","standardx":"^5.0.0","start-server-and-test":"^1.11.2","ts-transform-default-export":"^1.0.2","typescript":"^4.0.0"},"engines":{"node":">=10"},"files":["browser.js","build","!*.d.ts"],"main":"build/index.cjs","dist":{"shasum":"84562c6b1c41ccec2f13d346c7dd83f8d1a0dc70","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-20.2.2.tgz"},"type":"module","module":"./build/lib/index.js","standardx":{"ignore":["build"]}},"20.2.3":{"_id":"yargs-parser@20.2.3","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"20.2.3","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","posttest":"npm run check","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","prepare":"npm run compile"},"directories":{},"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^8.0.0","@types/node":"^10.0.3","@typescript-eslint/eslint-plugin":"^3.0.0","@typescript-eslint/parser":"^3.0.0","@wessberg/rollup-plugin-ts":"^1.2.28","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^3.0.0","mocha":"^8.0.0","puppeteer":"^5.2.1","rimraf":"^3.0.2","rollup":"^2.22.1","rollup-plugin-cleanup":"^3.1.1","serve":"^11.3.2","standardx":"^5.0.0","start-server-and-test":"^1.11.2","ts-transform-default-export":"^1.0.2","typescript":"^4.0.0"},"engines":{"node":">=10"},"main":"build/index.cjs","dist":{"shasum":"92419ba867b858c868acf8bae9bf74af0dd0ce26","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-20.2.3.tgz"},"type":"module","module":"./build/lib/index.js","standardx":{"ignore":["build"]},"gitHead":"03049080f34e3393b6329a8da0b301b23ff2e445","_nodeVersion":"14.13.1","_npmVersion":"6.14.8","maintainers":[{"name":"bcoe","email":"bencoe@gmail.com"},{"name":"nexdrew","email":"andrewbgoode@gmail.com"},{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"}],"_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_20.2.3_1602863115545_0.23707586160715777"},"_hasShrinkwrap":false},"20.2.4":{"_id":"yargs-parser@20.2.4","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"20.2.4","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"author":{"name":"Ben Coe","email":"ben@npmjs.com","url":""},"repository":{"type":"git","url":"https://github.com/yargs/yargs-parser.git"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","prepare":"npm run compile"},"directories":null,"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^8.0.0","@types/node":"^10.0.3","@typescript-eslint/eslint-plugin":"^3.10.1","@typescript-eslint/parser":"^3.10.1","@wessberg/rollup-plugin-ts":"^1.2.28","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^3.0.0","mocha":"^8.0.0","puppeteer":"^5.2.1","rimraf":"^3.0.2","rollup":"^2.22.1","rollup-plugin-cleanup":"^3.1.1","serve":"^11.3.2","standardx":"^7.0.0","start-server-and-test":"^1.11.2","ts-transform-default-export":"^1.0.2","typescript":"^4.0.0"},"engines":{"node":">=10"},"files":["browser.js","build","!*.d.ts"],"main":"build/index.cjs","dist":{"shasum":"b42890f14566796f85ae8e3a25290d205f154a54","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-20.2.4.tgz"},"type":"module","module":"./build/lib/index.js","standardx":{"ignore":["build"]}},"20.2.5":{"_id":"yargs-parser@20.2.5","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"20.2.5","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","prepare":"npm run compile"},"directories":{},"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^8.0.0","@types/node":"^10.0.3","@typescript-eslint/eslint-plugin":"^3.10.1","@typescript-eslint/parser":"^3.10.1","@wessberg/rollup-plugin-ts":"^1.2.28","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^3.0.0","mocha":"^8.0.0","puppeteer":"^5.2.1","rimraf":"^3.0.2","rollup":"^2.22.1","rollup-plugin-cleanup":"^3.1.1","serve":"^11.3.2","standardx":"^7.0.0","start-server-and-test":"^1.11.2","ts-transform-default-export":"^1.0.2","typescript":"^4.0.0"},"engines":{"node":">=10"},"main":"build/index.cjs","dist":{"shasum":"5d37729146d3f894f39fc94b6796f5b239513186","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-20.2.5.tgz"},"type":"module","module":"./build/lib/index.js","standardx":{"ignore":["build"]},"gitHead":"43d32af4f8864699cc1fe0228bd10d9efcfcdadd","_nodeVersion":"14.15.4","_npmVersion":"6.14.10","_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"maintainers":[{"name":"bcoe","email":"bencoe@gmail.com"},{"name":"nexdrew","email":"andrewbgoode@gmail.com"},{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_20.2.5_1613247194671_0.14218219037807622"},"_hasShrinkwrap":false},"20.2.6":{"_id":"yargs-parser@20.2.6","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"20.2.6","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","prepare":"npm run compile"},"directories":{},"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^8.0.0","@types/node":"^10.0.3","@typescript-eslint/eslint-plugin":"^3.10.1","@typescript-eslint/parser":"^3.10.1","@wessberg/rollup-plugin-ts":"^1.2.28","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^3.0.0","mocha":"^8.0.0","puppeteer":"^5.2.1","rimraf":"^3.0.2","rollup":"^2.22.1","rollup-plugin-cleanup":"^3.1.1","serve":"^11.3.2","standardx":"^7.0.0","start-server-and-test":"^1.11.2","ts-transform-default-export":"^1.0.2","typescript":"^4.0.0"},"engines":{"node":">=10"},"main":"build/index.cjs","dist":{"shasum":"69f920addf61aafc0b8b89002f5d66e28f2d8b20","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-20.2.6.tgz"},"type":"module","module":"./build/lib/index.js","standardx":{"ignore":["build"]},"gitHead":"735c6b34ec07e3c179b5b5e779d5e7e9fda93cc7","_nodeVersion":"14.15.5","_npmVersion":"6.14.11","_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"maintainers":[{"name":"bcoe","email":"bencoe@gmail.com"},{"name":"nexdrew","email":"andrewbgoode@gmail.com"},{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_20.2.6_1613962009905_0.9267543411262082"},"_hasShrinkwrap":false},"20.2.7":{"_id":"yargs-parser@20.2.7","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"20.2.7","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","prepare":"npm run compile"},"directories":{},"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^8.0.0","@types/node":"^10.0.3","@typescript-eslint/eslint-plugin":"^3.10.1","@typescript-eslint/parser":"^3.10.1","@wessberg/rollup-plugin-ts":"^1.2.28","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^3.0.0","mocha":"^8.0.0","puppeteer":"^8.0.0","rimraf":"^3.0.2","rollup":"^2.22.1","rollup-plugin-cleanup":"^3.1.1","serve":"^11.3.2","standardx":"^7.0.0","start-server-and-test":"^1.11.2","ts-transform-default-export":"^1.0.2","typescript":"^4.0.0"},"engines":{"node":">=10"},"main":"build/index.cjs","dist":{"shasum":"61df85c113edfb5a7a4e36eb8aa60ef423cbc90a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-20.2.7.tgz"},"type":"module","module":"./build/lib/index.js","standardx":{"ignore":["build"]},"gitHead":"a73f4356e5b994980d89c66222b4849c991ea754","_nodeVersion":"14.16.0","_npmVersion":"6.14.11","_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"maintainers":[{"name":"bcoe","email":"bencoe@gmail.com"},{"name":"nexdrew","email":"andrewbgoode@gmail.com"},{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_20.2.7_1615404829662_0.2738987988098238"},"_hasShrinkwrap":false},"20.2.9":{"_id":"yargs-parser@20.2.9","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"20.2.9","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"author":{"name":"Ben Coe","email":"ben@npmjs.com","url":""},"repository":{"type":"git","url":"https://github.com/yargs/yargs-parser.git"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","prepare":"npm run compile"},"directories":null,"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^8.0.0","@types/node":"^14.0.0","@typescript-eslint/eslint-plugin":"^3.10.1","@typescript-eslint/parser":"^3.10.1","@wessberg/rollup-plugin-ts":"^1.2.28","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^3.0.0","mocha":"^9.0.0","puppeteer":"^10.0.0","rimraf":"^3.0.2","rollup":"^2.22.1","rollup-plugin-cleanup":"^3.1.1","serve":"^12.0.0","standardx":"^7.0.0","start-server-and-test":"^1.11.2","ts-transform-default-export":"^1.0.2","typescript":"^4.0.0"},"engines":{"node":">=10"},"files":["browser.js","build","!*.d.ts"],"main":"build/index.cjs","dist":{"shasum":"2eb7dc3b0289718fc295f362753845c41a0c94ee","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-20.2.9.tgz"},"type":"module","module":"./build/lib/index.js","standardx":{"ignore":["build"]}},"21.0.0":{"_id":"yargs-parser@21.0.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"21.0.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:esm":"c8 --reporter=text --reporter=html mocha test/*.mjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","prepare":"npm run compile"},"directories":{},"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^9.0.0","@types/node":"^16.11.4","@typescript-eslint/eslint-plugin":"^3.10.1","@typescript-eslint/parser":"^3.10.1","@wessberg/rollup-plugin-ts":"^1.2.28","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^3.0.0","mocha":"^9.0.0","puppeteer":"^11.0.0","rimraf":"^3.0.2","rollup":"^2.22.1","rollup-plugin-cleanup":"^3.1.1","serve":"^13.0.0","standardx":"^7.0.0","start-server-and-test":"^1.11.2","ts-transform-default-export":"^1.0.2","typescript":"^4.0.0"},"engines":{"node":">=12"},"main":"build/index.cjs","dist":{"shasum":"a485d3966be4317426dd56bdb6a30131b281dc55","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-21.0.0.tgz"},"type":"module","module":"./build/lib/index.js","standardx":{"ignore":["build"]},"gitHead":"46a9f2fedd031bf8208f6f7bb824ecc0b665fff9","_nodeVersion":"14.18.1","_npmVersion":"6.14.15","_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"maintainers":[{"name":"bcoe","email":"bencoe@gmail.com"},{"name":"nexdrew","email":"andrewbgoode@gmail.com"},{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_21.0.0_1637030944005_0.9326063880576452"},"_hasShrinkwrap":false},"21.0.1":{"_id":"yargs-parser@21.0.1","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"21.0.1","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"author":{"name":"Ben Coe","email":"ben@npmjs.com","url":""},"repository":{"type":"git","url":"https://github.com/yargs/yargs-parser.git"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:esm":"c8 --reporter=text --reporter=html mocha test/*.mjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","prepare":"npm run compile"},"directories":null,"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^9.0.0","@types/node":"^16.11.4","@typescript-eslint/eslint-plugin":"^3.10.1","@typescript-eslint/parser":"^3.10.1","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^3.0.0","mocha":"^9.0.0","puppeteer":"^13.4.0","rimraf":"^3.0.2","rollup":"^2.22.1","rollup-plugin-cleanup":"^3.1.1","rollup-plugin-ts":"^2.0.5","serve":"^13.0.0","standardx":"^7.0.0","start-server-and-test":"^1.11.2","ts-transform-default-export":"^1.0.2","typescript":"^4.0.0"},"engines":{"node":">=12"},"files":["browser.js","build","!*.d.ts"],"main":"build/index.cjs","dist":{"shasum":"0267f286c877a4f0f728fceb6f8a3e4cb95c6e35","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-21.0.1.tgz"},"type":"module","module":"./build/lib/index.js","standardx":{"ignore":["build"]}},"21.1.0":{"_id":"yargs-parser@21.1.0","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"21.1.0","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"homepage":"https://github.com/yargs/yargs-parser#readme","author":{"name":"Ben Coe","email":"ben@npmjs.com"},"repository":{"type":"git","url":"git+https://github.com/yargs/yargs-parser.git"},"bugs":{"url":"https://github.com/yargs/yargs-parser/issues"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:esm":"c8 --reporter=text --reporter=html mocha test/*.mjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","prepare":"npm run compile"},"directories":{},"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^9.0.0","@types/node":"^16.11.4","@typescript-eslint/eslint-plugin":"^3.10.1","@typescript-eslint/parser":"^3.10.1","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^3.0.0","mocha":"^10.0.0","puppeteer":"^16.0.0","rimraf":"^3.0.2","rollup":"^2.22.1","rollup-plugin-cleanup":"^3.1.1","rollup-plugin-ts":"^3.0.0","serve":"^14.0.0","standardx":"^7.0.0","start-server-and-test":"^1.11.2","ts-transform-default-export":"^1.0.2","typescript":"^4.0.0"},"engines":{"node":">=12"},"main":"build/index.cjs","dist":{"shasum":"a11d06a3bf57f064e951aa3ef55fcf3a5705f876","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-21.1.0.tgz"},"type":"module","module":"./build/lib/index.js","standardx":{"ignore":["build"]},"gitHead":"20b352b3b874c1e1e306c798669ee2049b1994f5","_nodeVersion":"14.20.0","_npmVersion":"6.14.17","_npmUser":{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"},"maintainers":[{"name":"bcoe","email":"bencoe@gmail.com"},{"name":"nexdrew","email":"andrewbgoode@gmail.com"},{"name":"oss-bot","email":"bencoe+oss-bot@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/yargs-parser_21.1.0_1659554680488_0.4365370062091616"},"_hasShrinkwrap":false},"21.1.1":{"_id":"yargs-parser@21.1.1","name":"yargs-parser","description":"the mighty option parser used by yargs","version":"21.1.1","keywords":["argument","parser","yargs","command","cli","parsing","option","args","argument"],"author":{"name":"Ben Coe","email":"ben@npmjs.com","url":""},"repository":{"type":"git","url":"https://github.com/yargs/yargs-parser.git"},"license":"ISC","scripts":{"check":"standardx '**/*.ts' && standardx '**/*.js' && standardx '**/*.cjs'","fix":"standardx --fix '**/*.ts' && standardx --fix '**/*.js' && standardx --fix '**/*.cjs'","pretest":"rimraf build && tsc -p tsconfig.test.json && cross-env NODE_ENV=test npm run build:cjs","test":"c8 --reporter=text --reporter=html mocha test/*.cjs","test:esm":"c8 --reporter=text --reporter=html mocha test/*.mjs","test:browser":"start-server-and-test 'serve ./ -p 8080' http://127.0.0.1:8080/package.json 'node ./test/browser/yargs-test.cjs'","pretest:typescript":"npm run pretest","test:typescript":"c8 mocha ./build/test/typescript/*.js","coverage":"c8 report --check-coverage","precompile":"rimraf build","compile":"tsc","postcompile":"npm run build:cjs","build:cjs":"rollup -c","prepare":"npm run compile"},"directories":null,"devDependencies":{"@types/chai":"^4.2.11","@types/mocha":"^9.0.0","@types/node":"^16.11.4","@typescript-eslint/eslint-plugin":"^3.10.1","@typescript-eslint/parser":"^3.10.1","c8":"^7.3.0","chai":"^4.2.0","cross-env":"^7.0.2","eslint":"^7.0.0","eslint-plugin-import":"^2.20.1","eslint-plugin-node":"^11.0.0","gts":"^3.0.0","mocha":"^10.0.0","puppeteer":"^16.0.0","rimraf":"^3.0.2","rollup":"^2.22.1","rollup-plugin-cleanup":"^3.1.1","rollup-plugin-ts":"^3.0.2","serve":"^14.0.0","standardx":"^7.0.0","start-server-and-test":"^1.11.2","ts-transform-default-export":"^1.0.2","typescript":"^4.0.0"},"engines":{"node":">=12"},"files":["browser.js","build","!*.d.ts","!*.d.cts"],"main":"build/index.cjs","dist":{"shasum":"9096bceebf990d21bb31fa9516e0ede294a77d35","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/yargs-parser/-/yargs-parser-21.1.1.tgz"},"type":"module","module":"./build/lib/index.js","standardx":{"ignore":["build"]}}},"time":{"created":"2022-06-15T16:24:15Z","modified":"2022-11-21T18:12:21Z","1.0.0":"2022-06-15T16:24:15Z","1.1.0":"2022-06-15T16:24:15Z","1.1.1-alpha":"2022-06-15T16:24:15Z","1.1.1-alpha2":"2022-06-15T16:24:15Z","1.1.1-alpha3":"2022-06-15T16:24:15Z","2.0.0":"2022-06-15T16:24:15Z","2.1.0":"2022-06-15T16:24:15Z","2.1.1":"2022-06-15T16:24:15Z","2.1.2":"2022-06-15T16:24:15Z","2.2.0":"2022-06-15T16:24:15Z","2.4.0-next":"2022-06-15T16:24:15Z","2.4.0":"2022-06-15T16:24:15Z","2.4.1":"2022-06-15T16:24:15Z","3.1.0":"2022-06-15T16:24:15Z","3.2.0":"2022-06-15T16:24:15Z","4.0.0":"2022-06-15T16:24:15Z","4.0.1":"2022-06-15T16:24:15Z","4.0.2":"2022-06-15T16:24:15Z","4.1.0":"2022-06-15T16:24:15Z","4.2.0":"2022-06-15T16:24:15Z","4.2.1-candidate.0":"2022-06-15T16:24:15Z","4.2.1-candidate.1":"2022-06-15T16:24:15Z","4.2.1":"2022-06-15T16:24:15Z","5.0.0-security.0":"2022-06-15T16:24:15Z","5.0.0":"2022-06-15T16:33:44Z","5.0.1":"2022-07-06T18:03:57Z","6.0.0":"2022-06-15T16:24:15Z","6.0.1":"2022-06-15T16:24:15Z","7.0.0":"2022-06-15T16:34:31Z","8.0.0":"2022-06-15T16:24:15Z","8.1.0":"2022-06-15T16:24:15Z","9.0.0":"2022-06-15T16:24:15Z","9.0.1":"2022-06-15T16:24:15Z","9.0.2":"2022-06-15T16:24:15Z","10.0.0":"2022-06-15T16:24:15Z","10.1.0":"2022-06-15T16:34:29Z","11.0.0":"2022-06-15T16:24:15Z","11.1.0":"2022-06-15T16:24:15Z","11.1.1":"2022-08-22T21:32:20Z","12.0.0":"2022-06-15T16:24:15Z","13.0.0-candidate.0":"2022-06-15T16:24:15Z","13.0.0":"2022-06-15T16:24:15Z","13.1.0":"2022-06-15T16:24:15Z","13.1.1":"2022-06-15T16:34:31Z","13.1.2":"2022-08-22T21:30:53Z","14.0.0":"2022-06-15T16:24:15Z","15.0.0":"2022-06-15T16:24:15Z","15.0.1":"2022-06-15T16:24:15Z","15.0.2":"2022-06-15T16:24:15Z","15.0.3":"2022-06-15T16:24:15Z","16.0.0":"2022-06-15T16:24:15Z","16.1.0":"2022-06-15T16:24:15Z","17.0.0":"2022-06-15T16:24:15Z","17.0.1":"2022-06-15T16:24:15Z","17.1.0":"2022-06-15T16:24:15Z","18.0.0":"2022-06-15T16:24:15Z","18.1.0":"2022-06-15T16:24:15Z","18.1.1-beta.0":"2022-06-15T16:24:15Z","18.1.1":"2022-06-15T16:24:15Z","18.1.2":"2022-06-15T16:24:15Z","18.1.3":"2022-11-21T18:12:21Z","19.0.0-beta.0":"2022-06-15T16:24:15Z","19.0.0-beta.1":"2022-06-15T16:24:15Z","19.0.0-beta.2":"2022-06-15T16:24:15Z","19.0.0-beta.3":"2022-06-15T16:24:15Z","19.0.0":"2022-06-15T16:24:15Z","19.0.1":"2022-06-15T16:24:15Z","19.0.4":"2022-06-15T16:24:15Z","20.0.0":"2022-06-15T16:24:15Z","20.1.0":"2022-06-15T16:24:15Z","20.2.0":"2022-06-15T16:24:15Z","20.2.1":"2022-06-15T16:24:15Z","20.2.2":"2022-09-16T16:52:51Z","20.2.3":"2022-06-15T16:24:15Z","20.2.4":"2022-06-28T23:22:17Z","20.2.5":"2022-06-15T16:24:15Z","20.2.6":"2022-06-15T16:24:15Z","20.2.7":"2022-06-15T16:24:15Z","20.2.9":"2022-06-15T19:13:26Z","21.0.0":"2022-06-15T16:24:15Z","21.0.1":"2022-07-06T18:03:30Z","21.1.0":"2022-08-03T20:45:00Z","21.1.1":"2022-08-22T23:05:58Z"}}