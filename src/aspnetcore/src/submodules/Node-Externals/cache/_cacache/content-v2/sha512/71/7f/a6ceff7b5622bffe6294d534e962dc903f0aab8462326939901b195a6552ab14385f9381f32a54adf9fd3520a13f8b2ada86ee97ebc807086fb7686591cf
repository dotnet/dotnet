{"_id":"lru-cache","_rev":"5179018d-ac98-4554-8e60-dd9ac0e65ab8","name":"lru-cache","dist-tags":{"latest":"10.2.0","legacy":"4.1.5","v7.2-backport":"7.2.3","v7.1-backport":"7.1.3","v7.0-backport":"7.0.4","v7.3-backport":"7.3.3","v7.7-backport":"7.7.4","v7.6-backport":"7.6.1","v7.5-backport":"7.5.2","v7.4-backport":"7.4.5"},"versions":{"1.0.1":{"_id":"lru-cache@1.0.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"1.0.1","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"node lib/lru-cache.js"},"directories":{},"engines":{"node":"*"},"main":"lib/lru-cache","dist":{"shasum":"fbfcd2d6e2d8f4519be9826bca3cb70900ffcd4b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-1.0.1.tgz"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre"},"1.0.2":{"_id":"lru-cache@1.0.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"1.0.2","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"scripts":{"test":"node lib/lru-cache.js"},"directories":{},"engines":{"node":"*"},"main":"lib/lru-cache","dist":{"shasum":"04deae53134b6583567c849d868a2d10d5991bfd","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-1.0.2.tgz"},"_nodeSupported":true,"_npmVersion":"0.2.7-3","_nodeVersion":"v0.3.1-pre"},"1.0.3":{"_id":"lru-cache@1.0.3","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"1.0.3","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"scripts":{"test":"node lib/lru-cache.js"},"directories":{},"devDependencies":{},"dependencies":{},"engines":{"node":"*"},"main":"lib/lru-cache","dist":{"shasum":"ef2ba05194250bd4781dbe57b6064d7320e58b73","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-1.0.3.tgz"},"_npmJsonOpts":{"file":"/Users/isaacs/.npm/lru-cache/1.0.3/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_engineSupported":true,"_npmVersion":"1.0.15","_nodeVersion":"v0.5.2-pre","_defaultsLoaded":true},"1.0.4":{"_id":"lru-cache@1.0.4","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"1.0.4","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"scripts":{"test":"node lib/lru-cache.js"},"directories":{},"devDependencies":{},"dependencies":{},"engines":{"node":"*"},"main":"lib/lru-cache","dist":{"shasum":"dc2af9b3022fb7e17630ed7bdf6a1839b7b70291","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-1.0.4.tgz"},"licenses":[{"type":"MIT","url":"http://github.com/isaacs/node-lru-cache/raw/master/LICENSE"}],"_npmJsonOpts":{"file":"/Users/isaacs/.npm/lru-cache/1.0.4/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_engineSupported":true,"_npmVersion":"1.0.22","_nodeVersion":"v0.4.10-pre","_defaultsLoaded":true},"1.0.5":{"_id":"lru-cache@1.0.5","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"1.0.5","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test"},"directories":{},"devDependencies":{"tap":"0.1"},"dependencies":{},"engines":{"node":"*"},"main":"lib/lru-cache.js","dist":{"shasum":"62815a3bcb609c1c086e78e4c6a1c4c025267551","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-1.0.5.tgz"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.6-pre","_defaultsLoaded":true,"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"1.0.6":{"_id":"lru-cache@1.0.6","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"1.0.6","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test"},"directories":{},"devDependencies":{"tap":"0"},"dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"main":"lib/lru-cache.js","dist":{"shasum":"aa50f97047422ac72543bda177a9c9d018d98452","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-1.0.6.tgz"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.7.7-pre","_defaultsLoaded":true,"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"1.1.0":{"_id":"lru-cache@1.1.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"1.1.0","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"}],"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test"},"directories":{},"devDependencies":{"tap":""},"dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"main":"lib/lru-cache.js","dist":{"shasum":"8d4a68dc0ab1cd5a2f39352478c495e9dd33cb61","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-1.1.0.tgz"},"_npmUser":{"name":"isaacs","email":"i@izs.me"},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.7.8-pre","_defaultsLoaded":true,"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"1.1.1":{"_id":"lru-cache@1.1.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"1.1.1","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"}],"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test"},"directories":{},"devDependencies":{"tap":""},"main":"lib/lru-cache.js","dist":{"shasum":"d6f24f75c28c9ec1239ca206952689696ec11e62","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-1.1.1.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.0.0":{"_id":"lru-cache@2.0.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.0.0","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"}],"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test"},"directories":{},"devDependencies":{"tap":""},"main":"lib/lru-cache.js","dist":{"shasum":"0fc80ed1e8276dcce18a865bce8a56ba30b81ecf","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.0.0.tgz"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.0.1":{"_id":"lru-cache@2.0.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.0.1","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"}],"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test"},"directories":{},"devDependencies":{"tap":""},"main":"lib/lru-cache.js","dist":{"shasum":"6feae28419f7fc358a063a5b188d52d15538006a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.0.1.tgz"},"_npmVersion":"1.1.48","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.0.2":{"_id":"lru-cache@2.0.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.0.2","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test"},"directories":{},"devDependencies":{"tap":""},"main":"lib/lru-cache.js","dist":{"shasum":"c7e26bb69eabb8f6ee8242b3a569f5af7ee2fd3b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.0.2.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.0.3":{"_id":"lru-cache@2.0.3","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.0.3","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test"},"directories":{},"devDependencies":{"tap":""},"main":"lib/lru-cache.js","dist":{"shasum":"dc18834f4a2e2b45faab6170b69b74741ef3871a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.0.3.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.0.4":{"_id":"lru-cache@2.0.4","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.0.4","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test"},"directories":{},"devDependencies":{"tap":""},"main":"lib/lru-cache.js","dist":{"shasum":"b8b61ae09848385ec6768760e39c123e7e39568a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.0.4.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.1.0":{"_id":"lru-cache@2.1.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.1.0","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test"},"directories":{},"devDependencies":{"tap":""},"main":"lib/lru-cache.js","dist":{"shasum":"ea1baa0fc9146c586aee06bd2fc547ab480e2e3c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.1.0.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.2.0":{"_id":"lru-cache@2.2.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.2.0","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":""},"main":"lib/lru-cache.js","dist":{"shasum":"ec2bba603f4c5bb3e7a1bf62ce1c1dbc1d474e08","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.2.0.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.2.1":{"_id":"lru-cache@2.2.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.2.1","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":""},"main":"lib/lru-cache.js","dist":{"shasum":"dcc1de19e79242874a0e883d09bb1ce5c2bb58f4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.2.1.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.2.2":{"_id":"lru-cache@2.2.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.2.2","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":""},"main":"lib/lru-cache.js","dist":{"shasum":"62b95a10cc7f8d85f3737506fe82cdcf3fa04d4b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.2.2.tgz"},"_from":".","_npmVersion":"1.2.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.2.4":{"_id":"lru-cache@2.2.4","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.2.4","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"","weak":""},"main":"lib/lru-cache.js","dist":{"shasum":"6c658619becf14031d0d0b594b16042ce4dc063d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.2.4.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.3.0":{"_id":"lru-cache@2.3.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.3.0","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"","weak":""},"main":"lib/lru-cache.js","dist":{"shasum":"1cee12d5a9f28ed1ee37e9c332b8888e6b85412a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.3.0.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.3.1":{"_id":"lru-cache@2.3.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.3.1","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"contributors":[{"name":"Isaac Z. Schlueter","email":"i@izs.me"},{"name":"Carlos Brito Lage","email":"carlos@carloslage.net"},{"name":"Marko Mikulicic","email":"marko.mikulicic@isti.cnr.it"},{"name":"Trent Mick","email":"trentm@gmail.com"},{"name":"Kevin O'Hara","email":"kevinohara80@gmail.com"},{"name":"Marco Rogers","email":"marco.rogers@gmail.com"},{"name":"Jesse Dailey","email":"jesse.dailey@gmail.com"}],"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"","weak":""},"main":"lib/lru-cache.js","dist":{"shasum":"b3adf6b3d856e954e2c390e6cef22081245a53d6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.3.1.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.5.0":{"_id":"lru-cache@2.5.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.5.0","homepage":"https://github.com/isaacs/node-lru-cache","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"","weak":""},"main":"lib/lru-cache.js","dist":{"shasum":"d82388ae9c960becbea0c73bb9eb79b6c6ce9aeb","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.5.0.tgz"},"_from":".","_npmVersion":"1.3.15","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.5.1":{"_id":"lru-cache@2.5.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.5.1","homepage":"https://github.com/isaacs/node-lru-cache","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"","weak":""},"main":"lib/lru-cache.js","dist":{"shasum":"60b81048343cd901d529c97a7284810b4aa2ca03","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.5.1.tgz"},"gitHead":"355fb2d7acd89f08d400345ce2ca8cd27b672095","_from":".","_npmVersion":"2.7.6","_nodeVersion":"1.4.2","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.5.2":{"_id":"lru-cache@2.5.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.5.2","homepage":"https://github.com/isaacs/node-lru-cache","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"^0.7.1","weak":""},"main":"lib/lru-cache.js","dist":{"shasum":"1fddad938aae1263ce138680be1b3f591c0ab41c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.5.2.tgz"},"gitHead":"ec01cc48ac06ee07b2b56a219d5aa931f899b21b","_from":".","_npmVersion":"2.7.6","_nodeVersion":"1.4.2","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.6.0":{"_id":"lru-cache@2.6.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.6.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"^0.7.1","weak":""},"main":"lib/lru-cache.js","dist":{"shasum":"a26389f2e49a5586f42f3f00a430d4e8798b287f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.6.0.tgz"},"gitHead":"1763ce34f26d9d011191e7f1b3e39345d9c0851d","_from":".","_npmVersion":"2.8.1","_nodeVersion":"1.4.2","_npmUser":{"name":"isaacs","email":"isaacs@npmjs.com"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.6.1":{"_id":"lru-cache@2.6.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.6.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"^0.7.1","weak":""},"main":"lib/lru-cache.js","dist":{"shasum":"9933eff15453fae1d27096365143c724e85c6cbd","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.6.1.tgz"},"gitHead":"ff3dfd40e437fa619f09610f45d1ac523bbf27c9","_from":".","_npmVersion":"2.8.1","_nodeVersion":"1.4.2","_npmUser":{"name":"isaacs","email":"isaacs@npmjs.com"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.6.2":{"_id":"lru-cache@2.6.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.6.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"^0.7.1","weak":""},"main":"lib/lru-cache.js","dist":{"shasum":"77741638c6dc972e503dbe41dcb6bfdfba499a38","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.6.2.tgz"},"gitHead":"278d05fcc714636eeedb3959bca80c20c19a61df","_from":".","_npmVersion":"2.8.4","_nodeVersion":"1.4.2","_npmUser":{"name":"isaacs","email":"isaacs@npmjs.com"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.6.3":{"_id":"lru-cache@2.6.3","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.6.3","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"MIT (http://github.com/isaacs/node-lru-cache/raw/master/LICENSE)","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"^0.7.1","weak":""},"main":"lib/lru-cache.js","dist":{"shasum":"51ccd0b4fc0c843587d7a5709ce4d3b7629bedc5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.6.3.tgz"},"gitHead":"0654ce0b1f2d676a0cfc1f3001a097af9e7b0dfb","_from":".","_npmVersion":"2.10.0","_nodeVersion":"2.0.1","_npmUser":{"name":"isaacs","email":"isaacs@npmjs.com"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}]},"2.6.4":{"_id":"lru-cache@2.6.4","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.6.4","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"^0.7.1","weak":""},"main":"lib/lru-cache.js","dist":{"shasum":"2675190ccd1b0701ec2f652a4d0d3d400d76c0dd","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.6.4.tgz"},"gitHead":"aea58fc0a12714c6e1422963e7ebea66460ec39e","_from":".","_npmVersion":"2.10.0","_nodeVersion":"2.0.1","_npmUser":{"name":"isaacs","email":"isaacs@npmjs.com"},"maintainers":[{"name":"isaacs","email":"isaacs@npmjs.com"},{"name":"othiym23","email":"ogd@aoaioxxysz.net"}]},"2.6.5":{"_id":"lru-cache@2.6.5","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.6.5","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"^1.2.0","weak":""},"main":"lib/lru-cache.js","dist":{"shasum":"e56d6354148ede8d7707b58d143220fd08df0fd5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.6.5.tgz"},"gitHead":"7062a0c891bfb80a294be9217e4de0f882e75776","_from":".","_npmVersion":"3.0.0","_nodeVersion":"2.2.1","_npmUser":{"name":"isaacs","email":"isaacs@npmjs.com"},"maintainers":[{"name":"isaacs","email":"isaacs@npmjs.com"},{"name":"othiym23","email":"ogd@aoaioxxysz.net"}]},"2.7.0":{"_id":"lru-cache@2.7.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.7.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"^1.2.0","weak":""},"main":"lib/lru-cache.js","dist":{"shasum":"aaa376a4cd970f9cebf5ec1909566ec034f07ee6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.7.0.tgz"},"gitHead":"fc6ee93093f4e463e5946736d4c48adc013724d1","_from":".","_npmVersion":"3.3.2","_nodeVersion":"4.0.0","_npmUser":{"name":"isaacs","email":"isaacs@npmjs.com"},"maintainers":[{"name":"isaacs","email":"isaacs@npmjs.com"},{"name":"othiym23","email":"ogd@aoaioxxysz.net"}]},"2.7.1":{"_id":"lru-cache@2.7.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.7.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"^1.2.0","weak":""},"main":"lib/lru-cache.js","dist":{"shasum":"b665391c30582a2df9c2fbb31ed50193f93b604a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.7.1.tgz"},"gitHead":"7414f616267078264b5459a2f27533711487c018","_from":".","_npmVersion":"3.3.2","_nodeVersion":"4.0.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"isaacs@npmjs.com"},{"name":"othiym23","email":"ogd@aoaioxxysz.net"}]},"2.7.2":{"_id":"lru-cache@2.7.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.7.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"^1.2.0","weak":""},"main":"lib/lru-cache.js","dist":{"shasum":"73810d9a2da104d07519fdbaa3947895432c6b99","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.7.2.tgz"},"gitHead":"c70ccfdadc7063ea19e82db5a178469510cabad5","_from":".","_npmVersion":"3.3.2","_nodeVersion":"4.0.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"isaacs@npmjs.com"},{"name":"othiym23","email":"ogd@aoaioxxysz.net"}]},"2.7.3":{"_id":"lru-cache@2.7.3","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"2.7.3","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"^1.2.0","weak":""},"main":"lib/lru-cache.js","dist":{"shasum":"6d4524e8b955f95d4f5b58851ce21dd72fb4e952","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-2.7.3.tgz"},"gitHead":"292048199f6d28b77fbe584279a1898e25e4c714","_from":".","_npmVersion":"3.3.2","_nodeVersion":"4.0.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"isaacs@npmjs.com"},{"name":"othiym23","email":"ogd@aoaioxxysz.net"}]},"3.0.0":{"_id":"lru-cache@3.0.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"3.0.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"^1.2.0","weak":""},"dependencies":{"pseudomap":"^1.0.1"},"main":"lib/lru-cache.js","dist":{"shasum":"65704ca44b10718bc401ba7e0c1cfb5b69422d5c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-3.0.0.tgz"},"gitHead":"487ab824ec8515add9f4dc78ec12b77ea0b51d0d","_from":".","_npmVersion":"3.3.2","_nodeVersion":"4.0.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"isaacs@npmjs.com"},{"name":"othiym23","email":"ogd@aoaioxxysz.net"}]},"3.1.0":{"_id":"lru-cache@3.1.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"3.1.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"^1.2.0","weak":""},"dependencies":{"pseudomap":"^1.0.1"},"main":"lib/lru-cache.js","dist":{"shasum":"695666a271c1364350e8256fee8657fb90a6eeb0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-3.1.0.tgz"},"gitHead":"f729777fc0af1e5c61d0c724fc8c0a56bfcf6603","_from":".","_npmVersion":"3.3.2","_nodeVersion":"4.0.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"isaacs@npmjs.com"},{"name":"othiym23","email":"ogd@aoaioxxysz.net"}]},"3.1.1":{"_id":"lru-cache@3.1.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"3.1.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"^1.2.0","weak":""},"dependencies":{"pseudomap":"^1.0.1"},"main":"lib/lru-cache.js","dist":{"shasum":"62e11a908886c69713d102ba7b8969c8315348f6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-3.1.1.tgz"},"gitHead":"bdd31947533d1d91b17618f1a30346bc3eb9840f","_from":".","_npmVersion":"3.3.2","_nodeVersion":"4.0.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"isaacs@npmjs.com"},{"name":"othiym23","email":"ogd@aoaioxxysz.net"}]},"3.1.2":{"_id":"lru-cache@3.1.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"3.1.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"^1.2.0","weak":""},"dependencies":{"pseudomap":"^1.0.1"},"main":"lib/lru-cache.js","dist":{"shasum":"2c108220c9a73d4f516e6f3147c2f8f5a8eb0296","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-3.1.2.tgz"},"gitHead":"fa470b7fd44e386defb6be5fc3ae61906a68cc6f","_from":".","_npmVersion":"3.3.2","_nodeVersion":"4.0.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"isaacs@npmjs.com"},{"name":"othiym23","email":"ogd@aoaioxxysz.net"}]},"3.2.0":{"_id":"lru-cache@3.2.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"3.2.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test --gc"},"directories":{},"devDependencies":{"tap":"^1.2.0","weak":""},"dependencies":{"pseudomap":"^1.0.1"},"main":"lib/lru-cache.js","dist":{"shasum":"71789b3b7f5399bec8565dda38aa30d2a097efee","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-3.2.0.tgz"},"gitHead":"50d2d39a6649f1165054618962a467caad861142","_from":".","_npmVersion":"3.3.2","_nodeVersion":"4.0.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"isaacs@npmjs.com"},{"name":"othiym23","email":"ogd@aoaioxxysz.net"}]},"4.0.0":{"_id":"lru-cache@4.0.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"4.0.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test --cov","posttest":"standard test/*.js lib/*.js"},"directories":{},"devDependencies":{"standard":"^5.4.1","tap":"^2.3.3"},"dependencies":{"pseudomap":"^1.0.1","yallist":"^2.0.0"},"main":"lib/lru-cache.js","dist":{"shasum":"b5cbf01556c16966febe54ceec0fb4dc90df6c28","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-4.0.0.tgz"},"gitHead":"da374d4776aaef443765b43cb3617e09c170a5d5","_from":".","_npmVersion":"3.3.2","_nodeVersion":"4.0.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"isaacs@npmjs.com"},{"name":"othiym23","email":"ogd@aoaioxxysz.net"}]},"4.0.1":{"_id":"lru-cache@4.0.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"4.0.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test --branches=100 --functions=100 --lines=100 --statements=100","posttest":"standard test/*.js lib/*.js"},"directories":{},"devDependencies":{"standard":"^5.4.1","tap":"^5.1.1"},"dependencies":{"pseudomap":"^1.0.1","yallist":"^2.0.0"},"files":["lib/lru-cache.js"],"main":"lib/lru-cache.js","dist":{"shasum":"1343955edaf2e37d9b9e7ee7241e27c4b9fb72be","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-4.0.1.tgz"},"gitHead":"6cd8c8a43cf56c585bdb696faae94f9836cb9e28","_from":".","_npmVersion":"3.7.3","_nodeVersion":"5.6.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"isaacs@npmjs.com"},{"name":"othiym23","email":"ogd@aoaioxxysz.net"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/lru-cache-4.0.1.tgz_1458667372415_0.8005518841091543"}},"4.0.2":{"_id":"lru-cache@4.0.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"4.0.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test --100","posttest":"standard test/*.js lib/*.js"},"directories":{},"devDependencies":{"standard":"^5.4.1","tap":"^8.0.1"},"dependencies":{"pseudomap":"^1.0.1","yallist":"^2.0.0"},"files":["lib/lru-cache.js"],"main":"lib/lru-cache.js","dist":{"shasum":"1d17679c069cda5d040991a09dbc2c0db377e55e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-4.0.2.tgz"},"gitHead":"f25bdae0b4bb0166a75fa01d664a3e3cece1ce98","_from":".","_npmVersion":"3.10.9","_nodeVersion":"6.5.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"isaacs@npmjs.com"},{"name":"othiym23","email":"ogd@aoaioxxysz.net"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/lru-cache-4.0.2.tgz_1480273800672_0.31606275402009487"}},"4.1.0":{"_id":"lru-cache@4.1.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"4.1.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test/*.js --100 -J","posttest":"standard test/*.js index.js","preversion":"npm test","postversion":"npm publish","postpublish":"git push origin --all; git push origin --tags"},"directories":{},"devDependencies":{"standard":"^5.4.1","tap":"^10.3.3"},"dependencies":{"pseudomap":"^1.0.1","yallist":"^2.0.0"},"files":["index.js"],"main":"index.js","dist":{"shasum":"59be49a683b8d986a939f1ca60fdb6989f4b2046","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-4.1.0.tgz"},"gitHead":"1a77f87d74b46715b80acc3f6b44c12d030e9902","_npmVersion":"5.0.3","_nodeVersion":"8.0.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"isaacs@npmjs.com"},{"name":"othiym23","email":"ogd@aoaioxxysz.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache-4.1.0.tgz_1496771655220_0.868791145272553"}},"4.1.1":{"_id":"lru-cache@4.1.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"4.1.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test/*.js --100 -J","posttest":"standard test/*.js index.js","preversion":"npm test","postversion":"npm publish","postpublish":"git push origin --all; git push origin --tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","standard":"^5.4.1","tap":"^10.3.3"},"dependencies":{"pseudomap":"^1.0.2","yallist":"^2.1.2"},"files":["index.js"],"main":"index.js","dist":{"shasum":"622e32e82488b49279114a4f9ecf45e7cd6bba55","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-4.1.1.tgz"},"gitHead":"e992f26547a575299fc8d232580e53229393ea7a","_npmVersion":"5.0.3","_nodeVersion":"8.0.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"isaacs@npmjs.com"},{"name":"othiym23","email":"ogd@aoaioxxysz.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache-4.1.1.tgz_1497150046014_0.012352559482678771"}},"4.1.2":{"_id":"lru-cache@4.1.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"4.1.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test/*.js --100 -J","posttest":"standard test/*.js index.js","preversion":"npm test","postversion":"npm publish","postpublish":"git push origin --all; git push origin --tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","standard":"^5.4.1","tap":"^10.3.3"},"dependencies":{"pseudomap":"^1.0.2","yallist":"^2.1.2"},"files":["index.js"],"main":"index.js","dist":{"shasum":"45234b2e6e2f2b33da125624c4664929a0224c3f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-4.1.2.tgz"},"gitHead":"2a95eda2a22b281f3253304231b2bab4432e2f8c","_npmVersion":"5.7.0","_nodeVersion":"8.9.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"email":"i@izs.me","name":"isaacs"},{"email":"ogd@aoaioxxysz.net","name":"othiym23"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_4.1.2_1520531913886_0.19100220467390994"},"_hasShrinkwrap":false},"4.1.3":{"_id":"lru-cache@4.1.3","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"4.1.3","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test/*.js --100 -J","posttest":"standard test/*.js index.js","preversion":"npm test","postversion":"npm publish","postpublish":"git push origin --all; git push origin --tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","standard":"^5.4.1","tap":"^11.1.4"},"dependencies":{"pseudomap":"^1.0.2","yallist":"^2.1.2"},"files":["index.js"],"main":"index.js","dist":{"shasum":"a1175cf3496dfc8436c156c334b4955992bce69c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-4.1.3.tgz"},"gitHead":"9c895c3045b4decf49bbbd7d5171f0be2ff86039","_npmVersion":"5.6.0","_nodeVersion":"10.0.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"email":"i@izs.me","name":"isaacs"},{"email":"ogd@aoaioxxysz.net","name":"othiym23"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_4.1.3_1525735031368_0.027008230747383788"},"_hasShrinkwrap":false},"4.1.4":{"_id":"lru-cache@4.1.4","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"4.1.4","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test/*.js --100 -J","snap":"TAP_SNAPSHOT=1 tap test/*.js -J","posttest":"standard test/*.js index.js","coveragerport":"tap --coverage-report=html","lintfix":"standard --fix test/*.js index.js","preversion":"npm test","postversion":"npm publish","postpublish":"git push origin --all; git push origin --tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","standard":"^12.0.1","tap":"^12.1.0"},"dependencies":{"pseudomap":"^1.0.2","yallist":"^3.0.2"},"main":"index.js","dist":{"shasum":"51cc46e8e6d9530771c857e24ccc720ecdbcc031","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-4.1.4.tgz"},"gitHead":"099689df17f0d5de2e15a92e83262052772649d6","_npmVersion":"6.4.1","_nodeVersion":"11.2.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"email":"i@izs.me","name":"isaacs"},{"email":"ogd@aoaioxxysz.net","name":"othiym23"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_4.1.4_1542759249101_0.8740159848771953"},"_hasShrinkwrap":false},"4.1.5":{"_id":"lru-cache@4.1.5","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"4.1.5","keywords":["mru","lru","cache"],"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":""},"repository":{"ShortcutSyntax":"git://github.com/isaacs/node-lru-cache.git"},"license":"ISC","scripts":{"test":"tap test/*.js --100 -J","snap":"TAP_SNAPSHOT=1 tap test/*.js -J","posttest":"standard test/*.js index.js","coveragerport":"tap --coverage-report=html","lintfix":"standard --fix test/*.js index.js","preversion":"npm test","postversion":"npm publish --tag=legacy","postpublish":"git push origin --all; git push origin --tags"},"directories":null,"devDependencies":{"benchmark":"^2.1.4","standard":"^12.0.1","tap":"^12.1.0"},"dependencies":{"pseudomap":"^1.0.2","yallist":"^2.1.2"},"files":["index.js"],"main":"index.js","dist":{"shasum":"8bbe50ea85bed59bc9e33dcab8235ee9bcf443cd","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-4.1.5.tgz"}},"5.0.0":{"_id":"lru-cache@5.0.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"5.0.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test/*.js --100 -J","snap":"TAP_SNAPSHOT=1 tap test/*.js -J","coveragerport":"tap --coverage-report=html","preversion":"npm test","postversion":"npm publish","postpublish":"git push origin --all; git push origin --tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","tap":"^12.1.0"},"dependencies":{"yallist":"^3.0.2"},"main":"index.js","dist":{"shasum":"de3d12fb64e4225b8d3eeda3c738f7d6ed007473","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-5.0.0.tgz"},"gitHead":"989d730321ebb338ff7aa434d0249d2f0d97d709","_npmVersion":"6.4.1","_nodeVersion":"10.12.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"email":"i@izs.me","name":"isaacs"},{"email":"ogd@aoaioxxysz.net","name":"othiym23"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_5.0.0_1542761198629_0.7454856979770508"},"_hasShrinkwrap":false},"5.0.1":{"_id":"lru-cache@5.0.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"5.0.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test/*.js --100 -J","snap":"TAP_SNAPSHOT=1 tap test/*.js -J","coveragerport":"tap --coverage-report=html","preversion":"npm test","postversion":"npm publish","postpublish":"git push origin --all; git push origin --tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","tap":"^12.1.0"},"dependencies":{"yallist":"^3.0.2"},"main":"index.js","dist":{"shasum":"44999c73102eb665b221313ac80ddde9bac287cf","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-5.0.1.tgz"},"gitHead":"54a9dc48cbc1a3a838e80d6f400bc5efb2bfc666","_npmVersion":"6.4.1","_nodeVersion":"10.12.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"email":"i@izs.me","name":"isaacs"},{"email":"ogd@aoaioxxysz.net","name":"othiym23"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_5.0.1_1542762295972_0.4767621080205895"},"_hasShrinkwrap":false},"5.1.0":{"_id":"lru-cache@5.1.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"5.1.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap test/*.js --100 -J","snap":"TAP_SNAPSHOT=1 tap test/*.js -J","coveragerport":"tap --coverage-report=html","preversion":"npm test","postversion":"npm publish","postpublish":"git push origin --all; git push origin --tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","tap":"^12.1.0"},"dependencies":{"yallist":"^3.0.2"},"main":"index.js","dist":{"shasum":"3f6dc53a2123619399699210608cf144467469cf","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-5.1.0.tgz"},"gitHead":"3c2af5a71cd561b6d76693f801af41a5047a90d2","_npmVersion":"6.4.1","_nodeVersion":"10.12.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"email":"i@izs.me","name":"isaacs"},{"email":"ogd@aoaioxxysz.net","name":"othiym23"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_5.1.0_1542763393628_0.982190355130331"},"_hasShrinkwrap":false},"5.1.1":{"_id":"lru-cache@5.1.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"5.1.1","keywords":["mru","lru","cache"],"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":""},"repository":{"ShortcutSyntax":"git://github.com/isaacs/node-lru-cache.git"},"license":"ISC","scripts":{"test":"tap test/*.js --100 -J","snap":"TAP_SNAPSHOT=1 tap test/*.js -J","coveragerport":"tap --coverage-report=html","preversion":"npm test","postversion":"npm publish","postpublish":"git push origin --all; git push origin --tags"},"directories":null,"devDependencies":{"benchmark":"^2.1.4","tap":"^12.1.0"},"dependencies":{"yallist":"^3.0.2"},"files":["index.js"],"main":"index.js","dist":{"shasum":"1da27e6710271947695daf6848e847f01d84b920","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-5.1.1.tgz"}},"6.0.0":{"_id":"lru-cache@6.0.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"6.0.0","keywords":["mru","lru","cache"],"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":""},"repository":{"ShortcutSyntax":"git://github.com/isaacs/node-lru-cache.git"},"license":"ISC","scripts":{"test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":null,"devDependencies":{"benchmark":"^2.1.4","tap":"^14.10.7"},"dependencies":{"yallist":"^4.0.0"},"engines":{"node":">=10"},"files":["index.js"],"main":"index.js","dist":{"shasum":"6d6fe6570ebd96aaf90fcad1dafa3b2566db3a94","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-6.0.0.tgz"}},"7.0.0":{"_id":"lru-cache@7.0.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.0.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"50e43c1dbcf17eae78611d8abc0869847030740c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.0.0.tgz"},"tap":{"coverage-map":"map.js"},"gitHead":"a9b57257c36a6746eb9c7d216df01f430701ecd9","_nodeVersion":"17.4.0","_npmVersion":"8.4.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.0.0_1644281185634_0.755406333862241"},"_hasShrinkwrap":false},"7.0.1":{"_id":"lru-cache@7.0.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.0.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"aa4d4a97a176e1cff29504ce125ede5630078aae","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.0.1.tgz"},"tap":{"coverage-map":"map.js"},"gitHead":"51cda550d529c460b392a3c915f9d1124a5f878d","_nodeVersion":"17.4.0","_npmVersion":"8.4.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.0.1_1644281745791_0.5842864070845559"},"_hasShrinkwrap":false},"7.0.2":{"_id":"lru-cache@7.0.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.0.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","publishConfig":{"tag":"v7.0-backport"},"dist":{"shasum":"f5bd5d54960c7247ef6622f7af65578bccd9d974","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.0.2.tgz"},"readme":"# lru-cache\n\nA cache object that deletes the least-recently-used items.\n\nSpecify a max number of the most recently used items that you want to keep,\nand this cache will keep that many of the most recently accessed items.\n\nThis is not primarily a TTL cache, and does not make strong TTL guarantees.\nThere is no preemptive pruning of expired items, but you _may_ set a TTL\non the cache or on a single `set`.  If you do so, it will treat expired\nitems as missing, and delete them when fetched.\n\nAs of version 7, this is one of the most performant LRU implementations\navailable in JavaScript, and supports a wide diversity of use cases.\nHowever, note that using some of the features will necessarily impact\nperformance, by causing the cache to have to do more work.  See the\n\"Performance\" section below.\n\n## Installation\n\n```js\nnpm install lru-cache --save\n```\n\n## Usage\n\n```js\nconst LRU = require('lru-cache')\n\n// only 'max' is required, the others are optional, but MAY be\n// required if certain other fields are set.\nconst options = {\n  // the number of most recently used items to keep.\n  // note that we may store fewer items than this if maxSize is hit.\n  max: 500,\n\n  // if you wish to track item size, you must provide a maxSize\n  // note that we still will only keep up to max *actual items*,\n  // so size tracking may cause fewer than max items to be stored.\n  // At the extreme, a single item of maxSize size will cause everything\n  // else in the cache to be dropped when it is added.  Use with caution!\n  // Note also that size tracking can negatively impact performance,\n  // though for most cases, only minimally.\n  maxSize: 5000,\n\n  // function to calculate size of items.  useful if storing strings or\n  // buffers or other items where memory size depends on the object itself.\n  // also note that oversized items do NOT immediately get dropped from\n  // the cache, though they will cause faster turnover in the storage.\n  sizeCalculation: (value, key) => {\n    // return an positive integer which is the size of the item,\n    // if a positive integer is not returned, will use 0 as the size.\n    return 1\n  },\n\n  // function to call when the item is removed from the cache\n  // Note that using this can negatively impact performance.\n  dispose: (value, key) => {\n    freeFromMemoryOrWhatever(value)\n  },\n\n  // max time to live for items before they are considered stale\n  // note that stale items are NOT preemptively removed, and MAY\n  // live in the cache, contributing to its LRU max, long after they\n  // have expired.\n  // Also, as this cache is optimized for LRU/MRU operations, some of\n  // the staleness/TTL checks will reduce performance, as they will incur\n  // overhead by deleting items.\n  // Must be a positive integer in ms, defaults to 0, which means \"no TTL\"\n  ttl: 1000 * 60 * 5,\n\n  // return stale items from cache.get() before disposing of them\n  // boolean, default false\n  allowStale: false,\n\n  // update the age of items on cache.get(), renewing their TTL\n  // boolean, default false\n  updateAgeOnGet: false,\n\n  // update the age of items on cache.has(), renewing their TTL\n  // boolean, default false\n  updateAgeOnHas: false,\n\n  // update the \"recently-used\"-ness of items on cache.has()\n  // boolean, default false\n  updateRecencyOnHas: false,\n}\n\nconst cache = new LRU(options)\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\n// non-string keys ARE fully supported\n// but note that it must be THE SAME object, not\n// just a JSON-equivalent object.\nvar someObject = { a: 1 }\ncache.set(someObject, 'a value')\n// Object keys are not toString()-ed\ncache.set('[object Object]', 'a different value')\nassert.equal(cache.get(someObject), 'a value')\n// A similar object with same keys/values won't work,\n// because it's a different object identity\nassert.equal(cache.get({ a: 1 }), undefined)\n\ncache.clear()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\n## Options\n\n* `max` - The maximum number (or size) of items that remain in the cache\n  (assuming no TTL pruning or explicit deletions).  Note that fewer items\n  may be stored if size calculation is used, and `maxSize` is exceeded.\n  This must be a positive finite intger.\n\n* `maxSize` - Set to a positive integer to track the sizes of items added\n  to the cache, and automatically evict items in order to stay below this\n  size.  Note that this may result in fewer than `max` items being stored.\n\n* `sizeCalculation` - Function used to calculate the size of stored\n  items.  If you're storing strings or buffers, then you probably want to\n  do something like `n => n.length`.  The item is passed as the first\n  argument, and the key is passed as the second argumnet.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Requires `maxSize` to be set.\n\n    Deprecated alias: `length`\n\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  stored in the cache.\n\n    It is called *after* the item has been fully removed from the cache, so\n    if you want to put it right back in, that is safe to do.\n\n    Unlike several other options, this may _not_ be overridden by passing\n    an option to `set()`, for performance reasons.  If disposal functions\n    may vary between cache entries, then the entire list must be scanned\n    on every cache swap, even if no disposal function is in use.\n\n    Optional, must be a function.\n\n* `noDisposeOnSet` Set to `true` to suppress calling the `dispose()`\n  function if the entry key is still accessible within the cache.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Boolean, default `false`.  Only relevant if `dispose` option is set.\n\n* `ttl` - max time to live for items before they are considered stale.\n  Note that stale items are NOT preemptively removed, and MAY live in the\n  cache, contributing to its LRU max, long after they have expired.\n\n    Also, as this cache is optimized for LRU/MRU operations, some of\n    the staleness/TTL checks will reduce performance, as they will incur\n    overhead by deleting from Map objects rather than simply throwing old\n    Map objects away.\n\n    This is not primarily a TTL cache, and does not make strong TTL\n    guarantees.  There is no pre-emptive pruning of expired items, but you\n    _may_ set a TTL on the cache, and it will treat expired items as missing\n    when they are fetched, and delete them.\n\n    Optional, but must be a positive integer in ms if specified.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Deprecated alias: `maxAge`\n\n* `allowStale` - By default, if you set `ttl`, it'll only delete stale\n  items from the cache when you `get(key)`.  That is, it's not\n  pre-emptively pruning items.\n\n    If you set `allowStale:true`, it'll return the stale value as well as\n    deleting it.  If you don't set this, then it'll return `undefined` when\n    you try to get a stale entry.\n\n    Note that when a stale entry is fetched, _even if it is returned due to\n    `allowStale` being set_, it is removed from the cache immediately.  You\n    can immediately put it back in the cache if you wish, thus resetting the\n    TTL.\n\n    This may be overridden by passing an options object to `cache.get()`.\n    The `cache.has()` method will always return `false` for stale items.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n    Deprecated alias: `stale`\n\n* `updateAgeOnGet` - When using time-expiring entries with `ttl`, setting\n  this to `true` will make each item's age reset to 0 whenever it is\n  retrieved from cache with `get()`, causing it to not expire.  (It can\n  still fall out of cache based on recency of use, of course.)\n\n    This may be overridden by passing an options object to `cache.get()`.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n## API\n\n* `new LRUCache(options)`\n\n    Create a new LRUCache.  All options are documented above, and are on\n    the cache as public members.\n\n* `cache.max`, `cache.ttl`, `cache.allowStale`, etc.\n\n    All option names are exposed as public members on the cache object.\n\n    These are intended for read access only.  Changing them during program\n    operation can cause undefined behavior.\n\n* `cache.size`\n\n    The total number of items held in the cache at the current moment.\n\n* `cache.calculatedSize`\n\n    The total size of items in cache when using size tracking.\n\n* `set(key, value, [{ size, sizeCalculation, ttl, noDisposeOnSet }])`\n\n    Add a value to the cache.\n\n    Optional options object may contain `ttl` and `sizeCalculation` as\n    described above, which default to the settings on the cache object.\n\n    Options object my also include `size`, which will prevent calling the\n    `sizeCalculation` function and just use the specified number if it is a\n    positive integer, and `noDisposeOnSet` which will prevent calling a\n    `dispose` function in the case of overwrites.\n\n    Will update the recency of the entry.\n\n* `get(key, { updateAgeOnGet, allowStale } = {}) => value`\n\n    Return a value from the cache.\n\n    Will update the recency of the cache entry found.\n\n    If the key is not found, `get()` will return `undefined`.  This can be\n    confusing when setting values specifically to `undefined`, as in\n    `cache.set(key, undefined)`.  Use `cache.has()` to determine whether a\n    key is present in the cache at all.\n\n* `peek(key, { allowStale } = {}) => value`\n\n    Like `get()` but doesn't update recency or delete stale items.\n\n    Returns `undefined` if the item is stale, unless `allowStale` is set\n    either on the cache or in the options object.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recency or age.\n\n    Will return `false` if the item is stale, even though it is technically\n    in the cache.\n\n* `delete(key)`\n\n    Deletes a key out of the cache.\n\n* `clear()`\n\n    Clear the cache entirely, throwing away all values.\n\n    Deprecated alias: `reset()`\n\n* `keys()`\n\n    Return a generator yielding the keys in the cache.\n\n* `values()`\n\n    Return a generator yielding the values in the cache.\n\n* `entries()`\n\n    Return a generator yielding `[key, value]` pairs.\n\n* `find(fn, [getOptions])`\n\n    Find a value for which the supplied `fn` method returns a truthy value,\n    similar to `Array.find()`.\n\n    `fn` is called as `fn(value, key, cache)`.\n\n    The optional `getOptions` are applied to the resulting `get()` of the\n    item found.\n\n* `dump()`\n\n    Return an array of `[key, entry]` objects which can be passed to\n    `cache.load()`\n\n    Note: this returns an actual array, not a generator, so it can be more\n    easily passed around.\n\n* `load(entries)`\n\n    Reset the cache and load in the items in `entries` in the order listed.\n    Note that the shape of the resulting cache may be different if the same\n    options are not used in both caches.\n\n* `purgeStale()`\n\n    Delete any stale entries.  Returns `true` if anything was removed,\n    `false` otherwise.\n\n### Internal Methods and Properties\n\nDo not use or rely on these.  They will change or be removed without\nnotice.  They will cause undefined behavior if used inappropriately.\n\nThis documentation is here so that it is especially clear that this not\n\"undocumented\" because someone forgot; it _is_ documented, and the\ndocumentation is telling you not to do it.\n\nDo not report bugs that stem from using these properties.  They will be\nignored.\n\n* `setKeyIndex()` Assign an index to a given key.\n* `getKeyIndex()` Get the index for a given key.\n* `deleteKeyIndex()` Remove the index for a given key.\n* `getDisposeData()` Get the data to pass to a `dispose()` call.\n* `callDispose()` Actually call the `dispose()` function.\n* `onSet()` Called to assign data when `set()` is called.\n* `evict()` Delete the least recently used item.\n* `onDelete()` Perform actions required for deleting an entry.\n* `isStale()` Check if an item is stale, by index.\n* `list` The internal linked list of indexes defining recency.\n\n## Performance\n\nAs of January 2022, version 7 of this library is one of the most performant\nLRU cache implementations in JavaScript.\n\nBenchmarks can be extremely difficult to get right.  In particular, the\nperformance of set/get/delete operations on objects will vary _wildly_\ndepending on the type of key used.  V8 is highly optimized for objects with\nkeys that are short strings, especially integer numeric strings.  Thus any\nbenchmark which tests _solely_ using numbers as keys will tend to find that\nan object-based approach performs the best.\n\nNote that coercing _anything_ to strings to use as object keys is unsafe,\nunless you can be 100% certain that no other type of value will be used.\nFor example:\n\n```js\nconst myCache = {}\nconst set = (k, v) => myCache[k] = v\nconst get = (k) => myCache[k]\n\nset({}, 'please hang onto this for me')\nset('[object Object]', 'oopsie')\n```\n\nAlso beware of \"Just So\" stories regarding performance.  Garbage collection\nof large (especially: deep) object graphs can be incredibly costly, with\nseveral \"tipping points\" where it increases exponentially.  As a result,\nputting that off until later can make it much worse, and less predictable.\nIf a library performs well, but only in a scenario where the object graph is\nkept shallow, then that won't help you if you are using large objects as\nkeys.\n\nIn general, when attempting to use a library to improve performance (such\nas a cache like this one), it's best to choose an option that will perform\nwell in the sorts of scenarios where you'll actually use it.\n\nThis library is optimized for repeated gets and minimizing eviction time,\nsince that is the expected need of a LRU.  Set operations are somewhat\nslower on average than a few other options, in part because of that\noptimization.  It is assumed that you'll be caching some costly operation,\nideally as rarely as possible, so optimizing set over get would be unwise.\n\nIf performance matters to you:\n\n1. If it's at all possible to use small integer values as keys, and you can\n   guarantee that no other types of values will be used as keys, then do that,\n   and use a cache such as [lru-fast](https://npmjs.com/package/lru-fast)\n   which uses an Object as its data store.\n2. Failing that, if at all possible, use short non-numeric strings (ie,\n   less than 256 characters) as your keys.\n3. If you know that the types of your keys will be long strings, strings\n   that look like floats, `null`, objects, or some mix of types, then this\n   library will work well for you.\n4. Do not use a `dispose` function, size tracking, or ttl behavior, unless\n   absolutely needed.  These features are convenient, and necessary in some\n   use cases, and every attempt has been made to make the performance\n   impact minimal, but it isn't nothing.\n\n## Breaking Changes in Version 7\n\nThis library changed to a different algorithm and internal data structure\nin version 7, yielding significantly better performance, albeit with\nsome subtle changes as a result.\n\nIf you were relying on the internals of LRUCache in version 6 or before, it\nprobably will not work in version 7 and above.\n\n### Specific API Changes\n\nFor the most part, the feature set has been maintained as much as possible.\n\nHowever, some other cleanup and refactoring changes were made in v7 as\nwell.\n\n* The `set()`, `get()`, and `has()` functions take options objects\n  instead of positional booleans/integers for optional parameters.\n* `size` can be set explicitly on `set()`.\n* `cache.length` was renamed to the more fitting `cache.size`.\n* Option name deprecations:\n  * `stale` -> `allowStale`\n  * `length` -> `sizeCalculation`\n  * `maxAge` -> `ttl`\n* The objects used by `cache.load()` and `cache.dump()` are incompatible\n  with previous versions.\n","tap":{"coverage-map":"map.js"},"readmeFilename":"README.md","gitHead":"02c726f446fad5014890564a18863bda025a604d","_nodeVersion":"17.4.0","_npmVersion":"8.4.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.0.2_1644420403014_0.9419591400604976"},"_hasShrinkwrap":false},"7.0.3":{"_id":"lru-cache@7.0.3","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.0.3","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","publishConfig":{"tag":"v7.0-backport"},"dist":{"shasum":"7f419682ad66841da4e87b4e3486fe80836f34a2","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.0.3.tgz"},"readme":"# lru-cache\n\nA cache object that deletes the least-recently-used items.\n\nSpecify a max number of the most recently used items that you want to keep,\nand this cache will keep that many of the most recently accessed items.\n\nThis is not primarily a TTL cache, and does not make strong TTL guarantees.\nThere is no preemptive pruning of expired items, but you _may_ set a TTL\non the cache or on a single `set`.  If you do so, it will treat expired\nitems as missing, and delete them when fetched.\n\nAs of version 7, this is one of the most performant LRU implementations\navailable in JavaScript, and supports a wide diversity of use cases.\nHowever, note that using some of the features will necessarily impact\nperformance, by causing the cache to have to do more work.  See the\n\"Performance\" section below.\n\n## Installation\n\n```js\nnpm install lru-cache --save\n```\n\n## Usage\n\n```js\nconst LRU = require('lru-cache')\n\n// only 'max' is required, the others are optional, but MAY be\n// required if certain other fields are set.\nconst options = {\n  // the number of most recently used items to keep.\n  // note that we may store fewer items than this if maxSize is hit.\n  max: 500,\n\n  // if you wish to track item size, you must provide a maxSize\n  // note that we still will only keep up to max *actual items*,\n  // so size tracking may cause fewer than max items to be stored.\n  // At the extreme, a single item of maxSize size will cause everything\n  // else in the cache to be dropped when it is added.  Use with caution!\n  // Note also that size tracking can negatively impact performance,\n  // though for most cases, only minimally.\n  maxSize: 5000,\n\n  // function to calculate size of items.  useful if storing strings or\n  // buffers or other items where memory size depends on the object itself.\n  // also note that oversized items do NOT immediately get dropped from\n  // the cache, though they will cause faster turnover in the storage.\n  sizeCalculation: (value, key) => {\n    // return an positive integer which is the size of the item,\n    // if a positive integer is not returned, will use 0 as the size.\n    return 1\n  },\n\n  // function to call when the item is removed from the cache\n  // Note that using this can negatively impact performance.\n  dispose: (value, key) => {\n    freeFromMemoryOrWhatever(value)\n  },\n\n  // max time to live for items before they are considered stale\n  // note that stale items are NOT preemptively removed, and MAY\n  // live in the cache, contributing to its LRU max, long after they\n  // have expired.\n  // Also, as this cache is optimized for LRU/MRU operations, some of\n  // the staleness/TTL checks will reduce performance, as they will incur\n  // overhead by deleting items.\n  // Must be a positive integer in ms, defaults to 0, which means \"no TTL\"\n  ttl: 1000 * 60 * 5,\n\n  // return stale items from cache.get() before disposing of them\n  // boolean, default false\n  allowStale: false,\n\n  // update the age of items on cache.get(), renewing their TTL\n  // boolean, default false\n  updateAgeOnGet: false,\n\n  // update the age of items on cache.has(), renewing their TTL\n  // boolean, default false\n  updateAgeOnHas: false,\n\n  // update the \"recently-used\"-ness of items on cache.has()\n  // boolean, default false\n  updateRecencyOnHas: false,\n}\n\nconst cache = new LRU(options)\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\n// non-string keys ARE fully supported\n// but note that it must be THE SAME object, not\n// just a JSON-equivalent object.\nvar someObject = { a: 1 }\ncache.set(someObject, 'a value')\n// Object keys are not toString()-ed\ncache.set('[object Object]', 'a different value')\nassert.equal(cache.get(someObject), 'a value')\n// A similar object with same keys/values won't work,\n// because it's a different object identity\nassert.equal(cache.get({ a: 1 }), undefined)\n\ncache.clear()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\n## Options\n\n* `max` - The maximum number (or size) of items that remain in the cache\n  (assuming no TTL pruning or explicit deletions).  Note that fewer items\n  may be stored if size calculation is used, and `maxSize` is exceeded.\n  This must be a positive finite intger.\n\n* `maxSize` - Set to a positive integer to track the sizes of items added\n  to the cache, and automatically evict items in order to stay below this\n  size.  Note that this may result in fewer than `max` items being stored.\n\n* `sizeCalculation` - Function used to calculate the size of stored\n  items.  If you're storing strings or buffers, then you probably want to\n  do something like `n => n.length`.  The item is passed as the first\n  argument, and the key is passed as the second argumnet.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Requires `maxSize` to be set.\n\n    Deprecated alias: `length`\n\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  stored in the cache.\n\n    It is called *after* the item has been fully removed from the cache, so\n    if you want to put it right back in, that is safe to do.\n\n    Unlike several other options, this may _not_ be overridden by passing\n    an option to `set()`, for performance reasons.  If disposal functions\n    may vary between cache entries, then the entire list must be scanned\n    on every cache swap, even if no disposal function is in use.\n\n    Optional, must be a function.\n\n* `noDisposeOnSet` Set to `true` to suppress calling the `dispose()`\n  function if the entry key is still accessible within the cache.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Boolean, default `false`.  Only relevant if `dispose` option is set.\n\n* `ttl` - max time to live for items before they are considered stale.\n  Note that stale items are NOT preemptively removed, and MAY live in the\n  cache, contributing to its LRU max, long after they have expired.\n\n    Also, as this cache is optimized for LRU/MRU operations, some of\n    the staleness/TTL checks will reduce performance, as they will incur\n    overhead by deleting from Map objects rather than simply throwing old\n    Map objects away.\n\n    This is not primarily a TTL cache, and does not make strong TTL\n    guarantees.  There is no pre-emptive pruning of expired items, but you\n    _may_ set a TTL on the cache, and it will treat expired items as missing\n    when they are fetched, and delete them.\n\n    Optional, but must be a positive integer in ms if specified.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Deprecated alias: `maxAge`\n\n* `allowStale` - By default, if you set `ttl`, it'll only delete stale\n  items from the cache when you `get(key)`.  That is, it's not\n  pre-emptively pruning items.\n\n    If you set `allowStale:true`, it'll return the stale value as well as\n    deleting it.  If you don't set this, then it'll return `undefined` when\n    you try to get a stale entry.\n\n    Note that when a stale entry is fetched, _even if it is returned due to\n    `allowStale` being set_, it is removed from the cache immediately.  You\n    can immediately put it back in the cache if you wish, thus resetting the\n    TTL.\n\n    This may be overridden by passing an options object to `cache.get()`.\n    The `cache.has()` method will always return `false` for stale items.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n    Deprecated alias: `stale`\n\n* `updateAgeOnGet` - When using time-expiring entries with `ttl`, setting\n  this to `true` will make each item's age reset to 0 whenever it is\n  retrieved from cache with `get()`, causing it to not expire.  (It can\n  still fall out of cache based on recency of use, of course.)\n\n    This may be overridden by passing an options object to `cache.get()`.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n## API\n\n* `new LRUCache(options)`\n\n    Create a new LRUCache.  All options are documented above, and are on\n    the cache as public members.\n\n* `cache.max`, `cache.ttl`, `cache.allowStale`, etc.\n\n    All option names are exposed as public members on the cache object.\n\n    These are intended for read access only.  Changing them during program\n    operation can cause undefined behavior.\n\n* `cache.size`\n\n    The total number of items held in the cache at the current moment.\n\n* `cache.calculatedSize`\n\n    The total size of items in cache when using size tracking.\n\n* `set(key, value, [{ size, sizeCalculation, ttl, noDisposeOnSet }])`\n\n    Add a value to the cache.\n\n    Optional options object may contain `ttl` and `sizeCalculation` as\n    described above, which default to the settings on the cache object.\n\n    Options object my also include `size`, which will prevent calling the\n    `sizeCalculation` function and just use the specified number if it is a\n    positive integer, and `noDisposeOnSet` which will prevent calling a\n    `dispose` function in the case of overwrites.\n\n    Will update the recency of the entry.\n\n* `get(key, { updateAgeOnGet, allowStale } = {}) => value`\n\n    Return a value from the cache.\n\n    Will update the recency of the cache entry found.\n\n    If the key is not found, `get()` will return `undefined`.  This can be\n    confusing when setting values specifically to `undefined`, as in\n    `cache.set(key, undefined)`.  Use `cache.has()` to determine whether a\n    key is present in the cache at all.\n\n* `peek(key, { allowStale } = {}) => value`\n\n    Like `get()` but doesn't update recency or delete stale items.\n\n    Returns `undefined` if the item is stale, unless `allowStale` is set\n    either on the cache or in the options object.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recency or age.\n\n    Will return `false` if the item is stale, even though it is technically\n    in the cache.\n\n* `delete(key)`\n\n    Deletes a key out of the cache.\n\n* `clear()`\n\n    Clear the cache entirely, throwing away all values.\n\n    Deprecated alias: `reset()`\n\n* `keys()`\n\n    Return a generator yielding the keys in the cache.\n\n* `values()`\n\n    Return a generator yielding the values in the cache.\n\n* `entries()`\n\n    Return a generator yielding `[key, value]` pairs.\n\n* `find(fn, [getOptions])`\n\n    Find a value for which the supplied `fn` method returns a truthy value,\n    similar to `Array.find()`.\n\n    `fn` is called as `fn(value, key, cache)`.\n\n    The optional `getOptions` are applied to the resulting `get()` of the\n    item found.\n\n* `dump()`\n\n    Return an array of `[key, entry]` objects which can be passed to\n    `cache.load()`\n\n    Note: this returns an actual array, not a generator, so it can be more\n    easily passed around.\n\n* `load(entries)`\n\n    Reset the cache and load in the items in `entries` in the order listed.\n    Note that the shape of the resulting cache may be different if the same\n    options are not used in both caches.\n\n* `purgeStale()`\n\n    Delete any stale entries.  Returns `true` if anything was removed,\n    `false` otherwise.\n\n### Internal Methods and Properties\n\nDo not use or rely on these.  They will change or be removed without\nnotice.  They will cause undefined behavior if used inappropriately.\n\nThis documentation is here so that it is especially clear that this not\n\"undocumented\" because someone forgot; it _is_ documented, and the\ndocumentation is telling you not to do it.\n\nDo not report bugs that stem from using these properties.  They will be\nignored.\n\n* `setKeyIndex()` Assign an index to a given key.\n* `getKeyIndex()` Get the index for a given key.\n* `deleteKeyIndex()` Remove the index for a given key.\n* `getDisposeData()` Get the data to pass to a `dispose()` call.\n* `callDispose()` Actually call the `dispose()` function.\n* `onSet()` Called to assign data when `set()` is called.\n* `evict()` Delete the least recently used item.\n* `onDelete()` Perform actions required for deleting an entry.\n* `isStale()` Check if an item is stale, by index.\n* `list` The internal linked list of indexes defining recency.\n\n## Performance\n\nAs of January 2022, version 7 of this library is one of the most performant\nLRU cache implementations in JavaScript.\n\nBenchmarks can be extremely difficult to get right.  In particular, the\nperformance of set/get/delete operations on objects will vary _wildly_\ndepending on the type of key used.  V8 is highly optimized for objects with\nkeys that are short strings, especially integer numeric strings.  Thus any\nbenchmark which tests _solely_ using numbers as keys will tend to find that\nan object-based approach performs the best.\n\nNote that coercing _anything_ to strings to use as object keys is unsafe,\nunless you can be 100% certain that no other type of value will be used.\nFor example:\n\n```js\nconst myCache = {}\nconst set = (k, v) => myCache[k] = v\nconst get = (k) => myCache[k]\n\nset({}, 'please hang onto this for me')\nset('[object Object]', 'oopsie')\n```\n\nAlso beware of \"Just So\" stories regarding performance.  Garbage collection\nof large (especially: deep) object graphs can be incredibly costly, with\nseveral \"tipping points\" where it increases exponentially.  As a result,\nputting that off until later can make it much worse, and less predictable.\nIf a library performs well, but only in a scenario where the object graph is\nkept shallow, then that won't help you if you are using large objects as\nkeys.\n\nIn general, when attempting to use a library to improve performance (such\nas a cache like this one), it's best to choose an option that will perform\nwell in the sorts of scenarios where you'll actually use it.\n\nThis library is optimized for repeated gets and minimizing eviction time,\nsince that is the expected need of a LRU.  Set operations are somewhat\nslower on average than a few other options, in part because of that\noptimization.  It is assumed that you'll be caching some costly operation,\nideally as rarely as possible, so optimizing set over get would be unwise.\n\nIf performance matters to you:\n\n1. If it's at all possible to use small integer values as keys, and you can\n   guarantee that no other types of values will be used as keys, then do that,\n   and use a cache such as [lru-fast](https://npmjs.com/package/lru-fast)\n   which uses an Object as its data store.\n2. Failing that, if at all possible, use short non-numeric strings (ie,\n   less than 256 characters) as your keys.\n3. If you know that the types of your keys will be long strings, strings\n   that look like floats, `null`, objects, or some mix of types, then this\n   library will work well for you.\n4. Do not use a `dispose` function, size tracking, or ttl behavior, unless\n   absolutely needed.  These features are convenient, and necessary in some\n   use cases, and every attempt has been made to make the performance\n   impact minimal, but it isn't nothing.\n\n## Breaking Changes in Version 7\n\nThis library changed to a different algorithm and internal data structure\nin version 7, yielding significantly better performance, albeit with\nsome subtle changes as a result.\n\nIf you were relying on the internals of LRUCache in version 6 or before, it\nprobably will not work in version 7 and above.\n\n### Specific API Changes\n\nFor the most part, the feature set has been maintained as much as possible.\n\nHowever, some other cleanup and refactoring changes were made in v7 as\nwell.\n\n* The `set()`, `get()`, and `has()` functions take options objects\n  instead of positional booleans/integers for optional parameters.\n* `size` can be set explicitly on `set()`.\n* `cache.length` was renamed to the more fitting `cache.size`.\n* Option name deprecations:\n  * `stale` -> `allowStale`\n  * `length` -> `sizeCalculation`\n  * `maxAge` -> `ttl`\n* The objects used by `cache.load()` and `cache.dump()` are incompatible\n  with previous versions.\n","tap":{"coverage-map":"map.js"},"readmeFilename":"README.md","gitHead":"0d515a2c47dbbbf8f5663d1488c20ac2b4221783","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.0.3_1646940885672_0.29784891373906497"},"_hasShrinkwrap":false},"7.0.4":{"_id":"lru-cache@7.0.4","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.0.4","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","heapdump":"^0.3.15","tap":"^16.0.1"},"engines":{"node":">=12"},"main":"index.js","publishConfig":{"tag":"v7.0-backport"},"dist":{"shasum":"505f3e1dc5b2c0189bff238a1b98dfecfc4aa8dd","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.0.4.tgz"},"readme":"# lru-cache\n\nA cache object that deletes the least-recently-used items.\n\nSpecify a max number of the most recently used items that you want to keep,\nand this cache will keep that many of the most recently accessed items.\n\nThis is not primarily a TTL cache, and does not make strong TTL guarantees.\nThere is no preemptive pruning of expired items, but you _may_ set a TTL\non the cache or on a single `set`.  If you do so, it will treat expired\nitems as missing, and delete them when fetched.\n\nAs of version 7, this is one of the most performant LRU implementations\navailable in JavaScript, and supports a wide diversity of use cases.\nHowever, note that using some of the features will necessarily impact\nperformance, by causing the cache to have to do more work.  See the\n\"Performance\" section below.\n\n## Installation\n\n```js\nnpm install lru-cache --save\n```\n\n## Usage\n\n```js\nconst LRU = require('lru-cache')\n\n// only 'max' is required, the others are optional, but MAY be\n// required if certain other fields are set.\nconst options = {\n  // the number of most recently used items to keep.\n  // note that we may store fewer items than this if maxSize is hit.\n  max: 500,\n\n  // if you wish to track item size, you must provide a maxSize\n  // note that we still will only keep up to max *actual items*,\n  // so size tracking may cause fewer than max items to be stored.\n  // At the extreme, a single item of maxSize size will cause everything\n  // else in the cache to be dropped when it is added.  Use with caution!\n  // Note also that size tracking can negatively impact performance,\n  // though for most cases, only minimally.\n  maxSize: 5000,\n\n  // function to calculate size of items.  useful if storing strings or\n  // buffers or other items where memory size depends on the object itself.\n  // also note that oversized items do NOT immediately get dropped from\n  // the cache, though they will cause faster turnover in the storage.\n  sizeCalculation: (value, key) => {\n    // return an positive integer which is the size of the item,\n    // if a positive integer is not returned, will use 0 as the size.\n    return 1\n  },\n\n  // function to call when the item is removed from the cache\n  // Note that using this can negatively impact performance.\n  dispose: (value, key) => {\n    freeFromMemoryOrWhatever(value)\n  },\n\n  // max time to live for items before they are considered stale\n  // note that stale items are NOT preemptively removed, and MAY\n  // live in the cache, contributing to its LRU max, long after they\n  // have expired.\n  // Also, as this cache is optimized for LRU/MRU operations, some of\n  // the staleness/TTL checks will reduce performance, as they will incur\n  // overhead by deleting items.\n  // Must be a positive integer in ms, defaults to 0, which means \"no TTL\"\n  ttl: 1000 * 60 * 5,\n\n  // return stale items from cache.get() before disposing of them\n  // boolean, default false\n  allowStale: false,\n\n  // update the age of items on cache.get(), renewing their TTL\n  // boolean, default false\n  updateAgeOnGet: false,\n\n  // update the age of items on cache.has(), renewing their TTL\n  // boolean, default false\n  updateAgeOnHas: false,\n\n  // update the \"recently-used\"-ness of items on cache.has()\n  // boolean, default false\n  updateRecencyOnHas: false,\n}\n\nconst cache = new LRU(options)\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\n// non-string keys ARE fully supported\n// but note that it must be THE SAME object, not\n// just a JSON-equivalent object.\nvar someObject = { a: 1 }\ncache.set(someObject, 'a value')\n// Object keys are not toString()-ed\ncache.set('[object Object]', 'a different value')\nassert.equal(cache.get(someObject), 'a value')\n// A similar object with same keys/values won't work,\n// because it's a different object identity\nassert.equal(cache.get({ a: 1 }), undefined)\n\ncache.clear()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\n## Options\n\n* `max` - The maximum number (or size) of items that remain in the cache\n  (assuming no TTL pruning or explicit deletions).  Note that fewer items\n  may be stored if size calculation is used, and `maxSize` is exceeded.\n  This must be a positive finite intger.\n\n* `maxSize` - Set to a positive integer to track the sizes of items added\n  to the cache, and automatically evict items in order to stay below this\n  size.  Note that this may result in fewer than `max` items being stored.\n\n* `sizeCalculation` - Function used to calculate the size of stored\n  items.  If you're storing strings or buffers, then you probably want to\n  do something like `n => n.length`.  The item is passed as the first\n  argument, and the key is passed as the second argumnet.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Requires `maxSize` to be set.\n\n    Deprecated alias: `length`\n\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  stored in the cache.\n\n    It is called *after* the item has been fully removed from the cache, so\n    if you want to put it right back in, that is safe to do.\n\n    Unlike several other options, this may _not_ be overridden by passing\n    an option to `set()`, for performance reasons.  If disposal functions\n    may vary between cache entries, then the entire list must be scanned\n    on every cache swap, even if no disposal function is in use.\n\n    Optional, must be a function.\n\n* `noDisposeOnSet` Set to `true` to suppress calling the `dispose()`\n  function if the entry key is still accessible within the cache.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Boolean, default `false`.  Only relevant if `dispose` option is set.\n\n* `ttl` - max time to live for items before they are considered stale.\n  Note that stale items are NOT preemptively removed, and MAY live in the\n  cache, contributing to its LRU max, long after they have expired.\n\n    Also, as this cache is optimized for LRU/MRU operations, some of\n    the staleness/TTL checks will reduce performance, as they will incur\n    overhead by deleting from Map objects rather than simply throwing old\n    Map objects away.\n\n    This is not primarily a TTL cache, and does not make strong TTL\n    guarantees.  There is no pre-emptive pruning of expired items, but you\n    _may_ set a TTL on the cache, and it will treat expired items as missing\n    when they are fetched, and delete them.\n\n    Optional, but must be a positive integer in ms if specified.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Deprecated alias: `maxAge`\n\n* `allowStale` - By default, if you set `ttl`, it'll only delete stale\n  items from the cache when you `get(key)`.  That is, it's not\n  pre-emptively pruning items.\n\n    If you set `allowStale:true`, it'll return the stale value as well as\n    deleting it.  If you don't set this, then it'll return `undefined` when\n    you try to get a stale entry.\n\n    Note that when a stale entry is fetched, _even if it is returned due to\n    `allowStale` being set_, it is removed from the cache immediately.  You\n    can immediately put it back in the cache if you wish, thus resetting the\n    TTL.\n\n    This may be overridden by passing an options object to `cache.get()`.\n    The `cache.has()` method will always return `false` for stale items.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n    Deprecated alias: `stale`\n\n* `updateAgeOnGet` - When using time-expiring entries with `ttl`, setting\n  this to `true` will make each item's age reset to 0 whenever it is\n  retrieved from cache with `get()`, causing it to not expire.  (It can\n  still fall out of cache based on recency of use, of course.)\n\n    This may be overridden by passing an options object to `cache.get()`.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n## API\n\n* `new LRUCache(options)`\n\n    Create a new LRUCache.  All options are documented above, and are on\n    the cache as public members.\n\n* `cache.max`, `cache.ttl`, `cache.allowStale`, etc.\n\n    All option names are exposed as public members on the cache object.\n\n    These are intended for read access only.  Changing them during program\n    operation can cause undefined behavior.\n\n* `cache.size`\n\n    The total number of items held in the cache at the current moment.\n\n* `cache.calculatedSize`\n\n    The total size of items in cache when using size tracking.\n\n* `set(key, value, [{ size, sizeCalculation, ttl, noDisposeOnSet }])`\n\n    Add a value to the cache.\n\n    Optional options object may contain `ttl` and `sizeCalculation` as\n    described above, which default to the settings on the cache object.\n\n    Options object my also include `size`, which will prevent calling the\n    `sizeCalculation` function and just use the specified number if it is a\n    positive integer, and `noDisposeOnSet` which will prevent calling a\n    `dispose` function in the case of overwrites.\n\n    Will update the recency of the entry.\n\n* `get(key, { updateAgeOnGet, allowStale } = {}) => value`\n\n    Return a value from the cache.\n\n    Will update the recency of the cache entry found.\n\n    If the key is not found, `get()` will return `undefined`.  This can be\n    confusing when setting values specifically to `undefined`, as in\n    `cache.set(key, undefined)`.  Use `cache.has()` to determine whether a\n    key is present in the cache at all.\n\n* `peek(key, { allowStale } = {}) => value`\n\n    Like `get()` but doesn't update recency or delete stale items.\n\n    Returns `undefined` if the item is stale, unless `allowStale` is set\n    either on the cache or in the options object.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recency or age.\n\n    Will return `false` if the item is stale, even though it is technically\n    in the cache.\n\n* `delete(key)`\n\n    Deletes a key out of the cache.\n\n* `clear()`\n\n    Clear the cache entirely, throwing away all values.\n\n    Deprecated alias: `reset()`\n\n* `keys()`\n\n    Return a generator yielding the keys in the cache.\n\n* `values()`\n\n    Return a generator yielding the values in the cache.\n\n* `entries()`\n\n    Return a generator yielding `[key, value]` pairs.\n\n* `find(fn, [getOptions])`\n\n    Find a value for which the supplied `fn` method returns a truthy value,\n    similar to `Array.find()`.\n\n    `fn` is called as `fn(value, key, cache)`.\n\n    The optional `getOptions` are applied to the resulting `get()` of the\n    item found.\n\n* `dump()`\n\n    Return an array of `[key, entry]` objects which can be passed to\n    `cache.load()`\n\n    Note: this returns an actual array, not a generator, so it can be more\n    easily passed around.\n\n* `load(entries)`\n\n    Reset the cache and load in the items in `entries` in the order listed.\n    Note that the shape of the resulting cache may be different if the same\n    options are not used in both caches.\n\n* `purgeStale()`\n\n    Delete any stale entries.  Returns `true` if anything was removed,\n    `false` otherwise.\n\n### Internal Methods and Properties\n\nDo not use or rely on these.  They will change or be removed without\nnotice.  They will cause undefined behavior if used inappropriately.\n\nThis documentation is here so that it is especially clear that this not\n\"undocumented\" because someone forgot; it _is_ documented, and the\ndocumentation is telling you not to do it.\n\nDo not report bugs that stem from using these properties.  They will be\nignored.\n\n* `setKeyIndex()` Assign an index to a given key.\n* `getKeyIndex()` Get the index for a given key.\n* `deleteKeyIndex()` Remove the index for a given key.\n* `getDisposeData()` Get the data to pass to a `dispose()` call.\n* `callDispose()` Actually call the `dispose()` function.\n* `onSet()` Called to assign data when `set()` is called.\n* `evict()` Delete the least recently used item.\n* `onDelete()` Perform actions required for deleting an entry.\n* `isStale()` Check if an item is stale, by index.\n* `list` The internal linked list of indexes defining recency.\n\n## Performance\n\nAs of January 2022, version 7 of this library is one of the most performant\nLRU cache implementations in JavaScript.\n\nBenchmarks can be extremely difficult to get right.  In particular, the\nperformance of set/get/delete operations on objects will vary _wildly_\ndepending on the type of key used.  V8 is highly optimized for objects with\nkeys that are short strings, especially integer numeric strings.  Thus any\nbenchmark which tests _solely_ using numbers as keys will tend to find that\nan object-based approach performs the best.\n\nNote that coercing _anything_ to strings to use as object keys is unsafe,\nunless you can be 100% certain that no other type of value will be used.\nFor example:\n\n```js\nconst myCache = {}\nconst set = (k, v) => myCache[k] = v\nconst get = (k) => myCache[k]\n\nset({}, 'please hang onto this for me')\nset('[object Object]', 'oopsie')\n```\n\nAlso beware of \"Just So\" stories regarding performance.  Garbage collection\nof large (especially: deep) object graphs can be incredibly costly, with\nseveral \"tipping points\" where it increases exponentially.  As a result,\nputting that off until later can make it much worse, and less predictable.\nIf a library performs well, but only in a scenario where the object graph is\nkept shallow, then that won't help you if you are using large objects as\nkeys.\n\nIn general, when attempting to use a library to improve performance (such\nas a cache like this one), it's best to choose an option that will perform\nwell in the sorts of scenarios where you'll actually use it.\n\nThis library is optimized for repeated gets and minimizing eviction time,\nsince that is the expected need of a LRU.  Set operations are somewhat\nslower on average than a few other options, in part because of that\noptimization.  It is assumed that you'll be caching some costly operation,\nideally as rarely as possible, so optimizing set over get would be unwise.\n\nIf performance matters to you:\n\n1. If it's at all possible to use small integer values as keys, and you can\n   guarantee that no other types of values will be used as keys, then do that,\n   and use a cache such as [lru-fast](https://npmjs.com/package/lru-fast)\n   which uses an Object as its data store.\n2. Failing that, if at all possible, use short non-numeric strings (ie,\n   less than 256 characters) as your keys.\n3. If you know that the types of your keys will be long strings, strings\n   that look like floats, `null`, objects, or some mix of types, then this\n   library will work well for you.\n4. Do not use a `dispose` function, size tracking, or ttl behavior, unless\n   absolutely needed.  These features are convenient, and necessary in some\n   use cases, and every attempt has been made to make the performance\n   impact minimal, but it isn't nothing.\n\n## Breaking Changes in Version 7\n\nThis library changed to a different algorithm and internal data structure\nin version 7, yielding significantly better performance, albeit with\nsome subtle changes as a result.\n\nIf you were relying on the internals of LRUCache in version 6 or before, it\nprobably will not work in version 7 and above.\n\n### Specific API Changes\n\nFor the most part, the feature set has been maintained as much as possible.\n\nHowever, some other cleanup and refactoring changes were made in v7 as\nwell.\n\n* The `set()`, `get()`, and `has()` functions take options objects\n  instead of positional booleans/integers for optional parameters.\n* `size` can be set explicitly on `set()`.\n* `cache.length` was renamed to the more fitting `cache.size`.\n* Option name deprecations:\n  * `stale` -> `allowStale`\n  * `length` -> `sizeCalculation`\n  * `maxAge` -> `ttl`\n* The objects used by `cache.load()` and `cache.dump()` are incompatible\n  with previous versions.\n","tap":{"coverage-map":"map.js","node-arg":["--expose-gc"]},"readmeFilename":"README.md","gitHead":"e92da0a6af50a6f181eeca48cffaf266e2dd10f0","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.0.4_1649533489992_0.1583613736748093"},"_hasShrinkwrap":false},"7.1.0":{"_id":"lru-cache@7.1.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.1.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"980f5b1395ea563db9fa075c033f109e28711023","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.1.0.tgz"},"tap":{"coverage-map":"map.js"},"gitHead":"0ee3152612b96d6f5b4b64a127b93a8676492c8b","_nodeVersion":"17.4.0","_npmVersion":"8.4.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.1.0_1644343588416_0.46202560296111983"},"_hasShrinkwrap":false},"7.1.1":{"_id":"lru-cache@7.1.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.1.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","publishConfig":{"tag":"v7.1-backport"},"dist":{"shasum":"b636127cc13931e6eaa2d8994382c7f73bab29ed","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.1.1.tgz"},"readme":"# lru-cache\n\nA cache object that deletes the least-recently-used items.\n\nSpecify a max number of the most recently used items that you want to keep,\nand this cache will keep that many of the most recently accessed items.\n\nThis is not primarily a TTL cache, and does not make strong TTL guarantees.\nThere is no preemptive pruning of expired items, but you _may_ set a TTL\non the cache or on a single `set`.  If you do so, it will treat expired\nitems as missing, and delete them when fetched.\n\nAs of version 7, this is one of the most performant LRU implementations\navailable in JavaScript, and supports a wide diversity of use cases.\nHowever, note that using some of the features will necessarily impact\nperformance, by causing the cache to have to do more work.  See the\n\"Performance\" section below.\n\n## Installation\n\n```js\nnpm install lru-cache --save\n```\n\n## Usage\n\n```js\nconst LRU = require('lru-cache')\n\n// only 'max' is required, the others are optional, but MAY be\n// required if certain other fields are set.\nconst options = {\n  // the number of most recently used items to keep.\n  // note that we may store fewer items than this if maxSize is hit.\n  max: 500,\n\n  // if you wish to track item size, you must provide a maxSize\n  // note that we still will only keep up to max *actual items*,\n  // so size tracking may cause fewer than max items to be stored.\n  // At the extreme, a single item of maxSize size will cause everything\n  // else in the cache to be dropped when it is added.  Use with caution!\n  // Note also that size tracking can negatively impact performance,\n  // though for most cases, only minimally.\n  maxSize: 5000,\n\n  // function to calculate size of items.  useful if storing strings or\n  // buffers or other items where memory size depends on the object itself.\n  // also note that oversized items do NOT immediately get dropped from\n  // the cache, though they will cause faster turnover in the storage.\n  sizeCalculation: (value, key) => {\n    // return an positive integer which is the size of the item,\n    // if a positive integer is not returned, will use 0 as the size.\n    return 1\n  },\n\n  // function to call when the item is removed from the cache\n  // Note that using this can negatively impact performance.\n  dispose: (value, key) => {\n    freeFromMemoryOrWhatever(value)\n  },\n\n  // max time to live for items before they are considered stale\n  // note that stale items are NOT preemptively removed by default,\n  // and MAY live in the cache, contributing to its LRU max, long after\n  // they have expired.\n  // Also, as this cache is optimized for LRU/MRU operations, some of\n  // the staleness/TTL checks will reduce performance, as they will incur\n  // overhead by deleting items.\n  // Must be a positive integer in ms, defaults to 0, which means \"no TTL\"\n  ttl: 1000 * 60 * 5,\n\n  // return stale items from cache.get() before disposing of them\n  // boolean, default false\n  allowStale: false,\n\n  // update the age of items on cache.get(), renewing their TTL\n  // boolean, default false\n  updateAgeOnGet: false,\n\n  // update the age of items on cache.has(), renewing their TTL\n  // boolean, default false\n  updateAgeOnHas: false,\n\n  // update the \"recently-used\"-ness of items on cache.has()\n  // boolean, default false\n  updateRecencyOnHas: false,\n}\n\nconst cache = new LRU(options)\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\n// non-string keys ARE fully supported\n// but note that it must be THE SAME object, not\n// just a JSON-equivalent object.\nvar someObject = { a: 1 }\ncache.set(someObject, 'a value')\n// Object keys are not toString()-ed\ncache.set('[object Object]', 'a different value')\nassert.equal(cache.get(someObject), 'a value')\n// A similar object with same keys/values won't work,\n// because it's a different object identity\nassert.equal(cache.get({ a: 1 }), undefined)\n\ncache.clear()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\n## Options\n\n* `max` - The maximum number (or size) of items that remain in the cache\n  (assuming no TTL pruning or explicit deletions).  Note that fewer items\n  may be stored if size calculation is used, and `maxSize` is exceeded.\n  This must be a positive finite intger.\n\n* `maxSize` - Set to a positive integer to track the sizes of items added\n  to the cache, and automatically evict items in order to stay below this\n  size.  Note that this may result in fewer than `max` items being stored.\n\n* `sizeCalculation` - Function used to calculate the size of stored\n  items.  If you're storing strings or buffers, then you probably want to\n  do something like `n => n.length`.  The item is passed as the first\n  argument, and the key is passed as the second argumnet.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Requires `maxSize` to be set.\n\n    Deprecated alias: `length`\n\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  stored in the cache.\n\n    It is called *after* the item has been fully removed from the cache, so\n    if you want to put it right back in, that is safe to do.\n\n    Unlike several other options, this may _not_ be overridden by passing\n    an option to `set()`, for performance reasons.  If disposal functions\n    may vary between cache entries, then the entire list must be scanned\n    on every cache swap, even if no disposal function is in use.\n\n    Optional, must be a function.\n\n* `noDisposeOnSet` Set to `true` to suppress calling the `dispose()`\n  function if the entry key is still accessible within the cache.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Boolean, default `false`.  Only relevant if `dispose` option is set.\n\n* `ttl` - max time to live for items before they are considered stale.\n  Note that stale items are NOT preemptively removed by default, and MAY\n  live in the cache, contributing to its LRU max, long after they have\n  expired.\n\n    Also, as this cache is optimized for LRU/MRU operations, some of\n    the staleness/TTL checks will reduce performance, as they will incur\n    overhead by deleting from Map objects rather than simply throwing old\n    Map objects away.\n\n    This is not primarily a TTL cache, and does not make strong TTL\n    guarantees.  There is no pre-emptive pruning of expired items, but you\n    _may_ set a TTL on the cache, and it will treat expired items as missing\n    when they are fetched, and delete them.\n\n    Optional, but must be a positive integer in ms if specified.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Deprecated alias: `maxAge`\n\n* `ttlResolution` - Minimum amount of time in ms in which to check for\n  staleness.  Defaults to `1`, which means that the current time is checked\n  at most once per millisecond.\n\n    Set to `0` to check the current time every time staleness is tested.\n\n    Note that setting this to a higher value _will_ improve performance\n    somewhat while using ttl tracking, albeit at the expense of keeping\n    stale items around a bit longer than intended.\n\n* `ttlAutopurge` - Preemptively remove stale items from the cache.\n\n    Note that this may _significantly_ degrade performance, especially if\n    the cache is storing a large number of items.  It is almost always best\n    to just leave the stale items in the cache, and let them fall out as\n    new items are added.\n\n    Note that this means that `allowStale` is a bit pointless, as stale\n    items will be deleted almost as soon as they expire.\n\n    Use with caution!\n\n    Boolean, default `false`\n\n* `allowStale` - By default, if you set `ttl`, it'll only delete stale\n  items from the cache when you `get(key)`.  That is, it's not\n  preemptively pruning items.\n\n    If you set `allowStale:true`, it'll return the stale value as well as\n    deleting it.  If you don't set this, then it'll return `undefined` when\n    you try to get a stale entry.\n\n    Note that when a stale entry is fetched, _even if it is returned due to\n    `allowStale` being set_, it is removed from the cache immediately.  You\n    can immediately put it back in the cache if you wish, thus resetting the\n    TTL.\n\n    This may be overridden by passing an options object to `cache.get()`.\n    The `cache.has()` method will always return `false` for stale items.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n    Deprecated alias: `stale`\n\n* `updateAgeOnGet` - When using time-expiring entries with `ttl`, setting\n  this to `true` will make each item's age reset to 0 whenever it is\n  retrieved from cache with `get()`, causing it to not expire.  (It can\n  still fall out of cache based on recency of use, of course.)\n\n    This may be overridden by passing an options object to `cache.get()`.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n## API\n\n* `new LRUCache(options)`\n\n    Create a new LRUCache.  All options are documented above, and are on\n    the cache as public members.\n\n* `cache.max`, `cache.maxSize`, `cache.allowStale`, `cache.noDisposeOnSet`,\n  `cache.sizeCalculation`, `cache.dispose`, `cache.maxSize`, `cache.ttl`,\n  `cache.updateAgeOnGet`\n\n    All option names are exposed as public members on the cache object.\n\n    These are intended for read access only.  Changing them during program\n    operation can cause undefined behavior.\n\n* `cache.size`\n\n    The total number of items held in the cache at the current moment.\n\n* `cache.calculatedSize`\n\n    The total size of items in cache when using size tracking.\n\n* `set(key, value, [{ size, sizeCalculation, ttl, noDisposeOnSet }])`\n\n    Add a value to the cache.\n\n    Optional options object may contain `ttl` and `sizeCalculation` as\n    described above, which default to the settings on the cache object.\n\n    Options object my also include `size`, which will prevent calling the\n    `sizeCalculation` function and just use the specified number if it is a\n    positive integer, and `noDisposeOnSet` which will prevent calling a\n    `dispose` function in the case of overwrites.\n\n    Will update the recency of the entry.\n\n* `get(key, { updateAgeOnGet, allowStale } = {}) => value`\n\n    Return a value from the cache.\n\n    Will update the recency of the cache entry found.\n\n    If the key is not found, `get()` will return `undefined`.  This can be\n    confusing when setting values specifically to `undefined`, as in\n    `cache.set(key, undefined)`.  Use `cache.has()` to determine whether a\n    key is present in the cache at all.\n\n* `peek(key, { allowStale } = {}) => value`\n\n    Like `get()` but doesn't update recency or delete stale items.\n\n    Returns `undefined` if the item is stale, unless `allowStale` is set\n    either on the cache or in the options object.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recency or age.\n\n    Will return `false` if the item is stale, even though it is technically\n    in the cache.\n\n* `delete(key)`\n\n    Deletes a key out of the cache.\n\n* `clear()`\n\n    Clear the cache entirely, throwing away all values.\n\n    Deprecated alias: `reset()`\n\n* `keys()`\n\n    Return a generator yielding the keys in the cache.\n\n* `values()`\n\n    Return a generator yielding the values in the cache.\n\n* `entries()`\n\n    Return a generator yielding `[key, value]` pairs.\n\n* `find(fn, [getOptions])`\n\n    Find a value for which the supplied `fn` method returns a truthy value,\n    similar to `Array.find()`.\n\n    `fn` is called as `fn(value, key, cache)`.\n\n    The optional `getOptions` are applied to the resulting `get()` of the\n    item found.\n\n* `dump()`\n\n    Return an array of `[key, entry]` objects which can be passed to\n    `cache.load()`\n\n    Note: this returns an actual array, not a generator, so it can be more\n    easily passed around.\n\n* `load(entries)`\n\n    Reset the cache and load in the items in `entries` in the order listed.\n    Note that the shape of the resulting cache may be different if the same\n    options are not used in both caches.\n\n* `purgeStale()`\n\n    Delete any stale entries.  Returns `true` if anything was removed,\n    `false` otherwise.\n\n    Deprecated alias: `prune`\n\n* `forEach(fn, [thisp])`\n\n    Call the `fn` function with each set of `fn(value, key, cache)` in the\n    LRU cache, from most recent to least recently used.\n\n    Does not affect recency of use.\n\n    If `thisp` is provided, function will be called in the `this`-context\n    of the provided object.\n\n* `rforEach(fn, [thisp])`\n\n    Same as `cache.forEach(fn, thisp)`, but in order from least recently\n    used to most recently used.\n\n* `pop()`\n\n    Evict the least recently used item, returning its value.\n\n    Returns `undefined` if cache is empty.\n\n### Internal Methods and Properties\n\nIn order to optimize performance as much as possible, \"private\" members and\nmethods are exposed on the object as normal properties, rather than being\naccessed via Symbols, private members, or closure variables.\n\n**Do not use or rely on these.**  They will change or be removed without\nnotice.  They will cause undefined behavior if used inappropriately.  There\nis no need or reason to ever call them directly.\n\nThis documentation is here so that it is especially clear that this not\n\"undocumented\" because someone forgot; it _is_ documented, and the\ndocumentation is telling you not to do it.\n\n**Do not report bugs that stem from using these properties.**  They will be\nignored.\n\n* `initializeTTLTracking()` Set up the cache for tracking TTLs\n* `updateItemAge(index)` Called when an item age is updated, by internal ID\n* `setItemTTL(index)` Called when an item ttl is updated, by internal ID\n* `isStale(index)` Called to check an item's staleness, by internal ID\n* `initializeSizeTracking()` Set up the cache for tracking item size.\n  Called automatically when a size is specified.\n* `removeItemSize(index)` Updates the internal size calculation when an\n  item is removed or modified, by internal ID\n* `addItemSize(index)` Updates the internal size calculation when an item\n  is added or modified, by internal ID\n* `indexes()` An iterator over the non-stale internal IDs, from most\n  recently to least recently used.\n* `rindexes()` An iterator over the non-stale internal IDs, from least\n  recently to most recently used.\n* `newIndex()` Create a new internal ID, either reusing a deleted ID,\n  evicting the least recently used ID, or walking to the end of the\n  allotted space.\n* `evict()` Evict the least recently used internal ID, returning its ID.\n  Does not do any bounds checking.\n* `connect(p, n)` Connect the `p` and `n` internal IDs in the linked list.\n* `moveToTail(index)` Move the specified internal ID to the most recently\n  used position.\n* `keyMap` Map of keys to internal IDs\n* `keyList` List of keys by internal ID\n* `valList` List of values by internal ID\n* `sizes` List of calculated sizes by internal ID\n* `ttls` List of TTL values by internal ID\n* `starts` List of start time values by internal ID\n* `next` Array of \"next\" pointers by internal ID\n* `prev` Array of \"previous\" pointers by internal ID\n* `head` Internal ID of least recently used item\n* `tail` Internal ID of most recently used item\n* `free` Stack of deleted internal IDs\n\n## Performance\n\nAs of January 2022, version 7 of this library is one of the most performant\nLRU cache implementations in JavaScript.\n\nBenchmarks can be extremely difficult to get right.  In particular, the\nperformance of set/get/delete operations on objects will vary _wildly_\ndepending on the type of key used.  V8 is highly optimized for objects with\nkeys that are short strings, especially integer numeric strings.  Thus any\nbenchmark which tests _solely_ using numbers as keys will tend to find that\nan object-based approach performs the best.\n\nNote that coercing _anything_ to strings to use as object keys is unsafe,\nunless you can be 100% certain that no other type of value will be used.\nFor example:\n\n```js\nconst myCache = {}\nconst set = (k, v) => myCache[k] = v\nconst get = (k) => myCache[k]\n\nset({}, 'please hang onto this for me')\nset('[object Object]', 'oopsie')\n```\n\nAlso beware of \"Just So\" stories regarding performance.  Garbage collection\nof large (especially: deep) object graphs can be incredibly costly, with\nseveral \"tipping points\" where it increases exponentially.  As a result,\nputting that off until later can make it much worse, and less predictable.\nIf a library performs well, but only in a scenario where the object graph is\nkept shallow, then that won't help you if you are using large objects as\nkeys.\n\nIn general, when attempting to use a library to improve performance (such\nas a cache like this one), it's best to choose an option that will perform\nwell in the sorts of scenarios where you'll actually use it.\n\nThis library is optimized for repeated gets and minimizing eviction time,\nsince that is the expected need of a LRU.  Set operations are somewhat\nslower on average than a few other options, in part because of that\noptimization.  It is assumed that you'll be caching some costly operation,\nideally as rarely as possible, so optimizing set over get would be unwise.\n\nIf performance matters to you:\n\n1. If it's at all possible to use small integer values as keys, and you can\n   guarantee that no other types of values will be used as keys, then do\n   that, and use a cache such as\n   [lru-fast](https://npmjs.com/package/lru-fast), or [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache) which\n   uses an Object as its data store.\n2. Failing that, if at all possible, use short non-numeric strings (ie,\n   less than 256 characters) as your keys, and use [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache).\n3. If the types of your keys will be long strings, strings that look like\n   floats, `null`, objects, or some mix of types, or if you aren't sure,\n   then this library will work well for you.\n4. Do not use a `dispose` function, size tracking, or especially ttl\n   behavior, unless absolutely needed.  These features are convenient, and\n   necessary in some use cases, and every attempt has been made to make the\n   performance impact minimal, but it isn't nothing.\n\n## Breaking Changes in Version 7\n\nThis library changed to a different algorithm and internal data structure\nin version 7, yielding significantly better performance, albeit with\nsome subtle changes as a result.\n\nIf you were relying on the internals of LRUCache in version 6 or before, it\nprobably will not work in version 7 and above.\n\nFor more info, see the [change log](CHANGELOG.md).\n","tap":{"coverage-map":"map.js"},"readmeFilename":"README.md","gitHead":"121148a85bc0da3d1270aa8cf8c12556ff11fc86","_nodeVersion":"17.4.0","_npmVersion":"8.4.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.1.1_1644420326615_0.8904005679247122"},"_hasShrinkwrap":false},"7.1.2":{"_id":"lru-cache@7.1.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.1.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","publishConfig":{"tag":"v7.1-backport"},"dist":{"shasum":"ab90020ba299d9d140cf97570958ec67eb3f2797","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.1.2.tgz"},"readme":"# lru-cache\n\nA cache object that deletes the least-recently-used items.\n\nSpecify a max number of the most recently used items that you want to keep,\nand this cache will keep that many of the most recently accessed items.\n\nThis is not primarily a TTL cache, and does not make strong TTL guarantees.\nThere is no preemptive pruning of expired items, but you _may_ set a TTL\non the cache or on a single `set`.  If you do so, it will treat expired\nitems as missing, and delete them when fetched.\n\nAs of version 7, this is one of the most performant LRU implementations\navailable in JavaScript, and supports a wide diversity of use cases.\nHowever, note that using some of the features will necessarily impact\nperformance, by causing the cache to have to do more work.  See the\n\"Performance\" section below.\n\n## Installation\n\n```js\nnpm install lru-cache --save\n```\n\n## Usage\n\n```js\nconst LRU = require('lru-cache')\n\n// only 'max' is required, the others are optional, but MAY be\n// required if certain other fields are set.\nconst options = {\n  // the number of most recently used items to keep.\n  // note that we may store fewer items than this if maxSize is hit.\n  max: 500,\n\n  // if you wish to track item size, you must provide a maxSize\n  // note that we still will only keep up to max *actual items*,\n  // so size tracking may cause fewer than max items to be stored.\n  // At the extreme, a single item of maxSize size will cause everything\n  // else in the cache to be dropped when it is added.  Use with caution!\n  // Note also that size tracking can negatively impact performance,\n  // though for most cases, only minimally.\n  maxSize: 5000,\n\n  // function to calculate size of items.  useful if storing strings or\n  // buffers or other items where memory size depends on the object itself.\n  // also note that oversized items do NOT immediately get dropped from\n  // the cache, though they will cause faster turnover in the storage.\n  sizeCalculation: (value, key) => {\n    // return an positive integer which is the size of the item,\n    // if a positive integer is not returned, will use 0 as the size.\n    return 1\n  },\n\n  // function to call when the item is removed from the cache\n  // Note that using this can negatively impact performance.\n  dispose: (value, key) => {\n    freeFromMemoryOrWhatever(value)\n  },\n\n  // max time to live for items before they are considered stale\n  // note that stale items are NOT preemptively removed by default,\n  // and MAY live in the cache, contributing to its LRU max, long after\n  // they have expired.\n  // Also, as this cache is optimized for LRU/MRU operations, some of\n  // the staleness/TTL checks will reduce performance, as they will incur\n  // overhead by deleting items.\n  // Must be a positive integer in ms, defaults to 0, which means \"no TTL\"\n  ttl: 1000 * 60 * 5,\n\n  // return stale items from cache.get() before disposing of them\n  // boolean, default false\n  allowStale: false,\n\n  // update the age of items on cache.get(), renewing their TTL\n  // boolean, default false\n  updateAgeOnGet: false,\n\n  // update the age of items on cache.has(), renewing their TTL\n  // boolean, default false\n  updateAgeOnHas: false,\n\n  // update the \"recently-used\"-ness of items on cache.has()\n  // boolean, default false\n  updateRecencyOnHas: false,\n}\n\nconst cache = new LRU(options)\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\n// non-string keys ARE fully supported\n// but note that it must be THE SAME object, not\n// just a JSON-equivalent object.\nvar someObject = { a: 1 }\ncache.set(someObject, 'a value')\n// Object keys are not toString()-ed\ncache.set('[object Object]', 'a different value')\nassert.equal(cache.get(someObject), 'a value')\n// A similar object with same keys/values won't work,\n// because it's a different object identity\nassert.equal(cache.get({ a: 1 }), undefined)\n\ncache.clear()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\n## Options\n\n* `max` - The maximum number (or size) of items that remain in the cache\n  (assuming no TTL pruning or explicit deletions).  Note that fewer items\n  may be stored if size calculation is used, and `maxSize` is exceeded.\n  This must be a positive finite intger.\n\n* `maxSize` - Set to a positive integer to track the sizes of items added\n  to the cache, and automatically evict items in order to stay below this\n  size.  Note that this may result in fewer than `max` items being stored.\n\n* `sizeCalculation` - Function used to calculate the size of stored\n  items.  If you're storing strings or buffers, then you probably want to\n  do something like `n => n.length`.  The item is passed as the first\n  argument, and the key is passed as the second argumnet.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Requires `maxSize` to be set.\n\n    Deprecated alias: `length`\n\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  stored in the cache.\n\n    It is called *after* the item has been fully removed from the cache, so\n    if you want to put it right back in, that is safe to do.\n\n    Unlike several other options, this may _not_ be overridden by passing\n    an option to `set()`, for performance reasons.  If disposal functions\n    may vary between cache entries, then the entire list must be scanned\n    on every cache swap, even if no disposal function is in use.\n\n    Optional, must be a function.\n\n* `noDisposeOnSet` Set to `true` to suppress calling the `dispose()`\n  function if the entry key is still accessible within the cache.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Boolean, default `false`.  Only relevant if `dispose` option is set.\n\n* `ttl` - max time to live for items before they are considered stale.\n  Note that stale items are NOT preemptively removed by default, and MAY\n  live in the cache, contributing to its LRU max, long after they have\n  expired.\n\n    Also, as this cache is optimized for LRU/MRU operations, some of\n    the staleness/TTL checks will reduce performance, as they will incur\n    overhead by deleting from Map objects rather than simply throwing old\n    Map objects away.\n\n    This is not primarily a TTL cache, and does not make strong TTL\n    guarantees.  There is no pre-emptive pruning of expired items, but you\n    _may_ set a TTL on the cache, and it will treat expired items as missing\n    when they are fetched, and delete them.\n\n    Optional, but must be a positive integer in ms if specified.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Deprecated alias: `maxAge`\n\n* `ttlResolution` - Minimum amount of time in ms in which to check for\n  staleness.  Defaults to `1`, which means that the current time is checked\n  at most once per millisecond.\n\n    Set to `0` to check the current time every time staleness is tested.\n\n    Note that setting this to a higher value _will_ improve performance\n    somewhat while using ttl tracking, albeit at the expense of keeping\n    stale items around a bit longer than intended.\n\n* `ttlAutopurge` - Preemptively remove stale items from the cache.\n\n    Note that this may _significantly_ degrade performance, especially if\n    the cache is storing a large number of items.  It is almost always best\n    to just leave the stale items in the cache, and let them fall out as\n    new items are added.\n\n    Note that this means that `allowStale` is a bit pointless, as stale\n    items will be deleted almost as soon as they expire.\n\n    Use with caution!\n\n    Boolean, default `false`\n\n* `allowStale` - By default, if you set `ttl`, it'll only delete stale\n  items from the cache when you `get(key)`.  That is, it's not\n  preemptively pruning items.\n\n    If you set `allowStale:true`, it'll return the stale value as well as\n    deleting it.  If you don't set this, then it'll return `undefined` when\n    you try to get a stale entry.\n\n    Note that when a stale entry is fetched, _even if it is returned due to\n    `allowStale` being set_, it is removed from the cache immediately.  You\n    can immediately put it back in the cache if you wish, thus resetting the\n    TTL.\n\n    This may be overridden by passing an options object to `cache.get()`.\n    The `cache.has()` method will always return `false` for stale items.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n    Deprecated alias: `stale`\n\n* `updateAgeOnGet` - When using time-expiring entries with `ttl`, setting\n  this to `true` will make each item's age reset to 0 whenever it is\n  retrieved from cache with `get()`, causing it to not expire.  (It can\n  still fall out of cache based on recency of use, of course.)\n\n    This may be overridden by passing an options object to `cache.get()`.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n## API\n\n* `new LRUCache(options)`\n\n    Create a new LRUCache.  All options are documented above, and are on\n    the cache as public members.\n\n* `cache.max`, `cache.maxSize`, `cache.allowStale`, `cache.noDisposeOnSet`,\n  `cache.sizeCalculation`, `cache.dispose`, `cache.maxSize`, `cache.ttl`,\n  `cache.updateAgeOnGet`\n\n    All option names are exposed as public members on the cache object.\n\n    These are intended for read access only.  Changing them during program\n    operation can cause undefined behavior.\n\n* `cache.size`\n\n    The total number of items held in the cache at the current moment.\n\n* `cache.calculatedSize`\n\n    The total size of items in cache when using size tracking.\n\n* `set(key, value, [{ size, sizeCalculation, ttl, noDisposeOnSet }])`\n\n    Add a value to the cache.\n\n    Optional options object may contain `ttl` and `sizeCalculation` as\n    described above, which default to the settings on the cache object.\n\n    Options object my also include `size`, which will prevent calling the\n    `sizeCalculation` function and just use the specified number if it is a\n    positive integer, and `noDisposeOnSet` which will prevent calling a\n    `dispose` function in the case of overwrites.\n\n    Will update the recency of the entry.\n\n* `get(key, { updateAgeOnGet, allowStale } = {}) => value`\n\n    Return a value from the cache.\n\n    Will update the recency of the cache entry found.\n\n    If the key is not found, `get()` will return `undefined`.  This can be\n    confusing when setting values specifically to `undefined`, as in\n    `cache.set(key, undefined)`.  Use `cache.has()` to determine whether a\n    key is present in the cache at all.\n\n* `peek(key, { allowStale } = {}) => value`\n\n    Like `get()` but doesn't update recency or delete stale items.\n\n    Returns `undefined` if the item is stale, unless `allowStale` is set\n    either on the cache or in the options object.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recency or age.\n\n    Will return `false` if the item is stale, even though it is technically\n    in the cache.\n\n* `delete(key)`\n\n    Deletes a key out of the cache.\n\n* `clear()`\n\n    Clear the cache entirely, throwing away all values.\n\n    Deprecated alias: `reset()`\n\n* `keys()`\n\n    Return a generator yielding the keys in the cache.\n\n* `values()`\n\n    Return a generator yielding the values in the cache.\n\n* `entries()`\n\n    Return a generator yielding `[key, value]` pairs.\n\n* `find(fn, [getOptions])`\n\n    Find a value for which the supplied `fn` method returns a truthy value,\n    similar to `Array.find()`.\n\n    `fn` is called as `fn(value, key, cache)`.\n\n    The optional `getOptions` are applied to the resulting `get()` of the\n    item found.\n\n* `dump()`\n\n    Return an array of `[key, entry]` objects which can be passed to\n    `cache.load()`\n\n    Note: this returns an actual array, not a generator, so it can be more\n    easily passed around.\n\n* `load(entries)`\n\n    Reset the cache and load in the items in `entries` in the order listed.\n    Note that the shape of the resulting cache may be different if the same\n    options are not used in both caches.\n\n* `purgeStale()`\n\n    Delete any stale entries.  Returns `true` if anything was removed,\n    `false` otherwise.\n\n    Deprecated alias: `prune`\n\n* `forEach(fn, [thisp])`\n\n    Call the `fn` function with each set of `fn(value, key, cache)` in the\n    LRU cache, from most recent to least recently used.\n\n    Does not affect recency of use.\n\n    If `thisp` is provided, function will be called in the `this`-context\n    of the provided object.\n\n* `rforEach(fn, [thisp])`\n\n    Same as `cache.forEach(fn, thisp)`, but in order from least recently\n    used to most recently used.\n\n* `pop()`\n\n    Evict the least recently used item, returning its value.\n\n    Returns `undefined` if cache is empty.\n\n### Internal Methods and Properties\n\nIn order to optimize performance as much as possible, \"private\" members and\nmethods are exposed on the object as normal properties, rather than being\naccessed via Symbols, private members, or closure variables.\n\n**Do not use or rely on these.**  They will change or be removed without\nnotice.  They will cause undefined behavior if used inappropriately.  There\nis no need or reason to ever call them directly.\n\nThis documentation is here so that it is especially clear that this not\n\"undocumented\" because someone forgot; it _is_ documented, and the\ndocumentation is telling you not to do it.\n\n**Do not report bugs that stem from using these properties.**  They will be\nignored.\n\n* `initializeTTLTracking()` Set up the cache for tracking TTLs\n* `updateItemAge(index)` Called when an item age is updated, by internal ID\n* `setItemTTL(index)` Called when an item ttl is updated, by internal ID\n* `isStale(index)` Called to check an item's staleness, by internal ID\n* `initializeSizeTracking()` Set up the cache for tracking item size.\n  Called automatically when a size is specified.\n* `removeItemSize(index)` Updates the internal size calculation when an\n  item is removed or modified, by internal ID\n* `addItemSize(index)` Updates the internal size calculation when an item\n  is added or modified, by internal ID\n* `indexes()` An iterator over the non-stale internal IDs, from most\n  recently to least recently used.\n* `rindexes()` An iterator over the non-stale internal IDs, from least\n  recently to most recently used.\n* `newIndex()` Create a new internal ID, either reusing a deleted ID,\n  evicting the least recently used ID, or walking to the end of the\n  allotted space.\n* `evict()` Evict the least recently used internal ID, returning its ID.\n  Does not do any bounds checking.\n* `connect(p, n)` Connect the `p` and `n` internal IDs in the linked list.\n* `moveToTail(index)` Move the specified internal ID to the most recently\n  used position.\n* `keyMap` Map of keys to internal IDs\n* `keyList` List of keys by internal ID\n* `valList` List of values by internal ID\n* `sizes` List of calculated sizes by internal ID\n* `ttls` List of TTL values by internal ID\n* `starts` List of start time values by internal ID\n* `next` Array of \"next\" pointers by internal ID\n* `prev` Array of \"previous\" pointers by internal ID\n* `head` Internal ID of least recently used item\n* `tail` Internal ID of most recently used item\n* `free` Stack of deleted internal IDs\n\n## Performance\n\nAs of January 2022, version 7 of this library is one of the most performant\nLRU cache implementations in JavaScript.\n\nBenchmarks can be extremely difficult to get right.  In particular, the\nperformance of set/get/delete operations on objects will vary _wildly_\ndepending on the type of key used.  V8 is highly optimized for objects with\nkeys that are short strings, especially integer numeric strings.  Thus any\nbenchmark which tests _solely_ using numbers as keys will tend to find that\nan object-based approach performs the best.\n\nNote that coercing _anything_ to strings to use as object keys is unsafe,\nunless you can be 100% certain that no other type of value will be used.\nFor example:\n\n```js\nconst myCache = {}\nconst set = (k, v) => myCache[k] = v\nconst get = (k) => myCache[k]\n\nset({}, 'please hang onto this for me')\nset('[object Object]', 'oopsie')\n```\n\nAlso beware of \"Just So\" stories regarding performance.  Garbage collection\nof large (especially: deep) object graphs can be incredibly costly, with\nseveral \"tipping points\" where it increases exponentially.  As a result,\nputting that off until later can make it much worse, and less predictable.\nIf a library performs well, but only in a scenario where the object graph is\nkept shallow, then that won't help you if you are using large objects as\nkeys.\n\nIn general, when attempting to use a library to improve performance (such\nas a cache like this one), it's best to choose an option that will perform\nwell in the sorts of scenarios where you'll actually use it.\n\nThis library is optimized for repeated gets and minimizing eviction time,\nsince that is the expected need of a LRU.  Set operations are somewhat\nslower on average than a few other options, in part because of that\noptimization.  It is assumed that you'll be caching some costly operation,\nideally as rarely as possible, so optimizing set over get would be unwise.\n\nIf performance matters to you:\n\n1. If it's at all possible to use small integer values as keys, and you can\n   guarantee that no other types of values will be used as keys, then do\n   that, and use a cache such as\n   [lru-fast](https://npmjs.com/package/lru-fast), or [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache) which\n   uses an Object as its data store.\n2. Failing that, if at all possible, use short non-numeric strings (ie,\n   less than 256 characters) as your keys, and use [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache).\n3. If the types of your keys will be long strings, strings that look like\n   floats, `null`, objects, or some mix of types, or if you aren't sure,\n   then this library will work well for you.\n4. Do not use a `dispose` function, size tracking, or especially ttl\n   behavior, unless absolutely needed.  These features are convenient, and\n   necessary in some use cases, and every attempt has been made to make the\n   performance impact minimal, but it isn't nothing.\n\n## Breaking Changes in Version 7\n\nThis library changed to a different algorithm and internal data structure\nin version 7, yielding significantly better performance, albeit with\nsome subtle changes as a result.\n\nIf you were relying on the internals of LRUCache in version 6 or before, it\nprobably will not work in version 7 and above.\n\nFor more info, see the [change log](CHANGELOG.md).\n","tap":{"coverage-map":"map.js"},"readmeFilename":"README.md","gitHead":"440baeca180e03581e50c37ae873fa862d73a197","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.1.2_1646940841899_0.6806455451382682"},"_hasShrinkwrap":false},"7.1.3":{"_id":"lru-cache@7.1.3","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.1.3","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","heapdump":"^0.3.15","tap":"^16.0.1"},"engines":{"node":">=12"},"main":"index.js","publishConfig":{"tag":"v7.1-backport"},"dist":{"shasum":"8aab7e6d92732a0218b9df5b7218dd32ef2b414d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.1.3.tgz"},"readme":"# lru-cache\n\nA cache object that deletes the least-recently-used items.\n\nSpecify a max number of the most recently used items that you want to keep,\nand this cache will keep that many of the most recently accessed items.\n\nThis is not primarily a TTL cache, and does not make strong TTL guarantees.\nThere is no preemptive pruning of expired items, but you _may_ set a TTL\non the cache or on a single `set`.  If you do so, it will treat expired\nitems as missing, and delete them when fetched.\n\nAs of version 7, this is one of the most performant LRU implementations\navailable in JavaScript, and supports a wide diversity of use cases.\nHowever, note that using some of the features will necessarily impact\nperformance, by causing the cache to have to do more work.  See the\n\"Performance\" section below.\n\n## Installation\n\n```js\nnpm install lru-cache --save\n```\n\n## Usage\n\n```js\nconst LRU = require('lru-cache')\n\n// only 'max' is required, the others are optional, but MAY be\n// required if certain other fields are set.\nconst options = {\n  // the number of most recently used items to keep.\n  // note that we may store fewer items than this if maxSize is hit.\n  max: 500,\n\n  // if you wish to track item size, you must provide a maxSize\n  // note that we still will only keep up to max *actual items*,\n  // so size tracking may cause fewer than max items to be stored.\n  // At the extreme, a single item of maxSize size will cause everything\n  // else in the cache to be dropped when it is added.  Use with caution!\n  // Note also that size tracking can negatively impact performance,\n  // though for most cases, only minimally.\n  maxSize: 5000,\n\n  // function to calculate size of items.  useful if storing strings or\n  // buffers or other items where memory size depends on the object itself.\n  // also note that oversized items do NOT immediately get dropped from\n  // the cache, though they will cause faster turnover in the storage.\n  sizeCalculation: (value, key) => {\n    // return an positive integer which is the size of the item,\n    // if a positive integer is not returned, will use 0 as the size.\n    return 1\n  },\n\n  // function to call when the item is removed from the cache\n  // Note that using this can negatively impact performance.\n  dispose: (value, key) => {\n    freeFromMemoryOrWhatever(value)\n  },\n\n  // max time to live for items before they are considered stale\n  // note that stale items are NOT preemptively removed by default,\n  // and MAY live in the cache, contributing to its LRU max, long after\n  // they have expired.\n  // Also, as this cache is optimized for LRU/MRU operations, some of\n  // the staleness/TTL checks will reduce performance, as they will incur\n  // overhead by deleting items.\n  // Must be a positive integer in ms, defaults to 0, which means \"no TTL\"\n  ttl: 1000 * 60 * 5,\n\n  // return stale items from cache.get() before disposing of them\n  // boolean, default false\n  allowStale: false,\n\n  // update the age of items on cache.get(), renewing their TTL\n  // boolean, default false\n  updateAgeOnGet: false,\n\n  // update the age of items on cache.has(), renewing their TTL\n  // boolean, default false\n  updateAgeOnHas: false,\n\n  // update the \"recently-used\"-ness of items on cache.has()\n  // boolean, default false\n  updateRecencyOnHas: false,\n}\n\nconst cache = new LRU(options)\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\n// non-string keys ARE fully supported\n// but note that it must be THE SAME object, not\n// just a JSON-equivalent object.\nvar someObject = { a: 1 }\ncache.set(someObject, 'a value')\n// Object keys are not toString()-ed\ncache.set('[object Object]', 'a different value')\nassert.equal(cache.get(someObject), 'a value')\n// A similar object with same keys/values won't work,\n// because it's a different object identity\nassert.equal(cache.get({ a: 1 }), undefined)\n\ncache.clear()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\n## Options\n\n* `max` - The maximum number (or size) of items that remain in the cache\n  (assuming no TTL pruning or explicit deletions).  Note that fewer items\n  may be stored if size calculation is used, and `maxSize` is exceeded.\n  This must be a positive finite intger.\n\n* `maxSize` - Set to a positive integer to track the sizes of items added\n  to the cache, and automatically evict items in order to stay below this\n  size.  Note that this may result in fewer than `max` items being stored.\n\n* `sizeCalculation` - Function used to calculate the size of stored\n  items.  If you're storing strings or buffers, then you probably want to\n  do something like `n => n.length`.  The item is passed as the first\n  argument, and the key is passed as the second argumnet.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Requires `maxSize` to be set.\n\n    Deprecated alias: `length`\n\n* `dispose` Function that is called on items when they are dropped\n  from the cache.  This can be handy if you want to close file\n  descriptors or do other cleanup tasks when items are no longer\n  stored in the cache.\n\n    It is called *after* the item has been fully removed from the cache, so\n    if you want to put it right back in, that is safe to do.\n\n    Unlike several other options, this may _not_ be overridden by passing\n    an option to `set()`, for performance reasons.  If disposal functions\n    may vary between cache entries, then the entire list must be scanned\n    on every cache swap, even if no disposal function is in use.\n\n    Optional, must be a function.\n\n* `noDisposeOnSet` Set to `true` to suppress calling the `dispose()`\n  function if the entry key is still accessible within the cache.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Boolean, default `false`.  Only relevant if `dispose` option is set.\n\n* `ttl` - max time to live for items before they are considered stale.\n  Note that stale items are NOT preemptively removed by default, and MAY\n  live in the cache, contributing to its LRU max, long after they have\n  expired.\n\n    Also, as this cache is optimized for LRU/MRU operations, some of\n    the staleness/TTL checks will reduce performance, as they will incur\n    overhead by deleting from Map objects rather than simply throwing old\n    Map objects away.\n\n    This is not primarily a TTL cache, and does not make strong TTL\n    guarantees.  There is no pre-emptive pruning of expired items, but you\n    _may_ set a TTL on the cache, and it will treat expired items as missing\n    when they are fetched, and delete them.\n\n    Optional, but must be a positive integer in ms if specified.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Deprecated alias: `maxAge`\n\n* `ttlResolution` - Minimum amount of time in ms in which to check for\n  staleness.  Defaults to `1`, which means that the current time is checked\n  at most once per millisecond.\n\n    Set to `0` to check the current time every time staleness is tested.\n\n    Note that setting this to a higher value _will_ improve performance\n    somewhat while using ttl tracking, albeit at the expense of keeping\n    stale items around a bit longer than intended.\n\n* `ttlAutopurge` - Preemptively remove stale items from the cache.\n\n    Note that this may _significantly_ degrade performance, especially if\n    the cache is storing a large number of items.  It is almost always best\n    to just leave the stale items in the cache, and let them fall out as\n    new items are added.\n\n    Note that this means that `allowStale` is a bit pointless, as stale\n    items will be deleted almost as soon as they expire.\n\n    Use with caution!\n\n    Boolean, default `false`\n\n* `allowStale` - By default, if you set `ttl`, it'll only delete stale\n  items from the cache when you `get(key)`.  That is, it's not\n  preemptively pruning items.\n\n    If you set `allowStale:true`, it'll return the stale value as well as\n    deleting it.  If you don't set this, then it'll return `undefined` when\n    you try to get a stale entry.\n\n    Note that when a stale entry is fetched, _even if it is returned due to\n    `allowStale` being set_, it is removed from the cache immediately.  You\n    can immediately put it back in the cache if you wish, thus resetting the\n    TTL.\n\n    This may be overridden by passing an options object to `cache.get()`.\n    The `cache.has()` method will always return `false` for stale items.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n    Deprecated alias: `stale`\n\n* `updateAgeOnGet` - When using time-expiring entries with `ttl`, setting\n  this to `true` will make each item's age reset to 0 whenever it is\n  retrieved from cache with `get()`, causing it to not expire.  (It can\n  still fall out of cache based on recency of use, of course.)\n\n    This may be overridden by passing an options object to `cache.get()`.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n## API\n\n* `new LRUCache(options)`\n\n    Create a new LRUCache.  All options are documented above, and are on\n    the cache as public members.\n\n* `cache.max`, `cache.maxSize`, `cache.allowStale`, `cache.noDisposeOnSet`,\n  `cache.sizeCalculation`, `cache.dispose`, `cache.maxSize`, `cache.ttl`,\n  `cache.updateAgeOnGet`\n\n    All option names are exposed as public members on the cache object.\n\n    These are intended for read access only.  Changing them during program\n    operation can cause undefined behavior.\n\n* `cache.size`\n\n    The total number of items held in the cache at the current moment.\n\n* `cache.calculatedSize`\n\n    The total size of items in cache when using size tracking.\n\n* `set(key, value, [{ size, sizeCalculation, ttl, noDisposeOnSet }])`\n\n    Add a value to the cache.\n\n    Optional options object may contain `ttl` and `sizeCalculation` as\n    described above, which default to the settings on the cache object.\n\n    Options object my also include `size`, which will prevent calling the\n    `sizeCalculation` function and just use the specified number if it is a\n    positive integer, and `noDisposeOnSet` which will prevent calling a\n    `dispose` function in the case of overwrites.\n\n    Will update the recency of the entry.\n\n* `get(key, { updateAgeOnGet, allowStale } = {}) => value`\n\n    Return a value from the cache.\n\n    Will update the recency of the cache entry found.\n\n    If the key is not found, `get()` will return `undefined`.  This can be\n    confusing when setting values specifically to `undefined`, as in\n    `cache.set(key, undefined)`.  Use `cache.has()` to determine whether a\n    key is present in the cache at all.\n\n* `peek(key, { allowStale } = {}) => value`\n\n    Like `get()` but doesn't update recency or delete stale items.\n\n    Returns `undefined` if the item is stale, unless `allowStale` is set\n    either on the cache or in the options object.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recency or age.\n\n    Will return `false` if the item is stale, even though it is technically\n    in the cache.\n\n* `delete(key)`\n\n    Deletes a key out of the cache.\n\n* `clear()`\n\n    Clear the cache entirely, throwing away all values.\n\n    Deprecated alias: `reset()`\n\n* `keys()`\n\n    Return a generator yielding the keys in the cache.\n\n* `values()`\n\n    Return a generator yielding the values in the cache.\n\n* `entries()`\n\n    Return a generator yielding `[key, value]` pairs.\n\n* `find(fn, [getOptions])`\n\n    Find a value for which the supplied `fn` method returns a truthy value,\n    similar to `Array.find()`.\n\n    `fn` is called as `fn(value, key, cache)`.\n\n    The optional `getOptions` are applied to the resulting `get()` of the\n    item found.\n\n* `dump()`\n\n    Return an array of `[key, entry]` objects which can be passed to\n    `cache.load()`\n\n    Note: this returns an actual array, not a generator, so it can be more\n    easily passed around.\n\n* `load(entries)`\n\n    Reset the cache and load in the items in `entries` in the order listed.\n    Note that the shape of the resulting cache may be different if the same\n    options are not used in both caches.\n\n* `purgeStale()`\n\n    Delete any stale entries.  Returns `true` if anything was removed,\n    `false` otherwise.\n\n    Deprecated alias: `prune`\n\n* `forEach(fn, [thisp])`\n\n    Call the `fn` function with each set of `fn(value, key, cache)` in the\n    LRU cache, from most recent to least recently used.\n\n    Does not affect recency of use.\n\n    If `thisp` is provided, function will be called in the `this`-context\n    of the provided object.\n\n* `rforEach(fn, [thisp])`\n\n    Same as `cache.forEach(fn, thisp)`, but in order from least recently\n    used to most recently used.\n\n* `pop()`\n\n    Evict the least recently used item, returning its value.\n\n    Returns `undefined` if cache is empty.\n\n### Internal Methods and Properties\n\nIn order to optimize performance as much as possible, \"private\" members and\nmethods are exposed on the object as normal properties, rather than being\naccessed via Symbols, private members, or closure variables.\n\n**Do not use or rely on these.**  They will change or be removed without\nnotice.  They will cause undefined behavior if used inappropriately.  There\nis no need or reason to ever call them directly.\n\nThis documentation is here so that it is especially clear that this not\n\"undocumented\" because someone forgot; it _is_ documented, and the\ndocumentation is telling you not to do it.\n\n**Do not report bugs that stem from using these properties.**  They will be\nignored.\n\n* `initializeTTLTracking()` Set up the cache for tracking TTLs\n* `updateItemAge(index)` Called when an item age is updated, by internal ID\n* `setItemTTL(index)` Called when an item ttl is updated, by internal ID\n* `isStale(index)` Called to check an item's staleness, by internal ID\n* `initializeSizeTracking()` Set up the cache for tracking item size.\n  Called automatically when a size is specified.\n* `removeItemSize(index)` Updates the internal size calculation when an\n  item is removed or modified, by internal ID\n* `addItemSize(index)` Updates the internal size calculation when an item\n  is added or modified, by internal ID\n* `indexes()` An iterator over the non-stale internal IDs, from most\n  recently to least recently used.\n* `rindexes()` An iterator over the non-stale internal IDs, from least\n  recently to most recently used.\n* `newIndex()` Create a new internal ID, either reusing a deleted ID,\n  evicting the least recently used ID, or walking to the end of the\n  allotted space.\n* `evict()` Evict the least recently used internal ID, returning its ID.\n  Does not do any bounds checking.\n* `connect(p, n)` Connect the `p` and `n` internal IDs in the linked list.\n* `moveToTail(index)` Move the specified internal ID to the most recently\n  used position.\n* `keyMap` Map of keys to internal IDs\n* `keyList` List of keys by internal ID\n* `valList` List of values by internal ID\n* `sizes` List of calculated sizes by internal ID\n* `ttls` List of TTL values by internal ID\n* `starts` List of start time values by internal ID\n* `next` Array of \"next\" pointers by internal ID\n* `prev` Array of \"previous\" pointers by internal ID\n* `head` Internal ID of least recently used item\n* `tail` Internal ID of most recently used item\n* `free` Stack of deleted internal IDs\n\n## Performance\n\nAs of January 2022, version 7 of this library is one of the most performant\nLRU cache implementations in JavaScript.\n\nBenchmarks can be extremely difficult to get right.  In particular, the\nperformance of set/get/delete operations on objects will vary _wildly_\ndepending on the type of key used.  V8 is highly optimized for objects with\nkeys that are short strings, especially integer numeric strings.  Thus any\nbenchmark which tests _solely_ using numbers as keys will tend to find that\nan object-based approach performs the best.\n\nNote that coercing _anything_ to strings to use as object keys is unsafe,\nunless you can be 100% certain that no other type of value will be used.\nFor example:\n\n```js\nconst myCache = {}\nconst set = (k, v) => myCache[k] = v\nconst get = (k) => myCache[k]\n\nset({}, 'please hang onto this for me')\nset('[object Object]', 'oopsie')\n```\n\nAlso beware of \"Just So\" stories regarding performance.  Garbage collection\nof large (especially: deep) object graphs can be incredibly costly, with\nseveral \"tipping points\" where it increases exponentially.  As a result,\nputting that off until later can make it much worse, and less predictable.\nIf a library performs well, but only in a scenario where the object graph is\nkept shallow, then that won't help you if you are using large objects as\nkeys.\n\nIn general, when attempting to use a library to improve performance (such\nas a cache like this one), it's best to choose an option that will perform\nwell in the sorts of scenarios where you'll actually use it.\n\nThis library is optimized for repeated gets and minimizing eviction time,\nsince that is the expected need of a LRU.  Set operations are somewhat\nslower on average than a few other options, in part because of that\noptimization.  It is assumed that you'll be caching some costly operation,\nideally as rarely as possible, so optimizing set over get would be unwise.\n\nIf performance matters to you:\n\n1. If it's at all possible to use small integer values as keys, and you can\n   guarantee that no other types of values will be used as keys, then do\n   that, and use a cache such as\n   [lru-fast](https://npmjs.com/package/lru-fast), or [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache) which\n   uses an Object as its data store.\n2. Failing that, if at all possible, use short non-numeric strings (ie,\n   less than 256 characters) as your keys, and use [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache).\n3. If the types of your keys will be long strings, strings that look like\n   floats, `null`, objects, or some mix of types, or if you aren't sure,\n   then this library will work well for you.\n4. Do not use a `dispose` function, size tracking, or especially ttl\n   behavior, unless absolutely needed.  These features are convenient, and\n   necessary in some use cases, and every attempt has been made to make the\n   performance impact minimal, but it isn't nothing.\n\n## Breaking Changes in Version 7\n\nThis library changed to a different algorithm and internal data structure\nin version 7, yielding significantly better performance, albeit with\nsome subtle changes as a result.\n\nIf you were relying on the internals of LRUCache in version 6 or before, it\nprobably will not work in version 7 and above.\n\nFor more info, see the [change log](CHANGELOG.md).\n","tap":{"coverage-map":"map.js","node-arg":["--expose-gc"]},"readmeFilename":"README.md","gitHead":"90980da4996ec7b91048bd13b0a801047892e5ab","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.1.3_1649533298102_0.8880244259816878"},"_hasShrinkwrap":false},"7.2.0":{"_id":"lru-cache@7.2.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.2.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"daff6b477c30eb1bcdcc7dc361fdc1f913c57691","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.2.0.tgz"},"tap":{"coverage-map":"map.js"},"gitHead":"385bf7361acce2a0f0045f61b02cd114b4bc338f","_nodeVersion":"17.4.0","_npmVersion":"8.4.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.2.0_1644348928403_0.749574143670314"},"_hasShrinkwrap":false},"7.2.1":{"_id":"lru-cache@7.2.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.2.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","publishConfig":{"tag":"v7.2-backport"},"dist":{"shasum":"e8655de0cf28ed7ae7dda5710cad12a3fab90c3f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.2.1.tgz"},"readme":"# lru-cache\n\nA cache object that deletes the least-recently-used items.\n\nSpecify a max number of the most recently used items that you want to keep,\nand this cache will keep that many of the most recently accessed items.\n\nThis is not primarily a TTL cache, and does not make strong TTL guarantees.\nThere is no preemptive pruning of expired items, but you _may_ set a TTL\non the cache or on a single `set`.  If you do so, it will treat expired\nitems as missing, and delete them when fetched.\n\nAs of version 7, this is one of the most performant LRU implementations\navailable in JavaScript, and supports a wide diversity of use cases.\nHowever, note that using some of the features will necessarily impact\nperformance, by causing the cache to have to do more work.  See the\n\"Performance\" section below.\n\n## Installation\n\n```js\nnpm install lru-cache --save\n```\n\n## Usage\n\n```js\nconst LRU = require('lru-cache')\n\n// only 'max' is required, the others are optional, but MAY be\n// required if certain other fields are set.\nconst options = {\n  // the number of most recently used items to keep.\n  // note that we may store fewer items than this if maxSize is hit.\n  max: 500,\n\n  // if you wish to track item size, you must provide a maxSize\n  // note that we still will only keep up to max *actual items*,\n  // so size tracking may cause fewer than max items to be stored.\n  // At the extreme, a single item of maxSize size will cause everything\n  // else in the cache to be dropped when it is added.  Use with caution!\n  // Note also that size tracking can negatively impact performance,\n  // though for most cases, only minimally.\n  maxSize: 5000,\n\n  // function to calculate size of items.  useful if storing strings or\n  // buffers or other items where memory size depends on the object itself.\n  // also note that oversized items do NOT immediately get dropped from\n  // the cache, though they will cause faster turnover in the storage.\n  sizeCalculation: (value, key) => {\n    // return an positive integer which is the size of the item,\n    // if a positive integer is not returned, will use 0 as the size.\n    return 1\n  },\n\n  // function to call when the item is removed from the cache\n  // Note that using this can negatively impact performance.\n  dispose: (value, key) => {\n    freeFromMemoryOrWhatever(value)\n  },\n\n  // max time to live for items before they are considered stale\n  // note that stale items are NOT preemptively removed by default,\n  // and MAY live in the cache, contributing to its LRU max, long after\n  // they have expired.\n  // Also, as this cache is optimized for LRU/MRU operations, some of\n  // the staleness/TTL checks will reduce performance, as they will incur\n  // overhead by deleting items.\n  // Must be a positive integer in ms, defaults to 0, which means \"no TTL\"\n  ttl: 1000 * 60 * 5,\n\n  // return stale items from cache.get() before disposing of them\n  // boolean, default false\n  allowStale: false,\n\n  // update the age of items on cache.get(), renewing their TTL\n  // boolean, default false\n  updateAgeOnGet: false,\n\n  // update the age of items on cache.has(), renewing their TTL\n  // boolean, default false\n  updateAgeOnHas: false,\n\n  // update the \"recently-used\"-ness of items on cache.has()\n  // boolean, default false\n  updateRecencyOnHas: false,\n}\n\nconst cache = new LRU(options)\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\n// non-string keys ARE fully supported\n// but note that it must be THE SAME object, not\n// just a JSON-equivalent object.\nvar someObject = { a: 1 }\ncache.set(someObject, 'a value')\n// Object keys are not toString()-ed\ncache.set('[object Object]', 'a different value')\nassert.equal(cache.get(someObject), 'a value')\n// A similar object with same keys/values won't work,\n// because it's a different object identity\nassert.equal(cache.get({ a: 1 }), undefined)\n\ncache.clear()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\n## Options\n\n* `max` - The maximum number (or size) of items that remain in the cache\n  (assuming no TTL pruning or explicit deletions).  Note that fewer items\n  may be stored if size calculation is used, and `maxSize` is exceeded.\n  This must be a positive finite intger.\n\n* `maxSize` - Set to a positive integer to track the sizes of items added\n  to the cache, and automatically evict items in order to stay below this\n  size.  Note that this may result in fewer than `max` items being stored.\n\n* `sizeCalculation` - Function used to calculate the size of stored\n  items.  If you're storing strings or buffers, then you probably want to\n  do something like `n => n.length`.  The item is passed as the first\n  argument, and the key is passed as the second argumnet.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Requires `maxSize` to be set.\n\n    Deprecated alias: `length`\n\n* `dispose` Function that is called on items when they are dropped\n  from the cache, as `this.dispose(value, key, reason)`.\n\n    This can be handy if you want to close file descriptors or do other\n    cleanup tasks when items are no longer stored in the cache.\n\n    **NOTE**: It is called *before* the item has been fully removed from\n    the cache, so if you want to put it right back in, you need to wait\n    until the next tick.  If you try to add it back in during the\n    `dispose()` function call, it will break things in subtle and weird\n    ways.\n\n    Unlike several other options, this may _not_ be overridden by passing\n    an option to `set()`, for performance reasons.  If disposal functions\n    may vary between cache entries, then the entire list must be scanned\n    on every cache swap, even if no disposal function is in use.\n\n    The `reason` will be one of the following strings, corresponding to the\n    reason for the item's deletion:\n\n    * `evict` Item was evicted to make space for a new addition\n    * `set` Item was overwritten by a new value\n    * `delete` Item was removed by explicit `cache.delete(key)` or by\n      calling `cache.clear()`, which deletes everything.\n\n    Optional, must be a function.\n\n* `noDisposeOnSet` Set to `true` to suppress calling the `dispose()`\n  function if the entry key is still accessible within the cache.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Boolean, default `false`.  Only relevant if `dispose` option is set.\n\n* `ttl` - max time to live for items before they are considered stale.\n  Note that stale items are NOT preemptively removed by default, and MAY\n  live in the cache, contributing to its LRU max, long after they have\n  expired.\n\n    Also, as this cache is optimized for LRU/MRU operations, some of\n    the staleness/TTL checks will reduce performance, as they will incur\n    overhead by deleting from Map objects rather than simply throwing old\n    Map objects away.\n\n    This is not primarily a TTL cache, and does not make strong TTL\n    guarantees.  There is no pre-emptive pruning of expired items, but you\n    _may_ set a TTL on the cache, and it will treat expired items as missing\n    when they are fetched, and delete them.\n\n    Optional, but must be a positive integer in ms if specified.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Deprecated alias: `maxAge`\n\n* `ttlResolution` - Minimum amount of time in ms in which to check for\n  staleness.  Defaults to `1`, which means that the current time is checked\n  at most once per millisecond.\n\n    Set to `0` to check the current time every time staleness is tested.\n\n    Note that setting this to a higher value _will_ improve performance\n    somewhat while using ttl tracking, albeit at the expense of keeping\n    stale items around a bit longer than intended.\n\n* `ttlAutopurge` - Preemptively remove stale items from the cache.\n\n    Note that this may _significantly_ degrade performance, especially if\n    the cache is storing a large number of items.  It is almost always best\n    to just leave the stale items in the cache, and let them fall out as\n    new items are added.\n\n    Note that this means that `allowStale` is a bit pointless, as stale\n    items will be deleted almost as soon as they expire.\n\n    Use with caution!\n\n    Boolean, default `false`\n\n* `allowStale` - By default, if you set `ttl`, it'll only delete stale\n  items from the cache when you `get(key)`.  That is, it's not\n  preemptively pruning items.\n\n    If you set `allowStale:true`, it'll return the stale value as well as\n    deleting it.  If you don't set this, then it'll return `undefined` when\n    you try to get a stale entry.\n\n    Note that when a stale entry is fetched, _even if it is returned due to\n    `allowStale` being set_, it is removed from the cache immediately.  You\n    can immediately put it back in the cache if you wish, thus resetting the\n    TTL.\n\n    This may be overridden by passing an options object to `cache.get()`.\n    The `cache.has()` method will always return `false` for stale items.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n    Deprecated alias: `stale`\n\n* `updateAgeOnGet` - When using time-expiring entries with `ttl`, setting\n  this to `true` will make each item's age reset to 0 whenever it is\n  retrieved from cache with `get()`, causing it to not expire.  (It can\n  still fall out of cache based on recency of use, of course.)\n\n    This may be overridden by passing an options object to `cache.get()`.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n## API\n\n* `new LRUCache(options)`\n\n    Create a new LRUCache.  All options are documented above, and are on\n    the cache as public members.\n\n* `cache.max`, `cache.maxSize`, `cache.allowStale`, `cache.noDisposeOnSet`,\n  `cache.sizeCalculation`, `cache.dispose`, `cache.maxSize`, `cache.ttl`,\n  `cache.updateAgeOnGet`\n\n    All option names are exposed as public members on the cache object.\n\n    These are intended for read access only.  Changing them during program\n    operation can cause undefined behavior.\n\n* `cache.size`\n\n    The total number of items held in the cache at the current moment.\n\n* `cache.calculatedSize`\n\n    The total size of items in cache when using size tracking.\n\n* `set(key, value, [{ size, sizeCalculation, ttl, noDisposeOnSet }])`\n\n    Add a value to the cache.\n\n    Optional options object may contain `ttl` and `sizeCalculation` as\n    described above, which default to the settings on the cache object.\n\n    Options object my also include `size`, which will prevent calling the\n    `sizeCalculation` function and just use the specified number if it is a\n    positive integer, and `noDisposeOnSet` which will prevent calling a\n    `dispose` function in the case of overwrites.\n\n    Will update the recency of the entry.\n\n* `get(key, { updateAgeOnGet, allowStale } = {}) => value`\n\n    Return a value from the cache.\n\n    Will update the recency of the cache entry found.\n\n    If the key is not found, `get()` will return `undefined`.  This can be\n    confusing when setting values specifically to `undefined`, as in\n    `cache.set(key, undefined)`.  Use `cache.has()` to determine whether a\n    key is present in the cache at all.\n\n* `peek(key, { allowStale } = {}) => value`\n\n    Like `get()` but doesn't update recency or delete stale items.\n\n    Returns `undefined` if the item is stale, unless `allowStale` is set\n    either on the cache or in the options object.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recency or age.\n\n    Will return `false` if the item is stale, even though it is technically\n    in the cache.\n\n* `delete(key)`\n\n    Deletes a key out of the cache.\n\n* `clear()`\n\n    Clear the cache entirely, throwing away all values.\n\n    Deprecated alias: `reset()`\n\n* `keys()`\n\n    Return a generator yielding the keys in the cache.\n\n* `values()`\n\n    Return a generator yielding the values in the cache.\n\n* `entries()`\n\n    Return a generator yielding `[key, value]` pairs.\n\n* `find(fn, [getOptions])`\n\n    Find a value for which the supplied `fn` method returns a truthy value,\n    similar to `Array.find()`.\n\n    `fn` is called as `fn(value, key, cache)`.\n\n    The optional `getOptions` are applied to the resulting `get()` of the\n    item found.\n\n* `dump()`\n\n    Return an array of `[key, entry]` objects which can be passed to\n    `cache.load()`\n\n    Note: this returns an actual array, not a generator, so it can be more\n    easily passed around.\n\n* `load(entries)`\n\n    Reset the cache and load in the items in `entries` in the order listed.\n    Note that the shape of the resulting cache may be different if the same\n    options are not used in both caches.\n\n* `purgeStale()`\n\n    Delete any stale entries.  Returns `true` if anything was removed,\n    `false` otherwise.\n\n    Deprecated alias: `prune`\n\n* `forEach(fn, [thisp])`\n\n    Call the `fn` function with each set of `fn(value, key, cache)` in the\n    LRU cache, from most recent to least recently used.\n\n    Does not affect recency of use.\n\n    If `thisp` is provided, function will be called in the `this`-context\n    of the provided object.\n\n* `rforEach(fn, [thisp])`\n\n    Same as `cache.forEach(fn, thisp)`, but in order from least recently\n    used to most recently used.\n\n* `pop()`\n\n    Evict the least recently used item, returning its value.\n\n    Returns `undefined` if cache is empty.\n\n### Internal Methods and Properties\n\nIn order to optimize performance as much as possible, \"private\" members and\nmethods are exposed on the object as normal properties, rather than being\naccessed via Symbols, private members, or closure variables.\n\n**Do not use or rely on these.**  They will change or be removed without\nnotice.  They will cause undefined behavior if used inappropriately.  There\nis no need or reason to ever call them directly.\n\nThis documentation is here so that it is especially clear that this not\n\"undocumented\" because someone forgot; it _is_ documented, and the\ndocumentation is telling you not to do it.\n\n**Do not report bugs that stem from using these properties.**  They will be\nignored.\n\n* `initializeTTLTracking()` Set up the cache for tracking TTLs\n* `updateItemAge(index)` Called when an item age is updated, by internal ID\n* `setItemTTL(index)` Called when an item ttl is updated, by internal ID\n* `isStale(index)` Called to check an item's staleness, by internal ID\n* `initializeSizeTracking()` Set up the cache for tracking item size.\n  Called automatically when a size is specified.\n* `removeItemSize(index)` Updates the internal size calculation when an\n  item is removed or modified, by internal ID\n* `addItemSize(index)` Updates the internal size calculation when an item\n  is added or modified, by internal ID\n* `indexes()` An iterator over the non-stale internal IDs, from most\n  recently to least recently used.\n* `rindexes()` An iterator over the non-stale internal IDs, from least\n  recently to most recently used.\n* `newIndex()` Create a new internal ID, either reusing a deleted ID,\n  evicting the least recently used ID, or walking to the end of the\n  allotted space.\n* `evict()` Evict the least recently used internal ID, returning its ID.\n  Does not do any bounds checking.\n* `connect(p, n)` Connect the `p` and `n` internal IDs in the linked list.\n* `moveToTail(index)` Move the specified internal ID to the most recently\n  used position.\n* `keyMap` Map of keys to internal IDs\n* `keyList` List of keys by internal ID\n* `valList` List of values by internal ID\n* `sizes` List of calculated sizes by internal ID\n* `ttls` List of TTL values by internal ID\n* `starts` List of start time values by internal ID\n* `next` Array of \"next\" pointers by internal ID\n* `prev` Array of \"previous\" pointers by internal ID\n* `head` Internal ID of least recently used item\n* `tail` Internal ID of most recently used item\n* `free` Stack of deleted internal IDs\n\n## Performance\n\nAs of January 2022, version 7 of this library is one of the most performant\nLRU cache implementations in JavaScript.\n\nBenchmarks can be extremely difficult to get right.  In particular, the\nperformance of set/get/delete operations on objects will vary _wildly_\ndepending on the type of key used.  V8 is highly optimized for objects with\nkeys that are short strings, especially integer numeric strings.  Thus any\nbenchmark which tests _solely_ using numbers as keys will tend to find that\nan object-based approach performs the best.\n\nNote that coercing _anything_ to strings to use as object keys is unsafe,\nunless you can be 100% certain that no other type of value will be used.\nFor example:\n\n```js\nconst myCache = {}\nconst set = (k, v) => myCache[k] = v\nconst get = (k) => myCache[k]\n\nset({}, 'please hang onto this for me')\nset('[object Object]', 'oopsie')\n```\n\nAlso beware of \"Just So\" stories regarding performance.  Garbage collection\nof large (especially: deep) object graphs can be incredibly costly, with\nseveral \"tipping points\" where it increases exponentially.  As a result,\nputting that off until later can make it much worse, and less predictable.\nIf a library performs well, but only in a scenario where the object graph is\nkept shallow, then that won't help you if you are using large objects as\nkeys.\n\nIn general, when attempting to use a library to improve performance (such\nas a cache like this one), it's best to choose an option that will perform\nwell in the sorts of scenarios where you'll actually use it.\n\nThis library is optimized for repeated gets and minimizing eviction time,\nsince that is the expected need of a LRU.  Set operations are somewhat\nslower on average than a few other options, in part because of that\noptimization.  It is assumed that you'll be caching some costly operation,\nideally as rarely as possible, so optimizing set over get would be unwise.\n\nIf performance matters to you:\n\n1. If it's at all possible to use small integer values as keys, and you can\n   guarantee that no other types of values will be used as keys, then do\n   that, and use a cache such as\n   [lru-fast](https://npmjs.com/package/lru-fast), or [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache) which\n   uses an Object as its data store.\n2. Failing that, if at all possible, use short non-numeric strings (ie,\n   less than 256 characters) as your keys, and use [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache).\n3. If the types of your keys will be long strings, strings that look like\n   floats, `null`, objects, or some mix of types, or if you aren't sure,\n   then this library will work well for you.\n4. Do not use a `dispose` function, size tracking, or especially ttl\n   behavior, unless absolutely needed.  These features are convenient, and\n   necessary in some use cases, and every attempt has been made to make the\n   performance impact minimal, but it isn't nothing.\n\n## Breaking Changes in Version 7\n\nThis library changed to a different algorithm and internal data structure\nin version 7, yielding significantly better performance, albeit with\nsome subtle changes as a result.\n\nIf you were relying on the internals of LRUCache in version 6 or before, it\nprobably will not work in version 7 and above.\n\nFor more info, see the [change log](CHANGELOG.md).\n","tap":{"coverage-map":"map.js"},"readmeFilename":"README.md","gitHead":"f01a2da54238513d4e33cb5ff2bbe97f26176ec6","_nodeVersion":"17.4.0","_npmVersion":"8.4.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.2.1_1644420228836_0.5934694907030751"},"_hasShrinkwrap":false},"7.2.2":{"_id":"lru-cache@7.2.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.2.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","publishConfig":{"tag":"v7.2-backport"},"dist":{"shasum":"f9692a86d9316588110b45de0f9bea1a868f34a8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.2.2.tgz"},"readme":"# lru-cache\n\nA cache object that deletes the least-recently-used items.\n\nSpecify a max number of the most recently used items that you want to keep,\nand this cache will keep that many of the most recently accessed items.\n\nThis is not primarily a TTL cache, and does not make strong TTL guarantees.\nThere is no preemptive pruning of expired items, but you _may_ set a TTL\non the cache or on a single `set`.  If you do so, it will treat expired\nitems as missing, and delete them when fetched.\n\nAs of version 7, this is one of the most performant LRU implementations\navailable in JavaScript, and supports a wide diversity of use cases.\nHowever, note that using some of the features will necessarily impact\nperformance, by causing the cache to have to do more work.  See the\n\"Performance\" section below.\n\n## Installation\n\n```js\nnpm install lru-cache --save\n```\n\n## Usage\n\n```js\nconst LRU = require('lru-cache')\n\n// only 'max' is required, the others are optional, but MAY be\n// required if certain other fields are set.\nconst options = {\n  // the number of most recently used items to keep.\n  // note that we may store fewer items than this if maxSize is hit.\n  max: 500,\n\n  // if you wish to track item size, you must provide a maxSize\n  // note that we still will only keep up to max *actual items*,\n  // so size tracking may cause fewer than max items to be stored.\n  // At the extreme, a single item of maxSize size will cause everything\n  // else in the cache to be dropped when it is added.  Use with caution!\n  // Note also that size tracking can negatively impact performance,\n  // though for most cases, only minimally.\n  maxSize: 5000,\n\n  // function to calculate size of items.  useful if storing strings or\n  // buffers or other items where memory size depends on the object itself.\n  // also note that oversized items do NOT immediately get dropped from\n  // the cache, though they will cause faster turnover in the storage.\n  sizeCalculation: (value, key) => {\n    // return an positive integer which is the size of the item,\n    // if a positive integer is not returned, will use 0 as the size.\n    return 1\n  },\n\n  // function to call when the item is removed from the cache\n  // Note that using this can negatively impact performance.\n  dispose: (value, key) => {\n    freeFromMemoryOrWhatever(value)\n  },\n\n  // max time to live for items before they are considered stale\n  // note that stale items are NOT preemptively removed by default,\n  // and MAY live in the cache, contributing to its LRU max, long after\n  // they have expired.\n  // Also, as this cache is optimized for LRU/MRU operations, some of\n  // the staleness/TTL checks will reduce performance, as they will incur\n  // overhead by deleting items.\n  // Must be a positive integer in ms, defaults to 0, which means \"no TTL\"\n  ttl: 1000 * 60 * 5,\n\n  // return stale items from cache.get() before disposing of them\n  // boolean, default false\n  allowStale: false,\n\n  // update the age of items on cache.get(), renewing their TTL\n  // boolean, default false\n  updateAgeOnGet: false,\n\n  // update the age of items on cache.has(), renewing their TTL\n  // boolean, default false\n  updateAgeOnHas: false,\n\n  // update the \"recently-used\"-ness of items on cache.has()\n  // boolean, default false\n  updateRecencyOnHas: false,\n}\n\nconst cache = new LRU(options)\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\n// non-string keys ARE fully supported\n// but note that it must be THE SAME object, not\n// just a JSON-equivalent object.\nvar someObject = { a: 1 }\ncache.set(someObject, 'a value')\n// Object keys are not toString()-ed\ncache.set('[object Object]', 'a different value')\nassert.equal(cache.get(someObject), 'a value')\n// A similar object with same keys/values won't work,\n// because it's a different object identity\nassert.equal(cache.get({ a: 1 }), undefined)\n\ncache.clear()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\n## Options\n\n* `max` - The maximum number (or size) of items that remain in the cache\n  (assuming no TTL pruning or explicit deletions).  Note that fewer items\n  may be stored if size calculation is used, and `maxSize` is exceeded.\n  This must be a positive finite intger.\n\n* `maxSize` - Set to a positive integer to track the sizes of items added\n  to the cache, and automatically evict items in order to stay below this\n  size.  Note that this may result in fewer than `max` items being stored.\n\n* `sizeCalculation` - Function used to calculate the size of stored\n  items.  If you're storing strings or buffers, then you probably want to\n  do something like `n => n.length`.  The item is passed as the first\n  argument, and the key is passed as the second argumnet.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Requires `maxSize` to be set.\n\n    Deprecated alias: `length`\n\n* `dispose` Function that is called on items when they are dropped\n  from the cache, as `this.dispose(value, key, reason)`.\n\n    This can be handy if you want to close file descriptors or do other\n    cleanup tasks when items are no longer stored in the cache.\n\n    **NOTE**: It is called *before* the item has been fully removed from\n    the cache, so if you want to put it right back in, you need to wait\n    until the next tick.  If you try to add it back in during the\n    `dispose()` function call, it will break things in subtle and weird\n    ways.\n\n    Unlike several other options, this may _not_ be overridden by passing\n    an option to `set()`, for performance reasons.  If disposal functions\n    may vary between cache entries, then the entire list must be scanned\n    on every cache swap, even if no disposal function is in use.\n\n    The `reason` will be one of the following strings, corresponding to the\n    reason for the item's deletion:\n\n    * `evict` Item was evicted to make space for a new addition\n    * `set` Item was overwritten by a new value\n    * `delete` Item was removed by explicit `cache.delete(key)` or by\n      calling `cache.clear()`, which deletes everything.\n\n    Optional, must be a function.\n\n* `noDisposeOnSet` Set to `true` to suppress calling the `dispose()`\n  function if the entry key is still accessible within the cache.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Boolean, default `false`.  Only relevant if `dispose` option is set.\n\n* `ttl` - max time to live for items before they are considered stale.\n  Note that stale items are NOT preemptively removed by default, and MAY\n  live in the cache, contributing to its LRU max, long after they have\n  expired.\n\n    Also, as this cache is optimized for LRU/MRU operations, some of\n    the staleness/TTL checks will reduce performance, as they will incur\n    overhead by deleting from Map objects rather than simply throwing old\n    Map objects away.\n\n    This is not primarily a TTL cache, and does not make strong TTL\n    guarantees.  There is no pre-emptive pruning of expired items, but you\n    _may_ set a TTL on the cache, and it will treat expired items as missing\n    when they are fetched, and delete them.\n\n    Optional, but must be a positive integer in ms if specified.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Deprecated alias: `maxAge`\n\n* `ttlResolution` - Minimum amount of time in ms in which to check for\n  staleness.  Defaults to `1`, which means that the current time is checked\n  at most once per millisecond.\n\n    Set to `0` to check the current time every time staleness is tested.\n\n    Note that setting this to a higher value _will_ improve performance\n    somewhat while using ttl tracking, albeit at the expense of keeping\n    stale items around a bit longer than intended.\n\n* `ttlAutopurge` - Preemptively remove stale items from the cache.\n\n    Note that this may _significantly_ degrade performance, especially if\n    the cache is storing a large number of items.  It is almost always best\n    to just leave the stale items in the cache, and let them fall out as\n    new items are added.\n\n    Note that this means that `allowStale` is a bit pointless, as stale\n    items will be deleted almost as soon as they expire.\n\n    Use with caution!\n\n    Boolean, default `false`\n\n* `allowStale` - By default, if you set `ttl`, it'll only delete stale\n  items from the cache when you `get(key)`.  That is, it's not\n  preemptively pruning items.\n\n    If you set `allowStale:true`, it'll return the stale value as well as\n    deleting it.  If you don't set this, then it'll return `undefined` when\n    you try to get a stale entry.\n\n    Note that when a stale entry is fetched, _even if it is returned due to\n    `allowStale` being set_, it is removed from the cache immediately.  You\n    can immediately put it back in the cache if you wish, thus resetting the\n    TTL.\n\n    This may be overridden by passing an options object to `cache.get()`.\n    The `cache.has()` method will always return `false` for stale items.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n    Deprecated alias: `stale`\n\n* `updateAgeOnGet` - When using time-expiring entries with `ttl`, setting\n  this to `true` will make each item's age reset to 0 whenever it is\n  retrieved from cache with `get()`, causing it to not expire.  (It can\n  still fall out of cache based on recency of use, of course.)\n\n    This may be overridden by passing an options object to `cache.get()`.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n## API\n\n* `new LRUCache(options)`\n\n    Create a new LRUCache.  All options are documented above, and are on\n    the cache as public members.\n\n* `cache.max`, `cache.maxSize`, `cache.allowStale`, `cache.noDisposeOnSet`,\n  `cache.sizeCalculation`, `cache.dispose`, `cache.maxSize`, `cache.ttl`,\n  `cache.updateAgeOnGet`\n\n    All option names are exposed as public members on the cache object.\n\n    These are intended for read access only.  Changing them during program\n    operation can cause undefined behavior.\n\n* `cache.size`\n\n    The total number of items held in the cache at the current moment.\n\n* `cache.calculatedSize`\n\n    The total size of items in cache when using size tracking.\n\n* `set(key, value, [{ size, sizeCalculation, ttl, noDisposeOnSet }])`\n\n    Add a value to the cache.\n\n    Optional options object may contain `ttl` and `sizeCalculation` as\n    described above, which default to the settings on the cache object.\n\n    Options object my also include `size`, which will prevent calling the\n    `sizeCalculation` function and just use the specified number if it is a\n    positive integer, and `noDisposeOnSet` which will prevent calling a\n    `dispose` function in the case of overwrites.\n\n    Will update the recency of the entry.\n\n* `get(key, { updateAgeOnGet, allowStale } = {}) => value`\n\n    Return a value from the cache.\n\n    Will update the recency of the cache entry found.\n\n    If the key is not found, `get()` will return `undefined`.  This can be\n    confusing when setting values specifically to `undefined`, as in\n    `cache.set(key, undefined)`.  Use `cache.has()` to determine whether a\n    key is present in the cache at all.\n\n* `peek(key, { allowStale } = {}) => value`\n\n    Like `get()` but doesn't update recency or delete stale items.\n\n    Returns `undefined` if the item is stale, unless `allowStale` is set\n    either on the cache or in the options object.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recency or age.\n\n    Will return `false` if the item is stale, even though it is technically\n    in the cache.\n\n* `delete(key)`\n\n    Deletes a key out of the cache.\n\n* `clear()`\n\n    Clear the cache entirely, throwing away all values.\n\n    Deprecated alias: `reset()`\n\n* `keys()`\n\n    Return a generator yielding the keys in the cache.\n\n* `values()`\n\n    Return a generator yielding the values in the cache.\n\n* `entries()`\n\n    Return a generator yielding `[key, value]` pairs.\n\n* `find(fn, [getOptions])`\n\n    Find a value for which the supplied `fn` method returns a truthy value,\n    similar to `Array.find()`.\n\n    `fn` is called as `fn(value, key, cache)`.\n\n    The optional `getOptions` are applied to the resulting `get()` of the\n    item found.\n\n* `dump()`\n\n    Return an array of `[key, entry]` objects which can be passed to\n    `cache.load()`\n\n    Note: this returns an actual array, not a generator, so it can be more\n    easily passed around.\n\n* `load(entries)`\n\n    Reset the cache and load in the items in `entries` in the order listed.\n    Note that the shape of the resulting cache may be different if the same\n    options are not used in both caches.\n\n* `purgeStale()`\n\n    Delete any stale entries.  Returns `true` if anything was removed,\n    `false` otherwise.\n\n    Deprecated alias: `prune`\n\n* `forEach(fn, [thisp])`\n\n    Call the `fn` function with each set of `fn(value, key, cache)` in the\n    LRU cache, from most recent to least recently used.\n\n    Does not affect recency of use.\n\n    If `thisp` is provided, function will be called in the `this`-context\n    of the provided object.\n\n* `rforEach(fn, [thisp])`\n\n    Same as `cache.forEach(fn, thisp)`, but in order from least recently\n    used to most recently used.\n\n* `pop()`\n\n    Evict the least recently used item, returning its value.\n\n    Returns `undefined` if cache is empty.\n\n### Internal Methods and Properties\n\nIn order to optimize performance as much as possible, \"private\" members and\nmethods are exposed on the object as normal properties, rather than being\naccessed via Symbols, private members, or closure variables.\n\n**Do not use or rely on these.**  They will change or be removed without\nnotice.  They will cause undefined behavior if used inappropriately.  There\nis no need or reason to ever call them directly.\n\nThis documentation is here so that it is especially clear that this not\n\"undocumented\" because someone forgot; it _is_ documented, and the\ndocumentation is telling you not to do it.\n\n**Do not report bugs that stem from using these properties.**  They will be\nignored.\n\n* `initializeTTLTracking()` Set up the cache for tracking TTLs\n* `updateItemAge(index)` Called when an item age is updated, by internal ID\n* `setItemTTL(index)` Called when an item ttl is updated, by internal ID\n* `isStale(index)` Called to check an item's staleness, by internal ID\n* `initializeSizeTracking()` Set up the cache for tracking item size.\n  Called automatically when a size is specified.\n* `removeItemSize(index)` Updates the internal size calculation when an\n  item is removed or modified, by internal ID\n* `addItemSize(index)` Updates the internal size calculation when an item\n  is added or modified, by internal ID\n* `indexes()` An iterator over the non-stale internal IDs, from most\n  recently to least recently used.\n* `rindexes()` An iterator over the non-stale internal IDs, from least\n  recently to most recently used.\n* `newIndex()` Create a new internal ID, either reusing a deleted ID,\n  evicting the least recently used ID, or walking to the end of the\n  allotted space.\n* `evict()` Evict the least recently used internal ID, returning its ID.\n  Does not do any bounds checking.\n* `connect(p, n)` Connect the `p` and `n` internal IDs in the linked list.\n* `moveToTail(index)` Move the specified internal ID to the most recently\n  used position.\n* `keyMap` Map of keys to internal IDs\n* `keyList` List of keys by internal ID\n* `valList` List of values by internal ID\n* `sizes` List of calculated sizes by internal ID\n* `ttls` List of TTL values by internal ID\n* `starts` List of start time values by internal ID\n* `next` Array of \"next\" pointers by internal ID\n* `prev` Array of \"previous\" pointers by internal ID\n* `head` Internal ID of least recently used item\n* `tail` Internal ID of most recently used item\n* `free` Stack of deleted internal IDs\n\n## Performance\n\nAs of January 2022, version 7 of this library is one of the most performant\nLRU cache implementations in JavaScript.\n\nBenchmarks can be extremely difficult to get right.  In particular, the\nperformance of set/get/delete operations on objects will vary _wildly_\ndepending on the type of key used.  V8 is highly optimized for objects with\nkeys that are short strings, especially integer numeric strings.  Thus any\nbenchmark which tests _solely_ using numbers as keys will tend to find that\nan object-based approach performs the best.\n\nNote that coercing _anything_ to strings to use as object keys is unsafe,\nunless you can be 100% certain that no other type of value will be used.\nFor example:\n\n```js\nconst myCache = {}\nconst set = (k, v) => myCache[k] = v\nconst get = (k) => myCache[k]\n\nset({}, 'please hang onto this for me')\nset('[object Object]', 'oopsie')\n```\n\nAlso beware of \"Just So\" stories regarding performance.  Garbage collection\nof large (especially: deep) object graphs can be incredibly costly, with\nseveral \"tipping points\" where it increases exponentially.  As a result,\nputting that off until later can make it much worse, and less predictable.\nIf a library performs well, but only in a scenario where the object graph is\nkept shallow, then that won't help you if you are using large objects as\nkeys.\n\nIn general, when attempting to use a library to improve performance (such\nas a cache like this one), it's best to choose an option that will perform\nwell in the sorts of scenarios where you'll actually use it.\n\nThis library is optimized for repeated gets and minimizing eviction time,\nsince that is the expected need of a LRU.  Set operations are somewhat\nslower on average than a few other options, in part because of that\noptimization.  It is assumed that you'll be caching some costly operation,\nideally as rarely as possible, so optimizing set over get would be unwise.\n\nIf performance matters to you:\n\n1. If it's at all possible to use small integer values as keys, and you can\n   guarantee that no other types of values will be used as keys, then do\n   that, and use a cache such as\n   [lru-fast](https://npmjs.com/package/lru-fast), or [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache) which\n   uses an Object as its data store.\n2. Failing that, if at all possible, use short non-numeric strings (ie,\n   less than 256 characters) as your keys, and use [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache).\n3. If the types of your keys will be long strings, strings that look like\n   floats, `null`, objects, or some mix of types, or if you aren't sure,\n   then this library will work well for you.\n4. Do not use a `dispose` function, size tracking, or especially ttl\n   behavior, unless absolutely needed.  These features are convenient, and\n   necessary in some use cases, and every attempt has been made to make the\n   performance impact minimal, but it isn't nothing.\n\n## Breaking Changes in Version 7\n\nThis library changed to a different algorithm and internal data structure\nin version 7, yielding significantly better performance, albeit with\nsome subtle changes as a result.\n\nIf you were relying on the internals of LRUCache in version 6 or before, it\nprobably will not work in version 7 and above.\n\nFor more info, see the [change log](CHANGELOG.md).\n","tap":{"coverage-map":"map.js"},"readmeFilename":"README.md","gitHead":"5594005ab0011fe9ebbebb943626a600c659c52c","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.2.2_1646940804670_0.20291375813945156"},"_hasShrinkwrap":false},"7.2.3":{"_id":"lru-cache@7.2.3","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.2.3","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","heapdump":"^0.3.15","tap":"^16.0.1"},"engines":{"node":">=12"},"main":"index.js","publishConfig":{"tag":"v7.2-backport"},"dist":{"shasum":"fbd88fb36e3c2abe413c5258eae7f4587c44fabf","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.2.3.tgz"},"readme":"# lru-cache\n\nA cache object that deletes the least-recently-used items.\n\nSpecify a max number of the most recently used items that you want to keep,\nand this cache will keep that many of the most recently accessed items.\n\nThis is not primarily a TTL cache, and does not make strong TTL guarantees.\nThere is no preemptive pruning of expired items, but you _may_ set a TTL\non the cache or on a single `set`.  If you do so, it will treat expired\nitems as missing, and delete them when fetched.\n\nAs of version 7, this is one of the most performant LRU implementations\navailable in JavaScript, and supports a wide diversity of use cases.\nHowever, note that using some of the features will necessarily impact\nperformance, by causing the cache to have to do more work.  See the\n\"Performance\" section below.\n\n## Installation\n\n```js\nnpm install lru-cache --save\n```\n\n## Usage\n\n```js\nconst LRU = require('lru-cache')\n\n// only 'max' is required, the others are optional, but MAY be\n// required if certain other fields are set.\nconst options = {\n  // the number of most recently used items to keep.\n  // note that we may store fewer items than this if maxSize is hit.\n  max: 500,\n\n  // if you wish to track item size, you must provide a maxSize\n  // note that we still will only keep up to max *actual items*,\n  // so size tracking may cause fewer than max items to be stored.\n  // At the extreme, a single item of maxSize size will cause everything\n  // else in the cache to be dropped when it is added.  Use with caution!\n  // Note also that size tracking can negatively impact performance,\n  // though for most cases, only minimally.\n  maxSize: 5000,\n\n  // function to calculate size of items.  useful if storing strings or\n  // buffers or other items where memory size depends on the object itself.\n  // also note that oversized items do NOT immediately get dropped from\n  // the cache, though they will cause faster turnover in the storage.\n  sizeCalculation: (value, key) => {\n    // return an positive integer which is the size of the item,\n    // if a positive integer is not returned, will use 0 as the size.\n    return 1\n  },\n\n  // function to call when the item is removed from the cache\n  // Note that using this can negatively impact performance.\n  dispose: (value, key) => {\n    freeFromMemoryOrWhatever(value)\n  },\n\n  // max time to live for items before they are considered stale\n  // note that stale items are NOT preemptively removed by default,\n  // and MAY live in the cache, contributing to its LRU max, long after\n  // they have expired.\n  // Also, as this cache is optimized for LRU/MRU operations, some of\n  // the staleness/TTL checks will reduce performance, as they will incur\n  // overhead by deleting items.\n  // Must be a positive integer in ms, defaults to 0, which means \"no TTL\"\n  ttl: 1000 * 60 * 5,\n\n  // return stale items from cache.get() before disposing of them\n  // boolean, default false\n  allowStale: false,\n\n  // update the age of items on cache.get(), renewing their TTL\n  // boolean, default false\n  updateAgeOnGet: false,\n\n  // update the age of items on cache.has(), renewing their TTL\n  // boolean, default false\n  updateAgeOnHas: false,\n\n  // update the \"recently-used\"-ness of items on cache.has()\n  // boolean, default false\n  updateRecencyOnHas: false,\n}\n\nconst cache = new LRU(options)\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\n// non-string keys ARE fully supported\n// but note that it must be THE SAME object, not\n// just a JSON-equivalent object.\nvar someObject = { a: 1 }\ncache.set(someObject, 'a value')\n// Object keys are not toString()-ed\ncache.set('[object Object]', 'a different value')\nassert.equal(cache.get(someObject), 'a value')\n// A similar object with same keys/values won't work,\n// because it's a different object identity\nassert.equal(cache.get({ a: 1 }), undefined)\n\ncache.clear()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\n## Options\n\n* `max` - The maximum number (or size) of items that remain in the cache\n  (assuming no TTL pruning or explicit deletions).  Note that fewer items\n  may be stored if size calculation is used, and `maxSize` is exceeded.\n  This must be a positive finite intger.\n\n* `maxSize` - Set to a positive integer to track the sizes of items added\n  to the cache, and automatically evict items in order to stay below this\n  size.  Note that this may result in fewer than `max` items being stored.\n\n* `sizeCalculation` - Function used to calculate the size of stored\n  items.  If you're storing strings or buffers, then you probably want to\n  do something like `n => n.length`.  The item is passed as the first\n  argument, and the key is passed as the second argumnet.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Requires `maxSize` to be set.\n\n    Deprecated alias: `length`\n\n* `dispose` Function that is called on items when they are dropped\n  from the cache, as `this.dispose(value, key, reason)`.\n\n    This can be handy if you want to close file descriptors or do other\n    cleanup tasks when items are no longer stored in the cache.\n\n    **NOTE**: It is called *before* the item has been fully removed from\n    the cache, so if you want to put it right back in, you need to wait\n    until the next tick.  If you try to add it back in during the\n    `dispose()` function call, it will break things in subtle and weird\n    ways.\n\n    Unlike several other options, this may _not_ be overridden by passing\n    an option to `set()`, for performance reasons.  If disposal functions\n    may vary between cache entries, then the entire list must be scanned\n    on every cache swap, even if no disposal function is in use.\n\n    The `reason` will be one of the following strings, corresponding to the\n    reason for the item's deletion:\n\n    * `evict` Item was evicted to make space for a new addition\n    * `set` Item was overwritten by a new value\n    * `delete` Item was removed by explicit `cache.delete(key)` or by\n      calling `cache.clear()`, which deletes everything.\n\n    Optional, must be a function.\n\n* `noDisposeOnSet` Set to `true` to suppress calling the `dispose()`\n  function if the entry key is still accessible within the cache.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Boolean, default `false`.  Only relevant if `dispose` option is set.\n\n* `ttl` - max time to live for items before they are considered stale.\n  Note that stale items are NOT preemptively removed by default, and MAY\n  live in the cache, contributing to its LRU max, long after they have\n  expired.\n\n    Also, as this cache is optimized for LRU/MRU operations, some of\n    the staleness/TTL checks will reduce performance, as they will incur\n    overhead by deleting from Map objects rather than simply throwing old\n    Map objects away.\n\n    This is not primarily a TTL cache, and does not make strong TTL\n    guarantees.  There is no pre-emptive pruning of expired items, but you\n    _may_ set a TTL on the cache, and it will treat expired items as missing\n    when they are fetched, and delete them.\n\n    Optional, but must be a positive integer in ms if specified.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Deprecated alias: `maxAge`\n\n* `ttlResolution` - Minimum amount of time in ms in which to check for\n  staleness.  Defaults to `1`, which means that the current time is checked\n  at most once per millisecond.\n\n    Set to `0` to check the current time every time staleness is tested.\n\n    Note that setting this to a higher value _will_ improve performance\n    somewhat while using ttl tracking, albeit at the expense of keeping\n    stale items around a bit longer than intended.\n\n* `ttlAutopurge` - Preemptively remove stale items from the cache.\n\n    Note that this may _significantly_ degrade performance, especially if\n    the cache is storing a large number of items.  It is almost always best\n    to just leave the stale items in the cache, and let them fall out as\n    new items are added.\n\n    Note that this means that `allowStale` is a bit pointless, as stale\n    items will be deleted almost as soon as they expire.\n\n    Use with caution!\n\n    Boolean, default `false`\n\n* `allowStale` - By default, if you set `ttl`, it'll only delete stale\n  items from the cache when you `get(key)`.  That is, it's not\n  preemptively pruning items.\n\n    If you set `allowStale:true`, it'll return the stale value as well as\n    deleting it.  If you don't set this, then it'll return `undefined` when\n    you try to get a stale entry.\n\n    Note that when a stale entry is fetched, _even if it is returned due to\n    `allowStale` being set_, it is removed from the cache immediately.  You\n    can immediately put it back in the cache if you wish, thus resetting the\n    TTL.\n\n    This may be overridden by passing an options object to `cache.get()`.\n    The `cache.has()` method will always return `false` for stale items.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n    Deprecated alias: `stale`\n\n* `updateAgeOnGet` - When using time-expiring entries with `ttl`, setting\n  this to `true` will make each item's age reset to 0 whenever it is\n  retrieved from cache with `get()`, causing it to not expire.  (It can\n  still fall out of cache based on recency of use, of course.)\n\n    This may be overridden by passing an options object to `cache.get()`.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n## API\n\n* `new LRUCache(options)`\n\n    Create a new LRUCache.  All options are documented above, and are on\n    the cache as public members.\n\n* `cache.max`, `cache.maxSize`, `cache.allowStale`, `cache.noDisposeOnSet`,\n  `cache.sizeCalculation`, `cache.dispose`, `cache.maxSize`, `cache.ttl`,\n  `cache.updateAgeOnGet`\n\n    All option names are exposed as public members on the cache object.\n\n    These are intended for read access only.  Changing them during program\n    operation can cause undefined behavior.\n\n* `cache.size`\n\n    The total number of items held in the cache at the current moment.\n\n* `cache.calculatedSize`\n\n    The total size of items in cache when using size tracking.\n\n* `set(key, value, [{ size, sizeCalculation, ttl, noDisposeOnSet }])`\n\n    Add a value to the cache.\n\n    Optional options object may contain `ttl` and `sizeCalculation` as\n    described above, which default to the settings on the cache object.\n\n    Options object my also include `size`, which will prevent calling the\n    `sizeCalculation` function and just use the specified number if it is a\n    positive integer, and `noDisposeOnSet` which will prevent calling a\n    `dispose` function in the case of overwrites.\n\n    Will update the recency of the entry.\n\n* `get(key, { updateAgeOnGet, allowStale } = {}) => value`\n\n    Return a value from the cache.\n\n    Will update the recency of the cache entry found.\n\n    If the key is not found, `get()` will return `undefined`.  This can be\n    confusing when setting values specifically to `undefined`, as in\n    `cache.set(key, undefined)`.  Use `cache.has()` to determine whether a\n    key is present in the cache at all.\n\n* `peek(key, { allowStale } = {}) => value`\n\n    Like `get()` but doesn't update recency or delete stale items.\n\n    Returns `undefined` if the item is stale, unless `allowStale` is set\n    either on the cache or in the options object.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recency or age.\n\n    Will return `false` if the item is stale, even though it is technically\n    in the cache.\n\n* `delete(key)`\n\n    Deletes a key out of the cache.\n\n* `clear()`\n\n    Clear the cache entirely, throwing away all values.\n\n    Deprecated alias: `reset()`\n\n* `keys()`\n\n    Return a generator yielding the keys in the cache.\n\n* `values()`\n\n    Return a generator yielding the values in the cache.\n\n* `entries()`\n\n    Return a generator yielding `[key, value]` pairs.\n\n* `find(fn, [getOptions])`\n\n    Find a value for which the supplied `fn` method returns a truthy value,\n    similar to `Array.find()`.\n\n    `fn` is called as `fn(value, key, cache)`.\n\n    The optional `getOptions` are applied to the resulting `get()` of the\n    item found.\n\n* `dump()`\n\n    Return an array of `[key, entry]` objects which can be passed to\n    `cache.load()`\n\n    Note: this returns an actual array, not a generator, so it can be more\n    easily passed around.\n\n* `load(entries)`\n\n    Reset the cache and load in the items in `entries` in the order listed.\n    Note that the shape of the resulting cache may be different if the same\n    options are not used in both caches.\n\n* `purgeStale()`\n\n    Delete any stale entries.  Returns `true` if anything was removed,\n    `false` otherwise.\n\n    Deprecated alias: `prune`\n\n* `forEach(fn, [thisp])`\n\n    Call the `fn` function with each set of `fn(value, key, cache)` in the\n    LRU cache, from most recent to least recently used.\n\n    Does not affect recency of use.\n\n    If `thisp` is provided, function will be called in the `this`-context\n    of the provided object.\n\n* `rforEach(fn, [thisp])`\n\n    Same as `cache.forEach(fn, thisp)`, but in order from least recently\n    used to most recently used.\n\n* `pop()`\n\n    Evict the least recently used item, returning its value.\n\n    Returns `undefined` if cache is empty.\n\n### Internal Methods and Properties\n\nIn order to optimize performance as much as possible, \"private\" members and\nmethods are exposed on the object as normal properties, rather than being\naccessed via Symbols, private members, or closure variables.\n\n**Do not use or rely on these.**  They will change or be removed without\nnotice.  They will cause undefined behavior if used inappropriately.  There\nis no need or reason to ever call them directly.\n\nThis documentation is here so that it is especially clear that this not\n\"undocumented\" because someone forgot; it _is_ documented, and the\ndocumentation is telling you not to do it.\n\n**Do not report bugs that stem from using these properties.**  They will be\nignored.\n\n* `initializeTTLTracking()` Set up the cache for tracking TTLs\n* `updateItemAge(index)` Called when an item age is updated, by internal ID\n* `setItemTTL(index)` Called when an item ttl is updated, by internal ID\n* `isStale(index)` Called to check an item's staleness, by internal ID\n* `initializeSizeTracking()` Set up the cache for tracking item size.\n  Called automatically when a size is specified.\n* `removeItemSize(index)` Updates the internal size calculation when an\n  item is removed or modified, by internal ID\n* `addItemSize(index)` Updates the internal size calculation when an item\n  is added or modified, by internal ID\n* `indexes()` An iterator over the non-stale internal IDs, from most\n  recently to least recently used.\n* `rindexes()` An iterator over the non-stale internal IDs, from least\n  recently to most recently used.\n* `newIndex()` Create a new internal ID, either reusing a deleted ID,\n  evicting the least recently used ID, or walking to the end of the\n  allotted space.\n* `evict()` Evict the least recently used internal ID, returning its ID.\n  Does not do any bounds checking.\n* `connect(p, n)` Connect the `p` and `n` internal IDs in the linked list.\n* `moveToTail(index)` Move the specified internal ID to the most recently\n  used position.\n* `keyMap` Map of keys to internal IDs\n* `keyList` List of keys by internal ID\n* `valList` List of values by internal ID\n* `sizes` List of calculated sizes by internal ID\n* `ttls` List of TTL values by internal ID\n* `starts` List of start time values by internal ID\n* `next` Array of \"next\" pointers by internal ID\n* `prev` Array of \"previous\" pointers by internal ID\n* `head` Internal ID of least recently used item\n* `tail` Internal ID of most recently used item\n* `free` Stack of deleted internal IDs\n\n## Performance\n\nAs of January 2022, version 7 of this library is one of the most performant\nLRU cache implementations in JavaScript.\n\nBenchmarks can be extremely difficult to get right.  In particular, the\nperformance of set/get/delete operations on objects will vary _wildly_\ndepending on the type of key used.  V8 is highly optimized for objects with\nkeys that are short strings, especially integer numeric strings.  Thus any\nbenchmark which tests _solely_ using numbers as keys will tend to find that\nan object-based approach performs the best.\n\nNote that coercing _anything_ to strings to use as object keys is unsafe,\nunless you can be 100% certain that no other type of value will be used.\nFor example:\n\n```js\nconst myCache = {}\nconst set = (k, v) => myCache[k] = v\nconst get = (k) => myCache[k]\n\nset({}, 'please hang onto this for me')\nset('[object Object]', 'oopsie')\n```\n\nAlso beware of \"Just So\" stories regarding performance.  Garbage collection\nof large (especially: deep) object graphs can be incredibly costly, with\nseveral \"tipping points\" where it increases exponentially.  As a result,\nputting that off until later can make it much worse, and less predictable.\nIf a library performs well, but only in a scenario where the object graph is\nkept shallow, then that won't help you if you are using large objects as\nkeys.\n\nIn general, when attempting to use a library to improve performance (such\nas a cache like this one), it's best to choose an option that will perform\nwell in the sorts of scenarios where you'll actually use it.\n\nThis library is optimized for repeated gets and minimizing eviction time,\nsince that is the expected need of a LRU.  Set operations are somewhat\nslower on average than a few other options, in part because of that\noptimization.  It is assumed that you'll be caching some costly operation,\nideally as rarely as possible, so optimizing set over get would be unwise.\n\nIf performance matters to you:\n\n1. If it's at all possible to use small integer values as keys, and you can\n   guarantee that no other types of values will be used as keys, then do\n   that, and use a cache such as\n   [lru-fast](https://npmjs.com/package/lru-fast), or [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache) which\n   uses an Object as its data store.\n2. Failing that, if at all possible, use short non-numeric strings (ie,\n   less than 256 characters) as your keys, and use [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache).\n3. If the types of your keys will be long strings, strings that look like\n   floats, `null`, objects, or some mix of types, or if you aren't sure,\n   then this library will work well for you.\n4. Do not use a `dispose` function, size tracking, or especially ttl\n   behavior, unless absolutely needed.  These features are convenient, and\n   necessary in some use cases, and every attempt has been made to make the\n   performance impact minimal, but it isn't nothing.\n\n## Breaking Changes in Version 7\n\nThis library changed to a different algorithm and internal data structure\nin version 7, yielding significantly better performance, albeit with\nsome subtle changes as a result.\n\nIf you were relying on the internals of LRUCache in version 6 or before, it\nprobably will not work in version 7 and above.\n\nFor more info, see the [change log](CHANGELOG.md).\n","tap":{"coverage-map":"map.js","node-arg":["--expose-gc"]},"readmeFilename":"README.md","gitHead":"83732579b980df95d5215886e701fcb1cc3087df","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.2.3_1649533185138_0.0879470212388509"},"_hasShrinkwrap":false},"7.3.0":{"_id":"lru-cache@7.3.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.3.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"475ed4a39610204d8d23b243e902ed074dd8052d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.3.0.tgz"},"tap":{"coverage-map":"map.js"},"gitHead":"ea96cd5ccb59e2b96ddf717840d5f046f76261e3","_nodeVersion":"17.4.0","_npmVersion":"8.4.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.3.0_1644366579810_0.9272432594774989"},"_hasShrinkwrap":false},"7.3.1":{"_id":"lru-cache@7.3.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.3.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"7702e80694ec2bf19865567a469f2b081fcf53f5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.3.1.tgz"},"tap":{"coverage-map":"map.js"},"gitHead":"13cd6baf5bbe8b427813db80d5f3791998e499af","_nodeVersion":"17.4.0","_npmVersion":"8.4.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.3.1_1644420084416_0.7876810834242707"},"_hasShrinkwrap":false},"7.3.2":{"_id":"lru-cache@7.3.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.3.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","publishConfig":{"tag":"v7.3-backport"},"dist":{"shasum":"2c02862058d222d98caea16a091acbf926e36e5f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.3.2.tgz"},"readme":"# lru-cache\n\nA cache object that deletes the least-recently-used items.\n\nSpecify a max number of the most recently used items that you want to keep,\nand this cache will keep that many of the most recently accessed items.\n\nThis is not primarily a TTL cache, and does not make strong TTL guarantees.\nThere is no preemptive pruning of expired items, but you _may_ set a TTL\non the cache or on a single `set`.  If you do so, it will treat expired\nitems as missing, and delete them when fetched.\n\nAs of version 7, this is one of the most performant LRU implementations\navailable in JavaScript, and supports a wide diversity of use cases.\nHowever, note that using some of the features will necessarily impact\nperformance, by causing the cache to have to do more work.  See the\n\"Performance\" section below.\n\n## Installation\n\n```bash\nnpm install lru-cache --save\n```\n\n## Usage\n\n```js\nconst LRU = require('lru-cache')\n\n// only 'max' is required, the others are optional, but MAY be\n// required if certain other fields are set.\nconst options = {\n  // the number of most recently used items to keep.\n  // note that we may store fewer items than this if maxSize is hit.\n  max: 500,\n\n  // if you wish to track item size, you must provide a maxSize\n  // note that we still will only keep up to max *actual items*,\n  // so size tracking may cause fewer than max items to be stored.\n  // At the extreme, a single item of maxSize size will cause everything\n  // else in the cache to be dropped when it is added.  Use with caution!\n  // Note also that size tracking can negatively impact performance,\n  // though for most cases, only minimally.\n  maxSize: 5000,\n\n  // function to calculate size of items.  useful if storing strings or\n  // buffers or other items where memory size depends on the object itself.\n  // also note that oversized items do NOT immediately get dropped from\n  // the cache, though they will cause faster turnover in the storage.\n  sizeCalculation: (value, key) => {\n    // return an positive integer which is the size of the item,\n    // if a positive integer is not returned, will use 0 as the size.\n    return 1\n  },\n\n  // function to call when the item is removed from the cache\n  // Note that using this can negatively impact performance.\n  dispose: (value, key) => {\n    freeFromMemoryOrWhatever(value)\n  },\n\n  // max time to live for items before they are considered stale\n  // note that stale items are NOT preemptively removed by default,\n  // and MAY live in the cache, contributing to its LRU max, long after\n  // they have expired.\n  // Also, as this cache is optimized for LRU/MRU operations, some of\n  // the staleness/TTL checks will reduce performance, as they will incur\n  // overhead by deleting items.\n  // Must be a positive integer in ms, defaults to 0, which means \"no TTL\"\n  ttl: 1000 * 60 * 5,\n\n  // return stale items from cache.get() before disposing of them\n  // boolean, default false\n  allowStale: false,\n\n  // update the age of items on cache.get(), renewing their TTL\n  // boolean, default false\n  updateAgeOnGet: false,\n\n  // update the age of items on cache.has(), renewing their TTL\n  // boolean, default false\n  updateAgeOnHas: false,\n\n  // update the \"recently-used\"-ness of items on cache.has()\n  // boolean, default false\n  updateRecencyOnHas: false,\n}\n\nconst cache = new LRU(options)\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\n// non-string keys ARE fully supported\n// but note that it must be THE SAME object, not\n// just a JSON-equivalent object.\nvar someObject = { a: 1 }\ncache.set(someObject, 'a value')\n// Object keys are not toString()-ed\ncache.set('[object Object]', 'a different value')\nassert.equal(cache.get(someObject), 'a value')\n// A similar object with same keys/values won't work,\n// because it's a different object identity\nassert.equal(cache.get({ a: 1 }), undefined)\n\ncache.clear()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\n## Options\n\n* `max` - The maximum number (or size) of items that remain in the cache\n  (assuming no TTL pruning or explicit deletions).  Note that fewer items\n  may be stored if size calculation is used, and `maxSize` is exceeded.\n  This must be a positive finite intger.\n\n* `maxSize` - Set to a positive integer to track the sizes of items added\n  to the cache, and automatically evict items in order to stay below this\n  size.  Note that this may result in fewer than `max` items being stored.\n\n* `sizeCalculation` - Function used to calculate the size of stored\n  items.  If you're storing strings or buffers, then you probably want to\n  do something like `n => n.length`.  The item is passed as the first\n  argument, and the key is passed as the second argument.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Requires `maxSize` to be set.\n\n    Deprecated alias: `length`\n\n* `dispose` Function that is called on items when they are dropped\n  from the cache, as `this.dispose(value, key, reason)`.\n\n    This can be handy if you want to close file descriptors or do other\n    cleanup tasks when items are no longer stored in the cache.\n\n    **NOTE**: It is called *before* the item has been fully removed from\n    the cache, so if you want to put it right back in, you need to wait\n    until the next tick.  If you try to add it back in during the\n    `dispose()` function call, it will break things in subtle and weird\n    ways.\n\n    Unlike several other options, this may _not_ be overridden by passing\n    an option to `set()`, for performance reasons.  If disposal functions\n    may vary between cache entries, then the entire list must be scanned\n    on every cache swap, even if no disposal function is in use.\n\n    The `reason` will be one of the following strings, corresponding to the\n    reason for the item's deletion:\n\n    * `evict` Item was evicted to make space for a new addition\n    * `set` Item was overwritten by a new value\n    * `delete` Item was removed by explicit `cache.delete(key)` or by\n      calling `cache.clear()`, which deletes everything.\n\n    Optional, must be a function.\n\n* `disposeAfter` The same as `dispose`, but called _after_ the entry is\n  completely removed and the cache is once again in a clean state.\n\n    It is safe to add an item right back into the cache at this point.\n    However, note that it is _very_ easy to inadvertently create infinite\n    recursion in this way.\n\n* `noDisposeOnSet` Set to `true` to suppress calling the `dispose()`\n  function if the entry key is still accessible within the cache.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Boolean, default `false`.  Only relevant if `dispose` option is set.\n\n* `ttl` - max time to live for items before they are considered stale.\n  Note that stale items are NOT preemptively removed by default, and MAY\n  live in the cache, contributing to its LRU max, long after they have\n  expired.\n\n    Also, as this cache is optimized for LRU/MRU operations, some of\n    the staleness/TTL checks will reduce performance, as they will incur\n    overhead by deleting from Map objects rather than simply throwing old\n    Map objects away.\n\n    This is not primarily a TTL cache, and does not make strong TTL\n    guarantees.  There is no pre-emptive pruning of expired items, but you\n    _may_ set a TTL on the cache, and it will treat expired items as missing\n    when they are fetched, and delete them.\n\n    Optional, but must be a positive integer in ms if specified.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Deprecated alias: `maxAge`\n\n* `ttlResolution` - Minimum amount of time in ms in which to check for\n  staleness.  Defaults to `1`, which means that the current time is checked\n  at most once per millisecond.\n\n    Set to `0` to check the current time every time staleness is tested.\n\n    Note that setting this to a higher value _will_ improve performance\n    somewhat while using ttl tracking, albeit at the expense of keeping\n    stale items around a bit longer than intended.\n\n* `ttlAutopurge` - Preemptively remove stale items from the cache.\n\n    Note that this may _significantly_ degrade performance, especially if\n    the cache is storing a large number of items.  It is almost always best\n    to just leave the stale items in the cache, and let them fall out as\n    new items are added.\n\n    Note that this means that `allowStale` is a bit pointless, as stale\n    items will be deleted almost as soon as they expire.\n\n    Use with caution!\n\n    Boolean, default `false`\n\n* `allowStale` - By default, if you set `ttl`, it'll only delete stale\n  items from the cache when you `get(key)`.  That is, it's not\n  preemptively pruning items.\n\n    If you set `allowStale:true`, it'll return the stale value as well as\n    deleting it.  If you don't set this, then it'll return `undefined` when\n    you try to get a stale entry.\n\n    Note that when a stale entry is fetched, _even if it is returned due to\n    `allowStale` being set_, it is removed from the cache immediately.  You\n    can immediately put it back in the cache if you wish, thus resetting the\n    TTL.\n\n    This may be overridden by passing an options object to `cache.get()`.\n    The `cache.has()` method will always return `false` for stale items.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n    Deprecated alias: `stale`\n\n* `updateAgeOnGet` - When using time-expiring entries with `ttl`, setting\n  this to `true` will make each item's age reset to 0 whenever it is\n  retrieved from cache with `get()`, causing it to not expire.  (It can\n  still fall out of cache based on recency of use, of course.)\n\n    This may be overridden by passing an options object to `cache.get()`.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n## API\n\n* `new LRUCache(options)`\n\n    Create a new LRUCache.  All options are documented above, and are on\n    the cache as public members.\n\n* `cache.max`, `cache.maxSize`, `cache.allowStale`, `cache.noDisposeOnSet`,\n  `cache.sizeCalculation`, `cache.dispose`, `cache.maxSize`, `cache.ttl`,\n  `cache.updateAgeOnGet`\n\n    All option names are exposed as public members on the cache object.\n\n    These are intended for read access only.  Changing them during program\n    operation can cause undefined behavior.\n\n* `cache.size`\n\n    The total number of items held in the cache at the current moment.\n\n* `cache.calculatedSize`\n\n    The total size of items in cache when using size tracking.\n\n* `set(key, value, [{ size, sizeCalculation, ttl, noDisposeOnSet }])`\n\n    Add a value to the cache.\n\n    Optional options object may contain `ttl` and `sizeCalculation` as\n    described above, which default to the settings on the cache object.\n\n    Options object my also include `size`, which will prevent calling the\n    `sizeCalculation` function and just use the specified number if it is a\n    positive integer, and `noDisposeOnSet` which will prevent calling a\n    `dispose` function in the case of overwrites.\n\n    Will update the recency of the entry.\n\n    Returns the cache object.\n\n* `get(key, { updateAgeOnGet, allowStale } = {}) => value`\n\n    Return a value from the cache.\n\n    Will update the recency of the cache entry found.\n\n    If the key is not found, `get()` will return `undefined`.  This can be\n    confusing when setting values specifically to `undefined`, as in\n    `cache.set(key, undefined)`.  Use `cache.has()` to determine whether a\n    key is present in the cache at all.\n\n* `peek(key, { allowStale } = {}) => value`\n\n    Like `get()` but doesn't update recency or delete stale items.\n\n    Returns `undefined` if the item is stale, unless `allowStale` is set\n    either on the cache or in the options object.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recency or age.\n\n    Will return `false` if the item is stale, even though it is technically\n    in the cache.\n\n* `delete(key)`\n\n    Deletes a key out of the cache.\n\n    Returns `true` if the key was deleted, `false` otherwise.\n\n* `clear()`\n\n    Clear the cache entirely, throwing away all values.\n\n    Deprecated alias: `reset()`\n\n* `keys()`\n\n    Return a generator yielding the keys in the cache.\n\n* `values()`\n\n    Return a generator yielding the values in the cache.\n\n* `entries()`\n\n    Return a generator yielding `[key, value]` pairs.\n\n* `find(fn, [getOptions])`\n\n    Find a value for which the supplied `fn` method returns a truthy value,\n    similar to `Array.find()`.\n\n    `fn` is called as `fn(value, key, cache)`.\n\n    The optional `getOptions` are applied to the resulting `get()` of the\n    item found.\n\n* `dump()`\n\n    Return an array of `[key, entry]` objects which can be passed to\n    `cache.load()`\n\n    Note: this returns an actual array, not a generator, so it can be more\n    easily passed around.\n\n* `load(entries)`\n\n    Reset the cache and load in the items in `entries` in the order listed.\n    Note that the shape of the resulting cache may be different if the same\n    options are not used in both caches.\n\n* `purgeStale()`\n\n    Delete any stale entries.  Returns `true` if anything was removed,\n    `false` otherwise.\n\n    Deprecated alias: `prune`\n\n* `forEach(fn, [thisp])`\n\n    Call the `fn` function with each set of `fn(value, key, cache)` in the\n    LRU cache, from most recent to least recently used.\n\n    Does not affect recency of use.\n\n    If `thisp` is provided, function will be called in the `this`-context\n    of the provided object.\n\n* `rforEach(fn, [thisp])`\n\n    Same as `cache.forEach(fn, thisp)`, but in order from least recently\n    used to most recently used.\n\n* `pop()`\n\n    Evict the least recently used item, returning its value.\n\n    Returns `undefined` if cache is empty.\n\n### Internal Methods and Properties\n\nIn order to optimize performance as much as possible, \"private\" members and\nmethods are exposed on the object as normal properties, rather than being\naccessed via Symbols, private members, or closure variables.\n\n**Do not use or rely on these.**  They will change or be removed without\nnotice.  They will cause undefined behavior if used inappropriately.  There\nis no need or reason to ever call them directly.\n\nThis documentation is here so that it is especially clear that this not\n\"undocumented\" because someone forgot; it _is_ documented, and the\ndocumentation is telling you not to do it.\n\n**Do not report bugs that stem from using these properties.**  They will be\nignored.\n\n* `initializeTTLTracking()` Set up the cache for tracking TTLs\n* `updateItemAge(index)` Called when an item age is updated, by internal ID\n* `setItemTTL(index)` Called when an item ttl is updated, by internal ID\n* `isStale(index)` Called to check an item's staleness, by internal ID\n* `initializeSizeTracking()` Set up the cache for tracking item size.\n  Called automatically when a size is specified.\n* `removeItemSize(index)` Updates the internal size calculation when an\n  item is removed or modified, by internal ID\n* `addItemSize(index)` Updates the internal size calculation when an item\n  is added or modified, by internal ID\n* `indexes()` An iterator over the non-stale internal IDs, from most\n  recently to least recently used.\n* `rindexes()` An iterator over the non-stale internal IDs, from least\n  recently to most recently used.\n* `newIndex()` Create a new internal ID, either reusing a deleted ID,\n  evicting the least recently used ID, or walking to the end of the\n  allotted space.\n* `evict()` Evict the least recently used internal ID, returning its ID.\n  Does not do any bounds checking.\n* `connect(p, n)` Connect the `p` and `n` internal IDs in the linked list.\n* `moveToTail(index)` Move the specified internal ID to the most recently\n  used position.\n* `keyMap` Map of keys to internal IDs\n* `keyList` List of keys by internal ID\n* `valList` List of values by internal ID\n* `sizes` List of calculated sizes by internal ID\n* `ttls` List of TTL values by internal ID\n* `starts` List of start time values by internal ID\n* `next` Array of \"next\" pointers by internal ID\n* `prev` Array of \"previous\" pointers by internal ID\n* `head` Internal ID of least recently used item\n* `tail` Internal ID of most recently used item\n* `free` Stack of deleted internal IDs\n\n## Performance\n\nAs of January 2022, version 7 of this library is one of the most performant\nLRU cache implementations in JavaScript.\n\nBenchmarks can be extremely difficult to get right.  In particular, the\nperformance of set/get/delete operations on objects will vary _wildly_\ndepending on the type of key used.  V8 is highly optimized for objects with\nkeys that are short strings, especially integer numeric strings.  Thus any\nbenchmark which tests _solely_ using numbers as keys will tend to find that\nan object-based approach performs the best.\n\nNote that coercing _anything_ to strings to use as object keys is unsafe,\nunless you can be 100% certain that no other type of value will be used.\nFor example:\n\n```js\nconst myCache = {}\nconst set = (k, v) => myCache[k] = v\nconst get = (k) => myCache[k]\n\nset({}, 'please hang onto this for me')\nset('[object Object]', 'oopsie')\n```\n\nAlso beware of \"Just So\" stories regarding performance.  Garbage collection\nof large (especially: deep) object graphs can be incredibly costly, with\nseveral \"tipping points\" where it increases exponentially.  As a result,\nputting that off until later can make it much worse, and less predictable.\nIf a library performs well, but only in a scenario where the object graph is\nkept shallow, then that won't help you if you are using large objects as\nkeys.\n\nIn general, when attempting to use a library to improve performance (such\nas a cache like this one), it's best to choose an option that will perform\nwell in the sorts of scenarios where you'll actually use it.\n\nThis library is optimized for repeated gets and minimizing eviction time,\nsince that is the expected need of a LRU.  Set operations are somewhat\nslower on average than a few other options, in part because of that\noptimization.  It is assumed that you'll be caching some costly operation,\nideally as rarely as possible, so optimizing set over get would be unwise.\n\nIf performance matters to you:\n\n1. If it's at all possible to use small integer values as keys, and you can\n   guarantee that no other types of values will be used as keys, then do\n   that, and use a cache such as\n   [lru-fast](https://npmjs.com/package/lru-fast), or [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache) which\n   uses an Object as its data store.\n2. Failing that, if at all possible, use short non-numeric strings (ie,\n   less than 256 characters) as your keys, and use [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache).\n3. If the types of your keys will be long strings, strings that look like\n   floats, `null`, objects, or some mix of types, or if you aren't sure,\n   then this library will work well for you.\n4. Do not use a `dispose` function, size tracking, or especially ttl\n   behavior, unless absolutely needed.  These features are convenient, and\n   necessary in some use cases, and every attempt has been made to make the\n   performance impact minimal, but it isn't nothing.\n\n## Breaking Changes in Version 7\n\nThis library changed to a different algorithm and internal data structure\nin version 7, yielding significantly better performance, albeit with\nsome subtle changes as a result.\n\nIf you were relying on the internals of LRUCache in version 6 or before, it\nprobably will not work in version 7 and above.\n\nFor more info, see the [change log](CHANGELOG.md).\n","tap":{"coverage-map":"map.js"},"readmeFilename":"README.md","gitHead":"a20078b4a6b13cfa88f64e7697aac2cd1e80bc23","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.3.2_1646940762400_0.03571872113995811"},"_hasShrinkwrap":false},"7.3.3":{"_id":"lru-cache@7.3.3","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.3.3","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"benchmark":"^2.1.4","heapdump":"^0.3.15","tap":"^16.0.1"},"engines":{"node":">=12"},"main":"index.js","publishConfig":{"tag":"v7.3-backport"},"dist":{"shasum":"a78f086b73a6eb4b61cda8e3e1b86387b4b81d33","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.3.3.tgz"},"readme":"# lru-cache\n\nA cache object that deletes the least-recently-used items.\n\nSpecify a max number of the most recently used items that you want to keep,\nand this cache will keep that many of the most recently accessed items.\n\nThis is not primarily a TTL cache, and does not make strong TTL guarantees.\nThere is no preemptive pruning of expired items, but you _may_ set a TTL\non the cache or on a single `set`.  If you do so, it will treat expired\nitems as missing, and delete them when fetched.\n\nAs of version 7, this is one of the most performant LRU implementations\navailable in JavaScript, and supports a wide diversity of use cases.\nHowever, note that using some of the features will necessarily impact\nperformance, by causing the cache to have to do more work.  See the\n\"Performance\" section below.\n\n## Installation\n\n```bash\nnpm install lru-cache --save\n```\n\n## Usage\n\n```js\nconst LRU = require('lru-cache')\n\n// only 'max' is required, the others are optional, but MAY be\n// required if certain other fields are set.\nconst options = {\n  // the number of most recently used items to keep.\n  // note that we may store fewer items than this if maxSize is hit.\n  max: 500,\n\n  // if you wish to track item size, you must provide a maxSize\n  // note that we still will only keep up to max *actual items*,\n  // so size tracking may cause fewer than max items to be stored.\n  // At the extreme, a single item of maxSize size will cause everything\n  // else in the cache to be dropped when it is added.  Use with caution!\n  // Note also that size tracking can negatively impact performance,\n  // though for most cases, only minimally.\n  maxSize: 5000,\n\n  // function to calculate size of items.  useful if storing strings or\n  // buffers or other items where memory size depends on the object itself.\n  // also note that oversized items do NOT immediately get dropped from\n  // the cache, though they will cause faster turnover in the storage.\n  sizeCalculation: (value, key) => {\n    // return an positive integer which is the size of the item,\n    // if a positive integer is not returned, will use 0 as the size.\n    return 1\n  },\n\n  // function to call when the item is removed from the cache\n  // Note that using this can negatively impact performance.\n  dispose: (value, key) => {\n    freeFromMemoryOrWhatever(value)\n  },\n\n  // max time to live for items before they are considered stale\n  // note that stale items are NOT preemptively removed by default,\n  // and MAY live in the cache, contributing to its LRU max, long after\n  // they have expired.\n  // Also, as this cache is optimized for LRU/MRU operations, some of\n  // the staleness/TTL checks will reduce performance, as they will incur\n  // overhead by deleting items.\n  // Must be a positive integer in ms, defaults to 0, which means \"no TTL\"\n  ttl: 1000 * 60 * 5,\n\n  // return stale items from cache.get() before disposing of them\n  // boolean, default false\n  allowStale: false,\n\n  // update the age of items on cache.get(), renewing their TTL\n  // boolean, default false\n  updateAgeOnGet: false,\n\n  // update the age of items on cache.has(), renewing their TTL\n  // boolean, default false\n  updateAgeOnHas: false,\n\n  // update the \"recently-used\"-ness of items on cache.has()\n  // boolean, default false\n  updateRecencyOnHas: false,\n}\n\nconst cache = new LRU(options)\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\n// non-string keys ARE fully supported\n// but note that it must be THE SAME object, not\n// just a JSON-equivalent object.\nvar someObject = { a: 1 }\ncache.set(someObject, 'a value')\n// Object keys are not toString()-ed\ncache.set('[object Object]', 'a different value')\nassert.equal(cache.get(someObject), 'a value')\n// A similar object with same keys/values won't work,\n// because it's a different object identity\nassert.equal(cache.get({ a: 1 }), undefined)\n\ncache.clear()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\n## Options\n\n* `max` - The maximum number (or size) of items that remain in the cache\n  (assuming no TTL pruning or explicit deletions).  Note that fewer items\n  may be stored if size calculation is used, and `maxSize` is exceeded.\n  This must be a positive finite intger.\n\n* `maxSize` - Set to a positive integer to track the sizes of items added\n  to the cache, and automatically evict items in order to stay below this\n  size.  Note that this may result in fewer than `max` items being stored.\n\n* `sizeCalculation` - Function used to calculate the size of stored\n  items.  If you're storing strings or buffers, then you probably want to\n  do something like `n => n.length`.  The item is passed as the first\n  argument, and the key is passed as the second argument.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Requires `maxSize` to be set.\n\n    Deprecated alias: `length`\n\n* `dispose` Function that is called on items when they are dropped\n  from the cache, as `this.dispose(value, key, reason)`.\n\n    This can be handy if you want to close file descriptors or do other\n    cleanup tasks when items are no longer stored in the cache.\n\n    **NOTE**: It is called *before* the item has been fully removed from\n    the cache, so if you want to put it right back in, you need to wait\n    until the next tick.  If you try to add it back in during the\n    `dispose()` function call, it will break things in subtle and weird\n    ways.\n\n    Unlike several other options, this may _not_ be overridden by passing\n    an option to `set()`, for performance reasons.  If disposal functions\n    may vary between cache entries, then the entire list must be scanned\n    on every cache swap, even if no disposal function is in use.\n\n    The `reason` will be one of the following strings, corresponding to the\n    reason for the item's deletion:\n\n    * `evict` Item was evicted to make space for a new addition\n    * `set` Item was overwritten by a new value\n    * `delete` Item was removed by explicit `cache.delete(key)` or by\n      calling `cache.clear()`, which deletes everything.\n\n    Optional, must be a function.\n\n* `disposeAfter` The same as `dispose`, but called _after_ the entry is\n  completely removed and the cache is once again in a clean state.\n\n    It is safe to add an item right back into the cache at this point.\n    However, note that it is _very_ easy to inadvertently create infinite\n    recursion in this way.\n\n* `noDisposeOnSet` Set to `true` to suppress calling the `dispose()`\n  function if the entry key is still accessible within the cache.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Boolean, default `false`.  Only relevant if `dispose` option is set.\n\n* `ttl` - max time to live for items before they are considered stale.\n  Note that stale items are NOT preemptively removed by default, and MAY\n  live in the cache, contributing to its LRU max, long after they have\n  expired.\n\n    Also, as this cache is optimized for LRU/MRU operations, some of\n    the staleness/TTL checks will reduce performance, as they will incur\n    overhead by deleting from Map objects rather than simply throwing old\n    Map objects away.\n\n    This is not primarily a TTL cache, and does not make strong TTL\n    guarantees.  There is no pre-emptive pruning of expired items, but you\n    _may_ set a TTL on the cache, and it will treat expired items as missing\n    when they are fetched, and delete them.\n\n    Optional, but must be a positive integer in ms if specified.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Deprecated alias: `maxAge`\n\n* `ttlResolution` - Minimum amount of time in ms in which to check for\n  staleness.  Defaults to `1`, which means that the current time is checked\n  at most once per millisecond.\n\n    Set to `0` to check the current time every time staleness is tested.\n\n    Note that setting this to a higher value _will_ improve performance\n    somewhat while using ttl tracking, albeit at the expense of keeping\n    stale items around a bit longer than intended.\n\n* `ttlAutopurge` - Preemptively remove stale items from the cache.\n\n    Note that this may _significantly_ degrade performance, especially if\n    the cache is storing a large number of items.  It is almost always best\n    to just leave the stale items in the cache, and let them fall out as\n    new items are added.\n\n    Note that this means that `allowStale` is a bit pointless, as stale\n    items will be deleted almost as soon as they expire.\n\n    Use with caution!\n\n    Boolean, default `false`\n\n* `allowStale` - By default, if you set `ttl`, it'll only delete stale\n  items from the cache when you `get(key)`.  That is, it's not\n  preemptively pruning items.\n\n    If you set `allowStale:true`, it'll return the stale value as well as\n    deleting it.  If you don't set this, then it'll return `undefined` when\n    you try to get a stale entry.\n\n    Note that when a stale entry is fetched, _even if it is returned due to\n    `allowStale` being set_, it is removed from the cache immediately.  You\n    can immediately put it back in the cache if you wish, thus resetting the\n    TTL.\n\n    This may be overridden by passing an options object to `cache.get()`.\n    The `cache.has()` method will always return `false` for stale items.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n    Deprecated alias: `stale`\n\n* `updateAgeOnGet` - When using time-expiring entries with `ttl`, setting\n  this to `true` will make each item's age reset to 0 whenever it is\n  retrieved from cache with `get()`, causing it to not expire.  (It can\n  still fall out of cache based on recency of use, of course.)\n\n    This may be overridden by passing an options object to `cache.get()`.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n## API\n\n* `new LRUCache(options)`\n\n    Create a new LRUCache.  All options are documented above, and are on\n    the cache as public members.\n\n* `cache.max`, `cache.maxSize`, `cache.allowStale`, `cache.noDisposeOnSet`,\n  `cache.sizeCalculation`, `cache.dispose`, `cache.maxSize`, `cache.ttl`,\n  `cache.updateAgeOnGet`\n\n    All option names are exposed as public members on the cache object.\n\n    These are intended for read access only.  Changing them during program\n    operation can cause undefined behavior.\n\n* `cache.size`\n\n    The total number of items held in the cache at the current moment.\n\n* `cache.calculatedSize`\n\n    The total size of items in cache when using size tracking.\n\n* `set(key, value, [{ size, sizeCalculation, ttl, noDisposeOnSet }])`\n\n    Add a value to the cache.\n\n    Optional options object may contain `ttl` and `sizeCalculation` as\n    described above, which default to the settings on the cache object.\n\n    Options object my also include `size`, which will prevent calling the\n    `sizeCalculation` function and just use the specified number if it is a\n    positive integer, and `noDisposeOnSet` which will prevent calling a\n    `dispose` function in the case of overwrites.\n\n    Will update the recency of the entry.\n\n    Returns the cache object.\n\n* `get(key, { updateAgeOnGet, allowStale } = {}) => value`\n\n    Return a value from the cache.\n\n    Will update the recency of the cache entry found.\n\n    If the key is not found, `get()` will return `undefined`.  This can be\n    confusing when setting values specifically to `undefined`, as in\n    `cache.set(key, undefined)`.  Use `cache.has()` to determine whether a\n    key is present in the cache at all.\n\n* `peek(key, { allowStale } = {}) => value`\n\n    Like `get()` but doesn't update recency or delete stale items.\n\n    Returns `undefined` if the item is stale, unless `allowStale` is set\n    either on the cache or in the options object.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recency or age.\n\n    Will return `false` if the item is stale, even though it is technically\n    in the cache.\n\n* `delete(key)`\n\n    Deletes a key out of the cache.\n\n    Returns `true` if the key was deleted, `false` otherwise.\n\n* `clear()`\n\n    Clear the cache entirely, throwing away all values.\n\n    Deprecated alias: `reset()`\n\n* `keys()`\n\n    Return a generator yielding the keys in the cache.\n\n* `values()`\n\n    Return a generator yielding the values in the cache.\n\n* `entries()`\n\n    Return a generator yielding `[key, value]` pairs.\n\n* `find(fn, [getOptions])`\n\n    Find a value for which the supplied `fn` method returns a truthy value,\n    similar to `Array.find()`.\n\n    `fn` is called as `fn(value, key, cache)`.\n\n    The optional `getOptions` are applied to the resulting `get()` of the\n    item found.\n\n* `dump()`\n\n    Return an array of `[key, entry]` objects which can be passed to\n    `cache.load()`\n\n    Note: this returns an actual array, not a generator, so it can be more\n    easily passed around.\n\n* `load(entries)`\n\n    Reset the cache and load in the items in `entries` in the order listed.\n    Note that the shape of the resulting cache may be different if the same\n    options are not used in both caches.\n\n* `purgeStale()`\n\n    Delete any stale entries.  Returns `true` if anything was removed,\n    `false` otherwise.\n\n    Deprecated alias: `prune`\n\n* `forEach(fn, [thisp])`\n\n    Call the `fn` function with each set of `fn(value, key, cache)` in the\n    LRU cache, from most recent to least recently used.\n\n    Does not affect recency of use.\n\n    If `thisp` is provided, function will be called in the `this`-context\n    of the provided object.\n\n* `rforEach(fn, [thisp])`\n\n    Same as `cache.forEach(fn, thisp)`, but in order from least recently\n    used to most recently used.\n\n* `pop()`\n\n    Evict the least recently used item, returning its value.\n\n    Returns `undefined` if cache is empty.\n\n### Internal Methods and Properties\n\nIn order to optimize performance as much as possible, \"private\" members and\nmethods are exposed on the object as normal properties, rather than being\naccessed via Symbols, private members, or closure variables.\n\n**Do not use or rely on these.**  They will change or be removed without\nnotice.  They will cause undefined behavior if used inappropriately.  There\nis no need or reason to ever call them directly.\n\nThis documentation is here so that it is especially clear that this not\n\"undocumented\" because someone forgot; it _is_ documented, and the\ndocumentation is telling you not to do it.\n\n**Do not report bugs that stem from using these properties.**  They will be\nignored.\n\n* `initializeTTLTracking()` Set up the cache for tracking TTLs\n* `updateItemAge(index)` Called when an item age is updated, by internal ID\n* `setItemTTL(index)` Called when an item ttl is updated, by internal ID\n* `isStale(index)` Called to check an item's staleness, by internal ID\n* `initializeSizeTracking()` Set up the cache for tracking item size.\n  Called automatically when a size is specified.\n* `removeItemSize(index)` Updates the internal size calculation when an\n  item is removed or modified, by internal ID\n* `addItemSize(index)` Updates the internal size calculation when an item\n  is added or modified, by internal ID\n* `indexes()` An iterator over the non-stale internal IDs, from most\n  recently to least recently used.\n* `rindexes()` An iterator over the non-stale internal IDs, from least\n  recently to most recently used.\n* `newIndex()` Create a new internal ID, either reusing a deleted ID,\n  evicting the least recently used ID, or walking to the end of the\n  allotted space.\n* `evict()` Evict the least recently used internal ID, returning its ID.\n  Does not do any bounds checking.\n* `connect(p, n)` Connect the `p` and `n` internal IDs in the linked list.\n* `moveToTail(index)` Move the specified internal ID to the most recently\n  used position.\n* `keyMap` Map of keys to internal IDs\n* `keyList` List of keys by internal ID\n* `valList` List of values by internal ID\n* `sizes` List of calculated sizes by internal ID\n* `ttls` List of TTL values by internal ID\n* `starts` List of start time values by internal ID\n* `next` Array of \"next\" pointers by internal ID\n* `prev` Array of \"previous\" pointers by internal ID\n* `head` Internal ID of least recently used item\n* `tail` Internal ID of most recently used item\n* `free` Stack of deleted internal IDs\n\n## Performance\n\nAs of January 2022, version 7 of this library is one of the most performant\nLRU cache implementations in JavaScript.\n\nBenchmarks can be extremely difficult to get right.  In particular, the\nperformance of set/get/delete operations on objects will vary _wildly_\ndepending on the type of key used.  V8 is highly optimized for objects with\nkeys that are short strings, especially integer numeric strings.  Thus any\nbenchmark which tests _solely_ using numbers as keys will tend to find that\nan object-based approach performs the best.\n\nNote that coercing _anything_ to strings to use as object keys is unsafe,\nunless you can be 100% certain that no other type of value will be used.\nFor example:\n\n```js\nconst myCache = {}\nconst set = (k, v) => myCache[k] = v\nconst get = (k) => myCache[k]\n\nset({}, 'please hang onto this for me')\nset('[object Object]', 'oopsie')\n```\n\nAlso beware of \"Just So\" stories regarding performance.  Garbage collection\nof large (especially: deep) object graphs can be incredibly costly, with\nseveral \"tipping points\" where it increases exponentially.  As a result,\nputting that off until later can make it much worse, and less predictable.\nIf a library performs well, but only in a scenario where the object graph is\nkept shallow, then that won't help you if you are using large objects as\nkeys.\n\nIn general, when attempting to use a library to improve performance (such\nas a cache like this one), it's best to choose an option that will perform\nwell in the sorts of scenarios where you'll actually use it.\n\nThis library is optimized for repeated gets and minimizing eviction time,\nsince that is the expected need of a LRU.  Set operations are somewhat\nslower on average than a few other options, in part because of that\noptimization.  It is assumed that you'll be caching some costly operation,\nideally as rarely as possible, so optimizing set over get would be unwise.\n\nIf performance matters to you:\n\n1. If it's at all possible to use small integer values as keys, and you can\n   guarantee that no other types of values will be used as keys, then do\n   that, and use a cache such as\n   [lru-fast](https://npmjs.com/package/lru-fast), or [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache) which\n   uses an Object as its data store.\n2. Failing that, if at all possible, use short non-numeric strings (ie,\n   less than 256 characters) as your keys, and use [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache).\n3. If the types of your keys will be long strings, strings that look like\n   floats, `null`, objects, or some mix of types, or if you aren't sure,\n   then this library will work well for you.\n4. Do not use a `dispose` function, size tracking, or especially ttl\n   behavior, unless absolutely needed.  These features are convenient, and\n   necessary in some use cases, and every attempt has been made to make the\n   performance impact minimal, but it isn't nothing.\n\n## Breaking Changes in Version 7\n\nThis library changed to a different algorithm and internal data structure\nin version 7, yielding significantly better performance, albeit with\nsome subtle changes as a result.\n\nIf you were relying on the internals of LRUCache in version 6 or before, it\nprobably will not work in version 7 and above.\n\nFor more info, see the [change log](CHANGELOG.md).\n","tap":{"coverage-map":"map.js","node-arg":["--expose-gc"]},"readmeFilename":"README.md","gitHead":"9ea6b31e6ea8ee76df808a26b64f133409ffc36b","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.3.3_1649533074055_0.05583952193172492"},"_hasShrinkwrap":false},"7.4.0":{"_id":"lru-cache@7.4.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.4.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"prepare":"webpack-cli -o bundle ./index.js --node-env production","build":"npm run prepare","presize":"npm run prepare","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","size-limit":"^7.0.8","tap":"^15.1.6","webpack-cli":"^4.9.2"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"2830a779b483e9723e20f26fa5278463c50599d8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.4.0.tgz"},"browser":"./bundle/main.js","tap":{"coverage-map":"map.js"},"size-limit":[{"path":"./bundle/main.js"}],"gitHead":"d511442f93820ed65d419bd7a2542a93d1faedaf","_nodeVersion":"17.5.0","_npmVersion":"8.4.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.4.0_1645491168225_0.9488434959764496"},"_hasShrinkwrap":false},"7.4.1":{"_id":"lru-cache@7.4.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.4.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"prepare":"webpack-cli -o bundle ./index.js --node-env production","build":"npm run prepare","presize":"npm run prepare","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","size-limit":"^7.0.8","tap":"^15.1.6","webpack-cli":"^4.9.2"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"afe07e885ef0cd5bf99f62f4fa7545d48746d779","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.4.1.tgz"},"browser":"./bundle/main.js","tap":{"coverage-map":"map.js"},"size-limit":[{"path":"./bundle/main.js"}],"gitHead":"2be1d2436218360dbf4c673088323b88840bcd24","_nodeVersion":"17.6.0","_npmVersion":"8.5.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.4.1_1646455331417_0.017315440199106913"},"_hasShrinkwrap":false},"7.4.2":{"_id":"lru-cache@7.4.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.4.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"prepare":"webpack-cli -o bundle ./index.js --node-env production","build":"npm run prepare","presize":"npm run prepare","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","size-limit":"^7.0.8","tap":"^15.1.6","webpack-cli":"^4.9.2"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"92f7b5afe82759f51b216a96fae3bc1828df9712","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.4.2.tgz"},"browser":"./bundle/main.js","tap":{"coverage-map":"map.js"},"size-limit":[{"path":"./bundle/main.js"}],"gitHead":"04765f85a1e480c14b9928f2a40c4713ff8d611b","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.4.2_1646842542209_0.48780490214664574"},"_hasShrinkwrap":false},"7.4.3":{"_id":"lru-cache@7.4.3","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.4.3","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"prepare":"webpack-cli -o bundle ./index.js --node-env production","build":"npm run prepare","presize":"npm run prepare","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","size-limit":"^7.0.8","tap":"^15.1.6","webpack-cli":"^4.9.2"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"b28a09754515ca5c6efcf1a5c995c2a52c40ac20","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.4.3.tgz"},"browser":"./bundle/main.js","tap":{"coverage-map":"map.js"},"size-limit":[{"path":"./bundle/main.js"}],"gitHead":"00449b331aac094d7a2aedab78b45ac354f17245","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.4.3_1646940242150_0.5160291687367282"},"_hasShrinkwrap":false},"7.4.4":{"_id":"lru-cache@7.4.4","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.4.4","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"prepare":"webpack-cli -o bundle ./index.js --node-env production","build":"npm run prepare","presize":"npm run prepare","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","size-limit":"^7.0.8","tap":"^15.1.6","webpack-cli":"^4.9.2"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"a3dabc394ec07e2285af52fd24d0d74b3ac71c29","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.4.4.tgz"},"browser":"./bundle/main.js","tap":{"coverage-map":"map.js"},"size-limit":[{"path":"./bundle/main.js"}],"gitHead":"aaf23eda3027fcc1bee8739b320a8cdaf404c14b","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.4.4_1646940367866_0.8649527812271489"},"_hasShrinkwrap":false},"7.4.5":{"_id":"lru-cache@7.4.5","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.4.5","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"prepare":"webpack-cli -o bundle ./index.js --node-env production","build":"npm run prepare","presize":"npm run prepare","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","heapdump":"^0.3.15","size-limit":"^7.0.8","tap":"^16.0.1","webpack-cli":"^4.9.2"},"engines":{"node":">=12"},"main":"index.js","publishConfig":{"tag":"v7.4-backport"},"dist":{"shasum":"818618db4de37bca83292f46362429124d6f0d45","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.4.5.tgz"},"readme":"# lru-cache\n\nA cache object that deletes the least-recently-used items.\n\nSpecify a max number of the most recently used items that you want to keep,\nand this cache will keep that many of the most recently accessed items.\n\nThis is not primarily a TTL cache, and does not make strong TTL guarantees.\nThere is no preemptive pruning of expired items, but you _may_ set a TTL\non the cache or on a single `set`.  If you do so, it will treat expired\nitems as missing, and delete them when fetched.\n\nAs of version 7, this is one of the most performant LRU implementations\navailable in JavaScript, and supports a wide diversity of use cases.\nHowever, note that using some of the features will necessarily impact\nperformance, by causing the cache to have to do more work.  See the\n\"Performance\" section below.\n\n## Installation\n\n```bash\nnpm install lru-cache --save\n```\n\n## Usage\n\n```js\nconst LRU = require('lru-cache')\n\n// only 'max' is required, the others are optional, but MAY be\n// required if certain other fields are set.\nconst options = {\n  // the number of most recently used items to keep.\n  // note that we may store fewer items than this if maxSize is hit.\n\n  max: 500, // <-- mandatory, you must give a maximum capacity\n\n  // if you wish to track item size, you must provide a maxSize\n  // note that we still will only keep up to max *actual items*,\n  // so size tracking may cause fewer than max items to be stored.\n  // At the extreme, a single item of maxSize size will cause everything\n  // else in the cache to be dropped when it is added.  Use with caution!\n  // Note also that size tracking can negatively impact performance,\n  // though for most cases, only minimally.\n  maxSize: 5000,\n\n  // function to calculate size of items.  useful if storing strings or\n  // buffers or other items where memory size depends on the object itself.\n  // also note that oversized items do NOT immediately get dropped from\n  // the cache, though they will cause faster turnover in the storage.\n  sizeCalculation: (value, key) => {\n    // return an positive integer which is the size of the item,\n    // if a positive integer is not returned, will use 0 as the size.\n    return 1\n  },\n\n  // function to call when the item is removed from the cache\n  // Note that using this can negatively impact performance.\n  dispose: (value, key) => {\n    freeFromMemoryOrWhatever(value)\n  },\n\n  // max time to live for items before they are considered stale\n  // note that stale items are NOT preemptively removed by default,\n  // and MAY live in the cache, contributing to its LRU max, long after\n  // they have expired.\n  // Also, as this cache is optimized for LRU/MRU operations, some of\n  // the staleness/TTL checks will reduce performance, as they will incur\n  // overhead by deleting items.\n  // Must be a positive integer in ms, defaults to 0, which means \"no TTL\"\n  ttl: 1000 * 60 * 5,\n\n  // return stale items from cache.get() before disposing of them\n  // boolean, default false\n  allowStale: false,\n\n  // update the age of items on cache.get(), renewing their TTL\n  // boolean, default false\n  updateAgeOnGet: false,\n\n  // update the age of items on cache.has(), renewing their TTL\n  // boolean, default false\n  updateAgeOnHas: false,\n}\n\nconst cache = new LRU(options)\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\n// non-string keys ARE fully supported\n// but note that it must be THE SAME object, not\n// just a JSON-equivalent object.\nvar someObject = { a: 1 }\ncache.set(someObject, 'a value')\n// Object keys are not toString()-ed\ncache.set('[object Object]', 'a different value')\nassert.equal(cache.get(someObject), 'a value')\n// A similar object with same keys/values won't work,\n// because it's a different object identity\nassert.equal(cache.get({ a: 1 }), undefined)\n\ncache.clear()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\n## Options\n\n* `max` - The maximum number (or size) of items that remain in the cache\n  (assuming no TTL pruning or explicit deletions).  Note that fewer items\n  may be stored if size calculation is used, and `maxSize` is exceeded.\n  This must be a positive finite intger.\n\n    This option is required, and must be a positive integer.\n\n* `maxSize` - Set to a positive integer to track the sizes of items added\n  to the cache, and automatically evict items in order to stay below this\n  size.  Note that this may result in fewer than `max` items being stored.\n\n    Optional, must be a positive integer if provided.  Required if other\n    size tracking features are used.\n\n* `sizeCalculation` - Function used to calculate the size of stored\n  items.  If you're storing strings or buffers, then you probably want to\n  do something like `n => n.length`.  The item is passed as the first\n  argument, and the key is passed as the second argument.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Requires `maxSize` to be set.\n\n    Deprecated alias: `length`\n\n* `dispose` Function that is called on items when they are dropped\n  from the cache, as `this.dispose(value, key, reason)`.\n\n    This can be handy if you want to close file descriptors or do other\n    cleanup tasks when items are no longer stored in the cache.\n\n    **NOTE**: It is called *before* the item has been fully removed from\n    the cache, so if you want to put it right back in, you need to wait\n    until the next tick.  If you try to add it back in during the\n    `dispose()` function call, it will break things in subtle and weird\n    ways.\n\n    Unlike several other options, this may _not_ be overridden by passing\n    an option to `set()`, for performance reasons.  If disposal functions\n    may vary between cache entries, then the entire list must be scanned\n    on every cache swap, even if no disposal function is in use.\n\n    The `reason` will be one of the following strings, corresponding to the\n    reason for the item's deletion:\n\n    * `evict` Item was evicted to make space for a new addition\n    * `set` Item was overwritten by a new value\n    * `delete` Item was removed by explicit `cache.delete(key)` or by\n      calling `cache.clear()`, which deletes everything.\n\n    Optional, must be a function.\n\n* `disposeAfter` The same as `dispose`, but called _after_ the entry is\n  completely removed and the cache is once again in a clean state.\n\n    It is safe to add an item right back into the cache at this point.\n    However, note that it is _very_ easy to inadvertently create infinite\n    recursion in this way.\n\n* `noDisposeOnSet` Set to `true` to suppress calling the `dispose()`\n  function if the entry key is still accessible within the cache.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Boolean, default `false`.  Only relevant if `dispose` or `disposeAfter`\n    options are set.\n\n* `ttl` - max time to live for items before they are considered stale.\n  Note that stale items are NOT preemptively removed by default, and MAY\n  live in the cache, contributing to its LRU max, long after they have\n  expired.\n\n    Also, as this cache is optimized for LRU/MRU operations, some of\n    the staleness/TTL checks will reduce performance, as they will incur\n    overhead by deleting from Map objects rather than simply throwing old\n    Map objects away.\n\n    This is not primarily a TTL cache, and does not make strong TTL\n    guarantees.  There is no pre-emptive pruning of expired items, but you\n    _may_ set a TTL on the cache, and it will treat expired items as missing\n    when they are fetched, and delete them.\n\n    Optional, but must be a positive integer in ms if specified.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Deprecated alias: `maxAge`\n\n* `noUpdateTTL` - Boolean flag to tell the cache to not update the TTL when\n  setting a new value for an existing key (ie, when updating a value rather\n  than inserting a new value).  Note that the TTL value is _always_ set\n  (if provided) when adding a new entry into the cache.\n\n    This may be passed as an option to `cache.set()`.\n\n    Boolean, default false.\n\n* `ttlResolution` - Minimum amount of time in ms in which to check for\n  staleness.  Defaults to `1`, which means that the current time is checked\n  at most once per millisecond.\n\n    Set to `0` to check the current time every time staleness is tested.\n\n    Note that setting this to a higher value _will_ improve performance\n    somewhat while using ttl tracking, albeit at the expense of keeping\n    stale items around a bit longer than intended.\n\n* `ttlAutopurge` - Preemptively remove stale items from the cache.\n\n    Note that this may _significantly_ degrade performance, especially if\n    the cache is storing a large number of items.  It is almost always best\n    to just leave the stale items in the cache, and let them fall out as\n    new items are added.\n\n    Note that this means that `allowStale` is a bit pointless, as stale\n    items will be deleted almost as soon as they expire.\n\n    Use with caution!\n\n    Boolean, default `false`\n\n* `allowStale` - By default, if you set `ttl`, it'll only delete stale\n  items from the cache when you `get(key)`.  That is, it's not\n  preemptively pruning items.\n\n    If you set `allowStale:true`, it'll return the stale value as well as\n    deleting it.  If you don't set this, then it'll return `undefined` when\n    you try to get a stale entry.\n\n    Note that when a stale entry is fetched, _even if it is returned due to\n    `allowStale` being set_, it is removed from the cache immediately.  You\n    can immediately put it back in the cache if you wish, thus resetting the\n    TTL.\n\n    This may be overridden by passing an options object to `cache.get()`.\n    The `cache.has()` method will always return `false` for stale items.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n    Deprecated alias: `stale`\n\n* `updateAgeOnGet` - When using time-expiring entries with `ttl`, setting\n  this to `true` will make each item's age reset to 0 whenever it is\n  retrieved from cache with `get()`, causing it to not expire.  (It can\n  still fall out of cache based on recency of use, of course.)\n\n    This may be overridden by passing an options object to `cache.get()`.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n## API\n\n* `new LRUCache(options)`\n\n    Create a new LRUCache.  All options are documented above, and are on\n    the cache as public members.\n\n* `cache.max`, `cache.maxSize`, `cache.allowStale`, `cache.noDisposeOnSet`,\n  `cache.sizeCalculation`, `cache.dispose`, `cache.maxSize`, `cache.ttl`,\n  `cache.updateAgeOnGet`\n\n    All option names are exposed as public members on the cache object.\n\n    These are intended for read access only.  Changing them during program\n    operation can cause undefined behavior.\n\n* `cache.size`\n\n    The total number of items held in the cache at the current moment.\n\n* `cache.calculatedSize`\n\n    The total size of items in cache when using size tracking.\n\n* `set(key, value, [{ size, sizeCalculation, ttl, noDisposeOnSet }])`\n\n    Add a value to the cache.\n\n    Optional options object may contain `ttl` and `sizeCalculation` as\n    described above, which default to the settings on the cache object.\n\n    Options object my also include `size`, which will prevent calling the\n    `sizeCalculation` function and just use the specified number if it is a\n    positive integer, and `noDisposeOnSet` which will prevent calling a\n    `dispose` function in the case of overwrites.\n\n    Will update the recency of the entry.\n\n    Returns the cache object.\n\n* `get(key, { updateAgeOnGet, allowStale } = {}) => value`\n\n    Return a value from the cache.\n\n    Will update the recency of the cache entry found.\n\n    If the key is not found, `get()` will return `undefined`.  This can be\n    confusing when setting values specifically to `undefined`, as in\n    `cache.set(key, undefined)`.  Use `cache.has()` to determine whether a\n    key is present in the cache at all.\n\n* `peek(key, { allowStale } = {}) => value`\n\n    Like `get()` but doesn't update recency or delete stale items.\n\n    Returns `undefined` if the item is stale, unless `allowStale` is set\n    either on the cache or in the options object.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recency or age.\n\n    Will return `false` if the item is stale, even though it is technically\n    in the cache.\n\n* `delete(key)`\n\n    Deletes a key out of the cache.\n\n    Returns `true` if the key was deleted, `false` otherwise.\n\n* `clear()`\n\n    Clear the cache entirely, throwing away all values.\n\n    Deprecated alias: `reset()`\n\n* `keys()`\n\n    Return a generator yielding the keys in the cache.\n\n* `values()`\n\n    Return a generator yielding the values in the cache.\n\n* `entries()`\n\n    Return a generator yielding `[key, value]` pairs.\n\n* `find(fn, [getOptions])`\n\n    Find a value for which the supplied `fn` method returns a truthy value,\n    similar to `Array.find()`.\n\n    `fn` is called as `fn(value, key, cache)`.\n\n    The optional `getOptions` are applied to the resulting `get()` of the\n    item found.\n\n* `dump()`\n\n    Return an array of `[key, entry]` objects which can be passed to\n    `cache.load()`\n\n    Note: this returns an actual array, not a generator, so it can be more\n    easily passed around.\n\n* `load(entries)`\n\n    Reset the cache and load in the items in `entries` in the order listed.\n    Note that the shape of the resulting cache may be different if the same\n    options are not used in both caches.\n\n* `purgeStale()`\n\n    Delete any stale entries.  Returns `true` if anything was removed,\n    `false` otherwise.\n\n    Deprecated alias: `prune`\n\n* `forEach(fn, [thisp])`\n\n    Call the `fn` function with each set of `fn(value, key, cache)` in the\n    LRU cache, from most recent to least recently used.\n\n    Does not affect recency of use.\n\n    If `thisp` is provided, function will be called in the `this`-context\n    of the provided object.\n\n* `rforEach(fn, [thisp])`\n\n    Same as `cache.forEach(fn, thisp)`, but in order from least recently\n    used to most recently used.\n\n* `pop()`\n\n    Evict the least recently used item, returning its value.\n\n    Returns `undefined` if cache is empty.\n\n### Internal Methods and Properties\n\nIn order to optimize performance as much as possible, \"private\" members and\nmethods are exposed on the object as normal properties, rather than being\naccessed via Symbols, private members, or closure variables.\n\n**Do not use or rely on these.**  They will change or be removed without\nnotice.  They will cause undefined behavior if used inappropriately.  There\nis no need or reason to ever call them directly.\n\nThis documentation is here so that it is especially clear that this not\n\"undocumented\" because someone forgot; it _is_ documented, and the\ndocumentation is telling you not to do it.\n\n**Do not report bugs that stem from using these properties.**  They will be\nignored.\n\n* `initializeTTLTracking()` Set up the cache for tracking TTLs\n* `updateItemAge(index)` Called when an item age is updated, by internal ID\n* `setItemTTL(index)` Called when an item ttl is updated, by internal ID\n* `isStale(index)` Called to check an item's staleness, by internal ID\n* `initializeSizeTracking()` Set up the cache for tracking item size.\n  Called automatically when a size is specified.\n* `removeItemSize(index)` Updates the internal size calculation when an\n  item is removed or modified, by internal ID\n* `addItemSize(index)` Updates the internal size calculation when an item\n  is added or modified, by internal ID\n* `indexes()` An iterator over the non-stale internal IDs, from most\n  recently to least recently used.\n* `rindexes()` An iterator over the non-stale internal IDs, from least\n  recently to most recently used.\n* `newIndex()` Create a new internal ID, either reusing a deleted ID,\n  evicting the least recently used ID, or walking to the end of the\n  allotted space.\n* `evict()` Evict the least recently used internal ID, returning its ID.\n  Does not do any bounds checking.\n* `connect(p, n)` Connect the `p` and `n` internal IDs in the linked list.\n* `moveToTail(index)` Move the specified internal ID to the most recently\n  used position.\n* `keyMap` Map of keys to internal IDs\n* `keyList` List of keys by internal ID\n* `valList` List of values by internal ID\n* `sizes` List of calculated sizes by internal ID\n* `ttls` List of TTL values by internal ID\n* `starts` List of start time values by internal ID\n* `next` Array of \"next\" pointers by internal ID\n* `prev` Array of \"previous\" pointers by internal ID\n* `head` Internal ID of least recently used item\n* `tail` Internal ID of most recently used item\n* `free` Stack of deleted internal IDs\n\n## Performance\n\nAs of January 2022, version 7 of this library is one of the most performant\nLRU cache implementations in JavaScript.\n\nBenchmarks can be extremely difficult to get right.  In particular, the\nperformance of set/get/delete operations on objects will vary _wildly_\ndepending on the type of key used.  V8 is highly optimized for objects with\nkeys that are short strings, especially integer numeric strings.  Thus any\nbenchmark which tests _solely_ using numbers as keys will tend to find that\nan object-based approach performs the best.\n\nNote that coercing _anything_ to strings to use as object keys is unsafe,\nunless you can be 100% certain that no other type of value will be used.\nFor example:\n\n```js\nconst myCache = {}\nconst set = (k, v) => myCache[k] = v\nconst get = (k) => myCache[k]\n\nset({}, 'please hang onto this for me')\nset('[object Object]', 'oopsie')\n```\n\nAlso beware of \"Just So\" stories regarding performance.  Garbage collection\nof large (especially: deep) object graphs can be incredibly costly, with\nseveral \"tipping points\" where it increases exponentially.  As a result,\nputting that off until later can make it much worse, and less predictable.\nIf a library performs well, but only in a scenario where the object graph is\nkept shallow, then that won't help you if you are using large objects as\nkeys.\n\nIn general, when attempting to use a library to improve performance (such\nas a cache like this one), it's best to choose an option that will perform\nwell in the sorts of scenarios where you'll actually use it.\n\nThis library is optimized for repeated gets and minimizing eviction time,\nsince that is the expected need of a LRU.  Set operations are somewhat\nslower on average than a few other options, in part because of that\noptimization.  It is assumed that you'll be caching some costly operation,\nideally as rarely as possible, so optimizing set over get would be unwise.\n\nIf performance matters to you:\n\n1. If it's at all possible to use small integer values as keys, and you can\n   guarantee that no other types of values will be used as keys, then do\n   that, and use a cache such as\n   [lru-fast](https://npmjs.com/package/lru-fast), or [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache) which\n   uses an Object as its data store.\n2. Failing that, if at all possible, use short non-numeric strings (ie,\n   less than 256 characters) as your keys, and use [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache).\n3. If the types of your keys will be long strings, strings that look like\n   floats, `null`, objects, or some mix of types, or if you aren't sure,\n   then this library will work well for you.\n4. Do not use a `dispose` function, size tracking, or especially ttl\n   behavior, unless absolutely needed.  These features are convenient, and\n   necessary in some use cases, and every attempt has been made to make the\n   performance impact minimal, but it isn't nothing.\n\n## Breaking Changes in Version 7\n\nThis library changed to a different algorithm and internal data structure\nin version 7, yielding significantly better performance, albeit with\nsome subtle changes as a result.\n\nIf you were relying on the internals of LRUCache in version 6 or before, it\nprobably will not work in version 7 and above.\n\nFor more info, see the [change log](CHANGELOG.md).\n","browser":"./bundle/main.js","tap":{"coverage-map":"map.js","node-arg":["--expose-gc"]},"size-limit":[{"path":"./bundle/main.js"}],"readmeFilename":"README.md","gitHead":"a801dc9da5b3efdc00369db735e3666978fb6a1f","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.4.5_1649532955073_0.007987751944029231"},"_hasShrinkwrap":false},"7.5.0":{"_id":"lru-cache@7.5.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.5.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","size-limit":"^7.0.8","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"5e14318d64e6f180a5cf3b9b955b2e89376c0efe","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.5.0.tgz"},"tap":{"coverage-map":"map.js"},"size-limit":[{"path":"./index.js"}],"gitHead":"6406220fae5ca7bea5c083b121f53a526edf8348","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.5.0_1647226674916_0.5975480216807405"},"_hasShrinkwrap":false},"7.5.1":{"_id":"lru-cache@7.5.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.5.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","size-limit":"^7.0.8","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"660a134c2c3c015aa453b03df55d2a9f0c216a0f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.5.1.tgz"},"tap":{"coverage-map":"map.js"},"size-limit":[{"path":"./index.js"}],"gitHead":"e608eb8341df51e128e1a2526682901e38539b07","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.5.1_1647279712764_0.7234295714520351"},"_hasShrinkwrap":false},"7.5.2":{"_id":"lru-cache@7.5.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.5.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","heapdump":"^0.3.15","size-limit":"^7.0.8","tap":"^16.0.1"},"engines":{"node":">=12"},"main":"index.js","publishConfig":{"tag":"v7.5-backport"},"dist":{"shasum":"f7da8d0a1906bacb397e0747796d53b08441d877","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.5.2.tgz"},"readme":"# lru-cache\n\nA cache object that deletes the least-recently-used items.\n\nSpecify a max number of the most recently used items that you want to keep,\nand this cache will keep that many of the most recently accessed items.\n\nThis is not primarily a TTL cache, and does not make strong TTL guarantees.\nThere is no preemptive pruning of expired items, but you _may_ set a TTL\non the cache or on a single `set`.  If you do so, it will treat expired\nitems as missing, and delete them when fetched.\n\nAs of version 7, this is one of the most performant LRU implementations\navailable in JavaScript, and supports a wide diversity of use cases.\nHowever, note that using some of the features will necessarily impact\nperformance, by causing the cache to have to do more work.  See the\n\"Performance\" section below.\n\n## Installation\n\n```bash\nnpm install lru-cache --save\n```\n\n## Usage\n\n```js\nconst LRU = require('lru-cache')\n\n// only 'max' is required, the others are optional, but MAY be\n// required if certain other fields are set.\nconst options = {\n  // the number of most recently used items to keep.\n  // note that we may store fewer items than this if maxSize is hit.\n\n  max: 500, // <-- mandatory, you must give a maximum capacity\n\n  // if you wish to track item size, you must provide a maxSize\n  // note that we still will only keep up to max *actual items*,\n  // so size tracking may cause fewer than max items to be stored.\n  // At the extreme, a single item of maxSize size will cause everything\n  // else in the cache to be dropped when it is added.  Use with caution!\n  // Note also that size tracking can negatively impact performance,\n  // though for most cases, only minimally.\n  maxSize: 5000,\n\n  // function to calculate size of items.  useful if storing strings or\n  // buffers or other items where memory size depends on the object itself.\n  // also note that oversized items do NOT immediately get dropped from\n  // the cache, though they will cause faster turnover in the storage.\n  sizeCalculation: (value, key) => {\n    // return an positive integer which is the size of the item,\n    // if a positive integer is not returned, will use 0 as the size.\n    return 1\n  },\n\n  // function to call when the item is removed from the cache\n  // Note that using this can negatively impact performance.\n  dispose: (value, key) => {\n    freeFromMemoryOrWhatever(value)\n  },\n\n  // max time to live for items before they are considered stale\n  // note that stale items are NOT preemptively removed by default,\n  // and MAY live in the cache, contributing to its LRU max, long after\n  // they have expired.\n  // Also, as this cache is optimized for LRU/MRU operations, some of\n  // the staleness/TTL checks will reduce performance, as they will incur\n  // overhead by deleting items.\n  // Must be a positive integer in ms, defaults to 0, which means \"no TTL\"\n  ttl: 1000 * 60 * 5,\n\n  // return stale items from cache.get() before disposing of them\n  // boolean, default false\n  allowStale: false,\n\n  // update the age of items on cache.get(), renewing their TTL\n  // boolean, default false\n  updateAgeOnGet: false,\n\n  // update the age of items on cache.has(), renewing their TTL\n  // boolean, default false\n  updateAgeOnHas: false,\n}\n\nconst cache = new LRU(options)\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\n// non-string keys ARE fully supported\n// but note that it must be THE SAME object, not\n// just a JSON-equivalent object.\nvar someObject = { a: 1 }\ncache.set(someObject, 'a value')\n// Object keys are not toString()-ed\ncache.set('[object Object]', 'a different value')\nassert.equal(cache.get(someObject), 'a value')\n// A similar object with same keys/values won't work,\n// because it's a different object identity\nassert.equal(cache.get({ a: 1 }), undefined)\n\ncache.clear()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\n## Options\n\n* `max` - The maximum number (or size) of items that remain in the cache\n  (assuming no TTL pruning or explicit deletions).  Note that fewer items\n  may be stored if size calculation is used, and `maxSize` is exceeded.\n  This must be a positive finite intger.\n\n    This option is required, and must be a positive integer.\n\n* `maxSize` - Set to a positive integer to track the sizes of items added\n  to the cache, and automatically evict items in order to stay below this\n  size.  Note that this may result in fewer than `max` items being stored.\n\n    Optional, must be a positive integer if provided.  Required if other\n    size tracking features are used.\n\n* `sizeCalculation` - Function used to calculate the size of stored\n  items.  If you're storing strings or buffers, then you probably want to\n  do something like `n => n.length`.  The item is passed as the first\n  argument, and the key is passed as the second argument.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Requires `maxSize` to be set.\n\n    Deprecated alias: `length`\n\n* `dispose` Function that is called on items when they are dropped\n  from the cache, as `this.dispose(value, key, reason)`.\n\n    This can be handy if you want to close file descriptors or do other\n    cleanup tasks when items are no longer stored in the cache.\n\n    **NOTE**: It is called *before* the item has been fully removed from\n    the cache, so if you want to put it right back in, you need to wait\n    until the next tick.  If you try to add it back in during the\n    `dispose()` function call, it will break things in subtle and weird\n    ways.\n\n    Unlike several other options, this may _not_ be overridden by passing\n    an option to `set()`, for performance reasons.  If disposal functions\n    may vary between cache entries, then the entire list must be scanned\n    on every cache swap, even if no disposal function is in use.\n\n    The `reason` will be one of the following strings, corresponding to the\n    reason for the item's deletion:\n\n    * `evict` Item was evicted to make space for a new addition\n    * `set` Item was overwritten by a new value\n    * `delete` Item was removed by explicit `cache.delete(key)` or by\n      calling `cache.clear()`, which deletes everything.\n\n    Optional, must be a function.\n\n* `disposeAfter` The same as `dispose`, but called _after_ the entry is\n  completely removed and the cache is once again in a clean state.\n\n    It is safe to add an item right back into the cache at this point.\n    However, note that it is _very_ easy to inadvertently create infinite\n    recursion in this way.\n\n* `noDisposeOnSet` Set to `true` to suppress calling the `dispose()`\n  function if the entry key is still accessible within the cache.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Boolean, default `false`.  Only relevant if `dispose` or `disposeAfter`\n    options are set.\n\n* `ttl` - max time to live for items before they are considered stale.\n  Note that stale items are NOT preemptively removed by default, and MAY\n  live in the cache, contributing to its LRU max, long after they have\n  expired.\n\n    Also, as this cache is optimized for LRU/MRU operations, some of\n    the staleness/TTL checks will reduce performance, as they will incur\n    overhead by deleting from Map objects rather than simply throwing old\n    Map objects away.\n\n    This is not primarily a TTL cache, and does not make strong TTL\n    guarantees.  There is no pre-emptive pruning of expired items, but you\n    _may_ set a TTL on the cache, and it will treat expired items as missing\n    when they are fetched, and delete them.\n\n    Optional, but must be a positive integer in ms if specified.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Deprecated alias: `maxAge`\n\n* `noUpdateTTL` - Boolean flag to tell the cache to not update the TTL when\n  setting a new value for an existing key (ie, when updating a value rather\n  than inserting a new value).  Note that the TTL value is _always_ set\n  (if provided) when adding a new entry into the cache.\n\n    This may be passed as an option to `cache.set()`.\n\n    Boolean, default false.\n\n* `ttlResolution` - Minimum amount of time in ms in which to check for\n  staleness.  Defaults to `1`, which means that the current time is checked\n  at most once per millisecond.\n\n    Set to `0` to check the current time every time staleness is tested.\n\n    Note that setting this to a higher value _will_ improve performance\n    somewhat while using ttl tracking, albeit at the expense of keeping\n    stale items around a bit longer than intended.\n\n* `ttlAutopurge` - Preemptively remove stale items from the cache.\n\n    Note that this may _significantly_ degrade performance, especially if\n    the cache is storing a large number of items.  It is almost always best\n    to just leave the stale items in the cache, and let them fall out as\n    new items are added.\n\n    Note that this means that `allowStale` is a bit pointless, as stale\n    items will be deleted almost as soon as they expire.\n\n    Use with caution!\n\n    Boolean, default `false`\n\n* `allowStale` - By default, if you set `ttl`, it'll only delete stale\n  items from the cache when you `get(key)`.  That is, it's not\n  preemptively pruning items.\n\n    If you set `allowStale:true`, it'll return the stale value as well as\n    deleting it.  If you don't set this, then it'll return `undefined` when\n    you try to get a stale entry.\n\n    Note that when a stale entry is fetched, _even if it is returned due to\n    `allowStale` being set_, it is removed from the cache immediately.  You\n    can immediately put it back in the cache if you wish, thus resetting the\n    TTL.\n\n    This may be overridden by passing an options object to `cache.get()`.\n    The `cache.has()` method will always return `false` for stale items.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n    Deprecated alias: `stale`\n\n* `updateAgeOnGet` - When using time-expiring entries with `ttl`, setting\n  this to `true` will make each item's age reset to 0 whenever it is\n  retrieved from cache with `get()`, causing it to not expire.  (It can\n  still fall out of cache based on recency of use, of course.)\n\n    This may be overridden by passing an options object to `cache.get()`.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n## API\n\n* `new LRUCache(options)`\n\n    Create a new LRUCache.  All options are documented above, and are on\n    the cache as public members.\n\n* `cache.max`, `cache.maxSize`, `cache.allowStale`, `cache.noDisposeOnSet`,\n  `cache.sizeCalculation`, `cache.dispose`, `cache.maxSize`, `cache.ttl`,\n  `cache.updateAgeOnGet`\n\n    All option names are exposed as public members on the cache object.\n\n    These are intended for read access only.  Changing them during program\n    operation can cause undefined behavior.\n\n* `cache.size`\n\n    The total number of items held in the cache at the current moment.\n\n* `cache.calculatedSize`\n\n    The total size of items in cache when using size tracking.\n\n* `set(key, value, [{ size, sizeCalculation, ttl, noDisposeOnSet }])`\n\n    Add a value to the cache.\n\n    Optional options object may contain `ttl` and `sizeCalculation` as\n    described above, which default to the settings on the cache object.\n\n    Options object my also include `size`, which will prevent calling the\n    `sizeCalculation` function and just use the specified number if it is a\n    positive integer, and `noDisposeOnSet` which will prevent calling a\n    `dispose` function in the case of overwrites.\n\n    Will update the recency of the entry.\n\n    Returns the cache object.\n\n* `get(key, { updateAgeOnGet, allowStale } = {}) => value`\n\n    Return a value from the cache.\n\n    Will update the recency of the cache entry found.\n\n    If the key is not found, `get()` will return `undefined`.  This can be\n    confusing when setting values specifically to `undefined`, as in\n    `cache.set(key, undefined)`.  Use `cache.has()` to determine whether a\n    key is present in the cache at all.\n\n* `peek(key, { allowStale } = {}) => value`\n\n    Like `get()` but doesn't update recency or delete stale items.\n\n    Returns `undefined` if the item is stale, unless `allowStale` is set\n    either on the cache or in the options object.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recency or age.\n\n    Will return `false` if the item is stale, even though it is technically\n    in the cache.\n\n* `delete(key)`\n\n    Deletes a key out of the cache.\n\n    Returns `true` if the key was deleted, `false` otherwise.\n\n* `clear()`\n\n    Clear the cache entirely, throwing away all values.\n\n    Deprecated alias: `reset()`\n\n* `keys()`\n\n    Return a generator yielding the keys in the cache, in order from most\n    recently used to least recently used.\n\n* `rkeys()`\n\n    Return a generator yielding the keys in the cache, in order from least\n    recently used to most recently used.\n\n* `values()`\n\n    Return a generator yielding the values in the cache, in order from most\n    recently used to least recently used.\n\n* `rvalues()`\n\n    Return a generator yielding the values in the cache, in order from\n    least recently used to most recently used.\n\n* `entries()`\n\n    Return a generator yielding `[key, value]` pairs, in order from most\n    recently used to least recently used.\n\n* `rentries()`\n\n    Return a generator yielding `[key, value]` pairs, in order from least\n    recently used to most recently used.\n\n* `find(fn, [getOptions])`\n\n    Find a value for which the supplied `fn` method returns a truthy value,\n    similar to `Array.find()`.\n\n    `fn` is called as `fn(value, key, cache)`.\n\n    The optional `getOptions` are applied to the resulting `get()` of the\n    item found.\n\n* `dump()`\n\n    Return an array of `[key, entry]` objects which can be passed to\n    `cache.load()`\n\n    Note: this returns an actual array, not a generator, so it can be more\n    easily passed around.\n\n* `load(entries)`\n\n    Reset the cache and load in the items in `entries` in the order listed.\n    Note that the shape of the resulting cache may be different if the same\n    options are not used in both caches.\n\n* `purgeStale()`\n\n    Delete any stale entries.  Returns `true` if anything was removed,\n    `false` otherwise.\n\n    Deprecated alias: `prune`\n\n* `forEach(fn, [thisp])`\n\n    Call the `fn` function with each set of `fn(value, key, cache)` in the\n    LRU cache, from most recent to least recently used.\n\n    Does not affect recency of use.\n\n    If `thisp` is provided, function will be called in the `this`-context\n    of the provided object.\n\n* `rforEach(fn, [thisp])`\n\n    Same as `cache.forEach(fn, thisp)`, but in order from least recently\n    used to most recently used.\n\n* `pop()`\n\n    Evict the least recently used item, returning its value.\n\n    Returns `undefined` if cache is empty.\n\n### Internal Methods and Properties\n\nIn order to optimize performance as much as possible, \"private\" members and\nmethods are exposed on the object as normal properties, rather than being\naccessed via Symbols, private members, or closure variables.\n\n**Do not use or rely on these.**  They will change or be removed without\nnotice.  They will cause undefined behavior if used inappropriately.  There\nis no need or reason to ever call them directly.\n\nThis documentation is here so that it is especially clear that this not\n\"undocumented\" because someone forgot; it _is_ documented, and the\ndocumentation is telling you not to do it.\n\n**Do not report bugs that stem from using these properties.**  They will be\nignored.\n\n* `initializeTTLTracking()` Set up the cache for tracking TTLs\n* `updateItemAge(index)` Called when an item age is updated, by internal ID\n* `setItemTTL(index)` Called when an item ttl is updated, by internal ID\n* `isStale(index)` Called to check an item's staleness, by internal ID\n* `initializeSizeTracking()` Set up the cache for tracking item size.\n  Called automatically when a size is specified.\n* `removeItemSize(index)` Updates the internal size calculation when an\n  item is removed or modified, by internal ID\n* `addItemSize(index)` Updates the internal size calculation when an item\n  is added or modified, by internal ID\n* `indexes()` An iterator over the non-stale internal IDs, from most\n  recently to least recently used.\n* `rindexes()` An iterator over the non-stale internal IDs, from least\n  recently to most recently used.\n* `newIndex()` Create a new internal ID, either reusing a deleted ID,\n  evicting the least recently used ID, or walking to the end of the\n  allotted space.\n* `evict()` Evict the least recently used internal ID, returning its ID.\n  Does not do any bounds checking.\n* `connect(p, n)` Connect the `p` and `n` internal IDs in the linked list.\n* `moveToTail(index)` Move the specified internal ID to the most recently\n  used position.\n* `keyMap` Map of keys to internal IDs\n* `keyList` List of keys by internal ID\n* `valList` List of values by internal ID\n* `sizes` List of calculated sizes by internal ID\n* `ttls` List of TTL values by internal ID\n* `starts` List of start time values by internal ID\n* `next` Array of \"next\" pointers by internal ID\n* `prev` Array of \"previous\" pointers by internal ID\n* `head` Internal ID of least recently used item\n* `tail` Internal ID of most recently used item\n* `free` Stack of deleted internal IDs\n\n## Performance\n\nAs of January 2022, version 7 of this library is one of the most performant\nLRU cache implementations in JavaScript.\n\nBenchmarks can be extremely difficult to get right.  In particular, the\nperformance of set/get/delete operations on objects will vary _wildly_\ndepending on the type of key used.  V8 is highly optimized for objects with\nkeys that are short strings, especially integer numeric strings.  Thus any\nbenchmark which tests _solely_ using numbers as keys will tend to find that\nan object-based approach performs the best.\n\nNote that coercing _anything_ to strings to use as object keys is unsafe,\nunless you can be 100% certain that no other type of value will be used.\nFor example:\n\n```js\nconst myCache = {}\nconst set = (k, v) => myCache[k] = v\nconst get = (k) => myCache[k]\n\nset({}, 'please hang onto this for me')\nset('[object Object]', 'oopsie')\n```\n\nAlso beware of \"Just So\" stories regarding performance.  Garbage collection\nof large (especially: deep) object graphs can be incredibly costly, with\nseveral \"tipping points\" where it increases exponentially.  As a result,\nputting that off until later can make it much worse, and less predictable.\nIf a library performs well, but only in a scenario where the object graph is\nkept shallow, then that won't help you if you are using large objects as\nkeys.\n\nIn general, when attempting to use a library to improve performance (such\nas a cache like this one), it's best to choose an option that will perform\nwell in the sorts of scenarios where you'll actually use it.\n\nThis library is optimized for repeated gets and minimizing eviction time,\nsince that is the expected need of a LRU.  Set operations are somewhat\nslower on average than a few other options, in part because of that\noptimization.  It is assumed that you'll be caching some costly operation,\nideally as rarely as possible, so optimizing set over get would be unwise.\n\nIf performance matters to you:\n\n1. If it's at all possible to use small integer values as keys, and you can\n   guarantee that no other types of values will be used as keys, then do\n   that, and use a cache such as\n   [lru-fast](https://npmjs.com/package/lru-fast), or [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache) which\n   uses an Object as its data store.\n2. Failing that, if at all possible, use short non-numeric strings (ie,\n   less than 256 characters) as your keys, and use [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache).\n3. If the types of your keys will be long strings, strings that look like\n   floats, `null`, objects, or some mix of types, or if you aren't sure,\n   then this library will work well for you.\n4. Do not use a `dispose` function, size tracking, or especially ttl\n   behavior, unless absolutely needed.  These features are convenient, and\n   necessary in some use cases, and every attempt has been made to make the\n   performance impact minimal, but it isn't nothing.\n\n## Breaking Changes in Version 7\n\nThis library changed to a different algorithm and internal data structure\nin version 7, yielding significantly better performance, albeit with\nsome subtle changes as a result.\n\nIf you were relying on the internals of LRUCache in version 6 or before, it\nprobably will not work in version 7 and above.\n\nFor more info, see the [change log](CHANGELOG.md).\n","tap":{"coverage-map":"map.js","node-arg":["--expose-gc"]},"size-limit":[{"path":"./index.js"}],"readmeFilename":"README.md","gitHead":"5c146c6720c3b73cd69b3e3ffe700d70a6818f1f","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.5.2_1649532845651_0.6747761236685403"},"_hasShrinkwrap":false},"7.6.0":{"_id":"lru-cache@7.6.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.6.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","clock-mock":"^1.0.3","size-limit":"^7.0.8","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"33c9a9815ce6e4c0e2d5d151f6a28400770e7ce0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.6.0.tgz"},"tap":{"coverage-map":"map.js"},"size-limit":[{"path":"./index.js"}],"gitHead":"243114d7d4a72b81b40b8d546e457396a321cf10","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.6.0_1647489585674_0.2590322162594001"},"_hasShrinkwrap":false},"7.6.1":{"_id":"lru-cache@7.6.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.6.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","clock-mock":"^1.0.4","heapdump":"^0.3.15","size-limit":"^7.0.8","tap":"^16.0.1"},"engines":{"node":">=12"},"main":"index.js","publishConfig":{"tag":"v7.6-backport"},"dist":{"shasum":"14a52901b083ea4f8ea6b7ea9eedf8f31d0d32e3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.6.1.tgz"},"readme":"# lru-cache\n\nA cache object that deletes the least-recently-used items.\n\nSpecify a max number of the most recently used items that you want to keep,\nand this cache will keep that many of the most recently accessed items.\n\nThis is not primarily a TTL cache, and does not make strong TTL guarantees.\nThere is no preemptive pruning of expired items, but you _may_ set a TTL\non the cache or on a single `set`.  If you do so, it will treat expired\nitems as missing, and delete them when fetched.\n\nAs of version 7, this is one of the most performant LRU implementations\navailable in JavaScript, and supports a wide diversity of use cases.\nHowever, note that using some of the features will necessarily impact\nperformance, by causing the cache to have to do more work.  See the\n\"Performance\" section below.\n\n## Installation\n\n```bash\nnpm install lru-cache --save\n```\n\n## Usage\n\n```js\nconst LRU = require('lru-cache')\n\n// only 'max' is required, the others are optional, but MAY be\n// required if certain other fields are set.\nconst options = {\n  // the number of most recently used items to keep.\n  // note that we may store fewer items than this if maxSize is hit.\n\n  max: 500, // <-- Technically optional, but see \"Storage Bounds Safety\" below\n\n  // if you wish to track item size, you must provide a maxSize\n  // note that we still will only keep up to max *actual items*,\n  // so size tracking may cause fewer than max items to be stored.\n  // At the extreme, a single item of maxSize size will cause everything\n  // else in the cache to be dropped when it is added.  Use with caution!\n  // Note also that size tracking can negatively impact performance,\n  // though for most cases, only minimally.\n  maxSize: 5000,\n\n  // function to calculate size of items.  useful if storing strings or\n  // buffers or other items where memory size depends on the object itself.\n  // also note that oversized items do NOT immediately get dropped from\n  // the cache, though they will cause faster turnover in the storage.\n  sizeCalculation: (value, key) => {\n    // return an positive integer which is the size of the item,\n    // if a positive integer is not returned, will use 0 as the size.\n    return 1\n  },\n\n  // function to call when the item is removed from the cache\n  // Note that using this can negatively impact performance.\n  dispose: (value, key) => {\n    freeFromMemoryOrWhatever(value)\n  },\n\n  // max time to live for items before they are considered stale\n  // note that stale items are NOT preemptively removed by default,\n  // and MAY live in the cache, contributing to its LRU max, long after\n  // they have expired.\n  // Also, as this cache is optimized for LRU/MRU operations, some of\n  // the staleness/TTL checks will reduce performance, as they will incur\n  // overhead by deleting items.\n  // Must be a positive integer in ms, defaults to 0, which means \"no TTL\"\n  ttl: 1000 * 60 * 5,\n\n  // return stale items from cache.get() before disposing of them\n  // boolean, default false\n  allowStale: false,\n\n  // update the age of items on cache.get(), renewing their TTL\n  // boolean, default false\n  updateAgeOnGet: false,\n\n  // update the age of items on cache.has(), renewing their TTL\n  // boolean, default false\n  updateAgeOnHas: false,\n}\n\nconst cache = new LRU(options)\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\n// non-string keys ARE fully supported\n// but note that it must be THE SAME object, not\n// just a JSON-equivalent object.\nvar someObject = { a: 1 }\ncache.set(someObject, 'a value')\n// Object keys are not toString()-ed\ncache.set('[object Object]', 'a different value')\nassert.equal(cache.get(someObject), 'a value')\n// A similar object with same keys/values won't work,\n// because it's a different object identity\nassert.equal(cache.get({ a: 1 }), undefined)\n\ncache.clear()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\n## Options\n\n* `max` - The maximum number (or size) of items that remain in the cache\n  (assuming no TTL pruning or explicit deletions).  Note that fewer items\n  may be stored if size calculation is used, and `maxSize` is exceeded.\n  This must be a positive finite intger.\n\n    At least one of `max`, `maxSize`, or `TTL` is required.  This must be a\n    positive integer if set.\n\n    **It is strongly recommended to set a `max` to prevent unbounded growth\n    of the cache.**  See \"Storage Bounds Safety\" below.\n\n* `maxSize` - Set to a positive integer to track the sizes of items added\n  to the cache, and automatically evict items in order to stay below this\n  size.  Note that this may result in fewer than `max` items being stored.\n\n    Optional, must be a positive integer if provided.  Required if other\n    size tracking features are used.\n\n    At least one of `max`, `maxSize`, or `TTL` is required.  This must be a\n    positive integer if set.\n\n    Even if size tracking is enabled, **it is strongly recommended to set a\n    `max` to prevent unbounded growth of the cache.**  See \"Storage Bounds\n    Safety\" below.\n\n* `sizeCalculation` - Function used to calculate the size of stored\n  items.  If you're storing strings or buffers, then you probably want to\n  do something like `n => n.length`.  The item is passed as the first\n  argument, and the key is passed as the second argument.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Requires `maxSize` to be set.\n\n    Deprecated alias: `length`\n\n* `fetchMethod` Function that is used to make background asynchronous\n  fetches.  Called with `fetchMethod(key, staleValue)`.  May return a\n  Promise.\n\n    If `fetchMethod` is not provided, then `cache.fetch(key)` is equivalent\n    to `Promise.resolve(cache.get(key))`.\n\n* `dispose` Function that is called on items when they are dropped\n  from the cache, as `this.dispose(value, key, reason)`.\n\n    This can be handy if you want to close file descriptors or do other\n    cleanup tasks when items are no longer stored in the cache.\n\n    **NOTE**: It is called *before* the item has been fully removed from\n    the cache, so if you want to put it right back in, you need to wait\n    until the next tick.  If you try to add it back in during the\n    `dispose()` function call, it will break things in subtle and weird\n    ways.\n\n    Unlike several other options, this may _not_ be overridden by passing\n    an option to `set()`, for performance reasons.  If disposal functions\n    may vary between cache entries, then the entire list must be scanned\n    on every cache swap, even if no disposal function is in use.\n\n    The `reason` will be one of the following strings, corresponding to the\n    reason for the item's deletion:\n\n    * `evict` Item was evicted to make space for a new addition\n    * `set` Item was overwritten by a new value\n    * `delete` Item was removed by explicit `cache.delete(key)` or by\n      calling `cache.clear()`, which deletes everything.\n\n    Optional, must be a function.\n\n* `disposeAfter` The same as `dispose`, but called _after_ the entry is\n  completely removed and the cache is once again in a clean state.\n\n    It is safe to add an item right back into the cache at this point.\n    However, note that it is _very_ easy to inadvertently create infinite\n    recursion in this way.\n\n* `noDisposeOnSet` Set to `true` to suppress calling the `dispose()`\n  function if the entry key is still accessible within the cache.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Boolean, default `false`.  Only relevant if `dispose` or `disposeAfter`\n    options are set.\n\n* `ttl` - max time to live for items before they are considered stale.\n  Note that stale items are NOT preemptively removed by default, and MAY\n  live in the cache, contributing to its LRU max, long after they have\n  expired.\n\n    Also, as this cache is optimized for LRU/MRU operations, some of\n    the staleness/TTL checks will reduce performance, as they will incur\n    overhead by deleting from Map objects rather than simply throwing old\n    Map objects away.\n\n    This is not primarily a TTL cache, and does not make strong TTL\n    guarantees.  There is no pre-emptive pruning of expired items, but you\n    _may_ set a TTL on the cache, and it will treat expired items as missing\n    when they are fetched, and delete them.\n\n    Optional, but must be a positive integer in ms if specified.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    At least one of `max`, `maxSize`, or `TTL` is required.  This must be a\n    positive integer if set.\n\n    Even if ttl tracking is enabled, **it is strongly recommended to set a\n    `max` to prevent unbounded growth of the cache.**  See \"Storage Bounds\n    Safety\" below.\n\n    If ttl tracking is enabled, and `max` and `maxSize` are not set, and\n    `ttlAutopurge` is not set, then a warning will be emitted cautioning\n    about the potential for unbounded memory consumption.\n\n    Deprecated alias: `maxAge`\n\n* `noUpdateTTL` - Boolean flag to tell the cache to not update the TTL when\n  setting a new value for an existing key (ie, when updating a value rather\n  than inserting a new value).  Note that the TTL value is _always_ set\n  (if provided) when adding a new entry into the cache.\n\n    This may be passed as an option to `cache.set()`.\n\n    Boolean, default false.\n\n* `ttlResolution` - Minimum amount of time in ms in which to check for\n  staleness.  Defaults to `1`, which means that the current time is checked\n  at most once per millisecond.\n\n    Set to `0` to check the current time every time staleness is tested.\n\n    Note that setting this to a higher value _will_ improve performance\n    somewhat while using ttl tracking, albeit at the expense of keeping\n    stale items around a bit longer than intended.\n\n* `ttlAutopurge` - Preemptively remove stale items from the cache.\n\n    Note that this may _significantly_ degrade performance, especially if\n    the cache is storing a large number of items.  It is almost always best\n    to just leave the stale items in the cache, and let them fall out as\n    new items are added.\n\n    Note that this means that `allowStale` is a bit pointless, as stale\n    items will be deleted almost as soon as they expire.\n\n    Use with caution!\n\n    Boolean, default `false`\n\n* `allowStale` - By default, if you set `ttl`, it'll only delete stale\n  items from the cache when you `get(key)`.  That is, it's not\n  preemptively pruning items.\n\n    If you set `allowStale:true`, it'll return the stale value as well as\n    deleting it.  If you don't set this, then it'll return `undefined` when\n    you try to get a stale entry.\n\n    Note that when a stale entry is fetched, _even if it is returned due to\n    `allowStale` being set_, it is removed from the cache immediately.  You\n    can immediately put it back in the cache if you wish, thus resetting the\n    TTL.\n\n    This may be overridden by passing an options object to `cache.get()`.\n    The `cache.has()` method will always return `false` for stale items.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n    Deprecated alias: `stale`\n\n* `updateAgeOnGet` - When using time-expiring entries with `ttl`, setting\n  this to `true` will make each item's age reset to 0 whenever it is\n  retrieved from cache with `get()`, causing it to not expire.  (It can\n  still fall out of cache based on recency of use, of course.)\n\n    This may be overridden by passing an options object to `cache.get()`.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n## API\n\n* `new LRUCache(options)`\n\n    Create a new LRUCache.  All options are documented above, and are on\n    the cache as public members.\n\n* `cache.max`, `cache.maxSize`, `cache.allowStale`, `cache.noDisposeOnSet`,\n  `cache.sizeCalculation`, `cache.dispose`, `cache.maxSize`, `cache.ttl`,\n  `cache.updateAgeOnGet`\n\n    All option names are exposed as public members on the cache object.\n\n    These are intended for read access only.  Changing them during program\n    operation can cause undefined behavior.\n\n* `cache.size`\n\n    The total number of items held in the cache at the current moment.\n\n* `cache.calculatedSize`\n\n    The total size of items in cache when using size tracking.\n\n* `set(key, value, [{ size, sizeCalculation, ttl, noDisposeOnSet }])`\n\n    Add a value to the cache.\n\n    Optional options object may contain `ttl` and `sizeCalculation` as\n    described above, which default to the settings on the cache object.\n\n    Options object my also include `size`, which will prevent calling the\n    `sizeCalculation` function and just use the specified number if it is a\n    positive integer, and `noDisposeOnSet` which will prevent calling a\n    `dispose` function in the case of overwrites.\n\n    Will update the recency of the entry.\n\n    Returns the cache object.\n\n* `get(key, { updateAgeOnGet, allowStale } = {}) => value`\n\n    Return a value from the cache.\n\n    Will update the recency of the cache entry found.\n\n    If the key is not found, `get()` will return `undefined`.  This can be\n    confusing when setting values specifically to `undefined`, as in\n    `cache.set(key, undefined)`.  Use `cache.has()` to determine whether a\n    key is present in the cache at all.\n\n* `async fetch(key, { updateAgeOnGet, allowStale } = {}) => Promise`\n\n    If the value is in the cache and not stale, then the returned Promise\n    resolves to the value.\n\n    If not in the cache, or beyond its TTL staleness, then\n    `fetchMethod(key, staleValue)` is called, and the value returned will\n    be added to the cache once resolved.\n\n    If called with `allowStale`, and an asynchronous fetch is currently in\n    progress to reload a stale value, then the former stale value will be\n    returned.\n\n    Multiple fetches for the same `key` will only call `fetchMethod` a\n    single time, and all will be resolved when the value is resolved.\n\n    If `fetchMethod` is not specified, then this is an alias for\n    `Promise.resolve(cache.get(key))`.\n\n* `peek(key, { allowStale } = {}) => value`\n\n    Like `get()` but doesn't update recency or delete stale items.\n\n    Returns `undefined` if the item is stale, unless `allowStale` is set\n    either on the cache or in the options object.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recency or age.\n\n    Will return `false` if the item is stale, even though it is technically\n    in the cache.\n\n* `delete(key)`\n\n    Deletes a key out of the cache.\n\n    Returns `true` if the key was deleted, `false` otherwise.\n\n* `clear()`\n\n    Clear the cache entirely, throwing away all values.\n\n    Deprecated alias: `reset()`\n\n* `keys()`\n\n    Return a generator yielding the keys in the cache, in order from most\n    recently used to least recently used.\n\n* `rkeys()`\n\n    Return a generator yielding the keys in the cache, in order from least\n    recently used to most recently used.\n\n* `values()`\n\n    Return a generator yielding the values in the cache, in order from most\n    recently used to least recently used.\n\n* `rvalues()`\n\n    Return a generator yielding the values in the cache, in order from\n    least recently used to most recently used.\n\n* `entries()`\n\n    Return a generator yielding `[key, value]` pairs, in order from most\n    recently used to least recently used.\n\n* `rentries()`\n\n    Return a generator yielding `[key, value]` pairs, in order from least\n    recently used to most recently used.\n\n* `find(fn, [getOptions])`\n\n    Find a value for which the supplied `fn` method returns a truthy value,\n    similar to `Array.find()`.\n\n    `fn` is called as `fn(value, key, cache)`.\n\n    The optional `getOptions` are applied to the resulting `get()` of the\n    item found.\n\n* `dump()`\n\n    Return an array of `[key, entry]` objects which can be passed to\n    `cache.load()`\n\n    Note: this returns an actual array, not a generator, so it can be more\n    easily passed around.\n\n* `load(entries)`\n\n    Reset the cache and load in the items in `entries` in the order listed.\n    Note that the shape of the resulting cache may be different if the same\n    options are not used in both caches.\n\n* `purgeStale()`\n\n    Delete any stale entries.  Returns `true` if anything was removed,\n    `false` otherwise.\n\n    Deprecated alias: `prune`\n\n* `getRemainingTTL(key)`\n\n    Return the number of ms left in the item's TTL.  If item is not in\n    cache, returns `0`.  Returns `Infinity` if item is in cache without a\n    defined TTL.\n\n* `forEach(fn, [thisp])`\n\n    Call the `fn` function with each set of `fn(value, key, cache)` in the\n    LRU cache, from most recent to least recently used.\n\n    Does not affect recency of use.\n\n    If `thisp` is provided, function will be called in the `this`-context\n    of the provided object.\n\n* `rforEach(fn, [thisp])`\n\n    Same as `cache.forEach(fn, thisp)`, but in order from least recently\n    used to most recently used.\n\n* `pop()`\n\n    Evict the least recently used item, returning its value.\n\n    Returns `undefined` if cache is empty.\n\n### Internal Methods and Properties\n\nIn order to optimize performance as much as possible, \"private\" members and\nmethods are exposed on the object as normal properties, rather than being\naccessed via Symbols, private members, or closure variables.\n\n**Do not use or rely on these.**  They will change or be removed without\nnotice.  They will cause undefined behavior if used inappropriately.  There\nis no need or reason to ever call them directly.\n\nThis documentation is here so that it is especially clear that this not\n\"undocumented\" because someone forgot; it _is_ documented, and the\ndocumentation is telling you not to do it.\n\n**Do not report bugs that stem from using these properties.**  They will be\nignored.\n\n* `initializeTTLTracking()` Set up the cache for tracking TTLs\n* `updateItemAge(index)` Called when an item age is updated, by internal ID\n* `setItemTTL(index)` Called when an item ttl is updated, by internal ID\n* `isStale(index)` Called to check an item's staleness, by internal ID\n* `initializeSizeTracking()` Set up the cache for tracking item size.\n  Called automatically when a size is specified.\n* `removeItemSize(index)` Updates the internal size calculation when an\n  item is removed or modified, by internal ID\n* `addItemSize(index)` Updates the internal size calculation when an item\n  is added or modified, by internal ID\n* `indexes()` An iterator over the non-stale internal IDs, from most\n  recently to least recently used.\n* `rindexes()` An iterator over the non-stale internal IDs, from least\n  recently to most recently used.\n* `newIndex()` Create a new internal ID, either reusing a deleted ID,\n  evicting the least recently used ID, or walking to the end of the\n  allotted space.\n* `evict()` Evict the least recently used internal ID, returning its ID.\n  Does not do any bounds checking.\n* `connect(p, n)` Connect the `p` and `n` internal IDs in the linked list.\n* `moveToTail(index)` Move the specified internal ID to the most recently\n  used position.\n* `keyMap` Map of keys to internal IDs\n* `keyList` List of keys by internal ID\n* `valList` List of values by internal ID\n* `sizes` List of calculated sizes by internal ID\n* `ttls` List of TTL values by internal ID\n* `starts` List of start time values by internal ID\n* `next` Array of \"next\" pointers by internal ID\n* `prev` Array of \"previous\" pointers by internal ID\n* `head` Internal ID of least recently used item\n* `tail` Internal ID of most recently used item\n* `free` Stack of deleted internal IDs\n\n## Storage Bounds Safety\n\nThis implementation aims to be as flexible as possible, within the limits\nof safe memory consumption and optimal performance.\n\nAt initial object creation, storage is allocated for `max` items.  If `max`\nis set to zero, then some performance is lost, and item count is unbounded.\nEither `maxSize` or `ttl` _must_ be set if `max` is not specified.\n\nIf `maxSize` is set, then this creates a safe limit on the maximum storage\nconsumed, but without the performance benefits of pre-allocation.  When\n`maxSize` is set, every item _must_ provide a size, either via the\n`sizeCalculation` method provided to the constructor, or via a `size` or\n`sizeCalculation` option provided to `cache.set()`.  The size of every item\n_must_ be a positive integer.\n\nIf neither `max` nor `maxSize` are set, then `ttl` tracking must be\nenabled.  Note that, even when tracking item `ttl`, items are _not_\npreemptively deleted when they become stale, unless `ttlAutopurge` is\nenabled.  Instead, they are only purged the next time the key is requested.\nThus, if `ttlAutopurge`, `max`, and `maxSize` are all not set, then the\ncache will potentially grow unbounded.\n\nIn this case, a warning is printed to standard error.  Future versions may\nrequire the use of `ttlAutopurge` if `max` and `maxSize` are not specified.\n\nIf you truly wish to use a cache that is bound _only_ by TTL expiration,\nconsider using a `Map` object, and calling `setTimeout` to delete entries\nwhen they expire.  It will perform much better than an LRU cache.\n\nHere is an implementation you may use, under the same [license](./LICENSE)\nas this package:\n\n```js\n// a storage-unbounded ttl cache that is not an lru-cache\nconst cache = {\n  data: new Map(),\n  timers: new Map(),\n  set: (k, v, ttl) => {\n    if (cache.timers.has(k)) {\n      clearTimeout(cache.timers.get(k))\n    }\n    cache.timers.set(k, setTimeout(() => cache.del(k), ttl))\n    cache.data.set(k, v)\n  },\n  get: k => cache.data.get(k),\n  has: k => cache.data.has(k),\n  delete: k => {\n    if (cache.timers.has(k)) {\n      clearTimeout(cache.timers.get(k))\n    }\n    cache.timers.delete(k)\n    return cache.data.delete(k)\n  },\n  clear: () => {\n    cache.data.clear()\n    for (const v of cache.timers.values()) {\n      clearTimeout(v)\n    }\n    cache.timers.clear()\n  }\n}\n```\n\n## Performance\n\nAs of January 2022, version 7 of this library is one of the most performant\nLRU cache implementations in JavaScript.\n\nBenchmarks can be extremely difficult to get right.  In particular, the\nperformance of set/get/delete operations on objects will vary _wildly_\ndepending on the type of key used.  V8 is highly optimized for objects with\nkeys that are short strings, especially integer numeric strings.  Thus any\nbenchmark which tests _solely_ using numbers as keys will tend to find that\nan object-based approach performs the best.\n\nNote that coercing _anything_ to strings to use as object keys is unsafe,\nunless you can be 100% certain that no other type of value will be used.\nFor example:\n\n```js\nconst myCache = {}\nconst set = (k, v) => myCache[k] = v\nconst get = (k) => myCache[k]\n\nset({}, 'please hang onto this for me')\nset('[object Object]', 'oopsie')\n```\n\nAlso beware of \"Just So\" stories regarding performance.  Garbage collection\nof large (especially: deep) object graphs can be incredibly costly, with\nseveral \"tipping points\" where it increases exponentially.  As a result,\nputting that off until later can make it much worse, and less predictable.\nIf a library performs well, but only in a scenario where the object graph is\nkept shallow, then that won't help you if you are using large objects as\nkeys.\n\nIn general, when attempting to use a library to improve performance (such\nas a cache like this one), it's best to choose an option that will perform\nwell in the sorts of scenarios where you'll actually use it.\n\nThis library is optimized for repeated gets and minimizing eviction time,\nsince that is the expected need of a LRU.  Set operations are somewhat\nslower on average than a few other options, in part because of that\noptimization.  It is assumed that you'll be caching some costly operation,\nideally as rarely as possible, so optimizing set over get would be unwise.\n\nIf performance matters to you:\n\n1. If it's at all possible to use small integer values as keys, and you can\n   guarantee that no other types of values will be used as keys, then do\n   that, and use a cache such as\n   [lru-fast](https://npmjs.com/package/lru-fast), or [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache) which\n   uses an Object as its data store.\n2. Failing that, if at all possible, use short non-numeric strings (ie,\n   less than 256 characters) as your keys, and use [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache).\n3. If the types of your keys will be long strings, strings that look like\n   floats, `null`, objects, or some mix of types, or if you aren't sure,\n   then this library will work well for you.\n4. Do not use a `dispose` function, size tracking, or especially ttl\n   behavior, unless absolutely needed.  These features are convenient, and\n   necessary in some use cases, and every attempt has been made to make the\n   performance impact minimal, but it isn't nothing.\n\n## Breaking Changes in Version 7\n\nThis library changed to a different algorithm and internal data structure\nin version 7, yielding significantly better performance, albeit with\nsome subtle changes as a result.\n\nIf you were relying on the internals of LRUCache in version 6 or before, it\nprobably will not work in version 7 and above.\n\nFor more info, see the [change log](CHANGELOG.md).\n","tap":{"coverage-map":"map.js","node-arg":["--expose-gc"]},"size-limit":[{"path":"./index.js"}],"readmeFilename":"README.md","gitHead":"8822133dbdee2deb1d92b96e9bea14c447a4ba8f","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.6.1_1649532433838_0.13480944572485698"},"_hasShrinkwrap":false},"7.7.0":{"_id":"lru-cache@7.7.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.7.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","clock-mock":"^1.0.3","size-limit":"^7.0.8","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"8ce6eeb1b553660a99edb3ff832cecceaeeece17","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.7.0.tgz"},"tap":{"coverage-map":"map.js"},"size-limit":[{"path":"./index.js"}],"gitHead":"74edff9a114115b1c93364f73e6e49ec4d8f2d9b","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.7.0_1647560872353_0.846644611126973"},"_hasShrinkwrap":false},"7.7.1":{"_id":"lru-cache@7.7.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.7.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","clock-mock":"^1.0.3","size-limit":"^7.0.8","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"03d2846b1ad2dcc7931a9340b8711d9798fcb0c6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.7.1.tgz"},"tap":{"coverage-map":"map.js"},"size-limit":[{"path":"./index.js"}],"gitHead":"b0e4020b7b2c619ba48a61758afa2c17fb8b7cd1","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.7.1_1647572408611_0.19350637451252428"},"_hasShrinkwrap":false},"7.7.2":{"_id":"lru-cache@7.7.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.7.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","clock-mock":"^1.0.4","size-limit":"^7.0.8","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"9a31f924b96e0e238c1f981bf3fcc2563aafb5f0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.7.2.tgz"},"tap":{"coverage-map":"map.js"},"size-limit":[{"path":"./index.js"}],"gitHead":"49b95f27ca3af929fc5fa7cbae36bbc1710663e9","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.7.2_1648590374005_0.46460989436219746"},"_hasShrinkwrap":false},"7.7.3":{"_id":"lru-cache@7.7.3","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.7.3","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","clock-mock":"^1.0.4","size-limit":"^7.0.8","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"98cd19eef89ce6a4a3c4502c17c833888677c252","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.7.3.tgz"},"tap":{"coverage-map":"map.js"},"size-limit":[{"path":"./index.js"}],"gitHead":"96a05fe9433c42c66d8c885fac8789cfa250b743","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.7.3_1648653534991_0.14582414592360093"},"_hasShrinkwrap":false},"7.7.4":{"_id":"lru-cache@7.7.4","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.7.4","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","clock-mock":"^1.0.4","heapdump":"^0.3.15","size-limit":"^7.0.8","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","publishConfig":{"tag":"v7.7-backport"},"dist":{"shasum":"7fabe5409884d3d2bd88292e431e49494d84ca13","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.7.4.tgz"},"readme":"# lru-cache\n\nA cache object that deletes the least-recently-used items.\n\nSpecify a max number of the most recently used items that you want to keep,\nand this cache will keep that many of the most recently accessed items.\n\nThis is not primarily a TTL cache, and does not make strong TTL guarantees.\nThere is no preemptive pruning of expired items, but you _may_ set a TTL\non the cache or on a single `set`.  If you do so, it will treat expired\nitems as missing, and delete them when fetched.\n\nAs of version 7, this is one of the most performant LRU implementations\navailable in JavaScript, and supports a wide diversity of use cases.\nHowever, note that using some of the features will necessarily impact\nperformance, by causing the cache to have to do more work.  See the\n\"Performance\" section below.\n\n## Installation\n\n```bash\nnpm install lru-cache --save\n```\n\n## Usage\n\n```js\nconst LRU = require('lru-cache')\n\n// only 'max' is required, the others are optional, but MAY be\n// required if certain other fields are set.\nconst options = {\n  // the number of most recently used items to keep.\n  // note that we may store fewer items than this if maxSize is hit.\n\n  max: 500, // <-- Technically optional, but see \"Storage Bounds Safety\" below\n\n  // if you wish to track item size, you must provide a maxSize\n  // note that we still will only keep up to max *actual items*,\n  // so size tracking may cause fewer than max items to be stored.\n  // At the extreme, a single item of maxSize size will cause everything\n  // else in the cache to be dropped when it is added.  Use with caution!\n  // Note also that size tracking can negatively impact performance,\n  // though for most cases, only minimally.\n  maxSize: 5000,\n\n  // function to calculate size of items.  useful if storing strings or\n  // buffers or other items where memory size depends on the object itself.\n  // also note that oversized items do NOT immediately get dropped from\n  // the cache, though they will cause faster turnover in the storage.\n  sizeCalculation: (value, key) => {\n    // return an positive integer which is the size of the item,\n    // if a positive integer is not returned, will use 0 as the size.\n    return 1\n  },\n\n  // function to call when the item is removed from the cache\n  // Note that using this can negatively impact performance.\n  dispose: (value, key) => {\n    freeFromMemoryOrWhatever(value)\n  },\n\n  // max time to live for items before they are considered stale\n  // note that stale items are NOT preemptively removed by default,\n  // and MAY live in the cache, contributing to its LRU max, long after\n  // they have expired.\n  // Also, as this cache is optimized for LRU/MRU operations, some of\n  // the staleness/TTL checks will reduce performance, as they will incur\n  // overhead by deleting items.\n  // Must be a positive integer in ms, defaults to 0, which means \"no TTL\"\n  ttl: 1000 * 60 * 5,\n\n  // return stale items from cache.get() before disposing of them\n  // boolean, default false\n  allowStale: false,\n\n  // update the age of items on cache.get(), renewing their TTL\n  // boolean, default false\n  updateAgeOnGet: false,\n\n  // update the age of items on cache.has(), renewing their TTL\n  // boolean, default false\n  updateAgeOnHas: false,\n}\n\nconst cache = new LRU(options)\n\ncache.set(\"key\", \"value\")\ncache.get(\"key\") // \"value\"\n\n// non-string keys ARE fully supported\n// but note that it must be THE SAME object, not\n// just a JSON-equivalent object.\nvar someObject = { a: 1 }\ncache.set(someObject, 'a value')\n// Object keys are not toString()-ed\ncache.set('[object Object]', 'a different value')\nassert.equal(cache.get(someObject), 'a value')\n// A similar object with same keys/values won't work,\n// because it's a different object identity\nassert.equal(cache.get({ a: 1 }), undefined)\n\ncache.clear()    // empty the cache\n```\n\nIf you put more stuff in it, then items will fall out.\n\n## Options\n\n* `max` - The maximum number (or size) of items that remain in the cache\n  (assuming no TTL pruning or explicit deletions).  Note that fewer items\n  may be stored if size calculation is used, and `maxSize` is exceeded.\n  This must be a positive finite intger.\n\n    At least one of `max`, `maxSize`, or `TTL` is required.  This must be a\n    positive integer if set.\n\n    **It is strongly recommended to set a `max` to prevent unbounded growth\n    of the cache.**  See \"Storage Bounds Safety\" below.\n\n* `maxSize` - Set to a positive integer to track the sizes of items added\n  to the cache, and automatically evict items in order to stay below this\n  size.  Note that this may result in fewer than `max` items being stored.\n\n    Optional, must be a positive integer if provided.  Required if other\n    size tracking features are used.\n\n    At least one of `max`, `maxSize`, or `TTL` is required.  This must be a\n    positive integer if set.\n\n    Even if size tracking is enabled, **it is strongly recommended to set a\n    `max` to prevent unbounded growth of the cache.**  See \"Storage Bounds\n    Safety\" below.\n\n* `sizeCalculation` - Function used to calculate the size of stored\n  items.  If you're storing strings or buffers, then you probably want to\n  do something like `n => n.length`.  The item is passed as the first\n  argument, and the key is passed as the second argument.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Requires `maxSize` to be set.\n\n    Deprecated alias: `length`\n\n* `fetchMethod` Function that is used to make background asynchronous\n  fetches.  Called with `fetchMethod(key, staleValue, { signal, options })`.\n  May return a Promise.\n\n    If `fetchMethod` is not provided, then `cache.fetch(key)` is equivalent\n    to `Promise.resolve(cache.get(key))`.\n\n    The `signal` object is an `AbortSignal`.  If at any time,\n    `signal.aborted` is set to `true`, then that means that the fetch\n    should be abandoned.  This may be passed along to async functions aware\n    of AbortController/AbortSignal behavior.\n\n    The `options` object is a union of the options that may be provided to\n    `set()` and `get()`.  If they are modified, then that will result in\n    modifying the settings to `cache.set()` when the value is resolved.\n    For example, a DNS cache may update the TTL based on the value returned\n    from a remote DNS server by changing `options.ttl` in the\n    `fetchMethod`.\n\n* `dispose` Function that is called on items when they are dropped\n  from the cache, as `this.dispose(value, key, reason)`.\n\n    This can be handy if you want to close file descriptors or do other\n    cleanup tasks when items are no longer stored in the cache.\n\n    **NOTE**: It is called *before* the item has been fully removed from\n    the cache, so if you want to put it right back in, you need to wait\n    until the next tick.  If you try to add it back in during the\n    `dispose()` function call, it will break things in subtle and weird\n    ways.\n\n    Unlike several other options, this may _not_ be overridden by passing\n    an option to `set()`, for performance reasons.  If disposal functions\n    may vary between cache entries, then the entire list must be scanned\n    on every cache swap, even if no disposal function is in use.\n\n    The `reason` will be one of the following strings, corresponding to the\n    reason for the item's deletion:\n\n    * `evict` Item was evicted to make space for a new addition\n    * `set` Item was overwritten by a new value\n    * `delete` Item was removed by explicit `cache.delete(key)` or by\n      calling `cache.clear()`, which deletes everything.\n\n    The `dispose()` method is _not_ called for canceled calls to\n    `fetchMethod()`.  If you wish to handle evictions, overwrites, and\n    deletes of in-flight asynchronous fetches, you must use the\n    `AbortSignal` provided.\n\n    Optional, must be a function.\n\n* `disposeAfter` The same as `dispose`, but called _after_ the entry is\n  completely removed and the cache is once again in a clean state.\n\n    It is safe to add an item right back into the cache at this point.\n    However, note that it is _very_ easy to inadvertently create infinite\n    recursion in this way.\n\n    The `disposeAfter()` method is _not_ called for canceled calls to\n    `fetchMethod()`.  If you wish to handle evictions, overwrites, and\n    deletes of in-flight asynchronous fetches, you must use the\n    `AbortSignal` provided.\n\n* `noDisposeOnSet` Set to `true` to suppress calling the `dispose()`\n  function if the entry key is still accessible within the cache.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    Boolean, default `false`.  Only relevant if `dispose` or `disposeAfter`\n    options are set.\n\n* `ttl` - max time to live for items before they are considered stale.\n  Note that stale items are NOT preemptively removed by default, and MAY\n  live in the cache, contributing to its LRU max, long after they have\n  expired.\n\n    Also, as this cache is optimized for LRU/MRU operations, some of\n    the staleness/TTL checks will reduce performance, as they will incur\n    overhead by deleting from Map objects rather than simply throwing old\n    Map objects away.\n\n    This is not primarily a TTL cache, and does not make strong TTL\n    guarantees.  There is no pre-emptive pruning of expired items, but you\n    _may_ set a TTL on the cache, and it will treat expired items as missing\n    when they are fetched, and delete them.\n\n    Optional, but must be a positive integer in ms if specified.\n\n    This may be overridden by passing an options object to `cache.set()`.\n\n    At least one of `max`, `maxSize`, or `TTL` is required.  This must be a\n    positive integer if set.\n\n    Even if ttl tracking is enabled, **it is strongly recommended to set a\n    `max` to prevent unbounded growth of the cache.**  See \"Storage Bounds\n    Safety\" below.\n\n    If ttl tracking is enabled, and `max` and `maxSize` are not set, and\n    `ttlAutopurge` is not set, then a warning will be emitted cautioning\n    about the potential for unbounded memory consumption.\n\n    Deprecated alias: `maxAge`\n\n* `noUpdateTTL` - Boolean flag to tell the cache to not update the TTL when\n  setting a new value for an existing key (ie, when updating a value rather\n  than inserting a new value).  Note that the TTL value is _always_ set\n  (if provided) when adding a new entry into the cache.\n\n    This may be passed as an option to `cache.set()`.\n\n    Boolean, default false.\n\n* `ttlResolution` - Minimum amount of time in ms in which to check for\n  staleness.  Defaults to `1`, which means that the current time is checked\n  at most once per millisecond.\n\n    Set to `0` to check the current time every time staleness is tested.\n\n    Note that setting this to a higher value _will_ improve performance\n    somewhat while using ttl tracking, albeit at the expense of keeping\n    stale items around a bit longer than intended.\n\n* `ttlAutopurge` - Preemptively remove stale items from the cache.\n\n    Note that this may _significantly_ degrade performance, especially if\n    the cache is storing a large number of items.  It is almost always best\n    to just leave the stale items in the cache, and let them fall out as\n    new items are added.\n\n    Note that this means that `allowStale` is a bit pointless, as stale\n    items will be deleted almost as soon as they expire.\n\n    Use with caution!\n\n    Boolean, default `false`\n\n* `allowStale` - By default, if you set `ttl`, it'll only delete stale\n  items from the cache when you `get(key)`.  That is, it's not\n  preemptively pruning items.\n\n    If you set `allowStale:true`, it'll return the stale value as well as\n    deleting it.  If you don't set this, then it'll return `undefined` when\n    you try to get a stale entry.\n\n    Note that when a stale entry is fetched, _even if it is returned due to\n    `allowStale` being set_, it is removed from the cache immediately.  You\n    can immediately put it back in the cache if you wish, thus resetting the\n    TTL.\n\n    This may be overridden by passing an options object to `cache.get()`.\n    The `cache.has()` method will always return `false` for stale items.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n    Deprecated alias: `stale`\n\n* `updateAgeOnGet` - When using time-expiring entries with `ttl`, setting\n  this to `true` will make each item's age reset to 0 whenever it is\n  retrieved from cache with `get()`, causing it to not expire.  (It can\n  still fall out of cache based on recency of use, of course.)\n\n    This may be overridden by passing an options object to `cache.get()`.\n\n    Boolean, default false, only relevant if `ttl` is set.\n\n## API\n\n* `new LRUCache(options)`\n\n    Create a new LRUCache.  All options are documented above, and are on\n    the cache as public members.\n\n* `cache.max`, `cache.maxSize`, `cache.allowStale`, `cache.noDisposeOnSet`,\n  `cache.sizeCalculation`, `cache.dispose`, `cache.maxSize`, `cache.ttl`,\n  `cache.updateAgeOnGet`\n\n    All option names are exposed as public members on the cache object.\n\n    These are intended for read access only.  Changing them during program\n    operation can cause undefined behavior.\n\n* `cache.size`\n\n    The total number of items held in the cache at the current moment.\n\n* `cache.calculatedSize`\n\n    The total size of items in cache when using size tracking.\n\n* `set(key, value, [{ size, sizeCalculation, ttl, noDisposeOnSet }])`\n\n    Add a value to the cache.\n\n    Optional options object may contain `ttl` and `sizeCalculation` as\n    described above, which default to the settings on the cache object.\n\n    Options object my also include `size`, which will prevent calling the\n    `sizeCalculation` function and just use the specified number if it is a\n    positive integer, and `noDisposeOnSet` which will prevent calling a\n    `dispose` function in the case of overwrites.\n\n    Will update the recency of the entry.\n\n    Returns the cache object.\n\n* `get(key, { updateAgeOnGet, allowStale } = {}) => value`\n\n    Return a value from the cache.\n\n    Will update the recency of the cache entry found.\n\n    If the key is not found, `get()` will return `undefined`.  This can be\n    confusing when setting values specifically to `undefined`, as in\n    `cache.set(key, undefined)`.  Use `cache.has()` to determine whether a\n    key is present in the cache at all.\n\n* `async fetch(key, { updateAgeOnGet, allowStale, size, sizeCalculation, ttl, noDisposeOnSet  } = {}) => Promise`\n\n    If the value is in the cache and not stale, then the returned Promise\n    resolves to the value.\n\n    If not in the cache, or beyond its TTL staleness, then\n    `fetchMethod(key, staleValue, options)` is called, and the value\n    returned will be added to the cache once resolved.\n\n    If called with `allowStale`, and an asynchronous fetch is currently in\n    progress to reload a stale value, then the former stale value will be\n    returned.\n\n    Multiple fetches for the same `key` will only call `fetchMethod` a\n    single time, and all will be resolved when the value is resolved, even\n    if different options are used.\n\n    If `fetchMethod` is not specified, then this is effectively an alias\n    for `Promise.resolve(cache.get(key))`.\n\n    When the fetch method resolves to a value, if the fetch has not been\n    aborted due to deletion, eviction, or being overwritten, then it is\n    added to the cache using the options provided.\n\n* `peek(key, { allowStale } = {}) => value`\n\n    Like `get()` but doesn't update recency or delete stale items.\n\n    Returns `undefined` if the item is stale, unless `allowStale` is set\n    either on the cache or in the options object.\n\n* `has(key)`\n\n    Check if a key is in the cache, without updating the recency or age.\n\n    Will return `false` if the item is stale, even though it is technically\n    in the cache.\n\n* `delete(key)`\n\n    Deletes a key out of the cache.\n\n    Returns `true` if the key was deleted, `false` otherwise.\n\n* `clear()`\n\n    Clear the cache entirely, throwing away all values.\n\n    Deprecated alias: `reset()`\n\n* `keys()`\n\n    Return a generator yielding the keys in the cache, in order from most\n    recently used to least recently used.\n\n* `rkeys()`\n\n    Return a generator yielding the keys in the cache, in order from least\n    recently used to most recently used.\n\n* `values()`\n\n    Return a generator yielding the values in the cache, in order from most\n    recently used to least recently used.\n\n* `rvalues()`\n\n    Return a generator yielding the values in the cache, in order from\n    least recently used to most recently used.\n\n* `entries()`\n\n    Return a generator yielding `[key, value]` pairs, in order from most\n    recently used to least recently used.\n\n* `rentries()`\n\n    Return a generator yielding `[key, value]` pairs, in order from least\n    recently used to most recently used.\n\n* `find(fn, [getOptions])`\n\n    Find a value for which the supplied `fn` method returns a truthy value,\n    similar to `Array.find()`.\n\n    `fn` is called as `fn(value, key, cache)`.\n\n    The optional `getOptions` are applied to the resulting `get()` of the\n    item found.\n\n* `dump()`\n\n    Return an array of `[key, entry]` objects which can be passed to\n    `cache.load()`\n\n    Note: this returns an actual array, not a generator, so it can be more\n    easily passed around.\n\n* `load(entries)`\n\n    Reset the cache and load in the items in `entries` in the order listed.\n    Note that the shape of the resulting cache may be different if the same\n    options are not used in both caches.\n\n* `purgeStale()`\n\n    Delete any stale entries.  Returns `true` if anything was removed,\n    `false` otherwise.\n\n    Deprecated alias: `prune`\n\n* `getRemainingTTL(key)`\n\n    Return the number of ms left in the item's TTL.  If item is not in\n    cache, returns `0`.  Returns `Infinity` if item is in cache without a\n    defined TTL.\n\n* `forEach(fn, [thisp])`\n\n    Call the `fn` function with each set of `fn(value, key, cache)` in the\n    LRU cache, from most recent to least recently used.\n\n    Does not affect recency of use.\n\n    If `thisp` is provided, function will be called in the `this`-context\n    of the provided object.\n\n* `rforEach(fn, [thisp])`\n\n    Same as `cache.forEach(fn, thisp)`, but in order from least recently\n    used to most recently used.\n\n* `pop()`\n\n    Evict the least recently used item, returning its value.\n\n    Returns `undefined` if cache is empty.\n\n### Internal Methods and Properties\n\nIn order to optimize performance as much as possible, \"private\" members and\nmethods are exposed on the object as normal properties, rather than being\naccessed via Symbols, private members, or closure variables.\n\n**Do not use or rely on these.**  They will change or be removed without\nnotice.  They will cause undefined behavior if used inappropriately.  There\nis no need or reason to ever call them directly.\n\nThis documentation is here so that it is especially clear that this not\n\"undocumented\" because someone forgot; it _is_ documented, and the\ndocumentation is telling you not to do it.\n\n**Do not report bugs that stem from using these properties.**  They will be\nignored.\n\n* `initializeTTLTracking()` Set up the cache for tracking TTLs\n* `updateItemAge(index)` Called when an item age is updated, by internal ID\n* `setItemTTL(index)` Called when an item ttl is updated, by internal ID\n* `isStale(index)` Called to check an item's staleness, by internal ID\n* `initializeSizeTracking()` Set up the cache for tracking item size.\n  Called automatically when a size is specified.\n* `removeItemSize(index)` Updates the internal size calculation when an\n  item is removed or modified, by internal ID\n* `addItemSize(index)` Updates the internal size calculation when an item\n  is added or modified, by internal ID\n* `indexes()` An iterator over the non-stale internal IDs, from most\n  recently to least recently used.\n* `rindexes()` An iterator over the non-stale internal IDs, from least\n  recently to most recently used.\n* `newIndex()` Create a new internal ID, either reusing a deleted ID,\n  evicting the least recently used ID, or walking to the end of the\n  allotted space.\n* `evict()` Evict the least recently used internal ID, returning its ID.\n  Does not do any bounds checking.\n* `connect(p, n)` Connect the `p` and `n` internal IDs in the linked list.\n* `moveToTail(index)` Move the specified internal ID to the most recently\n  used position.\n* `keyMap` Map of keys to internal IDs\n* `keyList` List of keys by internal ID\n* `valList` List of values by internal ID\n* `sizes` List of calculated sizes by internal ID\n* `ttls` List of TTL values by internal ID\n* `starts` List of start time values by internal ID\n* `next` Array of \"next\" pointers by internal ID\n* `prev` Array of \"previous\" pointers by internal ID\n* `head` Internal ID of least recently used item\n* `tail` Internal ID of most recently used item\n* `free` Stack of deleted internal IDs\n\n## Storage Bounds Safety\n\nThis implementation aims to be as flexible as possible, within the limits\nof safe memory consumption and optimal performance.\n\nAt initial object creation, storage is allocated for `max` items.  If `max`\nis set to zero, then some performance is lost, and item count is unbounded.\nEither `maxSize` or `ttl` _must_ be set if `max` is not specified.\n\nIf `maxSize` is set, then this creates a safe limit on the maximum storage\nconsumed, but without the performance benefits of pre-allocation.  When\n`maxSize` is set, every item _must_ provide a size, either via the\n`sizeCalculation` method provided to the constructor, or via a `size` or\n`sizeCalculation` option provided to `cache.set()`.  The size of every item\n_must_ be a positive integer.\n\nIf neither `max` nor `maxSize` are set, then `ttl` tracking must be\nenabled.  Note that, even when tracking item `ttl`, items are _not_\npreemptively deleted when they become stale, unless `ttlAutopurge` is\nenabled.  Instead, they are only purged the next time the key is requested.\nThus, if `ttlAutopurge`, `max`, and `maxSize` are all not set, then the\ncache will potentially grow unbounded.\n\nIn this case, a warning is printed to standard error.  Future versions may\nrequire the use of `ttlAutopurge` if `max` and `maxSize` are not specified.\n\nIf you truly wish to use a cache that is bound _only_ by TTL expiration,\nconsider using a `Map` object, and calling `setTimeout` to delete entries\nwhen they expire.  It will perform much better than an LRU cache.\n\nHere is an implementation you may use, under the same [license](./LICENSE)\nas this package:\n\n```js\n// a storage-unbounded ttl cache that is not an lru-cache\nconst cache = {\n  data: new Map(),\n  timers: new Map(),\n  set: (k, v, ttl) => {\n    if (cache.timers.has(k)) {\n      clearTimeout(cache.timers.get(k))\n    }\n    cache.timers.set(k, setTimeout(() => cache.del(k), ttl))\n    cache.data.set(k, v)\n  },\n  get: k => cache.data.get(k),\n  has: k => cache.data.has(k),\n  delete: k => {\n    if (cache.timers.has(k)) {\n      clearTimeout(cache.timers.get(k))\n    }\n    cache.timers.delete(k)\n    return cache.data.delete(k)\n  },\n  clear: () => {\n    cache.data.clear()\n    for (const v of cache.timers.values()) {\n      clearTimeout(v)\n    }\n    cache.timers.clear()\n  }\n}\n```\n\n## Performance\n\nAs of January 2022, version 7 of this library is one of the most performant\nLRU cache implementations in JavaScript.\n\nBenchmarks can be extremely difficult to get right.  In particular, the\nperformance of set/get/delete operations on objects will vary _wildly_\ndepending on the type of key used.  V8 is highly optimized for objects with\nkeys that are short strings, especially integer numeric strings.  Thus any\nbenchmark which tests _solely_ using numbers as keys will tend to find that\nan object-based approach performs the best.\n\nNote that coercing _anything_ to strings to use as object keys is unsafe,\nunless you can be 100% certain that no other type of value will be used.\nFor example:\n\n```js\nconst myCache = {}\nconst set = (k, v) => myCache[k] = v\nconst get = (k) => myCache[k]\n\nset({}, 'please hang onto this for me')\nset('[object Object]', 'oopsie')\n```\n\nAlso beware of \"Just So\" stories regarding performance.  Garbage collection\nof large (especially: deep) object graphs can be incredibly costly, with\nseveral \"tipping points\" where it increases exponentially.  As a result,\nputting that off until later can make it much worse, and less predictable.\nIf a library performs well, but only in a scenario where the object graph is\nkept shallow, then that won't help you if you are using large objects as\nkeys.\n\nIn general, when attempting to use a library to improve performance (such\nas a cache like this one), it's best to choose an option that will perform\nwell in the sorts of scenarios where you'll actually use it.\n\nThis library is optimized for repeated gets and minimizing eviction time,\nsince that is the expected need of a LRU.  Set operations are somewhat\nslower on average than a few other options, in part because of that\noptimization.  It is assumed that you'll be caching some costly operation,\nideally as rarely as possible, so optimizing set over get would be unwise.\n\nIf performance matters to you:\n\n1. If it's at all possible to use small integer values as keys, and you can\n   guarantee that no other types of values will be used as keys, then do\n   that, and use a cache such as\n   [lru-fast](https://npmjs.com/package/lru-fast), or [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache) which\n   uses an Object as its data store.\n2. Failing that, if at all possible, use short non-numeric strings (ie,\n   less than 256 characters) as your keys, and use [mnemonist's\n   LRUCache](https://yomguithereal.github.io/mnemonist/lru-cache).\n3. If the types of your keys will be long strings, strings that look like\n   floats, `null`, objects, or some mix of types, or if you aren't sure,\n   then this library will work well for you.\n4. Do not use a `dispose` function, size tracking, or especially ttl\n   behavior, unless absolutely needed.  These features are convenient, and\n   necessary in some use cases, and every attempt has been made to make the\n   performance impact minimal, but it isn't nothing.\n\n## Breaking Changes in Version 7\n\nThis library changed to a different algorithm and internal data structure\nin version 7, yielding significantly better performance, albeit with\nsome subtle changes as a result.\n\nIf you were relying on the internals of LRUCache in version 6 or before, it\nprobably will not work in version 7 and above.\n\nFor more info, see the [change log](CHANGELOG.md).\n","tap":{"coverage-map":"map.js","node-arg":["--expose-gc"]},"size-limit":[{"path":"./index.js"}],"readmeFilename":"README.md","gitHead":"711c7be43a93a5c67574343fcef977019454d2b0","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.7.4_1649532246628_0.032840497097149646"},"_hasShrinkwrap":false},"7.8.0":{"_id":"lru-cache@7.8.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.8.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","clock-mock":"^1.0.4","size-limit":"^7.0.8","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"649aaeb294a56297b5cbc5d70f198dcc5ebe5747","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.8.0.tgz"},"tap":{"coverage-map":"map.js"},"size-limit":[{"path":"./index.js"}],"gitHead":"3cca7d2bda98dae88a09d53b4aaafd4e589ef91a","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.8.0_1649360651088_0.45077281608338127"},"_hasShrinkwrap":false},"7.8.1":{"_id":"lru-cache@7.8.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.8.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","clock-mock":"^1.0.4","heapdump":"^0.3.15","size-limit":"^7.0.8","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"68ee3f4807a57d2ba185b7fd90827d5c21ce82bb","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.8.1.tgz"},"tap":{"coverage-map":"map.js","node-arg":["--expose-gc"]},"size-limit":[{"path":"./index.js"}],"gitHead":"1e7e0f1bdcc82e73233fdf0535d104bd5a0386c5","_nodeVersion":"17.6.0","_npmVersion":"8.5.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.8.1_1649532060382_0.7559077276959458"},"_hasShrinkwrap":false},"7.8.2":{"_id":"lru-cache@7.8.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.8.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","clock-mock":"^1.0.4","size-limit":"^7.0.8","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"db4d3bbcc05b2e7a2ae063f57fdb42d8d45f1773","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.8.2.tgz"},"tap":{"coverage-map":"map.js","node-arg":["--expose-gc"]},"size-limit":[{"path":"./index.js"}],"gitHead":"e71778502d324b79c3c304ce70e96be3b4cfdc49","_nodeVersion":"17.6.0","_npmVersion":"8.8.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.8.2_1651286660471_0.8601136598219326"},"_hasShrinkwrap":false},"7.9.0":{"_id":"lru-cache@7.9.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.9.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","clock-mock":"^1.0.4","size-limit":"^7.0.8","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"29c2a989b6c10f32ceccc66ff44059e1490af3e1","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.9.0.tgz"},"tap":{"coverage-map":"map.js","node-arg":["--expose-gc"]},"size-limit":[{"path":"./index.js"}],"gitHead":"892db2226254df892af461a272222cc4d61454b3","_nodeVersion":"17.6.0","_npmVersion":"8.8.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.9.0_1651294215860_0.1613350285048809"},"_hasShrinkwrap":false},"7.9.1":{"_id":"lru-cache@7.9.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.9.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","test":"tap","snap":"tap","size":"size-limit","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","benchmark":"^2.1.4","clock-mock":"^1.0.4","size-limit":"^7.0.8","tap":"^15.1.6"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"f1e19ff47b4815aa98ef16d7c30024c1e3947da4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.9.1.tgz"},"tap":{"coverage-map":"map.js","node-arg":["--expose-gc"]},"size-limit":[{"path":"./index.js"}],"gitHead":"32e7912b07c5fe68c8ed8a32d7795112eaf4ac50","_nodeVersion":"18.1.0","_npmVersion":"8.8.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.9.1_1652297273152_0.3353799908560604"},"_hasShrinkwrap":false},"7.10.0":{"_id":"lru-cache@7.10.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.10.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write ."},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.4","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.0.1","ts-node":"^10.7.0","tslib":"^2.4.0","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"db87bef52eb5036bd66f7f9c32cd1d614b5652e8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.10.0.tgz"},"prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"types":"./index.d.ts","gitHead":"c551cbf795fe5d7a19ad6786f71ca9f36f08f4cd","_nodeVersion":"18.1.0","_npmVersion":"8.8.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.10.0_1652297522418_0.6961966610383523"},"_hasShrinkwrap":false},"7.10.1":{"_id":"lru-cache@7.10.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.10.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write ."},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.4","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.0.1","ts-node":"^10.7.0","tslib":"^2.4.0","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"db577f42a94c168f676b638d15da8fb073448cab","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.10.1.tgz"},"prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"types":"./index.d.ts","gitHead":"b486515795a4f245f65d7425363486f33f2ed7bf","_nodeVersion":"18.1.0","_npmVersion":"8.8.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.10.1_1652309508275_0.07397421288859918"},"_hasShrinkwrap":false},"7.10.2":{"_id":"lru-cache@7.10.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.10.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write ."},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.4","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.0.1","ts-node":"^10.7.0","tslib":"^2.4.0","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"aab494e0768ce94f199ef553ffe0a362f2a58bb9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.10.2.tgz"},"prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"types":"./index.d.ts","gitHead":"ea673da69acb3b5c2c105f2d174dca2f7480fea0","_nodeVersion":"18.4.0","_npmVersion":"8.12.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.10.2_1656023448274_0.3368364984252705"},"_hasShrinkwrap":false},"7.10.3":{"_id":"lru-cache@7.10.3","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.10.3","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write ."},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.4","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.0.1","ts-node":"^10.7.0","tslib":"^2.4.0","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"8c0c42c48cb145a1d568fc288377e8d75c528bbe","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.10.3.tgz"},"prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"types":"./index.d.ts","gitHead":"b9918def87157ec802c5ebb2d8c53f5625133481","_nodeVersion":"18.4.0","_npmVersion":"8.12.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.10.3_1656530357449_0.6084094548930938"},"_hasShrinkwrap":false},"7.11.0":{"_id":"lru-cache@7.11.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.11.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write ."},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.4","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.0.1","ts-node":"^10.7.0","tslib":"^2.4.0","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"e8e18a08af9c2af3fabdfe0cc43d24aed94a5f3a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.11.0.tgz"},"prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"types":"./index.d.ts","gitHead":"118a078cc0ea3a17f7b2ff4caf04e6aa3a33b136","_nodeVersion":"18.4.0","_npmVersion":"8.12.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.11.0_1656540431667_0.247888844518644"},"_hasShrinkwrap":false},"7.12.0":{"_id":"lru-cache@7.12.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.12.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write ."},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.4","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.0.1","ts-node":"^10.7.0","tslib":"^2.4.0","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"be2649a992c8a9116efda5c487538dcf715f3476","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.12.0.tgz"},"prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"types":"./index.d.ts","gitHead":"7ef678e4548992a8640ba5dae35f72590f9eba7e","_nodeVersion":"18.4.0","_npmVersion":"8.12.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.12.0_1656542559256_0.3493810587319208"},"_hasShrinkwrap":false},"7.12.1":{"_id":"lru-cache@7.12.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.12.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write ."},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.4","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.0.1","ts-node":"^10.7.0","tslib":"^2.4.0","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"c8df7cabbbf9aed9c3a910c39da74f984a5eb53b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.12.1.tgz"},"prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"types":"./index.d.ts","gitHead":"9e48f892bdb8c0f8e640094ebce6dc59833b435d","_nodeVersion":"18.4.0","_npmVersion":"8.13.2","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.12.1_1657666845109_0.6798962179611703"},"_hasShrinkwrap":false},"7.13.0":{"_id":"lru-cache@7.13.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.13.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write ."},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.4","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.0.1","ts-node":"^10.7.0","tslib":"^2.4.0","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"c8178692969fb680cad948db4aad54066590a65a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.13.0.tgz"},"prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"types":"./index.d.ts","gitHead":"c028709c722214603a423860f855d4ca9def6141","_nodeVersion":"18.4.0","_npmVersion":"8.13.2","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.13.0_1657667804110_0.06700403111055775"},"_hasShrinkwrap":false},"7.13.1":{"_id":"lru-cache@7.13.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.13.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write ."},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.4","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.0.1","ts-node":"^10.7.0","tslib":"^2.4.0","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"267a81fbd0881327c46a81c5922606a2cfe336c4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.13.1.tgz"},"prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"types":"./index.d.ts","gitHead":"92b35ae6e8c2e6abca87850591d8eba67cd3e26d","_nodeVersion":"18.4.0","_npmVersion":"8.13.2","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.13.1_1657841407172_0.9174413335644569"},"_hasShrinkwrap":false},"7.13.2":{"_id":"lru-cache@7.13.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.13.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write ."},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.0.1","ts-node":"^10.7.0","tslib":"^2.4.0","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"bb5d3f1deea3f3a7a35c1c44345566a612e09cd0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.13.2.tgz"},"sideEffects":false,"prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"types":"./index.d.ts","gitHead":"661c8b78a47e4aa87604bf8a486070182f0cbf8f","_nodeVersion":"18.4.0","_npmVersion":"8.13.2","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.13.2_1659463052668_0.21576298050212817"},"_hasShrinkwrap":false},"7.14.0":{"_id":"lru-cache@7.14.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.14.0","keywords":["mru","lru","cache"],"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":""},"repository":{"ShortcutSyntax":"git://github.com/isaacs/node-lru-cache.git"},"license":"ISC","scripts":{"build":"","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write ."},"directories":null,"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.0.1","ts-node":"^10.7.0","tslib":"^2.4.0","typescript":"^4.6.4"},"engines":{"node":">=12"},"files":["index.js","index.d.ts"],"main":"index.js","dist":{"shasum":"21be64954a4680e303a09e9468f880b98a0b3c7f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.14.0.tgz"},"sideEffects":false,"prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}]},"7.14.1":{"_id":"lru-cache@7.14.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.14.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write ."},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.0.1","ts-node":"^10.7.0","tslib":"^2.4.0","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"index.js","dist":{"shasum":"8da8d2f5f59827edb388e63e459ac23d6d408fea","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.14.1.tgz"},"sideEffects":false,"prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"types":"./index.d.ts","gitHead":"a63ce28eacff77dfd30f4f6d62adcd361d8228ab","_nodeVersion":"18.11.0","_npmVersion":"8.19.2","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.14.1_1667408670424_0.40452886365827423"},"_hasShrinkwrap":false},"7.15.0":{"_id":"lru-cache@7.15.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.15.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"pretest":"node ./scripts/transpile-to-esm.mjs","presnap":"node ./scripts/transpile-to-esm.mjs","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc ./index.d.ts"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"./index.js","dist":{"shasum":"4437550407da5ec8c4fe0946a137fe2f7f07a171","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.15.0.tgz"},"sideEffects":false,"type":"commonjs","module":"./index.mjs","types":"./index.d.ts","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"gitHead":"d1936a4067da0bc7fbb12247945c66fc472fd094","_nodeVersion":"18.14.0","_npmVersion":"9.4.2","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.15.0_1676507619397_0.266953800791945"},"_hasShrinkwrap":false},"7.16.0":{"_id":"lru-cache@7.16.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.16.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"pretest":"node ./scripts/transpile-to-esm.mjs","presnap":"node ./scripts/transpile-to-esm.mjs","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc ./index.d.ts"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"./index.js","dist":{"shasum":"b1b946cff368d3f3c569cc3d6a5ba8f90435160f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.16.0.tgz"},"sideEffects":false,"type":"commonjs","module":"./index.mjs","types":"./index.d.ts","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"gitHead":"576eb281e59c4cd0ed1dd73ed2fdcfdc1855d362","_nodeVersion":"18.14.0","_npmVersion":"9.4.2","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.16.0_1676576936436_0.17996278230067775"},"_hasShrinkwrap":false},"7.16.1":{"_id":"lru-cache@7.16.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.16.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","pretest":"npm run prepare","presnap":"npm run prepare","prepare":"node ./scripts/transpile-to-esm.mjs","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc ./index.d.ts"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"./index.js","dist":{"shasum":"7acea16fecd9ed11430e78443c2bb81a06d3dea9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.16.1.tgz"},"sideEffects":false,"type":"commonjs","module":"./index.mjs","types":"./index.d.ts","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"gitHead":"e0e0413e5bf86a859cb572a8c78ddcba16eeedd6","_nodeVersion":"18.14.0","_npmVersion":"9.4.2","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.16.1_1676671376040_0.6378636530611248"},"_hasShrinkwrap":false},"7.16.2":{"_id":"lru-cache@7.16.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.16.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","pretest":"npm run prepare","presnap":"npm run prepare","prepare":"node ./scripts/transpile-to-esm.mjs","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc ./index.d.ts"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"./index.js","dist":{"shasum":"df096ce4374d0cf9d34f29a35832c80534af54b6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.16.2.tgz"},"sideEffects":false,"type":"commonjs","module":"./index.mjs","types":"./index.d.ts","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"gitHead":"f764a81b44d1a3be28b7773e99dd93ea9ede4fc4","_nodeVersion":"18.14.0","_npmVersion":"9.4.2","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.16.2_1677009756642_0.17254313299895707"},"_hasShrinkwrap":false},"7.17.0":{"_id":"lru-cache@7.17.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.17.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","pretest":"npm run prepare","presnap":"npm run prepare","prepare":"node ./scripts/transpile-to-esm.mjs","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc ./index.d.ts"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"./index.js","dist":{"shasum":"00c7ba5919e5ea7c69ff94ddabbf32cb09ab805c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.17.0.tgz"},"sideEffects":false,"type":"commonjs","module":"./index.mjs","types":"./index.d.ts","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"gitHead":"a568b5d466146dc913e34bd65245282dd648a778","_nodeVersion":"18.14.0","_npmVersion":"9.4.2","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.17.0_1677027212292_0.7379392665739883"},"_hasShrinkwrap":false},"7.17.1":{"_id":"lru-cache@7.17.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.17.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","pretest":"npm run prepare","presnap":"npm run prepare","prepare":"node ./scripts/transpile-to-esm.js","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc ./index.d.ts"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"./index.js","dist":{"shasum":"20d4a9b01f1fd2d699ff8fd45db3c5cb8b8d8cec","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.17.1.tgz"},"sideEffects":false,"type":"commonjs","module":"./index.mjs","types":"./index.d.ts","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"gitHead":"d5ecd08db8555e1f13d67a5bcec4ac90e2a11ee0","_nodeVersion":"18.14.0","_npmVersion":"9.5.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.17.1_1677656650139_0.11422907407478378"},"_hasShrinkwrap":false},"7.17.2":{"_id":"lru-cache@7.17.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.17.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","pretest":"npm run prepare","presnap":"npm run prepare","prepare":"node ./scripts/transpile-to-esm.mjs","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc ./index.d.ts"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"./index.js","dist":{"shasum":"f3facd44b39e77d0cf4dfe4c26f6ad11e34a2da0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.17.2.tgz"},"sideEffects":false,"type":"commonjs","module":"./index.mjs","types":"./index.d.ts","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"gitHead":"1e07c5e70efe8a69cf4f63b9aeb0813fc1615f6a","_nodeVersion":"18.14.0","_npmVersion":"9.5.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.17.2_1677656853202_0.41193412318724865"},"_hasShrinkwrap":false},"7.18.0":{"_id":"lru-cache@7.18.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.18.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","pretest":"npm run prepare","presnap":"npm run prepare","prepare":"node ./scripts/transpile-to-esm.js","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc ./index.d.ts"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"./index.js","dist":{"shasum":"c420f068ace992e8c52377418aec2cb08f86d362","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.18.0.tgz"},"sideEffects":false,"type":"commonjs","module":"./index.mjs","types":"./index.d.ts","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"gitHead":"670414d6ac05eed3b5b05f28143104dcbca634a2","_nodeVersion":"18.14.0","_npmVersion":"9.5.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.18.0_1677656690686_0.4721490585484849"},"_hasShrinkwrap":false},"7.18.1":{"_id":"lru-cache@7.18.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.18.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","pretest":"npm run prepare","presnap":"npm run prepare","prepare":"node ./scripts/transpile-to-esm.js","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc ./index.d.ts"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"./index.js","dist":{"shasum":"4716408dec51d5d0104732647f584d1f6738b109","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.18.1.tgz"},"sideEffects":false,"type":"commonjs","module":"./index.mjs","types":"./index.d.ts","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"gitHead":"078625cfb3f63b00a4ded536647290dec68c4892","_nodeVersion":"18.14.0","_npmVersion":"9.5.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.18.1_1677662817480_0.9250039029847505"},"_hasShrinkwrap":false},"7.18.2":{"_id":"lru-cache@7.18.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.18.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","pretest":"npm run prepare","presnap":"npm run prepare","prepare":"node ./scripts/transpile-to-esm.js","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc ./index.d.ts"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":">=12"},"main":"./index.js","dist":{"shasum":"5ba8dba5778e7771af65803172ce75b49c1504c2","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.18.2.tgz"},"sideEffects":false,"type":"commonjs","module":"./index.mjs","types":"./index.d.ts","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}],"gitHead":"c4f47055760ff2b19402247cbe43d1622cecb418","_nodeVersion":"18.14.0","_npmVersion":"9.5.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_7.18.2_1677986951570_0.01958078575880129"},"_hasShrinkwrap":false},"7.18.3":{"_id":"lru-cache@7.18.3","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"7.18.3","keywords":["mru","lru","cache"],"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":""},"repository":{"ShortcutSyntax":"git://github.com/isaacs/node-lru-cache.git"},"license":"ISC","scripts":{"build":"npm run prepare","pretest":"npm run prepare","presnap":"npm run prepare","prepare":"node ./scripts/transpile-to-esm.js","size":"size-limit","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc ./index.d.ts"},"directories":null,"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","eslint-config-prettier":"^8.5.0","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":">=12"},"files":["index.js","index.mjs","index.d.ts"],"main":"./index.js","dist":{"shasum":"f793896e0fd0e954a59dfdd82f0773808df6aa89","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-7.18.3.tgz"},"sideEffects":false,"type":"commonjs","module":"./index.mjs","types":"./index.d.ts","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"nyc-arg":["--include=index.js"],"node-arg":["--expose-gc","--require","ts-node/register"],"ts":false},"size-limit":[{"path":"./index.js"}]},"8.0.0":{"_id":"lru-cache@8.0.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"8.0.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","preprepare":"rm -rf dist","prepare":"tsc -p tsconfig.json && tsc -p tsconfig-esm.json","postprepare":"bash fixup.sh","pretest":"npm run prepare","presnap":"npm run prepare","test":"c8 tap","snap":"c8 tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc --tsconfig tsconfig-esm.json ./src/*.ts","prebenchmark":"npm run prepare","benchmark":"make -C benchmark","preprofile":"npm run prepare","profile":"make -C benchmark profile"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","esbuild":"^0.17.11","eslint-config-prettier":"^8.5.0","marked":"^4.2.12","mkdirp":"^2.1.5","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":">=16.14"},"main":"./dist/cjs/index-cjs.js","dist":{"shasum":"152bf98daafa6a46a5905694fccd6f5f7f6095fe","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-8.0.0.tgz"},"sideEffects":false,"module":"./dist/mjs/index.js","types":"./dist/mjs/index.d.ts","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"coverage":false,"node-arg":["--expose-gc","--no-warnings","--loader","ts-node/esm"],"ts":false},"size-limit":[{"path":"./dist/mjs/index.js"}],"gitHead":"42fc1a3ac57604a1d26ead49ce87f4b3518505e1","_nodeVersion":"18.14.0","_npmVersion":"9.5.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_8.0.0_1678583405046_0.7925986236072033"},"_hasShrinkwrap":false},"8.0.1":{"_id":"lru-cache@8.0.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"8.0.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","preprepare":"rm -rf dist","prepare":"tsc -p tsconfig.json && tsc -p tsconfig-esm.json","postprepare":"bash fixup.sh","pretest":"npm run prepare","presnap":"npm run prepare","test":"c8 tap","snap":"c8 tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc --tsconfig tsconfig-esm.json ./src/*.ts","benchmark-results-typedoc":"bash scripts/benchmark-results-typedoc.sh","prebenchmark":"npm run prepare","benchmark":"make -C benchmark","preprofile":"npm run prepare","profile":"make -C benchmark profile"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","esbuild":"^0.17.11","eslint-config-prettier":"^8.5.0","marked":"^4.2.12","mkdirp":"^2.1.5","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":">=16.14"},"main":"./dist/cjs/index-cjs.js","dist":{"shasum":"a73771c61e574a59002ca84cc0e3c18360e01c52","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-8.0.1.tgz"},"sideEffects":false,"module":"./dist/mjs/index.js","types":"./dist/mjs/index.d.ts","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"coverage":false,"node-arg":["--expose-gc","--no-warnings","--loader","ts-node/esm"],"ts":false},"size-limit":[{"path":"./dist/mjs/index.js"}],"gitHead":"ef7f1e0ffb2b3050187c33747f0e8aa3b607a7b5","_nodeVersion":"18.14.0","_npmVersion":"9.5.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_8.0.1_1678904328958_0.0807202645594034"},"_hasShrinkwrap":false},"8.0.2":{"_id":"lru-cache@8.0.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"8.0.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","preprepare":"rm -rf dist","prepare":"tsc -p tsconfig.json && tsc -p tsconfig-esm.json","postprepare":"bash fixup.sh","pretest":"npm run prepare","presnap":"npm run prepare","test":"c8 tap","snap":"c8 tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc --tsconfig tsconfig-esm.json ./src/*.ts","benchmark-results-typedoc":"bash scripts/benchmark-results-typedoc.sh","prebenchmark":"npm run prepare","benchmark":"make -C benchmark","preprofile":"npm run prepare","profile":"make -C benchmark profile"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","esbuild":"^0.17.11","eslint-config-prettier":"^8.5.0","marked":"^4.2.12","mkdirp":"^2.1.5","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":">=16.14"},"main":"./dist/cjs/index-cjs.js","dist":{"shasum":"ac0cbcd4ead5eb13d19d4ffdbeb03d8f6c4553a4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-8.0.2.tgz"},"sideEffects":false,"module":"./dist/mjs/index.js","types":"./dist/mjs/index.d.ts","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"coverage":false,"node-arg":["--expose-gc","--no-warnings","--loader","ts-node/esm"],"ts":false},"size-limit":[{"path":"./dist/mjs/index.js"}],"gitHead":"bba1ccf313f91e09e37ca9dd4faee28565ac0404","_nodeVersion":"18.14.0","_npmVersion":"9.5.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_8.0.2_1678904973633_0.9387161465355252"},"_hasShrinkwrap":false},"8.0.3":{"_id":"lru-cache@8.0.3","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"8.0.3","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","preprepare":"rm -rf dist","prepare":"tsc -p tsconfig.json && tsc -p tsconfig-esm.json","postprepare":"bash fixup.sh","pretest":"npm run prepare","presnap":"npm run prepare","test":"c8 tap","snap":"c8 tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc --tsconfig tsconfig-esm.json ./src/*.ts","benchmark-results-typedoc":"bash scripts/benchmark-results-typedoc.sh","prebenchmark":"npm run prepare","benchmark":"make -C benchmark","preprofile":"npm run prepare","profile":"make -C benchmark profile"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","esbuild":"^0.17.11","eslint-config-prettier":"^8.5.0","marked":"^4.2.12","mkdirp":"^2.1.5","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":">=16.14"},"main":"./dist/cjs/index-cjs.js","dist":{"shasum":"42a2c84ec91426d165b0887783f6a0fed367402f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-8.0.3.tgz"},"sideEffects":false,"module":"./dist/mjs/index.js","types":"./dist/mjs/index.d.ts","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"coverage":false,"node-arg":["--expose-gc","--no-warnings","--loader","ts-node/esm"],"ts":false},"size-limit":[{"path":"./dist/mjs/index.js"}],"gitHead":"48e65174d7885604947fe8c47623edca3094c6f4","_nodeVersion":"18.14.0","_npmVersion":"9.5.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_8.0.3_1678905831242_0.9824179500875971"},"_hasShrinkwrap":false},"8.0.4":{"_id":"lru-cache@8.0.4","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"8.0.4","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","preprepare":"rm -rf dist","prepare":"tsc -p tsconfig.json && tsc -p tsconfig-esm.json","postprepare":"bash fixup.sh","pretest":"npm run prepare","presnap":"npm run prepare","test":"c8 tap","snap":"c8 tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc --tsconfig tsconfig-esm.json ./src/*.ts","benchmark-results-typedoc":"bash scripts/benchmark-results-typedoc.sh","prebenchmark":"npm run prepare","benchmark":"make -C benchmark","preprofile":"npm run prepare","profile":"make -C benchmark profile"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","esbuild":"^0.17.11","eslint-config-prettier":"^8.5.0","marked":"^4.2.12","mkdirp":"^2.1.5","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":">=16.14"},"main":"./dist/cjs/index-cjs.js","dist":{"shasum":"49fbbc46c0b4cedc36258885247f93dba341e7ec","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-8.0.4.tgz"},"sideEffects":false,"module":"./dist/mjs/index.js","types":"./dist/mjs/index.d.ts","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"coverage":false,"node-arg":["--expose-gc","--no-warnings","--loader","ts-node/esm"],"ts":false},"size-limit":[{"path":"./dist/mjs/index.js"}],"gitHead":"77e977f3dfe41edaa483bad7d2ae8b4d1f7e86f1","_nodeVersion":"18.14.0","_npmVersion":"9.5.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_8.0.4_1679094335997_0.5941552746946388"},"_hasShrinkwrap":false},"8.0.5":{"_id":"lru-cache@8.0.5","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"8.0.5","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","preprepare":"rm -rf dist","prepare":"tsc -p tsconfig.json && tsc -p tsconfig-esm.json","postprepare":"bash fixup.sh","pretest":"npm run prepare","presnap":"npm run prepare","test":"c8 tap","snap":"c8 tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc --tsconfig tsconfig-esm.json ./src/*.ts","benchmark-results-typedoc":"bash scripts/benchmark-results-typedoc.sh","prebenchmark":"npm run prepare","benchmark":"make -C benchmark","preprofile":"npm run prepare","profile":"make -C benchmark profile"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","esbuild":"^0.17.11","eslint-config-prettier":"^8.5.0","marked":"^4.2.12","mkdirp":"^2.1.5","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":">=16.14"},"main":"./dist/cjs/index-cjs.js","dist":{"shasum":"983fe337f3e176667f8e567cfcce7cb064ea214e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-8.0.5.tgz"},"sideEffects":false,"module":"./dist/mjs/index.js","types":"./dist/mjs/index.d.ts","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"coverage":false,"node-arg":["--expose-gc","--no-warnings","--loader","ts-node/esm"],"ts":false},"size-limit":[{"path":"./dist/mjs/index.js"}],"gitHead":"a00597128ec7158f8703f7e5bdd5825d6ee05169","_nodeVersion":"18.14.0","_npmVersion":"9.6.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_8.0.5_1680674792647_0.7714487382500526"},"_hasShrinkwrap":false},"9.0.0":{"_id":"lru-cache@9.0.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"9.0.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","preprepare":"rm -rf dist","prepare":"tsc -p tsconfig.json && tsc -p tsconfig-esm.json","postprepare":"bash fixup.sh","pretest":"npm run prepare","presnap":"npm run prepare","test":"c8 tap","snap":"c8 tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc --tsconfig tsconfig-esm.json ./src/*.ts","benchmark-results-typedoc":"bash scripts/benchmark-results-typedoc.sh","prebenchmark":"npm run prepare","benchmark":"make -C benchmark","preprofile":"npm run prepare","profile":"make -C benchmark profile"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","esbuild":"^0.17.11","eslint-config-prettier":"^8.5.0","marked":"^4.2.12","mkdirp":"^2.1.5","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":">=16.14"},"main":"./dist/cjs/index.js","dist":{"shasum":"daece36a9fc332e93f8e75f3fcfd17900253567c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-9.0.0.tgz"},"sideEffects":false,"module":"./dist/mjs/index.js","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"coverage":false,"node-arg":["--expose-gc","--no-warnings","--loader","ts-node/esm"],"ts":false},"size-limit":[{"path":"./dist/mjs/index.js"}],"types":"./dist/cjs/index.d.ts","gitHead":"1dbb15bc33c1b30ac6dd5f01ca31605e9076dc36","_nodeVersion":"18.14.0","_npmVersion":"9.6.3","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_9.0.0_1681076472715_0.31206244894537405"},"_hasShrinkwrap":false},"9.0.1":{"_id":"lru-cache@9.0.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"9.0.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","preprepare":"rm -rf dist","prepare":"tsc -p tsconfig.json && tsc -p tsconfig-esm.json","postprepare":"bash fixup.sh","pretest":"npm run prepare","presnap":"npm run prepare","test":"c8 tap","snap":"c8 tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc --tsconfig tsconfig-esm.json ./src/*.ts","benchmark-results-typedoc":"bash scripts/benchmark-results-typedoc.sh","prebenchmark":"npm run prepare","benchmark":"make -C benchmark","preprofile":"npm run prepare","profile":"make -C benchmark profile"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","esbuild":"^0.17.11","eslint-config-prettier":"^8.5.0","marked":"^4.2.12","mkdirp":"^2.1.5","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":"14 || >=16.14"},"main":"./dist/cjs/index.js","dist":{"shasum":"ac061ed291f8b9adaca2b085534bb1d3b61bef83","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-9.0.1.tgz"},"sideEffects":false,"module":"./dist/mjs/index.js","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"coverage":false,"node-arg":["--expose-gc","--no-warnings","--loader","ts-node/esm"],"ts":false},"size-limit":[{"path":"./dist/mjs/index.js"}],"types":"./dist/cjs/index.d.ts","gitHead":"c08f0e0dc270e7573160e28c49135c28dd088745","_nodeVersion":"18.14.0","_npmVersion":"9.6.4","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_9.0.1_1681145986817_0.8452365544418965"},"_hasShrinkwrap":false},"9.0.2":{"_id":"lru-cache@9.0.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"9.0.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","preprepare":"rm -rf dist","prepare":"tsc -p tsconfig.json && tsc -p tsconfig-esm.json","postprepare":"bash fixup.sh","pretest":"npm run prepare","presnap":"npm run prepare","test":"c8 tap","snap":"c8 tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc --tsconfig tsconfig-esm.json ./src/*.ts","benchmark-results-typedoc":"bash scripts/benchmark-results-typedoc.sh","prebenchmark":"npm run prepare","benchmark":"make -C benchmark","preprofile":"npm run prepare","profile":"make -C benchmark profile"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","esbuild":"^0.17.11","eslint-config-prettier":"^8.5.0","marked":"^4.2.12","mkdirp":"^2.1.5","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":"14 || >=16.14"},"main":"./dist/cjs/index.js","dist":{"shasum":"97f13c6b20532fba9bae821c39cd7d471f65119d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-9.0.2.tgz"},"sideEffects":false,"module":"./dist/mjs/index.js","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"coverage":false,"node-arg":["--expose-gc","--no-warnings","--loader","ts-node/esm"],"ts":false},"size-limit":[{"path":"./dist/mjs/index.js"}],"types":"./dist/cjs/index.d.ts","gitHead":"63e0015791118fd86c848d38f0ca534d97c611d6","_nodeVersion":"18.14.0","_npmVersion":"9.6.4","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_9.0.2_1681410728055_0.6677195179148792"},"_hasShrinkwrap":false},"9.0.3":{"_id":"lru-cache@9.0.3","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"9.0.3","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","preprepare":"rm -rf dist","prepare":"tsc -p tsconfig.json && tsc -p tsconfig-esm.json","postprepare":"bash fixup.sh","pretest":"npm run prepare","presnap":"npm run prepare","test":"c8 tap","snap":"c8 tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc --tsconfig tsconfig-esm.json ./src/*.ts","benchmark-results-typedoc":"bash scripts/benchmark-results-typedoc.sh","prebenchmark":"npm run prepare","benchmark":"make -C benchmark","preprofile":"npm run prepare","profile":"make -C benchmark profile"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","esbuild":"^0.17.11","eslint-config-prettier":"^8.5.0","marked":"^4.2.12","mkdirp":"^2.1.5","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":"14 || >=16.14"},"main":"./dist/cjs/index.js","dist":{"shasum":"8a04f282df5320227bb7215c55df2660d3e4e25b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-9.0.3.tgz"},"sideEffects":false,"module":"./dist/mjs/index.js","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"coverage":false,"node-arg":["--expose-gc","--no-warnings","--loader","ts-node/esm"],"ts":false},"size-limit":[{"path":"./dist/mjs/index.js"}],"types":"./dist/cjs/index.d.ts","gitHead":"88bb31c82d418488a18f1663a2a6383853b632a1","_nodeVersion":"18.14.0","_npmVersion":"9.6.4","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_9.0.3_1681506124200_0.6269964071629419"},"_hasShrinkwrap":false},"9.1.0":{"_id":"lru-cache@9.1.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"9.1.0","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","preprepare":"rm -rf dist","prepare":"tsc -p tsconfig.json && tsc -p tsconfig-esm.json","postprepare":"bash fixup.sh","pretest":"npm run prepare","presnap":"npm run prepare","test":"c8 tap","snap":"c8 tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc --tsconfig tsconfig-esm.json ./src/*.ts","benchmark-results-typedoc":"bash scripts/benchmark-results-typedoc.sh","prebenchmark":"npm run prepare","benchmark":"make -C benchmark","preprofile":"npm run prepare","profile":"make -C benchmark profile"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","esbuild":"^0.17.11","eslint-config-prettier":"^8.5.0","marked":"^4.2.12","mkdirp":"^2.1.5","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":"14 || >=16.14"},"main":"./dist/cjs/index.js","dist":{"shasum":"19efafa9d08d1c08eb8efd78876075f0b8b1b07b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-9.1.0.tgz"},"sideEffects":false,"module":"./dist/mjs/index.js","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"coverage":false,"node-arg":["--expose-gc","--no-warnings","--loader","ts-node/esm"],"ts":false},"size-limit":[{"path":"./dist/mjs/index.js"}],"types":"./dist/cjs/index.d.ts","gitHead":"4134a83cc65f4acd90010c880e9ad8c401588003","_nodeVersion":"18.14.0","_npmVersion":"9.6.4","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_9.1.0_1681799045888_0.9256027548982357"},"_hasShrinkwrap":false},"9.1.1":{"_id":"lru-cache@9.1.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"9.1.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","preprepare":"rm -rf dist","prepare":"tsc -p tsconfig.json && tsc -p tsconfig-esm.json","postprepare":"bash fixup.sh","pretest":"npm run prepare","presnap":"npm run prepare","test":"c8 tap","snap":"c8 tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc --tsconfig tsconfig-esm.json ./src/*.ts","benchmark-results-typedoc":"bash scripts/benchmark-results-typedoc.sh","prebenchmark":"npm run prepare","benchmark":"make -C benchmark","preprofile":"npm run prepare","profile":"make -C benchmark profile"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^17.0.31","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","esbuild":"^0.17.11","eslint-config-prettier":"^8.5.0","marked":"^4.2.12","mkdirp":"^2.1.5","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.7.0","tslib":"^2.4.0","typedoc":"^0.23.24","typescript":"^4.6.4"},"engines":{"node":"14 || >=16.14"},"main":"./dist/cjs/index.js","dist":{"shasum":"c58a93de58630b688de39ad04ef02ef26f1902f1","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-9.1.1.tgz"},"sideEffects":false,"module":"./dist/mjs/index.js","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"coverage":false,"node-arg":["--expose-gc","--no-warnings","--loader","ts-node/esm"],"ts":false},"size-limit":[{"path":"./dist/mjs/index.js"}],"types":"./dist/cjs/index.d.ts","gitHead":"7d51bb3561c785290c3c700210bb617c757f62b5","_nodeVersion":"18.14.0","_npmVersion":"9.6.4","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_9.1.1_1682211764554_0.4473129870573098"},"_hasShrinkwrap":false},"9.1.2":{"_id":"lru-cache@9.1.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"9.1.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","preprepare":"rm -rf dist","prepare":"tsc -p tsconfig.json && tsc -p tsconfig-esm.json","postprepare":"bash fixup.sh","pretest":"npm run prepare","presnap":"npm run prepare","test":"c8 tap","snap":"c8 tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc --tsconfig tsconfig-esm.json ./src/*.ts","benchmark-results-typedoc":"bash scripts/benchmark-results-typedoc.sh","prebenchmark":"npm run prepare","benchmark":"make -C benchmark","preprofile":"npm run prepare","profile":"make -C benchmark profile"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^20.2.5","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","esbuild":"^0.17.11","eslint-config-prettier":"^8.5.0","marked":"^4.2.12","mkdirp":"^2.1.5","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.9.1","tslib":"^2.4.0","typedoc":"^0.24.6","typescript":"^5.0.4"},"engines":{"node":"14 || >=16.14"},"main":"./dist/cjs/index.js","dist":{"shasum":"255fdbc14b75589d6d0e73644ca167a8db506835","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-9.1.2.tgz"},"sideEffects":false,"module":"./dist/mjs/index.js","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"coverage":false,"node-arg":["--expose-gc","-r","ts-node/register"],"ts":false},"size-limit":[{"path":"./dist/mjs/index.js"}],"types":"./dist/cjs/index.d.ts","gitHead":"01075cb564a95ee1ac60652ecf96cda302b8d5bc","_nodeVersion":"18.16.0","_npmVersion":"9.6.7","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_9.1.2_1685637546812_0.8542414815336028"},"_hasShrinkwrap":false},"10.0.0":{"_id":"lru-cache@10.0.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"10.0.0","keywords":["mru","lru","cache"],"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":""},"repository":{"ShortcutSyntax":"git://github.com/isaacs/node-lru-cache.git"},"license":"ISC","scripts":{"build":"npm run prepare","preprepare":"rm -rf dist","prepare":"tsc -p tsconfig.json && tsc -p tsconfig-esm.json","postprepare":"bash fixup.sh","pretest":"npm run prepare","presnap":"npm run prepare","test":"c8 tap","snap":"c8 tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc --tsconfig tsconfig-esm.json ./src/*.ts","benchmark-results-typedoc":"bash scripts/benchmark-results-typedoc.sh","prebenchmark":"npm run prepare","benchmark":"make -C benchmark","preprofile":"npm run prepare","profile":"make -C benchmark profile"},"directories":null,"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^20.2.5","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","esbuild":"^0.17.11","eslint-config-prettier":"^8.5.0","marked":"^4.2.12","mkdirp":"^2.1.5","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.9.1","tslib":"^2.4.0","typedoc":"^0.24.6","typescript":"^5.0.4"},"engines":{"node":"14 || >=16.14"},"files":["dist"],"main":"./dist/cjs/index.js","dist":{"shasum":"b9e2a6a72a129d81ab317202d93c7691df727e61","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-10.0.0.tgz"},"sideEffects":false,"module":"./dist/mjs/index.js","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"coverage":false,"node-arg":["--expose-gc","-r","ts-node/register"],"ts":false},"size-limit":[{"path":"./dist/mjs/index.js"}]},"10.0.1":{"_id":"lru-cache@10.0.1","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"10.0.1","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","preprepare":"rm -rf dist","prepare":"tsc -p tsconfig.json && tsc -p tsconfig-esm.json","postprepare":"bash fixup.sh","pretest":"npm run prepare","presnap":"npm run prepare","test":"c8 tap","snap":"c8 tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc --tsconfig tsconfig-esm.json ./src/*.ts","benchmark-results-typedoc":"bash scripts/benchmark-results-typedoc.sh","prebenchmark":"npm run prepare","benchmark":"make -C benchmark","preprofile":"npm run prepare","profile":"make -C benchmark profile"},"directories":{},"devDependencies":{"@size-limit/preset-small-lib":"^7.0.8","@types/node":"^20.2.5","@types/tap":"^15.0.6","benchmark":"^2.1.4","c8":"^7.11.2","clock-mock":"^1.0.6","esbuild":"^0.17.11","eslint-config-prettier":"^8.5.0","marked":"^4.2.12","mkdirp":"^2.1.5","prettier":"^2.6.2","size-limit":"^7.0.8","tap":"^16.3.4","ts-node":"^10.9.1","tslib":"^2.4.0","typedoc":"^0.24.6","typescript":"^5.0.4"},"engines":{"node":"14 || >=16.14"},"main":"./dist/cjs/index.js","dist":{"shasum":"0a3be479df549cca0e5d693ac402ff19537a6b7a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-10.0.1.tgz"},"sideEffects":false,"module":"./dist/mjs/index.js","prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"coverage":false,"node-arg":["--expose-gc","-r","ts-node/register"],"ts":false},"size-limit":[{"path":"./dist/mjs/index.js"}],"gitHead":"870a66deb10fb1a8ecd242ea960465fd3232bac9","types":"./dist/cjs/index.d.ts","_nodeVersion":"18.16.0","_npmVersion":"9.8.1","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_10.0.1_1691703120033_0.25329435071596396"},"_hasShrinkwrap":false},"10.0.2":{"_id":"lru-cache@10.0.2","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"10.0.2","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","prepare":"tshy","postprepare":"bash fixup.sh","pretest":"npm run prepare","presnap":"npm run prepare","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc --tsconfig ./.tshy/esm.json ./src/*.ts","benchmark-results-typedoc":"bash scripts/benchmark-results-typedoc.sh","prebenchmark":"npm run prepare","benchmark":"make -C benchmark","preprofile":"npm run prepare","profile":"make -C benchmark profile"},"directories":{},"devDependencies":{"@tapjs/clock":"^1.1.16","@types/node":"^20.2.5","@types/tap":"^15.0.6","benchmark":"^2.1.4","clock-mock":"^2.0.2","esbuild":"^0.17.11","eslint-config-prettier":"^8.5.0","marked":"^4.2.12","mkdirp":"^2.1.5","prettier":"^2.6.2","tap":"^18.5.7","tshy":"^1.8.0","tslib":"^2.4.0","typedoc":"^0.25.3","typescript":"^5.2.2"},"dependencies":{"semver":"^7.3.5"},"engines":{"node":"14 || >=16.14"},"main":"./dist/commonjs/index.js","dist":{"shasum":"34504678cc3266b09b8dfd6fab4e1515258271b7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-10.0.2.tgz"},"sideEffects":false,"types":"./dist/commonjs/index.d.ts","tshy":{"exports":{".":"./src/index.ts","./min":{"import":{"types":"./dist/mjs/index.d.ts","default":"./dist/mjs/index.min.js"},"require":{"types":"./dist/commonjs/index.d.ts","default":"./dist/commonjs/index.min.js"}}}},"prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"node-arg":["--expose-gc"],"plugin":["@tapjs/clock"]},"type":"module","gitHead":"744ba6d230c51410c51606c6decde861cf8d33bc","_nodeVersion":"20.8.0","_npmVersion":"10.1.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_10.0.2_1699629529458_0.6416395921481668"},"_hasShrinkwrap":false},"10.0.3":{"_id":"lru-cache@10.0.3","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"10.0.3","keywords":["mru","lru","cache"],"homepage":"https://github.com/isaacs/node-lru-cache#readme","author":{"name":"Isaac Z. Schlueter","email":"i@izs.me"},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"bugs":{"url":"https://github.com/isaacs/node-lru-cache/issues"},"license":"ISC","scripts":{"build":"npm run prepare","prepare":"tshy","postprepare":"bash fixup.sh","pretest":"npm run prepare","presnap":"npm run prepare","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc --tsconfig ./.tshy/esm.json ./src/*.ts","benchmark-results-typedoc":"bash scripts/benchmark-results-typedoc.sh","prebenchmark":"npm run prepare","benchmark":"make -C benchmark","preprofile":"npm run prepare","profile":"make -C benchmark profile"},"directories":{},"devDependencies":{"@tapjs/clock":"^1.1.16","@types/node":"^20.2.5","@types/tap":"^15.0.6","benchmark":"^2.1.4","clock-mock":"^2.0.2","esbuild":"^0.17.11","eslint-config-prettier":"^8.5.0","marked":"^4.2.12","mkdirp":"^2.1.5","prettier":"^2.6.2","tap":"^18.5.7","tshy":"^1.8.0","tslib":"^2.4.0","typedoc":"^0.25.3","typescript":"^5.2.2"},"engines":{"node":"14 || >=16.14"},"main":"./dist/commonjs/index.js","dist":{"shasum":"b40014d7d2d16d94130b87297a04a1f24874ae7c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-10.0.3.tgz"},"sideEffects":false,"types":"./dist/commonjs/index.d.ts","tshy":{"exports":{".":"./src/index.ts","./min":{"import":{"types":"./dist/mjs/index.d.ts","default":"./dist/mjs/index.min.js"},"require":{"types":"./dist/commonjs/index.d.ts","default":"./dist/commonjs/index.min.js"}}}},"prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"node-arg":["--expose-gc"],"plugin":["@tapjs/clock"]},"type":"module","gitHead":"e8feab5bad4bec65043a7d82ff3fbd3297bbeb57","_nodeVersion":"20.9.0","_npmVersion":"10.1.0","_npmUser":{"name":"isaacs","email":"i@izs.me"},"maintainers":[{"name":"isaacs","email":"i@izs.me"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lru-cache_10.0.3_1700367598788_0.5397764706398125"},"_hasShrinkwrap":false},"10.1.0":{"_id":"lru-cache@10.1.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"10.1.0","keywords":["mru","lru","cache"],"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":""},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"license":"ISC","scripts":{"build":"npm run prepare","prepare":"tshy","postprepare":"bash fixup.sh","pretest":"npm run prepare","presnap":"npm run prepare","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc --tsconfig ./.tshy/esm.json ./src/*.ts","benchmark-results-typedoc":"bash scripts/benchmark-results-typedoc.sh","prebenchmark":"npm run prepare","benchmark":"make -C benchmark","preprofile":"npm run prepare","profile":"make -C benchmark profile"},"directories":null,"devDependencies":{"@tapjs/clock":"^1.1.16","@types/node":"^20.2.5","@types/tap":"^15.0.6","benchmark":"^2.1.4","clock-mock":"^2.0.2","esbuild":"^0.17.11","eslint-config-prettier":"^8.5.0","marked":"^4.2.12","mkdirp":"^2.1.5","prettier":"^2.6.2","tap":"^18.5.7","tshy":"^1.8.0","tslib":"^2.4.0","typedoc":"^0.25.3","typescript":"^5.2.2"},"engines":{"node":"14 || >=16.14"},"files":["dist"],"main":"./dist/commonjs/index.js","dist":{"shasum":"2098d41c2dc56500e6c88584aa656c84de7d0484","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-10.1.0.tgz"},"sideEffects":false,"types":"./dist/commonjs/index.d.ts","tshy":{"exports":{".":"./src/index.ts","./min":{"import":{"types":"./dist/mjs/index.d.ts","default":"./dist/mjs/index.min.js"},"require":{"types":"./dist/commonjs/index.d.ts","default":"./dist/commonjs/index.min.js"}}}},"prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"node-arg":["--expose-gc"],"plugin":["@tapjs/clock"]},"type":"module"},"10.2.0":{"_id":"lru-cache@10.2.0","name":"lru-cache","description":"A cache object that deletes the least-recently-used items.","version":"10.2.0","keywords":["mru","lru","cache"],"author":{"name":"Isaac Z. Schlueter","email":"i@izs.me","url":""},"repository":{"type":"git","url":"git://github.com/isaacs/node-lru-cache.git"},"license":"ISC","scripts":{"build":"npm run prepare","prepare":"tshy","postprepare":"bash fixup.sh","pretest":"npm run prepare","presnap":"npm run prepare","test":"tap","snap":"tap","preversion":"npm test","postversion":"npm publish","prepublishOnly":"git push origin --follow-tags","format":"prettier --write .","typedoc":"typedoc --tsconfig ./.tshy/esm.json ./src/*.ts","benchmark-results-typedoc":"bash scripts/benchmark-results-typedoc.sh","prebenchmark":"npm run prepare","benchmark":"make -C benchmark","preprofile":"npm run prepare","profile":"make -C benchmark profile"},"directories":null,"devDependencies":{"@tapjs/clock":"^1.1.16","@types/node":"^20.2.5","@types/tap":"^15.0.6","benchmark":"^2.1.4","clock-mock":"^2.0.2","esbuild":"^0.17.11","eslint-config-prettier":"^8.5.0","marked":"^4.2.12","mkdirp":"^2.1.5","prettier":"^2.6.2","tap":"^18.5.7","tshy":"^1.8.0","tslib":"^2.4.0","typedoc":"^0.25.3","typescript":"^5.2.2"},"engines":{"node":"14 || >=16.14"},"files":["dist"],"main":"./dist/commonjs/index.js","dist":{"shasum":"0bd445ca57363465900f4d1f9bd8db343a4d95c3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/lru-cache/-/lru-cache-10.2.0.tgz"},"sideEffects":false,"types":"./dist/commonjs/index.d.ts","tshy":{"exports":{".":"./src/index.ts","./min":{"import":{"types":"./dist/mjs/index.d.ts","default":"./dist/mjs/index.min.js"},"require":{"types":"./dist/commonjs/index.d.ts","default":"./dist/commonjs/index.min.js"}}}},"prettier":{"semi":false,"printWidth":70,"tabWidth":2,"useTabs":false,"singleQuote":true,"jsxSingleQuote":false,"bracketSameLine":true,"arrowParens":"avoid","endOfLine":"lf"},"tap":{"node-arg":["--expose-gc"],"plugin":["@tapjs/clock"]},"type":"module"}},"time":{"created":"2022-06-15T16:24:50Z","modified":"2024-02-13T08:10:47Z","1.0.1":"2022-06-15T16:24:50Z","1.0.2":"2022-06-15T16:24:50Z","1.0.3":"2022-06-15T16:24:50Z","1.0.4":"2022-06-15T16:24:50Z","1.0.5":"2022-06-15T16:24:50Z","1.0.6":"2022-06-15T16:24:50Z","1.1.0":"2022-06-15T16:24:50Z","1.1.1":"2022-06-15T16:24:50Z","2.0.0":"2022-06-15T16:24:50Z","2.0.1":"2022-06-15T16:24:50Z","2.0.2":"2022-06-15T16:24:50Z","2.0.3":"2022-06-15T16:24:50Z","2.0.4":"2022-06-15T16:24:50Z","2.1.0":"2022-06-15T16:24:50Z","2.2.0":"2022-06-15T16:24:50Z","2.2.1":"2022-06-15T16:24:50Z","2.2.2":"2022-06-15T16:24:50Z","2.2.4":"2022-06-15T16:24:50Z","2.3.0":"2022-06-15T16:24:50Z","2.3.1":"2022-06-15T16:24:50Z","2.5.0":"2022-06-15T16:24:50Z","2.5.1":"2022-06-15T16:24:50Z","2.5.2":"2022-06-15T16:24:50Z","2.6.0":"2022-06-15T16:24:50Z","2.6.1":"2022-06-15T16:24:50Z","2.6.2":"2022-06-15T16:24:50Z","2.6.3":"2022-06-15T16:24:50Z","2.6.4":"2022-06-15T16:24:50Z","2.6.5":"2022-06-15T16:24:50Z","2.7.0":"2022-06-15T16:24:50Z","2.7.1":"2022-06-15T16:24:50Z","2.7.2":"2022-06-15T16:24:50Z","2.7.3":"2022-06-15T16:24:50Z","3.0.0":"2022-06-15T16:24:50Z","3.1.0":"2022-06-15T16:24:50Z","3.1.1":"2022-06-15T16:24:50Z","3.1.2":"2022-06-15T16:24:50Z","3.2.0":"2022-06-15T16:24:50Z","4.0.0":"2022-06-15T16:24:50Z","4.0.1":"2022-06-15T16:24:50Z","4.0.2":"2022-06-15T16:24:50Z","4.1.0":"2022-06-15T16:24:50Z","4.1.1":"2022-06-15T16:24:50Z","4.1.2":"2022-06-15T16:24:50Z","4.1.3":"2022-06-15T16:24:50Z","4.1.4":"2022-06-15T16:24:50Z","4.1.5":"2022-06-15T16:34:21Z","5.0.0":"2022-06-15T16:24:50Z","5.0.1":"2022-06-15T16:24:50Z","5.1.0":"2022-06-15T16:24:50Z","5.1.1":"2022-06-15T16:34:30Z","6.0.0":"2022-06-15T16:34:31Z","7.0.0":"2022-06-15T16:24:50Z","7.0.1":"2022-06-15T16:24:50Z","7.0.2":"2022-06-15T16:24:50Z","7.0.3":"2022-06-15T16:24:50Z","7.0.4":"2022-06-15T16:24:50Z","7.1.0":"2022-06-15T16:24:50Z","7.1.1":"2022-06-15T16:24:50Z","7.1.2":"2022-06-15T16:24:50Z","7.1.3":"2022-06-15T16:24:50Z","7.2.0":"2022-06-15T16:24:50Z","7.2.1":"2022-06-15T16:24:50Z","7.2.2":"2022-06-15T16:24:50Z","7.2.3":"2022-06-15T16:24:50Z","7.3.0":"2022-06-15T16:24:50Z","7.3.1":"2022-06-15T16:24:50Z","7.3.2":"2022-06-15T16:24:50Z","7.3.3":"2022-06-15T16:24:50Z","7.4.0":"2022-06-15T16:24:50Z","7.4.1":"2022-06-15T16:24:50Z","7.4.2":"2022-06-15T16:24:50Z","7.4.3":"2022-06-15T16:24:50Z","7.4.4":"2022-06-15T16:24:50Z","7.4.5":"2022-06-15T16:24:50Z","7.5.0":"2022-06-15T16:24:50Z","7.5.1":"2022-06-15T16:24:50Z","7.5.2":"2022-06-15T16:24:50Z","7.6.0":"2022-06-15T16:24:50Z","7.6.1":"2022-06-15T16:24:50Z","7.7.0":"2022-06-15T16:24:50Z","7.7.1":"2022-06-15T16:24:50Z","7.7.2":"2022-06-15T16:24:50Z","7.7.3":"2022-06-15T16:24:50Z","7.7.4":"2022-06-15T16:24:50Z","7.8.0":"2022-06-15T16:24:50Z","7.8.1":"2022-06-15T16:24:50Z","7.8.2":"2022-06-15T16:24:50Z","7.9.0":"2022-06-15T16:24:50Z","7.9.1":"2022-06-15T16:24:50Z","7.10.0":"2022-06-15T16:24:50Z","7.10.1":"2022-06-15T16:24:50Z","7.10.2":"2022-06-23T23:42:05Z","7.10.3":"2022-06-29T20:39:29Z","7.11.0":"2022-06-29T23:47:29Z","7.12.0":"2022-06-29T23:47:29Z","7.12.1":"2022-07-12T23:41:01Z","7.13.0":"2022-07-12T23:41:01Z","7.13.1":"2022-07-14T23:40:01Z","7.13.2":"2022-08-02T20:43:25Z","7.14.0":"2022-08-22T21:32:20Z","7.14.1":"2022-11-02T17:45:17Z","7.15.0":"2023-02-16T02:51:42Z","7.16.0":"2023-02-16T20:54:22Z","7.16.1":"2023-02-17T23:45:10Z","7.16.2":"2023-02-21T20:51:15Z","7.17.0":"2023-02-22T02:53:18Z","7.17.1":"2023-03-01T08:56:13Z","7.17.2":"2023-03-01T08:56:13Z","7.18.0":"2023-03-01T08:56:13Z","7.18.1":"2023-03-01T11:46:13Z","7.18.2":"2023-03-05T05:41:38Z","7.18.3":"2023-08-07T20:29:53Z","8.0.0":"2023-03-12T02:55:47Z","8.0.1":"2023-03-15T20:49:39Z","8.0.2":"2023-03-15T20:49:39Z","8.0.3":"2023-03-15T20:49:39Z","8.0.4":"2023-03-17T23:43:53Z","8.0.5":"2023-04-05T08:59:28Z","9.0.0":"2023-04-09T23:47:11Z","9.0.1":"2023-04-10T17:44:57Z","9.0.2":"2023-04-13T20:45:49Z","9.0.3":"2023-04-14T23:55:44Z","9.1.0":"2023-04-18T08:49:46Z","9.1.1":"2023-04-23T02:40:41Z","9.1.2":"2023-06-01T17:52:51Z","10.0.0":"2023-07-17T23:38:58Z","10.0.1":"2023-08-10T23:49:36Z","10.0.2":"2023-11-10T20:45:11Z","10.0.3":"2023-11-19T08:58:58Z","10.1.0":"2023-12-19T06:19:13Z","10.2.0":"2024-02-13T08:10:47Z"}}