{"_id":"commander","_rev":"43830834-4dc3-4c26-9377-f02a188a39f0","name":"commander","dist-tags":{"latest":"12.0.0","2_x":"2.20.3","next":"12.0.0-1"},"versions":{"0.0.1":{"_id":"commander@0.0.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.0.1","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"scripts":{},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":"0.4.x"},"main":"index","dist":{"shasum":"4d4128672182d377fa53618d31282a985eeb0298","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.0.1.tgz"},"_npmJsonOpts":{"file":"/Users/tj/.npm/commander/0.0.1/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_engineSupported":true,"_npmVersion":"1.0.14","_nodeVersion":"v0.4.10","_defaultsLoaded":true,"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.0.3":{"_id":"commander@0.0.3","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.0.3","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"scripts":{},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":"0.4.x"},"main":"index","dist":{"shasum":"9feeaa41be6cd27a5682218cb986773e25b49525","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.0.3.tgz"},"_npmJsonOpts":{"file":"/Users/tj/.npm/commander/0.0.3/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.10","_defaultsLoaded":true,"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.0.4":{"_id":"commander@0.0.4","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.0.4","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"scripts":{},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":"0.4.x"},"main":"index","dist":{"shasum":"72206c96453f4475c0a6e0f041707b217bef8331","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.0.4.tgz"},"_npmJsonOpts":{"file":"/Users/tj/.npm/commander/0.0.4/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.10","_defaultsLoaded":true,"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.0.5":{"_id":"commander@0.0.5","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.0.5","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"scripts":{},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":"0.4.x"},"main":"index","dist":{"shasum":"7824fe04d5357f6dba0045fba86fffcfc843ebfd","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.0.5.tgz"},"_npmJsonOpts":{"file":"/Users/tj/.npm/commander/0.0.5/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.10","_defaultsLoaded":true,"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.1.0":{"_id":"commander@0.1.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.1.0","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"scripts":{},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":"0.4.x"},"main":"index","dist":{"shasum":"4f1b767116853b659106f9cf5897c8bac2c189b2","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.1.0.tgz"},"_npmJsonOpts":{"file":"/Users/tj/.npm/commander/0.1.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.2.0":{"_id":"commander@0.2.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.2.0","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/commander.js.git"},"scripts":{},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":"0.4.x"},"main":"index","dist":{"shasum":"61d495ef9c5d9d4ab0a9d168674822ae07e961cc","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.2.0.tgz"},"_npmJsonOpts":{"file":"/Users/tj/.npm/commander/0.2.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.2.1":{"_id":"commander@0.2.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.2.1","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/commander.js.git"},"scripts":{},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":">= 0.4.x < 0.7.0"},"main":"index","dist":{"shasum":"32ca3c217ac340082bd70e1326b5bbd41fbc6cd1","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.2.1.tgz"},"_npmJsonOpts":{"file":"/Users/tj/.npm/commander/0.2.1/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_engineSupported":true,"_npmVersion":"1.0.24","_nodeVersion":"v0.5.9","_defaultsLoaded":true,"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.3.0":{"_id":"commander@0.3.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.3.0","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/commander.js.git"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":">= 0.4.x < 0.7.0"},"main":"index","dist":{"shasum":"02cafd95f625df941eb0697b6bb540127c4778a7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.3.0.tgz"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_engineSupported":true,"_npmVersion":"1.0.102","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.3.1":{"_id":"commander@0.3.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.3.1","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/commander.js.git"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":">= 0.4.x < 0.7.0"},"main":"index","dist":{"shasum":"a70cc95038d614937abf9349b0b94f5491bcd8eb","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.3.1.tgz"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_engineSupported":true,"_npmVersion":"1.0.102","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.3.2":{"_id":"commander@0.3.2","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.3.2","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/commander.js.git"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":">= 0.4.x < 0.7.0"},"main":"index","dist":{"shasum":"8a98a6b590d2abab04892739da8f8577da964961","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.3.2.tgz"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_engineSupported":true,"_npmVersion":"1.0.102","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.3.3":{"_id":"commander@0.3.3","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.3.3","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/commander.js.git"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":">= 0.4.x < 0.7.0"},"main":"index","dist":{"shasum":"388a4097f857e9299c26415352b54d0706b06a2c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.3.3.tgz"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_engineSupported":true,"_npmVersion":"1.0.104","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.4.0":{"_id":"commander@0.4.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.4.0","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/commander.js.git"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":">= 0.4.x < 0.7.0"},"main":"index","dist":{"shasum":"85f193a56264f4959401bdbbce0bb09e5a8764cf","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.4.0.tgz"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_engineSupported":true,"_npmVersion":"1.0.104","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.4.1":{"_id":"commander@0.4.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.4.1","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/commander.js.git"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":">= 0.4.x < 0.7.0"},"main":"index","dist":{"shasum":"85c30d8e80fb57de9a95ae9bd5084021abc1dfdf","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.4.1.tgz"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_engineSupported":true,"_npmVersion":"1.0.104","_nodeVersion":"v0.6.1","_defaultsLoaded":true,"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.4.2":{"_id":"commander@0.4.2","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.4.2","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/commander.js.git"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":">= 0.4.x < 0.7.0"},"main":"index","dist":{"shasum":"f1872070e42d271a2a1c419981628628716ce01c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.4.2.tgz"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_engineSupported":true,"_npmVersion":"1.0.104","_nodeVersion":"v0.6.2","_defaultsLoaded":true,"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.4.3":{"_id":"commander@0.4.3","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.4.3","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/commander.js.git"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":">= 0.4.x < 0.7.0"},"main":"index","dist":{"shasum":"1f9c45f5c2d314c4bc9f9a3dd5b883261fbac8fc","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.4.3.tgz"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_engineSupported":true,"_npmVersion":"1.0.105","_nodeVersion":"v0.6.4","_defaultsLoaded":true,"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.5.0":{"_id":"commander@0.5.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.5.0","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/commander.js.git"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":">= 0.4.x < 0.7.0"},"main":"index","dist":{"shasum":"8fe03c71e444891dbda97c7dfbb108a33a05eaf3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.5.0.tgz"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_engineSupported":true,"_npmVersion":"1.0.105","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.5.1":{"_id":"commander@0.5.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.5.1","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/commander.js.git"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":">= 0.4.x < 0.7.0"},"main":"index","dist":{"shasum":"08477afb326d1adf9d4ee73af7170c70caa14f95","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.5.1.tgz"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.5.2":{"_id":"commander@0.5.2","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.5.2","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/visionmedia/commander.js.git"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":">= 0.4.x"},"main":"index","dist":{"shasum":"f270326709a115a126cfed5623852439b8e4a3b5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.5.2.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.6.0":{"_id":"commander@0.6.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.6.0","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/commander.js.git"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"optionalDependencies":{},"engines":{"node":">= 0.4.x < 0.7.0"},"main":"index","dist":{"shasum":"778f617d8a485268b0e06c02576d5a349aa25a9d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.6.0.tgz"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.6.1":{"_id":"commander@0.6.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"0.6.1","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/visionmedia/commander.js.git"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"optionalDependencies":{},"engines":{"node":">= 0.4.x"},"main":"index","dist":{"shasum":"fa68a14f6a945d54dbbe50d8cdb3320e9e3b1a06","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-0.6.1.tgz"},"_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"_engineSupported":true,"_npmVersion":"1.1.0-3","_nodeVersion":"v0.6.12","_defaultsLoaded":true,"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"1.0.0":{"_id":"commander@1.0.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"1.0.0","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/visionmedia/commander.js.git"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":">= 0.4.x"},"main":"index","dist":{"shasum":"5e6a88e7070ff5908836ead19169548c30f90bcd","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-1.0.0.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"1.0.1":{"_id":"commander@1.0.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"1.0.1","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/visionmedia/commander.js.git"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{},"engines":{"node":">= 0.4.x"},"main":"index","dist":{"shasum":"e2c18dc9b8f7ce51185b248271890b1af62cceaf","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-1.0.1.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"1.0.2":{"_id":"commander@1.0.2","name":"commander","description":"the complete solution for node.js command-line programs","version":"1.0.2","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/visionmedia/commander.js.git"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{"keypress":"0.1.x"},"engines":{"node":">= 0.6.x"},"main":"index","dist":{"shasum":"b9443ef3a966fb3a77d62f2d92dc5a06f1516116","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-1.0.2.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"1.0.3":{"_id":"commander@1.0.3","name":"commander","description":"the complete solution for node.js command-line programs","version":"1.0.3","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/visionmedia/commander.js.git"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{"keypress":"0.1.x"},"engines":{"node":">= 0.6.x"},"main":"index","dist":{"shasum":"037451a770f85c2fbb760e2911757fd79a366e2a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-1.0.3.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"1.0.4":{"_id":"commander@1.0.4","name":"commander","description":"the complete solution for node.js command-line programs","version":"1.0.4","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/visionmedia/commander.js.git"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{"keypress":"0.1.x"},"engines":{"node":">= 0.6.x"},"main":"index","dist":{"shasum":"5edeb1aee23c4fb541a6b70d692abef19669a2d3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-1.0.4.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"1.0.5":{"_id":"commander@1.0.5","name":"commander","description":"the complete solution for node.js command-line programs","version":"1.0.5","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/visionmedia/commander.js.git"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{"keypress":"0.1.x"},"engines":{"node":">= 0.6.x"},"main":"index","dist":{"shasum":"457295bb976e388e9dd0db52de4333e249f3d88c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-1.0.5.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"1.1.0":{"_id":"commander@1.1.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"1.1.0","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/visionmedia/commander.js.git"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{"keypress":"0.1.x"},"engines":{"node":">= 0.6.x"},"main":"index","dist":{"shasum":"88ab74780346d69a112d2efd30f2f4132624af67","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-1.1.0.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"1.1.1":{"_id":"commander@1.1.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"1.1.1","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/visionmedia/commander.js.git"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{"keypress":"0.1.x"},"engines":{"node":">= 0.6.x"},"main":"index","dist":{"shasum":"50d1651868ae60eccff0a2d9f34595376bc6b041","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-1.1.1.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"1.2.0":{"_id":"commander@1.2.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"1.2.0","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/visionmedia/commander.js.git"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{"keypress":"0.1.x"},"engines":{"node":">= 0.6.x"},"main":"index","dist":{"shasum":"fd5713bfa153c7d6cc599378a5ab4c45c535029e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-1.2.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"1.3.0":{"_id":"commander@1.3.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"1.3.0","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/visionmedia/commander.js.git"},"bugs":{"url":"https://github.com/visionmedia/commander.js/issues"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{"keypress":"0.1.x"},"engines":{"node":">= 0.6.x"},"main":"index","dist":{"shasum":"01e9f594426491a8baa85ebece3366685e0a031e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-1.3.0.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"1.3.1":{"_id":"commander@1.3.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"1.3.1","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/visionmedia/commander.js.git"},"bugs":{"url":"https://github.com/visionmedia/commander.js/issues"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{"keypress":"0.1.x"},"engines":{"node":">= 0.6.x"},"main":"index","dist":{"shasum":"02443e02db96f4b32b674225451abb6e9510000e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-1.3.1.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"1.3.2":{"_id":"commander@1.3.2","name":"commander","description":"the complete solution for node.js command-line programs","version":"1.3.2","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/visionmedia/commander.js.git"},"bugs":{"url":"https://github.com/visionmedia/commander.js/issues"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{"keypress":"0.1.x"},"engines":{"node":">= 0.6.x"},"main":"index","dist":{"shasum":"8a8f30ec670a6fdd64af52f1914b907d79ead5b5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-1.3.2.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"2.0.0":{"_id":"commander@2.0.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.0.0","keywords":["command","option","parser","prompt","stdin"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/visionmedia/commander.js.git"},"bugs":{"url":"https://github.com/visionmedia/commander.js/issues"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"engines":{"node":">= 0.6.x"},"main":"index","dist":{"shasum":"d1b86f901f8b64bd941bdeadaf924530393be928","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.0.0.tgz"},"_from":".","_npmVersion":"1.2.25","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"2.1.0":{"_id":"commander@2.1.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.1.0","keywords":["command","option","parser","prompt","stdin"],"homepage":"https://github.com/visionmedia/commander.js","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/visionmedia/commander.js.git"},"bugs":{"url":"https://github.com/visionmedia/commander.js/issues"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"engines":{"node":">= 0.6.x"},"files":["index.js"],"main":"index","dist":{"shasum":"d121bbae860d9992a3d517ba96f56588e47c6781","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.1.0.tgz"},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"2.2.0":{"_id":"commander@2.2.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.2.0","keywords":["command","option","parser","prompt","stdin"],"homepage":"https://github.com/visionmedia/commander.js","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/visionmedia/commander.js.git"},"bugs":{"url":"https://github.com/visionmedia/commander.js/issues"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"engines":{"node":">= 0.6.x"},"files":["index.js"],"main":"index","dist":{"shasum":"175ad4b9317f3ff615f201c1e57224f55a3e91df","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.2.0.tgz"},"_from":".","_npmVersion":"1.3.15","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"2.3.0":{"_id":"commander@2.3.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.3.0","keywords":["command","option","parser","prompt","stdin"],"homepage":"https://github.com/visionmedia/commander.js","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/visionmedia/commander.js.git"},"bugs":{"url":"https://github.com/visionmedia/commander.js/issues"},"scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"engines":{"node":">= 0.6.x"},"files":["index.js"],"main":"index","dist":{"shasum":"fd430e889832ec353b9acd1de217c11cb3eef873","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.3.0.tgz"},"gitHead":"7e9f407ec03d4371a478c2fe417db4998ecb6169","_from":".","_npmVersion":"1.4.21","_npmUser":{"name":"somekittens","email":"rkoutnik@gmail.com"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"thethomaseffect","email":"thethomaseffect@gmail.com"}]},"2.4.0":{"_id":"commander@2.4.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.4.0","keywords":["command","option","parser","prompt"],"homepage":"https://github.com/visionmedia/commander.js","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/visionmedia/commander.js.git"},"bugs":{"url":"https://github.com/visionmedia/commander.js/issues"},"license":"MIT","scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"engines":{"node":">= 0.6.x"},"files":["index.js"],"main":"index","dist":{"shasum":"fad884ce8f09509b10a5ec931332cb97786e2fd6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.4.0.tgz"},"_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"zhiyelee","email":"zhiyelee@gmail.com"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"thethomaseffect","email":"thethomaseffect@gmail.com"}]},"2.5.0":{"_id":"commander@2.5.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.5.0","keywords":["command","option","parser","prompt"],"homepage":"https://github.com/tj/commander.js","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"engines":{"node":">= 0.6.x"},"files":["index.js"],"main":"index","dist":{"shasum":"d777b6a4d847d423e5d475da864294ac1ff5aa9d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.5.0.tgz"},"_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"zhiyelee","email":"zhiyelee@gmail.com"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"thethomaseffect","email":"thethomaseffect@gmail.com"}]},"2.5.1":{"_id":"commander@2.5.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.5.1","keywords":["command","option","parser","prompt"],"homepage":"https://github.com/tj/commander.js","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"engines":{"node":">= 0.6.x"},"files":["index.js"],"main":"index","dist":{"shasum":"23c61f6e47be143cc02e7ad4bb1c47f5cd5a2883","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.5.1.tgz"},"_from":".","_npmVersion":"1.4.9","_npmUser":{"name":"zhiyelee","email":"zhiyelee@gmail.com"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"thethomaseffect","email":"thethomaseffect@gmail.com"}]},"2.6.0":{"_id":"commander@2.6.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.6.0","keywords":["command","option","parser","prompt"],"homepage":"https://github.com/tj/commander.js","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"engines":{"node":">= 0.6.x"},"files":["index.js"],"main":"index","dist":{"shasum":"9df7e52fb2a0cb0fb89058ee80c3104225f37e1d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.6.0.tgz"},"gitHead":"c6807fd154dd3b7ce8756f141f8d3acfcc74be60","_from":".","_npmVersion":"2.1.12","_nodeVersion":"0.11.14","_npmUser":{"name":"zhiyelee","email":"zhiyelee@gmail.com"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"thethomaseffect","email":"thethomaseffect@gmail.com"}]},"2.7.0":{"_id":"commander@2.7.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.7.0","keywords":["command","option","parser"],"homepage":"https://github.com/tj/commander.js","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{"graceful-readlink":">= 1.0.0"},"engines":{"node":">= 0.6.x"},"files":["index.js"],"main":"index","dist":{"shasum":"f3d8e36f6fcb32e663cabb70689a59ea847433b1","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.7.0.tgz"},"gitHead":"481e94381a0997260b867c066f1a8ac02b45e290","_from":".","_npmVersion":"2.1.17","_nodeVersion":"0.11.14","_npmUser":{"name":"zhiyelee","email":"zhiyelee@gmail.com"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"thethomaseffect","email":"thethomaseffect@gmail.com"}]},"2.7.1":{"_id":"commander@2.7.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.7.1","keywords":["command","option","parser"],"homepage":"https://github.com/tj/commander.js","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1"},"dependencies":{"graceful-readlink":">= 1.0.0"},"engines":{"node":">= 0.6.x"},"files":["index.js"],"main":"index","dist":{"shasum":"5d419a2bbed2c32ee3e4dca9bb45ab83ecc3065a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.7.1.tgz"},"gitHead":"103654f8f32c010ad1e62cefc9ab92d7c8d18c8e","_from":".","_npmVersion":"2.1.17","_nodeVersion":"0.11.14","_npmUser":{"name":"zhiyelee","email":"zhiyelee@gmail.com"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"thethomaseffect","email":"thethomaseffect@gmail.com"}]},"2.8.0":{"_id":"commander@2.8.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.8.0","keywords":["command","option","parser"],"homepage":"https://github.com/tj/commander.js","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1","sinon":">= 1.13.0"},"dependencies":{"graceful-readlink":">= 1.0.0"},"engines":{"node":">= 0.6.x"},"files":["index.js"],"main":"index","dist":{"shasum":"117c42659a72338e3364877df20852344095dc11","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.8.0.tgz"},"gitHead":"4dae21d9336eb225ef20deadbd12347d278390d8","_from":".","_npmVersion":"2.5.1","_nodeVersion":"0.12.0","_npmUser":{"name":"zhiyelee","email":"zhiyelee@gmail.com"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"thethomaseffect","email":"thethomaseffect@gmail.com"}]},"2.8.1":{"_id":"commander@2.8.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.8.1","keywords":["command","option","parser"],"homepage":"https://github.com/tj/commander.js","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1","sinon":">= 1.14.1"},"dependencies":{"graceful-readlink":">= 1.0.0"},"engines":{"node":">= 0.6.x"},"files":["index.js"],"main":"index","dist":{"shasum":"06be367febfda0c330aa1e2a072d3dc9762425d4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.8.1.tgz"},"gitHead":"c6c84726050b19c0373de27cd359f3baddff579f","_from":".","_npmVersion":"2.5.1","_nodeVersion":"0.12.0","_npmUser":{"name":"zhiyelee","email":"zhiyelee@gmail.com"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"thethomaseffect","email":"thethomaseffect@gmail.com"}]},"2.9.0":{"_id":"commander@2.9.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.9.0","keywords":["command","option","parser"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":""},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"license":"MIT","scripts":{"test":"make test"},"directories":null,"devDependencies":{"should":">= 0.0.1","sinon":">=1.17.1"},"dependencies":{"graceful-readlink":">= 1.0.0"},"engines":{"node":">= 0.6.x"},"files":["index.js"],"main":"index","dist":{"shasum":"9c99094176e12240cb22d6c5146098400fe0f7d4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.9.0.tgz"}},"2.10.0":{"_id":"commander@2.10.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.10.0","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":">= 0.0.1 <9.0.0","sinon":">=1.17.1"},"dependencies":{"graceful-readlink":">= 1.0.0"},"engines":{"node":">= 0.6.x"},"files":["index.js"],"main":"index","dist":{"shasum":"e1f5d3245de246d1a5ca04702fa1ad1bd7e405fe","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.10.0.tgz"},"gitHead":"8870675aa189d84014779b53760544a0e614cb40","_npmVersion":"5.0.3","_nodeVersion":"6.10.1","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander-2.10.0.tgz_1498210375405_0.9538901860360056"}},"2.11.0":{"_id":"commander@2.11.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.11.0","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"test":"make test"},"directories":{},"devDependencies":{"should":"^11.2.1","sinon":"^2.3.5"},"dependencies":{},"files":["index.js"],"main":"index","dist":{"shasum":"157152fd1e7a6c8d98a5b715cf376df928004563","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.11.0.tgz"},"gitHead":"30535a67a7d1f3809231603bc4dc0ba873ae85ef","_npmVersion":"5.0.4","_nodeVersion":"6.10.1","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander-2.11.0.tgz_1499076445115_0.39661598461680114"}},"2.12.0":{"_id":"commander@2.12.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.12.0","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"test":"make test && npm run test-typings","test-typings":"node_modules/typescript/bin/tsc -p tsconfig.json"},"directories":{},"devDependencies":{"should":"^11.2.1","sinon":"^2.3.5","typescript":"^2.6.1"},"dependencies":{"@types/node":"^7.0.48"},"files":["index.js"],"main":"index","dist":{"shasum":"2f13615c39c687a77926aa68ef25c099db1e72fb","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.12.0.tgz"},"typings":"typings/index.d.ts","gitHead":"7e22f38a09a0975ec2da2e0eda13cb7fdac370f0","_npmVersion":"5.4.2","_nodeVersion":"8.7.0","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander-2.12.0.tgz_1511391893498_0.24965589377097785"}},"2.12.1":{"_id":"commander@2.12.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.12.1","keywords":["commander","command","option","parser"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":""},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"license":"MIT","scripts":{"test":"make test && npm run test-typings","test-typings":"node_modules/typescript/bin/tsc -p tsconfig.json"},"directories":null,"devDependencies":{"@types/node":"^7.0.48","should":"^11.2.1","sinon":"^2.4.1","typescript":"^2.6.1"},"dependencies":{},"files":["index.js"],"main":"index","dist":{"shasum":"468635c4168d06145b9323356d1da84d14ac4a7a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.12.1.tgz"},"typings":"typings/index.d.ts"},"2.12.2":{"_id":"commander@2.12.2","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.12.2","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"test":"make test && npm run test-typings","test-typings":"node_modules/typescript/bin/tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/node":"^7.0.48","should":"^11.2.1","sinon":"^2.4.1","typescript":"^2.6.2"},"dependencies":{},"files":["index.js","typings/index.d.ts"],"main":"index","dist":{"shasum":"0f5946c427ed9ec0d91a46bb9def53e54650e555","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.12.2.tgz"},"typings":"typings/index.d.ts","gitHead":"6864c953d781d4f665afecbdace84d9d80e45060","_npmVersion":"5.5.1","_nodeVersion":"9.2.0","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander-2.12.2.tgz_1511852934826_0.43355596787296236"}},"2.13.0":{"_id":"commander@2.13.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.13.0","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"test":"make test && npm run test-typings","test-typings":"node_modules/typescript/bin/tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/node":"^7.0.48","should":"^11.2.1","sinon":"^2.4.1","typescript":"^2.6.2"},"dependencies":{},"files":["index.js","typings/index.d.ts"],"main":"index","dist":{"shasum":"6964bca67685df7c1f1430c584f07d7597885b9c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.13.0.tgz"},"typings":"typings/index.d.ts","gitHead":"291fbaa61e3704ec30617812ab6646c8443a03f0","_npmVersion":"5.6.0","_nodeVersion":"9.3.0","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander-2.13.0.tgz_1515654595288_0.4785951259545982"}},"2.14.0":{"_id":"commander@2.14.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.14.0","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js","test":"make test && npm run test-typings","test-typings":"node_modules/typescript/bin/tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/node":"^7.0.52","eslint":"^3.19.0","should":"^11.2.1","sinon":"^2.4.1","standard":"^10.0.3","typescript":"^2.7.1"},"dependencies":{},"files":["index.js","typings/index.d.ts"],"main":"index","dist":{"shasum":"7b25325963e6aace20d3a9285b09379b0c2208b5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.14.0.tgz"},"typings":"typings/index.d.ts","gitHead":"de4af3abbe9baa6dd60dce614e2c94b615c603a5","_npmVersion":"5.6.0","_nodeVersion":"9.4.0","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander-2.14.0.tgz_1517880226071_0.43818329833447933"}},"2.14.1":{"_id":"commander@2.14.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.14.1","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js","test":"make test && npm run test-typings","test-typings":"node_modules/typescript/bin/tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/node":"^7.0.52","eslint":"^3.19.0","should":"^11.2.1","sinon":"^2.4.1","standard":"^10.0.3","typescript":"^2.7.1"},"dependencies":{},"files":["index.js","typings/index.d.ts"],"main":"index","dist":{"shasum":"2235123e37af8ca3c65df45b026dbd357b01b9aa","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.14.1.tgz"},"typings":"typings/index.d.ts","gitHead":"6b026a5c88a2c7f67db70831c015e9d11c7babca","_npmVersion":"5.6.0","_nodeVersion":"9.4.0","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_2.14.1_1517989378540_0.7122613806538618"},"_hasShrinkwrap":false},"2.15.0":{"_id":"commander@2.15.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.15.0","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js","test":"make test && npm run test-typings","test-typings":"node_modules/typescript/bin/tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/node":"^7.0.55","eslint":"^3.19.0","should":"^11.2.1","sinon":"^2.4.1","standard":"^10.0.3","typescript":"^2.7.2"},"dependencies":{},"files":["index.js","typings/index.d.ts"],"main":"index","dist":{"shasum":"ad2a23a1c3b036e392469b8012cec6b33b4c1322","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.15.0.tgz"},"typings":"typings/index.d.ts","gitHead":"d8404f8de45c9ba780606878f4d35d0a45743d32","_npmVersion":"5.7.1","_nodeVersion":"9.7.1","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_2.15.0_1520471512609_0.20298682127168233"},"_hasShrinkwrap":false},"2.15.1":{"_id":"commander@2.15.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.15.1","keywords":["commander","command","option","parser"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":""},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"license":"MIT","scripts":{"lint":"eslint index.js","test":"make test && npm run test-typings","test-typings":"node_modules/typescript/bin/tsc -p tsconfig.json"},"directories":null,"devDependencies":{"@types/node":"^7.0.55","eslint":"^3.19.0","should":"^11.2.1","sinon":"^2.4.1","standard":"^10.0.3","typescript":"^2.7.2"},"dependencies":{},"files":["index.js","typings/index.d.ts"],"main":"index","dist":{"shasum":"df46e867d0fc2aec66a34662b406a9ccafff5b0f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.15.1.tgz"},"typings":"typings/index.d.ts"},"2.16.0":{"_id":"commander@2.16.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.16.0","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js","test":"node test/run.js && npm run test-typings","test-typings":"node_modules/typescript/bin/tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/node":"^7.0.66","eslint":"^4.19.1","should":"^11.2.1","sinon":"^2.4.1","standard":"^10.0.3","typescript":"^2.9.2"},"dependencies":{},"files":["index.js","typings/index.d.ts"],"main":"index","dist":{"shasum":"f16390593996ceb4f3eeb020b31d78528f7f8a50","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.16.0.tgz"},"typings":"typings/index.d.ts","gitHead":"4cc348bd9808f799ca0600a39136b1fa25820f3b","_npmVersion":"6.1.0","_nodeVersion":"10.5.0","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_2.16.0_1530265235564_0.5330625131044013"},"_hasShrinkwrap":false},"2.17.0":{"_id":"commander@2.17.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.17.0","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js","test":"node test/run.js && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/node":"^10.5.5","eslint":"^5.2.0","should":"^13.2.3","sinon":"^6.1.4","standard":"^11.0.1","typescript":"^2.9.2"},"dependencies":{},"files":["index.js","typings/index.d.ts"],"main":"index","dist":{"shasum":"9d07b25e2a6f198b76d8b756a0e8a9604a6a1a60","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.17.0.tgz"},"typings":"typings/index.d.ts","gitHead":"25b06ee12b6f14afa0b4b7b6f028a66a7c4faf5e","_npmVersion":"6.3.0","_nodeVersion":"10.6.0","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_2.17.0_1533341373266_0.9287988805640361"},"_hasShrinkwrap":false},"2.17.1":{"_id":"commander@2.17.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.17.1","keywords":["commander","command","option","parser"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":""},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"license":"MIT","scripts":{"lint":"eslint index.js","test":"node test/run.js && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":null,"devDependencies":{"@types/node":"^10.5.7","eslint":"^5.3.0","should":"^13.2.3","sinon":"^6.1.4","standard":"^11.0.1","typescript":"^2.9.2"},"dependencies":{},"files":["index.js","typings/index.d.ts"],"main":"index","dist":{"shasum":"bd77ab7de6de94205ceacc72f1716d29f20a77bf","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.17.1.tgz"},"typings":"typings/index.d.ts"},"2.18.0":{"_id":"commander@2.18.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.18.0","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js","test":"node test/run.js && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/node":"^10.9.4","eslint":"^5.5.0","should":"^13.2.3","sinon":"^6.2.0","standard":"^12.0.1","ts-node":"^7.0.1","typescript":"^2.9.2"},"dependencies":{},"main":"index","dist":{"shasum":"2bf063ddee7c7891176981a2cc798e5754bc6970","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.18.0.tgz"},"typings":"typings/index.d.ts","gitHead":"54b7f142b1fa960442c6c8982da16f7a5204c0a2","_npmVersion":"6.4.1","_nodeVersion":"10.9.0","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_2.18.0_1536316039810_0.8329669530575801"},"_hasShrinkwrap":false},"2.19.0":{"_id":"commander@2.19.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.19.0","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js","test":"node test/run.js && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/node":"^10.11.3","eslint":"^5.6.1","should":"^13.2.3","sinon":"^6.3.4","standard":"^12.0.1","ts-node":"^7.0.1","typescript":"^2.9.2"},"dependencies":{},"main":"index","dist":{"shasum":"f6198aa84e5b83c46054b94ddedbfed5ee9ff12a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.19.0.tgz"},"typings":"typings/index.d.ts","gitHead":"78b7dbd18aabc23ccc9d151db411913237a3c483","_npmVersion":"6.4.1","_nodeVersion":"10.11.0","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_2.19.0_1539035473746_0.9826574892249367"},"_hasShrinkwrap":false},"2.20.0":{"_id":"commander@2.20.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.20.0","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js","test":"node test/run.js && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/node":"^10.11.3","eslint":"^5.6.1","should":"^13.2.3","sinon":"^6.3.4","standard":"^12.0.1","ts-node":"^7.0.1","typescript":"^2.9.2"},"dependencies":{},"main":"index","dist":{"shasum":"d58bb2b5c1ee8f87b0d340027e9e94e222c5a422","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.20.0.tgz"},"typings":"typings/index.d.ts","gitHead":"3e8bf54b9b2fb3960fc2320a4174aa79efca90fa","_nodeVersion":"11.13.0","_npmVersion":"6.7.0","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_2.20.0_1554252089341_0.9811870313123083"},"_hasShrinkwrap":false},"2.20.1":{"_id":"commander@2.20.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.20.1","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js","test":"node test/run.js && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/node":"^12.7.8","eslint":"^6.4.0","should":"^13.2.3","sinon":"^7.5.0","standard":"^14.3.1","ts-node":"^8.4.1","typescript":"^3.6.3"},"dependencies":{},"main":"index","dist":{"shasum":"3863ce3ca92d0831dcf2a102f5fb4b5926afd0f9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.20.1.tgz"},"readme":"# Commander.js\n\n\n[![Build Status](https://api.travis-ci.org/tj/commander.js.svg?branch=master)](http://travis-ci.org/tj/commander.js)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n[![Join the chat at https://gitter.im/tj/commander.js](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/tj/commander.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n  The complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby's [commander](https://github.com/commander-rb/commander).  \n  [API documentation](http://tj.github.com/commander.js/)\n\n\n## Installation\n\n    $ npm install commander\n\n## Option parsing\n\nOptions with commander are defined with the `.option()` method, also serving as documentation for the options. The example below parses args and options from `process.argv`, leaving remaining args as the `program.args` array which were not consumed by options.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-p, --peppers', 'Add peppers')\n  .option('-P, --pineapple', 'Add pineapple')\n  .option('-b, --bbq-sauce', 'Add bbq sauce')\n  .option('-c, --cheese [type]', 'Add the specified type of cheese [marble]', 'marble')\n  .parse(process.argv);\n\nconsole.log('you ordered a pizza with:');\nif (program.peppers) console.log('  - peppers');\nif (program.pineapple) console.log('  - pineapple');\nif (program.bbqSauce) console.log('  - bbq');\nconsole.log('  - %s cheese', program.cheese);\n```\n\nShort flags may be passed as a single arg, for example `-abc` is equivalent to `-a -b -c`. Multi-word options such as \"--template-engine\" are camel-cased, becoming `program.templateEngine` etc.\n\nNote that multi-word options starting with `--no` prefix negate the boolean value of the following word. For example, `--no-sauce` sets the value of `program.sauce` to false.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .parse(process.argv);\n\nconsole.log('you ordered a pizza');\nif (program.sauce) console.log('  with sauce');\nelse console.log(' without sauce');\n```\n\nTo get string arguments from options you will need to use angle brackets <> for required inputs or square brackets [] for optional inputs. \n\ne.g. ```.option('-m --myarg [myVar]', 'my super cool description')```\n\nThen to access the input if it was passed in.\n\ne.g. ```var myInput = program.myarg```\n\n**NOTE**: If you pass a argument without using brackets the example above will return true and not the value passed in.\n\n\n## Version option\n\nCalling the `version` implicitly adds the `-V` and `--version` options to the command.\nWhen either of these options is present, the command prints the version number and exits.\n\n    $ ./examples/pizza -V\n    0.0.1\n\nIf you want your program to respond to the `-v` option instead of the `-V` option, simply pass custom flags to the `version` method using the same syntax as the `option` method.\n\n```js\nprogram\n  .version('0.0.1', '-v, --version')\n```\n\nThe version flags can be named anything, but the long option is required.\n\n## Command-specific options\n\nYou can attach options to a command.\n\n```js\n#!/usr/bin/env node\n\nvar program = require('commander');\n\nprogram\n  .command('rm <dir>')\n  .option('-r, --recursive', 'Remove recursively')\n  .action(function (dir, cmd) {\n    console.log('remove ' + dir + (cmd.recursive ? ' recursively' : ''))\n  })\n\nprogram.parse(process.argv)\n```\n\nA command's options are validated when the command is used. Any unknown options will be reported as an error. However, if an action-based command does not define an action, then the options are not validated.\n\n## Coercion\n\n```js\nfunction range(val) {\n  return val.split('..').map(Number);\n}\n\nfunction list(val) {\n  return val.split(',');\n}\n\nfunction collect(val, memo) {\n  memo.push(val);\n  return memo;\n}\n\nfunction increaseVerbosity(v, total) {\n  return total + 1;\n}\n\nprogram\n  .version('0.1.0')\n  .usage('[options] <file ...>')\n  .option('-i, --integer <n>', 'An integer argument', parseInt)\n  .option('-f, --float <n>', 'A float argument', parseFloat)\n  .option('-r, --range <a>..<b>', 'A range', range)\n  .option('-l, --list <items>', 'A list', list)\n  .option('-o, --optional [value]', 'An optional value')\n  .option('-c, --collect [value]', 'A repeatable value', collect, [])\n  .option('-v, --verbose', 'A value that can be increased', increaseVerbosity, 0)\n  .parse(process.argv);\n\nconsole.log(' int: %j', program.integer);\nconsole.log(' float: %j', program.float);\nconsole.log(' optional: %j', program.optional);\nprogram.range = program.range || [];\nconsole.log(' range: %j..%j', program.range[0], program.range[1]);\nconsole.log(' list: %j', program.list);\nconsole.log(' collect: %j', program.collect);\nconsole.log(' verbosity: %j', program.verbose);\nconsole.log(' args: %j', program.args);\n```\n\n## Regular Expression\n```js\nprogram\n  .version('0.1.0')\n  .option('-s --size <size>', 'Pizza size', /^(large|medium|small)$/i, 'medium')\n  .option('-d --drink [drink]', 'Drink', /^(coke|pepsi|izze)$/i)\n  .parse(process.argv);\n\nconsole.log(' size: %j', program.size);\nconsole.log(' drink: %j', program.drink);\n```\n\n## Variadic arguments\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you have to\n append `...` to the argument name.  Here is an example:\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('rmdir <dir> [otherDirs...]')\n  .action(function (dir, otherDirs) {\n    console.log('rmdir %s', dir);\n    if (otherDirs) {\n      otherDirs.forEach(function (oDir) {\n        console.log('rmdir %s', oDir);\n      });\n    }\n  });\n\nprogram.parse(process.argv);\n```\n\n An `Array` is used for the value of a variadic argument.  This applies to `program.args` as well as the argument passed\n to your action as demonstrated above.\n\n## Specify the argument syntax\n\n```js\n#!/usr/bin/env node\n\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .arguments('<cmd> [env]')\n  .action(function (cmd, env) {\n     cmdValue = cmd;\n     envValue = env;\n  });\n\nprogram.parse(process.argv);\n\nif (typeof cmdValue === 'undefined') {\n   console.error('no command given!');\n   process.exit(1);\n}\nconsole.log('command:', cmdValue);\nconsole.log('environment:', envValue || \"no environment given\");\n```\nAngled brackets (e.g. `<cmd>`) indicate required input. Square brackets (e.g. `[env]`) indicate optional input.\n\n## Git-style sub-commands\n\n```js\n// file: ./examples/pm\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('list', 'list packages installed', {isDefault: true})\n  .parse(process.argv);\n```\n\nWhen `.command()` is invoked with a description argument, no `.action(callback)` should be called to handle sub-commands, otherwise there will be an error. This tells commander that you're going to use separate executables for sub-commands, much like `git(1)` and other popular tools.  \nThe commander will try to search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-command`, like `pm-install`, `pm-search`.\n\nOptions can be passed with the call to `.command()`. Specifying `true` for `opts.noHelp` will remove the subcommand from the generated help output. Specifying `true` for `opts.isDefault` will run the subcommand if no other subcommand is specified.\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n### `--harmony`\n\nYou can enable `--harmony` option in two ways:\n* Use `#! /usr/bin/env node --harmony` in the sub-commands scripts. Note some os version don’t support this pattern.\n* Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning sub-command process.\n\n## Automated --help\n\n The help information is auto-generated based on the information commander already knows about your program, so the following `--help` info is for free:\n\n```  \n$ ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizzas ordering\n\nOptions:\n  -h, --help           output usage information\n  -V, --version        output the version number\n  -p, --peppers        Add peppers\n  -P, --pineapple      Add pineapple\n  -b, --bbq            Add bbq sauce\n  -c, --cheese <type>  Add the specified type of cheese [marble]\n  -C, --no-cheese      You do not want any cheese\n```\n\n## Custom help\n\n You can display arbitrary `-h, --help` information\n by listening for \"--help\". Commander will automatically\n exit once you are done so that the remainder of your program\n does not execute causing undesired behaviors, for example\n in the following executable \"stuff\" will not output when\n `--help` is used.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-f, --foo', 'enable some foo')\n  .option('-b, --bar', 'enable some bar')\n  .option('-B, --baz', 'enable some baz');\n\n// must be before .parse() since\n// node's emit() is immediate\n\nprogram.on('--help', function(){\n  console.log('')\n  console.log('Examples:');\n  console.log('  $ custom-help --help');\n  console.log('  $ custom-help -h');\n});\n\nprogram.parse(process.argv);\n\nconsole.log('stuff');\n```\n\nYields the following help output when `node script-name.js -h` or `node script-name.js --help` are run:\n\n```\nUsage: custom-help [options]\n\nOptions:\n  -h, --help     output usage information\n  -V, --version  output the version number\n  -f, --foo      enable some foo\n  -b, --bar      enable some bar\n  -B, --baz      enable some baz\n\nExamples:\n  $ custom-help --help\n  $ custom-help -h\n```\n\n## .outputHelp(cb)\n\nOutput help information without exiting.\nOptional callback cb allows post-processing of help text before it is displayed.\n\nIf you want to display help by default (e.g. if no command was provided), you can use something like:\n\n```js\nvar program = require('commander');\nvar colors = require('colors');\n\nprogram\n  .version('0.1.0')\n  .command('getstream [url]', 'get stream URL')\n  .parse(process.argv);\n\nif (!process.argv.slice(2).length) {\n  program.outputHelp(make_red);\n}\n\nfunction make_red(txt) {\n  return colors.red(txt); //display the help text in red on the console\n}\n```\n\n## .help(cb)\n\n  Output help information and exit immediately.\n  Optional callback cb allows post-processing of help text before it is displayed.\n\n\n## Custom event listeners\n You can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.verbose;\n});\n\n// error on unknown commands\nprogram.on('command:*', function () {\n  console.error('Invalid command: %s\\nSee --help for a list of available commands.', program.args.join(' '));\n  process.exit(1);\n});\n```\n\n## Examples\n\n```js\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-C, --chdir <path>', 'change the working directory')\n  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n  .option('-T, --no-tests', 'ignore test hook');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option(\"-s, --setup_mode [mode]\", \"Which setup mode to use\")\n  .action(function(env, options){\n    var mode = options.setup_mode || \"normal\";\n    env = env || 'all';\n    console.log('setup for %s env(s) with %s mode', env, mode);\n  });\n\nprogram\n  .command('exec <cmd>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option(\"-e, --exec_mode <mode>\", \"Which exec mode to use\")\n  .action(function(cmd, options){\n    console.log('exec \"%s\" using %s mode', cmd, options.exec_mode);\n  }).on('--help', function() {\n    console.log('');\n    console.log('Examples:');\n    console.log('');\n    console.log('  $ deploy exec sequential');\n    console.log('  $ deploy exec async');\n  });\n\nprogram\n  .command('*')\n  .action(function(env){\n    console.log('deploying \"%s\"', env);\n  });\n\nprogram.parse(process.argv);\n```\n\nMore Demos can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## License\n\n[MIT](https://github.com/tj/commander.js/blob/master/LICENSE)\n","typings":"typings/index.d.ts","readmeFilename":"Readme.md","gitHead":"48b02f06da3b96b200a973aaa1f7e40287882e8a","_nodeVersion":"10.16.3","_npmVersion":"6.11.3","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_2.20.1_1569708104186_0.2554397084003732"},"_hasShrinkwrap":false},"2.20.3":{"_id":"commander@2.20.3","name":"commander","description":"the complete solution for node.js command-line programs","version":"2.20.3","keywords":["commander","command","option","parser"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":""},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"license":"MIT","scripts":{"lint":"eslint index.js","test":"node test/run.js && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":null,"devDependencies":{"@types/node":"^12.7.8","eslint":"^6.4.0","should":"^13.2.3","sinon":"^7.5.0","standard":"^14.3.1","ts-node":"^8.4.1","typescript":"^3.6.3"},"dependencies":{},"files":["index.js","typings/index.d.ts"],"main":"index","dist":{"shasum":"fd485e84c03eb4881c20722ba48035e8531aeb33","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-2.20.3.tgz"},"typings":"typings/index.d.ts"},"3.0.0-0":{"_id":"commander@3.0.0-0","name":"commander","description":"the complete solution for node.js command-line programs","version":"3.0.0-0","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js","test":"node test/run.js && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/node":"^12.6.2","eslint":"^6.0.1","should":"^13.2.3","sinon":"^7.3.2","standard":"^13.0.1","ts-node":"^8.3.0","typescript":"^3.5.3"},"dependencies":{},"main":"index","dist":{"shasum":"c7555e26ab809878560e8a3533220a4d37996b27","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-3.0.0-0.tgz"},"readme":"# Commander.js\n\n[![Build Status](https://api.travis-ci.org/tj/commander.js.svg?branch=master)](http://travis-ci.org/tj/commander.js)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby's [commander](https://github.com/commander-rb/commander).\n\n## Installation\n\n    $ npm install commander\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\nconst program = require('commander');\nprogram.version('0.0.1');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n ```js\n const commander = require('commander');\n const program = new commander.Command();\n program.version('0.0.1');\n ```\n\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space.\n\nThe options can be accessed as properties on the Command object. Multi-word options such as \"--template-engine\" are camel-cased, becoming `program.templateEngine` etc. Multiple short flags may be combined as a single arg, for example `-abc` is equivalent to `-a -b -c`.\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean flag, and an option which takes a value (declared using angle brackets). Both are `undefined` unless specified on command line.\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nif (program.debug) console.log(program.opts());\nconsole.log('pizza details:');\nif (program.small) console.log('- small pizza size');\nif (program.pizzaType) console.log(`- ${program.pizzaType}`);\n```\n\n```bash\n$ pizza-options -d\n{ debug: true, small: undefined, pizzaType: undefined }\npizza details:\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -ds -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the options as the `program.args` array.\n\n### Default option value\n\nYou can specify a default value for an option which takes a value.\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse(process.argv);\n\nconsole.log(`cheese: ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and flag|value\n\nYou can specify a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be. You can specify a default boolean value for a boolean flag and it can be overridden on command line.\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse(process.argv);\n\nconst sauceStr = program.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (program.cheese === false) ? 'no cheese' : `${program.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```bash\n$ pizza-options \nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which functions as a flag but may also take a value (declared using square brackets).\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nif (program.cheese === undefined) console.log('no cheese');\nelse if (program.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option values. The callback function receives two parameters, the user specified value and the \nprevious value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option value to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function.\n\n```js\nconst program = require('commander');\n\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and an optional radix\n  return parseInt(value);\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse(process.argv);\n\nif (program.float !== undefined) console.log(`float: ${program.float}`);\nif (program.integer !== undefined) console.log(`integer: ${program.integer}`);\nif (program.verbose > 0) console.log(`verbosity: ${program.verbose}`);\nif (program.collect.length > 0) console.log(program.collect);\nif (program.list !== undefined) console.log(program.list);\n```\n\n```bash\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```bash\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method. The version flags can be named anything, but a long name is required.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n## Commands\n\nYou can specify (sub)commands for your top-level command using `.command`. There are two ways these can be implemented: using an action handler attached to the command, or as a separate executable file (described in more detail later). In the first parameter to `.command` you specify the command name and any command arguments. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using separate executable file (description is second parameter to `.command`)\n// Returns top-level command for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n```\n\n### Specify the argument syntax\n\nYou use `.arguments` to specify the arguments for the top-level command, and for subcommands they are included in the `.command` call. Angled brackets (e.g. `<required>`) indicate required input. Square brackets (e.g. `[optional]`) indicate optional input.\n\n\n```js\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .arguments('<cmd> [env]')\n  .action(function (cmd, env) {\n    cmdValue = cmd;\n    envValue = env;\n  });\n\nprogram.parse(process.argv);\n\nif (typeof cmdValue === 'undefined') {\n  console.error('no command given!');\n  process.exit(1);\n}\nconsole.log('command:', cmdValue);\nconsole.log('environment:', envValue || \"no environment given\");\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. For example:\n\n```js\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('rmdir <dir> [otherDirs...]')\n  .action(function (dir, otherDirs) {\n    console.log('rmdir %s', dir);\n    if (otherDirs) {\n      otherDirs.forEach(function (oDir) {\n        console.log('rmdir %s', oDir);\n      });\n    }\n  });\n\nprogram.parse(process.argv);\n```\n\nThe variadic argument is passed to the action handler as an array. (And this also applies to `program.args`.)\n\n### Action handler (sub)commands\n\nYou can add options to a command that uses an action handler.\nThe action handler gets passed a parameter for each argument you declared, and one additional argument which is the\ncommand object itself. This command argument has the values for the command-specific options added as properties.\n\n```js\nvar program = require('commander');\n\nprogram\n  .command('rm <dir>')\n  .option('-r, --recursive', 'Remove recursively')\n  .action(function (dir, cmdObj) {\n    console.log('remove ' + dir + (cmdObj.recursive ? ' recursively' : ''))\n  })\n\nprogram.parse(process.argv)\n```\n\nA command's options on the command line are validated when the command is used. Any unknown options will be reported as an error. However, if an action-based command does not define an action, then the options are not validated.\n\nConfiguration options can be passed with the call to `.command()`. Specifying `true` for `opts.noHelp` will remove the command from the generated help output.\n\n### Git-style executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells commander that you're going to use separate executables for sub-commands, much like `git(1)` and other popular tools.\nCommander will search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-subcommand`, like `pm-install`, `pm-search`.\nYou can specify a custom name with the `executableFile` configuration option.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\n```js\n// file: ./examples/pm\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', {executableFile: 'myUpdateSubCommand'})\n  .command('list', 'list packages installed', {isDefault: true})\n  .parse(process.argv);\n```\n\nConfiguration options can be passed with the call to `.command()`. Specifying `true` for `opts.noHelp` will remove the command from the generated help output. Specifying `true` for `opts.isDefault` will run the subcommand if no other subcommand is specified.\nSpecifying a name with `executableFile` will override the default constructed name.\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n## Automated --help\n\n The help information is auto-generated based on the information commander already knows about your program, so the following `--help` info is for free:\n\n```  \n$ ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizzas ordering\n\nOptions:\n  -V, --version        output the version number\n  -p, --peppers        Add peppers\n  -P, --pineapple      Add pineapple\n  -b, --bbq            Add bbq sauce\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           output usage information\n```\n\n## Custom help\n\n You can display arbitrary `-h, --help` information\n by listening for \"--help\". Commander will automatically\n exit once you are done so that the remainder of your program\n does not execute causing undesired behaviors, for example\n in the following executable \"stuff\" will not output when\n `--help` is used.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-f, --foo', 'enable some foo')\n  .option('-b, --bar', 'enable some bar')\n  .option('-B, --baz', 'enable some baz');\n\n// must be before .parse() since\n// node's emit() is immediate\n\nprogram.on('--help', function(){\n  console.log('')\n  console.log('Examples:');\n  console.log('  $ custom-help --help');\n  console.log('  $ custom-help -h');\n});\n\nprogram.parse(process.argv);\n\nconsole.log('stuff');\n```\n\nYields the following help output when `node script-name.js -h` or `node script-name.js --help` are run:\n\n```\nUsage: custom-help [options]\n\nOptions:\n  -h, --help     output usage information\n  -V, --version  output the version number\n  -f, --foo      enable some foo\n  -b, --bar      enable some bar\n  -B, --baz      enable some baz\n\nExamples:\n  $ custom-help --help\n  $ custom-help -h\n```\n\n## .outputHelp(cb)\n\nOutput help information without exiting.\nOptional callback cb allows post-processing of help text before it is displayed.\n\nIf you want to display help by default (e.g. if no command was provided), you can use something like:\n\n```js\nvar program = require('commander');\nvar colors = require('colors');\n\nprogram\n  .version('0.1.0')\n  .command('getstream [url]', 'get stream URL')\n  .parse(process.argv);\n\nif (!process.argv.slice(2).length) {\n  program.outputHelp(make_red);\n}\n\nfunction make_red(txt) {\n  return colors.red(txt); //display the help text in red on the console\n}\n```\n\n## .helpOption(flags, description)\n\n  Override the default help flags and description.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n## .help(cb)\n\n  Output help information and exit immediately.\n  Optional callback cb allows post-processing of help text before it is displayed.\n\n\n## Custom event listeners\n You can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.verbose;\n});\n\n// error on unknown commands\nprogram.on('command:*', function () {\n  console.error('Invalid command: %s\\nSee --help for a list of available commands.', program.args.join(' '));\n  process.exit(1);\n});\n```\n\n## Bits and pieces\n\n### TypeScript\n\nThe Commander package includes its TypeScript Definition file, but also requires the node types which you need to install yourself. e.g.\n\n```bash\nnpm install commander\nnpm install --save-dev @types/node\n```\n\nIf you use `ts-node` and  git-style sub-commands written as `.ts` files, you need to call your program through node to get the sub-commands called correctly. e.g.\n\n```bash\nnode -r ts-node/register pm.ts\n```\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n* Use `#! /usr/bin/env node --harmony` in the sub-commands scripts. (Note Windows does not support this pattern.)\n* Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning sub-command process.\n\n### Node debugging\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) git-style executable (sub)commands using `node -inspect` et al,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\n## Examples\n\n```js\nvar program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-C, --chdir <path>', 'change the working directory')\n  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n  .option('-T, --no-tests', 'ignore test hook');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option(\"-s, --setup_mode [mode]\", \"Which setup mode to use\")\n  .action(function(env, options){\n    var mode = options.setup_mode || \"normal\";\n    env = env || 'all';\n    console.log('setup for %s env(s) with %s mode', env, mode);\n  });\n\nprogram\n  .command('exec <cmd>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option(\"-e, --exec_mode <mode>\", \"Which exec mode to use\")\n  .action(function(cmd, options){\n    console.log('exec \"%s\" using %s mode', cmd, options.exec_mode);\n  }).on('--help', function() {\n    console.log('');\n    console.log('Examples:');\n    console.log('');\n    console.log('  $ deploy exec sequential');\n    console.log('  $ deploy exec async');\n  });\n\nprogram\n  .command('*')\n  .action(function(env){\n    console.log('deploying \"%s\"', env);\n  });\n\nprogram.parse(process.argv);\n```\n\nMore Demos can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## License\n\n[MIT](https://github.com/tj/commander.js/blob/master/LICENSE)\n","typings":"typings/index.d.ts","readmeFilename":"Readme.md","gitHead":"f743bf456bbda392dbc4a106fc196bc9ef5c8b76","_nodeVersion":"10.16.0","_npmVersion":"6.10.2","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_3.0.0-0_1564195092083_0.9400991591327539"},"_hasShrinkwrap":false},"3.0.0":{"_id":"commander@3.0.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"3.0.0","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js","test":"node test/run.js && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/node":"^12.6.2","eslint":"^6.0.1","should":"^13.2.3","sinon":"^7.3.2","standard":"^13.0.1","ts-node":"^8.3.0","typescript":"^3.5.3"},"dependencies":{},"main":"index","dist":{"shasum":"0641ea00838c7a964627f04cddc336a2deddd60a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-3.0.0.tgz"},"typings":"typings/index.d.ts","gitHead":"3b0127b1906ff268d42640b59f106d283c810710","_nodeVersion":"12.7.0","_npmVersion":"6.10.2","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_3.0.0_1565311611336_0.30076989536927967"},"_hasShrinkwrap":false},"3.0.1":{"_id":"commander@3.0.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"3.0.1","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js","test":"node test/run.js && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/node":"^12.7.2","eslint":"^6.1.0","should":"^13.2.3","sinon":"^7.4.1","standard":"^13.1.0","ts-node":"^8.3.0","typescript":"^3.5.3"},"dependencies":{},"main":"index","dist":{"shasum":"4595aec3530525e671fb6f85fb173df8ff8bf57a","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-3.0.1.tgz"},"typings":"typings/index.d.ts","gitHead":"43123022cae2f01cc4cffe3eb44b5275e857a6d2","_nodeVersion":"12.7.0","_npmVersion":"6.10.2","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_3.0.1_1567155339276_0.5367414136318001"},"_hasShrinkwrap":false},"3.0.2":{"_id":"commander@3.0.2","name":"commander","description":"the complete solution for node.js command-line programs","version":"3.0.2","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js","test":"node test/run.js && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/node":"^12.7.8","eslint":"^6.4.0","should":"^13.2.3","sinon":"^7.5.0","standard":"^13.1.0","ts-node":"^8.4.1","typescript":"^3.6.3"},"dependencies":{},"main":"index","dist":{"shasum":"6837c3fb677ad9933d1cfba42dd14d5117d6b39e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-3.0.2.tgz"},"typings":"typings/index.d.ts","gitHead":"2544df81b478a4afe15560f27b3575aa3a1581c4","_nodeVersion":"12.10.0","_npmVersion":"6.11.3","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_3.0.2_1569489022766_0.9087751523372256"},"_hasShrinkwrap":false},"4.0.0-0":{"_id":"commander@4.0.0-0","name":"commander","description":"the complete solution for node.js command-line programs","version":"4.0.0-0","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/jest":"^24.0.18","@types/node":"^12.7.5","eslint":"^6.4.0","eslint-plugin-jest":"^22.17.0","jest":"^24.8.0","standard":"^14.3.1","ts-node":"^8.4.1","typescript":"^3.6.3"},"dependencies":{},"main":"index","dist":{"shasum":"f6bae309054b2e6c870189dcc2f51555c1a4c377","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-4.0.0-0.tgz"},"readme":"# Commander.js\n\n[![Build Status](https://api.travis-ci.org/tj/commander.js.svg?branch=master)](http://travis-ci.org/tj/commander.js)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby's [commander](https://github.com/commander-rb/commander).\n\n- [Commander.js](#commanderjs)\n  - [Installation](#installation)\n  - [Declaring _program_ variable](#declaring-program-variable)\n  - [Options](#options)\n    - [Common option types, boolean and value](#common-option-types-boolean-and-value)\n    - [Default option value](#default-option-value)\n    - [Other option types, negatable boolean and flag|value](#other-option-types-negatable-boolean-and-flagvalue)\n    - [Custom option processing](#custom-option-processing)\n    - [Version option](#version-option)\n  - [Commands](#commands)\n    - [Specify the argument syntax](#specify-the-argument-syntax)\n    - [Action handler (sub)commands](#action-handler-subcommands)\n    - [Git-style executable (sub)commands](#git-style-executable-subcommands)\n  - [Automated --help](#automated---help)\n    - [Custom help](#custom-help)\n    - [.usage and .name](#usage-and-name)\n    - [.outputHelp(cb)](#outputhelpcb)\n    - [.helpOption(flags, description)](#helpoptionflags-description)\n    - [.help(cb)](#helpcb)\n  - [Custom event listeners](#custom-event-listeners)\n  - [Bits and pieces](#bits-and-pieces)\n    - [TypeScript](#typescript)\n    - [Node options such as `--harmony`](#node-options-such-as---harmony)\n    - [Node debugging](#node-debugging)\n    - [Override exit handling](#override-exit-handling)\n  - [Examples](#examples)\n  - [License](#license)\n  - [Support](#support)\n\n## Installation\n\n```bash\nnpm install commander\n```\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\nconst program = require('commander');\nprogram.version('0.0.1');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n ```js\n const commander = require('commander');\n const program = new commander.Command();\n program.version('0.0.1');\n ```\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space.\n\nThe options can be accessed as properties on the Command object. Multi-word options such as \"--template-engine\" are camel-cased, becoming `program.templateEngine` etc. Multiple short flags may be combined as a single arg, for example `-abc` is equivalent to `-a -b -c`.\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean flag, and an option which takes a value (declared using angle brackets). Both are `undefined` unless specified on command line.\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nif (program.debug) console.log(program.opts());\nconsole.log('pizza details:');\nif (program.small) console.log('- small pizza size');\nif (program.pizzaType) console.log(`- ${program.pizzaType}`);\n```\n\n```bash\n$ pizza-options -d\n{ debug: true, small: undefined, pizzaType: undefined }\npizza details:\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -ds -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the options as the `program.args` array.\n\n### Default option value\n\nYou can specify a default value for an option which takes a value.\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse(process.argv);\n\nconsole.log(`cheese: ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and flag|value\n\nYou can specify a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be. You can specify a default boolean value for a boolean flag and it can be overridden on command line.\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse(process.argv);\n\nconst sauceStr = program.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (program.cheese === false) ? 'no cheese' : `${program.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```bash\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which functions as a flag but may also take a value (declared using square brackets).\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nif (program.cheese === undefined) console.log('no cheese');\nelse if (program.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option values. The callback function receives two parameters, the user specified value and the\nprevious value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option value to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function.\n\n```js\nconst program = require('commander');\n\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and an optional radix\n  return parseInt(value);\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse(process.argv);\n\nif (program.float !== undefined) console.log(`float: ${program.float}`);\nif (program.integer !== undefined) console.log(`integer: ${program.integer}`);\nif (program.verbose > 0) console.log(`verbosity: ${program.verbose}`);\nif (program.collect.length > 0) console.log(program.collect);\nif (program.list !== undefined) console.log(program.list);\n```\n\n```bash\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```bash\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method. The version flags can be named anything, but a long name is required.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n## Commands\n\nYou can specify (sub)commands for your top-level command using `.command`. There are two ways these can be implemented: using an action handler attached to the command, or as a separate executable file (described in more detail later). In the first parameter to `.command` you specify the command name and any command arguments. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using separate executable file (description is second parameter to `.command`)\n// Returns top-level command for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n```\n\n### Specify the argument syntax\n\nYou use `.arguments` to specify the arguments for the top-level command, and for subcommands they are included in the `.command` call. Angled brackets (e.g. `<required>`) indicate required input. Square brackets (e.g. `[optional]`) indicate optional input.\n\n```js\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .arguments('<cmd> [env]')\n  .action(function (cmd, env) {\n    cmdValue = cmd;\n    envValue = env;\n  });\n\nprogram.parse(process.argv);\n\nif (typeof cmdValue === 'undefined') {\n  console.error('no command given!');\n  process.exit(1);\n}\nconsole.log('command:', cmdValue);\nconsole.log('environment:', envValue || \"no environment given\");\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. For example:\n\n```js\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('rmdir <dir> [otherDirs...]')\n  .action(function (dir, otherDirs) {\n    console.log('rmdir %s', dir);\n    if (otherDirs) {\n      otherDirs.forEach(function (oDir) {\n        console.log('rmdir %s', oDir);\n      });\n    }\n  });\n\nprogram.parse(process.argv);\n```\n\nThe variadic argument is passed to the action handler as an array. (And this also applies to `program.args`.)\n\n### Action handler (sub)commands\n\nYou can add options to a command that uses an action handler.\nThe action handler gets passed a parameter for each argument you declared, and one additional argument which is the\ncommand object itself. This command argument has the values for the command-specific options added as properties.\n\n```js\nconst program = require('commander');\n\nprogram\n  .command('rm <dir>')\n  .option('-r, --recursive', 'Remove recursively')\n  .action(function (dir, cmdObj) {\n    console.log('remove ' + dir + (cmdObj.recursive ? ' recursively' : ''))\n  })\n\nprogram.parse(process.argv)\n```\n\nA command's options on the command line are validated when the command is used. Any unknown options will be reported as an error. However, if an action-based command does not define an action, then the options are not validated.\n\nConfiguration options can be passed with the call to `.command()`. Specifying `true` for `opts.noHelp` will remove the command from the generated help output.\n\n### Git-style executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells commander that you're going to use separate executables for sub-commands, much like `git(1)` and other popular tools.\nCommander will search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-subcommand`, like `pm-install`, `pm-search`.\nYou can specify a custom name with the `executableFile` configuration option.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\n```js\n// file: ./examples/pm\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', {executableFile: 'myUpdateSubCommand'})\n  .command('list', 'list packages installed', {isDefault: true})\n  .parse(process.argv);\n```\n\nConfiguration options can be passed with the call to `.command()`. Specifying `true` for `opts.noHelp` will remove the command from the generated help output. Specifying `true` for `opts.isDefault` will run the subcommand if no other subcommand is specified.\nSpecifying a name with `executableFile` will override the default constructed name.\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n## Automated --help\n\n The help information is auto-generated based on the information commander already knows about your program, so the following `--help` info is for free:\n\n```bash\n$ ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizzas ordering\n\nOptions:\n  -V, --version        output the version number\n  -p, --peppers        Add peppers\n  -P, --pineapple      Add pineapple\n  -b, --bbq            Add bbq sauce\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           output usage information\n```\n\n### Custom help\n\n You can display arbitrary `-h, --help` information\n by listening for \"--help\". Commander will automatically\n exit once you are done so that the remainder of your program\n does not execute causing undesired behaviors, for example\n in the following executable \"stuff\" will not output when\n `--help` is used.\n\n```js\n#!/usr/bin/env node\n\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-f, --foo', 'enable some foo')\n  .option('-b, --bar', 'enable some bar')\n  .option('-B, --baz', 'enable some baz');\n\n// must be before .parse() since\n// node's emit() is immediate\n\nprogram.on('--help', function(){\n  console.log('')\n  console.log('Examples:');\n  console.log('  $ custom-help --help');\n  console.log('  $ custom-help -h');\n});\n\nprogram.parse(process.argv);\n\nconsole.log('stuff');\n```\n\nYields the following help output when `node script-name.js -h` or `node script-name.js --help` are run:\n\n```Text\nUsage: custom-help [options]\n\nOptions:\n  -h, --help     output usage information\n  -V, --version  output the version number\n  -f, --foo      enable some foo\n  -b, --bar      enable some bar\n  -B, --baz      enable some baz\n\nExamples:\n  $ custom-help --help\n  $ custom-help -h\n```\n\n### .usage and .name\n\nThese allow you to customise the usage description in the first line of the help. The name is otherwise\ndeduced from the (full) program arguments. Given:\n\n```js\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n```\n\nThe help will start with:\n\n```Text\nUsage: my-command [global options] command\n```\n\n### .outputHelp(cb)\n\nOutput help information without exiting.\nOptional callback cb allows post-processing of help text before it is displayed.\n\nIf you want to display help by default (e.g. if no command was provided), you can use something like:\n\n```js\nconst program = require('commander');\nconst colors = require('colors');\n\nprogram\n  .version('0.1.0')\n  .command('getstream [url]', 'get stream URL')\n  .parse(process.argv);\n\nif (!process.argv.slice(2).length) {\n  program.outputHelp(make_red);\n}\n\nfunction make_red(txt) {\n  return colors.red(txt); //display the help text in red on the console\n}\n```\n\n### .helpOption(flags, description)\n\n  Override the default help flags and description.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n### .help(cb)\n\n  Output help information and exit immediately.\n  Optional callback cb allows post-processing of help text before it is displayed.\n\n## Custom event listeners\n\n You can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.verbose;\n});\n\n// error on unknown commands\nprogram.on('command:*', function () {\n  console.error('Invalid command: %s\\nSee --help for a list of available commands.', program.args.join(' '));\n  process.exit(1);\n});\n```\n\n## Bits and pieces\n\n### TypeScript\n\nThe Commander package includes its TypeScript Definition file, but also requires the node types which you need to install yourself. e.g.\n\n```bash\nnpm install commander\nnpm install --save-dev @types/node\n```\n\nIf you use `ts-node` and  git-style sub-commands written as `.ts` files, you need to call your program through node to get the sub-commands called correctly. e.g.\n\n```bash\nnode -r ts-node/register pm.ts\n```\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n\n- Use `#! /usr/bin/env node --harmony` in the sub-commands scripts. (Note Windows does not support this pattern.)\n- Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning sub-command process.\n\n### Node debugging\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) git-style executable (sub)commands using `node --inspect` et al,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\n### Override exit handling\n\nBy default Commander calls `process.exit` when it detects errors, or after displaying the help or version. You can override\nthis behaviour and optionally supply a callback. The default override throws a `CommanderError`.\n\nThe override callback is passed a `CommanderError` with properties `exitCode` number, `code` string, and `message`. The default override behaviour is to throw the error, except for async handling of executable subcommand completion which carries on. The normal display of error messages or version or help\nis not affected by the override which is called after the display.\n\n``` js\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // custom processing...\n}\n```\n\n## Examples\n\n```js\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-C, --chdir <path>', 'change the working directory')\n  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n  .option('-T, --no-tests', 'ignore test hook');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option(\"-s, --setup_mode [mode]\", \"Which setup mode to use\")\n  .action(function(env, options){\n    const mode = options.setup_mode || \"normal\";\n    env = env || 'all';\n    console.log('setup for %s env(s) with %s mode', env, mode);\n  });\n\nprogram\n  .command('exec <cmd>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option(\"-e, --exec_mode <mode>\", \"Which exec mode to use\")\n  .action(function(cmd, options){\n    console.log('exec \"%s\" using %s mode', cmd, options.exec_mode);\n  }).on('--help', function() {\n    console.log('');\n    console.log('Examples:');\n    console.log('');\n    console.log('  $ deploy exec sequential');\n    console.log('  $ deploy exec async');\n  });\n\nprogram\n  .command('*')\n  .action(function(env){\n    console.log('deploying \"%s\"', env);\n  });\n\nprogram.parse(process.argv);\n```\n\nMore Demos can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## License\n\n[MIT](https://github.com/tj/commander.js/blob/master/LICENSE)\n\n## Support\n\nCommander is supported on Node 8 and above. (Commander is likely to still work on older versions of Node, but is not tested below Node 8.)\n\nThe main forum for free and community support is the project [Issues](https://github.com/tj/commander.js/issues) on GitHub.\n\n[Professionally supported commander is now available](https://tidelift.com/subscription/pkg/npm-commander?utm_source=npm-commander&utm_medium=referral&utm_campaign=readme)\n\nTidelift gives software development teams a single source for purchasing and maintaining their software, with professional grade assurances from the experts who know it best, while seamlessly integrating with existing tools.\n","typings":"typings/index.d.ts","readmeFilename":"Readme.md","gitHead":"400e6afd493c8ebf59cf54174bb80b123aa27138","_nodeVersion":"10.16.3","_npmVersion":"6.11.3","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_4.0.0-0_1569919184426_0.4993958331925179"},"_hasShrinkwrap":false},"4.0.0-1":{"_id":"commander@4.0.0-1","name":"commander","description":"the complete solution for node.js command-line programs","version":"4.0.0-1","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/jest":"^24.0.18","@types/node":"^12.7.5","eslint":"^6.4.0","eslint-plugin-jest":"^22.17.0","jest":"^24.8.0","standard":"^14.3.1","ts-node":"^8.4.1","typescript":"^3.6.3"},"dependencies":{},"main":"index","dist":{"shasum":"cc00f6d884cc492aac3fe3b32ff36e5f46cd67d4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-4.0.0-1.tgz"},"readme":"# Commander.js\n\n[![Build Status](https://api.travis-ci.org/tj/commander.js.svg?branch=master)](http://travis-ci.org/tj/commander.js)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby's [commander](https://github.com/commander-rb/commander).\n\n- [Commander.js](#commanderjs)\n  - [Installation](#installation)\n  - [Declaring _program_ variable](#declaring-program-variable)\n  - [Options](#options)\n    - [Common option types, boolean and value](#common-option-types-boolean-and-value)\n    - [Default option value](#default-option-value)\n    - [Other option types, negatable boolean and flag|value](#other-option-types-negatable-boolean-and-flagvalue)\n    - [Custom option processing](#custom-option-processing)\n    - [Required option](#required-option)\n    - [Version option](#version-option)\n  - [Commands](#commands)\n    - [Specify the argument syntax](#specify-the-argument-syntax)\n    - [Action handler (sub)commands](#action-handler-subcommands)\n    - [Git-style executable (sub)commands](#git-style-executable-subcommands)\n  - [Automated --help](#automated---help)\n    - [Custom help](#custom-help)\n    - [.usage and .name](#usage-and-name)\n    - [.outputHelp(cb)](#outputhelpcb)\n    - [.helpOption(flags, description)](#helpoptionflags-description)\n    - [.help(cb)](#helpcb)\n  - [Custom event listeners](#custom-event-listeners)\n  - [Bits and pieces](#bits-and-pieces)\n    - [TypeScript](#typescript)\n    - [Node options such as `--harmony`](#node-options-such-as---harmony)\n    - [Node debugging](#node-debugging)\n    - [Override exit handling](#override-exit-handling)\n  - [Examples](#examples)\n  - [License](#license)\n  - [Support](#support)\n\n## Installation\n\n```bash\nnpm install commander\n```\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\nconst program = require('commander');\nprogram.version('0.0.1');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n ```js\n const commander = require('commander');\n const program = new commander.Command();\n program.version('0.0.1');\n ```\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space.\n\nThe options can be accessed as properties on the Command object. Multi-word options such as \"--template-engine\" are camel-cased, becoming `program.templateEngine` etc. Multiple short flags may be combined as a single arg, for example `-abc` is equivalent to `-a -b -c`.\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean flag, and an option which takes a value (declared using angle brackets). Both are `undefined` unless specified on command line.\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nif (program.debug) console.log(program.opts());\nconsole.log('pizza details:');\nif (program.small) console.log('- small pizza size');\nif (program.pizzaType) console.log(`- ${program.pizzaType}`);\n```\n\n```bash\n$ pizza-options -d\n{ debug: true, small: undefined, pizzaType: undefined }\npizza details:\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -ds -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the options as the `program.args` array.\n\n### Default option value\n\nYou can specify a default value for an option which takes a value.\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse(process.argv);\n\nconsole.log(`cheese: ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and flag|value\n\nYou can specify a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be. You can specify a default boolean value for a boolean flag and it can be overridden on command line.\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse(process.argv);\n\nconst sauceStr = program.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (program.cheese === false) ? 'no cheese' : `${program.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```bash\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which functions as a flag but may also take a value (declared using square brackets).\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nif (program.cheese === undefined) console.log('no cheese');\nelse if (program.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option values. The callback function receives two parameters, the user specified value and the\nprevious value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option value to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function.\n\n```js\nconst program = require('commander');\n\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and an optional radix\n  return parseInt(value);\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse(process.argv);\n\nif (program.float !== undefined) console.log(`float: ${program.float}`);\nif (program.integer !== undefined) console.log(`integer: ${program.integer}`);\nif (program.verbose > 0) console.log(`verbosity: ${program.verbose}`);\nif (program.collect.length > 0) console.log(program.collect);\nif (program.list !== undefined) console.log(program.list);\n```\n\n```bash\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n### Required option\n\nYou may specify a required (mandatory) option using `.requiredOption`. The option must be specified on the command line, or by having a default value. The method is otherwise the same as `.option` in format, taking flags and description, and optional default value or custom processing.\n\n```js\nconst program = require('commander');\n\nprogram\n  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse(process.argv);\n```\n\n```\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n```\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```bash\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method. The version flags can be named anything, but a long name is required.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n## Commands\n\nYou can specify (sub)commands for your top-level command using `.command`. There are two ways these can be implemented: using an action handler attached to the command, or as a separate executable file (described in more detail later). In the first parameter to `.command` you specify the command name and any command arguments. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using separate executable file (description is second parameter to `.command`)\n// Returns top-level command for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n```\n\n### Specify the argument syntax\n\nYou use `.arguments` to specify the arguments for the top-level command, and for subcommands they are included in the `.command` call. Angled brackets (e.g. `<required>`) indicate required input. Square brackets (e.g. `[optional]`) indicate optional input.\n\n```js\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .arguments('<cmd> [env]')\n  .action(function (cmd, env) {\n    cmdValue = cmd;\n    envValue = env;\n  });\n\nprogram.parse(process.argv);\n\nif (typeof cmdValue === 'undefined') {\n  console.error('no command given!');\n  process.exit(1);\n}\nconsole.log('command:', cmdValue);\nconsole.log('environment:', envValue || \"no environment given\");\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. For example:\n\n```js\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('rmdir <dir> [otherDirs...]')\n  .action(function (dir, otherDirs) {\n    console.log('rmdir %s', dir);\n    if (otherDirs) {\n      otherDirs.forEach(function (oDir) {\n        console.log('rmdir %s', oDir);\n      });\n    }\n  });\n\nprogram.parse(process.argv);\n```\n\nThe variadic argument is passed to the action handler as an array. (And this also applies to `program.args`.)\n\n### Action handler (sub)commands\n\nYou can add options to a command that uses an action handler.\nThe action handler gets passed a parameter for each argument you declared, and one additional argument which is the\ncommand object itself. This command argument has the values for the command-specific options added as properties.\n\n```js\nconst program = require('commander');\n\nprogram\n  .command('rm <dir>')\n  .option('-r, --recursive', 'Remove recursively')\n  .action(function (dir, cmdObj) {\n    console.log('remove ' + dir + (cmdObj.recursive ? ' recursively' : ''))\n  })\n\nprogram.parse(process.argv)\n```\n\nA command's options on the command line are validated when the command is used. Any unknown options will be reported as an error. However, if an action-based command does not define an action, then the options are not validated.\n\nConfiguration options can be passed with the call to `.command()`. Specifying `true` for `opts.noHelp` will remove the command from the generated help output.\n\n### Git-style executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells commander that you're going to use separate executables for sub-commands, much like `git(1)` and other popular tools.\nCommander will search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-subcommand`, like `pm-install`, `pm-search`.\nYou can specify a custom name with the `executableFile` configuration option.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\n```js\n// file: ./examples/pm\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', {executableFile: 'myUpdateSubCommand'})\n  .command('list', 'list packages installed', {isDefault: true})\n  .parse(process.argv);\n```\n\nConfiguration options can be passed with the call to `.command()`. Specifying `true` for `opts.noHelp` will remove the command from the generated help output. Specifying `true` for `opts.isDefault` will run the subcommand if no other subcommand is specified.\nSpecifying a name with `executableFile` will override the default constructed name.\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n## Automated --help\n\n The help information is auto-generated based on the information commander already knows about your program, so the following `--help` info is for free:\n\n```bash\n$ ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizzas ordering\n\nOptions:\n  -V, --version        output the version number\n  -p, --peppers        Add peppers\n  -P, --pineapple      Add pineapple\n  -b, --bbq            Add bbq sauce\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           output usage information\n```\n\n### Custom help\n\n You can display arbitrary `-h, --help` information\n by listening for \"--help\". Commander will automatically\n exit once you are done so that the remainder of your program\n does not execute causing undesired behaviors, for example\n in the following executable \"stuff\" will not output when\n `--help` is used.\n\n```js\n#!/usr/bin/env node\n\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-f, --foo', 'enable some foo')\n  .option('-b, --bar', 'enable some bar')\n  .option('-B, --baz', 'enable some baz');\n\n// must be before .parse() since\n// node's emit() is immediate\n\nprogram.on('--help', function(){\n  console.log('')\n  console.log('Examples:');\n  console.log('  $ custom-help --help');\n  console.log('  $ custom-help -h');\n});\n\nprogram.parse(process.argv);\n\nconsole.log('stuff');\n```\n\nYields the following help output when `node script-name.js -h` or `node script-name.js --help` are run:\n\n```Text\nUsage: custom-help [options]\n\nOptions:\n  -h, --help     output usage information\n  -V, --version  output the version number\n  -f, --foo      enable some foo\n  -b, --bar      enable some bar\n  -B, --baz      enable some baz\n\nExamples:\n  $ custom-help --help\n  $ custom-help -h\n```\n\n### .usage and .name\n\nThese allow you to customise the usage description in the first line of the help. The name is otherwise\ndeduced from the (full) program arguments. Given:\n\n```js\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n```\n\nThe help will start with:\n\n```Text\nUsage: my-command [global options] command\n```\n\n### .outputHelp(cb)\n\nOutput help information without exiting.\nOptional callback cb allows post-processing of help text before it is displayed.\n\nIf you want to display help by default (e.g. if no command was provided), you can use something like:\n\n```js\nconst program = require('commander');\nconst colors = require('colors');\n\nprogram\n  .version('0.1.0')\n  .command('getstream [url]', 'get stream URL')\n  .parse(process.argv);\n\nif (!process.argv.slice(2).length) {\n  program.outputHelp(make_red);\n}\n\nfunction make_red(txt) {\n  return colors.red(txt); //display the help text in red on the console\n}\n```\n\n### .helpOption(flags, description)\n\n  Override the default help flags and description.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n### .help(cb)\n\n  Output help information and exit immediately.\n  Optional callback cb allows post-processing of help text before it is displayed.\n\n## Custom event listeners\n\n You can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.verbose;\n});\n\n// error on unknown commands\nprogram.on('command:*', function () {\n  console.error('Invalid command: %s\\nSee --help for a list of available commands.', program.args.join(' '));\n  process.exit(1);\n});\n```\n\n## Bits and pieces\n\n### TypeScript\n\nThe Commander package includes its TypeScript Definition file, but also requires the node types which you need to install yourself. e.g.\n\n```bash\nnpm install commander\nnpm install --save-dev @types/node\n```\n\nIf you use `ts-node` and  git-style sub-commands written as `.ts` files, you need to call your program through node to get the sub-commands called correctly. e.g.\n\n```bash\nnode -r ts-node/register pm.ts\n```\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n\n- Use `#! /usr/bin/env node --harmony` in the sub-commands scripts. (Note Windows does not support this pattern.)\n- Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning sub-command process.\n\n### Node debugging\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) git-style executable (sub)commands using `node --inspect` et al,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\n### Override exit handling\n\nBy default Commander calls `process.exit` when it detects errors, or after displaying the help or version. You can override\nthis behaviour and optionally supply a callback. The default override throws a `CommanderError`.\n\nThe override callback is passed a `CommanderError` with properties `exitCode` number, `code` string, and `message`. The default override behaviour is to throw the error, except for async handling of executable subcommand completion which carries on. The normal display of error messages or version or help\nis not affected by the override which is called after the display.\n\n``` js\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // custom processing...\n}\n```\n\n## Examples\n\n```js\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-C, --chdir <path>', 'change the working directory')\n  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n  .option('-T, --no-tests', 'ignore test hook');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option(\"-s, --setup_mode [mode]\", \"Which setup mode to use\")\n  .action(function(env, options){\n    const mode = options.setup_mode || \"normal\";\n    env = env || 'all';\n    console.log('setup for %s env(s) with %s mode', env, mode);\n  });\n\nprogram\n  .command('exec <cmd>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option(\"-e, --exec_mode <mode>\", \"Which exec mode to use\")\n  .action(function(cmd, options){\n    console.log('exec \"%s\" using %s mode', cmd, options.exec_mode);\n  }).on('--help', function() {\n    console.log('');\n    console.log('Examples:');\n    console.log('');\n    console.log('  $ deploy exec sequential');\n    console.log('  $ deploy exec async');\n  });\n\nprogram\n  .command('*')\n  .action(function(env){\n    console.log('deploying \"%s\"', env);\n  });\n\nprogram.parse(process.argv);\n```\n\nMore Demos can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## License\n\n[MIT](https://github.com/tj/commander.js/blob/master/LICENSE)\n\n## Support\n\nCommander is supported on Node 8 and above. (Commander is likely to still work on older versions of Node, but is not tested below Node 8.)\n\nThe main forum for free and community support is the project [Issues](https://github.com/tj/commander.js/issues) on GitHub.\n\n[Professionally supported commander is now available](https://tidelift.com/subscription/pkg/npm-commander?utm_source=npm-commander&utm_medium=referral&utm_campaign=readme)\n\nTidelift gives software development teams a single source for purchasing and maintaining their software, with professional grade assurances from the experts who know it best, while seamlessly integrating with existing tools.\n","typings":"typings/index.d.ts","gitHead":"e9929fb8c83ab8cd654167f02d027c041f295d69","readmeFilename":"Readme.md","_nodeVersion":"10.16.3","_npmVersion":"6.11.3","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_4.0.0-1_1570498071630_0.1486698540389535"},"_hasShrinkwrap":false},"4.0.0":{"_id":"commander@4.0.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"4.0.0","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/jest":"^24.0.18","@types/node":"^12.7.5","eslint":"^6.4.0","eslint-plugin-jest":"^22.17.0","jest":"^24.8.0","standard":"^14.3.1","ts-node":"^8.4.1","typescript":"^3.6.3"},"dependencies":{},"engines":{"node":">= 6"},"main":"index","dist":{"shasum":"e782b6afe6a0f1b1408be59429919e1305160e3f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-4.0.0.tgz"},"typings":"typings/index.d.ts","gitHead":"f0315b892d0425dcb8589d19a8ef61c2f965071e","_nodeVersion":"12.13.0","_npmVersion":"6.12.1","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_4.0.0_1572602947069_0.7900930790476839"},"_hasShrinkwrap":false},"4.0.1":{"_id":"commander@4.0.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"4.0.1","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/jest":"^24.0.18","@types/node":"^12.7.5","eslint":"^6.4.0","eslint-plugin-jest":"^22.17.0","jest":"^24.8.0","standard":"^14.3.1","ts-node":"^8.4.1","typescript":"^3.6.3"},"dependencies":{},"engines":{"node":">= 6"},"main":"index","dist":{"shasum":"b67622721785993182e807f4883633e6401ba53c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-4.0.1.tgz"},"typings":"typings/index.d.ts","gitHead":"5083e1463ef4a7d91e42d430965246a7a80439a0","_nodeVersion":"12.11.1","_npmVersion":"6.12.0","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_4.0.1_1573463913792_0.883424062108114"},"_hasShrinkwrap":false},"4.1.0":{"_id":"commander@4.1.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"4.1.0","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/jest":"^24.0.23","@types/node":"^12.12.11","eslint":"^6.7.0","eslint-plugin-jest":"^22.21.0","jest":"^24.8.0","standard":"^14.3.1","typescript":"^3.7.2"},"dependencies":{},"engines":{"node":">= 6"},"main":"index","dist":{"shasum":"545983a0603fe425bc672d66c9e3c89c42121a83","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-4.1.0.tgz"},"typings":"typings/index.d.ts","gitHead":"8e1cdf5405b1e67359ca7613ff3c6ed81714b181","_nodeVersion":"13.5.0","_npmVersion":"6.13.4","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_4.1.0_1578302212096_0.5951093748080849"},"_hasShrinkwrap":false},"4.1.1":{"_id":"commander@4.1.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"4.1.1","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/jest":"^24.0.23","@types/node":"^12.12.11","eslint":"^6.7.0","eslint-plugin-jest":"^22.21.0","jest":"^24.8.0","standard":"^14.3.1","typescript":"^3.7.2"},"dependencies":{},"engines":{"node":">= 6"},"main":"index","dist":{"shasum":"9fd602bd936294e9e9ef46a3f4d6964044b18068","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-4.1.1.tgz"},"typings":"typings/index.d.ts","gitHead":"d5186ba4b9b64a72cd685fccbb9ec5d0ec0c430d","_nodeVersion":"12.14.1","_npmVersion":"6.13.7","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_4.1.1_1580710556739_0.7541163312659649"},"_hasShrinkwrap":false},"5.0.0-0":{"_id":"commander@5.0.0-0","name":"commander","description":"the complete solution for node.js command-line programs","version":"5.0.0-0","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/jest":"^24.0.23","@types/node":"^12.12.11","eslint":"^6.7.0","eslint-plugin-jest":"^22.21.0","jest":"^24.8.0","standard":"^14.3.1","typescript":"^3.7.2"},"dependencies":{},"engines":{"node":">= 6"},"main":"index","dist":{"shasum":"22c4588cb45740cbaa27bf8163f2327a2c126a75","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-5.0.0-0.tgz"},"readme":"# Commander.js\n\n[![Build Status](https://api.travis-ci.org/tj/commander.js.svg?branch=master)](http://travis-ci.org/tj/commander.js)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby's [commander](https://github.com/commander-rb/commander).\n\nRead this in other languages: English | [简体中文](./Readme_zh-CN.md)\n\n- [Commander.js](#commanderjs)\n  - [Installation](#installation)\n  - [Declaring _program_ variable](#declaring-program-variable)\n  - [Options](#options)\n    - [Common option types, boolean and value](#common-option-types-boolean-and-value)\n    - [Default option value](#default-option-value)\n    - [Other option types, negatable boolean and flag|value](#other-option-types-negatable-boolean-and-flagvalue)\n    - [Custom option processing](#custom-option-processing)\n    - [Required option](#required-option)\n    - [Version option](#version-option)\n  - [Commands](#commands)\n    - [Specify the argument syntax](#specify-the-argument-syntax)\n    - [Action handler (sub)commands](#action-handler-subcommands)\n    - [Git-style executable (sub)commands](#git-style-executable-subcommands)\n  - [Automated help](#automated-help)\n    - [Custom help](#custom-help)\n    - [.usage and .name](#usage-and-name)\n    - [.outputHelp(cb)](#outputhelpcb)\n    - [.helpOption(flags, description)](#helpoptionflags-description)\n    - [.addHelpCommand()](#addhelpcommand)\n    - [.help(cb)](#helpcb)\n  - [Custom event listeners](#custom-event-listeners)\n  - [Bits and pieces](#bits-and-pieces)\n    - [Avoiding option name clashes](#avoiding-option-name-clashes)\n    - [TypeScript](#typescript)\n    - [Node options such as `--harmony`](#node-options-such-as---harmony)\n    - [Node debugging](#node-debugging)\n    - [Override exit handling](#override-exit-handling)\n  - [Examples](#examples)\n  - [License](#license)\n  - [Support](#support)\n    - [Commander for enterprise](#commander-for-enterprise)\n\n## Installation\n\n```bash\nnpm install commander\n```\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\nconst program = require('commander');\nprogram.version('0.0.1');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n ```js\n const commander = require('commander');\n const program = new commander.Command();\n program.version('0.0.1');\n ```\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space or vertical bar ('|').\n\nThe options can be accessed as properties on the Command object. Multi-word options such as \"--template-engine\" are camel-cased, becoming `program.templateEngine` etc. See also optional new behaviour to [avoid name clashes](#avoiding-option-name-clashes).\n\nMultiple short flags may optionally be combined in a single argument following the dash: boolean flags, the last flag may take a value, and the value.\nFor example `-a -b -p 80` may be written as `-ab -p80` or even `-abp80`.\n\nYou can use `--` to indicate the end of the options, and any remaining arguments will be used without being interpreted.\nThis is particularly useful for passing options through to another\ncommand, like: `do -- git --version`.\n\nOptions on the command line are not positional, and can be specified before or after other command arguments.\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean flag, and an option which takes a value (declared using angle brackets). Both are `undefined` unless specified on command line.\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nif (program.debug) console.log(program.opts());\nconsole.log('pizza details:');\nif (program.small) console.log('- small pizza size');\nif (program.pizzaType) console.log(`- ${program.pizzaType}`);\n```\n\n```bash\n$ pizza-options -d\n{ debug: true, small: undefined, pizzaType: undefined }\npizza details:\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -ds -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the program options in the `program.args` array.\n\n### Default option value\n\nYou can specify a default value for an option which takes a value.\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse(process.argv);\n\nconsole.log(`cheese: ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and flag|value\n\nYou can specify a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be. You can specify a default boolean value for a boolean flag and it can be overridden on command line.\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse(process.argv);\n\nconst sauceStr = program.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (program.cheese === false) ? 'no cheese' : `${program.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```bash\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which functions as a flag but may also take a value (declared using square brackets).\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nif (program.cheese === undefined) console.log('no cheese');\nelse if (program.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option values. The callback function receives two parameters, the user specified value and the\nprevious value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option value to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function.\n\n```js\nconst program = require('commander');\n\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and an optional radix\n  return parseInt(value);\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse(process.argv);\n\nif (program.float !== undefined) console.log(`float: ${program.float}`);\nif (program.integer !== undefined) console.log(`integer: ${program.integer}`);\nif (program.verbose > 0) console.log(`verbosity: ${program.verbose}`);\nif (program.collect.length > 0) console.log(program.collect);\nif (program.list !== undefined) console.log(program.list);\n```\n\n```bash\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n### Required option\n\nYou may specify a required (mandatory) option using `.requiredOption`. The option must have a value after parsing, usually specified on the command line, or perhaps from a default value (say from environment). The method is otherwise the same as `.option` in format, taking flags and description, and optional default value or custom processing.\n\n```js\nconst program = require('commander');\n\nprogram\n  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse(process.argv);\n```\n\n```bash\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n```\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```bash\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method. The version flags can be named anything, but a long name is required.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n## Commands\n\nYou can specify (sub)commands for your top-level command using `.command()` or `.addCommand()`. There are two ways these can be implemented: using an action handler attached to the command, or as a separate executable file (described in more detail later). The subcommands may be nested ([example](./examples/nestedCommands.js)).\n\nIn the first parameter to `.command()` you specify the command name and any command arguments. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nYou can use `.addCommand()` to add an already configured subcommand to the program.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using separate executable file (description is second parameter to `.command`)\n// Returns top-level command for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n\n// Command prepared separately.\n// Returns top-level command for adding more commands.\nprogram\n  .addCommand(build.makeBuildCommand());\n```\n\nConfiguration options can be passed with the call to `.command()`. Specifying `true` for `opts.noHelp` will remove the command from the generated help output. Specifying `true` for `opts.isDefault` will run the subcommand if no other subcommand is specified ([example](./examples/defaultCommand.js)).\n\n### Specify the argument syntax\n\nYou use `.arguments` to specify the arguments for the top-level command, and for subcommands they are included in the `.command` call. Angled brackets (e.g. `<required>`) indicate required input. Square brackets (e.g. `[optional]`) indicate optional input.\n\n```js\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .arguments('<cmd> [env]')\n  .action(function (cmd, env) {\n    cmdValue = cmd;\n    envValue = env;\n  });\n\nprogram.parse(process.argv);\n\nif (typeof cmdValue === 'undefined') {\n  console.error('no command given!');\n  process.exit(1);\n}\nconsole.log('command:', cmdValue);\nconsole.log('environment:', envValue || \"no environment given\");\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. For example:\n\n```js\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('rmdir <dir> [otherDirs...]')\n  .action(function (dir, otherDirs) {\n    console.log('rmdir %s', dir);\n    if (otherDirs) {\n      otherDirs.forEach(function (oDir) {\n        console.log('rmdir %s', oDir);\n      });\n    }\n  });\n\nprogram.parse(process.argv);\n```\n\nThe variadic argument is passed to the action handler as an array.\n\n### Action handler (sub)commands\n\nYou can add options to a command that uses an action handler.\nThe action handler gets passed a parameter for each argument you declared, and one additional argument which is the\ncommand object itself. This command argument has the values for the command-specific options added as properties.\n\n```js\nconst program = require('commander');\n\nprogram\n  .command('rm <dir>')\n  .option('-r, --recursive', 'Remove recursively')\n  .action(function (dir, cmdObj) {\n    console.log('remove ' + dir + (cmdObj.recursive ? ' recursively' : ''))\n  })\n\nprogram.parse(process.argv)\n```\n\nYou may supply an `async` action handler, in which case you call `.parseAsync` rather than `.parse`.\n\n```js\nasync function run() { /* code goes here */ }\n\nasync function main() {\n  program\n    .command('run')\n    .action(run);\n  await program.parseAsync(process.argv);\n}\n```\n\nA command's options on the command line are validated when the command is used. Any unknown options will be reported as an error.\n\n### Git-style executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells commander that you're going to use separate executables for sub-commands, much like `git` and other popular tools.\nCommander will search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-subcommand`, like `pm-install`, `pm-search`.\nYou can specify a custom name with the `executableFile` configuration option.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\n```js\n// file: ./examples/pm\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', {executableFile: 'myUpdateSubCommand'})\n  .command('list', 'list packages installed', {isDefault: true})\n  .parse(process.argv);\n```\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n## Automated help\n\n The help information is auto-generated based on the information commander already knows about your program. The default\n help option is `-h,--help`.\n\n```bash\n$ ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizzas ordering\n\nOptions:\n  -V, --version        output the version number\n  -p, --peppers        Add peppers\n  -P, --pineapple      Add pineapple\n  -b, --bbq            Add bbq sauce\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           display help for command\n```\n\nA `help` command is added by default if your command has subcommands. It can be used alone, or with a subcommand name to show\nfurther help for the subcommand. These are effectively the same if the `shell` program has implicit help:\n\n```bash\nshell help\nshell --help\n\nshell help spawn\nshell spawn --help\n```\n\n### Custom help\n\n You can display extra `-h, --help` information\n by listening for \"--help\". Commander will automatically\n exit after displaying the help.\n\n```js\n#!/usr/bin/env node\n\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-f, --foo', 'enable some foo')\n  .option('-b, --bar', 'enable some bar')\n  .option('-B, --baz', 'enable some baz');\n\n// must be before .parse()\nprogram.on('--help', function(){\n  console.log('')\n  console.log('Examples:');\n  console.log('  $ custom-help --help');\n  console.log('  $ custom-help -h');\n});\n\nprogram.parse(process.argv);\n\nconsole.log('stuff');\n```\n\nYields the following help output when `node script-name.js -h` or `node script-name.js --help` are run:\n\n```Text\nUsage: custom-help [options]\n\nOptions:\n  -V, --version  output the version number\n  -f, --foo      enable some foo\n  -b, --bar      enable some bar\n  -B, --baz      enable some baz\n  -h, --help     display help for command\n\nExamples:\n  $ custom-help --help\n  $ custom-help -h\n```\n\n### .usage and .name\n\nThese allow you to customise the usage description in the first line of the help. The name is otherwise\ndeduced from the (full) program arguments. Given:\n\n```js\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n```\n\nThe help will start with:\n\n```Text\nUsage: my-command [global options] command\n```\n\n### .outputHelp(cb)\n\nOutput help information without exiting.\nOptional callback cb allows post-processing of help text before it is displayed.\n\nIf you want to display help by default (e.g. if no command was provided), you can use something like:\n\n```js\nconst program = require('commander');\nconst colors = require('colors');\n\nprogram\n  .version('0.1.0')\n  .command('getstream [url]', 'get stream URL')\n  .parse(process.argv);\n\nif (!process.argv.slice(2).length) {\n  program.outputHelp(make_red);\n}\n\nfunction make_red(txt) {\n  return colors.red(txt); //display the help text in red on the console\n}\n```\n\n### .helpOption(flags, description)\n\n  Override the default help flags and description.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n### .addHelpCommand()\n\nYou can explicitly turn on or off the implicit help command with `.addHelpCommand()` and `.addHelpCommand(false)`.\n\nYou can both turn on and customise the help command by supplying the name and description:\n\n```js\nprogram.addHelpCommand('assist [command]', 'show assistance');\n```\n\n### .help(cb)\n\n  Output help information and exit immediately.\n  Optional callback cb allows post-processing of help text before it is displayed.\n\n## Custom event listeners\n\n You can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.verbose;\n});\n\n// custom error on unknown command\nprogram.on('command:*', function (operands) {\n  console.error(`Invalid command '${operands[0]}'. Did you mean:`);\n  console.error(mySuggestions(operands[0]));\n  process.exit(1);\n});\n```\n\n## Bits and pieces\n\n### Avoiding option name clashes\n\nThe original and default behaviour is that the option values are stored\nas properties on the program, and the action handler is passed a\ncommand object with the options values stored as properties.\nThis is very convenient to code, but the downside is possible clashes with\nexisting properties of Command.\n\nThere are two new routines to change the behaviour, and the default behaviour may change in the future:\n\n- `storeOptionsAsProperties`: whether to store option values as properties on command object, or store separately (specify false) and access using `.opts()`\n- `passCommandToAction`: whether to pass command to action handler,\nor just the options (specify false)\n\n```js\n// file: ./examples/storeOptionsAsProperties.action.js\nprogram\n  .storeOptionsAsProperties(false)\n  .passCommandToAction(false);\n\nprogram\n  .name('my-program-name')\n  .option('-n,--name <name>');\n\nprogram\n  .command('show')\n  .option('-a,--action <action>')\n  .action((options) => {\n    console.log(options.action);\n  });\n\nprogram.parse(process.argv);\n\nconst programOptions = program.opts();\nconsole.log(programOptions.name);\n```\n\n### TypeScript\n\nThe Commander package includes its TypeScript Definition file.\n\nIf you use `ts-node` and  git-style sub-commands written as `.ts` files, you need to call your program through node to get the sub-commands called correctly. e.g.\n\n```bash\nnode -r ts-node/register pm.ts\n```\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n\n- Use `#! /usr/bin/env node --harmony` in the sub-commands scripts. (Note Windows does not support this pattern.)\n- Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning sub-command process.\n\n### Node debugging\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) git-style executable (sub)commands using `node --inspect` et al,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\n### Override exit handling\n\nBy default Commander calls `process.exit` when it detects errors, or after displaying the help or version. You can override\nthis behaviour and optionally supply a callback. The default override throws a `CommanderError`.\n\nThe override callback is passed a `CommanderError` with properties `exitCode` number, `code` string, and `message`. The default override behaviour is to throw the error, except for async handling of executable subcommand completion which carries on. The normal display of error messages or version or help\nis not affected by the override which is called after the display.\n\n``` js\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // custom processing...\n}\n```\n\n## Examples\n\n```js\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-C, --chdir <path>', 'change the working directory')\n  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n  .option('-T, --no-tests', 'ignore test hook');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option(\"-s, --setup_mode [mode]\", \"Which setup mode to use\")\n  .action(function(env, options){\n    const mode = options.setup_mode || \"normal\";\n    env = env || 'all';\n    console.log('setup for %s env(s) with %s mode', env, mode);\n  });\n\nprogram\n  .command('exec <cmd>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option(\"-e, --exec_mode <mode>\", \"Which exec mode to use\")\n  .action(function(cmd, options){\n    console.log('exec \"%s\" using %s mode', cmd, options.exec_mode);\n  }).on('--help', function() {\n    console.log('');\n    console.log('Examples:');\n    console.log('');\n    console.log('  $ deploy exec sequential');\n    console.log('  $ deploy exec async');\n  });\n\nprogram.parse(process.argv);\n```\n\nMore Demos can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## License\n\n[MIT](https://github.com/tj/commander.js/blob/master/LICENSE)\n\n## Support\n\nCommander 4.x is supported on Node 8 and above, and is likely to work with Node 6 but not tested.\n(For versions of Node below Node 6, use Commander 3.x or 2.x.)\n\nThe main forum for free and community support is the project [Issues](https://github.com/tj/commander.js/issues) on GitHub.\n\n### Commander for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of Commander and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-commander?utm_source=npm-commander&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n","typings":"typings/index.d.ts","readmeFilename":"Readme.md","gitHead":"6857562e2952561b226d09b2683c859dcca800ae","_nodeVersion":"13.7.0","_npmVersion":"6.13.6","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_5.0.0-0_1580528680443_0.6839616301312152"},"_hasShrinkwrap":false},"5.0.0-1":{"_id":"commander@5.0.0-1","name":"commander","description":"the complete solution for node.js command-line programs","version":"5.0.0-1","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/jest":"^25.1.1","@types/node":"^12.12.26","eslint":"^6.8.0","eslint-plugin-jest":"^23.6.0","jest":"^25.1.0","standard":"^14.3.1","typescript":"^3.7.5"},"dependencies":{},"engines":{"node":">= 6"},"main":"index","dist":{"shasum":"7af5ad7324cfdbd6ac23b71d54b96336646a9d25","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-5.0.0-1.tgz"},"readme":"# Commander.js\n\n[![Build Status](https://api.travis-ci.org/tj/commander.js.svg?branch=master)](http://travis-ci.org/tj/commander.js)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby's [commander](https://github.com/commander-rb/commander).\n\nRead this in other languages: English | [简体中文](./Readme_zh-CN.md)\n\n- [Commander.js](#commanderjs)\n  - [Installation](#installation)\n  - [Declaring _program_ variable](#declaring-program-variable)\n  - [Options](#options)\n    - [Common option types, boolean and value](#common-option-types-boolean-and-value)\n    - [Default option value](#default-option-value)\n    - [Other option types, negatable boolean and flag|value](#other-option-types-negatable-boolean-and-flagvalue)\n    - [Custom option processing](#custom-option-processing)\n    - [Required option](#required-option)\n    - [Version option](#version-option)\n  - [Commands](#commands)\n    - [Specify the argument syntax](#specify-the-argument-syntax)\n    - [Action handler (sub)commands](#action-handler-subcommands)\n    - [Stand-alone executable (sub)commands](#stand-alone-executable-subcommands)\n  - [Automated help](#automated-help)\n    - [Custom help](#custom-help)\n    - [.usage and .name](#usage-and-name)\n    - [.help(cb)](#helpcb)\n    - [.outputHelp(cb)](#outputhelpcb)\n    - [.helpInformation()](#helpinformation)\n    - [.helpOption(flags, description)](#helpoptionflags-description)\n    - [.addHelpCommand()](#addhelpcommand)\n  - [Custom event listeners](#custom-event-listeners)\n  - [Bits and pieces](#bits-and-pieces)\n    - [.parse() and .parseAsync()](#parse-and-parseasync)\n    - [Avoiding option name clashes](#avoiding-option-name-clashes)\n    - [TypeScript](#typescript)\n    - [Node options such as `--harmony`](#node-options-such-as---harmony)\n    - [Debugging stand-alone executable subcommands](#debugging-stand-alone-executable-subcommands)\n    - [Override exit handling](#override-exit-handling)\n  - [Examples](#examples)\n  - [License](#license)\n  - [Support](#support)\n    - [Commander for enterprise](#commander-for-enterprise)\n\n## Installation\n\n```bash\nnpm install commander\n```\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\nconst program = require('commander');\nprogram.version('0.0.1');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n ```js\n const commander = require('commander');\n const program = new commander.Command();\n program.version('0.0.1');\n ```\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space or vertical bar ('|').\n\nThe options can be accessed as properties on the Command object. Multi-word options such as \"--template-engine\" are camel-cased, becoming `program.templateEngine` etc. See also optional new behaviour to [avoid name clashes](#avoiding-option-name-clashes).\n\nMultiple short flags may optionally be combined in a single argument following the dash: boolean flags, the last flag may take a value, and the value.\nFor example `-a -b -p 80` may be written as `-ab -p80` or even `-abp80`.\n\nYou can use `--` to indicate the end of the options, and any remaining arguments will be used without being interpreted.\nThis is particularly useful for passing options through to another\ncommand, like: `do -- git --version`.\n\nOptions on the command line are not positional, and can be specified before or after other command arguments.\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean flag, and an option which takes a value (declared using angle brackets). Both are `undefined` unless specified on command line.\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nif (program.debug) console.log(program.opts());\nconsole.log('pizza details:');\nif (program.small) console.log('- small pizza size');\nif (program.pizzaType) console.log(`- ${program.pizzaType}`);\n```\n\n```bash\n$ pizza-options -d\n{ debug: true, small: undefined, pizzaType: undefined }\npizza details:\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -ds -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the program options in the `program.args` array.\n\n### Default option value\n\nYou can specify a default value for an option which takes a value.\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse(process.argv);\n\nconsole.log(`cheese: ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and flag|value\n\nYou can specify a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be. You can specify a default boolean value for a boolean flag and it can be overridden on command line.\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse(process.argv);\n\nconst sauceStr = program.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (program.cheese === false) ? 'no cheese' : `${program.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```bash\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which functions as a flag but may also take a value (declared using square brackets).\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nif (program.cheese === undefined) console.log('no cheese');\nelse if (program.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option values. The callback function receives two parameters, the user specified value and the\nprevious value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option value to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function.\n\n```js\nconst program = require('commander');\n\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and an optional radix\n  return parseInt(value);\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse(process.argv);\n\nif (program.float !== undefined) console.log(`float: ${program.float}`);\nif (program.integer !== undefined) console.log(`integer: ${program.integer}`);\nif (program.verbose > 0) console.log(`verbosity: ${program.verbose}`);\nif (program.collect.length > 0) console.log(program.collect);\nif (program.list !== undefined) console.log(program.list);\n```\n\n```bash\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n### Required option\n\nYou may specify a required (mandatory) option using `.requiredOption`. The option must have a value after parsing, usually specified on the command line, or perhaps from a default value (say from environment). The method is otherwise the same as `.option` in format, taking flags and description, and optional default value or custom processing.\n\n```js\nconst program = require('commander');\n\nprogram\n  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse(process.argv);\n```\n\n```bash\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n```\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```bash\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method. The version flags can be named anything, but a long name is required.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n## Commands\n\nYou can specify (sub)commands for your top-level command using `.command()` or `.addCommand()`. There are two ways these can be implemented: using an action handler attached to the command, or as a stand-alone executable file (described in more detail later). The subcommands may be nested ([example](./examples/nestedCommands.js)).\n\nIn the first parameter to `.command()` you specify the command name and any command arguments. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nYou can use `.addCommand()` to add an already configured subcommand to the program.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using stand-alone executable file (description is second parameter to `.command`)\n// Returns top-level command for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n\n// Command prepared separately.\n// Returns top-level command for adding more commands.\nprogram\n  .addCommand(build.makeBuildCommand());\n```\n\nConfiguration options can be passed with the call to `.command()`. Specifying `true` for `opts.noHelp` will remove the command from the generated help output. Specifying `true` for `opts.isDefault` will run the subcommand if no other subcommand is specified ([example](./examples/defaultCommand.js)).\n\n### Specify the argument syntax\n\nYou use `.arguments` to specify the arguments for the top-level command, and for subcommands they are included in the `.command` call. Angled brackets (e.g. `<required>`) indicate required input. Square brackets (e.g. `[optional]`) indicate optional input.\n\n```js\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .arguments('<cmd> [env]')\n  .action(function (cmd, env) {\n    cmdValue = cmd;\n    envValue = env;\n  });\n\nprogram.parse(process.argv);\n\nif (typeof cmdValue === 'undefined') {\n  console.error('no command given!');\n  process.exit(1);\n}\nconsole.log('command:', cmdValue);\nconsole.log('environment:', envValue || \"no environment given\");\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. For example:\n\n```js\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('rmdir <dir> [otherDirs...]')\n  .action(function (dir, otherDirs) {\n    console.log('rmdir %s', dir);\n    if (otherDirs) {\n      otherDirs.forEach(function (oDir) {\n        console.log('rmdir %s', oDir);\n      });\n    }\n  });\n\nprogram.parse(process.argv);\n```\n\nThe variadic argument is passed to the action handler as an array.\n\n### Action handler (sub)commands\n\nYou can add options to a command that uses an action handler.\nThe action handler gets passed a parameter for each argument you declared, and one additional argument which is the\ncommand object itself. This command argument has the values for the command-specific options added as properties.\n\n```js\nconst program = require('commander');\n\nprogram\n  .command('rm <dir>')\n  .option('-r, --recursive', 'Remove recursively')\n  .action(function (dir, cmdObj) {\n    console.log('remove ' + dir + (cmdObj.recursive ? ' recursively' : ''))\n  })\n\nprogram.parse(process.argv)\n```\n\nYou may supply an `async` action handler, in which case you call `.parseAsync` rather than `.parse`.\n\n```js\nasync function run() { /* code goes here */ }\n\nasync function main() {\n  program\n    .command('run')\n    .action(run);\n  await program.parseAsync(process.argv);\n}\n```\n\nA command's options on the command line are validated when the command is used. Any unknown options will be reported as an error.\n\n### Stand-alone executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells Commander that you're going to use stand-alone executables for subcommands.\nCommander will search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-subcommand`, like `pm-install`, `pm-search`.\nYou can specify a custom name with the `executableFile` configuration option.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\n```js\n// file: ./examples/pm\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', {executableFile: 'myUpdateSubCommand'})\n  .command('list', 'list packages installed', {isDefault: true})\n  .parse(process.argv);\n```\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n## Automated help\n\nThe help information is auto-generated based on the information commander already knows about your program. The default\nhelp option is `-h,--help`. ([example](./examples/pizza))\n\n```bash\n$ node ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizzas ordering\n\nOptions:\n  -V, --version        output the version number\n  -p, --peppers        Add peppers\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           display help for command\n```\n\nA `help` command is added by default if your command has subcommands. It can be used alone, or with a subcommand name to show\nfurther help for the subcommand. These are effectively the same if the `shell` program has implicit help:\n\n```bash\nshell help\nshell --help\n\nshell help spawn\nshell spawn --help\n```\n\n### Custom help\n\nYou can display extra information by listening for \"--help\". ([example](./examples/custom-help))\n\n```js\nprogram\n  .option('-f, --foo', 'enable some foo');\n\n// must be before .parse()\nprogram.on('--help', () => {\n  console.log('');\n  console.log('Example call:');\n  console.log('  $ custom-help --help');\n});\n```\n\nYields the following help output:\n\n```Text\nUsage: custom-help [options]\n\nOptions:\n  -f, --foo   enable some foo\n  -h, --help  display help for command\n\nExample call:\n  $ custom-help --help\n```\n\n### .usage and .name\n\nThese allow you to customise the usage description in the first line of the help. The name is otherwise\ndeduced from the (full) program arguments. Given:\n\n```js\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n```\n\nThe help will start with:\n\n```Text\nUsage: my-command [global options] command\n```\n\n### .help(cb)\n\nOutput help information and exit immediately. Optional callback cb allows post-processing of help text before it is displayed.\n\n### .outputHelp(cb)\n\nOutput help information without exiting.\nOptional callback cb allows post-processing of help text before it is displayed.\n\n### .helpInformation()\n\nGet the command help information as a string for processing or displaying yourself. (The text does not include the custom help\nfrom `--help` listeners.)\n\n### .helpOption(flags, description)\n\nOverride the default help flags and description.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n### .addHelpCommand()\n\nYou can explicitly turn on or off the implicit help command with `.addHelpCommand()` and `.addHelpCommand(false)`.\n\nYou can both turn on and customise the help command by supplying the name and description:\n\n```js\nprogram.addHelpCommand('assist [command]', 'show assistance');\n```\n\n## Custom event listeners\n\nYou can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.verbose;\n});\n\nprogram.on('command:*', function (operands) {\n  console.error(`error: unknown command '${operands[0]}'`);\n  const availableCommands = program.commands.map(cmd => cmd.name());\n  const suggestion = didYouMean(operands[0], availableCommands);\n  if (suggestion)\n    console.error(`Did you mean '${suggestion}'?`);\n  process.exitCode = 1;\n});\n```\n\n## Bits and pieces\n\n### .parse() and .parseAsync()\n\nThe first argument to `.parse` is the array of strings to parse. You may omit the parameter to implicitly use `process.argv`.\n\nIf the arguments follow different conventions than node you can pass a `from` option in the second parameter:\n\n- 'node': default, `argv[0]` is the application and `argv[1]` is the script being run, with user parameters after that\n- 'electron': `argv[1]` varies depending on whether the electron application is packaged\n- 'user': all of the arguments from the user\n\nFor example:\n\n```js\nprogram.parse(process.argv); // Explicit, node conventions\nprogram.parse(); // Implicit, and auto-detect electron\nprogram.parse(['-f', 'filename'], { from: 'user' });\n```\n\n### Avoiding option name clashes\n\nThe original and default behaviour is that the option values are stored\nas properties on the program, and the action handler is passed a\ncommand object with the options values stored as properties.\nThis is very convenient to code, but the downside is possible clashes with\nexisting properties of Command.\n\nThere are two new routines to change the behaviour, and the default behaviour may change in the future:\n\n- `storeOptionsAsProperties`: whether to store option values as properties on command object, or store separately (specify false) and access using `.opts()`\n- `passCommandToAction`: whether to pass command to action handler,\nor just the options (specify false)\n\n([example](./examples/storeOptionsAsProperties-action.js))\n\n```js\nprogram\n  .storeOptionsAsProperties(false)\n  .passCommandToAction(false);\n\nprogram\n  .name('my-program-name')\n  .option('-n,--name <name>');\n\nprogram\n  .command('show')\n  .option('-a,--action <action>')\n  .action((options) => {\n    console.log(options.action);\n  });\n\nprogram.parse(process.argv);\n\nconst programOptions = program.opts();\nconsole.log(programOptions.name);\n```\n\n### TypeScript\n\nThe Commander package includes its TypeScript Definition file.\n\nIf you use `ts-node` and  stand-alone executable subcommands written as `.ts` files, you need to call your program through node to get the subcommands called correctly. e.g.\n\n```bash\nnode -r ts-node/register pm.ts\n```\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n\n- Use `#! /usr/bin/env node --harmony` in the subcommands scripts. (Note Windows does not support this pattern.)\n- Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning subcommand process.\n\n### Debugging stand-alone executable subcommands\n\nAn executable subcommand is launched as a separate child process.\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) executable subcommands using `node --inspect` et al,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\nIf you are using VSCode to debug executable subcommands you need to set the `\"autoAttachChildProcesses\": true` flag in your launch.json configuration.\n\n### Override exit handling\n\nBy default Commander calls `process.exit` when it detects errors, or after displaying the help or version. You can override\nthis behaviour and optionally supply a callback. The default override throws a `CommanderError`.\n\nThe override callback is passed a `CommanderError` with properties `exitCode` number, `code` string, and `message`. The default override behaviour is to throw the error, except for async handling of executable subcommand completion which carries on. The normal display of error messages or version or help\nis not affected by the override which is called after the display.\n\n``` js\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // custom processing...\n}\n```\n\n## Examples\n\n```js\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-C, --chdir <path>', 'change the working directory')\n  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n  .option('-T, --no-tests', 'ignore test hook');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option(\"-s, --setup_mode [mode]\", \"Which setup mode to use\")\n  .action(function(env, options){\n    const mode = options.setup_mode || \"normal\";\n    env = env || 'all';\n    console.log('setup for %s env(s) with %s mode', env, mode);\n  });\n\nprogram\n  .command('exec <cmd>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option(\"-e, --exec_mode <mode>\", \"Which exec mode to use\")\n  .action(function(cmd, options){\n    console.log('exec \"%s\" using %s mode', cmd, options.exec_mode);\n  }).on('--help', function() {\n    console.log('');\n    console.log('Examples:');\n    console.log('');\n    console.log('  $ deploy exec sequential');\n    console.log('  $ deploy exec async');\n  });\n\nprogram.parse(process.argv);\n```\n\nMore Demos can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## License\n\n[MIT](https://github.com/tj/commander.js/blob/master/LICENSE)\n\n## Support\n\nCommander 4.x is supported on Node 8 and above, and is likely to work with Node 6 but not tested.\n(For versions of Node below Node 6, use Commander 3.x or 2.x.)\n\nThe main forum for free and community support is the project [Issues](https://github.com/tj/commander.js/issues) on GitHub.\n\n### Commander for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of Commander and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-commander?utm_source=npm-commander&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n","typings":"typings/index.d.ts","readmeFilename":"Readme.md","gitHead":"a8a14c91b3a65ad09d163894adab2d1c93316150","_nodeVersion":"13.7.0","_npmVersion":"6.13.6","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_5.0.0-1_1581194971136_0.6626231082994336"},"_hasShrinkwrap":false},"5.0.0-2":{"_id":"commander@5.0.0-2","name":"commander","description":"the complete solution for node.js command-line programs","version":"5.0.0-2","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/jest":"^25.1.1","@types/node":"^12.12.26","eslint":"^6.8.0","eslint-plugin-jest":"^23.6.0","jest":"^25.1.0","standard":"^14.3.1","typescript":"^3.7.5"},"dependencies":{},"engines":{"node":">= 6"},"main":"index","dist":{"shasum":"4550bdd78a7616b7ed0c3e2a0f4ac83a2c641333","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-5.0.0-2.tgz"},"readme":"# Commander.js\n\n[![Build Status](https://api.travis-ci.org/tj/commander.js.svg?branch=master)](http://travis-ci.org/tj/commander.js)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby's [commander](https://github.com/commander-rb/commander).\n\nRead this in other languages: English | [简体中文](./Readme_zh-CN.md)\n\n- [Commander.js](#commanderjs)\n  - [Installation](#installation)\n  - [Declaring _program_ variable](#declaring-program-variable)\n  - [Options](#options)\n    - [Common option types, boolean and value](#common-option-types-boolean-and-value)\n    - [Default option value](#default-option-value)\n    - [Other option types, negatable boolean and flag|value](#other-option-types-negatable-boolean-and-flagvalue)\n    - [Custom option processing](#custom-option-processing)\n    - [Required option](#required-option)\n    - [Version option](#version-option)\n  - [Commands](#commands)\n    - [Specify the argument syntax](#specify-the-argument-syntax)\n    - [Action handler (sub)commands](#action-handler-subcommands)\n    - [Stand-alone executable (sub)commands](#stand-alone-executable-subcommands)\n  - [Automated help](#automated-help)\n    - [Custom help](#custom-help)\n    - [.usage and .name](#usage-and-name)\n    - [.help(cb)](#helpcb)\n    - [.outputHelp(cb)](#outputhelpcb)\n    - [.helpInformation()](#helpinformation)\n    - [.helpOption(flags, description)](#helpoptionflags-description)\n    - [.addHelpCommand()](#addhelpcommand)\n  - [Custom event listeners](#custom-event-listeners)\n  - [Bits and pieces](#bits-and-pieces)\n    - [.parse() and .parseAsync()](#parse-and-parseasync)\n    - [Avoiding option name clashes](#avoiding-option-name-clashes)\n    - [TypeScript](#typescript)\n    - [Node options such as `--harmony`](#node-options-such-as---harmony)\n    - [Debugging stand-alone executable subcommands](#debugging-stand-alone-executable-subcommands)\n    - [Override exit handling](#override-exit-handling)\n  - [Examples](#examples)\n  - [License](#license)\n  - [Support](#support)\n    - [Commander for enterprise](#commander-for-enterprise)\n\n## Installation\n\n```bash\nnpm install commander\n```\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\nconst program = require('commander');\nprogram.version('0.0.1');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n ```js\n const commander = require('commander');\n const program = new commander.Command();\n program.version('0.0.1');\n ```\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space or vertical bar ('|').\n\nThe options can be accessed as properties on the Command object. Multi-word options such as \"--template-engine\" are camel-cased, becoming `program.templateEngine` etc. See also optional new behaviour to [avoid name clashes](#avoiding-option-name-clashes).\n\nMultiple short flags may optionally be combined in a single argument following the dash: boolean flags, the last flag may take a value, and the value.\nFor example `-a -b -p 80` may be written as `-ab -p80` or even `-abp80`.\n\nYou can use `--` to indicate the end of the options, and any remaining arguments will be used without being interpreted.\nThis is particularly useful for passing options through to another\ncommand, like: `do -- git --version`.\n\nOptions on the command line are not positional, and can be specified before or after other command arguments.\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean flag, and an option which takes a value (declared using angle brackets). Both are `undefined` unless specified on command line.\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nif (program.debug) console.log(program.opts());\nconsole.log('pizza details:');\nif (program.small) console.log('- small pizza size');\nif (program.pizzaType) console.log(`- ${program.pizzaType}`);\n```\n\n```bash\n$ pizza-options -d\n{ debug: true, small: undefined, pizzaType: undefined }\npizza details:\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -ds -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the program options in the `program.args` array.\n\n### Default option value\n\nYou can specify a default value for an option which takes a value.\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse(process.argv);\n\nconsole.log(`cheese: ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and flag|value\n\nYou can specify a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be. You can specify a default boolean value for a boolean flag and it can be overridden on command line.\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse(process.argv);\n\nconst sauceStr = program.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (program.cheese === false) ? 'no cheese' : `${program.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```bash\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which functions as a flag but may also take a value (declared using square brackets).\n\n```js\nconst program = require('commander');\n\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nif (program.cheese === undefined) console.log('no cheese');\nelse if (program.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option values. The callback function receives two parameters, the user specified value and the\nprevious value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option value to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function.\n\n```js\nconst program = require('commander');\n\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and an optional radix\n  return parseInt(value);\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse(process.argv);\n\nif (program.float !== undefined) console.log(`float: ${program.float}`);\nif (program.integer !== undefined) console.log(`integer: ${program.integer}`);\nif (program.verbose > 0) console.log(`verbosity: ${program.verbose}`);\nif (program.collect.length > 0) console.log(program.collect);\nif (program.list !== undefined) console.log(program.list);\n```\n\n```bash\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n### Required option\n\nYou may specify a required (mandatory) option using `.requiredOption`. The option must have a value after parsing, usually specified on the command line, or perhaps from a default value (say from environment). The method is otherwise the same as `.option` in format, taking flags and description, and optional default value or custom processing.\n\n```js\nconst program = require('commander');\n\nprogram\n  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse(process.argv);\n```\n\n```bash\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n```\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```bash\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method. The version flags can be named anything, but a long name is required.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n## Commands\n\nYou can specify (sub)commands for your top-level command using `.command()` or `.addCommand()`. There are two ways these can be implemented: using an action handler attached to the command, or as a stand-alone executable file (described in more detail later). The subcommands may be nested ([example](./examples/nestedCommands.js)).\n\nIn the first parameter to `.command()` you specify the command name and any command arguments. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nYou can use `.addCommand()` to add an already configured subcommand to the program.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using stand-alone executable file (description is second parameter to `.command`)\n// Returns top-level command for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n\n// Command prepared separately.\n// Returns top-level command for adding more commands.\nprogram\n  .addCommand(build.makeBuildCommand());\n```\n\nConfiguration options can be passed with the call to `.command()`. Specifying `true` for `opts.noHelp` will remove the command from the generated help output. Specifying `true` for `opts.isDefault` will run the subcommand if no other subcommand is specified ([example](./examples/defaultCommand.js)).\n\n### Specify the argument syntax\n\nYou use `.arguments` to specify the arguments for the top-level command, and for subcommands they are included in the `.command` call. Angled brackets (e.g. `<required>`) indicate required input. Square brackets (e.g. `[optional]`) indicate optional input.\n\n```js\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .arguments('<cmd> [env]')\n  .action(function (cmd, env) {\n    cmdValue = cmd;\n    envValue = env;\n  });\n\nprogram.parse(process.argv);\n\nif (typeof cmdValue === 'undefined') {\n  console.error('no command given!');\n  process.exit(1);\n}\nconsole.log('command:', cmdValue);\nconsole.log('environment:', envValue || \"no environment given\");\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. For example:\n\n```js\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('rmdir <dir> [otherDirs...]')\n  .action(function (dir, otherDirs) {\n    console.log('rmdir %s', dir);\n    if (otherDirs) {\n      otherDirs.forEach(function (oDir) {\n        console.log('rmdir %s', oDir);\n      });\n    }\n  });\n\nprogram.parse(process.argv);\n```\n\nThe variadic argument is passed to the action handler as an array.\n\n### Action handler (sub)commands\n\nYou can add options to a command that uses an action handler.\nThe action handler gets passed a parameter for each argument you declared, and one additional argument which is the\ncommand object itself. This command argument has the values for the command-specific options added as properties.\n\n```js\nconst program = require('commander');\n\nprogram\n  .command('rm <dir>')\n  .option('-r, --recursive', 'Remove recursively')\n  .action(function (dir, cmdObj) {\n    console.log('remove ' + dir + (cmdObj.recursive ? ' recursively' : ''))\n  })\n\nprogram.parse(process.argv)\n```\n\nYou may supply an `async` action handler, in which case you call `.parseAsync` rather than `.parse`.\n\n```js\nasync function run() { /* code goes here */ }\n\nasync function main() {\n  program\n    .command('run')\n    .action(run);\n  await program.parseAsync(process.argv);\n}\n```\n\nA command's options on the command line are validated when the command is used. Any unknown options will be reported as an error.\n\n### Stand-alone executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells Commander that you're going to use stand-alone executables for subcommands.\nCommander will search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-subcommand`, like `pm-install`, `pm-search`.\nYou can specify a custom name with the `executableFile` configuration option.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\n```js\n// file: ./examples/pm\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', {executableFile: 'myUpdateSubCommand'})\n  .command('list', 'list packages installed', {isDefault: true})\n  .parse(process.argv);\n```\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n## Automated help\n\nThe help information is auto-generated based on the information commander already knows about your program. The default\nhelp option is `-h,--help`. ([example](./examples/pizza))\n\n```bash\n$ node ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizzas ordering\n\nOptions:\n  -V, --version        output the version number\n  -p, --peppers        Add peppers\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           display help for command\n```\n\nA `help` command is added by default if your command has subcommands. It can be used alone, or with a subcommand name to show\nfurther help for the subcommand. These are effectively the same if the `shell` program has implicit help:\n\n```bash\nshell help\nshell --help\n\nshell help spawn\nshell spawn --help\n```\n\n### Custom help\n\nYou can display extra information by listening for \"--help\". ([example](./examples/custom-help))\n\n```js\nprogram\n  .option('-f, --foo', 'enable some foo');\n\n// must be before .parse()\nprogram.on('--help', () => {\n  console.log('');\n  console.log('Example call:');\n  console.log('  $ custom-help --help');\n});\n```\n\nYields the following help output:\n\n```Text\nUsage: custom-help [options]\n\nOptions:\n  -f, --foo   enable some foo\n  -h, --help  display help for command\n\nExample call:\n  $ custom-help --help\n```\n\n### .usage and .name\n\nThese allow you to customise the usage description in the first line of the help. The name is otherwise\ndeduced from the (full) program arguments. Given:\n\n```js\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n```\n\nThe help will start with:\n\n```Text\nUsage: my-command [global options] command\n```\n\n### .help(cb)\n\nOutput help information and exit immediately. Optional callback cb allows post-processing of help text before it is displayed.\n\n### .outputHelp(cb)\n\nOutput help information without exiting.\nOptional callback cb allows post-processing of help text before it is displayed.\n\n### .helpInformation()\n\nGet the command help information as a string for processing or displaying yourself. (The text does not include the custom help\nfrom `--help` listeners.)\n\n### .helpOption(flags, description)\n\nOverride the default help flags and description.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n### .addHelpCommand()\n\nYou can explicitly turn on or off the implicit help command with `.addHelpCommand()` and `.addHelpCommand(false)`.\n\nYou can both turn on and customise the help command by supplying the name and description:\n\n```js\nprogram.addHelpCommand('assist [command]', 'show assistance');\n```\n\n## Custom event listeners\n\nYou can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.verbose;\n});\n\nprogram.on('command:*', function (operands) {\n  console.error(`error: unknown command '${operands[0]}'`);\n  const availableCommands = program.commands.map(cmd => cmd.name());\n  const suggestion = didYouMean(operands[0], availableCommands);\n  if (suggestion)\n    console.error(`Did you mean '${suggestion}'?`);\n  process.exitCode = 1;\n});\n```\n\n## Bits and pieces\n\n### .parse() and .parseAsync()\n\nThe first argument to `.parse` is the array of strings to parse. You may omit the parameter to implicitly use `process.argv`.\n\nIf the arguments follow different conventions than node you can pass a `from` option in the second parameter:\n\n- 'node': default, `argv[0]` is the application and `argv[1]` is the script being run, with user parameters after that\n- 'electron': `argv[1]` varies depending on whether the electron application is packaged\n- 'user': all of the arguments from the user\n\nFor example:\n\n```js\nprogram.parse(process.argv); // Explicit, node conventions\nprogram.parse(); // Implicit, and auto-detect electron\nprogram.parse(['-f', 'filename'], { from: 'user' });\n```\n\n### Avoiding option name clashes\n\nThe original and default behaviour is that the option values are stored\nas properties on the program, and the action handler is passed a\ncommand object with the options values stored as properties.\nThis is very convenient to code, but the downside is possible clashes with\nexisting properties of Command.\n\nThere are two new routines to change the behaviour, and the default behaviour may change in the future:\n\n- `storeOptionsAsProperties`: whether to store option values as properties on command object, or store separately (specify false) and access using `.opts()`\n- `passCommandToAction`: whether to pass command to action handler,\nor just the options (specify false)\n\n([example](./examples/storeOptionsAsProperties-action.js))\n\n```js\nprogram\n  .storeOptionsAsProperties(false)\n  .passCommandToAction(false);\n\nprogram\n  .name('my-program-name')\n  .option('-n,--name <name>');\n\nprogram\n  .command('show')\n  .option('-a,--action <action>')\n  .action((options) => {\n    console.log(options.action);\n  });\n\nprogram.parse(process.argv);\n\nconst programOptions = program.opts();\nconsole.log(programOptions.name);\n```\n\n### TypeScript\n\nThe Commander package includes its TypeScript Definition file.\n\nIf you use `ts-node` and  stand-alone executable subcommands written as `.ts` files, you need to call your program through node to get the subcommands called correctly. e.g.\n\n```bash\nnode -r ts-node/register pm.ts\n```\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n\n- Use `#! /usr/bin/env node --harmony` in the subcommands scripts. (Note Windows does not support this pattern.)\n- Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning subcommand process.\n\n### Debugging stand-alone executable subcommands\n\nAn executable subcommand is launched as a separate child process.\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) executable subcommands using `node --inspect` et al,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\nIf you are using VSCode to debug executable subcommands you need to set the `\"autoAttachChildProcesses\": true` flag in your launch.json configuration.\n\n### Override exit handling\n\nBy default Commander calls `process.exit` when it detects errors, or after displaying the help or version. You can override\nthis behaviour and optionally supply a callback. The default override throws a `CommanderError`.\n\nThe override callback is passed a `CommanderError` with properties `exitCode` number, `code` string, and `message`. The default override behaviour is to throw the error, except for async handling of executable subcommand completion which carries on. The normal display of error messages or version or help\nis not affected by the override which is called after the display.\n\n``` js\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // custom processing...\n}\n```\n\n## Examples\n\n```js\nconst program = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-C, --chdir <path>', 'change the working directory')\n  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n  .option('-T, --no-tests', 'ignore test hook');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option(\"-s, --setup_mode [mode]\", \"Which setup mode to use\")\n  .action(function(env, options){\n    const mode = options.setup_mode || \"normal\";\n    env = env || 'all';\n    console.log('setup for %s env(s) with %s mode', env, mode);\n  });\n\nprogram\n  .command('exec <cmd>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option(\"-e, --exec_mode <mode>\", \"Which exec mode to use\")\n  .action(function(cmd, options){\n    console.log('exec \"%s\" using %s mode', cmd, options.exec_mode);\n  }).on('--help', function() {\n    console.log('');\n    console.log('Examples:');\n    console.log('');\n    console.log('  $ deploy exec sequential');\n    console.log('  $ deploy exec async');\n  });\n\nprogram.parse(process.argv);\n```\n\nMore Demos can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## License\n\n[MIT](https://github.com/tj/commander.js/blob/master/LICENSE)\n\n## Support\n\nCommander 4.x is supported on Node 8 and above, and is likely to work with Node 6 but not tested.\n(For versions of Node below Node 6, use Commander 3.x or 2.x.)\n\nThe main forum for free and community support is the project [Issues](https://github.com/tj/commander.js/issues) on GitHub.\n\n### Commander for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of Commander and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-commander?utm_source=npm-commander&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n","typings":"typings/index.d.ts","readmeFilename":"Readme.md","gitHead":"1a84b806f3f83055fb8f864d0c5d849319ce522a","_nodeVersion":"13.7.0","_npmVersion":"6.13.6","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_5.0.0-2_1581414836630_0.4903290135236571"},"_hasShrinkwrap":false},"5.0.0-3":{"_id":"commander@5.0.0-3","name":"commander","description":"the complete solution for node.js command-line programs","version":"5.0.0-3","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/jest":"^25.1.1","@types/node":"^12.12.26","eslint":"^6.8.0","eslint-plugin-jest":"^23.6.0","jest":"^25.1.0","standard":"^14.3.1","typescript":"^3.7.5"},"dependencies":{},"engines":{"node":">= 6"},"main":"index","dist":{"shasum":"4bd12705959837cfaeb679799580e81c16593423","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-5.0.0-3.tgz"},"readme":"# Commander.js\n\n[![Build Status](https://api.travis-ci.org/tj/commander.js.svg?branch=master)](http://travis-ci.org/tj/commander.js)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby's [commander](https://github.com/commander-rb/commander).\n\nRead this in other languages: English | [简体中文](./Readme_zh-CN.md)\n\n- [Commander.js](#commanderjs)\n  - [Installation](#installation)\n  - [Declaring _program_ variable](#declaring-program-variable)\n  - [Options](#options)\n    - [Common option types, boolean and value](#common-option-types-boolean-and-value)\n    - [Default option value](#default-option-value)\n    - [Other option types, negatable boolean and flag|value](#other-option-types-negatable-boolean-and-flagvalue)\n    - [Custom option processing](#custom-option-processing)\n    - [Required option](#required-option)\n    - [Version option](#version-option)\n  - [Commands](#commands)\n    - [Specify the argument syntax](#specify-the-argument-syntax)\n    - [Action handler (sub)commands](#action-handler-subcommands)\n    - [Stand-alone executable (sub)commands](#stand-alone-executable-subcommands)\n  - [Automated help](#automated-help)\n    - [Custom help](#custom-help)\n    - [.usage and .name](#usage-and-name)\n    - [.help(cb)](#helpcb)\n    - [.outputHelp(cb)](#outputhelpcb)\n    - [.helpInformation()](#helpinformation)\n    - [.helpOption(flags, description)](#helpoptionflags-description)\n    - [.addHelpCommand()](#addhelpcommand)\n  - [Custom event listeners](#custom-event-listeners)\n  - [Bits and pieces](#bits-and-pieces)\n    - [.parse() and .parseAsync()](#parse-and-parseasync)\n    - [Avoiding option name clashes](#avoiding-option-name-clashes)\n    - [TypeScript](#typescript)\n    - [Node options such as `--harmony`](#node-options-such-as---harmony)\n    - [Debugging stand-alone executable subcommands](#debugging-stand-alone-executable-subcommands)\n    - [Override exit handling](#override-exit-handling)\n  - [Examples](#examples)\n  - [License](#license)\n  - [Support](#support)\n    - [Commander for enterprise](#commander-for-enterprise)\n\n## Installation\n\n```bash\nnpm install commander\n```\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\nconst { program } = require('commander');\nprogram.version('0.0.1');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n ```js\n const { Command } = require('commander');\n const program = new Command();\n program.version('0.0.1');\n ```\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space or vertical bar ('|').\n\nThe options can be accessed as properties on the Command object. Multi-word options such as \"--template-engine\" are camel-cased, becoming `program.templateEngine` etc. See also optional new behaviour to [avoid name clashes](#avoiding-option-name-clashes).\n\nMultiple short flags may optionally be combined in a single argument following the dash: boolean flags, the last flag may take a value, and the value.\nFor example `-a -b -p 80` may be written as `-ab -p80` or even `-abp80`.\n\nYou can use `--` to indicate the end of the options, and any remaining arguments will be used without being interpreted.\nThis is particularly useful for passing options through to another\ncommand, like: `do -- git --version`.\n\nOptions on the command line are not positional, and can be specified before or after other command arguments.\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean flag, and an option which takes a value (declared using angle brackets). Both are `undefined` unless specified on command line.\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nif (program.debug) console.log(program.opts());\nconsole.log('pizza details:');\nif (program.small) console.log('- small pizza size');\nif (program.pizzaType) console.log(`- ${program.pizzaType}`);\n```\n\n```bash\n$ pizza-options -d\n{ debug: true, small: undefined, pizzaType: undefined }\npizza details:\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -ds -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the program options in the `program.args` array.\n\n### Default option value\n\nYou can specify a default value for an option which takes a value.\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse(process.argv);\n\nconsole.log(`cheese: ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and flag|value\n\nYou can specify a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be. You can specify a default boolean value for a boolean flag and it can be overridden on command line.\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse(process.argv);\n\nconst sauceStr = program.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (program.cheese === false) ? 'no cheese' : `${program.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```bash\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which functions as a flag but may also take a value (declared using square brackets).\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nif (program.cheese === undefined) console.log('no cheese');\nelse if (program.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option values. The callback function receives two parameters, the user specified value and the\nprevious value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option value to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function.\n\n```js\nconst { program } = require('commander');\n\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and an optional radix\n  return parseInt(value);\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse(process.argv);\n\nif (program.float !== undefined) console.log(`float: ${program.float}`);\nif (program.integer !== undefined) console.log(`integer: ${program.integer}`);\nif (program.verbose > 0) console.log(`verbosity: ${program.verbose}`);\nif (program.collect.length > 0) console.log(program.collect);\nif (program.list !== undefined) console.log(program.list);\n```\n\n```bash\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n### Required option\n\nYou may specify a required (mandatory) option using `.requiredOption`. The option must have a value after parsing, usually specified on the command line, or perhaps from a default value (say from environment). The method is otherwise the same as `.option` in format, taking flags and description, and optional default value or custom processing.\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse(process.argv);\n```\n\n```bash\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n```\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```bash\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method. The version flags can be named anything, but a long name is required.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n## Commands\n\nYou can specify (sub)commands for your top-level command using `.command()` or `.addCommand()`. There are two ways these can be implemented: using an action handler attached to the command, or as a stand-alone executable file (described in more detail later). The subcommands may be nested ([example](./examples/nestedCommands.js)).\n\nIn the first parameter to `.command()` you specify the command name and any command arguments. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nYou can use `.addCommand()` to add an already configured subcommand to the program.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using stand-alone executable file (description is second parameter to `.command`)\n// Returns top-level command for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n\n// Command prepared separately.\n// Returns top-level command for adding more commands.\nprogram\n  .addCommand(build.makeBuildCommand());\n```\n\nConfiguration options can be passed with the call to `.command()`. Specifying `true` for `opts.noHelp` will remove the command from the generated help output. Specifying `true` for `opts.isDefault` will run the subcommand if no other subcommand is specified ([example](./examples/defaultCommand.js)).\n\n### Specify the argument syntax\n\nYou use `.arguments` to specify the arguments for the top-level command, and for subcommands they are included in the `.command` call. Angled brackets (e.g. `<required>`) indicate required input. Square brackets (e.g. `[optional]`) indicate optional input.\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .version('0.1.0')\n  .arguments('<cmd> [env]')\n  .action(function (cmd, env) {\n    cmdValue = cmd;\n    envValue = env;\n  });\n\nprogram.parse(process.argv);\n\nif (typeof cmdValue === 'undefined') {\n  console.error('no command given!');\n  process.exit(1);\n}\nconsole.log('command:', cmdValue);\nconsole.log('environment:', envValue || \"no environment given\");\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. For example:\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('rmdir <dir> [otherDirs...]')\n  .action(function (dir, otherDirs) {\n    console.log('rmdir %s', dir);\n    if (otherDirs) {\n      otherDirs.forEach(function (oDir) {\n        console.log('rmdir %s', oDir);\n      });\n    }\n  });\n\nprogram.parse(process.argv);\n```\n\nThe variadic argument is passed to the action handler as an array.\n\n### Action handler (sub)commands\n\nYou can add options to a command that uses an action handler.\nThe action handler gets passed a parameter for each argument you declared, and one additional argument which is the\ncommand object itself. This command argument has the values for the command-specific options added as properties.\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .command('rm <dir>')\n  .option('-r, --recursive', 'Remove recursively')\n  .action(function (dir, cmdObj) {\n    console.log('remove ' + dir + (cmdObj.recursive ? ' recursively' : ''))\n  })\n\nprogram.parse(process.argv)\n```\n\nYou may supply an `async` action handler, in which case you call `.parseAsync` rather than `.parse`.\n\n```js\nasync function run() { /* code goes here */ }\n\nasync function main() {\n  program\n    .command('run')\n    .action(run);\n  await program.parseAsync(process.argv);\n}\n```\n\nA command's options on the command line are validated when the command is used. Any unknown options will be reported as an error.\n\n### Stand-alone executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells Commander that you're going to use stand-alone executables for subcommands.\nCommander will search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-subcommand`, like `pm-install`, `pm-search`.\nYou can specify a custom name with the `executableFile` configuration option.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\n```js\n// file: ./examples/pm\nconst { program } = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', {executableFile: 'myUpdateSubCommand'})\n  .command('list', 'list packages installed', {isDefault: true})\n  .parse(process.argv);\n```\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n## Automated help\n\nThe help information is auto-generated based on the information commander already knows about your program. The default\nhelp option is `-h,--help`. ([example](./examples/pizza))\n\n```bash\n$ node ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizzas ordering\n\nOptions:\n  -V, --version        output the version number\n  -p, --peppers        Add peppers\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           display help for command\n```\n\nA `help` command is added by default if your command has subcommands. It can be used alone, or with a subcommand name to show\nfurther help for the subcommand. These are effectively the same if the `shell` program has implicit help:\n\n```bash\nshell help\nshell --help\n\nshell help spawn\nshell spawn --help\n```\n\n### Custom help\n\nYou can display extra information by listening for \"--help\". ([example](./examples/custom-help))\n\n```js\nprogram\n  .option('-f, --foo', 'enable some foo');\n\n// must be before .parse()\nprogram.on('--help', () => {\n  console.log('');\n  console.log('Example call:');\n  console.log('  $ custom-help --help');\n});\n```\n\nYields the following help output:\n\n```Text\nUsage: custom-help [options]\n\nOptions:\n  -f, --foo   enable some foo\n  -h, --help  display help for command\n\nExample call:\n  $ custom-help --help\n```\n\n### .usage and .name\n\nThese allow you to customise the usage description in the first line of the help. The name is otherwise\ndeduced from the (full) program arguments. Given:\n\n```js\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n```\n\nThe help will start with:\n\n```Text\nUsage: my-command [global options] command\n```\n\n### .help(cb)\n\nOutput help information and exit immediately. Optional callback cb allows post-processing of help text before it is displayed.\n\n### .outputHelp(cb)\n\nOutput help information without exiting.\nOptional callback cb allows post-processing of help text before it is displayed.\n\n### .helpInformation()\n\nGet the command help information as a string for processing or displaying yourself. (The text does not include the custom help\nfrom `--help` listeners.)\n\n### .helpOption(flags, description)\n\nOverride the default help flags and description.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n### .addHelpCommand()\n\nYou can explicitly turn on or off the implicit help command with `.addHelpCommand()` and `.addHelpCommand(false)`.\n\nYou can both turn on and customise the help command by supplying the name and description:\n\n```js\nprogram.addHelpCommand('assist [command]', 'show assistance');\n```\n\n## Custom event listeners\n\nYou can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.verbose;\n});\n\nprogram.on('command:*', function (operands) {\n  console.error(`error: unknown command '${operands[0]}'`);\n  const availableCommands = program.commands.map(cmd => cmd.name());\n  mySuggestBestMatch(operands[0], availableCommands);\n  process.exitCode = 1;\n});\n```\n\n## Bits and pieces\n\n### .parse() and .parseAsync()\n\nThe first argument to `.parse` is the array of strings to parse. You may omit the parameter to implicitly use `process.argv`.\n\nIf the arguments follow different conventions than node you can pass a `from` option in the second parameter:\n\n- 'node': default, `argv[0]` is the application and `argv[1]` is the script being run, with user parameters after that\n- 'electron': `argv[1]` varies depending on whether the electron application is packaged\n- 'user': all of the arguments from the user\n\nFor example:\n\n```js\nprogram.parse(process.argv); // Explicit, node conventions\nprogram.parse(); // Implicit, and auto-detect electron\nprogram.parse(['-f', 'filename'], { from: 'user' });\n```\n\n### Avoiding option name clashes\n\nThe original and default behaviour is that the option values are stored\nas properties on the program, and the action handler is passed a\ncommand object with the options values stored as properties.\nThis is very convenient to code, but the downside is possible clashes with\nexisting properties of Command.\n\nThere are two new routines to change the behaviour, and the default behaviour may change in the future:\n\n- `storeOptionsAsProperties`: whether to store option values as properties on command object, or store separately (specify false) and access using `.opts()`\n- `passCommandToAction`: whether to pass command to action handler,\nor just the options (specify false)\n\n([example](./examples/storeOptionsAsProperties-action.js))\n\n```js\nprogram\n  .storeOptionsAsProperties(false)\n  .passCommandToAction(false);\n\nprogram\n  .name('my-program-name')\n  .option('-n,--name <name>');\n\nprogram\n  .command('show')\n  .option('-a,--action <action>')\n  .action((options) => {\n    console.log(options.action);\n  });\n\nprogram.parse(process.argv);\n\nconst programOptions = program.opts();\nconsole.log(programOptions.name);\n```\n\n### TypeScript\n\nThe Commander package includes its TypeScript Definition file.\n\nIf you use `ts-node` and  stand-alone executable subcommands written as `.ts` files, you need to call your program through node to get the subcommands called correctly. e.g.\n\n```bash\nnode -r ts-node/register pm.ts\n```\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n\n- Use `#! /usr/bin/env node --harmony` in the subcommands scripts. (Note Windows does not support this pattern.)\n- Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning subcommand process.\n\n### Debugging stand-alone executable subcommands\n\nAn executable subcommand is launched as a separate child process.\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) executable subcommands using `node --inspect` et al,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\nIf you are using VSCode to debug executable subcommands you need to set the `\"autoAttachChildProcesses\": true` flag in your launch.json configuration.\n\n### Override exit handling\n\nBy default Commander calls `process.exit` when it detects errors, or after displaying the help or version. You can override\nthis behaviour and optionally supply a callback. The default override throws a `CommanderError`.\n\nThe override callback is passed a `CommanderError` with properties `exitCode` number, `code` string, and `message`. The default override behaviour is to throw the error, except for async handling of executable subcommand completion which carries on. The normal display of error messages or version or help\nis not affected by the override which is called after the display.\n\n``` js\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // custom processing...\n}\n```\n\n## Examples\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-C, --chdir <path>', 'change the working directory')\n  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n  .option('-T, --no-tests', 'ignore test hook');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option(\"-s, --setup_mode [mode]\", \"Which setup mode to use\")\n  .action(function(env, options){\n    const mode = options.setup_mode || \"normal\";\n    env = env || 'all';\n    console.log('setup for %s env(s) with %s mode', env, mode);\n  });\n\nprogram\n  .command('exec <cmd>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option(\"-e, --exec_mode <mode>\", \"Which exec mode to use\")\n  .action(function(cmd, options){\n    console.log('exec \"%s\" using %s mode', cmd, options.exec_mode);\n  }).on('--help', function() {\n    console.log('');\n    console.log('Examples:');\n    console.log('');\n    console.log('  $ deploy exec sequential');\n    console.log('  $ deploy exec async');\n  });\n\nprogram.parse(process.argv);\n```\n\nMore Demos can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## License\n\n[MIT](https://github.com/tj/commander.js/blob/master/LICENSE)\n\n## Support\n\nCommander 4.x is supported on Node 8 and above, and is likely to work with Node 6 but not tested.\n(For versions of Node below Node 6, use Commander 3.x or 2.x.)\n\nThe main forum for free and community support is the project [Issues](https://github.com/tj/commander.js/issues) on GitHub.\n\n### Commander for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of Commander and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-commander?utm_source=npm-commander&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n","typings":"typings/index.d.ts","readmeFilename":"Readme.md","gitHead":"a3f453f11cf3ad69d2b15ce82efdfd3af53efe22","_nodeVersion":"13.7.0","_npmVersion":"6.13.6","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_5.0.0-3_1582184199234_0.7276851509041251"},"_hasShrinkwrap":false},"5.0.0-4":{"_id":"commander@5.0.0-4","name":"commander","description":"the complete solution for node.js command-line programs","version":"5.0.0-4","keywords":["commander","command","option","parser"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/jest":"^25.1.1","@types/node":"^12.12.26","eslint":"^6.8.0","eslint-plugin-jest":"^23.6.0","jest":"^25.1.0","standard":"^14.3.1","typescript":"^3.7.5"},"dependencies":{},"engines":{"node":">= 6"},"main":"index","dist":{"shasum":"3960a6d58cfe1a67537dbcf993f63f7f883daf32","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-5.0.0-4.tgz"},"readme":"# Commander.js\n\n[![Build Status](https://api.travis-ci.org/tj/commander.js.svg?branch=master)](http://travis-ci.org/tj/commander.js)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby's [commander](https://github.com/commander-rb/commander).\n\nRead this in other languages: English | [简体中文](./Readme_zh-CN.md)\n\n- [Commander.js](#commanderjs)\n  - [Installation](#installation)\n  - [Declaring _program_ variable](#declaring-program-variable)\n  - [Options](#options)\n    - [Common option types, boolean and value](#common-option-types-boolean-and-value)\n    - [Default option value](#default-option-value)\n    - [Other option types, negatable boolean and flag|value](#other-option-types-negatable-boolean-and-flagvalue)\n    - [Custom option processing](#custom-option-processing)\n    - [Required option](#required-option)\n    - [Version option](#version-option)\n  - [Commands](#commands)\n    - [Specify the argument syntax](#specify-the-argument-syntax)\n    - [Action handler (sub)commands](#action-handler-subcommands)\n    - [Stand-alone executable (sub)commands](#stand-alone-executable-subcommands)\n  - [Automated help](#automated-help)\n    - [Custom help](#custom-help)\n    - [.usage and .name](#usage-and-name)\n    - [.help(cb)](#helpcb)\n    - [.outputHelp(cb)](#outputhelpcb)\n    - [.helpInformation()](#helpinformation)\n    - [.helpOption(flags, description)](#helpoptionflags-description)\n    - [.addHelpCommand()](#addhelpcommand)\n  - [Custom event listeners](#custom-event-listeners)\n  - [Bits and pieces](#bits-and-pieces)\n    - [.parse() and .parseAsync()](#parse-and-parseasync)\n    - [Avoiding option name clashes](#avoiding-option-name-clashes)\n    - [TypeScript](#typescript)\n    - [createCommand()](#createcommand)\n    - [Node options such as `--harmony`](#node-options-such-as---harmony)\n    - [Debugging stand-alone executable subcommands](#debugging-stand-alone-executable-subcommands)\n    - [Override exit handling](#override-exit-handling)\n  - [Examples](#examples)\n  - [License](#license)\n  - [Support](#support)\n    - [Commander for enterprise](#commander-for-enterprise)\n\n## Installation\n\n```bash\nnpm install commander\n```\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\nconst { program } = require('commander');\nprogram.version('0.0.1');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n ```js\n const { Command } = require('commander');\n const program = new Command();\n program.version('0.0.1');\n ```\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space or vertical bar ('|').\n\nThe options can be accessed as properties on the Command object. Multi-word options such as \"--template-engine\" are camel-cased, becoming `program.templateEngine` etc. See also optional new behaviour to [avoid name clashes](#avoiding-option-name-clashes).\n\nMultiple short flags may optionally be combined in a single argument following the dash: boolean flags, the last flag may take a value, and the value.\nFor example `-a -b -p 80` may be written as `-ab -p80` or even `-abp80`.\n\nYou can use `--` to indicate the end of the options, and any remaining arguments will be used without being interpreted.\nThis is particularly useful for passing options through to another\ncommand, like: `do -- git --version`.\n\nOptions on the command line are not positional, and can be specified before or after other command arguments.\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean flag, and an option which takes a value (declared using angle brackets). Both are `undefined` unless specified on command line.\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nif (program.debug) console.log(program.opts());\nconsole.log('pizza details:');\nif (program.small) console.log('- small pizza size');\nif (program.pizzaType) console.log(`- ${program.pizzaType}`);\n```\n\n```bash\n$ pizza-options -d\n{ debug: true, small: undefined, pizzaType: undefined }\npizza details:\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -ds -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the program options in the `program.args` array.\n\n### Default option value\n\nYou can specify a default value for an option which takes a value.\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse(process.argv);\n\nconsole.log(`cheese: ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and flag|value\n\nYou can specify a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be. You can specify a default boolean value for a boolean flag and it can be overridden on command line.\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse(process.argv);\n\nconst sauceStr = program.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (program.cheese === false) ? 'no cheese' : `${program.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```bash\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which functions as a flag but may also take a value (declared using square brackets).\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nif (program.cheese === undefined) console.log('no cheese');\nelse if (program.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option values. The callback function receives two parameters, the user specified value and the\nprevious value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option value to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function.\n\n```js\nconst { program } = require('commander');\n\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and an optional radix\n  return parseInt(value);\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse(process.argv);\n\nif (program.float !== undefined) console.log(`float: ${program.float}`);\nif (program.integer !== undefined) console.log(`integer: ${program.integer}`);\nif (program.verbose > 0) console.log(`verbosity: ${program.verbose}`);\nif (program.collect.length > 0) console.log(program.collect);\nif (program.list !== undefined) console.log(program.list);\n```\n\n```bash\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n### Required option\n\nYou may specify a required (mandatory) option using `.requiredOption`. The option must have a value after parsing, usually specified on the command line, or perhaps from a default value (say from environment). The method is otherwise the same as `.option` in format, taking flags and description, and optional default value or custom processing.\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse(process.argv);\n```\n\n```bash\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n```\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```bash\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method. The version flags can be named anything, but a long name is required.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n## Commands\n\nYou can specify (sub)commands for your top-level command using `.command()` or `.addCommand()`. There are two ways these can be implemented: using an action handler attached to the command, or as a stand-alone executable file (described in more detail later). The subcommands may be nested ([example](./examples/nestedCommands.js)).\n\nIn the first parameter to `.command()` you specify the command name and any command arguments. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nYou can use `.addCommand()` to add an already configured subcommand to the program.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using stand-alone executable file (description is second parameter to `.command`)\n// Returns top-level command for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n\n// Command prepared separately.\n// Returns top-level command for adding more commands.\nprogram\n  .addCommand(build.makeBuildCommand());\n```\n\nConfiguration options can be passed with the call to `.command()`. Specifying `true` for `opts.noHelp` will remove the command from the generated help output. Specifying `true` for `opts.isDefault` will run the subcommand if no other subcommand is specified ([example](./examples/defaultCommand.js)).\n\n### Specify the argument syntax\n\nYou use `.arguments` to specify the arguments for the top-level command, and for subcommands they are included in the `.command` call. Angled brackets (e.g. `<required>`) indicate required input. Square brackets (e.g. `[optional]`) indicate optional input.\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .version('0.1.0')\n  .arguments('<cmd> [env]')\n  .action(function (cmd, env) {\n    cmdValue = cmd;\n    envValue = env;\n  });\n\nprogram.parse(process.argv);\n\nif (typeof cmdValue === 'undefined') {\n  console.error('no command given!');\n  process.exit(1);\n}\nconsole.log('command:', cmdValue);\nconsole.log('environment:', envValue || \"no environment given\");\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. For example:\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('rmdir <dir> [otherDirs...]')\n  .action(function (dir, otherDirs) {\n    console.log('rmdir %s', dir);\n    if (otherDirs) {\n      otherDirs.forEach(function (oDir) {\n        console.log('rmdir %s', oDir);\n      });\n    }\n  });\n\nprogram.parse(process.argv);\n```\n\nThe variadic argument is passed to the action handler as an array.\n\n### Action handler (sub)commands\n\nYou can add options to a command that uses an action handler.\nThe action handler gets passed a parameter for each argument you declared, and one additional argument which is the\ncommand object itself. This command argument has the values for the command-specific options added as properties.\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .command('rm <dir>')\n  .option('-r, --recursive', 'Remove recursively')\n  .action(function (dir, cmdObj) {\n    console.log('remove ' + dir + (cmdObj.recursive ? ' recursively' : ''))\n  })\n\nprogram.parse(process.argv)\n```\n\nYou may supply an `async` action handler, in which case you call `.parseAsync` rather than `.parse`.\n\n```js\nasync function run() { /* code goes here */ }\n\nasync function main() {\n  program\n    .command('run')\n    .action(run);\n  await program.parseAsync(process.argv);\n}\n```\n\nA command's options on the command line are validated when the command is used. Any unknown options will be reported as an error.\n\n### Stand-alone executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells Commander that you're going to use stand-alone executables for subcommands.\nCommander will search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-subcommand`, like `pm-install`, `pm-search`.\nYou can specify a custom name with the `executableFile` configuration option.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\n```js\n// file: ./examples/pm\nconst { program } = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', {executableFile: 'myUpdateSubCommand'})\n  .command('list', 'list packages installed', {isDefault: true})\n  .parse(process.argv);\n```\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n## Automated help\n\nThe help information is auto-generated based on the information commander already knows about your program. The default\nhelp option is `-h,--help`. ([example](./examples/pizza))\n\n```bash\n$ node ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizzas ordering\n\nOptions:\n  -V, --version        output the version number\n  -p, --peppers        Add peppers\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           display help for command\n```\n\nA `help` command is added by default if your command has subcommands. It can be used alone, or with a subcommand name to show\nfurther help for the subcommand. These are effectively the same if the `shell` program has implicit help:\n\n```bash\nshell help\nshell --help\n\nshell help spawn\nshell spawn --help\n```\n\n### Custom help\n\nYou can display extra information by listening for \"--help\". ([example](./examples/custom-help))\n\n```js\nprogram\n  .option('-f, --foo', 'enable some foo');\n\n// must be before .parse()\nprogram.on('--help', () => {\n  console.log('');\n  console.log('Example call:');\n  console.log('  $ custom-help --help');\n});\n```\n\nYields the following help output:\n\n```Text\nUsage: custom-help [options]\n\nOptions:\n  -f, --foo   enable some foo\n  -h, --help  display help for command\n\nExample call:\n  $ custom-help --help\n```\n\n### .usage and .name\n\nThese allow you to customise the usage description in the first line of the help. The name is otherwise\ndeduced from the (full) program arguments. Given:\n\n```js\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n```\n\nThe help will start with:\n\n```Text\nUsage: my-command [global options] command\n```\n\n### .help(cb)\n\nOutput help information and exit immediately. Optional callback cb allows post-processing of help text before it is displayed.\n\n### .outputHelp(cb)\n\nOutput help information without exiting.\nOptional callback cb allows post-processing of help text before it is displayed.\n\n### .helpInformation()\n\nGet the command help information as a string for processing or displaying yourself. (The text does not include the custom help\nfrom `--help` listeners.)\n\n### .helpOption(flags, description)\n\nOverride the default help flags and description.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n### .addHelpCommand()\n\nYou can explicitly turn on or off the implicit help command with `.addHelpCommand()` and `.addHelpCommand(false)`.\n\nYou can both turn on and customise the help command by supplying the name and description:\n\n```js\nprogram.addHelpCommand('assist [command]', 'show assistance');\n```\n\n## Custom event listeners\n\nYou can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.verbose;\n});\n\nprogram.on('command:*', function (operands) {\n  console.error(`error: unknown command '${operands[0]}'`);\n  const availableCommands = program.commands.map(cmd => cmd.name());\n  mySuggestBestMatch(operands[0], availableCommands);\n  process.exitCode = 1;\n});\n```\n\n## Bits and pieces\n\n### .parse() and .parseAsync()\n\nThe first argument to `.parse` is the array of strings to parse. You may omit the parameter to implicitly use `process.argv`.\n\nIf the arguments follow different conventions than node you can pass a `from` option in the second parameter:\n\n- 'node': default, `argv[0]` is the application and `argv[1]` is the script being run, with user parameters after that\n- 'electron': `argv[1]` varies depending on whether the electron application is packaged\n- 'user': all of the arguments from the user\n\nFor example:\n\n```js\nprogram.parse(process.argv); // Explicit, node conventions\nprogram.parse(); // Implicit, and auto-detect electron\nprogram.parse(['-f', 'filename'], { from: 'user' });\n```\n\n### Avoiding option name clashes\n\nThe original and default behaviour is that the option values are stored\nas properties on the program, and the action handler is passed a\ncommand object with the options values stored as properties.\nThis is very convenient to code, but the downside is possible clashes with\nexisting properties of Command.\n\nThere are two new routines to change the behaviour, and the default behaviour may change in the future:\n\n- `storeOptionsAsProperties`: whether to store option values as properties on command object, or store separately (specify false) and access using `.opts()`\n- `passCommandToAction`: whether to pass command to action handler,\nor just the options (specify false)\n\n([example](./examples/storeOptionsAsProperties-action.js))\n\n```js\nprogram\n  .storeOptionsAsProperties(false)\n  .passCommandToAction(false);\n\nprogram\n  .name('my-program-name')\n  .option('-n,--name <name>');\n\nprogram\n  .command('show')\n  .option('-a,--action <action>')\n  .action((options) => {\n    console.log(options.action);\n  });\n\nprogram.parse(process.argv);\n\nconst programOptions = program.opts();\nconsole.log(programOptions.name);\n```\n\n### TypeScript\n\nThe Commander package includes its TypeScript Definition file.\n\nIf you use `ts-node` and  stand-alone executable subcommands written as `.ts` files, you need to call your program through node to get the subcommands called correctly. e.g.\n\n```bash\nnode -r ts-node/register pm.ts\n```\n\n### createCommand()\n\nThis factory function creates a new command. It is exported and may be used instead of using `new`, like:\n\n```js\nconst { createCommand } = require('commander');\nconst program = createCommand();\n```\n\n`createCommand` is also a method of the Command object, and creates a new command rather than a subcommand. This gets used internally\nwhen creating subcommands using `.command()`, and you may override it to\ncustomise the new subcommand (examples using [subclass](./examples/custom-command-class.js) and [function](./examples/custom-command-function.js)).\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n\n- Use `#! /usr/bin/env node --harmony` in the subcommands scripts. (Note Windows does not support this pattern.)\n- Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning subcommand process.\n\n### Debugging stand-alone executable subcommands\n\nAn executable subcommand is launched as a separate child process.\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) executable subcommands using `node --inspect` et al,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\nIf you are using VSCode to debug executable subcommands you need to set the `\"autoAttachChildProcesses\": true` flag in your launch.json configuration.\n\n### Override exit handling\n\nBy default Commander calls `process.exit` when it detects errors, or after displaying the help or version. You can override\nthis behaviour and optionally supply a callback. The default override throws a `CommanderError`.\n\nThe override callback is passed a `CommanderError` with properties `exitCode` number, `code` string, and `message`. The default override behaviour is to throw the error, except for async handling of executable subcommand completion which carries on. The normal display of error messages or version or help\nis not affected by the override which is called after the display.\n\n``` js\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // custom processing...\n}\n```\n\n## Examples\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-C, --chdir <path>', 'change the working directory')\n  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n  .option('-T, --no-tests', 'ignore test hook');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option(\"-s, --setup_mode [mode]\", \"Which setup mode to use\")\n  .action(function(env, options){\n    const mode = options.setup_mode || \"normal\";\n    env = env || 'all';\n    console.log('setup for %s env(s) with %s mode', env, mode);\n  });\n\nprogram\n  .command('exec <cmd>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option(\"-e, --exec_mode <mode>\", \"Which exec mode to use\")\n  .action(function(cmd, options){\n    console.log('exec \"%s\" using %s mode', cmd, options.exec_mode);\n  }).on('--help', function() {\n    console.log('');\n    console.log('Examples:');\n    console.log('');\n    console.log('  $ deploy exec sequential');\n    console.log('  $ deploy exec async');\n  });\n\nprogram.parse(process.argv);\n```\n\nMore Demos can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## License\n\n[MIT](https://github.com/tj/commander.js/blob/master/LICENSE)\n\n## Support\n\nCommander 5.x is fully supported on Long Term Support versions of Node, and is likely to work with Node 6 but not tested.\n(For versions of Node below Node 6, use Commander 3.x or 2.x.)\n\nThe main forum for free and community support is the project [Issues](https://github.com/tj/commander.js/issues) on GitHub.\n\n### Commander for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of Commander and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-commander?utm_source=npm-commander&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n","typings":"typings/index.d.ts","readmeFilename":"Readme.md","gitHead":"95e0d193ec02859f1bdcb08785e21f86942fc5e5","_nodeVersion":"12.16.1","_npmVersion":"6.13.4","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_5.0.0-4_1583213736290_0.593589778400347"},"_hasShrinkwrap":false},"5.0.0":{"_id":"commander@5.0.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"5.0.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/jest":"^25.1.4","@types/node":"^12.12.26","@typescript-eslint/eslint-plugin":"^2.23.0","eslint":"^6.8.0","eslint-config-standard-with-typescript":"^14.0.0","eslint-plugin-jest":"^23.8.2","jest":"^25.1.0","standard":"^14.3.1","typescript":"^3.7.5"},"dependencies":{},"engines":{"node":">= 6"},"main":"index","dist":{"shasum":"dbf1909b49e5044f8fdaf0adc809f0c0722bdfd0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-5.0.0.tgz"},"typings":"typings/index.d.ts","gitHead":"2aad525640d5885d9f51ae8dfe07a01c280cf4e3","_nodeVersion":"12.11.0","_npmVersion":"6.14.1","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_5.0.0_1584148237584_0.9651249025797677"},"_hasShrinkwrap":false},"5.1.0":{"_id":"commander@5.1.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"5.1.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":""},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":null,"devDependencies":{"@types/jest":"^25.2.1","@types/node":"^12.12.36","@typescript-eslint/eslint-plugin":"^2.29.0","eslint":"^6.8.0","eslint-config-standard-with-typescript":"^15.0.1","eslint-plugin-jest":"^23.8.2","jest":"^25.4.0","standard":"^14.3.3","typescript":"^3.7.5"},"dependencies":{},"engines":{"node":">= 6"},"files":["index.js","typings/index.d.ts"],"main":"index","dist":{"shasum":"46abbd1652f8e059bddaef99bbdcb2ad9cf179ae","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-5.1.0.tgz"},"typings":"typings/index.d.ts"},"6.0.0-0":{"_id":"commander@6.0.0-0","name":"commander","description":"the complete solution for node.js command-line programs","version":"6.0.0-0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/jest":"^25.2.1","@types/node":"^12.12.38","@typescript-eslint/eslint-plugin":"^2.31.0","eslint":"^6.8.0","eslint-config-standard-with-typescript":"^16.0.0","eslint-plugin-jest":"^23.10.0","jest":"^26.0.1","standard":"^14.3.3","typescript":"^3.7.5"},"dependencies":{},"engines":{"node":">= 6"},"main":"index","dist":{"shasum":"9916b52863f367a878732bf88c06782ec656bed6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-6.0.0-0.tgz"},"readme":"# Commander.js\n\n[![Build Status](https://api.travis-ci.org/tj/commander.js.svg?branch=master)](http://travis-ci.org/tj/commander.js)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces, inspired by Ruby's [commander](https://github.com/commander-rb/commander).\n\nRead this in other languages: English | [简体中文](./Readme_zh-CN.md)\n\n- [Commander.js](#commanderjs)\n  - [Installation](#installation)\n  - [Declaring _program_ variable](#declaring-program-variable)\n  - [Options](#options)\n    - [Common option types, boolean and value](#common-option-types-boolean-and-value)\n    - [Default option value](#default-option-value)\n    - [Other option types, negatable boolean and flag|value](#other-option-types-negatable-boolean-and-flagvalue)\n    - [Custom option processing](#custom-option-processing)\n    - [Required option](#required-option)\n    - [Variadic option](#variadic-option)\n    - [Version option](#version-option)\n  - [Commands](#commands)\n    - [Specify the argument syntax](#specify-the-argument-syntax)\n    - [Action handler (sub)commands](#action-handler-subcommands)\n    - [Stand-alone executable (sub)commands](#stand-alone-executable-subcommands)\n  - [Automated help](#automated-help)\n    - [Custom help](#custom-help)\n    - [.usage and .name](#usage-and-name)\n    - [.help(cb)](#helpcb)\n    - [.outputHelp(cb)](#outputhelpcb)\n    - [.helpInformation()](#helpinformation)\n    - [.helpOption(flags, description)](#helpoptionflags-description)\n    - [.addHelpCommand()](#addhelpcommand)\n  - [Custom event listeners](#custom-event-listeners)\n  - [Bits and pieces](#bits-and-pieces)\n    - [.parse() and .parseAsync()](#parse-and-parseasync)\n    - [Avoiding option name clashes](#avoiding-option-name-clashes)\n    - [TypeScript](#typescript)\n    - [createCommand()](#createcommand)\n    - [Node options such as `--harmony`](#node-options-such-as---harmony)\n    - [Debugging stand-alone executable subcommands](#debugging-stand-alone-executable-subcommands)\n    - [Override exit handling](#override-exit-handling)\n  - [Examples](#examples)\n  - [Support](#support)\n    - [Commander for enterprise](#commander-for-enterprise)\n\n## Installation\n\n```bash\nnpm install commander\n```\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\nconst { program } = require('commander');\nprogram.version('0.0.1');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n```js\nconst { Command } = require('commander');\nconst program = new Command();\nprogram.version('0.0.1');\n```\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space or vertical bar ('|').\n\nThe options can be accessed as properties on the Command object. Multi-word options such as \"--template-engine\" are camel-cased, becoming `program.templateEngine` etc. See also optional new behaviour to [avoid name clashes](#avoiding-option-name-clashes).\n\nMultiple short flags may optionally be combined in a single argument following the dash: boolean flags, the last flag may take a value, and the value.\nFor example `-a -b -p 80` may be written as `-ab -p80` or even `-abp80`.\n\nYou can use `--` to indicate the end of the options, and any remaining arguments will be used without being interpreted.\nThis is particularly useful for passing options through to another\ncommand, like: `do -- git --version`.\n\nOptions on the command line are not positional, and can be specified before or after other command arguments.\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean flag, and an option which takes a value (declared using angle brackets). Both are `undefined` unless specified on command line.\n\nExample file: [options-common.js](./examples/options-common.js)\n\n```js\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nif (program.debug) console.log(program.opts());\nconsole.log('pizza details:');\nif (program.small) console.log('- small pizza size');\nif (program.pizzaType) console.log(`- ${program.pizzaType}`);\n```\n\n```bash\n$ pizza-options -d\n{ debug: true, small: undefined, pizzaType: undefined }\npizza details:\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -ds -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the program options in the `program.args` array.\n\n### Default option value\n\nYou can specify a default value for an option which takes a value.\n\nExample file: [options-defaults.js](./examples/options-defaults.js)\n\n```js\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse(process.argv);\n\nconsole.log(`cheese: ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and flag|value\n\nYou can specify a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be. You can specify a default boolean value for a boolean flag and it can be overridden on command line.\n\nExample file: [options-negatable.js](./examples/options-negatable.js)\n\n```js\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse(process.argv);\n\nconst sauceStr = program.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (program.cheese === false) ? 'no cheese' : `${program.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```bash\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which functions as a flag but may also take a value (declared using square brackets).\n\nExample file: [options-flag-or-value.js](./examples/options-flag-or-value.js)\n\n```js\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nif (program.cheese === undefined) console.log('no cheese');\nelse if (program.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option values. The callback function receives two parameters, the user specified value and the\nprevious value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option value to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function.\n\nExample file: [options-custom-processing.js](./examples/options-custom-processing.js)\n\n```js\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and an optional radix\n  return parseInt(value);\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse(process.argv);\n\nif (program.float !== undefined) console.log(`float: ${program.float}`);\nif (program.integer !== undefined) console.log(`integer: ${program.integer}`);\nif (program.verbose > 0) console.log(`verbosity: ${program.verbose}`);\nif (program.collect.length > 0) console.log(program.collect);\nif (program.list !== undefined) console.log(program.list);\n```\n\n```bash\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n### Required option\n\nYou may specify a required (mandatory) option using `.requiredOption`. The option must have a value after parsing, usually specified on the command line, or perhaps from a default value (say from environment). The method is otherwise the same as `.option` in format, taking flags and description, and optional default value or custom processing.\n\nExample file: [options-required.js](./examples/options-required.js)\n\n```js\nprogram\n  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse(process.argv);\n```\n\n```bash\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n```\n\n### Variadic option\n\nYou may make an option variadic by appending `...` to the value placeholder when declaring the option. On the command line you\ncan then specify multiple option arguments, and the parsed option value will be an array. The extra arguments\nare read until the first argument starting with a dash. The special argument `--` stops option processing entirely. If a value\nis specified in the same argument as the option then no further values are read.\n\nExample file: [options-variadic.js](./examples/options-variadic.js)\n\n```js\nprogram\n  .option('-n, --number <numbers...>', 'specify numbers')\n  .option('-l, --letter [letters...]', 'specify letters');\n\nprogram.parse();\n\nconsole.log('Options: ', program.opts());\nconsole.log('Remaining arguments: ', program.args);\n```\n\n```bash\n$ collect -n 1 2 3 --letter a b c\nOptions:  { number: [ '1', '2', '3' ], letter: [ 'a', 'b', 'c' ] }\nRemaining arguments:  []\n$ collect --letter=A -n80 operand\nOptions:  { number: [ '80' ], letter: [ 'A' ] }\nRemaining arguments:  [ 'operand' ]\n$ collect --letter -n 1 -n 2 3 -- operand\nOptions:  { number: [ '1', '2', '3' ], letter: true }\nRemaining arguments:  [ 'operand' ]\n```\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```bash\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n## Commands\n\nYou can specify (sub)commands using `.command()` or `.addCommand()`. There are two ways these can be implemented: using an action handler attached to the command, or as a stand-alone executable file (described in more detail later). The subcommands may be nested ([example](./examples/nestedCommands.js)).\n\nIn the first parameter to `.command()` you specify the command name and any command arguments. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nYou can use `.addCommand()` to add an already configured subcommand to the program.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using stand-alone executable file (description is second parameter to `.command`)\n// Returns `this` for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n\n// Command prepared separately.\n// Returns `this` for adding more commands.\nprogram\n  .addCommand(build.makeBuildCommand());\n```\n\nConfiguration options can be passed with the call to `.command()` and `.addCommand()`. Specifying `true` for `opts.hidden` will remove the command from the generated help output. Specifying `true` for `opts.isDefault` will run the subcommand if no other subcommand is specified ([example](./examples/defaultCommand.js)).\n\n### Specify the argument syntax\n\nYou use `.arguments` to specify the arguments for the top-level command, and for subcommands they are usually included in the `.command` call. Angled brackets (e.g. `<required>`) indicate required input. Square brackets (e.g. `[optional]`) indicate optional input.\n\nExample file: [env](./examples/env)\n\n```js\nprogram\n  .version('0.1.0')\n  .arguments('<cmd> [env]')\n  .action(function (cmd, env) {\n    cmdValue = cmd;\n    envValue = env;\n  });\n\nprogram.parse(process.argv);\n\nif (typeof cmdValue === 'undefined') {\n  console.error('no command given!');\n  process.exit(1);\n}\nconsole.log('command:', cmdValue);\nconsole.log('environment:', envValue || \"no environment given\");\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. For example:\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('rmdir <dir> [otherDirs...]')\n  .action(function (dir, otherDirs) {\n    console.log('rmdir %s', dir);\n    if (otherDirs) {\n      otherDirs.forEach(function (oDir) {\n        console.log('rmdir %s', oDir);\n      });\n    }\n  });\n\nprogram.parse(process.argv);\n```\n\nThe variadic argument is passed to the action handler as an array.\n\n### Action handler (sub)commands\n\nYou can add options to a command that uses an action handler.\nThe action handler gets passed a parameter for each argument you declared, and one additional argument which is the\ncommand object itself. This command argument has the values for the command-specific options added as properties.\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .command('rm <dir>')\n  .option('-r, --recursive', 'Remove recursively')\n  .action(function (dir, cmdObj) {\n    console.log('remove ' + dir + (cmdObj.recursive ? ' recursively' : ''))\n  })\n\nprogram.parse(process.argv)\n```\n\nYou may supply an `async` action handler, in which case you call `.parseAsync` rather than `.parse`.\n\n```js\nasync function run() { /* code goes here */ }\n\nasync function main() {\n  program\n    .command('run')\n    .action(run);\n  await program.parseAsync(process.argv);\n}\n```\n\nA command's options on the command line are validated when the command is used. Any unknown options will be reported as an error.\n\n### Stand-alone executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells Commander that you're going to use stand-alone executables for subcommands.\nCommander will search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-subcommand`, like `pm-install`, `pm-search`.\nYou can specify a custom name with the `executableFile` configuration option.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\nExample file: [pm](./examples/pm)\n\n```js\nprogram\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', { executableFile: 'myUpdateSubCommand' })\n  .command('list', 'list packages installed', { isDefault: true });\n\nprogram.parse(process.argv);\n```\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n## Automated help\n\nThe help information is auto-generated based on the information commander already knows about your program. The default\nhelp option is `-h,--help`.\n\nExample file: [pizza](./examples/pizza)\n\n```bash\n$ node ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizzas ordering\n\nOptions:\n  -V, --version        output the version number\n  -p, --peppers        Add peppers\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           display help for command\n```\n\nA `help` command is added by default if your command has subcommands. It can be used alone, or with a subcommand name to show\nfurther help for the subcommand. These are effectively the same if the `shell` program has implicit help:\n\n```bash\nshell help\nshell --help\n\nshell help spawn\nshell spawn --help\n```\n\n### Custom help\n\nYou can display extra information by listening for \"--help\".\n\nExample file: [custom-help](./examples/custom-help)\n\n```js\nprogram\n  .option('-f, --foo', 'enable some foo');\n\n// must be before .parse()\nprogram.on('--help', () => {\n  console.log('');\n  console.log('Example call:');\n  console.log('  $ custom-help --help');\n});\n```\n\nYields the following help output:\n\n```Text\nUsage: custom-help [options]\n\nOptions:\n  -f, --foo   enable some foo\n  -h, --help  display help for command\n\nExample call:\n  $ custom-help --help\n```\n\n### .usage and .name\n\nThese allow you to customise the usage description in the first line of the help. The name is otherwise\ndeduced from the (full) program arguments. Given:\n\n```js\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n```\n\nThe help will start with:\n\n```Text\nUsage: my-command [global options] command\n```\n\n### .help(cb)\n\nOutput help information and exit immediately. Optional callback cb allows post-processing of help text before it is displayed.\n\n### .outputHelp(cb)\n\nOutput help information without exiting.\nOptional callback cb allows post-processing of help text before it is displayed.\n\n### .helpInformation()\n\nGet the command help information as a string for processing or displaying yourself. (The text does not include the custom help\nfrom `--help` listeners.)\n\n### .helpOption(flags, description)\n\nOverride the default help flags and description.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n### .addHelpCommand()\n\nYou can explicitly turn on or off the implicit help command with `.addHelpCommand()` and `.addHelpCommand(false)`.\n\nYou can both turn on and customise the help command by supplying the name and description:\n\n```js\nprogram.addHelpCommand('assist [command]', 'show assistance');\n```\n\n## Custom event listeners\n\nYou can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.verbose;\n});\n\nprogram.on('command:*', function (operands) {\n  console.error(`error: unknown command '${operands[0]}'`);\n  const availableCommands = program.commands.map(cmd => cmd.name());\n  mySuggestBestMatch(operands[0], availableCommands);\n  process.exitCode = 1;\n});\n```\n\n## Bits and pieces\n\n### .parse() and .parseAsync()\n\nThe first argument to `.parse` is the array of strings to parse. You may omit the parameter to implicitly use `process.argv`.\n\nIf the arguments follow different conventions than node you can pass a `from` option in the second parameter:\n\n- 'node': default, `argv[0]` is the application and `argv[1]` is the script being run, with user parameters after that\n- 'electron': `argv[1]` varies depending on whether the electron application is packaged\n- 'user': all of the arguments from the user\n\nFor example:\n\n```js\nprogram.parse(process.argv); // Explicit, node conventions\nprogram.parse(); // Implicit, and auto-detect electron\nprogram.parse(['-f', 'filename'], { from: 'user' });\n```\n\n### Avoiding option name clashes\n\nThe original and default behaviour is that the option values are stored\nas properties on the program, and the action handler is passed a\ncommand object with the options values stored as properties.\nThis is very convenient to code, but the downside is possible clashes with\nexisting properties of Command.\n\nThere are two new routines to change the behaviour, and the default behaviour may change in the future:\n\n- `storeOptionsAsProperties`: whether to store option values as properties on command object, or store separately (specify false) and access using `.opts()`\n- `passCommandToAction`: whether to pass command to action handler,\nor just the options (specify false)\n\nExample file: [storeOptionsAsProperties-action.js](./examples/storeOptionsAsProperties-action.js)\n\n```js\nprogram\n  .storeOptionsAsProperties(false)\n  .passCommandToAction(false);\n\nprogram\n  .name('my-program-name')\n  .option('-n,--name <name>');\n\nprogram\n  .command('show')\n  .option('-a,--action <action>')\n  .action((options) => {\n    console.log(options.action);\n  });\n\nprogram.parse(process.argv);\n\nconst programOptions = program.opts();\nconsole.log(programOptions.name);\n```\n\n### TypeScript\n\nThe Commander package includes its TypeScript Definition file.\n\nIf you use `ts-node` and  stand-alone executable subcommands written as `.ts` files, you need to call your program through node to get the subcommands called correctly. e.g.\n\n```bash\nnode -r ts-node/register pm.ts\n```\n\n### createCommand()\n\nThis factory function creates a new command. It is exported and may be used instead of using `new`, like:\n\n```js\nconst { createCommand } = require('commander');\nconst program = createCommand();\n```\n\n`createCommand` is also a method of the Command object, and creates a new command rather than a subcommand. This gets used internally\nwhen creating subcommands using `.command()`, and you may override it to\ncustomise the new subcommand (examples using [subclass](./examples/custom-command-class.js) and [function](./examples/custom-command-function.js)).\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n\n- Use `#! /usr/bin/env node --harmony` in the subcommands scripts. (Note Windows does not support this pattern.)\n- Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning subcommand process.\n\n### Debugging stand-alone executable subcommands\n\nAn executable subcommand is launched as a separate child process.\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) executable subcommands using `node --inspect` et al,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\nIf you are using VSCode to debug executable subcommands you need to set the `\"autoAttachChildProcesses\": true` flag in your launch.json configuration.\n\n### Override exit handling\n\nBy default Commander calls `process.exit` when it detects errors, or after displaying the help or version. You can override\nthis behaviour and optionally supply a callback. The default override throws a `CommanderError`.\n\nThe override callback is passed a `CommanderError` with properties `exitCode` number, `code` string, and `message`. The default override behaviour is to throw the error, except for async handling of executable subcommand completion which carries on. The normal display of error messages or version or help\nis not affected by the override which is called after the display.\n\n```js\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // custom processing...\n}\n```\n\n## Examples\n\nExample file: [deploy](./examples/deploy)\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-C, --chdir <path>', 'change the working directory')\n  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n  .option('-T, --no-tests', 'ignore test hook');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option(\"-s, --setup_mode [mode]\", \"Which setup mode to use\")\n  .action(function(env, options){\n    const mode = options.setup_mode || \"normal\";\n    env = env || 'all';\n    console.log('setup for %s env(s) with %s mode', env, mode);\n  });\n\nprogram\n  .command('exec <cmd>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option(\"-e, --exec_mode <mode>\", \"Which exec mode to use\")\n  .action(function(cmd, options){\n    console.log('exec \"%s\" using %s mode', cmd, options.exec_mode);\n  }).on('--help', function() {\n    console.log('');\n    console.log('Examples:');\n    console.log('');\n    console.log('  $ deploy exec sequential');\n    console.log('  $ deploy exec async');\n  });\n\nprogram.parse(process.argv);\n```\n\nMore Demos can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## Support\n\nCommander 5.x is fully supported on Long Term Support versions of Node, and is likely to work with Node 6 but not tested.\n(For versions of Node below Node 6, use Commander 3.x or 2.x.)\n\nThe main forum for free and community support is the project [Issues](https://github.com/tj/commander.js/issues) on GitHub.\n\n### Commander for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of Commander and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-commander?utm_source=npm-commander&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n","typings":"typings/index.d.ts","readmeFilename":"Readme.md","gitHead":"fc36472de1e2b0eccf205ba1854ac1acee1be76f","_nodeVersion":"12.14.1","_npmVersion":"6.13.4","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_6.0.0-0_1592633024189_0.9170190131393023"},"_hasShrinkwrap":false},"6.0.0":{"_id":"commander@6.0.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"6.0.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/jest":"^26.0.5","@types/node":"^14.0.23","@typescript-eslint/eslint-plugin":"^2.34.0","eslint":"^6.8.0","eslint-config-standard-with-typescript":"^16.0.0","eslint-plugin-jest":"^23.18.0","jest":"^26.1.0","standard":"^14.3.4","typescript":"^3.9.7"},"dependencies":{},"engines":{"node":">= 6"},"main":"index","dist":{"shasum":"2b270da94f8fb9014455312f829a1129dbf8887e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-6.0.0.tgz"},"typings":"typings/index.d.ts","gitHead":"c5a5e7b70d425d6f739bd84cc622c1d8775743f1","_nodeVersion":"14.5.0","_npmVersion":"6.14.6","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_6.0.0_1595167291790_0.6825361726430099"},"_hasShrinkwrap":false},"6.1.0":{"_id":"commander@6.1.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"6.1.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/jest":"^26.0.5","@types/node":"^14.0.23","@typescript-eslint/eslint-plugin":"^2.34.0","eslint":"^6.8.0","eslint-config-standard-with-typescript":"^16.0.0","eslint-plugin-jest":"^23.18.0","jest":"^26.1.0","standard":"^14.3.4","typescript":"^3.9.7"},"dependencies":{},"engines":{"node":">= 6"},"main":"index","dist":{"shasum":"f8d722b78103141006b66f4c7ba1e97315ba75bc","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-6.1.0.tgz"},"typings":"typings/index.d.ts","gitHead":"9c7cfc07d523faa9577249e5d18759186408115d","_nodeVersion":"14.8.0","_npmVersion":"6.14.8","maintainers":[{"email":"abe@enzou.tokyo","name":"abetomo"},{"email":"npm_j@ruru.gen.nz","name":"shadowspawn"},{"email":"rkoutnik@gmail.com","name":"somekittens"},{"email":"tj@vision-media.ca","name":"tjholowaychuk"},{"email":"romain.vanesyan@gmail.com","name":"vanesyan"},{"email":"zhiyelee@gmail.com","name":"zhiyelee"}],"_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_6.1.0_1598577774109_0.7753989550960525"},"_hasShrinkwrap":false},"6.2.0":{"_id":"commander@6.2.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"6.2.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":{},"devDependencies":{"@types/jest":"^26.0.15","@types/node":"^14.14.2","@typescript-eslint/eslint-plugin":"^4.5.0","eslint":"^7.11.0","eslint-config-standard-with-typescript":"^19.0.1","eslint-plugin-jest":"^24.1.0","jest":"^26.6.0","standard":"^15.0.0","typescript":"^4.0.3"},"dependencies":{},"engines":{"node":">= 6"},"main":"index","dist":{"shasum":"b990bfb8ac030aedc6d11bc04d1488ffef56db75","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-6.2.0.tgz"},"typings":"typings/index.d.ts","jest":{"collectCoverage":true},"gitHead":"0192d6664a0d52af54ba73e83b8527faa38508e8","_nodeVersion":"14.14.0","_npmVersion":"6.14.8","maintainers":[{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"vanesyan","email":"romain.vanesyan@gmail.com"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_6.2.0_1603593476723_0.15500338892678145"},"_hasShrinkwrap":false},"6.2.1":{"_id":"commander@6.2.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"6.2.1","keywords":["commander","command","option","parser","cli","argument","args","argv"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":""},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json"},"directories":null,"devDependencies":{"@types/jest":"^26.0.15","@types/node":"^14.14.2","@typescript-eslint/eslint-plugin":"^4.5.0","eslint":"^7.11.0","eslint-config-standard-with-typescript":"^19.0.1","eslint-plugin-jest":"^24.1.0","jest":"^26.6.0","standard":"^15.0.0","typescript":"^4.0.3"},"dependencies":{},"engines":{"node":">= 6"},"files":["index.js","typings/index.d.ts"],"main":"index","dist":{"shasum":"0792eb682dfbc325999bb2b84fddddba110ac73c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-6.2.1.tgz"},"typings":"typings/index.d.ts","jest":{"collectCoverage":true}},"7.0.0-0":{"_id":"commander@7.0.0-0","name":"commander","description":"the complete solution for node.js command-line programs","version":"7.0.0-0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json","typescript-checkJS":"tsc --allowJS --checkJS index.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-lint && npm run typescript-checkJS"},"directories":{},"devDependencies":{"@types/jest":"^26.0.15","@types/node":"^14.14.2","@typescript-eslint/eslint-plugin":"^4.5.0","eslint":"^7.11.0","eslint-config-standard-with-typescript":"^19.0.1","eslint-plugin-jest":"^24.1.0","jest":"^26.6.0","standard":"^15.0.0","typescript":"^4.0.3"},"dependencies":{},"engines":{"node":">= 6"},"main":"index","dist":{"shasum":"b4f780553cbd4b0f3dfe49c7a1d13b088353d474","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-7.0.0-0.tgz"},"readme":"# Commander.js\n\n[![Build Status](https://api.travis-ci.org/tj/commander.js.svg?branch=master)](http://travis-ci.org/tj/commander.js)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces.\n\nRead this in other languages: English | [简体中文](./Readme_zh-CN.md)\n\n- [Commander.js](#commanderjs)\n  - [Installation](#installation)\n  - [Declaring _program_ variable](#declaring-program-variable)\n  - [Options](#options)\n    - [Common option types, boolean and value](#common-option-types-boolean-and-value)\n    - [Default option value](#default-option-value)\n    - [Other option types, negatable boolean and boolean|value](#other-option-types-negatable-boolean-and-booleanvalue)\n    - [Required option](#required-option)\n    - [Variadic option](#variadic-option)\n    - [Version option](#version-option)\n    - [More configuration](#more-configuration)\n    - [Custom option processing](#custom-option-processing)\n  - [Commands](#commands)\n    - [Specify the argument syntax](#specify-the-argument-syntax)\n    - [Action handler (sub)commands](#action-handler-subcommands)\n    - [Stand-alone executable (sub)commands](#stand-alone-executable-subcommands)\n  - [Automated help](#automated-help)\n    - [Custom help](#custom-help)\n    - [Display help from code](#display-help-from-code)\n    - [.usage and .name](#usage-and-name)\n    - [.helpOption(flags, description)](#helpoptionflags-description)\n    - [.addHelpCommand()](#addhelpcommand)\n    - [More configuration](#more-configuration-1)\n  - [Custom event listeners](#custom-event-listeners)\n  - [Bits and pieces](#bits-and-pieces)\n    - [.parse() and .parseAsync()](#parse-and-parseasync)\n    - [Avoiding option name clashes](#avoiding-option-name-clashes)\n    - [TypeScript](#typescript)\n    - [createCommand()](#createcommand)\n    - [Import into ECMAScript Module](#import-into-ecmascript-module)\n    - [Node options such as `--harmony`](#node-options-such-as---harmony)\n    - [Debugging stand-alone executable subcommands](#debugging-stand-alone-executable-subcommands)\n    - [Override exit handling](#override-exit-handling)\n    - [Additional documentation](#additional-documentation)\n  - [Examples](#examples)\n  - [Support](#support)\n    - [Commander for enterprise](#commander-for-enterprise)\n\nFor information about terms used in this document see: [terminology](./docs/terminology.md)\n\n## Installation\n\n```bash\nnpm install commander\n```\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\nconst { program } = require('commander');\nprogram.version('0.0.1');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n```js\nconst { Command } = require('commander');\nconst program = new Command();\nprogram.version('0.0.1');\n```\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space or vertical bar ('|').\n\nThe options can be accessed as properties on the Command object. Multi-word options such as \"--template-engine\" are camel-cased, becoming `program.templateEngine` etc. See also optional new behaviour to [avoid name clashes](#avoiding-option-name-clashes).\n\nMultiple short flags may optionally be combined in a single argument following the dash: boolean flags, followed by a single option taking a value (possibly followed by the value).\nFor example `-a -b -p 80` may be written as `-ab -p80` or even `-abp80`.\n\nYou can use `--` to indicate the end of the options, and any remaining arguments will be used without being interpreted.\n\nOptions on the command line are not positional, and can be specified before or after other arguments.\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean option, and an option which takes its value\nfrom the following argument (declared with angle brackets like `--expect <value>`). Both are `undefined` unless specified on command line.  \n\nExample file: [options-common.js](./examples/options-common.js)\n\n```js\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nif (program.debug) console.log(program.opts());\nconsole.log('pizza details:');\nif (program.small) console.log('- small pizza size');\nif (program.pizzaType) console.log(`- ${program.pizzaType}`);\n```\n\n```bash\n$ pizza-options -d\n{ debug: true, small: undefined, pizzaType: undefined }\npizza details:\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -ds -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the program options in the `program.args` array.\n\n### Default option value\n\nYou can specify a default value for an option which takes a value.\n\nExample file: [options-defaults.js](./examples/options-defaults.js)\n\n```js\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse(process.argv);\n\nconsole.log(`cheese: ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and boolean|value\n\nYou can define a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be. You can specify a default boolean value for a boolean option and it can be overridden on command line.\n\nExample file: [options-negatable.js](./examples/options-negatable.js)\n\n```js\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse(process.argv);\n\nconst sauceStr = program.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (program.cheese === false) ? 'no cheese' : `${program.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```bash\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which may be used as a boolean option but may optionally take an option-argument\n(declared with square brackets like `--optional [value]`).\n\nExample file: [options-boolean-or-value.js](./examples/options-boolean-or-value.js)\n\n```js\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nif (program.cheese === undefined) console.log('no cheese');\nelse if (program.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-taking-varying-arguments.md).\n\n### Required option\n\nYou may specify a required (mandatory) option using `.requiredOption`. The option must have a value after parsing, usually specified on the command line, or perhaps from a default value (say from environment). The method is otherwise the same as `.option` in format, taking flags and description, and optional default value or custom processing.\n\nExample file: [options-required.js](./examples/options-required.js)\n\n```js\nprogram\n  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse(process.argv);\n```\n\n```bash\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n```\n\n### Variadic option\n\nYou may make an option variadic by appending `...` to the value placeholder when declaring the option. On the command line you\ncan then specify multiple option-arguments, and the parsed option value will be an array. The extra arguments\nare read until the first argument starting with a dash. The special argument `--` stops option processing entirely. If a value\nis specified in the same argument as the option then no further values are read.\n\nExample file: [options-variadic.js](./examples/options-variadic.js)\n\n```js\nprogram\n  .option('-n, --number <numbers...>', 'specify numbers')\n  .option('-l, --letter [letters...]', 'specify letters');\n\nprogram.parse();\n\nconsole.log('Options: ', program.opts());\nconsole.log('Remaining arguments: ', program.args);\n```\n\n```bash\n$ collect -n 1 2 3 --letter a b c\nOptions:  { number: [ '1', '2', '3' ], letter: [ 'a', 'b', 'c' ] }\nRemaining arguments:  []\n$ collect --letter=A -n80 operand\nOptions:  { number: [ '80' ], letter: [ 'A' ] }\nRemaining arguments:  [ 'operand' ]\n$ collect --letter -n 1 -n 2 3 -- operand\nOptions:  { number: [ '1', '2', '3' ], letter: true }\nRemaining arguments:  [ 'operand' ]\n```\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-taking-varying-arguments.md).\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```bash\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n### More configuration\n\nYou can add most options using the `.option()` method, but there are some additional features available\nby constructing an `Option` explicitly for less common cases.\n\nExample file: [options-extra.js](./examples/options-extra.js)\n\n```js\nprogram\n  .addOption(new Option('-s, --secret').hideHelp())\n  .addOption(new Option('-t, --timeout <delay>', 'timeout in seconds').default(60, 'one minute'))\n  .addOption(new Option('-d, --drink <size>', 'drink size').choices(['small', 'medium', 'large']));\n```\n\n```bash\n$ extra --help\nUsage: help [options]\n\nOptions:\n  -t, --timeout <delay>  timeout in seconds (default: one minute)\n  -d, --drink <size>     drink cup size (choices: \"small\", \"medium\", \"large\")\n  -h, --help             display help for command\n\n$ extra --drink huge\nerror: option '-d, --drink <size>' argument of 'huge' not in allowed choices: small, medium, large\n```\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option-arguments. The callback function receives two parameters,\nthe user specified option-argument and the previous value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option-argument to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function parameter.\n\nExample file: [options-custom-processing.js](./examples/options-custom-processing.js)\n\n```js\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and an optional radix\n  return parseInt(value);\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse(process.argv);\n\nif (program.float !== undefined) console.log(`float: ${program.float}`);\nif (program.integer !== undefined) console.log(`integer: ${program.integer}`);\nif (program.verbose > 0) console.log(`verbosity: ${program.verbose}`);\nif (program.collect.length > 0) console.log(program.collect);\nif (program.list !== undefined) console.log(program.list);\n```\n\n```bash\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n## Commands\n\nYou can specify (sub)commands using `.command()` or `.addCommand()`. There are two ways these can be implemented: using an action handler attached to the command, or as a stand-alone executable file (described in more detail later). The subcommands may be nested ([example](./examples/nestedCommands.js)).\n\nIn the first parameter to `.command()` you specify the command name and any command-arguments. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nYou can use `.addCommand()` to add an already configured subcommand to the program.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using stand-alone executable file (description is second parameter to `.command`)\n// Returns `this` for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n\n// Command prepared separately.\n// Returns `this` for adding more commands.\nprogram\n  .addCommand(build.makeBuildCommand());\n```\n\nConfiguration options can be passed with the call to `.command()` and `.addCommand()`. Specifying `hidden: true` will \nremove the command from the generated help output. Specifying `isDefault: true` will run the subcommand if no other\nsubcommand is specified ([example](./examples/defaultCommand.js)).\n\n### Specify the argument syntax\n\nYou use `.arguments` to specify the expected command-arguments for the top-level command, and for subcommands they are usually\nincluded in the `.command` call. Angled brackets (e.g. `<required>`) indicate required command-arguments.\nSquare brackets (e.g. `[optional]`) indicate optional command-arguments.\nYou can optionally describe the arguments in the help by supplying a hash as second parameter to `.description()`.\n\nExample file: [env](./examples/env)\n\n```js\nprogram\n  .version('0.1.0')\n  .arguments('<cmd> [env]')\n  .description('test command', {\n    cmd: 'command to run',\n    env: 'environment to run test in'\n  })\n  .action(function (cmd, env) {\n    console.log('command:', cmd);\n    console.log('environment:', env || 'no environment given');\n  });\n\nprogram.parse(process.argv);\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. For example:\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('rmdir <dir> [otherDirs...]')\n  .action(function (dir, otherDirs) {\n    console.log('rmdir %s', dir);\n    if (otherDirs) {\n      otherDirs.forEach(function (oDir) {\n        console.log('rmdir %s', oDir);\n      });\n    }\n  });\n\nprogram.parse(process.argv);\n```\n\nThe variadic argument is passed to the action handler as an array.\n\n### Action handler (sub)commands\n\nYou can add options to a command that uses an action handler.\nThe action handler gets passed a parameter for each argument you declared, and one additional argument which is the\ncommand object itself. This command argument has the values for the command-specific options added as properties.\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .command('rm <dir>')\n  .option('-r, --recursive', 'Remove recursively')\n  .action(function (dir, cmdObj) {\n    console.log('remove ' + dir + (cmdObj.recursive ? ' recursively' : ''))\n  })\n\nprogram.parse(process.argv)\n```\n\nYou may supply an `async` action handler, in which case you call `.parseAsync` rather than `.parse`.\n\n```js\nasync function run() { /* code goes here */ }\n\nasync function main() {\n  program\n    .command('run')\n    .action(run);\n  await program.parseAsync(process.argv);\n}\n```\n\nA command's options on the command line are validated when the command is used. Any unknown options will be reported as an error.\n\n### Stand-alone executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells Commander that you're going to use stand-alone executables for subcommands.\nCommander will search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-subcommand`, like `pm-install`, `pm-search`.\nYou can specify a custom name with the `executableFile` configuration option.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\nExample file: [pm](./examples/pm)\n\n```js\nprogram\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', { executableFile: 'myUpdateSubCommand' })\n  .command('list', 'list packages installed', { isDefault: true });\n\nprogram.parse(process.argv);\n```\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n## Automated help\n\nThe help information is auto-generated based on the information commander already knows about your program. The default\nhelp option is `-h,--help`.\n\nExample file: [pizza](./examples/pizza)\n\n```bash\n$ node ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizzas ordering\n\nOptions:\n  -V, --version        output the version number\n  -p, --peppers        Add peppers\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           display help for command\n```\n\nA `help` command is added by default if your command has subcommands. It can be used alone, or with a subcommand name to show\nfurther help for the subcommand. These are effectively the same if the `shell` program has implicit help:\n\n```bash\nshell help\nshell --help\n\nshell help spawn\nshell spawn --help\n```\n\n### Custom help\n\nYou can add extra text to be displayed along with the built-in help. \n\nExample file: [custom-help](./examples/custom-help)\n\n```js\nprogram\n  .option('-f, --foo', 'enable some foo');\n\nprogram.addHelpText('after', `\n\nExample call:\n  $ custom-help --help`);\n```\n\nYields the following help output:\n\n```Text\nUsage: custom-help [options]\n\nOptions:\n  -f, --foo   enable some foo\n  -h, --help  display help for command\n\nExample call:\n  $ custom-help --help\n```\n\nThe positions in order displayed are:\n\n- `beforeAll`: add to the program for a global banner or header\n- `before`: display extra information before built-in help\n- `after`: display extra information after built-in help\n- `afterAll`: add to the program for a global footer (epilog)\n\nThe positions \"beforeAll\" and \"afterAll\" apply to the command and all its subcommands. \n\nThe second parameter can be a string, or a function returning a string. The function is passed a context object for your convenience. The properties are:\n\n- error: a boolean for whether the help is being displayed due to a usage error\n- command: the Command which is displaying the help\n\n### Display help from code\n\n`.help()`: display help information and exit immediately. You can optionally pass `{ error: true }` to display on stderr and exit with an error status.\n\n`.outputHelp()`: output help information without exiting. You can optionally pass `{ error: true }` to display on stderr.\n\n`.helpInformation()`: get the built-in command help information as a string for processing or displaying yourself.\n\n### .usage and .name\n\nThese allow you to customise the usage description in the first line of the help. The name is otherwise\ndeduced from the (full) program arguments. Given:\n\n```js\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n```\n\nThe help will start with:\n\n```Text\nUsage: my-command [global options] command\n```\n\n### .helpOption(flags, description)\n\nBy default every command has a help option. Override the default help flags and description. Pass false to disable the built-in help option.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n### .addHelpCommand()\n\nA help command is added by default if your command has subcommands. You can explicitly turn on or off the implicit help command with `.addHelpCommand()` and `.addHelpCommand(false)`.\n\nYou can both turn on and customise the help command by supplying the name and description:\n\n```js\nprogram.addHelpCommand('assist [command]', 'show assistance');\n```\n\n### More configuration\n\nThe built-in help is formatted using the Help class.\nYou can configure the Help behaviour by modifying data properties and methods using `.configureHelp()`, or by subclassing using `.createHelp()` if you prefer.\n\nThe data properties are:\n\n- `columns`: specify the wrap width, useful for unit tests\n- `sortSubcommands`: sort the subcommands alphabetically\n- `sortOptions`: sort the options alphabetically\n\nThere are methods getting the visible lists of arguments, options, and subcommands. There are methods for formatting the items in the lists, with each item having a _term_ and _description_. Take a look at `.formatHelp()` to see how they are used.\n\nExample file: [configure-help.js](./examples/configure-help.js)\n\n```\nprogram.configureHelp({\n  sortSubcommands: true,\n  subcommandTerm: (cmd) => cmd.name() // Just show the name, instead of short usage.\n});\n```\n\n## Custom event listeners\n\nYou can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.verbose;\n});\n\nprogram.on('command:*', function (operands) {\n  console.error(`error: unknown command '${operands[0]}'`);\n  const availableCommands = program.commands.map(cmd => cmd.name());\n  mySuggestBestMatch(operands[0], availableCommands);\n  process.exitCode = 1;\n});\n```\n\n## Bits and pieces\n\n### .parse() and .parseAsync()\n\nThe first argument to `.parse` is the array of strings to parse. You may omit the parameter to implicitly use `process.argv`.\n\nIf the arguments follow different conventions than node you can pass a `from` option in the second parameter:\n\n- 'node': default, `argv[0]` is the application and `argv[1]` is the script being run, with user parameters after that\n- 'electron': `argv[1]` varies depending on whether the electron application is packaged\n- 'user': all of the arguments from the user\n\nFor example:\n\n```js\nprogram.parse(process.argv); // Explicit, node conventions\nprogram.parse(); // Implicit, and auto-detect electron\nprogram.parse(['-f', 'filename'], { from: 'user' });\n```\n\n### Avoiding option name clashes\n\nThe original and default behaviour is that the option values are stored\nas properties on the program, and the action handler is passed a\ncommand object with the options values stored as properties.\nThis is very convenient to code, but the downside is possible clashes with\nexisting properties of Command.\n\nThere are two new routines to change the behaviour, and the default behaviour may change in the future:\n\n- `storeOptionsAsProperties`: whether to store option values as properties on command object, or store separately (specify false) and access using `.opts()`\n- `passCommandToAction`: whether to pass command to action handler,\nor just the options (specify false)\n\nExample file: [storeOptionsAsProperties-action.js](./examples/storeOptionsAsProperties-action.js)\n\n```js\nprogram\n  .storeOptionsAsProperties(false)\n  .passCommandToAction(false);\n\nprogram\n  .name('my-program-name')\n  .option('-n,--name <name>');\n\nprogram\n  .command('show')\n  .option('-a,--action <action>')\n  .action((options) => {\n    console.log(options.action);\n  });\n\nprogram.parse(process.argv);\n\nconst programOptions = program.opts();\nconsole.log(programOptions.name);\n```\n\n### TypeScript\n\nThe Commander package includes its TypeScript Definition file.\n\nIf you use `ts-node` and  stand-alone executable subcommands written as `.ts` files, you need to call your program through node to get the subcommands called correctly. e.g.\n\n```bash\nnode -r ts-node/register pm.ts\n```\n\n### createCommand()\n\nThis factory function creates a new command. It is exported and may be used instead of using `new`, like:\n\n```js\nconst { createCommand } = require('commander');\nconst program = createCommand();\n```\n\n`createCommand` is also a method of the Command object, and creates a new command rather than a subcommand. This gets used internally\nwhen creating subcommands using `.command()`, and you may override it to\ncustomise the new subcommand (examples using [subclass](./examples/custom-command-class.js) and [function](./examples/custom-command-function.js)).\n\n### Import into ECMAScript Module\n\nCommander is currently a CommonJS package, and the default export can be imported into an ES Module:\n\n```js\n// index.mjs\nimport commander from 'commander';\nconst program = commander.program;\nconst newCommand = new commander.Command();\n```\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n\n- Use `#! /usr/bin/env node --harmony` in the subcommands scripts. (Note Windows does not support this pattern.)\n- Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning subcommand process.\n\n### Debugging stand-alone executable subcommands\n\nAn executable subcommand is launched as a separate child process.\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) executable subcommands using `node --inspect` et al,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\nIf you are using VSCode to debug executable subcommands you need to set the `\"autoAttachChildProcesses\": true` flag in your launch.json configuration.\n\n### Override exit handling\n\nBy default Commander calls `process.exit` when it detects errors, or after displaying the help or version. You can override\nthis behaviour and optionally supply a callback. The default override throws a `CommanderError`.\n\nThe override callback is passed a `CommanderError` with properties `exitCode` number, `code` string, and `message`. The default override behaviour is to throw the error, except for async handling of executable subcommand completion which carries on. The normal display of error messages or version or help\nis not affected by the override which is called after the display.\n\n```js\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // custom processing...\n}\n```\n\n### Additional documentation\n\nThere is more information available about:\n\n- [deprecated](./docs/deprecated.md) features still supported for backwards compatibility\n- [options taking varying arguments](./docs/options-taking-varying-arguments.md)\n\n## Examples\n\nExample file: [deploy](./examples/deploy)\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-C, --chdir <path>', 'change the working directory')\n  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n  .option('-T, --no-tests', 'ignore test hook');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option(\"-s, --setup_mode [mode]\", \"Which setup mode to use\")\n  .action(function(env, options){\n    const mode = options.setup_mode || \"normal\";\n    env = env || 'all';\n    console.log('setup for %s env(s) with %s mode', env, mode);\n  });\n\nprogram\n  .command('exec <cmd>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option(\"-e, --exec_mode <mode>\", \"Which exec mode to use\")\n  .action(function(cmd, options){\n    console.log('exec \"%s\" using %s mode', cmd, options.exec_mode);\n  }).addHelpText('after', `\nExamples:\n  $ deploy exec sequential\n  $ deploy exec async`\n  );\n\nprogram.parse(process.argv);\n```\n\nMore Demos can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## Support\n\nThe current version of Commander is fully supported on Long Term Support versions of Node, and is likely to work with Node 6 but not tested.\n(For versions of Node below Node 6, use Commander 3.x or 2.x.)\n\nThe main forum for free and community support is the project [Issues](https://github.com/tj/commander.js/issues) on GitHub.\n\n### Commander for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of Commander and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-commander?utm_source=npm-commander&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n","typings":"typings/index.d.ts","jest":{"collectCoverage":true},"readmeFilename":"Readme.md","gitHead":"0703a4d94794bec546537e5782ac212ce10fd870","_nodeVersion":"12.19.0","_npmVersion":"6.14.8","maintainers":[{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"vanesyan","email":"romain.vanesyan@gmail.com"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_7.0.0-0_1603601354427_0.016890314319127908"},"_hasShrinkwrap":false},"7.0.0-1":{"_id":"commander@7.0.0-1","name":"commander","description":"the complete solution for node.js command-line programs","version":"7.0.0-1","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json","typescript-checkJS":"tsc --allowJS --checkJS index.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-lint && npm run typescript-checkJS"},"directories":{},"devDependencies":{"@types/jest":"^26.0.15","@types/node":"^14.14.2","@typescript-eslint/eslint-plugin":"^4.5.0","eslint":"^7.11.0","eslint-config-standard-with-typescript":"^19.0.1","eslint-plugin-jest":"^24.1.0","jest":"^26.6.0","standard":"^15.0.0","typescript":"^4.0.3"},"dependencies":{},"engines":{"node":">= 6"},"main":"index","dist":{"shasum":"c55188136d80d1a0df19ae21c3317fa0bc21c6a0","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-7.0.0-1.tgz"},"readme":"# Commander.js\n\n[![Build Status](https://github.com/tj/commander.js/workflows/build/badge.svg)](https://github.com/tj/commander.js/actions?query=workflow%3A%22build%22)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces.\n\nRead this in other languages: English | [简体中文](./Readme_zh-CN.md)\n\n- [Commander.js](#commanderjs)\n  - [Installation](#installation)\n  - [Declaring _program_ variable](#declaring-program-variable)\n  - [Options](#options)\n    - [Common option types, boolean and value](#common-option-types-boolean-and-value)\n    - [Default option value](#default-option-value)\n    - [Other option types, negatable boolean and boolean|value](#other-option-types-negatable-boolean-and-booleanvalue)\n    - [Required option](#required-option)\n    - [Variadic option](#variadic-option)\n    - [Version option](#version-option)\n    - [More configuration](#more-configuration)\n    - [Custom option processing](#custom-option-processing)\n  - [Commands](#commands)\n    - [Specify the argument syntax](#specify-the-argument-syntax)\n    - [Action handler (sub)commands](#action-handler-subcommands)\n    - [Stand-alone executable (sub)commands](#stand-alone-executable-subcommands)\n  - [Automated help](#automated-help)\n    - [Custom help](#custom-help)\n    - [Display help from code](#display-help-from-code)\n    - [.usage and .name](#usage-and-name)\n    - [.helpOption(flags, description)](#helpoptionflags-description)\n    - [.addHelpCommand()](#addhelpcommand)\n    - [More configuration](#more-configuration-1)\n  - [Custom event listeners](#custom-event-listeners)\n  - [Bits and pieces](#bits-and-pieces)\n    - [.parse() and .parseAsync()](#parse-and-parseasync)\n    - [Avoiding option name clashes](#avoiding-option-name-clashes)\n    - [TypeScript](#typescript)\n    - [createCommand()](#createcommand)\n    - [Import into ECMAScript Module](#import-into-ecmascript-module)\n    - [Node options such as `--harmony`](#node-options-such-as---harmony)\n    - [Debugging stand-alone executable subcommands](#debugging-stand-alone-executable-subcommands)\n    - [Override exit and output handling](#override-exit-and-output-handling)\n    - [Additional documentation](#additional-documentation)\n  - [Examples](#examples)\n  - [Support](#support)\n    - [Commander for enterprise](#commander-for-enterprise)\n\nFor information about terms used in this document see: [terminology](./docs/terminology.md)\n\n## Installation\n\n```bash\nnpm install commander\n```\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\nconst { program } = require('commander');\nprogram.version('0.0.1');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n```js\nconst { Command } = require('commander');\nconst program = new Command();\nprogram.version('0.0.1');\n```\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space or vertical bar ('|').\n\nThe options can be accessed as properties on the Command object. Multi-word options such as \"--template-engine\" are camel-cased, becoming `program.templateEngine` etc. See also optional new behaviour to [avoid name clashes](#avoiding-option-name-clashes).\n\nMultiple short flags may optionally be combined in a single argument following the dash: boolean flags, followed by a single option taking a value (possibly followed by the value).\nFor example `-a -b -p 80` may be written as `-ab -p80` or even `-abp80`.\n\nYou can use `--` to indicate the end of the options, and any remaining arguments will be used without being interpreted.\n\nOptions on the command line are not positional, and can be specified before or after other arguments.\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean option, and an option which takes its value\nfrom the following argument (declared with angle brackets like `--expect <value>`). Both are `undefined` unless specified on command line.  \n\nExample file: [options-common.js](./examples/options-common.js)\n\n```js\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nif (program.debug) console.log(program.opts());\nconsole.log('pizza details:');\nif (program.small) console.log('- small pizza size');\nif (program.pizzaType) console.log(`- ${program.pizzaType}`);\n```\n\n```bash\n$ pizza-options -d\n{ debug: true, small: undefined, pizzaType: undefined }\npizza details:\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -ds -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the program options in the `program.args` array.\n\n### Default option value\n\nYou can specify a default value for an option which takes a value.\n\nExample file: [options-defaults.js](./examples/options-defaults.js)\n\n```js\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse(process.argv);\n\nconsole.log(`cheese: ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and boolean|value\n\nYou can define a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be. You can specify a default boolean value for a boolean option and it can be overridden on command line.\n\nExample file: [options-negatable.js](./examples/options-negatable.js)\n\n```js\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse(process.argv);\n\nconst sauceStr = program.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (program.cheese === false) ? 'no cheese' : `${program.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```bash\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which may be used as a boolean option but may optionally take an option-argument\n(declared with square brackets like `--optional [value]`).\n\nExample file: [options-boolean-or-value.js](./examples/options-boolean-or-value.js)\n\n```js\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nif (program.cheese === undefined) console.log('no cheese');\nelse if (program.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${program.cheese}`);\n```\n\n```bash\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-taking-varying-arguments.md).\n\n### Required option\n\nYou may specify a required (mandatory) option using `.requiredOption`. The option must have a value after parsing, usually specified on the command line, or perhaps from a default value (say from environment). The method is otherwise the same as `.option` in format, taking flags and description, and optional default value or custom processing.\n\nExample file: [options-required.js](./examples/options-required.js)\n\n```js\nprogram\n  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse(process.argv);\n```\n\n```bash\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n```\n\n### Variadic option\n\nYou may make an option variadic by appending `...` to the value placeholder when declaring the option. On the command line you\ncan then specify multiple option-arguments, and the parsed option value will be an array. The extra arguments\nare read until the first argument starting with a dash. The special argument `--` stops option processing entirely. If a value\nis specified in the same argument as the option then no further values are read.\n\nExample file: [options-variadic.js](./examples/options-variadic.js)\n\n```js\nprogram\n  .option('-n, --number <numbers...>', 'specify numbers')\n  .option('-l, --letter [letters...]', 'specify letters');\n\nprogram.parse();\n\nconsole.log('Options: ', program.opts());\nconsole.log('Remaining arguments: ', program.args);\n```\n\n```bash\n$ collect -n 1 2 3 --letter a b c\nOptions:  { number: [ '1', '2', '3' ], letter: [ 'a', 'b', 'c' ] }\nRemaining arguments:  []\n$ collect --letter=A -n80 operand\nOptions:  { number: [ '80' ], letter: [ 'A' ] }\nRemaining arguments:  [ 'operand' ]\n$ collect --letter -n 1 -n 2 3 -- operand\nOptions:  { number: [ '1', '2', '3' ], letter: true }\nRemaining arguments:  [ 'operand' ]\n```\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-taking-varying-arguments.md).\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```bash\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n### More configuration\n\nYou can add most options using the `.option()` method, but there are some additional features available\nby constructing an `Option` explicitly for less common cases.\n\nExample file: [options-extra.js](./examples/options-extra.js)\n\n```js\nprogram\n  .addOption(new Option('-s, --secret').hideHelp())\n  .addOption(new Option('-t, --timeout <delay>', 'timeout in seconds').default(60, 'one minute'))\n  .addOption(new Option('-d, --drink <size>', 'drink size').choices(['small', 'medium', 'large']));\n```\n\n```bash\n$ extra --help\nUsage: help [options]\n\nOptions:\n  -t, --timeout <delay>  timeout in seconds (default: one minute)\n  -d, --drink <size>     drink cup size (choices: \"small\", \"medium\", \"large\")\n  -h, --help             display help for command\n\n$ extra --drink huge\nerror: option '-d, --drink <size>' argument of 'huge' not in allowed choices: small, medium, large\n```\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option-arguments. The callback function receives two parameters,\nthe user specified option-argument and the previous value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option-argument to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function parameter.\n\nExample file: [options-custom-processing.js](./examples/options-custom-processing.js)\n\n```js\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and an optional radix\n  return parseInt(value);\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse(process.argv);\n\nif (program.float !== undefined) console.log(`float: ${program.float}`);\nif (program.integer !== undefined) console.log(`integer: ${program.integer}`);\nif (program.verbose > 0) console.log(`verbosity: ${program.verbose}`);\nif (program.collect.length > 0) console.log(program.collect);\nif (program.list !== undefined) console.log(program.list);\n```\n\n```bash\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n## Commands\n\nYou can specify (sub)commands using `.command()` or `.addCommand()`. There are two ways these can be implemented: using an action handler attached to the command, or as a stand-alone executable file (described in more detail later). The subcommands may be nested ([example](./examples/nestedCommands.js)).\n\nIn the first parameter to `.command()` you specify the command name and any command-arguments. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nYou can use `.addCommand()` to add an already configured subcommand to the program.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using stand-alone executable file (description is second parameter to `.command`)\n// Returns `this` for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n\n// Command prepared separately.\n// Returns `this` for adding more commands.\nprogram\n  .addCommand(build.makeBuildCommand());\n```\n\nConfiguration options can be passed with the call to `.command()` and `.addCommand()`. Specifying `hidden: true` will \nremove the command from the generated help output. Specifying `isDefault: true` will run the subcommand if no other\nsubcommand is specified ([example](./examples/defaultCommand.js)).\n\n### Specify the argument syntax\n\nYou use `.arguments` to specify the expected command-arguments for the top-level command, and for subcommands they are usually\nincluded in the `.command` call. Angled brackets (e.g. `<required>`) indicate required command-arguments.\nSquare brackets (e.g. `[optional]`) indicate optional command-arguments.\nYou can optionally describe the arguments in the help by supplying a hash as second parameter to `.description()`.\n\nExample file: [env](./examples/env)\n\n```js\nprogram\n  .version('0.1.0')\n  .arguments('<cmd> [env]')\n  .description('test command', {\n    cmd: 'command to run',\n    env: 'environment to run test in'\n  })\n  .action(function (cmd, env) {\n    console.log('command:', cmd);\n    console.log('environment:', env || 'no environment given');\n  });\n\nprogram.parse(process.argv);\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. For example:\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .version('0.1.0')\n  .command('rmdir <dir> [otherDirs...]')\n  .action(function (dir, otherDirs) {\n    console.log('rmdir %s', dir);\n    if (otherDirs) {\n      otherDirs.forEach(function (oDir) {\n        console.log('rmdir %s', oDir);\n      });\n    }\n  });\n\nprogram.parse(process.argv);\n```\n\nThe variadic argument is passed to the action handler as an array.\n\n### Action handler (sub)commands\n\nYou can add options to a command that uses an action handler.\nThe action handler gets passed a parameter for each argument you declared, and one additional argument which is the\ncommand object itself. This command argument has the values for the command-specific options added as properties.\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .command('rm <dir>')\n  .option('-r, --recursive', 'Remove recursively')\n  .action(function (dir, cmdObj) {\n    console.log('remove ' + dir + (cmdObj.recursive ? ' recursively' : ''))\n  })\n\nprogram.parse(process.argv)\n```\n\nYou may supply an `async` action handler, in which case you call `.parseAsync` rather than `.parse`.\n\n```js\nasync function run() { /* code goes here */ }\n\nasync function main() {\n  program\n    .command('run')\n    .action(run);\n  await program.parseAsync(process.argv);\n}\n```\n\nA command's options on the command line are validated when the command is used. Any unknown options will be reported as an error.\n\n### Stand-alone executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells Commander that you're going to use stand-alone executables for subcommands.\nCommander will search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-subcommand`, like `pm-install`, `pm-search`.\nYou can specify a custom name with the `executableFile` configuration option.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\nExample file: [pm](./examples/pm)\n\n```js\nprogram\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', { executableFile: 'myUpdateSubCommand' })\n  .command('list', 'list packages installed', { isDefault: true });\n\nprogram.parse(process.argv);\n```\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n## Automated help\n\nThe help information is auto-generated based on the information commander already knows about your program. The default\nhelp option is `-h,--help`.\n\nExample file: [pizza](./examples/pizza)\n\n```bash\n$ node ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizzas ordering\n\nOptions:\n  -V, --version        output the version number\n  -p, --peppers        Add peppers\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           display help for command\n```\n\nA `help` command is added by default if your command has subcommands. It can be used alone, or with a subcommand name to show\nfurther help for the subcommand. These are effectively the same if the `shell` program has implicit help:\n\n```bash\nshell help\nshell --help\n\nshell help spawn\nshell spawn --help\n```\n\n### Custom help\n\nYou can add extra text to be displayed along with the built-in help. \n\nExample file: [custom-help](./examples/custom-help)\n\n```js\nprogram\n  .option('-f, --foo', 'enable some foo');\n\nprogram.addHelpText('after', `\n\nExample call:\n  $ custom-help --help`);\n```\n\nYields the following help output:\n\n```Text\nUsage: custom-help [options]\n\nOptions:\n  -f, --foo   enable some foo\n  -h, --help  display help for command\n\nExample call:\n  $ custom-help --help\n```\n\nThe positions in order displayed are:\n\n- `beforeAll`: add to the program for a global banner or header\n- `before`: display extra information before built-in help\n- `after`: display extra information after built-in help\n- `afterAll`: add to the program for a global footer (epilog)\n\nThe positions \"beforeAll\" and \"afterAll\" apply to the command and all its subcommands. \n\nThe second parameter can be a string, or a function returning a string. The function is passed a context object for your convenience. The properties are:\n\n- error: a boolean for whether the help is being displayed due to a usage error\n- command: the Command which is displaying the help\n\n### Display help from code\n\n`.help()`: display help information and exit immediately. You can optionally pass `{ error: true }` to display on stderr and exit with an error status.\n\n`.outputHelp()`: output help information without exiting. You can optionally pass `{ error: true }` to display on stderr.\n\n`.helpInformation()`: get the built-in command help information as a string for processing or displaying yourself.\n\n### .usage and .name\n\nThese allow you to customise the usage description in the first line of the help. The name is otherwise\ndeduced from the (full) program arguments. Given:\n\n```js\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n```\n\nThe help will start with:\n\n```Text\nUsage: my-command [global options] command\n```\n\n### .helpOption(flags, description)\n\nBy default every command has a help option. Override the default help flags and description. Pass false to disable the built-in help option.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n### .addHelpCommand()\n\nA help command is added by default if your command has subcommands. You can explicitly turn on or off the implicit help command with `.addHelpCommand()` and `.addHelpCommand(false)`.\n\nYou can both turn on and customise the help command by supplying the name and description:\n\n```js\nprogram.addHelpCommand('assist [command]', 'show assistance');\n```\n\n### More configuration\n\nThe built-in help is formatted using the Help class.\nYou can configure the Help behaviour by modifying data properties and methods using `.configureHelp()`, or by subclassing using `.createHelp()` if you prefer.\n\nThe data properties are:\n\n- `helpWidth`: specify the wrap width, useful for unit tests\n- `sortSubcommands`: sort the subcommands alphabetically\n- `sortOptions`: sort the options alphabetically\n\nThere are methods getting the visible lists of arguments, options, and subcommands. There are methods for formatting the items in the lists, with each item having a _term_ and _description_. Take a look at `.formatHelp()` to see how they are used.\n\nExample file: [configure-help.js](./examples/configure-help.js)\n\n```\nprogram.configureHelp({\n  sortSubcommands: true,\n  subcommandTerm: (cmd) => cmd.name() // Just show the name, instead of short usage.\n});\n```\n\n## Custom event listeners\n\nYou can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.verbose;\n});\n\nprogram.on('command:*', function (operands) {\n  console.error(`error: unknown command '${operands[0]}'`);\n  const availableCommands = program.commands.map(cmd => cmd.name());\n  mySuggestBestMatch(operands[0], availableCommands);\n  process.exitCode = 1;\n});\n```\n\n## Bits and pieces\n\n### .parse() and .parseAsync()\n\nThe first argument to `.parse` is the array of strings to parse. You may omit the parameter to implicitly use `process.argv`.\n\nIf the arguments follow different conventions than node you can pass a `from` option in the second parameter:\n\n- 'node': default, `argv[0]` is the application and `argv[1]` is the script being run, with user parameters after that\n- 'electron': `argv[1]` varies depending on whether the electron application is packaged\n- 'user': all of the arguments from the user\n\nFor example:\n\n```js\nprogram.parse(process.argv); // Explicit, node conventions\nprogram.parse(); // Implicit, and auto-detect electron\nprogram.parse(['-f', 'filename'], { from: 'user' });\n```\n\n### Avoiding option name clashes\n\nThe original and default behaviour is that the option values are stored\nas properties on the program, and the action handler is passed a\ncommand object with the options values stored as properties.\nThis is very convenient to code, but the downside is possible clashes with\nexisting properties of Command.\n\nThere are two new routines to change the behaviour, and the default behaviour may change in the future:\n\n- `storeOptionsAsProperties`: whether to store option values as properties on command object, or store separately (specify false) and access using `.opts()`\n- `passCommandToAction`: whether to pass command to action handler,\nor just the options (specify false)\n\nExample file: [storeOptionsAsProperties-action.js](./examples/storeOptionsAsProperties-action.js)\n\n```js\nprogram\n  .storeOptionsAsProperties(false)\n  .passCommandToAction(false);\n\nprogram\n  .name('my-program-name')\n  .option('-n,--name <name>');\n\nprogram\n  .command('show')\n  .option('-a,--action <action>')\n  .action((options) => {\n    console.log(options.action);\n  });\n\nprogram.parse(process.argv);\n\nconst programOptions = program.opts();\nconsole.log(programOptions.name);\n```\n\n### TypeScript\n\nThe Commander package includes its TypeScript Definition file.\n\nIf you use `ts-node` and  stand-alone executable subcommands written as `.ts` files, you need to call your program through node to get the subcommands called correctly. e.g.\n\n```bash\nnode -r ts-node/register pm.ts\n```\n\n### createCommand()\n\nThis factory function creates a new command. It is exported and may be used instead of using `new`, like:\n\n```js\nconst { createCommand } = require('commander');\nconst program = createCommand();\n```\n\n`createCommand` is also a method of the Command object, and creates a new command rather than a subcommand. This gets used internally\nwhen creating subcommands using `.command()`, and you may override it to\ncustomise the new subcommand (examples using [subclass](./examples/custom-command-class.js) and [function](./examples/custom-command-function.js)).\n\n### Import into ECMAScript Module\n\nCommander is currently a CommonJS package, and the default export can be imported into an ES Module:\n\n```js\n// index.mjs\nimport commander from 'commander';\nconst program = commander.program;\nconst newCommand = new commander.Command();\n```\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n\n- Use `#! /usr/bin/env node --harmony` in the subcommands scripts. (Note Windows does not support this pattern.)\n- Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning subcommand process.\n\n### Debugging stand-alone executable subcommands\n\nAn executable subcommand is launched as a separate child process.\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) executable subcommands using `node --inspect` et al,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\nIf you are using VSCode to debug executable subcommands you need to set the `\"autoAttachChildProcesses\": true` flag in your launch.json configuration.\n\n### Override exit and output handling\n\nBy default Commander calls `process.exit` when it detects errors, or after displaying the help or version. You can override\nthis behaviour and optionally supply a callback. The default override throws a `CommanderError`.\n\nThe override callback is passed a `CommanderError` with properties `exitCode` number, `code` string, and `message`. The default override behaviour is to throw the error, except for async handling of executable subcommand completion which carries on. The normal display of error messages or version or help\nis not affected by the override which is called after the display.\n\n```js\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // custom processing...\n}\n```\n\nBy default Commander is configured for a command-line application and writes to stdout and stderr.\nYou can modify this behaviour for custom applications. In addition, you can modify the display of error messages.\n\nExample file: [configure-output.js](./examples/configure-output.js)\n\n\n```js\nfunction errorColor(str) {\n  // Add ANSI escape codes to display text in red.\n  return `\\x1b[31m${str}\\x1b[0m`;\n}\n\nprogram\n  .configureOutput({\n    // Visibly override write routines as example!\n    writeOut: (str) => process.stdout.write(`[OUT] ${str}`),\n    writeErr: (str) => process.stdout.write(`[ERR] ${str}`),\n    // Highlight errors in color.\n    outputError: (str, write) => write(errorColor(str))\n  });\n```\n\n### Additional documentation\n\nThere is more information available about:\n\n- [deprecated](./docs/deprecated.md) features still supported for backwards compatibility\n- [options taking varying arguments](./docs/options-taking-varying-arguments.md)\n\n## Examples\n\nExample file: [deploy](./examples/deploy)\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .version('0.1.0')\n  .option('-C, --chdir <path>', 'change the working directory')\n  .option('-c, --config <path>', 'set config path. defaults to ./deploy.conf')\n  .option('-T, --no-tests', 'ignore test hook');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option(\"-s, --setup_mode [mode]\", \"Which setup mode to use\")\n  .action(function(env, options){\n    const mode = options.setup_mode || \"normal\";\n    env = env || 'all';\n    console.log('setup for %s env(s) with %s mode', env, mode);\n  });\n\nprogram\n  .command('exec <cmd>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option(\"-e, --exec_mode <mode>\", \"Which exec mode to use\")\n  .action(function(cmd, options){\n    console.log('exec \"%s\" using %s mode', cmd, options.exec_mode);\n  }).addHelpText('after', `\nExamples:\n  $ deploy exec sequential\n  $ deploy exec async`\n  );\n\nprogram.parse(process.argv);\n```\n\nMore Demos can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## Support\n\nThe current version of Commander is fully supported on Long Term Support versions of Node, and is likely to work with Node 6 but not tested.\n(For versions of Node below Node 6, use Commander 3.x or 2.x.)\n\nThe main forum for free and community support is the project [Issues](https://github.com/tj/commander.js/issues) on GitHub.\n\n### Commander for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of Commander and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-commander?utm_source=npm-commander&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n","typings":"typings/index.d.ts","jest":{"collectCoverage":true},"readmeFilename":"Readme.md","gitHead":"e1a6cf43b29ccd7f8976fb432f57236b9af25c63","_nodeVersion":"15.2.1","_npmVersion":"7.0.8","_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"maintainers":[{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"vanesyan","email":"romain.vanesyan@gmail.com"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_7.0.0-1_1605994228284_0.8020541804908767"},"_hasShrinkwrap":false},"7.0.0-2":{"_id":"commander@7.0.0-2","name":"commander","description":"the complete solution for node.js command-line programs","version":"7.0.0-2","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json","typescript-checkJS":"tsc --allowJS --checkJS index.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-lint && npm run typescript-checkJS"},"directories":{},"devDependencies":{"@types/jest":"^26.0.16","@types/node":"^14.14.10","@typescript-eslint/eslint-plugin":"^4.9.0","eslint":"^7.15.0","eslint-config-standard":"^16.0.2","eslint-config-standard-with-typescript":"^19.0.1","eslint-plugin-import":"^2.22.1","eslint-plugin-jest":"^24.1.3","eslint-plugin-node":"^11.1.0","eslint-plugin-promise":"^4.2.1","eslint-plugin-standard":"^4.1.0","jest":"^26.6.3","standard":"^16.0.3","typescript":"^4.1.2"},"dependencies":{},"engines":{"node":">= 10"},"main":"index","dist":{"shasum":"5df69e0962ae9780eb5692f55b2eb650de8f6b02","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-7.0.0-2.tgz"},"readme":"# Commander.js\n\n[![Build Status](https://github.com/tj/commander.js/workflows/build/badge.svg)](https://github.com/tj/commander.js/actions?query=workflow%3A%22build%22)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces.\n\nRead this in other languages: English | [简体中文](./Readme_zh-CN.md)\n\n- [Commander.js](#commanderjs)\n  - [Installation](#installation)\n  - [Declaring _program_ variable](#declaring-program-variable)\n  - [Options](#options)\n    - [Common option types, boolean and value](#common-option-types-boolean-and-value)\n    - [Default option value](#default-option-value)\n    - [Other option types, negatable boolean and boolean|value](#other-option-types-negatable-boolean-and-booleanvalue)\n    - [Required option](#required-option)\n    - [Variadic option](#variadic-option)\n    - [Version option](#version-option)\n    - [More configuration](#more-configuration)\n    - [Custom option processing](#custom-option-processing)\n  - [Commands](#commands)\n    - [Specify the argument syntax](#specify-the-argument-syntax)\n    - [Action handler](#action-handler)\n    - [Stand-alone executable (sub)commands](#stand-alone-executable-subcommands)\n  - [Automated help](#automated-help)\n    - [Custom help](#custom-help)\n    - [Display help from code](#display-help-from-code)\n    - [.usage and .name](#usage-and-name)\n    - [.helpOption(flags, description)](#helpoptionflags-description)\n    - [.addHelpCommand()](#addhelpcommand)\n    - [More configuration](#more-configuration-1)\n  - [Custom event listeners](#custom-event-listeners)\n  - [Bits and pieces](#bits-and-pieces)\n    - [.parse() and .parseAsync()](#parse-and-parseasync)\n    - [Legacy options as properties](#legacy-options-as-properties)\n    - [TypeScript](#typescript)\n    - [createCommand()](#createcommand)\n    - [Import into ECMAScript Module](#import-into-ecmascript-module)\n    - [Node options such as `--harmony`](#node-options-such-as---harmony)\n    - [Debugging stand-alone executable subcommands](#debugging-stand-alone-executable-subcommands)\n    - [Override exit and output handling](#override-exit-and-output-handling)\n    - [Additional documentation](#additional-documentation)\n  - [Examples](#examples)\n  - [Support](#support)\n    - [Commander for enterprise](#commander-for-enterprise)\n\nFor information about terms used in this document see: [terminology](./docs/terminology.md)\n\n## Installation\n\n```bash\nnpm install commander\n```\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\nconst { program } = require('commander');\nprogram.version('0.0.1');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n```js\nconst { Command } = require('commander');\nconst program = new Command();\nprogram.version('0.0.1');\n```\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space or vertical bar ('|').\n\nThe parsed options can be accessed by calling `.opts()` on a `Command` object, and are passed to the action handler. Multi-word options such as \"--template-engine\" are camel-cased, becoming `program.opts().templateEngine` etc.\n\nMultiple short flags may optionally be combined in a single argument following the dash: boolean flags, followed by a single option taking a value (possibly followed by the value).\nFor example `-a -b -p 80` may be written as `-ab -p80` or even `-abp80`.\n\nYou can use `--` to indicate the end of the options, and any remaining arguments will be used without being interpreted.\n\nOptions on the command line are not positional, and can be specified before or after other arguments.\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean option, and an option which takes its value\nfrom the following argument (declared with angle brackets like `--expect <value>`). Both are `undefined` unless specified on command line.  \n\nExample file: [options-common.js](./examples/options-common.js)\n\n```js\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.debug) console.log(options);\nconsole.log('pizza details:');\nif (options.small) console.log('- small pizza size');\nif (options.pizzaType) console.log(`- ${options.pizzaType}`);\n```\n\n```bash\n$ pizza-options -d\n{ debug: true, small: undefined, pizzaType: undefined }\npizza details:\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -ds -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the program options in the `program.args` array. The parameter is optional and defaults to `process.argv`.\n\n### Default option value\n\nYou can specify a default value for an option which takes a value.\n\nExample file: [options-defaults.js](./examples/options-defaults.js)\n\n```js\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse();\n\nconsole.log(`cheese: ${program.opts().cheese}`);\n```\n\n```bash\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and boolean|value\n\nYou can define a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be. You can specify a default boolean value for a boolean option and it can be overridden on command line.\n\nExample file: [options-negatable.js](./examples/options-negatable.js)\n\n```js\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse();\n\nconst options = program.opts();\nconst sauceStr = options.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (options.cheese === false) ? 'no cheese' : `${options.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```bash\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which may be used as a boolean option but may optionally take an option-argument\n(declared with square brackets like `--optional [value]`).\n\nExample file: [options-boolean-or-value.js](./examples/options-boolean-or-value.js)\n\n```js\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.cheese === undefined) console.log('no cheese');\nelse if (options.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${options.cheese}`);\n```\n\n```bash\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-taking-varying-arguments.md).\n\n### Required option\n\nYou may specify a required (mandatory) option using `.requiredOption`. The option must have a value after parsing, usually specified on the command line, or perhaps from a default value (say from environment). The method is otherwise the same as `.option` in format, taking flags and description, and optional default value or custom processing.\n\nExample file: [options-required.js](./examples/options-required.js)\n\n```js\nprogram\n  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse();\n```\n\n```bash\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n```\n\n### Variadic option\n\nYou may make an option variadic by appending `...` to the value placeholder when declaring the option. On the command line you\ncan then specify multiple option-arguments, and the parsed option value will be an array. The extra arguments\nare read until the first argument starting with a dash. The special argument `--` stops option processing entirely. If a value\nis specified in the same argument as the option then no further values are read.\n\nExample file: [options-variadic.js](./examples/options-variadic.js)\n\n```js\nprogram\n  .option('-n, --number <numbers...>', 'specify numbers')\n  .option('-l, --letter [letters...]', 'specify letters');\n\nprogram.parse();\n\nconsole.log('Options: ', program.opts());\nconsole.log('Remaining arguments: ', program.args);\n```\n\n```bash\n$ collect -n 1 2 3 --letter a b c\nOptions:  { number: [ '1', '2', '3' ], letter: [ 'a', 'b', 'c' ] }\nRemaining arguments:  []\n$ collect --letter=A -n80 operand\nOptions:  { number: [ '80' ], letter: [ 'A' ] }\nRemaining arguments:  [ 'operand' ]\n$ collect --letter -n 1 -n 2 3 -- operand\nOptions:  { number: [ '1', '2', '3' ], letter: true }\nRemaining arguments:  [ 'operand' ]\n```\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-taking-varying-arguments.md).\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```bash\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n### More configuration\n\nYou can add most options using the `.option()` method, but there are some additional features available\nby constructing an `Option` explicitly for less common cases.\n\nExample file: [options-extra.js](./examples/options-extra.js)\n\n```js\nprogram\n  .addOption(new Option('-s, --secret').hideHelp())\n  .addOption(new Option('-t, --timeout <delay>', 'timeout in seconds').default(60, 'one minute'))\n  .addOption(new Option('-d, --drink <size>', 'drink size').choices(['small', 'medium', 'large']));\n```\n\n```bash\n$ extra --help\nUsage: help [options]\n\nOptions:\n  -t, --timeout <delay>  timeout in seconds (default: one minute)\n  -d, --drink <size>     drink cup size (choices: \"small\", \"medium\", \"large\")\n  -h, --help             display help for command\n\n$ extra --drink huge\nerror: option '-d, --drink <size>' argument 'huge' is invalid. Allowed choices are small, medium, large.\n```\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option-arguments. The callback function receives two parameters,\nthe user specified option-argument and the previous value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option-argument to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function parameter.\n\nExample file: [options-custom-processing.js](./examples/options-custom-processing.js)\n\n```js\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and a radix\n  const parsedValue = parseInt(value, 10);\n  if (isNaN(parsedValue)) {\n    throw new commander.InvalidOptionArgumentError('Not a number.');\n  }\n  return parsedValue;\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse();\n\nconst options = program.opts();\nif (options.float !== undefined) console.log(`float: ${options.float}`);\nif (options.integer !== undefined) console.log(`integer: ${options.integer}`);\nif (options.verbose > 0) console.log(`verbosity: ${options.verbose}`);\nif (options.collect.length > 0) console.log(options.collect);\nif (options.list !== undefined) console.log(options.list);\n```\n\n```bash\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n## Commands\n\nYou can specify (sub)commands using `.command()` or `.addCommand()`. There are two ways these can be implemented: using an action handler attached to the command, or as a stand-alone executable file (described in more detail later). The subcommands may be nested ([example](./examples/nestedCommands.js)).\n\nIn the first parameter to `.command()` you specify the command name and any command-arguments. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nYou can use `.addCommand()` to add an already configured subcommand to the program.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using stand-alone executable file (description is second parameter to `.command`)\n// Returns `this` for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n\n// Command prepared separately.\n// Returns `this` for adding more commands.\nprogram\n  .addCommand(build.makeBuildCommand());\n```\n\nConfiguration options can be passed with the call to `.command()` and `.addCommand()`. Specifying `hidden: true` will \nremove the command from the generated help output. Specifying `isDefault: true` will run the subcommand if no other\nsubcommand is specified ([example](./examples/defaultCommand.js)).\n\n### Specify the argument syntax\n\nYou use `.arguments` to specify the expected command-arguments for the top-level command, and for subcommands they are usually\nincluded in the `.command` call. Angled brackets (e.g. `<required>`) indicate required command-arguments.\nSquare brackets (e.g. `[optional]`) indicate optional command-arguments.\nYou can optionally describe the arguments in the help by supplying a hash as second parameter to `.description()`.\n\nExample file: [arguments.js](./examples/arguments.js)\n\n```js\nprogram\n  .version('0.1.0')\n  .arguments('<username> [password]')\n  .description('test command', {\n    username: 'user to login',\n    password: 'password for user, if required'\n  })\n  .action((username, password) => {\n    console.log('username:', username);\n    console.log('environment:', password || 'no password given');\n  });\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. For example:\n\n```js\nprogram\n  .version('0.1.0')\n  .command('rmdir <dirs...>')\n  .action(function (dirs) {\n    dirs.forEach((dir) => {\n      console.log('rmdir %s', dir);\n    });\n  });\n```\n\nThe variadic argument is passed to the action handler as an array.\n\n### Action handler\n\nThe action handler gets passed a parameter for each command-argument you declared, and two additional parameters\nwhich are the parsed options and the command object itself. \n\nExample file: [thank.js](./examples/thank.js)\n\n```js\nprogram\n  .arguments('<name>')\n  .option('-t, --title <honorific>', 'title to use before name')\n  .option('-d, --debug', 'display some debugging')\n  .action((name, options, command) => {\n    if (options.debug) {\n      console.error('Called %s with options %o', command.name(), options);\n    }\n    const title = options.title ? `${options.title} ` : '';\n    console.log(`Thank-you ${title}${name}`);\n  });\n```\n\nYou may supply an `async` action handler, in which case you call `.parseAsync` rather than `.parse`.\n\n```js\nasync function run() { /* code goes here */ }\n\nasync function main() {\n  program\n    .command('run')\n    .action(run);\n  await program.parseAsync(process.argv);\n}\n```\n\nA command's options and arguments on the command line are validated when the command is used. Any unknown options or unexpected command-arguments will be reported as an error, or you can suppress these checks with `.allowUnknownOption()` and `.allowExcessArguments()`.\n\n### Stand-alone executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells Commander that you're going to use stand-alone executables for subcommands.\nCommander will search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-subcommand`, like `pm-install`, `pm-search`.\nYou can specify a custom name with the `executableFile` configuration option.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\nExample file: [pm](./examples/pm)\n\n```js\nprogram\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', { executableFile: 'myUpdateSubCommand' })\n  .command('list', 'list packages installed', { isDefault: true });\n\nprogram.parse(process.argv);\n```\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n## Automated help\n\nThe help information is auto-generated based on the information commander already knows about your program. The default\nhelp option is `-h,--help`.\n\nExample file: [pizza](./examples/pizza)\n\n```bash\n$ node ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizza ordering\n\nOptions:\n  -p, --peppers        Add peppers\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           display help for command\n```\n\nA `help` command is added by default if your command has subcommands. It can be used alone, or with a subcommand name to show\nfurther help for the subcommand. These are effectively the same if the `shell` program has implicit help:\n\n```bash\nshell help\nshell --help\n\nshell help spawn\nshell spawn --help\n```\n\n### Custom help\n\nYou can add extra text to be displayed along with the built-in help. \n\nExample file: [custom-help](./examples/custom-help)\n\n```js\nprogram\n  .option('-f, --foo', 'enable some foo');\n\nprogram.addHelpText('after', `\n\nExample call:\n  $ custom-help --help`);\n```\n\nYields the following help output:\n\n```Text\nUsage: custom-help [options]\n\nOptions:\n  -f, --foo   enable some foo\n  -h, --help  display help for command\n\nExample call:\n  $ custom-help --help\n```\n\nThe positions in order displayed are:\n\n- `beforeAll`: add to the program for a global banner or header\n- `before`: display extra information before built-in help\n- `after`: display extra information after built-in help\n- `afterAll`: add to the program for a global footer (epilog)\n\nThe positions \"beforeAll\" and \"afterAll\" apply to the command and all its subcommands. \n\nThe second parameter can be a string, or a function returning a string. The function is passed a context object for your convenience. The properties are:\n\n- error: a boolean for whether the help is being displayed due to a usage error\n- command: the Command which is displaying the help\n\n### Display help from code\n\n`.help()`: display help information and exit immediately. You can optionally pass `{ error: true }` to display on stderr and exit with an error status.\n\n`.outputHelp()`: output help information without exiting. You can optionally pass `{ error: true }` to display on stderr.\n\n`.helpInformation()`: get the built-in command help information as a string for processing or displaying yourself.\n\n### .usage and .name\n\nThese allow you to customise the usage description in the first line of the help. The name is otherwise\ndeduced from the (full) program arguments. Given:\n\n```js\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n```\n\nThe help will start with:\n\n```Text\nUsage: my-command [global options] command\n```\n\n### .helpOption(flags, description)\n\nBy default every command has a help option. Override the default help flags and description. Pass false to disable the built-in help option.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n### .addHelpCommand()\n\nA help command is added by default if your command has subcommands. You can explicitly turn on or off the implicit help command with `.addHelpCommand()` and `.addHelpCommand(false)`.\n\nYou can both turn on and customise the help command by supplying the name and description:\n\n```js\nprogram.addHelpCommand('assist [command]', 'show assistance');\n```\n\n### More configuration\n\nThe built-in help is formatted using the Help class.\nYou can configure the Help behaviour by modifying data properties and methods using `.configureHelp()`, or by subclassing using `.createHelp()` if you prefer.\n\nThe data properties are:\n\n- `helpWidth`: specify the wrap width, useful for unit tests\n- `sortSubcommands`: sort the subcommands alphabetically\n- `sortOptions`: sort the options alphabetically\n\nThere are methods getting the visible lists of arguments, options, and subcommands. There are methods for formatting the items in the lists, with each item having a _term_ and _description_. Take a look at `.formatHelp()` to see how they are used.\n\nExample file: [configure-help.js](./examples/configure-help.js)\n\n```\nprogram.configureHelp({\n  sortSubcommands: true,\n  subcommandTerm: (cmd) => cmd.name() // Just show the name, instead of short usage.\n});\n```\n\n## Custom event listeners\n\nYou can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.verbose;\n});\n\nprogram.on('command:*', function (operands) {\n  console.error(`error: unknown command '${operands[0]}'`);\n  const availableCommands = program.commands.map(cmd => cmd.name());\n  mySuggestBestMatch(operands[0], availableCommands);\n  process.exitCode = 1;\n});\n```\n\n## Bits and pieces\n\n### .parse() and .parseAsync()\n\nThe first argument to `.parse` is the array of strings to parse. You may omit the parameter to implicitly use `process.argv`.\n\nIf the arguments follow different conventions than node you can pass a `from` option in the second parameter:\n\n- 'node': default, `argv[0]` is the application and `argv[1]` is the script being run, with user parameters after that\n- 'electron': `argv[1]` varies depending on whether the electron application is packaged\n- 'user': all of the arguments from the user\n\nFor example:\n\n```js\nprogram.parse(process.argv); // Explicit, node conventions\nprogram.parse(); // Implicit, and auto-detect electron\nprogram.parse(['-f', 'filename'], { from: 'user' });\n```\n\n### Legacy options as properties \n\nBefore Commander 7, the option values were stored as properties on the command.\nThis was convenient to code but the downside was possible clashes with\nexisting properties of `Command`. You can revert to the old behaviour to run unmodified legacy code by using `.storeOptionsAsProperties()`.\n\n```js\nprogram\n  .storeOptionsAsProperties()\n  .option('-d, --debug')\n  .action((commandAndOptions) => {\n    if (commandAndOptions.debug) {\n      console.error(`Called ${commandAndOptions.name()}`);\n    }\n  });\n```\n\n### TypeScript\n\nThe Commander package includes its TypeScript Definition file.\n\nIf you use `ts-node` and  stand-alone executable subcommands written as `.ts` files, you need to call your program through node to get the subcommands called correctly. e.g.\n\n```bash\nnode -r ts-node/register pm.ts\n```\n\n### createCommand()\n\nThis factory function creates a new command. It is exported and may be used instead of using `new`, like:\n\n```js\nconst { createCommand } = require('commander');\nconst program = createCommand();\n```\n\n`createCommand` is also a method of the Command object, and creates a new command rather than a subcommand. This gets used internally\nwhen creating subcommands using `.command()`, and you may override it to\ncustomise the new subcommand (examples using [subclass](./examples/custom-command-class.js) and [function](./examples/custom-command-function.js)).\n\n### Import into ECMAScript Module\n\nCommander is currently a CommonJS package, and the default export can be imported into an ES Module:\n\n```js\n// index.mjs\nimport commander from 'commander';\nconst program = commander.program;\nconst newCommand = new commander.Command();\n```\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n\n- Use `#! /usr/bin/env node --harmony` in the subcommands scripts. (Note Windows does not support this pattern.)\n- Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning subcommand process.\n\n### Debugging stand-alone executable subcommands\n\nAn executable subcommand is launched as a separate child process.\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) executable subcommands using `node --inspect` et al,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\nIf you are using VSCode to debug executable subcommands you need to set the `\"autoAttachChildProcesses\": true` flag in your launch.json configuration.\n\n### Override exit and output handling\n\nBy default Commander calls `process.exit` when it detects errors, or after displaying the help or version. You can override\nthis behaviour and optionally supply a callback. The default override throws a `CommanderError`.\n\nThe override callback is passed a `CommanderError` with properties `exitCode` number, `code` string, and `message`. The default override behaviour is to throw the error, except for async handling of executable subcommand completion which carries on. The normal display of error messages or version or help\nis not affected by the override which is called after the display.\n\n```js\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // custom processing...\n}\n```\n\nBy default Commander is configured for a command-line application and writes to stdout and stderr.\nYou can modify this behaviour for custom applications. In addition, you can modify the display of error messages.\n\nExample file: [configure-output.js](./examples/configure-output.js)\n\n\n```js\nfunction errorColor(str) {\n  // Add ANSI escape codes to display text in red.\n  return `\\x1b[31m${str}\\x1b[0m`;\n}\n\nprogram\n  .configureOutput({\n    // Visibly override write routines as example!\n    writeOut: (str) => process.stdout.write(`[OUT] ${str}`),\n    writeErr: (str) => process.stdout.write(`[ERR] ${str}`),\n    // Highlight errors in color.\n    outputError: (str, write) => write(errorColor(str))\n  });\n```\n\n### Additional documentation\n\nThere is more information available about:\n\n- [deprecated](./docs/deprecated.md) features still supported for backwards compatibility\n- [options taking varying arguments](./docs/options-taking-varying-arguments.md)\n\n## Examples\n\nIn a single command program, you might not need an action handler.\n\nExample file: [pizza](./examples/pizza)\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .description('An application for pizza ordering')\n  .option('-p, --peppers', 'Add peppers')\n  .option('-c, --cheese <type>', 'Add the specified type of cheese', 'marble')\n  .option('-C, --no-cheese', 'You do not want any cheese');\n\nprogram.parse();\n\nconst options = program.opts();\nconsole.log('you ordered a pizza with:');\nif (options.peppers) console.log('  - peppers');\nconst cheese = !options.cheese ? 'no' : options.cheese;\nconsole.log('  - %s cheese', cheese);\n```\n\nIn a multi-command program, you will have action handlers for each command (or stand-alone executables for the commands).\n\nExample file: [deploy](./examples/deploy)\n\n```js\nconst { Command } = require('commander');\nconst program = new Command();\n\nprogram\n  .version('0.0.1')\n  .option('-c, --config <path>', 'set config path', './deploy.conf');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option('-s, --setup_mode <mode>', 'Which setup mode to use', 'normal')\n  .action((env, options) => {\n    env = env || 'all';\n    console.log('read config from %s', program.opts().config);\n    console.log('setup for %s env(s) with %s mode', env, options.setup_mode);\n  });\n\nprogram\n  .command('exec <script>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option('-e, --exec_mode <mode>', 'Which exec mode to use', 'fast')\n  .action((script, options) => {\n    console.log('read config from %s', program.opts().config);\n    console.log('exec \"%s\" using %s mode and config %s', script, options.exec_mode, program.opts().config);\n  }).addHelpText('after', `\nExamples:\n  $ deploy exec sequential\n  $ deploy exec async`\n  );\n  \nprogram.parse(process.argv);\n```\n\nMore samples can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## Support\n\nThe current version of Commander is fully supported on Long Term Support versions of Node, and is likely to work with Node 6 but not tested.\n(For versions of Node below Node 6, use Commander 3.x or 2.x.)\n\nThe main forum for free and community support is the project [Issues](https://github.com/tj/commander.js/issues) on GitHub.\n\n### Commander for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of Commander and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-commander?utm_source=npm-commander&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n","typings":"typings/index.d.ts","jest":{"collectCoverage":true},"readmeFilename":"Readme.md","gitHead":"4b43f66f868c3810467cae811fe9292382dc7e22","_nodeVersion":"14.15.1","_npmVersion":"6.14.8","_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"maintainers":[{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"vanesyan","email":"romain.vanesyan@gmail.com"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_7.0.0-2_1607932126335_0.020094620686481157"},"_hasShrinkwrap":false},"7.0.0":{"_id":"commander@7.0.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"7.0.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts","test":"jest && npm run test-typings","test-typings":"tsc -p tsconfig.json","typescript-checkJS":"tsc --allowJS --checkJS index.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-lint && npm run typescript-checkJS"},"directories":{},"devDependencies":{"@types/jest":"^26.0.20","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","eslint":"^7.17.0","eslint-config-standard":"^16.0.2","eslint-plugin-jest":"^24.1.3","jest":"^26.6.3","standard":"^16.0.3","typescript":"^4.1.2"},"dependencies":{},"engines":{"node":">= 10"},"main":"index","dist":{"shasum":"3e2bbfd8bb6724760980988fb5b22b7ee6b71ab2","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-7.0.0.tgz"},"typings":"typings/index.d.ts","jest":{"collectCoverage":true},"gitHead":"034ad9f326ee2b26001b864adda5fea465ee148b","_nodeVersion":"15.5.1","_npmVersion":"6.14.11","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"vanesyan","email":"romain.vanesyan@gmail.com"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_7.0.0_1610704037116_0.538056848331937"},"_hasShrinkwrap":false},"7.1.0":{"_id":"commander@7.1.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"7.1.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js esm.mjs \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts","test":"jest && npm run test-typings","test-esm":"node --experimental-modules ./tests/esm-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-lint && npm run typescript-checkJS && npm run test-esm"},"directories":{},"devDependencies":{"@types/jest":"^26.0.20","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","eslint":"^7.17.0","eslint-config-standard":"^16.0.2","eslint-plugin-jest":"^24.1.3","jest":"^26.6.3","standard":"^16.0.3","tsd":"^0.14.0","typescript":"^4.1.2"},"dependencies":{},"engines":{"node":">= 10"},"main":"./index.js","dist":{"shasum":"f2eaecf131f10e36e07d894698226e36ae0eb5ff","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-7.1.0.tgz"},"type":"commonjs","types":"typings/index.d.ts","jest":{"collectCoverage":true},"gitHead":"4aaaa9de3fd09401afe3894483193ba0e2e512d7","_nodeVersion":"15.5.0","_npmVersion":"7.5.3","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"vanesyan","email":"romain.vanesyan@gmail.com"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_7.1.0_1613373882385_0.7205821327578177"},"_hasShrinkwrap":false},"7.2.0":{"_id":"commander@7.2.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"7.2.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":""},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"license":"MIT","scripts":{"lint":"eslint index.js esm.mjs \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node --experimental-modules ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-lint && npm run typescript-checkJS && npm run test-esm"},"directories":null,"devDependencies":{"@types/jest":"^26.0.20","@types/node":"^14.14.20","@typescript-eslint/eslint-plugin":"^4.12.0","@typescript-eslint/parser":"^4.12.0","eslint":"^7.17.0","eslint-config-standard":"^16.0.2","eslint-plugin-jest":"^24.1.3","jest":"^26.6.3","standard":"^16.0.3","ts-jest":"^26.5.1","tsd":"^0.14.0","typescript":"^4.1.2"},"dependencies":{},"engines":{"node":">= 10"},"files":["index.js","esm.mjs","typings/index.d.ts","package-support.json"],"main":"./index.js","dist":{"shasum":"a36cb57d0b501ce108e4d20559a150a391d97ab7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-7.2.0.tgz"},"type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true},"8.0.0-0":{"_id":"commander@8.0.0-0","name":"commander","description":"the complete solution for node.js command-line programs","version":"8.0.0-0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js esm.mjs \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node --experimental-modules ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-lint && npm run typescript-checkJS && npm run test-esm"},"directories":{},"devDependencies":{"@types/jest":"^26.0.23","@types/node":"^14.17.0","@typescript-eslint/eslint-plugin":"^4.24.0","@typescript-eslint/parser":"^4.24.0","eslint":"^7.26.0","eslint-config-standard":"^16.0.2","eslint-plugin-jest":"^24.3.6","jest":"^26.6.3","standard":"^16.0.3","ts-jest":"^26.5.6","tsd":"^0.15.1","typescript":"^4.2.4"},"dependencies":{},"engines":{"node":">= 12"},"main":"./index.js","dist":{"shasum":"581657335fd53b1bbc3978341f66d7dea8cec239","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-8.0.0-0.tgz"},"readme":"# Commander.js\n\n[![Build Status](https://github.com/tj/commander.js/workflows/build/badge.svg)](https://github.com/tj/commander.js/actions?query=workflow%3A%22build%22)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces.\n\nRead this in other languages: English | [简体中文](./Readme_zh-CN.md)\n\n- [Commander.js](#commanderjs)\n  - [Installation](#installation)\n  - [Declaring _program_ variable](#declaring-program-variable)\n  - [Options](#options)\n    - [Common option types, boolean and value](#common-option-types-boolean-and-value)\n    - [Default option value](#default-option-value)\n    - [Other option types, negatable boolean and boolean|value](#other-option-types-negatable-boolean-and-booleanvalue)\n    - [Required option](#required-option)\n    - [Variadic option](#variadic-option)\n    - [Version option](#version-option)\n    - [More configuration](#more-configuration)\n    - [Custom option processing](#custom-option-processing)\n  - [Commands](#commands)\n    - [Specify the argument syntax](#specify-the-argument-syntax)\n    - [Custom argument processing](#custom-argument-processing)\n    - [Action handler](#action-handler)\n    - [Stand-alone executable (sub)commands](#stand-alone-executable-subcommands)\n    - [Life cycle hooks](#life-cycle-hooks)\n  - [Automated help](#automated-help)\n    - [Custom help](#custom-help)\n    - [Display help from code](#display-help-from-code)\n    - [.usage and .name](#usage-and-name)\n    - [.helpOption(flags, description)](#helpoptionflags-description)\n    - [.addHelpCommand()](#addhelpcommand)\n    - [More configuration](#more-configuration-1)\n  - [Custom event listeners](#custom-event-listeners)\n  - [Bits and pieces](#bits-and-pieces)\n    - [.parse() and .parseAsync()](#parse-and-parseasync)\n    - [Parsing Configuration](#parsing-configuration)\n    - [Legacy options as properties](#legacy-options-as-properties)\n    - [TypeScript](#typescript)\n    - [createCommand()](#createcommand)\n    - [Node options such as `--harmony`](#node-options-such-as---harmony)\n    - [Debugging stand-alone executable subcommands](#debugging-stand-alone-executable-subcommands)\n    - [Override exit and output handling](#override-exit-and-output-handling)\n    - [Additional documentation](#additional-documentation)\n  - [Examples](#examples)\n  - [Support](#support)\n    - [Commander for enterprise](#commander-for-enterprise)\n\nFor information about terms used in this document see: [terminology](./docs/terminology.md)\n\n## Installation\n\n```bash\nnpm install commander\n```\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\nconst { program } = require('commander');\nprogram.version('0.0.1');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n```js\nconst { Command } = require('commander');\nconst program = new Command();\nprogram.version('0.0.1');\n```\n\nFor named imports in ECMAScript modules, import from `commander/esm.mjs`.\n\n```js\n// index.mjs\nimport { Command } from 'commander/esm.mjs';\nconst program = new Command();\n```\n\nAnd in TypeScript:\n\n```ts\n// index.ts\nimport { Command } from 'commander';\nconst program = new Command();\n```\n\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space or vertical bar ('|').\n\nThe parsed options can be accessed by calling `.opts()` on a `Command` object, and are passed to the action handler.\nYou can also use `.getOptionValue()` and `.setOptionValue()` to work with a single option value.\n\nMulti-word options such as \"--template-engine\" are camel-cased, becoming `program.opts().templateEngine` etc.\n\nMultiple short flags may optionally be combined in a single argument following the dash: boolean flags, followed by a single option taking a value (possibly followed by the value).\nFor example `-a -b -p 80` may be written as `-ab -p80` or even `-abp80`.\n\nYou can use `--` to indicate the end of the options, and any remaining arguments will be used without being interpreted.\n\nBy default options on the command line are not positional, and can be specified before or after other arguments.\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean option, and an option which takes its value\nfrom the following argument (declared with angle brackets like `--expect <value>`). Both are `undefined` unless specified on command line.  \n\nExample file: [options-common.js](./examples/options-common.js)\n\n```js\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.debug) console.log(options);\nconsole.log('pizza details:');\nif (options.small) console.log('- small pizza size');\nif (options.pizzaType) console.log(`- ${options.pizzaType}`);\n```\n\n```bash\n$ pizza-options -d\n{ debug: true, small: undefined, pizzaType: undefined }\npizza details:\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -ds -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the program options in the `program.args` array. The parameter is optional and defaults to `process.argv`.\n\n### Default option value\n\nYou can specify a default value for an option which takes a value.\n\nExample file: [options-defaults.js](./examples/options-defaults.js)\n\n```js\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse();\n\nconsole.log(`cheese: ${program.opts().cheese}`);\n```\n\n```bash\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and boolean|value\n\nYou can define a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be. You can specify a default boolean value for a boolean option and it can be overridden on command line.\n\nExample file: [options-negatable.js](./examples/options-negatable.js)\n\n```js\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse();\n\nconst options = program.opts();\nconst sauceStr = options.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (options.cheese === false) ? 'no cheese' : `${options.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```bash\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which may be used as a boolean option but may optionally take an option-argument\n(declared with square brackets like `--optional [value]`).\n\nExample file: [options-boolean-or-value.js](./examples/options-boolean-or-value.js)\n\n```js\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.cheese === undefined) console.log('no cheese');\nelse if (options.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${options.cheese}`);\n```\n\n```bash\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-taking-varying-arguments.md).\n\n### Required option\n\nYou may specify a required (mandatory) option using `.requiredOption`. The option must have a value after parsing, usually specified on the command line, or perhaps from a default value (say from environment). The method is otherwise the same as `.option` in format, taking flags and description, and optional default value or custom processing.\n\nExample file: [options-required.js](./examples/options-required.js)\n\n```js\nprogram\n  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse();\n```\n\n```bash\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n```\n\n### Variadic option\n\nYou may make an option variadic by appending `...` to the value placeholder when declaring the option. On the command line you\ncan then specify multiple option-arguments, and the parsed option value will be an array. The extra arguments\nare read until the first argument starting with a dash. The special argument `--` stops option processing entirely. If a value\nis specified in the same argument as the option then no further values are read.\n\nExample file: [options-variadic.js](./examples/options-variadic.js)\n\n```js\nprogram\n  .option('-n, --number <numbers...>', 'specify numbers')\n  .option('-l, --letter [letters...]', 'specify letters');\n\nprogram.parse();\n\nconsole.log('Options: ', program.opts());\nconsole.log('Remaining arguments: ', program.args);\n```\n\n```bash\n$ collect -n 1 2 3 --letter a b c\nOptions:  { number: [ '1', '2', '3' ], letter: [ 'a', 'b', 'c' ] }\nRemaining arguments:  []\n$ collect --letter=A -n80 operand\nOptions:  { number: [ '80' ], letter: [ 'A' ] }\nRemaining arguments:  [ 'operand' ]\n$ collect --letter -n 1 -n 2 3 -- operand\nOptions:  { number: [ '1', '2', '3' ], letter: true }\nRemaining arguments:  [ 'operand' ]\n```\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-taking-varying-arguments.md).\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```bash\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n### More configuration\n\nYou can add most options using the `.option()` method, but there are some additional features available\nby constructing an `Option` explicitly for less common cases.\n\nExample file: [options-extra.js](./examples/options-extra.js)\n\n```js\nprogram\n  .addOption(new Option('-s, --secret').hideHelp())\n  .addOption(new Option('-t, --timeout <delay>', 'timeout in seconds').default(60, 'one minute'))\n  .addOption(new Option('-d, --drink <size>', 'drink size').choices(['small', 'medium', 'large']));\n```\n\n```bash\n$ extra --help\nUsage: help [options]\n\nOptions:\n  -t, --timeout <delay>  timeout in seconds (default: one minute)\n  -d, --drink <size>     drink cup size (choices: \"small\", \"medium\", \"large\")\n  -h, --help             display help for command\n\n$ extra --drink huge\nerror: option '-d, --drink <size>' argument 'huge' is invalid. Allowed choices are small, medium, large.\n```\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option-arguments. The callback function receives two parameters,\nthe user specified option-argument and the previous value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option-argument to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function parameter.\n\nExample file: [options-custom-processing.js](./examples/options-custom-processing.js)\n\n```js\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and a radix\n  const parsedValue = parseInt(value, 10);\n  if (isNaN(parsedValue)) {\n    throw new commander.InvalidArgumentError('Not a number.');\n  }\n  return parsedValue;\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse();\n\nconst options = program.opts();\nif (options.float !== undefined) console.log(`float: ${options.float}`);\nif (options.integer !== undefined) console.log(`integer: ${options.integer}`);\nif (options.verbose > 0) console.log(`verbosity: ${options.verbose}`);\nif (options.collect.length > 0) console.log(options.collect);\nif (options.list !== undefined) console.log(options.list);\n```\n\n```bash\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n## Commands\n\nYou can specify (sub)commands using `.command()` or `.addCommand()`. There are two ways these can be implemented: using an action handler attached to the command, or as a stand-alone executable file (described in more detail later). The subcommands may be nested ([example](./examples/nestedCommands.js)).\n\nIn the first parameter to `.command()` you specify the command name. You may append the command-arguments after the command name, or specify them separately using `.argument()`. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nYou can use `.addCommand()` to add an already configured subcommand to the program.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using stand-alone executable file, indicated by adding description as second parameter to `.command`.\n// Returns `this` for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n\n// Command prepared separately.\n// Returns `this` for adding more commands.\nprogram\n  .addCommand(build.makeBuildCommand());\n```\n\nConfiguration options can be passed with the call to `.command()` and `.addCommand()`. Specifying `hidden: true` will \nremove the command from the generated help output. Specifying `isDefault: true` will run the subcommand if no other\nsubcommand is specified ([example](./examples/defaultCommand.js)).\n\n### Specify the argument syntax\n\nFor subcommands, you can specify the argument syntax in the call to `.command()` (as shown above). This\nis the only method usable for subcommands implemented using a stand-alone executable, but for other subcommands\nyou can instead use the following method.\n\nTo configure a command, you can use `.argument()` to specify each expected command-argument. \nYou supply the argument name and an optional description. The argument may be `<required>` or `[optional]`.\nYou can specify a default value for an optional command-argument.\n\n\nExample file: [argument.js](./examples/argument.js)\n\n```js\nprogram\n  .version('0.1.0')\n  .argument('<username>', 'user to login')\n  .argument('[password]', 'password for user, if required', 'no password given')\n  .action((username, password) => {\n    console.log('username:', username);\n    console.log('password:', password);\n  });\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. A variadic argument is passed to the action handler as an array. For example:\n\n```js\nprogram\n  .version('0.1.0')\n  .command('rmdir')\n  .argument('<dirs...>')\n  .action(function (dirs) {\n    dirs.forEach((dir) => {\n      console.log('rmdir %s', dir);\n    });\n  });\n```\n\nThere is a convenience method to add multiple arguments at once, but without descriptions:\n\n```js\nprogram\n  .arguments('<username> <password>');\n```\n\n### Custom argument processing\n\nYou may specify a function to do custom processing of command-arguments before they are passed to the action handler.\nThe callback function receives two parameters, the user specified command-argument and the previous value for the argument.\nIt returns the new value for the argument.\n\nYou can optionally specify the default/starting value for the argument after the function parameter.\n\nExample file: [arguments-custom-processing.js](./examples/arguments-custom-processing.js)\n\n```js\nprogram\n  .command('add')\n  .argument('<first>', 'integer argument', myParseInt)\n  .argument('[second]', 'integer argument', myParseInt, 1000)\n  .action((first, second) => {\n    console.log(`${first} + ${second} = ${first + second}`);\n  })\n;\n```\n\n### Action handler\n\nThe action handler gets passed a parameter for each command-argument you declared, and two additional parameters\nwhich are the parsed options and the command object itself. \n\nExample file: [thank.js](./examples/thank.js)\n\n```js\nprogram\n  .argument('<name>')\n  .option('-t, --title <honorific>', 'title to use before name')\n  .option('-d, --debug', 'display some debugging')\n  .action((name, options, command) => {\n    if (options.debug) {\n      console.error('Called %s with options %o', command.name(), options);\n    }\n    const title = options.title ? `${options.title} ` : '';\n    console.log(`Thank-you ${title}${name}`);\n  });\n```\n\nYou may supply an `async` action handler, in which case you call `.parseAsync` rather than `.parse`.\n\n```js\nasync function run() { /* code goes here */ }\n\nasync function main() {\n  program\n    .command('run')\n    .action(run);\n  await program.parseAsync(process.argv);\n}\n```\n\nA command's options and arguments on the command line are validated when the command is used. Any unknown options or missing arguments will be reported as an error. You can suppress the unknown option checks with `.allowUnknownOption()`. By default it is not an error to\npass more arguments than declared, but you can make this an error with `.allowExcessArguments(false)`.\n\n### Stand-alone executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells Commander that you're going to use stand-alone executables for subcommands.\nCommander will search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-subcommand`, like `pm-install`, `pm-search`.\nYou can specify a custom name with the `executableFile` configuration option.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\nExample file: [pm](./examples/pm)\n\n```js\nprogram\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', { executableFile: 'myUpdateSubCommand' })\n  .command('list', 'list packages installed', { isDefault: true });\n\nprogram.parse(process.argv);\n```\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n### Life cycle hooks\n\nYou can add callback hooks to a command for life cycle events.\n\nExample file: [hook.js](./examples/hook.js)\n\n```js\nprogram\n  .option('-t, --trace', 'display trace statements for commands')\n  .hook('preAction', (thisCommand, actionCommand) => {\n    if (thisCommand.opts().trace) {\n      console.log(`About to call action handler for subcommand: ${actionCommand.name()}`);\n      console.log('arguments: %O', actionCommand.args);\n      console.log('options: %o', actionCommand.opts());\n    }\n  });\n```\n\nThe callback hook can be `async`, in which case you call `.parseAsync` rather than `.parse`. You can add multiple hooks per event.\n\nThe supported events are:\n\n- `preAction`: called before action handler for this command and its subcommands\n- `postAction`: called after action handler for this command and its subcommands\n\nThe hook is passed the command it was added to, and the command running the action handler.\n\n## Automated help\n\nThe help information is auto-generated based on the information commander already knows about your program. The default\nhelp option is `-h,--help`.\n\nExample file: [pizza](./examples/pizza)\n\n```bash\n$ node ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizza ordering\n\nOptions:\n  -p, --peppers        Add peppers\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           display help for command\n```\n\nA `help` command is added by default if your command has subcommands. It can be used alone, or with a subcommand name to show\nfurther help for the subcommand. These are effectively the same if the `shell` program has implicit help:\n\n```bash\nshell help\nshell --help\n\nshell help spawn\nshell spawn --help\n```\n\n### Custom help\n\nYou can add extra text to be displayed along with the built-in help. \n\nExample file: [custom-help](./examples/custom-help)\n\n```js\nprogram\n  .option('-f, --foo', 'enable some foo');\n\nprogram.addHelpText('after', `\n\nExample call:\n  $ custom-help --help`);\n```\n\nYields the following help output:\n\n```Text\nUsage: custom-help [options]\n\nOptions:\n  -f, --foo   enable some foo\n  -h, --help  display help for command\n\nExample call:\n  $ custom-help --help\n```\n\nThe positions in order displayed are:\n\n- `beforeAll`: add to the program for a global banner or header\n- `before`: display extra information before built-in help\n- `after`: display extra information after built-in help\n- `afterAll`: add to the program for a global footer (epilog)\n\nThe positions \"beforeAll\" and \"afterAll\" apply to the command and all its subcommands. \n\nThe second parameter can be a string, or a function returning a string. The function is passed a context object for your convenience. The properties are:\n\n- error: a boolean for whether the help is being displayed due to a usage error\n- command: the Command which is displaying the help\n\n### Display help from code\n\n`.help()`: display help information and exit immediately. You can optionally pass `{ error: true }` to display on stderr and exit with an error status.\n\n`.outputHelp()`: output help information without exiting. You can optionally pass `{ error: true }` to display on stderr.\n\n`.helpInformation()`: get the built-in command help information as a string for processing or displaying yourself.\n\n### .usage and .name\n\nThese allow you to customise the usage description in the first line of the help. The name is otherwise\ndeduced from the (full) program arguments. Given:\n\n```js\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n```\n\nThe help will start with:\n\n```Text\nUsage: my-command [global options] command\n```\n\n### .helpOption(flags, description)\n\nBy default every command has a help option. Override the default help flags and description. Pass false to disable the built-in help option.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n### .addHelpCommand()\n\nA help command is added by default if your command has subcommands. You can explicitly turn on or off the implicit help command with `.addHelpCommand()` and `.addHelpCommand(false)`.\n\nYou can both turn on and customise the help command by supplying the name and description:\n\n```js\nprogram.addHelpCommand('assist [command]', 'show assistance');\n```\n\n### More configuration\n\nThe built-in help is formatted using the Help class.\nYou can configure the Help behaviour by modifying data properties and methods using `.configureHelp()`, or by subclassing using `.createHelp()` if you prefer.\n\nThe data properties are:\n\n- `helpWidth`: specify the wrap width, useful for unit tests\n- `sortSubcommands`: sort the subcommands alphabetically\n- `sortOptions`: sort the options alphabetically\n\nThere are methods getting the visible lists of arguments, options, and subcommands. There are methods for formatting the items in the lists, with each item having a _term_ and _description_. Take a look at `.formatHelp()` to see how they are used.\n\nExample file: [configure-help.js](./examples/configure-help.js)\n\n```\nprogram.configureHelp({\n  sortSubcommands: true,\n  subcommandTerm: (cmd) => cmd.name() // Just show the name, instead of short usage.\n});\n```\n\n## Custom event listeners\n\nYou can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.opts().verbose;\n});\n\nprogram.on('command:*', function (operands) {\n  console.error(`error: unknown command '${operands[0]}'`);\n  const availableCommands = program.commands.map(cmd => cmd.name());\n  mySuggestBestMatch(operands[0], availableCommands);\n  process.exitCode = 1;\n});\n```\n\n## Bits and pieces\n\n### .parse() and .parseAsync()\n\nThe first argument to `.parse` is the array of strings to parse. You may omit the parameter to implicitly use `process.argv`.\n\nIf the arguments follow different conventions than node you can pass a `from` option in the second parameter:\n\n- 'node': default, `argv[0]` is the application and `argv[1]` is the script being run, with user parameters after that\n- 'electron': `argv[1]` varies depending on whether the electron application is packaged\n- 'user': all of the arguments from the user\n\nFor example:\n\n```js\nprogram.parse(process.argv); // Explicit, node conventions\nprogram.parse(); // Implicit, and auto-detect electron\nprogram.parse(['-f', 'filename'], { from: 'user' });\n```\n\n### Parsing Configuration\n\nIf the default parsing does not suit your needs, there are some behaviours to support other usage patterns.\n\nBy default program options are recognised before and after subcommands. To only look for program options before subcommands, use `.enablePositionalOptions()`. This lets you use\nan option for a different purpose in subcommands.\n\nExample file: [positional-options.js](./examples/positional-options.js)\n\nWith positional options, the `-b` is a program option in the first line and a subcommand option in the second line:\n\n```sh\nprogram -b subcommand\nprogram subcommand -b\n```\n\nBy default options are recognised before and after command-arguments. To only process options that come\nbefore the command-arguments, use `.passThroughOptions()`. This lets you pass the  arguments and following options through to another program\nwithout needing to use `--` to end the option processing. \nTo use pass through options in a subcommand, the program needs to enable positional options.\n\nExample file: [pass-through-options.js](./examples/pass-through-options.js)\n\nWith pass through options, the `--port=80` is a program option in the first line and passed through as a command-argument in the second line:\n\n```sh\nprogram --port=80 arg\nprogram arg --port=80\n```\n\nBy default the option processing shows an error for an unknown option. To have an unknown option treated as an ordinary command-argument and continue looking for options, use `.allowUnknownOption()`. This lets you mix known and unknown options.\n\nBy default the argument processing does not display an error for more command-arguments than expected.\nTo display an error for excess arguments, use`.allowExcessArguments(false)`.\n\n### Legacy options as properties \n\nBefore Commander 7, the option values were stored as properties on the command.\nThis was convenient to code but the downside was possible clashes with\nexisting properties of `Command`. You can revert to the old behaviour to run unmodified legacy code by using `.storeOptionsAsProperties()`.\n\n```js\nprogram\n  .storeOptionsAsProperties()\n  .option('-d, --debug')\n  .action((commandAndOptions) => {\n    if (commandAndOptions.debug) {\n      console.error(`Called ${commandAndOptions.name()}`);\n    }\n  });\n```\n\n### TypeScript\n\nIf you use `ts-node` and  stand-alone executable subcommands written as `.ts` files, you need to call your program through node to get the subcommands called correctly. e.g.\n\n```bash\nnode -r ts-node/register pm.ts\n```\n\n### createCommand()\n\nThis factory function creates a new command. It is exported and may be used instead of using `new`, like:\n\n```js\nconst { createCommand } = require('commander');\nconst program = createCommand();\n```\n\n`createCommand` is also a method of the Command object, and creates a new command rather than a subcommand. This gets used internally\nwhen creating subcommands using `.command()`, and you may override it to\ncustomise the new subcommand (example file [custom-command-class.js](./examples/custom-command-class.js)).\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n\n- Use `#! /usr/bin/env node --harmony` in the subcommands scripts. (Note Windows does not support this pattern.)\n- Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning subcommand process.\n\n### Debugging stand-alone executable subcommands\n\nAn executable subcommand is launched as a separate child process.\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) executable subcommands using `node --inspect` et al,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\nIf you are using VSCode to debug executable subcommands you need to set the `\"autoAttachChildProcesses\": true` flag in your launch.json configuration.\n\n### Override exit and output handling\n\nBy default Commander calls `process.exit` when it detects errors, or after displaying the help or version. You can override\nthis behaviour and optionally supply a callback. The default override throws a `CommanderError`.\n\nThe override callback is passed a `CommanderError` with properties `exitCode` number, `code` string, and `message`. The default override behaviour is to throw the error, except for async handling of executable subcommand completion which carries on. The normal display of error messages or version or help\nis not affected by the override which is called after the display.\n\n```js\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // custom processing...\n}\n```\n\nBy default Commander is configured for a command-line application and writes to stdout and stderr.\nYou can modify this behaviour for custom applications. In addition, you can modify the display of error messages.\n\nExample file: [configure-output.js](./examples/configure-output.js)\n\n\n```js\nfunction errorColor(str) {\n  // Add ANSI escape codes to display text in red.\n  return `\\x1b[31m${str}\\x1b[0m`;\n}\n\nprogram\n  .configureOutput({\n    // Visibly override write routines as example!\n    writeOut: (str) => process.stdout.write(`[OUT] ${str}`),\n    writeErr: (str) => process.stdout.write(`[ERR] ${str}`),\n    // Highlight errors in color.\n    outputError: (str, write) => write(errorColor(str))\n  });\n```\n\n### Additional documentation\n\nThere is more information available about:\n\n- [deprecated](./docs/deprecated.md) features still supported for backwards compatibility\n- [options taking varying arguments](./docs/options-taking-varying-arguments.md)\n\n## Examples\n\nIn a single command program, you might not need an action handler.\n\nExample file: [pizza](./examples/pizza)\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .description('An application for pizza ordering')\n  .option('-p, --peppers', 'Add peppers')\n  .option('-c, --cheese <type>', 'Add the specified type of cheese', 'marble')\n  .option('-C, --no-cheese', 'You do not want any cheese');\n\nprogram.parse();\n\nconst options = program.opts();\nconsole.log('you ordered a pizza with:');\nif (options.peppers) console.log('  - peppers');\nconst cheese = !options.cheese ? 'no' : options.cheese;\nconsole.log('  - %s cheese', cheese);\n```\n\nIn a multi-command program, you will have action handlers for each command (or stand-alone executables for the commands).\n\nExample file: [deploy](./examples/deploy)\n\n```js\nconst { Command } = require('commander');\nconst program = new Command();\n\nprogram\n  .version('0.0.1')\n  .option('-c, --config <path>', 'set config path', './deploy.conf');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option('-s, --setup_mode <mode>', 'Which setup mode to use', 'normal')\n  .action((env, options) => {\n    env = env || 'all';\n    console.log('read config from %s', program.opts().config);\n    console.log('setup for %s env(s) with %s mode', env, options.setup_mode);\n  });\n\nprogram\n  .command('exec <script>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option('-e, --exec_mode <mode>', 'Which exec mode to use', 'fast')\n  .action((script, options) => {\n    console.log('read config from %s', program.opts().config);\n    console.log('exec \"%s\" using %s mode and config %s', script, options.exec_mode, program.opts().config);\n  }).addHelpText('after', `\nExamples:\n  $ deploy exec sequential\n  $ deploy exec async`\n  );\n  \nprogram.parse(process.argv);\n```\n\nMore samples can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## Support\n\nThe current version of Commander is fully supported on Long Term Support versions of node, and requires at least node v12.\n(For older versions of node, use an older version of Commander. Commander version 2.x has the widest support.)\n\nThe main forum for free and community support is the project [Issues](https://github.com/tj/commander.js/issues) on GitHub.\n\n### Commander for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of Commander and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-commander?utm_source=npm-commander&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n","type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true,"readmeFilename":"Readme.md","gitHead":"ff7658cb0ddcf20cc13f7b792634867771397eac","_nodeVersion":"14.17.0","_npmVersion":"6.14.13","_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"maintainers":[{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"vanesyan","email":"romain.vanesyan@gmail.com"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_8.0.0-0_1621726264093_0.7665670974009267"},"_hasShrinkwrap":false},"8.0.0-1":{"_id":"commander@8.0.0-1","name":"commander","description":"the complete solution for node.js command-line programs","version":"8.0.0-1","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node --experimental-modules ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js lib/*.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-lint && npm run typescript-checkJS && npm run test-esm"},"directories":{},"devDependencies":{"@types/jest":"^26.0.23","@types/node":"^14.17.1","@typescript-eslint/eslint-plugin":"^4.25.0","@typescript-eslint/parser":"^4.25.0","eslint":"^7.27.0","eslint-config-standard":"^16.0.3","eslint-plugin-jest":"^24.3.6","jest":"^27.0.1","standard":"^16.0.3","ts-jest":"^27.0.1","tsd":"^0.16.0","typescript":"^4.3.2"},"dependencies":{},"engines":{"node":">= 12"},"main":"./index.js","dist":{"shasum":"beb815df52cc9d0e1afcfff93b0f94b79a62a8ba","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-8.0.0-1.tgz"},"readme":"# Commander.js\n\n[![Build Status](https://github.com/tj/commander.js/workflows/build/badge.svg)](https://github.com/tj/commander.js/actions?query=workflow%3A%22build%22)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces.\n\nRead this in other languages: English | [简体中文](./Readme_zh-CN.md)\n\n- [Commander.js](#commanderjs)\n  - [Installation](#installation)\n  - [Declaring _program_ variable](#declaring-program-variable)\n  - [Options](#options)\n    - [Common option types, boolean and value](#common-option-types-boolean-and-value)\n    - [Default option value](#default-option-value)\n    - [Other option types, negatable boolean and boolean|value](#other-option-types-negatable-boolean-and-booleanvalue)\n    - [Required option](#required-option)\n    - [Variadic option](#variadic-option)\n    - [Version option](#version-option)\n    - [More configuration](#more-configuration)\n    - [Custom option processing](#custom-option-processing)\n  - [Commands](#commands)\n    - [Command-arguments](#command-arguments)\n      - [More configuration](#more-configuration-1)\n      - [Custom argument processing](#custom-argument-processing)\n    - [Action handler](#action-handler)\n    - [Stand-alone executable (sub)commands](#stand-alone-executable-subcommands)\n    - [Life cycle hooks](#life-cycle-hooks)\n  - [Automated help](#automated-help)\n    - [Custom help](#custom-help)\n    - [Display help from code](#display-help-from-code)\n    - [.usage and .name](#usage-and-name)\n    - [.helpOption(flags, description)](#helpoptionflags-description)\n    - [.addHelpCommand()](#addhelpcommand)\n    - [More configuration](#more-configuration-2)\n  - [Custom event listeners](#custom-event-listeners)\n  - [Bits and pieces](#bits-and-pieces)\n    - [.parse() and .parseAsync()](#parse-and-parseasync)\n    - [Parsing Configuration](#parsing-configuration)\n    - [Legacy options as properties](#legacy-options-as-properties)\n    - [TypeScript](#typescript)\n    - [createCommand()](#createcommand)\n    - [Node options such as `--harmony`](#node-options-such-as---harmony)\n    - [Debugging stand-alone executable subcommands](#debugging-stand-alone-executable-subcommands)\n    - [Override exit and output handling](#override-exit-and-output-handling)\n    - [Additional documentation](#additional-documentation)\n  - [Examples](#examples)\n  - [Support](#support)\n    - [Commander for enterprise](#commander-for-enterprise)\n\nFor information about terms used in this document see: [terminology](./docs/terminology.md)\n\n## Installation\n\n```bash\nnpm install commander\n```\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\nconst { program } = require('commander');\nprogram.version('0.0.1');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n```js\nconst { Command } = require('commander');\nconst program = new Command();\nprogram.version('0.0.1');\n```\n\nFor named imports in ECMAScript modules, import from `commander/esm.mjs`.\n\n```js\n// index.mjs\nimport { Command } from 'commander/esm.mjs';\nconst program = new Command();\n```\n\nAnd in TypeScript:\n\n```ts\n// index.ts\nimport { Command } from 'commander';\nconst program = new Command();\n```\n\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space or vertical bar ('|').\n\nThe parsed options can be accessed by calling `.opts()` on a `Command` object, and are passed to the action handler.\nYou can also use `.getOptionValue()` and `.setOptionValue()` to work with a single option value.\n\nMulti-word options such as \"--template-engine\" are camel-cased, becoming `program.opts().templateEngine` etc.\n\nMultiple short flags may optionally be combined in a single argument following the dash: boolean flags, followed by a single option taking a value (possibly followed by the value).\nFor example `-a -b -p 80` may be written as `-ab -p80` or even `-abp80`.\n\nYou can use `--` to indicate the end of the options, and any remaining arguments will be used without being interpreted.\n\nBy default options on the command line are not positional, and can be specified before or after other arguments.\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean option, and an option which takes its value\nfrom the following argument (declared with angle brackets like `--expect <value>`). Both are `undefined` unless specified on command line.  \n\nExample file: [options-common.js](./examples/options-common.js)\n\n```js\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.debug) console.log(options);\nconsole.log('pizza details:');\nif (options.small) console.log('- small pizza size');\nif (options.pizzaType) console.log(`- ${options.pizzaType}`);\n```\n\n```bash\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -d -s -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the program options in the `program.args` array. The parameter is optional and defaults to `process.argv`.\n\n### Default option value\n\nYou can specify a default value for an option which takes a value.\n\nExample file: [options-defaults.js](./examples/options-defaults.js)\n\n```js\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse();\n\nconsole.log(`cheese: ${program.opts().cheese}`);\n```\n\n```bash\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and boolean|value\n\nYou can define a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be. You can specify a default boolean value for a boolean option and it can be overridden on command line.\n\nExample file: [options-negatable.js](./examples/options-negatable.js)\n\n```js\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse();\n\nconst options = program.opts();\nconst sauceStr = options.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (options.cheese === false) ? 'no cheese' : `${options.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```bash\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which may be used as a boolean option but may optionally take an option-argument\n(declared with square brackets like `--optional [value]`).\n\nExample file: [options-boolean-or-value.js](./examples/options-boolean-or-value.js)\n\n```js\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.cheese === undefined) console.log('no cheese');\nelse if (options.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${options.cheese}`);\n```\n\n```bash\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-taking-varying-arguments.md).\n\n### Required option\n\nYou may specify a required (mandatory) option using `.requiredOption`. The option must have a value after parsing, usually specified on the command line, or perhaps from a default value (say from environment). The method is otherwise the same as `.option` in format, taking flags and description, and optional default value or custom processing.\n\nExample file: [options-required.js](./examples/options-required.js)\n\n```js\nprogram\n  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse();\n```\n\n```bash\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n```\n\n### Variadic option\n\nYou may make an option variadic by appending `...` to the value placeholder when declaring the option. On the command line you\ncan then specify multiple option-arguments, and the parsed option value will be an array. The extra arguments\nare read until the first argument starting with a dash. The special argument `--` stops option processing entirely. If a value\nis specified in the same argument as the option then no further values are read.\n\nExample file: [options-variadic.js](./examples/options-variadic.js)\n\n```js\nprogram\n  .option('-n, --number <numbers...>', 'specify numbers')\n  .option('-l, --letter [letters...]', 'specify letters');\n\nprogram.parse();\n\nconsole.log('Options: ', program.opts());\nconsole.log('Remaining arguments: ', program.args);\n```\n\n```bash\n$ collect -n 1 2 3 --letter a b c\nOptions:  { number: [ '1', '2', '3' ], letter: [ 'a', 'b', 'c' ] }\nRemaining arguments:  []\n$ collect --letter=A -n80 operand\nOptions:  { number: [ '80' ], letter: [ 'A' ] }\nRemaining arguments:  [ 'operand' ]\n$ collect --letter -n 1 -n 2 3 -- operand\nOptions:  { number: [ '1', '2', '3' ], letter: true }\nRemaining arguments:  [ 'operand' ]\n```\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-taking-varying-arguments.md).\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```bash\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n### More configuration\n\nYou can add most options using the `.option()` method, but there are some additional features available\nby constructing an `Option` explicitly for less common cases.\n\nExample file: [options-extra.js](./examples/options-extra.js)\n\n```js\nprogram\n  .addOption(new Option('-s, --secret').hideHelp())\n  .addOption(new Option('-t, --timeout <delay>', 'timeout in seconds').default(60, 'one minute'))\n  .addOption(new Option('-d, --drink <size>', 'drink size').choices(['small', 'medium', 'large']));\n```\n\n```bash\n$ extra --help\nUsage: help [options]\n\nOptions:\n  -t, --timeout <delay>  timeout in seconds (default: one minute)\n  -d, --drink <size>     drink cup size (choices: \"small\", \"medium\", \"large\")\n  -h, --help             display help for command\n\n$ extra --drink huge\nerror: option '-d, --drink <size>' argument 'huge' is invalid. Allowed choices are small, medium, large.\n```\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option-arguments. The callback function receives two parameters,\nthe user specified option-argument and the previous value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option-argument to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function parameter.\n\nExample file: [options-custom-processing.js](./examples/options-custom-processing.js)\n\n```js\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and a radix\n  const parsedValue = parseInt(value, 10);\n  if (isNaN(parsedValue)) {\n    throw new commander.InvalidArgumentError('Not a number.');\n  }\n  return parsedValue;\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse();\n\nconst options = program.opts();\nif (options.float !== undefined) console.log(`float: ${options.float}`);\nif (options.integer !== undefined) console.log(`integer: ${options.integer}`);\nif (options.verbose > 0) console.log(`verbosity: ${options.verbose}`);\nif (options.collect.length > 0) console.log(options.collect);\nif (options.list !== undefined) console.log(options.list);\n```\n\n```bash\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n## Commands\n\nYou can specify (sub)commands using `.command()` or `.addCommand()`. There are two ways these can be implemented: using an action handler attached to the command, or as a stand-alone executable file (described in more detail later). The subcommands may be nested ([example](./examples/nestedCommands.js)).\n\nIn the first parameter to `.command()` you specify the command name. You may append the command-arguments after the command name, or specify them separately using `.argument()`. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nYou can use `.addCommand()` to add an already configured subcommand to the program.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using stand-alone executable file, indicated by adding description as second parameter to `.command`.\n// Returns `this` for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n\n// Command prepared separately.\n// Returns `this` for adding more commands.\nprogram\n  .addCommand(build.makeBuildCommand());\n```\n\nConfiguration options can be passed with the call to `.command()` and `.addCommand()`. Specifying `hidden: true` will \nremove the command from the generated help output. Specifying `isDefault: true` will run the subcommand if no other\nsubcommand is specified ([example](./examples/defaultCommand.js)).\n\n### Command-arguments\n\nFor subcommands, you can specify the argument syntax in the call to `.command()` (as shown above). This\nis the only method usable for subcommands implemented using a stand-alone executable, but for other subcommands\nyou can instead use the following method.\n\nTo configure a command, you can use `.argument()` to specify each expected command-argument. \nYou supply the argument name and an optional description. The argument may be `<required>` or `[optional]`.\nYou can specify a default value for an optional command-argument.\n\nExample file: [argument.js](./examples/argument.js)\n\n```js\nprogram\n  .version('0.1.0')\n  .argument('<username>', 'user to login')\n  .argument('[password]', 'password for user, if required', 'no password given')\n  .action((username, password) => {\n    console.log('username:', username);\n    console.log('password:', password);\n  });\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. A variadic argument is passed to the action handler as an array. For example:\n\n```js\nprogram\n  .version('0.1.0')\n  .command('rmdir')\n  .argument('<dirs...>')\n  .action(function (dirs) {\n    dirs.forEach((dir) => {\n      console.log('rmdir %s', dir);\n    });\n  });\n```\n\nThere is a convenience method to add multiple arguments at once, but without descriptions:\n\n```js\nprogram\n  .arguments('<username> <password>');\n```\n\n#### More configuration\n\nThere are some additional features available by constructing an `Argument` explicitly for less common cases.\n\nExample file: [arguments-extra.js](./examples/arguments-extra.js)\n\n```js\nprogram\n  .addArgument(new commander.Argument('<drink-size>', 'drink cup size').choices(['small', 'medium', 'large']))\n  .addArgument(new commander.Argument('[timeout]', 'timeout in seconds').default(60, 'one minute'))\n```\n\n#### Custom argument processing\n\nYou may specify a function to do custom processing of command-arguments before they are passed to the action handler.\nThe callback function receives two parameters, the user specified command-argument and the previous value for the argument.\nIt returns the new value for the argument.\n\nYou can optionally specify the default/starting value for the argument after the function parameter.\n\nExample file: [arguments-custom-processing.js](./examples/arguments-custom-processing.js)\n\n```js\nprogram\n  .command('add')\n  .argument('<first>', 'integer argument', myParseInt)\n  .argument('[second]', 'integer argument', myParseInt, 1000)\n  .action((first, second) => {\n    console.log(`${first} + ${second} = ${first + second}`);\n  })\n;\n```\n\n### Action handler\n\nThe action handler gets passed a parameter for each command-argument you declared, and two additional parameters\nwhich are the parsed options and the command object itself. \n\nExample file: [thank.js](./examples/thank.js)\n\n```js\nprogram\n  .argument('<name>')\n  .option('-t, --title <honorific>', 'title to use before name')\n  .option('-d, --debug', 'display some debugging')\n  .action((name, options, command) => {\n    if (options.debug) {\n      console.error('Called %s with options %o', command.name(), options);\n    }\n    const title = options.title ? `${options.title} ` : '';\n    console.log(`Thank-you ${title}${name}`);\n  });\n```\n\nYou may supply an `async` action handler, in which case you call `.parseAsync` rather than `.parse`.\n\n```js\nasync function run() { /* code goes here */ }\n\nasync function main() {\n  program\n    .command('run')\n    .action(run);\n  await program.parseAsync(process.argv);\n}\n```\n\nA command's options and arguments on the command line are validated when the command is used. Any unknown options or missing arguments will be reported as an error. You can suppress the unknown option checks with `.allowUnknownOption()`. By default it is not an error to\npass more arguments than declared, but you can make this an error with `.allowExcessArguments(false)`.\n\n### Stand-alone executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells Commander that you're going to use stand-alone executables for subcommands.\nCommander will search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-subcommand`, like `pm-install`, `pm-search`.\nYou can specify a custom name with the `executableFile` configuration option.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\nExample file: [pm](./examples/pm)\n\n```js\nprogram\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', { executableFile: 'myUpdateSubCommand' })\n  .command('list', 'list packages installed', { isDefault: true });\n\nprogram.parse(process.argv);\n```\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n### Life cycle hooks\n\nYou can add callback hooks to a command for life cycle events.\n\nExample file: [hook.js](./examples/hook.js)\n\n```js\nprogram\n  .option('-t, --trace', 'display trace statements for commands')\n  .hook('preAction', (thisCommand, actionCommand) => {\n    if (thisCommand.opts().trace) {\n      console.log(`About to call action handler for subcommand: ${actionCommand.name()}`);\n      console.log('arguments: %O', actionCommand.args);\n      console.log('options: %o', actionCommand.opts());\n    }\n  });\n```\n\nThe callback hook can be `async`, in which case you call `.parseAsync` rather than `.parse`. You can add multiple hooks per event.\n\nThe supported events are:\n\n- `preAction`: called before action handler for this command and its subcommands\n- `postAction`: called after action handler for this command and its subcommands\n\nThe hook is passed the command it was added to, and the command running the action handler.\n\n## Automated help\n\nThe help information is auto-generated based on the information commander already knows about your program. The default\nhelp option is `-h,--help`.\n\nExample file: [pizza](./examples/pizza)\n\n```bash\n$ node ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizza ordering\n\nOptions:\n  -p, --peppers        Add peppers\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           display help for command\n```\n\nA `help` command is added by default if your command has subcommands. It can be used alone, or with a subcommand name to show\nfurther help for the subcommand. These are effectively the same if the `shell` program has implicit help:\n\n```bash\nshell help\nshell --help\n\nshell help spawn\nshell spawn --help\n```\n\n### Custom help\n\nYou can add extra text to be displayed along with the built-in help. \n\nExample file: [custom-help](./examples/custom-help)\n\n```js\nprogram\n  .option('-f, --foo', 'enable some foo');\n\nprogram.addHelpText('after', `\n\nExample call:\n  $ custom-help --help`);\n```\n\nYields the following help output:\n\n```Text\nUsage: custom-help [options]\n\nOptions:\n  -f, --foo   enable some foo\n  -h, --help  display help for command\n\nExample call:\n  $ custom-help --help\n```\n\nThe positions in order displayed are:\n\n- `beforeAll`: add to the program for a global banner or header\n- `before`: display extra information before built-in help\n- `after`: display extra information after built-in help\n- `afterAll`: add to the program for a global footer (epilog)\n\nThe positions \"beforeAll\" and \"afterAll\" apply to the command and all its subcommands. \n\nThe second parameter can be a string, or a function returning a string. The function is passed a context object for your convenience. The properties are:\n\n- error: a boolean for whether the help is being displayed due to a usage error\n- command: the Command which is displaying the help\n\n### Display help from code\n\n`.help()`: display help information and exit immediately. You can optionally pass `{ error: true }` to display on stderr and exit with an error status.\n\n`.outputHelp()`: output help information without exiting. You can optionally pass `{ error: true }` to display on stderr.\n\n`.helpInformation()`: get the built-in command help information as a string for processing or displaying yourself.\n\n### .usage and .name\n\nThese allow you to customise the usage description in the first line of the help. The name is otherwise\ndeduced from the (full) program arguments. Given:\n\n```js\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n```\n\nThe help will start with:\n\n```Text\nUsage: my-command [global options] command\n```\n\n### .helpOption(flags, description)\n\nBy default every command has a help option. Override the default help flags and description. Pass false to disable the built-in help option.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n### .addHelpCommand()\n\nA help command is added by default if your command has subcommands. You can explicitly turn on or off the implicit help command with `.addHelpCommand()` and `.addHelpCommand(false)`.\n\nYou can both turn on and customise the help command by supplying the name and description:\n\n```js\nprogram.addHelpCommand('assist [command]', 'show assistance');\n```\n\n### More configuration\n\nThe built-in help is formatted using the Help class.\nYou can configure the Help behaviour by modifying data properties and methods using `.configureHelp()`, or by subclassing using `.createHelp()` if you prefer.\n\nThe data properties are:\n\n- `helpWidth`: specify the wrap width, useful for unit tests\n- `sortSubcommands`: sort the subcommands alphabetically\n- `sortOptions`: sort the options alphabetically\n\nThere are methods getting the visible lists of arguments, options, and subcommands. There are methods for formatting the items in the lists, with each item having a _term_ and _description_. Take a look at `.formatHelp()` to see how they are used.\n\nExample file: [configure-help.js](./examples/configure-help.js)\n\n```\nprogram.configureHelp({\n  sortSubcommands: true,\n  subcommandTerm: (cmd) => cmd.name() // Just show the name, instead of short usage.\n});\n```\n\n## Custom event listeners\n\nYou can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.opts().verbose;\n});\n\nprogram.on('command:*', function (operands) {\n  console.error(`error: unknown command '${operands[0]}'`);\n  const availableCommands = program.commands.map(cmd => cmd.name());\n  mySuggestBestMatch(operands[0], availableCommands);\n  process.exitCode = 1;\n});\n```\n\n## Bits and pieces\n\n### .parse() and .parseAsync()\n\nThe first argument to `.parse` is the array of strings to parse. You may omit the parameter to implicitly use `process.argv`.\n\nIf the arguments follow different conventions than node you can pass a `from` option in the second parameter:\n\n- 'node': default, `argv[0]` is the application and `argv[1]` is the script being run, with user parameters after that\n- 'electron': `argv[1]` varies depending on whether the electron application is packaged\n- 'user': all of the arguments from the user\n\nFor example:\n\n```js\nprogram.parse(process.argv); // Explicit, node conventions\nprogram.parse(); // Implicit, and auto-detect electron\nprogram.parse(['-f', 'filename'], { from: 'user' });\n```\n\n### Parsing Configuration\n\nIf the default parsing does not suit your needs, there are some behaviours to support other usage patterns.\n\nBy default program options are recognised before and after subcommands. To only look for program options before subcommands, use `.enablePositionalOptions()`. This lets you use\nan option for a different purpose in subcommands.\n\nExample file: [positional-options.js](./examples/positional-options.js)\n\nWith positional options, the `-b` is a program option in the first line and a subcommand option in the second line:\n\n```sh\nprogram -b subcommand\nprogram subcommand -b\n```\n\nBy default options are recognised before and after command-arguments. To only process options that come\nbefore the command-arguments, use `.passThroughOptions()`. This lets you pass the  arguments and following options through to another program\nwithout needing to use `--` to end the option processing. \nTo use pass through options in a subcommand, the program needs to enable positional options.\n\nExample file: [pass-through-options.js](./examples/pass-through-options.js)\n\nWith pass through options, the `--port=80` is a program option in the first line and passed through as a command-argument in the second line:\n\n```sh\nprogram --port=80 arg\nprogram arg --port=80\n```\n\nBy default the option processing shows an error for an unknown option. To have an unknown option treated as an ordinary command-argument and continue looking for options, use `.allowUnknownOption()`. This lets you mix known and unknown options.\n\nBy default the argument processing does not display an error for more command-arguments than expected.\nTo display an error for excess arguments, use`.allowExcessArguments(false)`.\n\n### Legacy options as properties \n\nBefore Commander 7, the option values were stored as properties on the command.\nThis was convenient to code but the downside was possible clashes with\nexisting properties of `Command`. You can revert to the old behaviour to run unmodified legacy code by using `.storeOptionsAsProperties()`.\n\n```js\nprogram\n  .storeOptionsAsProperties()\n  .option('-d, --debug')\n  .action((commandAndOptions) => {\n    if (commandAndOptions.debug) {\n      console.error(`Called ${commandAndOptions.name()}`);\n    }\n  });\n```\n\n### TypeScript\n\nIf you use `ts-node` and  stand-alone executable subcommands written as `.ts` files, you need to call your program through node to get the subcommands called correctly. e.g.\n\n```bash\nnode -r ts-node/register pm.ts\n```\n\n### createCommand()\n\nThis factory function creates a new command. It is exported and may be used instead of using `new`, like:\n\n```js\nconst { createCommand } = require('commander');\nconst program = createCommand();\n```\n\n`createCommand` is also a method of the Command object, and creates a new command rather than a subcommand. This gets used internally\nwhen creating subcommands using `.command()`, and you may override it to\ncustomise the new subcommand (example file [custom-command-class.js](./examples/custom-command-class.js)).\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n\n- Use `#! /usr/bin/env node --harmony` in the subcommands scripts. (Note Windows does not support this pattern.)\n- Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning subcommand process.\n\n### Debugging stand-alone executable subcommands\n\nAn executable subcommand is launched as a separate child process.\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) executable subcommands using `node --inspect` et al,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\nIf you are using VSCode to debug executable subcommands you need to set the `\"autoAttachChildProcesses\": true` flag in your launch.json configuration.\n\n### Override exit and output handling\n\nBy default Commander calls `process.exit` when it detects errors, or after displaying the help or version. You can override\nthis behaviour and optionally supply a callback. The default override throws a `CommanderError`.\n\nThe override callback is passed a `CommanderError` with properties `exitCode` number, `code` string, and `message`. The default override behaviour is to throw the error, except for async handling of executable subcommand completion which carries on. The normal display of error messages or version or help\nis not affected by the override which is called after the display.\n\n```js\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // custom processing...\n}\n```\n\nBy default Commander is configured for a command-line application and writes to stdout and stderr.\nYou can modify this behaviour for custom applications. In addition, you can modify the display of error messages.\n\nExample file: [configure-output.js](./examples/configure-output.js)\n\n\n```js\nfunction errorColor(str) {\n  // Add ANSI escape codes to display text in red.\n  return `\\x1b[31m${str}\\x1b[0m`;\n}\n\nprogram\n  .configureOutput({\n    // Visibly override write routines as example!\n    writeOut: (str) => process.stdout.write(`[OUT] ${str}`),\n    writeErr: (str) => process.stdout.write(`[ERR] ${str}`),\n    // Highlight errors in color.\n    outputError: (str, write) => write(errorColor(str))\n  });\n```\n\n### Additional documentation\n\nThere is more information available about:\n\n- [deprecated](./docs/deprecated.md) features still supported for backwards compatibility\n- [options taking varying arguments](./docs/options-taking-varying-arguments.md)\n\n## Examples\n\nIn a single command program, you might not need an action handler.\n\nExample file: [pizza](./examples/pizza)\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .description('An application for pizza ordering')\n  .option('-p, --peppers', 'Add peppers')\n  .option('-c, --cheese <type>', 'Add the specified type of cheese', 'marble')\n  .option('-C, --no-cheese', 'You do not want any cheese');\n\nprogram.parse();\n\nconst options = program.opts();\nconsole.log('you ordered a pizza with:');\nif (options.peppers) console.log('  - peppers');\nconst cheese = !options.cheese ? 'no' : options.cheese;\nconsole.log('  - %s cheese', cheese);\n```\n\nIn a multi-command program, you will have action handlers for each command (or stand-alone executables for the commands).\n\nExample file: [deploy](./examples/deploy)\n\n```js\nconst { Command } = require('commander');\nconst program = new Command();\n\nprogram\n  .version('0.0.1')\n  .option('-c, --config <path>', 'set config path', './deploy.conf');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option('-s, --setup_mode <mode>', 'Which setup mode to use', 'normal')\n  .action((env, options) => {\n    env = env || 'all';\n    console.log('read config from %s', program.opts().config);\n    console.log('setup for %s env(s) with %s mode', env, options.setup_mode);\n  });\n\nprogram\n  .command('exec <script>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option('-e, --exec_mode <mode>', 'Which exec mode to use', 'fast')\n  .action((script, options) => {\n    console.log('read config from %s', program.opts().config);\n    console.log('exec \"%s\" using %s mode and config %s', script, options.exec_mode, program.opts().config);\n  }).addHelpText('after', `\nExamples:\n  $ deploy exec sequential\n  $ deploy exec async`\n  );\n  \nprogram.parse(process.argv);\n```\n\nMore samples can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## Support\n\nThe current version of Commander is fully supported on Long Term Support versions of node, and requires at least node v12.\n(For older versions of node, use an older version of Commander. Commander version 2.x has the widest support.)\n\nThe main forum for free and community support is the project [Issues](https://github.com/tj/commander.js/issues) on GitHub.\n\n### Commander for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of Commander and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-commander?utm_source=npm-commander&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n","type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true,"readmeFilename":"Readme.md","gitHead":"5ddc41b5503114b50cb6ac6e91baa8fa25a834a5","_nodeVersion":"14.17.0","_npmVersion":"6.14.13","_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"maintainers":[{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"vanesyan","email":"romain.vanesyan@gmail.com"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_8.0.0-1_1622446226702_0.225051785341156"},"_hasShrinkwrap":false},"8.0.0-2":{"_id":"commander@8.0.0-2","name":"commander","description":"the complete solution for node.js command-line programs","version":"8.0.0-2","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node --experimental-modules ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js lib/*.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-lint && npm run typescript-checkJS && npm run test-esm"},"directories":{},"devDependencies":{"@types/jest":"^26.0.23","@types/node":"^14.17.1","@typescript-eslint/eslint-plugin":"^4.25.0","@typescript-eslint/parser":"^4.25.0","eslint":"^7.27.0","eslint-config-standard":"^16.0.3","eslint-plugin-jest":"^24.3.6","jest":"^27.0.1","standard":"^16.0.3","ts-jest":"^27.0.1","tsd":"^0.16.0","typescript":"^4.3.2"},"dependencies":{},"engines":{"node":">= 12"},"main":"./index.js","dist":{"shasum":"b661866c4fe85f254f94e360eecf0b631792fba7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-8.0.0-2.tgz"},"readme":"# Commander.js\n\n[![Build Status](https://github.com/tj/commander.js/workflows/build/badge.svg)](https://github.com/tj/commander.js/actions?query=workflow%3A%22build%22)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces.\n\nRead this in other languages: English | [简体中文](./Readme_zh-CN.md)\n\n- [Commander.js](#commanderjs)\n  - [Installation](#installation)\n  - [Declaring _program_ variable](#declaring-program-variable)\n  - [Options](#options)\n    - [Common option types, boolean and value](#common-option-types-boolean-and-value)\n    - [Default option value](#default-option-value)\n    - [Other option types, negatable boolean and boolean|value](#other-option-types-negatable-boolean-and-booleanvalue)\n    - [Required option](#required-option)\n    - [Variadic option](#variadic-option)\n    - [Version option](#version-option)\n    - [More configuration](#more-configuration)\n    - [Custom option processing](#custom-option-processing)\n  - [Commands](#commands)\n    - [Command-arguments](#command-arguments)\n      - [More configuration](#more-configuration-1)\n      - [Custom argument processing](#custom-argument-processing)\n    - [Action handler](#action-handler)\n    - [Stand-alone executable (sub)commands](#stand-alone-executable-subcommands)\n    - [Life cycle hooks](#life-cycle-hooks)\n  - [Automated help](#automated-help)\n    - [Custom help](#custom-help)\n    - [Display help after errors](#display-help-after-errors)\n    - [Display help from code](#display-help-from-code)\n    - [.usage and .name](#usage-and-name)\n    - [.helpOption(flags, description)](#helpoptionflags-description)\n    - [.addHelpCommand()](#addhelpcommand)\n    - [More configuration](#more-configuration-2)\n  - [Custom event listeners](#custom-event-listeners)\n  - [Bits and pieces](#bits-and-pieces)\n    - [.parse() and .parseAsync()](#parse-and-parseasync)\n    - [Parsing Configuration](#parsing-configuration)\n    - [Legacy options as properties](#legacy-options-as-properties)\n    - [TypeScript](#typescript)\n    - [createCommand()](#createcommand)\n    - [Node options such as `--harmony`](#node-options-such-as---harmony)\n    - [Debugging stand-alone executable subcommands](#debugging-stand-alone-executable-subcommands)\n    - [Override exit and output handling](#override-exit-and-output-handling)\n    - [Additional documentation](#additional-documentation)\n  - [Examples](#examples)\n  - [Support](#support)\n    - [Commander for enterprise](#commander-for-enterprise)\n\nFor information about terms used in this document see: [terminology](./docs/terminology.md)\n\n## Installation\n\n```bash\nnpm install commander\n```\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\nconst { program } = require('commander');\nprogram.version('0.0.1');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n```js\nconst { Command } = require('commander');\nconst program = new Command();\nprogram.version('0.0.1');\n```\n\nFor named imports in ECMAScript modules, import from `commander/esm.mjs`.\n\n```js\n// index.mjs\nimport { Command } from 'commander/esm.mjs';\nconst program = new Command();\n```\n\nAnd in TypeScript:\n\n```ts\n// index.ts\nimport { Command } from 'commander';\nconst program = new Command();\n```\n\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space or vertical bar ('|').\n\nThe parsed options can be accessed by calling `.opts()` on a `Command` object, and are passed to the action handler.\nYou can also use `.getOptionValue()` and `.setOptionValue()` to work with a single option value.\n\nMulti-word options such as \"--template-engine\" are camel-cased, becoming `program.opts().templateEngine` etc.\n\nMultiple short flags may optionally be combined in a single argument following the dash: boolean flags, followed by a single option taking a value (possibly followed by the value).\nFor example `-a -b -p 80` may be written as `-ab -p80` or even `-abp80`.\n\nYou can use `--` to indicate the end of the options, and any remaining arguments will be used without being interpreted.\n\nBy default options on the command line are not positional, and can be specified before or after other arguments.\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean option, and an option which takes its value\nfrom the following argument (declared with angle brackets like `--expect <value>`). Both are `undefined` unless specified on command line.  \n\nExample file: [options-common.js](./examples/options-common.js)\n\n```js\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.debug) console.log(options);\nconsole.log('pizza details:');\nif (options.small) console.log('- small pizza size');\nif (options.pizzaType) console.log(`- ${options.pizzaType}`);\n```\n\n```bash\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -d -s -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the program options in the `program.args` array. The parameter is optional and defaults to `process.argv`.\n\n### Default option value\n\nYou can specify a default value for an option which takes a value.\n\nExample file: [options-defaults.js](./examples/options-defaults.js)\n\n```js\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse();\n\nconsole.log(`cheese: ${program.opts().cheese}`);\n```\n\n```bash\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and boolean|value\n\nYou can define a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be. You can specify a default boolean value for a boolean option and it can be overridden on command line.\n\nExample file: [options-negatable.js](./examples/options-negatable.js)\n\n```js\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse();\n\nconst options = program.opts();\nconst sauceStr = options.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (options.cheese === false) ? 'no cheese' : `${options.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```bash\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which may be used as a boolean option but may optionally take an option-argument\n(declared with square brackets like `--optional [value]`).\n\nExample file: [options-boolean-or-value.js](./examples/options-boolean-or-value.js)\n\n```js\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.cheese === undefined) console.log('no cheese');\nelse if (options.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${options.cheese}`);\n```\n\n```bash\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-taking-varying-arguments.md).\n\n### Required option\n\nYou may specify a required (mandatory) option using `.requiredOption`. The option must have a value after parsing, usually specified on the command line, or perhaps from a default value (say from environment). The method is otherwise the same as `.option` in format, taking flags and description, and optional default value or custom processing.\n\nExample file: [options-required.js](./examples/options-required.js)\n\n```js\nprogram\n  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse();\n```\n\n```bash\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n```\n\n### Variadic option\n\nYou may make an option variadic by appending `...` to the value placeholder when declaring the option. On the command line you\ncan then specify multiple option-arguments, and the parsed option value will be an array. The extra arguments\nare read until the first argument starting with a dash. The special argument `--` stops option processing entirely. If a value\nis specified in the same argument as the option then no further values are read.\n\nExample file: [options-variadic.js](./examples/options-variadic.js)\n\n```js\nprogram\n  .option('-n, --number <numbers...>', 'specify numbers')\n  .option('-l, --letter [letters...]', 'specify letters');\n\nprogram.parse();\n\nconsole.log('Options: ', program.opts());\nconsole.log('Remaining arguments: ', program.args);\n```\n\n```bash\n$ collect -n 1 2 3 --letter a b c\nOptions:  { number: [ '1', '2', '3' ], letter: [ 'a', 'b', 'c' ] }\nRemaining arguments:  []\n$ collect --letter=A -n80 operand\nOptions:  { number: [ '80' ], letter: [ 'A' ] }\nRemaining arguments:  [ 'operand' ]\n$ collect --letter -n 1 -n 2 3 -- operand\nOptions:  { number: [ '1', '2', '3' ], letter: true }\nRemaining arguments:  [ 'operand' ]\n```\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-taking-varying-arguments.md).\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```bash\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n### More configuration\n\nYou can add most options using the `.option()` method, but there are some additional features available\nby constructing an `Option` explicitly for less common cases.\n\nExample file: [options-extra.js](./examples/options-extra.js)\n\n```js\nprogram\n  .addOption(new Option('-s, --secret').hideHelp())\n  .addOption(new Option('-t, --timeout <delay>', 'timeout in seconds').default(60, 'one minute'))\n  .addOption(new Option('-d, --drink <size>', 'drink size').choices(['small', 'medium', 'large']));\n```\n\n```bash\n$ extra --help\nUsage: help [options]\n\nOptions:\n  -t, --timeout <delay>  timeout in seconds (default: one minute)\n  -d, --drink <size>     drink cup size (choices: \"small\", \"medium\", \"large\")\n  -h, --help             display help for command\n\n$ extra --drink huge\nerror: option '-d, --drink <size>' argument 'huge' is invalid. Allowed choices are small, medium, large.\n```\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option-arguments. The callback function receives two parameters,\nthe user specified option-argument and the previous value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option-argument to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function parameter.\n\nExample file: [options-custom-processing.js](./examples/options-custom-processing.js)\n\n```js\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and a radix\n  const parsedValue = parseInt(value, 10);\n  if (isNaN(parsedValue)) {\n    throw new commander.InvalidArgumentError('Not a number.');\n  }\n  return parsedValue;\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse();\n\nconst options = program.opts();\nif (options.float !== undefined) console.log(`float: ${options.float}`);\nif (options.integer !== undefined) console.log(`integer: ${options.integer}`);\nif (options.verbose > 0) console.log(`verbosity: ${options.verbose}`);\nif (options.collect.length > 0) console.log(options.collect);\nif (options.list !== undefined) console.log(options.list);\n```\n\n```bash\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n## Commands\n\nYou can specify (sub)commands using `.command()` or `.addCommand()`. There are two ways these can be implemented: using an action handler attached to the command, or as a stand-alone executable file (described in more detail later). The subcommands may be nested ([example](./examples/nestedCommands.js)).\n\nIn the first parameter to `.command()` you specify the command name. You may append the command-arguments after the command name, or specify them separately using `.argument()`. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nYou can use `.addCommand()` to add an already configured subcommand to the program.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using stand-alone executable file, indicated by adding description as second parameter to `.command`.\n// Returns `this` for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n\n// Command prepared separately.\n// Returns `this` for adding more commands.\nprogram\n  .addCommand(build.makeBuildCommand());\n```\n\nConfiguration options can be passed with the call to `.command()` and `.addCommand()`. Specifying `hidden: true` will \nremove the command from the generated help output. Specifying `isDefault: true` will run the subcommand if no other\nsubcommand is specified ([example](./examples/defaultCommand.js)).\n\n### Command-arguments\n\nFor subcommands, you can specify the argument syntax in the call to `.command()` (as shown above). This\nis the only method usable for subcommands implemented using a stand-alone executable, but for other subcommands\nyou can instead use the following method.\n\nTo configure a command, you can use `.argument()` to specify each expected command-argument. \nYou supply the argument name and an optional description. The argument may be `<required>` or `[optional]`.\nYou can specify a default value for an optional command-argument.\n\nExample file: [argument.js](./examples/argument.js)\n\n```js\nprogram\n  .version('0.1.0')\n  .argument('<username>', 'user to login')\n  .argument('[password]', 'password for user, if required', 'no password given')\n  .action((username, password) => {\n    console.log('username:', username);\n    console.log('password:', password);\n  });\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. A variadic argument is passed to the action handler as an array. For example:\n\n```js\nprogram\n  .version('0.1.0')\n  .command('rmdir')\n  .argument('<dirs...>')\n  .action(function (dirs) {\n    dirs.forEach((dir) => {\n      console.log('rmdir %s', dir);\n    });\n  });\n```\n\nThere is a convenience method to add multiple arguments at once, but without descriptions:\n\n```js\nprogram\n  .arguments('<username> <password>');\n```\n\n#### More configuration\n\nThere are some additional features available by constructing an `Argument` explicitly for less common cases.\n\nExample file: [arguments-extra.js](./examples/arguments-extra.js)\n\n```js\nprogram\n  .addArgument(new commander.Argument('<drink-size>', 'drink cup size').choices(['small', 'medium', 'large']))\n  .addArgument(new commander.Argument('[timeout]', 'timeout in seconds').default(60, 'one minute'))\n```\n\n#### Custom argument processing\n\nYou may specify a function to do custom processing of command-arguments (like for option-arguments).\nThe callback function receives two parameters, the user specified command-argument and the previous value for the argument.\nIt returns the new value for the argument.\n\nThe processed argument values are passed to the action handler, and saved as `.processedArgs`.\n\nYou can optionally specify the default/starting value for the argument after the function parameter.\n\nExample file: [arguments-custom-processing.js](./examples/arguments-custom-processing.js)\n\n```js\nprogram\n  .command('add')\n  .argument('<first>', 'integer argument', myParseInt)\n  .argument('[second]', 'integer argument', myParseInt, 1000)\n  .action((first, second) => {\n    console.log(`${first} + ${second} = ${first + second}`);\n  })\n;\n```\n\n### Action handler\n\nThe action handler gets passed a parameter for each command-argument you declared, and two additional parameters\nwhich are the parsed options and the command object itself. \n\nExample file: [thank.js](./examples/thank.js)\n\n```js\nprogram\n  .argument('<name>')\n  .option('-t, --title <honorific>', 'title to use before name')\n  .option('-d, --debug', 'display some debugging')\n  .action((name, options, command) => {\n    if (options.debug) {\n      console.error('Called %s with options %o', command.name(), options);\n    }\n    const title = options.title ? `${options.title} ` : '';\n    console.log(`Thank-you ${title}${name}`);\n  });\n```\n\nYou may supply an `async` action handler, in which case you call `.parseAsync` rather than `.parse`.\n\n```js\nasync function run() { /* code goes here */ }\n\nasync function main() {\n  program\n    .command('run')\n    .action(run);\n  await program.parseAsync(process.argv);\n}\n```\n\nA command's options and arguments on the command line are validated when the command is used. Any unknown options or missing arguments will be reported as an error. You can suppress the unknown option checks with `.allowUnknownOption()`. By default it is not an error to\npass more arguments than declared, but you can make this an error with `.allowExcessArguments(false)`.\n\n### Stand-alone executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells Commander that you're going to use stand-alone executables for subcommands.\nCommander will search the executables in the directory of the entry script (like `./examples/pm`) with the name `program-subcommand`, like `pm-install`, `pm-search`.\nYou can specify a custom name with the `executableFile` configuration option.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\nExample file: [pm](./examples/pm)\n\n```js\nprogram\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', { executableFile: 'myUpdateSubCommand' })\n  .command('list', 'list packages installed', { isDefault: true });\n\nprogram.parse(process.argv);\n```\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n### Life cycle hooks\n\nYou can add callback hooks to a command for life cycle events.\n\nExample file: [hook.js](./examples/hook.js)\n\n```js\nprogram\n  .option('-t, --trace', 'display trace statements for commands')\n  .hook('preAction', (thisCommand, actionCommand) => {\n    if (thisCommand.opts().trace) {\n      console.log(`About to call action handler for subcommand: ${actionCommand.name()}`);\n      console.log('arguments: %O', actionCommand.args);\n      console.log('options: %o', actionCommand.opts());\n    }\n  });\n```\n\nThe callback hook can be `async`, in which case you call `.parseAsync` rather than `.parse`. You can add multiple hooks per event.\n\nThe supported events are:\n\n- `preAction`: called before action handler for this command and its subcommands\n- `postAction`: called after action handler for this command and its subcommands\n\nThe hook is passed the command it was added to, and the command running the action handler.\n\n## Automated help\n\nThe help information is auto-generated based on the information commander already knows about your program. The default\nhelp option is `-h,--help`.\n\nExample file: [pizza](./examples/pizza)\n\n```bash\n$ node ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizza ordering\n\nOptions:\n  -p, --peppers        Add peppers\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           display help for command\n```\n\nA `help` command is added by default if your command has subcommands. It can be used alone, or with a subcommand name to show\nfurther help for the subcommand. These are effectively the same if the `shell` program has implicit help:\n\n```bash\nshell help\nshell --help\n\nshell help spawn\nshell spawn --help\n```\n\n### Custom help\n\nYou can add extra text to be displayed along with the built-in help. \n\nExample file: [custom-help](./examples/custom-help)\n\n```js\nprogram\n  .option('-f, --foo', 'enable some foo');\n\nprogram.addHelpText('after', `\n\nExample call:\n  $ custom-help --help`);\n```\n\nYields the following help output:\n\n```Text\nUsage: custom-help [options]\n\nOptions:\n  -f, --foo   enable some foo\n  -h, --help  display help for command\n\nExample call:\n  $ custom-help --help\n```\n\nThe positions in order displayed are:\n\n- `beforeAll`: add to the program for a global banner or header\n- `before`: display extra information before built-in help\n- `after`: display extra information after built-in help\n- `afterAll`: add to the program for a global footer (epilog)\n\nThe positions \"beforeAll\" and \"afterAll\" apply to the command and all its subcommands. \n\nThe second parameter can be a string, or a function returning a string. The function is passed a context object for your convenience. The properties are:\n\n- error: a boolean for whether the help is being displayed due to a usage error\n- command: the Command which is displaying the help\n\n### Display help after errors\n\nThe default behaviour for usage errors is to just display a short error message. \nYou can change the behaviour to show the full help or a custom help message after an error.\n\n```js\nprogram.showHelpAfterError();\n// or\nprogram.showHelpAfterError('(add --help for additional information)');\n```\n\n```sh\n$ pizza --unknown\nerror: unknown option '--unknown'\n(add --help for additional information)\n```\n\n### Display help from code\n\n`.help()`: display help information and exit immediately. You can optionally pass `{ error: true }` to display on stderr and exit with an error status.\n\n`.outputHelp()`: output help information without exiting. You can optionally pass `{ error: true }` to display on stderr.\n\n`.helpInformation()`: get the built-in command help information as a string for processing or displaying yourself.\n\n### .usage and .name\n\nThese allow you to customise the usage description in the first line of the help. The name is otherwise\ndeduced from the (full) program arguments. Given:\n\n```js\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n```\n\nThe help will start with:\n\n```Text\nUsage: my-command [global options] command\n```\n\n### .helpOption(flags, description)\n\nBy default every command has a help option. Override the default help flags and description. Pass false to disable the built-in help option.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n### .addHelpCommand()\n\nA help command is added by default if your command has subcommands. You can explicitly turn on or off the implicit help command with `.addHelpCommand()` and `.addHelpCommand(false)`.\n\nYou can both turn on and customise the help command by supplying the name and description:\n\n```js\nprogram.addHelpCommand('assist [command]', 'show assistance');\n```\n\n### More configuration\n\nThe built-in help is formatted using the Help class.\nYou can configure the Help behaviour by modifying data properties and methods using `.configureHelp()`, or by subclassing using `.createHelp()` if you prefer.\n\nThe data properties are:\n\n- `helpWidth`: specify the wrap width, useful for unit tests\n- `sortSubcommands`: sort the subcommands alphabetically\n- `sortOptions`: sort the options alphabetically\n\nThere are methods getting the visible lists of arguments, options, and subcommands. There are methods for formatting the items in the lists, with each item having a _term_ and _description_. Take a look at `.formatHelp()` to see how they are used.\n\nExample file: [configure-help.js](./examples/configure-help.js)\n\n```\nprogram.configureHelp({\n  sortSubcommands: true,\n  subcommandTerm: (cmd) => cmd.name() // Just show the name, instead of short usage.\n});\n```\n\n## Custom event listeners\n\nYou can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.opts().verbose;\n});\n\nprogram.on('command:*', function (operands) {\n  console.error(`error: unknown command '${operands[0]}'`);\n  const availableCommands = program.commands.map(cmd => cmd.name());\n  mySuggestBestMatch(operands[0], availableCommands);\n  process.exitCode = 1;\n});\n```\n\n## Bits and pieces\n\n### .parse() and .parseAsync()\n\nThe first argument to `.parse` is the array of strings to parse. You may omit the parameter to implicitly use `process.argv`.\n\nIf the arguments follow different conventions than node you can pass a `from` option in the second parameter:\n\n- 'node': default, `argv[0]` is the application and `argv[1]` is the script being run, with user parameters after that\n- 'electron': `argv[1]` varies depending on whether the electron application is packaged\n- 'user': all of the arguments from the user\n\nFor example:\n\n```js\nprogram.parse(process.argv); // Explicit, node conventions\nprogram.parse(); // Implicit, and auto-detect electron\nprogram.parse(['-f', 'filename'], { from: 'user' });\n```\n\n### Parsing Configuration\n\nIf the default parsing does not suit your needs, there are some behaviours to support other usage patterns.\n\nBy default program options are recognised before and after subcommands. To only look for program options before subcommands, use `.enablePositionalOptions()`. This lets you use\nan option for a different purpose in subcommands.\n\nExample file: [positional-options.js](./examples/positional-options.js)\n\nWith positional options, the `-b` is a program option in the first line and a subcommand option in the second line:\n\n```sh\nprogram -b subcommand\nprogram subcommand -b\n```\n\nBy default options are recognised before and after command-arguments. To only process options that come\nbefore the command-arguments, use `.passThroughOptions()`. This lets you pass the  arguments and following options through to another program\nwithout needing to use `--` to end the option processing. \nTo use pass through options in a subcommand, the program needs to enable positional options.\n\nExample file: [pass-through-options.js](./examples/pass-through-options.js)\n\nWith pass through options, the `--port=80` is a program option in the first line and passed through as a command-argument in the second line:\n\n```sh\nprogram --port=80 arg\nprogram arg --port=80\n```\n\nBy default the option processing shows an error for an unknown option. To have an unknown option treated as an ordinary command-argument and continue looking for options, use `.allowUnknownOption()`. This lets you mix known and unknown options.\n\nBy default the argument processing does not display an error for more command-arguments than expected.\nTo display an error for excess arguments, use`.allowExcessArguments(false)`.\n\n### Legacy options as properties \n\nBefore Commander 7, the option values were stored as properties on the command.\nThis was convenient to code but the downside was possible clashes with\nexisting properties of `Command`. You can revert to the old behaviour to run unmodified legacy code by using `.storeOptionsAsProperties()`.\n\n```js\nprogram\n  .storeOptionsAsProperties()\n  .option('-d, --debug')\n  .action((commandAndOptions) => {\n    if (commandAndOptions.debug) {\n      console.error(`Called ${commandAndOptions.name()}`);\n    }\n  });\n```\n\n### TypeScript\n\nIf you use `ts-node` and  stand-alone executable subcommands written as `.ts` files, you need to call your program through node to get the subcommands called correctly. e.g.\n\n```bash\nnode -r ts-node/register pm.ts\n```\n\n### createCommand()\n\nThis factory function creates a new command. It is exported and may be used instead of using `new`, like:\n\n```js\nconst { createCommand } = require('commander');\nconst program = createCommand();\n```\n\n`createCommand` is also a method of the Command object, and creates a new command rather than a subcommand. This gets used internally\nwhen creating subcommands using `.command()`, and you may override it to\ncustomise the new subcommand (example file [custom-command-class.js](./examples/custom-command-class.js)).\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n\n- Use `#! /usr/bin/env node --harmony` in the subcommands scripts. (Note Windows does not support this pattern.)\n- Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning subcommand process.\n\n### Debugging stand-alone executable subcommands\n\nAn executable subcommand is launched as a separate child process.\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) executable subcommands using `node --inspect` et al,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\nIf you are using VSCode to debug executable subcommands you need to set the `\"autoAttachChildProcesses\": true` flag in your launch.json configuration.\n\n### Override exit and output handling\n\nBy default Commander calls `process.exit` when it detects errors, or after displaying the help or version. You can override\nthis behaviour and optionally supply a callback. The default override throws a `CommanderError`.\n\nThe override callback is passed a `CommanderError` with properties `exitCode` number, `code` string, and `message`. The default override behaviour is to throw the error, except for async handling of executable subcommand completion which carries on. The normal display of error messages or version or help\nis not affected by the override which is called after the display.\n\n```js\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // custom processing...\n}\n```\n\nBy default Commander is configured for a command-line application and writes to stdout and stderr.\nYou can modify this behaviour for custom applications. In addition, you can modify the display of error messages.\n\nExample file: [configure-output.js](./examples/configure-output.js)\n\n\n```js\nfunction errorColor(str) {\n  // Add ANSI escape codes to display text in red.\n  return `\\x1b[31m${str}\\x1b[0m`;\n}\n\nprogram\n  .configureOutput({\n    // Visibly override write routines as example!\n    writeOut: (str) => process.stdout.write(`[OUT] ${str}`),\n    writeErr: (str) => process.stdout.write(`[ERR] ${str}`),\n    // Highlight errors in color.\n    outputError: (str, write) => write(errorColor(str))\n  });\n```\n\n### Additional documentation\n\nThere is more information available about:\n\n- [deprecated](./docs/deprecated.md) features still supported for backwards compatibility\n- [options taking varying arguments](./docs/options-taking-varying-arguments.md)\n\n## Examples\n\nIn a single command program, you might not need an action handler.\n\nExample file: [pizza](./examples/pizza)\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .description('An application for pizza ordering')\n  .option('-p, --peppers', 'Add peppers')\n  .option('-c, --cheese <type>', 'Add the specified type of cheese', 'marble')\n  .option('-C, --no-cheese', 'You do not want any cheese');\n\nprogram.parse();\n\nconst options = program.opts();\nconsole.log('you ordered a pizza with:');\nif (options.peppers) console.log('  - peppers');\nconst cheese = !options.cheese ? 'no' : options.cheese;\nconsole.log('  - %s cheese', cheese);\n```\n\nIn a multi-command program, you will have action handlers for each command (or stand-alone executables for the commands).\n\nExample file: [deploy](./examples/deploy)\n\n```js\nconst { Command } = require('commander');\nconst program = new Command();\n\nprogram\n  .version('0.0.1')\n  .option('-c, --config <path>', 'set config path', './deploy.conf');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option('-s, --setup_mode <mode>', 'Which setup mode to use', 'normal')\n  .action((env, options) => {\n    env = env || 'all';\n    console.log('read config from %s', program.opts().config);\n    console.log('setup for %s env(s) with %s mode', env, options.setup_mode);\n  });\n\nprogram\n  .command('exec <script>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option('-e, --exec_mode <mode>', 'Which exec mode to use', 'fast')\n  .action((script, options) => {\n    console.log('read config from %s', program.opts().config);\n    console.log('exec \"%s\" using %s mode and config %s', script, options.exec_mode, program.opts().config);\n  }).addHelpText('after', `\nExamples:\n  $ deploy exec sequential\n  $ deploy exec async`\n  );\n  \nprogram.parse(process.argv);\n```\n\nMore samples can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## Support\n\nThe current version of Commander is fully supported on Long Term Support versions of node, and requires at least node v12.\n(For older versions of node, use an older version of Commander. Commander version 2.x has the widest support.)\n\nThe main forum for free and community support is the project [Issues](https://github.com/tj/commander.js/issues) on GitHub.\n\n### Commander for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of Commander and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-commander?utm_source=npm-commander&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n","type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true,"readmeFilename":"Readme.md","gitHead":"0e204e8babbe5290c8e3670fc8d9b8f6da6b8c29","_nodeVersion":"16.3.0","_npmVersion":"7.15.1","_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"maintainers":[{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"vanesyan","email":"romain.vanesyan@gmail.com"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_8.0.0-2_1622954186266_0.5783033530962387"},"_hasShrinkwrap":false},"8.0.0":{"_id":"commander@8.0.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"8.0.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node --experimental-modules ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js lib/*.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-lint && npm run typescript-checkJS && npm run test-esm"},"directories":{},"devDependencies":{"@types/jest":"^26.0.23","@types/node":"^14.17.3","@typescript-eslint/eslint-plugin":"^4.27.0","@typescript-eslint/parser":"^4.27.0","eslint":"^7.29.0","eslint-config-standard":"^16.0.3","eslint-plugin-jest":"^24.3.6","jest":"^27.0.4","standard":"^16.0.3","ts-jest":"^27.0.3","tsd":"^0.17.0","typescript":"^4.3.4"},"dependencies":{},"engines":{"node":">= 12"},"main":"./index.js","dist":{"shasum":"1da2139548caef59bd23e66d18908dfb54b02258","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-8.0.0.tgz"},"type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true,"gitHead":"80054ba3756853c1acf80e168ee7d44b63ad826b","_nodeVersion":"14.16.0","_npmVersion":"7.17.0","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"vanesyan","email":"romain.vanesyan@gmail.com"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_8.0.0_1624609455896_0.4408500319550237"},"_hasShrinkwrap":false},"8.1.0":{"_id":"commander@8.1.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"8.1.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node --experimental-modules ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js lib/*.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-lint && npm run typescript-checkJS && npm run test-esm"},"directories":{},"devDependencies":{"@types/jest":"^26.0.23","@types/node":"^14.17.3","@typescript-eslint/eslint-plugin":"^4.27.0","@typescript-eslint/parser":"^4.27.0","eslint":"^7.29.0","eslint-config-standard":"^16.0.3","eslint-plugin-jest":"^24.3.6","jest":"^27.0.4","standard":"^16.0.3","ts-jest":"^27.0.3","tsd":"^0.17.0","typescript":"^4.3.4"},"dependencies":{},"engines":{"node":">= 12"},"main":"./index.js","dist":{"shasum":"db36e3e66edf24ff591d639862c6ab2c52664362","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-8.1.0.tgz"},"type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true,"gitHead":"a9c9f17c7eff96b8da8c2b9d01751d41f1eb0ae3","_nodeVersion":"16.4.0","_npmVersion":"7.19.0","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"vanesyan","email":"romain.vanesyan@gmail.com"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_8.1.0_1627358182680_0.31172909264133697"},"_hasShrinkwrap":false},"8.2.0":{"_id":"commander@8.2.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"8.2.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node --experimental-modules ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js lib/*.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-lint && npm run typescript-checkJS && npm run test-esm"},"directories":{},"devDependencies":{"@types/jest":"^26.0.23","@types/node":"^14.17.3","@typescript-eslint/eslint-plugin":"^4.27.0","@typescript-eslint/parser":"^4.27.0","eslint":"^7.29.0","eslint-config-standard":"^16.0.3","eslint-plugin-jest":"^24.3.6","jest":"^27.0.4","standard":"^16.0.3","ts-jest":"^27.0.3","tsd":"^0.17.0","typescript":"^4.3.4"},"dependencies":{},"engines":{"node":">= 12"},"main":"./index.js","dist":{"shasum":"37fe2bde301d87d47a53adeff8b5915db1381ca8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-8.2.0.tgz"},"type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true,"gitHead":"950f742e60ae6b30a3d4e945db6d4322919628fd","_nodeVersion":"16.8.0","_npmVersion":"7.21.1","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"vanesyan","email":"romain.vanesyan@gmail.com"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_8.2.0_1631257232689_0.25638681421232046"},"_hasShrinkwrap":false},"8.3.0":{"_id":"commander@8.3.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"8.3.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":""},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"license":"MIT","scripts":{"lint":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node --experimental-modules ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js lib/*.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-lint && npm run typescript-checkJS && npm run test-esm"},"directories":null,"devDependencies":{"@types/jest":"^26.0.23","@types/node":"^14.17.3","@typescript-eslint/eslint-plugin":"^4.27.0","@typescript-eslint/parser":"^4.27.0","eslint":"^7.29.0","eslint-config-standard":"^16.0.3","eslint-plugin-jest":"^24.3.6","jest":"^27.0.4","standard":"^16.0.3","ts-jest":"^27.0.3","tsd":"^0.17.0","typescript":"^4.3.4"},"dependencies":{},"engines":{"node":">= 12"},"files":["index.js","lib/*.js","esm.mjs","typings/index.d.ts","package-support.json"],"main":"./index.js","dist":{"shasum":"4837ea1b2da67b9c616a67afbb0fafee567bca66","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-8.3.0.tgz"},"type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true},"9.0.0-0":{"_id":"commander@9.0.0-0","name":"commander","description":"the complete solution for node.js command-line programs","version":"9.0.0-0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","typescript-lint":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node --experimental-modules ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js lib/*.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-lint && npm run typescript-checkJS && npm run test-esm"},"directories":{},"devDependencies":{"@types/jest":"^27.0.3","@types/node":"^16.11.15","@typescript-eslint/eslint-plugin":"^4.27.0","@typescript-eslint/parser":"^4.27.0","eslint":"^7.29.0","eslint-config-standard":"^16.0.3","eslint-plugin-jest":"^24.3.6","jest":"^27.0.4","standard":"^16.0.3","ts-jest":"^27.0.3","tsd":"^0.17.0","typescript":"^4.3.4"},"engines":{"node":"^12.20.0 || >=14"},"main":"./index.js","dist":{"shasum":"4709bd066c9b2477ded951f68bc381a9e2b1819f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-9.0.0-0.tgz"},"readme":"# Commander.js\n\n[![Build Status](https://github.com/tj/commander.js/workflows/build/badge.svg)](https://github.com/tj/commander.js/actions?query=workflow%3A%22build%22)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces.\n\nRead this in other languages: English | [简体中文](./Readme_zh-CN.md)\n\n- [Commander.js](#commanderjs)\n  - [Installation](#installation)\n  - [Declaring _program_ variable](#declaring-program-variable)\n  - [Options](#options)\n    - [Common option types, boolean and value](#common-option-types-boolean-and-value)\n    - [Default option value](#default-option-value)\n    - [Other option types, negatable boolean and boolean|value](#other-option-types-negatable-boolean-and-booleanvalue)\n    - [Required option](#required-option)\n    - [Variadic option](#variadic-option)\n    - [Version option](#version-option)\n    - [More configuration](#more-configuration)\n    - [Custom option processing](#custom-option-processing)\n  - [Commands](#commands)\n    - [Command-arguments](#command-arguments)\n      - [More configuration](#more-configuration-1)\n      - [Custom argument processing](#custom-argument-processing)\n    - [Action handler](#action-handler)\n    - [Stand-alone executable (sub)commands](#stand-alone-executable-subcommands)\n    - [Life cycle hooks](#life-cycle-hooks)\n  - [Automated help](#automated-help)\n    - [Custom help](#custom-help)\n    - [Display help after errors](#display-help-after-errors)\n    - [Display help from code](#display-help-from-code)\n    - [.name](#name)\n    - [.usage](#usage)\n    - [.helpOption(flags, description)](#helpoptionflags-description)\n    - [.addHelpCommand()](#addhelpcommand)\n    - [More configuration](#more-configuration-2)\n  - [Custom event listeners](#custom-event-listeners)\n  - [Bits and pieces](#bits-and-pieces)\n    - [.parse() and .parseAsync()](#parse-and-parseasync)\n    - [Parsing Configuration](#parsing-configuration)\n    - [Legacy options as properties](#legacy-options-as-properties)\n    - [TypeScript](#typescript)\n    - [createCommand()](#createcommand)\n    - [Node options such as `--harmony`](#node-options-such-as---harmony)\n    - [Debugging stand-alone executable subcommands](#debugging-stand-alone-executable-subcommands)\n    - [Override exit and output handling](#override-exit-and-output-handling)\n    - [Additional documentation](#additional-documentation)\n  - [Examples](#examples)\n  - [Support](#support)\n    - [Commander for enterprise](#commander-for-enterprise)\n\nFor information about terms used in this document see: [terminology](./docs/terminology.md)\n\n## Installation\n\n```bash\nnpm install commander\n```\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\n// CommonJS (.cjs)\nconst { program } = require('commander');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n```js\n// CommonJS (.cjs)\nconst { Command } = require('commander');\nconst program = new Command();\n```\n\n```js\n// ECMAScript (.mjs)\nimport { Command } from 'commander';\nconst program = new Command();\n```\n\n```ts\n// TypeScript (.ts)\nimport { Command } from 'commander';\nconst program = new Command();\n```\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space or vertical bar ('|').\n\nThe parsed options can be accessed by calling `.opts()` on a `Command` object, and are passed to the action handler.\n(You can also use `.getOptionValue()` and `.setOptionValue()` to work with a single option value,\nand `.getOptionValueSource()` and `.setOptionValueWithSource()` when it matters where the option value came from.)\n\nMulti-word options such as \"--template-engine\" are camel-cased, becoming `program.opts().templateEngine` etc.\n\nMultiple short flags may optionally be combined in a single argument following the dash: boolean flags, followed by a single option taking a value (possibly followed by the value).\nFor example `-a -b -p 80` may be written as `-ab -p80` or even `-abp80`.\n\nYou can use `--` to indicate the end of the options, and any remaining arguments will be used without being interpreted.\n\nBy default options on the command line are not positional, and can be specified before or after other arguments.\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean option, and an option which takes its value\nfrom the following argument (declared with angle brackets like `--expect <value>`). Both are `undefined` unless specified on command line.\n\nExample file: [options-common.js](./examples/options-common.js)\n\n```js\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.debug) console.log(options);\nconsole.log('pizza details:');\nif (options.small) console.log('- small pizza size');\nif (options.pizzaType) console.log(`- ${options.pizzaType}`);\n```\n\n```bash\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -d -s -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the program options in the `program.args` array. The parameter is optional and defaults to `process.argv`.\n\n### Default option value\n\nYou can specify a default value for an option.\n\nExample file: [options-defaults.js](./examples/options-defaults.js)\n\n```js\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse();\n\nconsole.log(`cheese: ${program.opts().cheese}`);\n```\n\n```bash\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and boolean|value\n\nYou can define a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be.\n\nExample file: [options-negatable.js](./examples/options-negatable.js)\n\n```js\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse();\n\nconst options = program.opts();\nconst sauceStr = options.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (options.cheese === false) ? 'no cheese' : `${options.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```bash\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which may be used as a boolean option but may optionally take an option-argument\n(declared with square brackets like `--optional [value]`).\n\nExample file: [options-boolean-or-value.js](./examples/options-boolean-or-value.js)\n\n```js\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.cheese === undefined) console.log('no cheese');\nelse if (options.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${options.cheese}`);\n```\n\n```bash\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-taking-varying-arguments.md).\n\n### Required option\n\nYou may specify a required (mandatory) option using `.requiredOption`. The option must have a value after parsing, usually specified on the command line, or perhaps from a default value (say from environment). The method is otherwise the same as `.option` in format, taking flags and description, and optional default value or custom processing.\n\nExample file: [options-required.js](./examples/options-required.js)\n\n```js\nprogram\n  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse();\n```\n\n```bash\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n```\n\n### Variadic option\n\nYou may make an option variadic by appending `...` to the value placeholder when declaring the option. On the command line you\ncan then specify multiple option-arguments, and the parsed option value will be an array. The extra arguments\nare read until the first argument starting with a dash. The special argument `--` stops option processing entirely. If a value\nis specified in the same argument as the option then no further values are read.\n\nExample file: [options-variadic.js](./examples/options-variadic.js)\n\n```js\nprogram\n  .option('-n, --number <numbers...>', 'specify numbers')\n  .option('-l, --letter [letters...]', 'specify letters');\n\nprogram.parse();\n\nconsole.log('Options: ', program.opts());\nconsole.log('Remaining arguments: ', program.args);\n```\n\n```bash\n$ collect -n 1 2 3 --letter a b c\nOptions:  { number: [ '1', '2', '3' ], letter: [ 'a', 'b', 'c' ] }\nRemaining arguments:  []\n$ collect --letter=A -n80 operand\nOptions:  { number: [ '80' ], letter: [ 'A' ] }\nRemaining arguments:  [ 'operand' ]\n$ collect --letter -n 1 -n 2 3 -- operand\nOptions:  { number: [ '1', '2', '3' ], letter: true }\nRemaining arguments:  [ 'operand' ]\n```\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-taking-varying-arguments.md).\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```bash\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n### More configuration\n\nYou can add most options using the `.option()` method, but there are some additional features available\nby constructing an `Option` explicitly for less common cases.\n\nExample files: [options-extra.js](./examples/options-extra.js), [options-env.js](./examples/options-env.js)\n\n```js\nprogram\n  .addOption(new Option('-s, --secret').hideHelp())\n  .addOption(new Option('-t, --timeout <delay>', 'timeout in seconds').default(60, 'one minute'))\n  .addOption(new Option('-d, --drink <size>', 'drink size').choices(['small', 'medium', 'large']))\n  .addOption(new Option('-p, --port <number>', 'port number').env('PORT'))\n  .addOption(new Option('--donate [amount]', 'optional donation in dollars').preset('20').argParser(parseFloat));\n```\n\n```bash\n$ extra --help\nUsage: help [options]\n\nOptions:\n  -t, --timeout <delay>  timeout in seconds (default: one minute)\n  -d, --drink <size>     drink cup size (choices: \"small\", \"medium\", \"large\")\n  -p, --port <number>    port number (env: PORT)\n  --donate [amount]      optional donation in dollars (preset: 20)\n  -h, --help             display help for command\n\n$ extra --drink huge\nerror: option '-d, --drink <size>' argument 'huge' is invalid. Allowed choices are small, medium, large.\n\n$ PORT=80 extra --donate\nOptions:  { timeout: 60, donate: 20, port: '80' }\n```\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option-arguments. The callback function receives two parameters,\nthe user specified option-argument and the previous value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option-argument to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function parameter.\n\nExample file: [options-custom-processing.js](./examples/options-custom-processing.js)\n\n```js\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and a radix\n  const parsedValue = parseInt(value, 10);\n  if (isNaN(parsedValue)) {\n    throw new commander.InvalidArgumentError('Not a number.');\n  }\n  return parsedValue;\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse();\n\nconst options = program.opts();\nif (options.float !== undefined) console.log(`float: ${options.float}`);\nif (options.integer !== undefined) console.log(`integer: ${options.integer}`);\nif (options.verbose > 0) console.log(`verbosity: ${options.verbose}`);\nif (options.collect.length > 0) console.log(options.collect);\nif (options.list !== undefined) console.log(options.list);\n```\n\n```bash\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n## Commands\n\nYou can specify (sub)commands using `.command()` or `.addCommand()`. There are two ways these can be implemented: using an action handler attached to the command, or as a stand-alone executable file (described in more detail later). The subcommands may be nested ([example](./examples/nestedCommands.js)).\n\nIn the first parameter to `.command()` you specify the command name. You may append the command-arguments after the command name, or specify them separately using `.argument()`. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nYou can use `.addCommand()` to add an already configured subcommand to the program.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using stand-alone executable file, indicated by adding description as second parameter to `.command`.\n// Returns `this` for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n\n// Command prepared separately.\n// Returns `this` for adding more commands.\nprogram\n  .addCommand(build.makeBuildCommand());\n```\n\nConfiguration options can be passed with the call to `.command()` and `.addCommand()`. Specifying `hidden: true` will\nremove the command from the generated help output. Specifying `isDefault: true` will run the subcommand if no other\nsubcommand is specified ([example](./examples/defaultCommand.js)).\n\n### Command-arguments\n\nFor subcommands, you can specify the argument syntax in the call to `.command()` (as shown above). This\nis the only method usable for subcommands implemented using a stand-alone executable, but for other subcommands\nyou can instead use the following method.\n\nTo configure a command, you can use `.argument()` to specify each expected command-argument.\nYou supply the argument name and an optional description. The argument may be `<required>` or `[optional]`.\nYou can specify a default value for an optional command-argument.\n\nExample file: [argument.js](./examples/argument.js)\n\n```js\nprogram\n  .version('0.1.0')\n  .argument('<username>', 'user to login')\n  .argument('[password]', 'password for user, if required', 'no password given')\n  .action((username, password) => {\n    console.log('username:', username);\n    console.log('password:', password);\n  });\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. A variadic argument is passed to the action handler as an array. For example:\n\n```js\nprogram\n  .version('0.1.0')\n  .command('rmdir')\n  .argument('<dirs...>')\n  .action(function (dirs) {\n    dirs.forEach((dir) => {\n      console.log('rmdir %s', dir);\n    });\n  });\n```\n\nThere is a convenience method to add multiple arguments at once, but without descriptions:\n\n```js\nprogram\n  .arguments('<username> <password>');\n```\n\n#### More configuration\n\nThere are some additional features available by constructing an `Argument` explicitly for less common cases.\n\nExample file: [arguments-extra.js](./examples/arguments-extra.js)\n\n```js\nprogram\n  .addArgument(new commander.Argument('<drink-size>', 'drink cup size').choices(['small', 'medium', 'large']))\n  .addArgument(new commander.Argument('[timeout]', 'timeout in seconds').default(60, 'one minute'))\n```\n\n#### Custom argument processing\n\nYou may specify a function to do custom processing of command-arguments (like for option-arguments).\nThe callback function receives two parameters, the user specified command-argument and the previous value for the argument.\nIt returns the new value for the argument.\n\nThe processed argument values are passed to the action handler, and saved as `.processedArgs`.\n\nYou can optionally specify the default/starting value for the argument after the function parameter.\n\nExample file: [arguments-custom-processing.js](./examples/arguments-custom-processing.js)\n\n```js\nprogram\n  .command('add')\n  .argument('<first>', 'integer argument', myParseInt)\n  .argument('[second]', 'integer argument', myParseInt, 1000)\n  .action((first, second) => {\n    console.log(`${first} + ${second} = ${first + second}`);\n  })\n;\n```\n\n### Action handler\n\nThe action handler gets passed a parameter for each command-argument you declared, and two additional parameters\nwhich are the parsed options and the command object itself.\n\nExample file: [thank.js](./examples/thank.js)\n\n```js\nprogram\n  .argument('<name>')\n  .option('-t, --title <honorific>', 'title to use before name')\n  .option('-d, --debug', 'display some debugging')\n  .action((name, options, command) => {\n    if (options.debug) {\n      console.error('Called %s with options %o', command.name(), options);\n    }\n    const title = options.title ? `${options.title} ` : '';\n    console.log(`Thank-you ${title}${name}`);\n  });\n```\n\nYou may supply an `async` action handler, in which case you call `.parseAsync` rather than `.parse`.\n\n```js\nasync function run() { /* code goes here */ }\n\nasync function main() {\n  program\n    .command('run')\n    .action(run);\n  await program.parseAsync(process.argv);\n}\n```\n\nA command's options and arguments on the command line are validated when the command is used. Any unknown options or missing arguments will be reported as an error. You can suppress the unknown option checks with `.allowUnknownOption()`. By default it is not an error to\npass more arguments than declared, but you can make this an error with `.allowExcessArguments(false)`.\n\n### Stand-alone executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells Commander that you're going to use stand-alone executables for subcommands.\nCommander will search the files in the directory of the entry script for a file with the name combination `command-subcommand`, like `pm-install` or `pm-search` in the example below. The search includes trying common file extensions, like `.js`.\nYou may specify a custom name (and path) with the `executableFile` configuration option.\nYou may specify a custom search directory for subcommands with `.executableDir()`.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\nExample file: [pm](./examples/pm)\n\n```js\nprogram\n  .name('pm')\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', { executableFile: 'myUpdateSubCommand' })\n  .command('list', 'list packages installed', { isDefault: true });\n\nprogram.parse(process.argv);\n```\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n### Life cycle hooks\n\nYou can add callback hooks to a command for life cycle events.\n\nExample file: [hook.js](./examples/hook.js)\n\n```js\nprogram\n  .option('-t, --trace', 'display trace statements for commands')\n  .hook('preAction', (thisCommand, actionCommand) => {\n    if (thisCommand.opts().trace) {\n      console.log(`About to call action handler for subcommand: ${actionCommand.name()}`);\n      console.log('arguments: %O', actionCommand.args);\n      console.log('options: %o', actionCommand.opts());\n    }\n  });\n```\n\nThe callback hook can be `async`, in which case you call `.parseAsync` rather than `.parse`. You can add multiple hooks per event.\n\nThe supported events are:\n\n- `preAction`: called before action handler for this command and its subcommands\n- `postAction`: called after action handler for this command and its subcommands\n\nThe hook is passed the command it was added to, and the command running the action handler.\n\n## Automated help\n\nThe help information is auto-generated based on the information commander already knows about your program. The default\nhelp option is `-h,--help`.\n\nExample file: [pizza](./examples/pizza)\n\n```bash\n$ node ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizza ordering\n\nOptions:\n  -p, --peppers        Add peppers\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           display help for command\n```\n\nA `help` command is added by default if your command has subcommands. It can be used alone, or with a subcommand name to show\nfurther help for the subcommand. These are effectively the same if the `shell` program has implicit help:\n\n```bash\nshell help\nshell --help\n\nshell help spawn\nshell spawn --help\n```\n\n### Custom help\n\nYou can add extra text to be displayed along with the built-in help.\n\nExample file: [custom-help](./examples/custom-help)\n\n```js\nprogram\n  .option('-f, --foo', 'enable some foo');\n\nprogram.addHelpText('after', `\n\nExample call:\n  $ custom-help --help`);\n```\n\nYields the following help output:\n\n```Text\nUsage: custom-help [options]\n\nOptions:\n  -f, --foo   enable some foo\n  -h, --help  display help for command\n\nExample call:\n  $ custom-help --help\n```\n\nThe positions in order displayed are:\n\n- `beforeAll`: add to the program for a global banner or header\n- `before`: display extra information before built-in help\n- `after`: display extra information after built-in help\n- `afterAll`: add to the program for a global footer (epilog)\n\nThe positions \"beforeAll\" and \"afterAll\" apply to the command and all its subcommands.\n\nThe second parameter can be a string, or a function returning a string. The function is passed a context object for your convenience. The properties are:\n\n- error: a boolean for whether the help is being displayed due to a usage error\n- command: the Command which is displaying the help\n\n### Display help after errors\n\nThe default behaviour for usage errors is to just display a short error message.\nYou can change the behaviour to show the full help or a custom help message after an error.\n\n```js\nprogram.showHelpAfterError();\n// or\nprogram.showHelpAfterError('(add --help for additional information)');\n```\n\n```sh\n$ pizza --unknown\nerror: unknown option '--unknown'\n(add --help for additional information)\n```\n\nYou can also show suggestions after an error for an unknown command or option.\n\n```js\nprogram.showSuggestionAfterError();\n```\n\n```sh\n$ pizza --hepl\nerror: unknown option '--hepl'\n(Did you mean --help?)\n```\n\n### Display help from code\n\n`.help()`: display help information and exit immediately. You can optionally pass `{ error: true }` to display on stderr and exit with an error status.\n\n`.outputHelp()`: output help information without exiting. You can optionally pass `{ error: true }` to display on stderr.\n\n`.helpInformation()`: get the built-in command help information as a string for processing or displaying yourself.\n\n### .name\n\nThe command name appears in the help, and is also used for locating stand-alone executable subcommands.\n\nYou may specify the program name using `.name()` or in the Command constructor. For the program, Commander will\nfallback to using the script name from the full arguments passed into `.parse()`. However, the script name varies\ndepending on how your program is launched so you may wish to specify it explicitly.\n\n```js\nprogram.name('pizza');\nconst pm = new Command('pm');\n```\n\nSubcommands get a name when specified using `.command()`. If you create the subcommand yourself to use with `.addCommand()`,\nthen set the name using `.name()` or in the Command constructor.\n\n### .usage\n\nThis allows you to customise the usage description in the first line of the help. Given:\n\n```js\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n```\n\nThe help will start with:\n\n```Text\nUsage: my-command [global options] command\n```\n\n### .helpOption(flags, description)\n\nBy default every command has a help option. You may change the default help flags and description. Pass false to disable the built-in help option.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n### .addHelpCommand()\n\nA help command is added by default if your command has subcommands. You can explicitly turn on or off the implicit help command with `.addHelpCommand()` and `.addHelpCommand(false)`.\n\nYou can both turn on and customise the help command by supplying the name and description:\n\n```js\nprogram.addHelpCommand('assist [command]', 'show assistance');\n```\n\n### More configuration\n\nThe built-in help is formatted using the Help class.\nYou can configure the Help behaviour by modifying data properties and methods using `.configureHelp()`, or by subclassing using `.createHelp()` if you prefer.\n\nThe data properties are:\n\n- `helpWidth`: specify the wrap width, useful for unit tests\n- `sortSubcommands`: sort the subcommands alphabetically\n- `sortOptions`: sort the options alphabetically\n\nThere are methods getting the visible lists of arguments, options, and subcommands. There are methods for formatting the items in the lists, with each item having a _term_ and _description_. Take a look at `.formatHelp()` to see how they are used.\n\nExample file: [configure-help.js](./examples/configure-help.js)\n\n```js\nprogram.configureHelp({\n  sortSubcommands: true,\n  subcommandTerm: (cmd) => cmd.name() // Just show the name, instead of short usage.\n});\n```\n\n## Custom event listeners\n\nYou can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.opts().verbose;\n});\n```\n\n## Bits and pieces\n\n### .parse() and .parseAsync()\n\nThe first argument to `.parse` is the array of strings to parse. You may omit the parameter to implicitly use `process.argv`.\n\nIf the arguments follow different conventions than node you can pass a `from` option in the second parameter:\n\n- 'node': default, `argv[0]` is the application and `argv[1]` is the script being run, with user parameters after that\n- 'electron': `argv[1]` varies depending on whether the electron application is packaged\n- 'user': all of the arguments from the user\n\nFor example:\n\n```js\nprogram.parse(process.argv); // Explicit, node conventions\nprogram.parse(); // Implicit, and auto-detect electron\nprogram.parse(['-f', 'filename'], { from: 'user' });\n```\n\n### Parsing Configuration\n\nIf the default parsing does not suit your needs, there are some behaviours to support other usage patterns.\n\nBy default program options are recognised before and after subcommands. To only look for program options before subcommands, use `.enablePositionalOptions()`. This lets you use\nan option for a different purpose in subcommands.\n\nExample file: [positional-options.js](./examples/positional-options.js)\n\nWith positional options, the `-b` is a program option in the first line and a subcommand option in the second line:\n\n```sh\nprogram -b subcommand\nprogram subcommand -b\n```\n\nBy default options are recognised before and after command-arguments. To only process options that come\nbefore the command-arguments, use `.passThroughOptions()`. This lets you pass the  arguments and following options through to another program\nwithout needing to use `--` to end the option processing.\nTo use pass through options in a subcommand, the program needs to enable positional options.\n\nExample file: [pass-through-options.js](./examples/pass-through-options.js)\n\nWith pass through options, the `--port=80` is a program option in the first line and passed through as a command-argument in the second line:\n\n```sh\nprogram --port=80 arg\nprogram arg --port=80\n```\n\nBy default the option processing shows an error for an unknown option. To have an unknown option treated as an ordinary command-argument and continue looking for options, use `.allowUnknownOption()`. This lets you mix known and unknown options.\n\nBy default the argument processing does not display an error for more command-arguments than expected.\nTo display an error for excess arguments, use`.allowExcessArguments(false)`.\n\n### Legacy options as properties\n\nBefore Commander 7, the option values were stored as properties on the command.\nThis was convenient to code but the downside was possible clashes with\nexisting properties of `Command`. You can revert to the old behaviour to run unmodified legacy code by using `.storeOptionsAsProperties()`.\n\n```js\nprogram\n  .storeOptionsAsProperties()\n  .option('-d, --debug')\n  .action((commandAndOptions) => {\n    if (commandAndOptions.debug) {\n      console.error(`Called ${commandAndOptions.name()}`);\n    }\n  });\n```\n\n### TypeScript\n\nIf you use `ts-node` and  stand-alone executable subcommands written as `.ts` files, you need to call your program through node to get the subcommands called correctly. e.g.\n\n```bash\nnode -r ts-node/register pm.ts\n```\n\n### createCommand()\n\nThis factory function creates a new command. It is exported and may be used instead of using `new`, like:\n\n```js\nconst { createCommand } = require('commander');\nconst program = createCommand();\n```\n\n`createCommand` is also a method of the Command object, and creates a new command rather than a subcommand. This gets used internally\nwhen creating subcommands using `.command()`, and you may override it to\ncustomise the new subcommand (example file [custom-command-class.js](./examples/custom-command-class.js)).\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n\n- Use `#! /usr/bin/env node --harmony` in the subcommands scripts. (Note Windows does not support this pattern.)\n- Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning subcommand process.\n\n### Debugging stand-alone executable subcommands\n\nAn executable subcommand is launched as a separate child process.\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) executable subcommands using `node --inspect` et al,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\nIf you are using VSCode to debug executable subcommands you need to set the `\"autoAttachChildProcesses\": true` flag in your launch.json configuration.\n\n### Override exit and output handling\n\nBy default Commander calls `process.exit` when it detects errors, or after displaying the help or version. You can override\nthis behaviour and optionally supply a callback. The default override throws a `CommanderError`.\n\nThe override callback is passed a `CommanderError` with properties `exitCode` number, `code` string, and `message`. The default override behaviour is to throw the error, except for async handling of executable subcommand completion which carries on. The normal display of error messages or version or help\nis not affected by the override which is called after the display.\n\n```js\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // custom processing...\n}\n```\n\nBy default Commander is configured for a command-line application and writes to stdout and stderr.\nYou can modify this behaviour for custom applications. In addition, you can modify the display of error messages.\n\nExample file: [configure-output.js](./examples/configure-output.js)\n\n```js\nfunction errorColor(str) {\n  // Add ANSI escape codes to display text in red.\n  return `\\x1b[31m${str}\\x1b[0m`;\n}\n\nprogram\n  .configureOutput({\n    // Visibly override write routines as example!\n    writeOut: (str) => process.stdout.write(`[OUT] ${str}`),\n    writeErr: (str) => process.stdout.write(`[ERR] ${str}`),\n    // Highlight errors in color.\n    outputError: (str, write) => write(errorColor(str))\n  });\n```\n\n### Additional documentation\n\nThere is more information available about:\n\n- [deprecated](./docs/deprecated.md) features still supported for backwards compatibility\n- [options taking varying arguments](./docs/options-taking-varying-arguments.md)\n\n## Examples\n\nIn a single command program, you might not need an action handler.\n\nExample file: [pizza](./examples/pizza)\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .description('An application for pizza ordering')\n  .option('-p, --peppers', 'Add peppers')\n  .option('-c, --cheese <type>', 'Add the specified type of cheese', 'marble')\n  .option('-C, --no-cheese', 'You do not want any cheese');\n\nprogram.parse();\n\nconst options = program.opts();\nconsole.log('you ordered a pizza with:');\nif (options.peppers) console.log('  - peppers');\nconst cheese = !options.cheese ? 'no' : options.cheese;\nconsole.log('  - %s cheese', cheese);\n```\n\nIn a multi-command program, you will have action handlers for each command (or stand-alone executables for the commands).\n\nExample file: [deploy](./examples/deploy)\n\n```js\nconst { Command } = require('commander');\nconst program = new Command();\n\nprogram\n  .name('deploy')\n  .version('0.0.1')\n  .option('-c, --config <path>', 'set config path', './deploy.conf');\n\nprogram\n  .command('setup [env]')\n  .description('run setup commands for all envs')\n  .option('-s, --setup_mode <mode>', 'Which setup mode to use', 'normal')\n  .action((env, options) => {\n    env = env || 'all';\n    console.log('read config from %s', program.opts().config);\n    console.log('setup for %s env(s) with %s mode', env, options.setup_mode);\n  });\n\nprogram\n  .command('exec <script>')\n  .alias('ex')\n  .description('execute the given remote cmd')\n  .option('-e, --exec_mode <mode>', 'Which exec mode to use', 'fast')\n  .action((script, options) => {\n    console.log('read config from %s', program.opts().config);\n    console.log('exec \"%s\" using %s mode and config %s', script, options.exec_mode, program.opts().config);\n  }).addHelpText('after', `\nExamples:\n  $ deploy exec sequential\n  $ deploy exec async`\n  );\n\nprogram.parse(process.argv);\n```\n\nMore samples can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## Support\n\nThe current version of Commander is fully supported on Long Term Support versions of Node.js, and requires at least v12.20.0.\n(For older versions of Node.js, use an older version of Commander.)\n\nThe main forum for free and community support is the project [Issues](https://github.com/tj/commander.js/issues) on GitHub.\n\n### Commander for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of Commander and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-commander?utm_source=npm-commander&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n","type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true,"readmeFilename":"Readme.md","gitHead":"253f4ff7486e4e1ae09ba35d16964f45791c6a7a","_nodeVersion":"16.13.1","_npmVersion":"8.1.2","_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"maintainers":[{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"vanesyan","email":"romain.vanesyan@gmail.com"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_9.0.0-0_1640151954683_0.6313204506781085"},"_hasShrinkwrap":false},"9.0.0-1":{"_id":"commander@9.0.0-1","name":"commander","description":"the complete solution for node.js command-line programs","version":"9.0.0-1","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"npm run lint:javascript && npm run lint:typescript","lint:javascript":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","lint:typescript":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node --experimental-modules ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js lib/*.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-checkJS && npm run test-esm"},"directories":{},"devDependencies":{"@types/jest":"^27.0.3","@types/node":"^16.11.15","@typescript-eslint/eslint-plugin":"^4.33.0","@typescript-eslint/parser":"^4.27.0","eslint":"^7.29.0","eslint-config-standard":"^16.0.3","eslint-config-standard-with-typescript":"^21.0.1","eslint-plugin-import":"^2.25.3","eslint-plugin-jest":"^24.3.6","eslint-plugin-node":"^11.1.0","eslint-plugin-promise":"^5.2.0","jest":"^27.0.4","ts-jest":"^27.0.3","tsd":"^0.17.0","typescript":"^4.3.4"},"engines":{"node":"^12.20.0 || >=14"},"main":"./index.js","dist":{"shasum":"4e462b5c7d1ec4df59acbf12439ffed46a294d77","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-9.0.0-1.tgz"},"readme":"# Commander.js\n\n[![Build Status](https://github.com/tj/commander.js/workflows/build/badge.svg)](https://github.com/tj/commander.js/actions?query=workflow%3A%22build%22)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces.\n\nRead this in other languages: English | [简体中文](./Readme_zh-CN.md)\n\n- [Commander.js](#commanderjs)\n  - [Installation](#installation)\n  - [Quick Start](#quick-start)\n  - [Declaring _program_ variable](#declaring-program-variable)\n  - [Options](#options)\n    - [Common option types, boolean and value](#common-option-types-boolean-and-value)\n    - [Default option value](#default-option-value)\n    - [Other option types, negatable boolean and boolean|value](#other-option-types-negatable-boolean-and-booleanvalue)\n    - [Required option](#required-option)\n    - [Variadic option](#variadic-option)\n    - [Version option](#version-option)\n    - [More configuration](#more-configuration)\n    - [Custom option processing](#custom-option-processing)\n  - [Commands](#commands)\n    - [Command-arguments](#command-arguments)\n      - [More configuration](#more-configuration-1)\n      - [Custom argument processing](#custom-argument-processing)\n    - [Action handler](#action-handler)\n    - [Stand-alone executable (sub)commands](#stand-alone-executable-subcommands)\n    - [Life cycle hooks](#life-cycle-hooks)\n  - [Automated help](#automated-help)\n    - [Custom help](#custom-help)\n    - [Display help after errors](#display-help-after-errors)\n    - [Display help from code](#display-help-from-code)\n    - [.name](#name)\n    - [.usage](#usage)\n    - [.helpOption(flags, description)](#helpoptionflags-description)\n    - [.addHelpCommand()](#addhelpcommand)\n    - [More configuration](#more-configuration-2)\n  - [Custom event listeners](#custom-event-listeners)\n  - [Bits and pieces](#bits-and-pieces)\n    - [.parse() and .parseAsync()](#parse-and-parseasync)\n    - [Parsing Configuration](#parsing-configuration)\n    - [Legacy options as properties](#legacy-options-as-properties)\n    - [TypeScript](#typescript)\n    - [createCommand()](#createcommand)\n    - [Node options such as `--harmony`](#node-options-such-as---harmony)\n    - [Debugging stand-alone executable subcommands](#debugging-stand-alone-executable-subcommands)\n    - [Display error](#display-error)\n    - [Override exit and output handling](#override-exit-and-output-handling)\n    - [Additional documentation](#additional-documentation)\n  - [Support](#support)\n    - [Commander for enterprise](#commander-for-enterprise)\n\nFor information about terms used in this document see: [terminology](./docs/terminology.md)\n\n## Installation\n\n```bash\nnpm install commander\n```\n\n## Quick Start\n\nYou write code to describe your command line interface.\nCommander looks after parsing the arguments into options and command-arguments,\ndisplays usage errors for problems, and implements a help system.\n\nCommander is strict and displays an error for unrecognised options.\nThe two most used option types are a boolean option, and an option which takes its value from the following argument.\n\nExample file: [split.js](./examples/split.js)\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .option('--first')\n  .option('-s, --separator <char>');\n\nprogram.parse();\n\nconst options = program.opts();\nconst limit = options.first ? 1 : undefined;\nconsole.log(program.args[0].split(options.separator, limit));\n```\n\n```sh\n$ node split.js -s / --fits a/b/c\nerror: unknown option '--fits'\n(Did you mean --first?)\n$ node split.js -s / --first a/b/c\n[ 'a' ]\n```\n\nHere is a more complete program using a subcommand and with descriptions for the help. In a multi-command program, you have an action handler for each command (or stand-alone executables for the commands).\n\nExample file: [string-util.js](./examples/string-util.js)\n\n```js\nconst { Command } = require('commander');\nconst program = new Command();\n\nprogram\n  .name('string-util')\n  .description('CLI to some JavaScript string utilities')\n  .version('0.8.0');\n\nprogram.command('split')\n  .description('Split a string into substrings and display as an array')\n  .argument('<string>', 'string to split')\n  .option('--first', 'display just the first substring')\n  .option('-s, --separator <char>', 'separator character', ',')\n  .action((str, options) => {\n    const limit = options.first ? 1 : undefined;\n    console.log(str.split(options.separator, limit));\n  });\n\nprogram.parse();\n```\n\n```sh\n$ node string-util.js help split\nUsage: string-util split [options] <string>\n\nSplit a string into substrings and display as an array.\n\nArguments:\n  string                  string to split\n\nOptions:\n  --first                 display just the first substring\n  -s, --separator <char>  separator character (default: \",\")\n  -h, --help              display help for command\n\n$ node string-util.js split --separator=/ a/b/c\n[ 'a', 'b', 'c' ]\n```\n\nMore samples can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\n// CommonJS (.cjs)\nconst { program } = require('commander');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n```js\n// CommonJS (.cjs)\nconst { Command } = require('commander');\nconst program = new Command();\n```\n\n```js\n// ECMAScript (.mjs)\nimport { Command } from 'commander';\nconst program = new Command();\n```\n\n```ts\n// TypeScript (.ts)\nimport { Command } from 'commander';\nconst program = new Command();\n```\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space or vertical bar ('|').\n\nThe parsed options can be accessed by calling `.opts()` on a `Command` object, and are passed to the action handler.\n\nMulti-word options such as \"--template-engine\" are camel-cased, becoming `program.opts().templateEngine` etc.\n\nMultiple short flags may optionally be combined in a single argument following the dash: boolean flags, followed by a single option taking a value (possibly followed by the value).\nFor example `-a -b -p 80` may be written as `-ab -p80` or even `-abp80`.\n\nYou can use `--` to indicate the end of the options, and any remaining arguments will be used without being interpreted.\n\nBy default options on the command line are not positional, and can be specified before or after other arguments.\n\nThere are additional related routines for when `.opts()` is not enough:\n\n- `.optsWithGlobals()` returns merged local and global option values\n- `.getOptionValue()` and `.setOptionValue()` work with a single option value\n- `.getOptionValueSource()` and `.setOptionValueWithSource()` include where the option value came from\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean option, and an option which takes its value\nfrom the following argument (declared with angle brackets like `--expect <value>`). Both are `undefined` unless specified on command line.\n\nExample file: [options-common.js](./examples/options-common.js)\n\n```js\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.debug) console.log(options);\nconsole.log('pizza details:');\nif (options.small) console.log('- small pizza size');\nif (options.pizzaType) console.log(`- ${options.pizzaType}`);\n```\n\n```bash\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -d -s -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the program options in the `program.args` array. The parameter is optional and defaults to `process.argv`.\n\n### Default option value\n\nYou can specify a default value for an option.\n\nExample file: [options-defaults.js](./examples/options-defaults.js)\n\n```js\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse();\n\nconsole.log(`cheese: ${program.opts().cheese}`);\n```\n\n```bash\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and boolean|value\n\nYou can define a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be.\n\nExample file: [options-negatable.js](./examples/options-negatable.js)\n\n```js\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse();\n\nconst options = program.opts();\nconst sauceStr = options.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (options.cheese === false) ? 'no cheese' : `${options.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```bash\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which may be used as a boolean option but may optionally take an option-argument\n(declared with square brackets like `--optional [value]`).\n\nExample file: [options-boolean-or-value.js](./examples/options-boolean-or-value.js)\n\n```js\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.cheese === undefined) console.log('no cheese');\nelse if (options.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${options.cheese}`);\n```\n\n```bash\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-taking-varying-arguments.md).\n\n### Required option\n\nYou may specify a required (mandatory) option using `.requiredOption`. The option must have a value after parsing, usually specified on the command line, or perhaps from a default value (say from environment). The method is otherwise the same as `.option` in format, taking flags and description, and optional default value or custom processing.\n\nExample file: [options-required.js](./examples/options-required.js)\n\n```js\nprogram\n  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse();\n```\n\n```bash\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n```\n\n### Variadic option\n\nYou may make an option variadic by appending `...` to the value placeholder when declaring the option. On the command line you\ncan then specify multiple option-arguments, and the parsed option value will be an array. The extra arguments\nare read until the first argument starting with a dash. The special argument `--` stops option processing entirely. If a value\nis specified in the same argument as the option then no further values are read.\n\nExample file: [options-variadic.js](./examples/options-variadic.js)\n\n```js\nprogram\n  .option('-n, --number <numbers...>', 'specify numbers')\n  .option('-l, --letter [letters...]', 'specify letters');\n\nprogram.parse();\n\nconsole.log('Options: ', program.opts());\nconsole.log('Remaining arguments: ', program.args);\n```\n\n```bash\n$ collect -n 1 2 3 --letter a b c\nOptions:  { number: [ '1', '2', '3' ], letter: [ 'a', 'b', 'c' ] }\nRemaining arguments:  []\n$ collect --letter=A -n80 operand\nOptions:  { number: [ '80' ], letter: [ 'A' ] }\nRemaining arguments:  [ 'operand' ]\n$ collect --letter -n 1 -n 2 3 -- operand\nOptions:  { number: [ '1', '2', '3' ], letter: true }\nRemaining arguments:  [ 'operand' ]\n```\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-taking-varying-arguments.md).\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```bash\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n### More configuration\n\nYou can add most options using the `.option()` method, but there are some additional features available\nby constructing an `Option` explicitly for less common cases.\n\nExample files: [options-extra.js](./examples/options-extra.js), [options-env.js](./examples/options-env.js)\n\n```js\nprogram\n  .addOption(new Option('-s, --secret').hideHelp())\n  .addOption(new Option('-t, --timeout <delay>', 'timeout in seconds').default(60, 'one minute'))\n  .addOption(new Option('-d, --drink <size>', 'drink size').choices(['small', 'medium', 'large']))\n  .addOption(new Option('-p, --port <number>', 'port number').env('PORT'))\n  .addOption(new Option('--donate [amount]', 'optional donation in dollars').preset('20').argParser(parseFloat));\n```\n\n```bash\n$ extra --help\nUsage: help [options]\n\nOptions:\n  -t, --timeout <delay>  timeout in seconds (default: one minute)\n  -d, --drink <size>     drink cup size (choices: \"small\", \"medium\", \"large\")\n  -p, --port <number>    port number (env: PORT)\n  --donate [amount]      optional donation in dollars (preset: 20)\n  -h, --help             display help for command\n\n$ extra --drink huge\nerror: option '-d, --drink <size>' argument 'huge' is invalid. Allowed choices are small, medium, large.\n\n$ PORT=80 extra --donate\nOptions:  { timeout: 60, donate: 20, port: '80' }\n```\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option-arguments. The callback function receives two parameters,\nthe user specified option-argument and the previous value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option-argument to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function parameter.\n\nExample file: [options-custom-processing.js](./examples/options-custom-processing.js)\n\n```js\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and a radix\n  const parsedValue = parseInt(value, 10);\n  if (isNaN(parsedValue)) {\n    throw new commander.InvalidArgumentError('Not a number.');\n  }\n  return parsedValue;\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse();\n\nconst options = program.opts();\nif (options.float !== undefined) console.log(`float: ${options.float}`);\nif (options.integer !== undefined) console.log(`integer: ${options.integer}`);\nif (options.verbose > 0) console.log(`verbosity: ${options.verbose}`);\nif (options.collect.length > 0) console.log(options.collect);\nif (options.list !== undefined) console.log(options.list);\n```\n\n```bash\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n## Commands\n\nYou can specify (sub)commands using `.command()` or `.addCommand()`. There are two ways these can be implemented: using an action handler attached to the command, or as a stand-alone executable file (described in more detail later). The subcommands may be nested ([example](./examples/nestedCommands.js)).\n\nIn the first parameter to `.command()` you specify the command name. You may append the command-arguments after the command name, or specify them separately using `.argument()`. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nYou can use `.addCommand()` to add an already configured subcommand to the program.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using stand-alone executable file, indicated by adding description as second parameter to `.command`.\n// Returns `this` for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n\n// Command prepared separately.\n// Returns `this` for adding more commands.\nprogram\n  .addCommand(build.makeBuildCommand());\n```\n\nConfiguration options can be passed with the call to `.command()` and `.addCommand()`. Specifying `hidden: true` will\nremove the command from the generated help output. Specifying `isDefault: true` will run the subcommand if no other\nsubcommand is specified ([example](./examples/defaultCommand.js)).\n\n### Command-arguments\n\nFor subcommands, you can specify the argument syntax in the call to `.command()` (as shown above). This\nis the only method usable for subcommands implemented using a stand-alone executable, but for other subcommands\nyou can instead use the following method.\n\nTo configure a command, you can use `.argument()` to specify each expected command-argument.\nYou supply the argument name and an optional description. The argument may be `<required>` or `[optional]`.\nYou can specify a default value for an optional command-argument.\n\nExample file: [argument.js](./examples/argument.js)\n\n```js\nprogram\n  .version('0.1.0')\n  .argument('<username>', 'user to login')\n  .argument('[password]', 'password for user, if required', 'no password given')\n  .action((username, password) => {\n    console.log('username:', username);\n    console.log('password:', password);\n  });\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. A variadic argument is passed to the action handler as an array. For example:\n\n```js\nprogram\n  .version('0.1.0')\n  .command('rmdir')\n  .argument('<dirs...>')\n  .action(function (dirs) {\n    dirs.forEach((dir) => {\n      console.log('rmdir %s', dir);\n    });\n  });\n```\n\nThere is a convenience method to add multiple arguments at once, but without descriptions:\n\n```js\nprogram\n  .arguments('<username> <password>');\n```\n\n#### More configuration\n\nThere are some additional features available by constructing an `Argument` explicitly for less common cases.\n\nExample file: [arguments-extra.js](./examples/arguments-extra.js)\n\n```js\nprogram\n  .addArgument(new commander.Argument('<drink-size>', 'drink cup size').choices(['small', 'medium', 'large']))\n  .addArgument(new commander.Argument('[timeout]', 'timeout in seconds').default(60, 'one minute'))\n```\n\n#### Custom argument processing\n\nYou may specify a function to do custom processing of command-arguments (like for option-arguments).\nThe callback function receives two parameters, the user specified command-argument and the previous value for the argument.\nIt returns the new value for the argument.\n\nThe processed argument values are passed to the action handler, and saved as `.processedArgs`.\n\nYou can optionally specify the default/starting value for the argument after the function parameter.\n\nExample file: [arguments-custom-processing.js](./examples/arguments-custom-processing.js)\n\n```js\nprogram\n  .command('add')\n  .argument('<first>', 'integer argument', myParseInt)\n  .argument('[second]', 'integer argument', myParseInt, 1000)\n  .action((first, second) => {\n    console.log(`${first} + ${second} = ${first + second}`);\n  })\n;\n```\n\n### Action handler\n\nThe action handler gets passed a parameter for each command-argument you declared, and two additional parameters\nwhich are the parsed options and the command object itself.\n\nExample file: [thank.js](./examples/thank.js)\n\n```js\nprogram\n  .argument('<name>')\n  .option('-t, --title <honorific>', 'title to use before name')\n  .option('-d, --debug', 'display some debugging')\n  .action((name, options, command) => {\n    if (options.debug) {\n      console.error('Called %s with options %o', command.name(), options);\n    }\n    const title = options.title ? `${options.title} ` : '';\n    console.log(`Thank-you ${title}${name}`);\n  });\n```\n\nIf you prefer, you can work with the command directly and skip declaring the parameters for the action handler. The `this` keyword is set to the running command and can be used from a function expression (but not from an arrow function).\n\nExample file: [action-this.js](./examples/action-this.js)\n\n```js\nprogram\n  .command('serve')\n  .argument('<script>')\n  .option('-p, --port <number>', 'port number', 80)\n  .action(function() {\n    console.error('Run script %s on port %s', this.args[0], this.opts().port);\n  });\n```\n\nYou may supply an `async` action handler, in which case you call `.parseAsync` rather than `.parse`.\n\n```js\nasync function run() { /* code goes here */ }\n\nasync function main() {\n  program\n    .command('run')\n    .action(run);\n  await program.parseAsync(process.argv);\n}\n```\n\nA command's options and arguments on the command line are validated when the command is used. Any unknown options or missing arguments will be reported as an error. You can suppress the unknown option checks with `.allowUnknownOption()`. By default it is not an error to\npass more arguments than declared, but you can make this an error with `.allowExcessArguments(false)`.\n\n### Stand-alone executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells Commander that you're going to use stand-alone executables for subcommands.\nCommander will search the files in the directory of the entry script for a file with the name combination `command-subcommand`, like `pm-install` or `pm-search` in the example below. The search includes trying common file extensions, like `.js`.\nYou may specify a custom name (and path) with the `executableFile` configuration option.\nYou may specify a custom search directory for subcommands with `.executableDir()`.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\nExample file: [pm](./examples/pm)\n\n```js\nprogram\n  .name('pm')\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', { executableFile: 'myUpdateSubCommand' })\n  .command('list', 'list packages installed', { isDefault: true });\n\nprogram.parse(process.argv);\n```\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n### Life cycle hooks\n\nYou can add callback hooks to a command for life cycle events.\n\nExample file: [hook.js](./examples/hook.js)\n\n```js\nprogram\n  .option('-t, --trace', 'display trace statements for commands')\n  .hook('preAction', (thisCommand, actionCommand) => {\n    if (thisCommand.opts().trace) {\n      console.log(`About to call action handler for subcommand: ${actionCommand.name()}`);\n      console.log('arguments: %O', actionCommand.args);\n      console.log('options: %o', actionCommand.opts());\n    }\n  });\n```\n\nThe callback hook can be `async`, in which case you call `.parseAsync` rather than `.parse`. You can add multiple hooks per event.\n\nThe supported events are:\n\n- `preAction`: called before action handler for this command and its subcommands\n- `postAction`: called after action handler for this command and its subcommands\n\nThe hook is passed the command it was added to, and the command running the action handler.\n\n## Automated help\n\nThe help information is auto-generated based on the information commander already knows about your program. The default\nhelp option is `-h,--help`.\n\nExample file: [pizza](./examples/pizza)\n\n```bash\n$ node ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizza ordering\n\nOptions:\n  -p, --peppers        Add peppers\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           display help for command\n```\n\nA `help` command is added by default if your command has subcommands. It can be used alone, or with a subcommand name to show\nfurther help for the subcommand. These are effectively the same if the `shell` program has implicit help:\n\n```bash\nshell help\nshell --help\n\nshell help spawn\nshell spawn --help\n```\n\n### Custom help\n\nYou can add extra text to be displayed along with the built-in help.\n\nExample file: [custom-help](./examples/custom-help)\n\n```js\nprogram\n  .option('-f, --foo', 'enable some foo');\n\nprogram.addHelpText('after', `\n\nExample call:\n  $ custom-help --help`);\n```\n\nYields the following help output:\n\n```Text\nUsage: custom-help [options]\n\nOptions:\n  -f, --foo   enable some foo\n  -h, --help  display help for command\n\nExample call:\n  $ custom-help --help\n```\n\nThe positions in order displayed are:\n\n- `beforeAll`: add to the program for a global banner or header\n- `before`: display extra information before built-in help\n- `after`: display extra information after built-in help\n- `afterAll`: add to the program for a global footer (epilog)\n\nThe positions \"beforeAll\" and \"afterAll\" apply to the command and all its subcommands.\n\nThe second parameter can be a string, or a function returning a string. The function is passed a context object for your convenience. The properties are:\n\n- error: a boolean for whether the help is being displayed due to a usage error\n- command: the Command which is displaying the help\n\n### Display help after errors\n\nThe default behaviour for usage errors is to just display a short error message.\nYou can change the behaviour to show the full help or a custom help message after an error.\n\n```js\nprogram.showHelpAfterError();\n// or\nprogram.showHelpAfterError('(add --help for additional information)');\n```\n\n```sh\n$ pizza --unknown\nerror: unknown option '--unknown'\n(add --help for additional information)\n```\n\nYou can also show suggestions after an error for an unknown command or option.\n\n```js\nprogram.showSuggestionAfterError();\n```\n\n```sh\n$ pizza --hepl\nerror: unknown option '--hepl'\n(Did you mean --help?)\n```\n\n### Display help from code\n\n`.help()`: display help information and exit immediately. You can optionally pass `{ error: true }` to display on stderr and exit with an error status.\n\n`.outputHelp()`: output help information without exiting. You can optionally pass `{ error: true }` to display on stderr.\n\n`.helpInformation()`: get the built-in command help information as a string for processing or displaying yourself.\n\n### .name\n\nThe command name appears in the help, and is also used for locating stand-alone executable subcommands.\n\nYou may specify the program name using `.name()` or in the Command constructor. For the program, Commander will\nfallback to using the script name from the full arguments passed into `.parse()`. However, the script name varies\ndepending on how your program is launched so you may wish to specify it explicitly.\n\n```js\nprogram.name('pizza');\nconst pm = new Command('pm');\n```\n\nSubcommands get a name when specified using `.command()`. If you create the subcommand yourself to use with `.addCommand()`,\nthen set the name using `.name()` or in the Command constructor.\n\n### .usage\n\nThis allows you to customise the usage description in the first line of the help. Given:\n\n```js\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n```\n\nThe help will start with:\n\n```Text\nUsage: my-command [global options] command\n```\n\n### .helpOption(flags, description)\n\nBy default every command has a help option. You may change the default help flags and description. Pass false to disable the built-in help option.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n### .addHelpCommand()\n\nA help command is added by default if your command has subcommands. You can explicitly turn on or off the implicit help command with `.addHelpCommand()` and `.addHelpCommand(false)`.\n\nYou can both turn on and customise the help command by supplying the name and description:\n\n```js\nprogram.addHelpCommand('assist [command]', 'show assistance');\n```\n\n### More configuration\n\nThe built-in help is formatted using the Help class.\nYou can configure the Help behaviour by modifying data properties and methods using `.configureHelp()`, or by subclassing using `.createHelp()` if you prefer.\n\nThe data properties are:\n\n- `helpWidth`: specify the wrap width, useful for unit tests\n- `sortSubcommands`: sort the subcommands alphabetically\n- `sortOptions`: sort the options alphabetically\n\nThere are methods getting the visible lists of arguments, options, and subcommands. There are methods for formatting the items in the lists, with each item having a _term_ and _description_. Take a look at `.formatHelp()` to see how they are used.\n\nExample file: [configure-help.js](./examples/configure-help.js)\n\n```js\nprogram.configureHelp({\n  sortSubcommands: true,\n  subcommandTerm: (cmd) => cmd.name() // Just show the name, instead of short usage.\n});\n```\n\n## Custom event listeners\n\nYou can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.opts().verbose;\n});\n```\n\n## Bits and pieces\n\n### .parse() and .parseAsync()\n\nThe first argument to `.parse` is the array of strings to parse. You may omit the parameter to implicitly use `process.argv`.\n\nIf the arguments follow different conventions than node you can pass a `from` option in the second parameter:\n\n- 'node': default, `argv[0]` is the application and `argv[1]` is the script being run, with user parameters after that\n- 'electron': `argv[1]` varies depending on whether the electron application is packaged\n- 'user': all of the arguments from the user\n\nFor example:\n\n```js\nprogram.parse(process.argv); // Explicit, node conventions\nprogram.parse(); // Implicit, and auto-detect electron\nprogram.parse(['-f', 'filename'], { from: 'user' });\n```\n\n### Parsing Configuration\n\nIf the default parsing does not suit your needs, there are some behaviours to support other usage patterns.\n\nBy default program options are recognised before and after subcommands. To only look for program options before subcommands, use `.enablePositionalOptions()`. This lets you use\nan option for a different purpose in subcommands.\n\nExample file: [positional-options.js](./examples/positional-options.js)\n\nWith positional options, the `-b` is a program option in the first line and a subcommand option in the second line:\n\n```sh\nprogram -b subcommand\nprogram subcommand -b\n```\n\nBy default options are recognised before and after command-arguments. To only process options that come\nbefore the command-arguments, use `.passThroughOptions()`. This lets you pass the  arguments and following options through to another program\nwithout needing to use `--` to end the option processing.\nTo use pass through options in a subcommand, the program needs to enable positional options.\n\nExample file: [pass-through-options.js](./examples/pass-through-options.js)\n\nWith pass through options, the `--port=80` is a program option in the first line and passed through as a command-argument in the second line:\n\n```sh\nprogram --port=80 arg\nprogram arg --port=80\n```\n\nBy default the option processing shows an error for an unknown option. To have an unknown option treated as an ordinary command-argument and continue looking for options, use `.allowUnknownOption()`. This lets you mix known and unknown options.\n\nBy default the argument processing does not display an error for more command-arguments than expected.\nTo display an error for excess arguments, use`.allowExcessArguments(false)`.\n\n### Legacy options as properties\n\nBefore Commander 7, the option values were stored as properties on the command.\nThis was convenient to code but the downside was possible clashes with\nexisting properties of `Command`. You can revert to the old behaviour to run unmodified legacy code by using `.storeOptionsAsProperties()`.\n\n```js\nprogram\n  .storeOptionsAsProperties()\n  .option('-d, --debug')\n  .action((commandAndOptions) => {\n    if (commandAndOptions.debug) {\n      console.error(`Called ${commandAndOptions.name()}`);\n    }\n  });\n```\n\n### TypeScript\n\nIf you use `ts-node` and  stand-alone executable subcommands written as `.ts` files, you need to call your program through node to get the subcommands called correctly. e.g.\n\n```bash\nnode -r ts-node/register pm.ts\n```\n\n### createCommand()\n\nThis factory function creates a new command. It is exported and may be used instead of using `new`, like:\n\n```js\nconst { createCommand } = require('commander');\nconst program = createCommand();\n```\n\n`createCommand` is also a method of the Command object, and creates a new command rather than a subcommand. This gets used internally\nwhen creating subcommands using `.command()`, and you may override it to\ncustomise the new subcommand (example file [custom-command-class.js](./examples/custom-command-class.js)).\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n\n- Use `#! /usr/bin/env node --harmony` in the subcommands scripts. (Note Windows does not support this pattern.)\n- Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning subcommand process.\n\n### Debugging stand-alone executable subcommands\n\nAn executable subcommand is launched as a separate child process.\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) executable subcommands using `node --inspect` et al,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\nIf you are using VSCode to debug executable subcommands you need to set the `\"autoAttachChildProcesses\": true` flag in your launch.json configuration.\n\n### Display error\n\nThis routine is available to invoke the Commander error handling for your own error conditions. (See also the next section about exit handling.)\n\nAs well as the error message, you can optionally specify the `exitCode` (used with `process.exit`)\nand `code` (used with `CommanderError`).\n\n```js\nprogram.exit('Password must be longer than four characters');\nprogram.exit('Custom processing has failed', { exitCode: 2, code: 'my.custom.error' });\n```\n\n### Override exit and output handling\n\nBy default Commander calls `process.exit` when it detects errors, or after displaying the help or version. You can override\nthis behaviour and optionally supply a callback. The default override throws a `CommanderError`.\n\nThe override callback is passed a `CommanderError` with properties `exitCode` number, `code` string, and `message`. The default override behaviour is to throw the error, except for async handling of executable subcommand completion which carries on. The normal display of error messages or version or help\nis not affected by the override which is called after the display.\n\n```js\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // custom processing...\n}\n```\n\nBy default Commander is configured for a command-line application and writes to stdout and stderr.\nYou can modify this behaviour for custom applications. In addition, you can modify the display of error messages.\n\nExample file: [configure-output.js](./examples/configure-output.js)\n\n```js\nfunction errorColor(str) {\n  // Add ANSI escape codes to display text in red.\n  return `\\x1b[31m${str}\\x1b[0m`;\n}\n\nprogram\n  .configureOutput({\n    // Visibly override write routines as example!\n    writeOut: (str) => process.stdout.write(`[OUT] ${str}`),\n    writeErr: (str) => process.stdout.write(`[ERR] ${str}`),\n    // Highlight errors in color.\n    outputError: (str, write) => write(errorColor(str))\n  });\n```\n\n### Additional documentation\n\nThere is more information available about:\n\n- [deprecated](./docs/deprecated.md) features still supported for backwards compatibility\n- [options taking varying arguments](./docs/options-taking-varying-arguments.md)\n\n## Support\n\nThe current version of Commander is fully supported on Long Term Support versions of Node.js, and requires at least v12.20.0.\n(For older versions of Node.js, use an older version of Commander.)\n\nThe main forum for free and community support is the project [Issues](https://github.com/tj/commander.js/issues) on GitHub.\n\n### Commander for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of Commander and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-commander?utm_source=npm-commander&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n","type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true,"readmeFilename":"Readme.md","gitHead":"c58fe4d32f72b9fd6a6bfb64b499f6d3dfd06bb2","_nodeVersion":"16.13.2","_npmVersion":"8.1.2","_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"maintainers":[{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"vanesyan","email":"romain.vanesyan@gmail.com"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_9.0.0-1_1642192398569_0.16921628473830674"},"_hasShrinkwrap":false},"9.0.0":{"_id":"commander@9.0.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"9.0.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"npm run lint:javascript && npm run lint:typescript","lint:javascript":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","lint:typescript":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node --experimental-modules ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js lib/*.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-checkJS && npm run test-esm"},"directories":{},"devDependencies":{"@types/jest":"^27.0.3","@types/node":"^16.11.15","@typescript-eslint/eslint-plugin":"^4.33.0","@typescript-eslint/parser":"^4.27.0","eslint":"^7.29.0","eslint-config-standard":"^16.0.3","eslint-config-standard-with-typescript":"^21.0.1","eslint-plugin-import":"^2.25.3","eslint-plugin-jest":"^24.3.6","eslint-plugin-node":"^11.1.0","eslint-plugin-promise":"^5.2.0","jest":"^27.0.4","ts-jest":"^27.0.3","tsd":"^0.17.0","typescript":"^4.3.4"},"engines":{"node":"^12.20.0 || >=14"},"main":"./index.js","dist":{"shasum":"86d58f24ee98126568936bd1d3574e0308a99a40","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-9.0.0.tgz"},"type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true,"gitHead":"02a124c7d58dbae2ef11f9284b2c68ad94f6dc8b","_nodeVersion":"16.8.0","_npmVersion":"7.24.0","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"name":"zhiyelee","email":"zhiyelee@gmail.com"},{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"vanesyan","email":"romain.vanesyan@gmail.com"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_9.0.0_1643416240849_0.9195341872767004"},"_hasShrinkwrap":false},"9.1.0":{"_id":"commander@9.1.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"9.1.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"npm run lint:javascript && npm run lint:typescript","lint:javascript":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","lint:typescript":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node --experimental-modules ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js lib/*.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-checkJS && npm run test-esm"},"directories":{},"devDependencies":{"@types/jest":"^27.0.3","@types/node":"^16.11.15","@typescript-eslint/eslint-plugin":"^4.33.0","@typescript-eslint/parser":"^4.27.0","eslint":"^7.29.0","eslint-config-standard":"^16.0.3","eslint-config-standard-with-typescript":"^21.0.1","eslint-plugin-import":"^2.25.3","eslint-plugin-jest":"^24.3.6","eslint-plugin-node":"^11.1.0","eslint-plugin-promise":"^5.2.0","jest":"^27.0.4","ts-jest":"^27.0.3","tsd":"^0.17.0","typescript":"^4.3.4"},"engines":{"node":"^12.20.0 || >=14"},"main":"./index.js","dist":{"shasum":"a6b263b2327f2e188c6402c42623327909f2dbec","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-9.1.0.tgz"},"type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true,"gitHead":"5bddedf2496e31c0a5d3eae7b8419b09291cf2fc","_nodeVersion":"16.8.0","_npmVersion":"8.4.1","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_9.1.0_1647582981419_0.9145293492260986"},"_hasShrinkwrap":false},"9.2.0":{"_id":"commander@9.2.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"9.2.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"npm run lint:javascript && npm run lint:typescript","lint:javascript":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","lint:typescript":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node --experimental-modules ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js lib/*.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-checkJS && npm run test-esm"},"directories":{},"devDependencies":{"@types/jest":"^27.0.3","@types/node":"^16.11.15","@typescript-eslint/eslint-plugin":"^4.33.0","@typescript-eslint/parser":"^4.27.0","eslint":"^7.29.0","eslint-config-standard":"^16.0.3","eslint-config-standard-with-typescript":"^21.0.1","eslint-plugin-import":"^2.25.3","eslint-plugin-jest":"^24.3.6","eslint-plugin-node":"^11.1.0","eslint-plugin-promise":"^5.2.0","jest":"^27.0.4","ts-jest":"^27.0.3","tsd":"^0.17.0","typescript":"^4.3.4"},"engines":{"node":"^12.20.0 || >=14"},"main":"./index.js","dist":{"shasum":"6e21014b2ed90d8b7c9647230d8b7a94a4a419a9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-9.2.0.tgz"},"type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true,"gitHead":"6c26370fcba737d9786a34d0e8693f689a067569","_nodeVersion":"16.8.0","_npmVersion":"8.4.1","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_9.2.0_1650010675917_0.000026128876978726012"},"_hasShrinkwrap":false},"9.3.0":{"_id":"commander@9.3.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"9.3.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"npm run lint:javascript && npm run lint:typescript","lint:javascript":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","lint:typescript":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node --experimental-modules ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js lib/*.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-checkJS && npm run test-esm"},"directories":{},"devDependencies":{"@types/jest":"^27.0.3","@types/node":"^16.11.15","@typescript-eslint/eslint-plugin":"^4.33.0","@typescript-eslint/parser":"^4.27.0","eslint":"^7.29.0","eslint-config-standard":"^16.0.3","eslint-config-standard-with-typescript":"^21.0.1","eslint-plugin-import":"^2.25.3","eslint-plugin-jest":"^24.3.6","eslint-plugin-node":"^11.1.0","eslint-plugin-promise":"^5.2.0","jest":"^27.0.4","ts-jest":"^27.0.3","tsd":"^0.17.0","typescript":"^4.3.4"},"engines":{"node":"^12.20.0 || >=14"},"main":"./index.js","dist":{"shasum":"f619114a5a2d2054e0d9ff1b31d5ccf89255e26b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-9.3.0.tgz"},"type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true,"gitHead":"f2aec2648d68b01d8947298b27093df3fdb551a7","_nodeVersion":"18.1.0","_npmVersion":"8.10.0","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_9.3.0_1653706026504_0.58426621720664"},"_hasShrinkwrap":false},"9.4.0":{"_id":"commander@9.4.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"9.4.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"npm run lint:javascript && npm run lint:typescript","lint:javascript":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","lint:typescript":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node --experimental-modules ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js lib/*.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-checkJS && npm run test-esm"},"directories":{},"devDependencies":{"@types/jest":"^28.1.4","@types/node":"^16.11.15","@typescript-eslint/eslint-plugin":"^5.30.6","@typescript-eslint/parser":"^5.30.6","eslint":"^8.19.0","eslint-config-standard":"^17.0.0","eslint-config-standard-with-typescript":"^22.0.0","eslint-plugin-import":"^2.25.3","eslint-plugin-jest":"^26.5.3","eslint-plugin-n":"^15.2.4","eslint-plugin-promise":"^6.0.0","jest":"^28.1.2","ts-jest":"^28.0.5","tsd":"^0.22.0","typescript":"^4.7.4"},"engines":{"node":"^12.20.0 || >=14"},"main":"./index.js","dist":{"shasum":"bc4a40918fefe52e22450c111ecd6b7acce6f11c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-9.4.0.tgz"},"type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true,"gitHead":"82fcb98cc27164a98e0c5f2c6f54621b5bbceef9","_nodeVersion":"16.15.1","_npmVersion":"8.11.0","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_9.4.0_1657865993077_0.6314160407672071"},"_hasShrinkwrap":false},"9.4.1":{"_id":"commander@9.4.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"9.4.1","keywords":["commander","command","option","parser","cli","argument","args","argv"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":""},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"license":"MIT","scripts":{"lint":"npm run lint:javascript && npm run lint:typescript","lint:javascript":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","lint:typescript":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node --experimental-modules ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js lib/*.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-checkJS && npm run test-esm"},"directories":null,"devDependencies":{"@types/jest":"^28.1.4","@types/node":"^16.11.15","@typescript-eslint/eslint-plugin":"^5.30.6","@typescript-eslint/parser":"^5.30.6","eslint":"^8.19.0","eslint-config-standard":"^17.0.0","eslint-config-standard-with-typescript":"^22.0.0","eslint-plugin-import":"^2.25.3","eslint-plugin-jest":"^26.5.3","eslint-plugin-n":"^15.2.4","eslint-plugin-promise":"^6.0.0","jest":"^28.1.2","ts-jest":"^28.0.5","tsd":"^0.22.0","typescript":"^4.7.4"},"engines":{"node":"^12.20.0 || >=14"},"files":["index.js","lib/*.js","esm.mjs","typings/index.d.ts","package-support.json"],"main":"./index.js","dist":{"shasum":"d1dd8f2ce6faf93147295c0df13c7c21141cfbdd","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-9.4.1.tgz"},"type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true},"9.5.0":{"_id":"commander@9.5.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"9.5.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":""},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"license":"MIT","scripts":{"lint":"npm run lint:javascript && npm run lint:typescript","lint:javascript":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","lint:typescript":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node --experimental-modules ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js lib/*.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-checkJS && npm run test-esm"},"directories":null,"devDependencies":{"@types/jest":"^28.1.4","@types/node":"^16.11.15","@typescript-eslint/eslint-plugin":"^5.30.6","@typescript-eslint/parser":"^5.30.6","eslint":"^8.19.0","eslint-config-standard":"^17.0.0","eslint-config-standard-with-typescript":"^22.0.0","eslint-plugin-import":"^2.25.3","eslint-plugin-jest":"^26.5.3","eslint-plugin-n":"^15.2.4","eslint-plugin-promise":"^6.0.0","jest":"^28.1.2","ts-jest":"^28.0.5","tsd":"^0.22.0","typescript":"^4.7.4"},"engines":{"node":"^12.20.0 || >=14"},"files":["index.js","lib/*.js","esm.mjs","typings/index.d.ts","package-support.json"],"main":"./index.js","dist":{"shasum":"bc08d1eb5cedf7ccb797a96199d41c7bc3e60d30","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-9.5.0.tgz"},"type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true},"10.0.0":{"_id":"commander@10.0.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"10.0.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":""},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"license":"MIT","scripts":{"lint":"npm run lint:javascript && npm run lint:typescript","lint:javascript":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","lint:typescript":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js lib/*.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-checkJS && npm run test-esm"},"directories":null,"devDependencies":{"@types/jest":"^29.2.4","@types/node":"^18.11.18","@typescript-eslint/eslint-plugin":"^5.47.1","@typescript-eslint/parser":"^5.47.1","eslint":"^8.30.0","eslint-config-standard":"^17.0.0","eslint-config-standard-with-typescript":"^24.0.0","eslint-plugin-import":"^2.26.0","eslint-plugin-jest":"^27.1.7","eslint-plugin-n":"^15.6.0","eslint-plugin-promise":"^6.1.1","jest":"^29.3.1","ts-jest":"^29.0.3","tsd":"^0.25.0","typescript":"^4.9.4"},"engines":{"node":">=14"},"files":["index.js","lib/*.js","esm.mjs","typings/index.d.ts","package-support.json"],"main":"./index.js","dist":{"shasum":"71797971162cd3cf65f0b9d24eb28f8d303acdf1","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-10.0.0.tgz"},"type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true},"10.0.1":{"_id":"commander@10.0.1","name":"commander","description":"the complete solution for node.js command-line programs","version":"10.0.1","keywords":["commander","command","option","parser","cli","argument","args","argv"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":""},"repository":{"type":"git","url":"https://github.com/tj/commander.js.git"},"license":"MIT","scripts":{"lint":"npm run lint:javascript && npm run lint:typescript","lint:javascript":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","lint:typescript":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js lib/*.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-checkJS && npm run test-esm"},"directories":null,"devDependencies":{"@types/jest":"^29.2.4","@types/node":"^18.11.18","@typescript-eslint/eslint-plugin":"^5.47.1","@typescript-eslint/parser":"^5.47.1","eslint":"^8.30.0","eslint-config-standard":"^17.0.0","eslint-config-standard-with-typescript":"^24.0.0","eslint-plugin-import":"^2.26.0","eslint-plugin-jest":"^27.1.7","eslint-plugin-n":"^15.6.0","eslint-plugin-promise":"^6.1.1","jest":"^29.3.1","ts-jest":"^29.0.3","tsd":"^0.25.0","typescript":"^4.9.4"},"engines":{"node":">=14"},"files":["index.js","lib/*.js","esm.mjs","typings/index.d.ts","package-support.json"],"main":"./index.js","dist":{"shasum":"881ee46b4f77d1c1dccc5823433aa39b022cbe06","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-10.0.1.tgz"},"type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true},"11.0.0":{"_id":"commander@11.0.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"11.0.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"npm run lint:javascript && npm run lint:typescript","lint:javascript":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","lint:typescript":"eslint typings/*.ts tests/*.ts","test":"jest && npm run test-typings","test-esm":"node ./tests/esm-imports-test.mjs","test-typings":"tsd","typescript-checkJS":"tsc --allowJS --checkJS index.js lib/*.js --noEmit","test-all":"npm run test && npm run lint && npm run typescript-checkJS && npm run test-esm"},"directories":{},"devDependencies":{"@types/jest":"^29.2.4","@types/node":"^20.2.5","@typescript-eslint/eslint-plugin":"^5.47.1","@typescript-eslint/parser":"^5.47.1","eslint":"^8.30.0","eslint-config-standard":"^17.0.0","eslint-config-standard-with-typescript":"^33.0.0","eslint-plugin-import":"^2.26.0","eslint-plugin-jest":"^27.1.7","eslint-plugin-n":"^15.6.0","eslint-plugin-promise":"^6.1.1","jest":"^29.3.1","ts-jest":"^29.0.3","tsd":"^0.28.1","typescript":"^5.0.4"},"engines":{"node":">=16"},"main":"./index.js","dist":{"shasum":"43e19c25dbedc8256203538e8d7e9346877a6f67","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-11.0.0.tgz"},"type":"commonjs","types":"typings/index.d.ts","jest":{"testEnvironment":"node","collectCoverage":true,"transform":{"^.+\\.tsx?$":"ts-jest"},"testPathIgnorePatterns":["/node_modules/"]},"support":true,"gitHead":"4ef19faac1564743d8c7e3ce89ef8d190e1551b4","_nodeVersion":"20.0.0","_npmVersion":"9.6.5","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_11.0.0_1686876680336_0.6453178874329064"},"_hasShrinkwrap":false},"11.1.0":{"_id":"commander@11.1.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"11.1.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"npm run lint:javascript && npm run lint:typescript","lint:javascript":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","lint:typescript":"eslint typings/*.ts tests/*.ts","test":"jest && npm run typecheck-ts","test-esm":"node ./tests/esm-imports-test.mjs","typecheck-ts":"tsd && tsc -p tsconfig.ts.json","typecheck-js":"tsc -p tsconfig.js.json","test-all":"npm run test && npm run lint && npm run typecheck-js && npm run test-esm"},"directories":{},"devDependencies":{"@types/jest":"^29.2.4","@types/node":"^20.2.5","@typescript-eslint/eslint-plugin":"^5.47.1","@typescript-eslint/parser":"^5.47.1","eslint":"^8.30.0","eslint-config-standard":"^17.0.0","eslint-config-standard-with-typescript":"^33.0.0","eslint-plugin-import":"^2.26.0","eslint-plugin-jest":"^27.1.7","eslint-plugin-n":"^15.6.0","eslint-plugin-promise":"^6.1.1","jest":"^29.3.1","ts-jest":"^29.0.3","tsd":"^0.28.1","typescript":"^5.0.4"},"engines":{"node":">=16"},"main":"./index.js","dist":{"shasum":"62fdce76006a68e5c1ab3314dc92e800eb83d906","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-11.1.0.tgz"},"type":"commonjs","types":"typings/index.d.ts","support":true,"gitHead":"f1ae2db8e2da01d6efcbfd59cbf82202f864b0c1","_nodeVersion":"20.4.0","_npmVersion":"9.7.2","_npmUser":{"name":"abetomo","email":"abe@enzou.tokyo"},"maintainers":[{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_11.1.0_1697156974546_0.4304863535469152"},"_hasShrinkwrap":false},"12.0.0-0":{"_id":"commander@12.0.0-0","name":"commander","description":"the complete solution for node.js command-line programs","version":"12.0.0-0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"npm run lint:javascript && npm run lint:typescript","lint:javascript":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","lint:typescript":"eslint typings/*.ts tests/*.ts","test":"jest && npm run typecheck-ts","test-esm":"node ./tests/esm-imports-test.mjs","typecheck-ts":"tsd && tsc -p tsconfig.ts.json","typecheck-js":"tsc -p tsconfig.js.json","test-all":"npm run test && npm run lint && npm run typecheck-js && npm run test-esm"},"directories":{},"devDependencies":{"@types/jest":"^29.2.4","@types/node":"^20.2.5","@typescript-eslint/eslint-plugin":"^6.7.5","@typescript-eslint/parser":"^6.7.5","eslint":"^8.30.0","eslint-config-standard":"^17.0.0","eslint-config-standard-with-typescript":"^39.1.1","eslint-plugin-import":"^2.26.0","eslint-plugin-jest":"^27.1.7","eslint-plugin-n":"^16.2.0","eslint-plugin-promise":"^6.1.1","jest":"^29.3.1","ts-jest":"^29.0.3","tsd":"^0.29.0","typescript":"^5.0.4"},"engines":{"node":">=18"},"main":"./index.js","dist":{"shasum":"5b82ae6a6d2433b4035bfc71157f76569840aca7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-12.0.0-0.tgz"},"readme":"# Commander.js\n\n[![Build Status](https://github.com/tj/commander.js/workflows/build/badge.svg)](https://github.com/tj/commander.js/actions?query=workflow%3A%22build%22)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces.\n\nRead this in other languages: English | [简体中文](./Readme_zh-CN.md)\n\n- [Commander.js](#commanderjs)\n  - [Installation](#installation)\n  - [Quick Start](#quick-start)\n  - [Declaring _program_ variable](#declaring-program-variable)\n  - [Options](#options)\n    - [Common option types, boolean and value](#common-option-types-boolean-and-value)\n    - [Default option value](#default-option-value)\n    - [Other option types, negatable boolean and boolean|value](#other-option-types-negatable-boolean-and-booleanvalue)\n    - [Required option](#required-option)\n    - [Variadic option](#variadic-option)\n    - [Version option](#version-option)\n    - [More configuration](#more-configuration)\n    - [Custom option processing](#custom-option-processing)\n  - [Commands](#commands)\n    - [Command-arguments](#command-arguments)\n      - [More configuration](#more-configuration-1)\n      - [Custom argument processing](#custom-argument-processing)\n    - [Action handler](#action-handler)\n    - [Stand-alone executable (sub)commands](#stand-alone-executable-subcommands)\n    - [Life cycle hooks](#life-cycle-hooks)\n  - [Automated help](#automated-help)\n    - [Custom help](#custom-help)\n    - [Display help after errors](#display-help-after-errors)\n    - [Display help from code](#display-help-from-code)\n    - [.name](#name)\n    - [.usage](#usage)\n    - [.description and .summary](#description-and-summary)\n    - [.helpOption(flags, description)](#helpoptionflags-description)\n    - [.addHelpCommand()](#addhelpcommand)\n    - [More configuration](#more-configuration-2)\n  - [Custom event listeners](#custom-event-listeners)\n  - [Bits and pieces](#bits-and-pieces)\n    - [.parse() and .parseAsync()](#parse-and-parseasync)\n    - [Parsing Configuration](#parsing-configuration)\n    - [Legacy options as properties](#legacy-options-as-properties)\n    - [TypeScript](#typescript)\n    - [createCommand()](#createcommand)\n    - [Node options such as `--harmony`](#node-options-such-as---harmony)\n    - [Debugging stand-alone executable subcommands](#debugging-stand-alone-executable-subcommands)\n    - [npm run-script](#npm-run-script)\n    - [Display error](#display-error)\n    - [Override exit and output handling](#override-exit-and-output-handling)\n    - [Additional documentation](#additional-documentation)\n  - [Support](#support)\n    - [Commander for enterprise](#commander-for-enterprise)\n\nFor information about terms used in this document see: [terminology](./docs/terminology.md)\n\n## Installation\n\n```sh\nnpm install commander\n```\n\n## Quick Start\n\nYou write code to describe your command line interface.\nCommander looks after parsing the arguments into options and command-arguments,\ndisplays usage errors for problems, and implements a help system.\n\nCommander is strict and displays an error for unrecognised options.\nThe two most used option types are a boolean option, and an option which takes its value from the following argument.\n\nExample file: [split.js](./examples/split.js)\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .option('--first')\n  .option('-s, --separator <char>');\n\nprogram.parse();\n\nconst options = program.opts();\nconst limit = options.first ? 1 : undefined;\nconsole.log(program.args[0].split(options.separator, limit));\n```\n\n```console\n$ node split.js -s / --fits a/b/c\nerror: unknown option '--fits'\n(Did you mean --first?)\n$ node split.js -s / --first a/b/c\n[ 'a' ]\n```\n\nHere is a more complete program using a subcommand and with descriptions for the help. In a multi-command program, you have an action handler for each command (or stand-alone executables for the commands).\n\nExample file: [string-util.js](./examples/string-util.js)\n\n```js\nconst { Command } = require('commander');\nconst program = new Command();\n\nprogram\n  .name('string-util')\n  .description('CLI to some JavaScript string utilities')\n  .version('0.8.0');\n\nprogram.command('split')\n  .description('Split a string into substrings and display as an array')\n  .argument('<string>', 'string to split')\n  .option('--first', 'display just the first substring')\n  .option('-s, --separator <char>', 'separator character', ',')\n  .action((str, options) => {\n    const limit = options.first ? 1 : undefined;\n    console.log(str.split(options.separator, limit));\n  });\n\nprogram.parse();\n```\n\n```console\n$ node string-util.js help split\nUsage: string-util split [options] <string>\n\nSplit a string into substrings and display as an array.\n\nArguments:\n  string                  string to split\n\nOptions:\n  --first                 display just the first substring\n  -s, --separator <char>  separator character (default: \",\")\n  -h, --help              display help for command\n\n$ node string-util.js split --separator=/ a/b/c\n[ 'a', 'b', 'c' ]\n```\n\nMore samples can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\n// CommonJS (.cjs)\nconst { program } = require('commander');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n```js\n// CommonJS (.cjs)\nconst { Command } = require('commander');\nconst program = new Command();\n```\n\n```js\n// ECMAScript (.mjs)\nimport { Command } from 'commander';\nconst program = new Command();\n```\n\n```ts\n// TypeScript (.ts)\nimport { Command } from 'commander';\nconst program = new Command();\n```\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space or vertical bar ('|').\n\nThe parsed options can be accessed by calling `.opts()` on a `Command` object, and are passed to the action handler.\n\nMulti-word options such as \"--template-engine\" are camel-cased, becoming `program.opts().templateEngine` etc.\n\nAn option and its option-argument can be separated by a space, or combined into the same argument. The option-argument can follow the short option directly or follow an `=` for a long option.\n\n```sh\nserve -p 80\nserve -p80\nserve --port 80\nserve --port=80\n```\n\nYou can use `--` to indicate the end of the options, and any remaining arguments will be used without being interpreted.\n\nBy default, options on the command line are not positional, and can be specified before or after other arguments.\n\nThere are additional related routines for when `.opts()` is not enough:\n\n- `.optsWithGlobals()` returns merged local and global option values\n- `.getOptionValue()` and `.setOptionValue()` work with a single option value\n- `.getOptionValueSource()` and `.setOptionValueWithSource()` include where the option value came from\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean option, and an option which takes its value\nfrom the following argument (declared with angle brackets like `--expect <value>`). Both are `undefined` unless specified on command line.\n\nExample file: [options-common.js](./examples/options-common.js)\n\n```js\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.debug) console.log(options);\nconsole.log('pizza details:');\nif (options.small) console.log('- small pizza size');\nif (options.pizzaType) console.log(`- ${options.pizzaType}`);\n```\n\n```console\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -d -s -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\nMultiple boolean short options may be combined following the dash, and may be followed by a single short option taking a value.\nFor example `-d -s -p cheese` may be written as `-ds -p cheese` or even `-dsp cheese`.\n\nOptions with an expected option-argument are greedy and will consume the following argument whatever the value.\nSo `--id -xyz` reads `-xyz` as the option-argument.\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the program options in the `program.args` array. The parameter is optional and defaults to `process.argv`.\n\n### Default option value\n\nYou can specify a default value for an option.\n\nExample file: [options-defaults.js](./examples/options-defaults.js)\n\n```js\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse();\n\nconsole.log(`cheese: ${program.opts().cheese}`);\n```\n\n```console\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and boolean|value\n\nYou can define a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be.\n\nExample file: [options-negatable.js](./examples/options-negatable.js)\n\n```js\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse();\n\nconst options = program.opts();\nconst sauceStr = options.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (options.cheese === false) ? 'no cheese' : `${options.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```console\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which may be used as a boolean option but may optionally take an option-argument\n(declared with square brackets like `--optional [value]`).\n\nExample file: [options-boolean-or-value.js](./examples/options-boolean-or-value.js)\n\n```js\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.cheese === undefined) console.log('no cheese');\nelse if (options.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${options.cheese}`);\n```\n\n```console\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\nOptions with an optional option-argument are not greedy and will ignore arguments starting with a dash.\nSo `id` behaves as a boolean option for `--id -5`, but you can use a combined form if needed like `--id=-5`.\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-in-depth.md).\n\n### Required option\n\nYou may specify a required (mandatory) option using `.requiredOption()`. The option must have a value after parsing, usually specified on the command line, or perhaps from a default value (say from environment). The method is otherwise the same as `.option()` in format, taking flags and description, and optional default value or custom processing.\n\nExample file: [options-required.js](./examples/options-required.js)\n\n```js\nprogram\n  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse();\n```\n\n```console\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n```\n\n### Variadic option\n\nYou may make an option variadic by appending `...` to the value placeholder when declaring the option. On the command line you\ncan then specify multiple option-arguments, and the parsed option value will be an array. The extra arguments\nare read until the first argument starting with a dash. The special argument `--` stops option processing entirely. If a value\nis specified in the same argument as the option then no further values are read.\n\nExample file: [options-variadic.js](./examples/options-variadic.js)\n\n```js\nprogram\n  .option('-n, --number <numbers...>', 'specify numbers')\n  .option('-l, --letter [letters...]', 'specify letters');\n\nprogram.parse();\n\nconsole.log('Options: ', program.opts());\nconsole.log('Remaining arguments: ', program.args);\n```\n\n```console\n$ collect -n 1 2 3 --letter a b c\nOptions:  { number: [ '1', '2', '3' ], letter: [ 'a', 'b', 'c' ] }\nRemaining arguments:  []\n$ collect --letter=A -n80 operand\nOptions:  { number: [ '80' ], letter: [ 'A' ] }\nRemaining arguments:  [ 'operand' ]\n$ collect --letter -n 1 -n 2 3 -- operand\nOptions:  { number: [ '1', '2', '3' ], letter: true }\nRemaining arguments:  [ 'operand' ]\n```\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-in-depth.md).\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```console\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n### More configuration\n\nYou can add most options using the `.option()` method, but there are some additional features available\nby constructing an `Option` explicitly for less common cases.\n\nExample files: [options-extra.js](./examples/options-extra.js), [options-env.js](./examples/options-env.js), [options-conflicts.js](./examples/options-conflicts.js), [options-implies.js](./examples/options-implies.js)\n\n```js\nprogram\n  .addOption(new Option('-s, --secret').hideHelp())\n  .addOption(new Option('-t, --timeout <delay>', 'timeout in seconds').default(60, 'one minute'))\n  .addOption(new Option('-d, --drink <size>', 'drink size').choices(['small', 'medium', 'large']))\n  .addOption(new Option('-p, --port <number>', 'port number').env('PORT'))\n  .addOption(new Option('--donate [amount]', 'optional donation in dollars').preset('20').argParser(parseFloat))\n  .addOption(new Option('--disable-server', 'disables the server').conflicts('port'))\n  .addOption(new Option('--free-drink', 'small drink included free ').implies({ drink: 'small' }));\n```\n\n```console\n$ extra --help\nUsage: help [options]\n\nOptions:\n  -t, --timeout <delay>  timeout in seconds (default: one minute)\n  -d, --drink <size>     drink cup size (choices: \"small\", \"medium\", \"large\")\n  -p, --port <number>    port number (env: PORT)\n  --donate [amount]      optional donation in dollars (preset: \"20\")\n  --disable-server       disables the server\n  --free-drink           small drink included free\n  -h, --help             display help for command\n\n$ extra --drink huge\nerror: option '-d, --drink <size>' argument 'huge' is invalid. Allowed choices are small, medium, large.\n\n$ PORT=80 extra --donate --free-drink\nOptions:  { timeout: 60, donate: 20, port: '80', freeDrink: true, drink: 'small' }\n\n$ extra --disable-server --port 8000\nerror: option '--disable-server' cannot be used with option '-p, --port <number>'\n```\n\nSpecify a required (mandatory) option using the `Option` method `.makeOptionMandatory()`. This matches the `Command` method [.requiredOption()](#required-option).\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option-arguments. The callback function receives two parameters,\nthe user specified option-argument and the previous value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option-argument to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function parameter.\n\nExample file: [options-custom-processing.js](./examples/options-custom-processing.js)\n\n```js\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and a radix\n  const parsedValue = parseInt(value, 10);\n  if (isNaN(parsedValue)) {\n    throw new commander.InvalidArgumentError('Not a number.');\n  }\n  return parsedValue;\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse();\n\nconst options = program.opts();\nif (options.float !== undefined) console.log(`float: ${options.float}`);\nif (options.integer !== undefined) console.log(`integer: ${options.integer}`);\nif (options.verbose > 0) console.log(`verbosity: ${options.verbose}`);\nif (options.collect.length > 0) console.log(options.collect);\nif (options.list !== undefined) console.log(options.list);\n```\n\n```console\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n## Commands\n\nYou can specify (sub)commands using `.command()` or `.addCommand()`. There are two ways these can be implemented: using an action handler attached to the command, or as a stand-alone executable file (described in more detail later). The subcommands may be nested ([example](./examples/nestedCommands.js)).\n\nIn the first parameter to `.command()` you specify the command name. You may append the command-arguments after the command name, or specify them separately using `.argument()`. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nYou can use `.addCommand()` to add an already configured subcommand to the program.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using stand-alone executable file, indicated by adding description as second parameter to `.command`.\n// Returns `this` for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n\n// Command prepared separately.\n// Returns `this` for adding more commands.\nprogram\n  .addCommand(build.makeBuildCommand());\n```\n\nConfiguration options can be passed with the call to `.command()` and `.addCommand()`. Specifying `hidden: true` will\nremove the command from the generated help output. Specifying `isDefault: true` will run the subcommand if no other\nsubcommand is specified ([example](./examples/defaultCommand.js)).\n\nYou can add alternative names for a command with `.alias()`. ([example](./examples/alias.js))\n\n`.command()` automatically copies the inherited settings from the parent command to the newly created subcommand. This is only done during creation, any later setting changes to the parent are not inherited.\n\nFor safety, `.addCommand()` does not automatically copy the inherited settings from the parent command. There is a helper routine `.copyInheritedSettings()` for copying the settings when they are wanted.\n\n### Command-arguments\n\nFor subcommands, you can specify the argument syntax in the call to `.command()` (as shown above). This\nis the only method usable for subcommands implemented using a stand-alone executable, but for other subcommands\nyou can instead use the following method.\n\nTo configure a command, you can use `.argument()` to specify each expected command-argument.\nYou supply the argument name and an optional description. The argument may be `<required>` or `[optional]`.\nYou can specify a default value for an optional command-argument.\n\nExample file: [argument.js](./examples/argument.js)\n\n```js\nprogram\n  .version('0.1.0')\n  .argument('<username>', 'user to login')\n  .argument('[password]', 'password for user, if required', 'no password given')\n  .action((username, password) => {\n    console.log('username:', username);\n    console.log('password:', password);\n  });\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. A variadic argument is passed to the action handler as an array. For example:\n\n```js\nprogram\n  .version('0.1.0')\n  .command('rmdir')\n  .argument('<dirs...>')\n  .action(function (dirs) {\n    dirs.forEach((dir) => {\n      console.log('rmdir %s', dir);\n    });\n  });\n```\n\nThere is a convenience method to add multiple arguments at once, but without descriptions:\n\n```js\nprogram\n  .arguments('<username> <password>');\n```\n\n#### More configuration\n\nThere are some additional features available by constructing an `Argument` explicitly for less common cases.\n\nExample file: [arguments-extra.js](./examples/arguments-extra.js)\n\n```js\nprogram\n  .addArgument(new commander.Argument('<drink-size>', 'drink cup size').choices(['small', 'medium', 'large']))\n  .addArgument(new commander.Argument('[timeout]', 'timeout in seconds').default(60, 'one minute'))\n```\n\n#### Custom argument processing\n\nYou may specify a function to do custom processing of command-arguments (like for option-arguments).\nThe callback function receives two parameters, the user specified command-argument and the previous value for the argument.\nIt returns the new value for the argument.\n\nThe processed argument values are passed to the action handler, and saved as `.processedArgs`.\n\nYou can optionally specify the default/starting value for the argument after the function parameter.\n\nExample file: [arguments-custom-processing.js](./examples/arguments-custom-processing.js)\n\n```js\nprogram\n  .command('add')\n  .argument('<first>', 'integer argument', myParseInt)\n  .argument('[second]', 'integer argument', myParseInt, 1000)\n  .action((first, second) => {\n    console.log(`${first} + ${second} = ${first + second}`);\n  })\n;\n```\n\n### Action handler\n\nThe action handler gets passed a parameter for each command-argument you declared, and two additional parameters\nwhich are the parsed options and the command object itself.\n\nExample file: [thank.js](./examples/thank.js)\n\n```js\nprogram\n  .argument('<name>')\n  .option('-t, --title <honorific>', 'title to use before name')\n  .option('-d, --debug', 'display some debugging')\n  .action((name, options, command) => {\n    if (options.debug) {\n      console.error('Called %s with options %o', command.name(), options);\n    }\n    const title = options.title ? `${options.title} ` : '';\n    console.log(`Thank-you ${title}${name}`);\n  });\n```\n\nIf you prefer, you can work with the command directly and skip declaring the parameters for the action handler. The `this` keyword is set to the running command and can be used from a function expression (but not from an arrow function).\n\nExample file: [action-this.js](./examples/action-this.js)\n\n```js\nprogram\n  .command('serve')\n  .argument('<script>')\n  .option('-p, --port <number>', 'port number', 80)\n  .action(function() {\n    console.error('Run script %s on port %s', this.args[0], this.opts().port);\n  });\n```\n\nYou may supply an `async` action handler, in which case you call `.parseAsync` rather than `.parse`.\n\n```js\nasync function run() { /* code goes here */ }\n\nasync function main() {\n  program\n    .command('run')\n    .action(run);\n  await program.parseAsync(process.argv);\n}\n```\n\nA command's options and arguments on the command line are validated when the command is used. Any unknown options or missing arguments will be reported as an error. You can suppress the unknown option checks with `.allowUnknownOption()`. By default, it is not an error to\npass more arguments than declared, but you can make this an error with `.allowExcessArguments(false)`.\n\n### Stand-alone executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells Commander that you're going to use stand-alone executables for subcommands.\nCommander will search the files in the directory of the entry script for a file with the name combination `command-subcommand`, like `pm-install` or `pm-search` in the example below. The search includes trying common file extensions, like `.js`.\nYou may specify a custom name (and path) with the `executableFile` configuration option.\nYou may specify a custom search directory for subcommands with `.executableDir()`.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\nExample file: [pm](./examples/pm)\n\n```js\nprogram\n  .name('pm')\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', { executableFile: 'myUpdateSubCommand' })\n  .command('list', 'list packages installed', { isDefault: true });\n\nprogram.parse(process.argv);\n```\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n### Life cycle hooks\n\nYou can add callback hooks to a command for life cycle events.\n\nExample file: [hook.js](./examples/hook.js)\n\n```js\nprogram\n  .option('-t, --trace', 'display trace statements for commands')\n  .hook('preAction', (thisCommand, actionCommand) => {\n    if (thisCommand.opts().trace) {\n      console.log(`About to call action handler for subcommand: ${actionCommand.name()}`);\n      console.log('arguments: %O', actionCommand.args);\n      console.log('options: %o', actionCommand.opts());\n    }\n  });\n```\n\nThe callback hook can be `async`, in which case you call `.parseAsync` rather than `.parse`. You can add multiple hooks per event.\n\nThe supported events are:\n\n| event name | when hook called | callback parameters |\n| :-- | :-- | :-- |\n| `preAction`, `postAction` |  before/after action handler for this command and its nested subcommands |   `(thisCommand, actionCommand)` |\n| `preSubcommand` | before parsing direct subcommand  | `(thisCommand, subcommand)` |\n\nFor an overview of the life cycle events see [parsing life cycle and hooks](./docs/parsing-and-hooks.md).\n\n## Automated help\n\nThe help information is auto-generated based on the information commander already knows about your program. The default\nhelp option is `-h,--help`.\n\nExample file: [pizza](./examples/pizza)\n\n```console\n$ node ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizza ordering\n\nOptions:\n  -p, --peppers        Add peppers\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           display help for command\n```\n\nA `help` command is added by default if your command has subcommands. It can be used alone, or with a subcommand name to show\nfurther help for the subcommand. These are effectively the same if the `shell` program has implicit help:\n\n```sh\nshell help\nshell --help\n\nshell help spawn\nshell spawn --help\n```\n\nLong descriptions are wrapped to fit the available width. (However, a description that includes a line-break followed by whitespace is assumed to be pre-formatted and not wrapped.)\n\n### Custom help\n\nYou can add extra text to be displayed along with the built-in help.\n\nExample file: [custom-help](./examples/custom-help)\n\n```js\nprogram\n  .option('-f, --foo', 'enable some foo');\n\nprogram.addHelpText('after', `\n\nExample call:\n  $ custom-help --help`);\n```\n\nYields the following help output:\n\n```Text\nUsage: custom-help [options]\n\nOptions:\n  -f, --foo   enable some foo\n  -h, --help  display help for command\n\nExample call:\n  $ custom-help --help\n```\n\nThe positions in order displayed are:\n\n- `beforeAll`: add to the program for a global banner or header\n- `before`: display extra information before built-in help\n- `after`: display extra information after built-in help\n- `afterAll`: add to the program for a global footer (epilog)\n\nThe positions \"beforeAll\" and \"afterAll\" apply to the command and all its subcommands.\n\nThe second parameter can be a string, or a function returning a string. The function is passed a context object for your convenience. The properties are:\n\n- error: a boolean for whether the help is being displayed due to a usage error\n- command: the Command which is displaying the help\n\n### Display help after errors\n\nThe default behaviour for usage errors is to just display a short error message.\nYou can change the behaviour to show the full help or a custom help message after an error.\n\n```js\nprogram.showHelpAfterError();\n// or\nprogram.showHelpAfterError('(add --help for additional information)');\n```\n\n```console\n$ pizza --unknown\nerror: unknown option '--unknown'\n(add --help for additional information)\n```\n\nThe default behaviour is to suggest correct spelling after an error for an unknown command or option. You\ncan disable this.\n\n```js\nprogram.showSuggestionAfterError(false);\n```\n\n```console\n$ pizza --hepl\nerror: unknown option '--hepl'\n(Did you mean --help?)\n```\n\n### Display help from code\n\n`.help()`: display help information and exit immediately. You can optionally pass `{ error: true }` to display on stderr and exit with an error status.\n\n`.outputHelp()`: output help information without exiting. You can optionally pass `{ error: true }` to display on stderr.\n\n`.helpInformation()`: get the built-in command help information as a string for processing or displaying yourself.\n\n### .name\n\nThe command name appears in the help, and is also used for locating stand-alone executable subcommands.\n\nYou may specify the program name using `.name()` or in the Command constructor. For the program, Commander will\nfall back to using the script name from the full arguments passed into `.parse()`. However, the script name varies\ndepending on how your program is launched, so you may wish to specify it explicitly.\n\n```js\nprogram.name('pizza');\nconst pm = new Command('pm');\n```\n\nSubcommands get a name when specified using `.command()`. If you create the subcommand yourself to use with `.addCommand()`,\nthen set the name using `.name()` or in the Command constructor.\n\n### .usage\n\nThis allows you to customise the usage description in the first line of the help. Given:\n\n```js\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n```\n\nThe help will start with:\n\n```Text\nUsage: my-command [global options] command\n```\n\n### .description and .summary\n\nThe description appears in the help for the command. You can optionally supply a shorter\nsummary to use when listed as a subcommand of the program.\n\n```js\nprogram\n  .command(\"duplicate\")\n  .summary(\"make a copy\")\n  .description(`Make a copy of the current project.\nThis may require additional disk space.\n  `);\n```\n\n### .helpOption(flags, description)\n\nBy default, every command has a help option. You may change the default help flags and description. Pass false to disable the built-in help option.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n### .addHelpCommand()\n\nA help command is added by default if your command has subcommands. You can explicitly turn on or off the implicit help command with `.addHelpCommand()` and `.addHelpCommand(false)`.\n\nYou can both turn on and customise the help command by supplying the name and description:\n\n```js\nprogram.addHelpCommand('assist [command]', 'show assistance');\n```\n\n### More configuration\n\nThe built-in help is formatted using the Help class.\nYou can configure the Help behaviour by modifying data properties and methods using `.configureHelp()`, or by subclassing using `.createHelp()` if you prefer.\n\nThe data properties are:\n\n- `helpWidth`: specify the wrap width, useful for unit tests\n- `sortSubcommands`: sort the subcommands alphabetically\n- `sortOptions`: sort the options alphabetically\n- `showGlobalOptions`: show a section with the global options from the parent command(s)\n\nYou can override any method on the [Help](./lib/help.js) class. There are methods getting the visible lists of arguments, options, and subcommands. There are methods for formatting the items in the lists, with each item having a _term_ and _description_. Take a look at `.formatHelp()` to see how they are used.\n\nExample file: [configure-help.js](./examples/configure-help.js)\n\n```js\nprogram.configureHelp({\n  sortSubcommands: true,\n  subcommandTerm: (cmd) => cmd.name() // Just show the name, instead of short usage.\n});\n```\n\n## Custom event listeners\n\nYou can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.opts().verbose;\n});\n```\n\n## Bits and pieces\n\n### .parse() and .parseAsync()\n\nThe first argument to `.parse` is the array of strings to parse. You may omit the parameter to implicitly use `process.argv`.\n\nIf the arguments follow different conventions than node you can pass a `from` option in the second parameter:\n\n- 'node': default, `argv[0]` is the application and `argv[1]` is the script being run, with user parameters after that\n- 'electron': `argv[1]` varies depending on whether the electron application is packaged\n- 'user': all of the arguments from the user\n\nFor example:\n\n```js\nprogram.parse(process.argv); // Explicit, node conventions\nprogram.parse(); // Implicit, and auto-detect electron\nprogram.parse(['-f', 'filename'], { from: 'user' });\n```\n\nIf you want to parse multiple times, create a new program each time. Calling parse does not clear out any previous state.\n\n### Parsing Configuration\n\nIf the default parsing does not suit your needs, there are some behaviours to support other usage patterns.\n\nBy default, program options are recognised before and after subcommands. To only look for program options before subcommands, use `.enablePositionalOptions()`. This lets you use\nan option for a different purpose in subcommands.\n\nExample file: [positional-options.js](./examples/positional-options.js)\n\nWith positional options, the `-b` is a program option in the first line and a subcommand option in the second line:\n\n```sh\nprogram -b subcommand\nprogram subcommand -b\n```\n\nBy default, options are recognised before and after command-arguments. To only process options that come\nbefore the command-arguments, use `.passThroughOptions()`. This lets you pass the arguments and following options through to another program\nwithout needing to use `--` to end the option processing.\nTo use pass through options in a subcommand, the program needs to enable positional options.\n\nExample file: [pass-through-options.js](./examples/pass-through-options.js)\n\nWith pass through options, the `--port=80` is a program option in the first line and passed through as a command-argument in the second line:\n\n```sh\nprogram --port=80 arg\nprogram arg --port=80\n```\n\nBy default, the option processing shows an error for an unknown option. To have an unknown option treated as an ordinary command-argument and continue looking for options, use `.allowUnknownOption()`. This lets you mix known and unknown options.\n\nBy default, the argument processing does not display an error for more command-arguments than expected.\nTo display an error for excess arguments, use`.allowExcessArguments(false)`.\n\n### Legacy options as properties\n\nBefore Commander 7, the option values were stored as properties on the command.\nThis was convenient to code, but the downside was possible clashes with\nexisting properties of `Command`. You can revert to the old behaviour to run unmodified legacy code by using `.storeOptionsAsProperties()`.\n\n```js\nprogram\n  .storeOptionsAsProperties()\n  .option('-d, --debug')\n  .action((commandAndOptions) => {\n    if (commandAndOptions.debug) {\n      console.error(`Called ${commandAndOptions.name()}`);\n    }\n  });\n```\n\n### TypeScript\n\nextra-typings: There is an optional project to infer extra type information from the option and argument definitions.\nThis adds strong typing to the options returned by `.opts()` and the parameters to `.action()`.\nSee [commander-js/extra-typings](https://github.com/commander-js/extra-typings) for more.\n\n```\nimport { Command } from '@commander-js/extra-typings';\n```\n\nts-node: If you use `ts-node` and stand-alone executable subcommands written as `.ts` files, you need to call your program through node to get the subcommands called correctly. e.g.\n\n```sh\nnode -r ts-node/register pm.ts\n```\n\n### createCommand()\n\nThis factory function creates a new command. It is exported and may be used instead of using `new`, like:\n\n```js\nconst { createCommand } = require('commander');\nconst program = createCommand();\n```\n\n`createCommand` is also a method of the Command object, and creates a new command rather than a subcommand. This gets used internally\nwhen creating subcommands using `.command()`, and you may override it to\ncustomise the new subcommand (example file [custom-command-class.js](./examples/custom-command-class.js)).\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n\n- Use `#! /usr/bin/env node --harmony` in the subcommands scripts. (Note Windows does not support this pattern.)\n- Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning subcommand process.\n\n### Debugging stand-alone executable subcommands\n\nAn executable subcommand is launched as a separate child process.\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) executable subcommands using `node --inspect` et al.,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\nIf you are using VSCode to debug executable subcommands you need to set the `\"autoAttachChildProcesses\": true` flag in your launch.json configuration.\n\n### npm run-script\n\nBy default, when you call your program using run-script, `npm` will parse any options on the command-line and they will not reach your program. Use\n `--` to stop the npm option parsing and pass through all the arguments.\n\n The synopsis for [npm run-script](https://docs.npmjs.com/cli/v9/commands/npm-run-script) explicitly shows the `--` for this reason:\n\n```console\nnpm run-script <command> [-- <args>]\n```\n\n### Display error\n\nThis routine is available to invoke the Commander error handling for your own error conditions. (See also the next section about exit handling.)\n\nAs well as the error message, you can optionally specify the `exitCode` (used with `process.exit`)\nand `code` (used with `CommanderError`).\n\n```js\nprogram.error('Password must be longer than four characters');\nprogram.error('Custom processing has failed', { exitCode: 2, code: 'my.custom.error' });\n```\n\n### Override exit and output handling\n\nBy default, Commander calls `process.exit` when it detects errors, or after displaying the help or version. You can override\nthis behaviour and optionally supply a callback. The default override throws a `CommanderError`.\n\nThe override callback is passed a `CommanderError` with properties `exitCode` number, `code` string, and `message`. The default override behaviour is to throw the error, except for async handling of executable subcommand completion which carries on. The normal display of error messages or version or help\nis not affected by the override which is called after the display.\n\n```js\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // custom processing...\n}\n```\n\nBy default, Commander is configured for a command-line application and writes to stdout and stderr.\nYou can modify this behaviour for custom applications. In addition, you can modify the display of error messages.\n\nExample file: [configure-output.js](./examples/configure-output.js)\n\n```js\nfunction errorColor(str) {\n  // Add ANSI escape codes to display text in red.\n  return `\\x1b[31m${str}\\x1b[0m`;\n}\n\nprogram\n  .configureOutput({\n    // Visibly override write routines as example!\n    writeOut: (str) => process.stdout.write(`[OUT] ${str}`),\n    writeErr: (str) => process.stdout.write(`[ERR] ${str}`),\n    // Highlight errors in color.\n    outputError: (str, write) => write(errorColor(str))\n  });\n```\n\n### Additional documentation\n\nThere is more information available about:\n\n- [deprecated](./docs/deprecated.md) features still supported for backwards compatibility\n- [options taking varying arguments](./docs/options-in-depth.md)\n- [parsing life cycle and hooks](./docs/parsing-and-hooks.md)\n\n## Support\n\nThe current version of Commander is fully supported on Long Term Support versions of Node.js, and requires at least v18.\n(For older versions of Node.js, use an older version of Commander.)\n\nThe main forum for free and community support is the project [Issues](https://github.com/tj/commander.js/issues) on GitHub.\n\n### Commander for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of Commander and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-commander?utm_source=npm-commander&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n","type":"commonjs","types":"typings/index.d.ts","support":true,"readmeFilename":"Readme.md","gitHead":"18f921d9778ebd1578ad98aba9b873f51786fbe4","_nodeVersion":"20.9.0","_npmVersion":"10.1.0","_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"maintainers":[{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_12.0.0-0_1699681366534_0.7397661235491186"},"_hasShrinkwrap":false},"12.0.0-1":{"_id":"commander@12.0.0-1","name":"commander","description":"the complete solution for node.js command-line programs","version":"12.0.0-1","keywords":["commander","command","option","parser","cli","argument","args","argv"],"homepage":"https://github.com/tj/commander.js#readme","author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"bugs":{"url":"https://github.com/tj/commander.js/issues"},"license":"MIT","scripts":{"lint":"npm run lint:javascript && npm run lint:typescript","lint:javascript":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","lint:typescript":"eslint typings/*.ts tests/*.ts","test":"jest && npm run typecheck-ts","test-esm":"node ./tests/esm-imports-test.mjs","typecheck-ts":"tsd && tsc -p tsconfig.ts.json","typecheck-js":"tsc -p tsconfig.js.json","test-all":"npm run test && npm run lint && npm run typecheck-js && npm run test-esm"},"directories":{},"devDependencies":{"@types/jest":"^29.2.4","@types/node":"^20.2.5","@typescript-eslint/eslint-plugin":"^6.7.5","@typescript-eslint/parser":"^6.7.5","eslint":"^8.30.0","eslint-config-standard":"^17.0.0","eslint-config-standard-with-typescript":"^40.0.0","eslint-plugin-import":"^2.26.0","eslint-plugin-jest":"^27.1.7","eslint-plugin-n":"^16.2.0","eslint-plugin-promise":"^6.1.1","jest":"^29.3.1","ts-jest":"^29.0.3","tsd":"^0.29.0","typescript":"^5.0.4"},"engines":{"node":">=18"},"main":"./index.js","dist":{"shasum":"8f23171fad23c9238e8e3ec014eb589efdf172c1","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-12.0.0-1.tgz"},"readme":"# Commander.js\n\n[![Build Status](https://github.com/tj/commander.js/workflows/build/badge.svg)](https://github.com/tj/commander.js/actions?query=workflow%3A%22build%22)\n[![NPM Version](http://img.shields.io/npm/v/commander.svg?style=flat)](https://www.npmjs.org/package/commander)\n[![NPM Downloads](https://img.shields.io/npm/dm/commander.svg?style=flat)](https://npmcharts.com/compare/commander?minimal=true)\n[![Install Size](https://packagephobia.now.sh/badge?p=commander)](https://packagephobia.now.sh/result?p=commander)\n\nThe complete solution for [node.js](http://nodejs.org) command-line interfaces.\n\nRead this in other languages: English | [简体中文](./Readme_zh-CN.md)\n\n- [Commander.js](#commanderjs)\n  - [Installation](#installation)\n  - [Quick Start](#quick-start)\n  - [Declaring _program_ variable](#declaring-program-variable)\n  - [Options](#options)\n    - [Common option types, boolean and value](#common-option-types-boolean-and-value)\n    - [Default option value](#default-option-value)\n    - [Other option types, negatable boolean and boolean|value](#other-option-types-negatable-boolean-and-booleanvalue)\n    - [Required option](#required-option)\n    - [Variadic option](#variadic-option)\n    - [Version option](#version-option)\n    - [More configuration](#more-configuration)\n    - [Custom option processing](#custom-option-processing)\n  - [Commands](#commands)\n    - [Command-arguments](#command-arguments)\n      - [More configuration](#more-configuration-1)\n      - [Custom argument processing](#custom-argument-processing)\n    - [Action handler](#action-handler)\n    - [Stand-alone executable (sub)commands](#stand-alone-executable-subcommands)\n    - [Life cycle hooks](#life-cycle-hooks)\n  - [Automated help](#automated-help)\n    - [Custom help](#custom-help)\n    - [Display help after errors](#display-help-after-errors)\n    - [Display help from code](#display-help-from-code)\n    - [.name](#name)\n    - [.usage](#usage)\n    - [.description and .summary](#description-and-summary)\n    - [.helpOption(flags, description)](#helpoptionflags-description)\n    - [.helpCommand()](#helpcommand)\n    - [More configuration](#more-configuration-2)\n  - [Custom event listeners](#custom-event-listeners)\n  - [Bits and pieces](#bits-and-pieces)\n    - [.parse() and .parseAsync()](#parse-and-parseasync)\n    - [Parsing Configuration](#parsing-configuration)\n    - [Legacy options as properties](#legacy-options-as-properties)\n    - [TypeScript](#typescript)\n    - [createCommand()](#createcommand)\n    - [Node options such as `--harmony`](#node-options-such-as---harmony)\n    - [Debugging stand-alone executable subcommands](#debugging-stand-alone-executable-subcommands)\n    - [npm run-script](#npm-run-script)\n    - [Display error](#display-error)\n    - [Override exit and output handling](#override-exit-and-output-handling)\n    - [Additional documentation](#additional-documentation)\n  - [Support](#support)\n    - [Commander for enterprise](#commander-for-enterprise)\n\nFor information about terms used in this document see: [terminology](./docs/terminology.md)\n\n## Installation\n\n```sh\nnpm install commander\n```\n\n## Quick Start\n\nYou write code to describe your command line interface.\nCommander looks after parsing the arguments into options and command-arguments,\ndisplays usage errors for problems, and implements a help system.\n\nCommander is strict and displays an error for unrecognised options.\nThe two most used option types are a boolean option, and an option which takes its value from the following argument.\n\nExample file: [split.js](./examples/split.js)\n\n```js\nconst { program } = require('commander');\n\nprogram\n  .option('--first')\n  .option('-s, --separator <char>');\n\nprogram.parse();\n\nconst options = program.opts();\nconst limit = options.first ? 1 : undefined;\nconsole.log(program.args[0].split(options.separator, limit));\n```\n\n```console\n$ node split.js -s / --fits a/b/c\nerror: unknown option '--fits'\n(Did you mean --first?)\n$ node split.js -s / --first a/b/c\n[ 'a' ]\n```\n\nHere is a more complete program using a subcommand and with descriptions for the help. In a multi-command program, you have an action handler for each command (or stand-alone executables for the commands).\n\nExample file: [string-util.js](./examples/string-util.js)\n\n```js\nconst { Command } = require('commander');\nconst program = new Command();\n\nprogram\n  .name('string-util')\n  .description('CLI to some JavaScript string utilities')\n  .version('0.8.0');\n\nprogram.command('split')\n  .description('Split a string into substrings and display as an array')\n  .argument('<string>', 'string to split')\n  .option('--first', 'display just the first substring')\n  .option('-s, --separator <char>', 'separator character', ',')\n  .action((str, options) => {\n    const limit = options.first ? 1 : undefined;\n    console.log(str.split(options.separator, limit));\n  });\n\nprogram.parse();\n```\n\n```console\n$ node string-util.js help split\nUsage: string-util split [options] <string>\n\nSplit a string into substrings and display as an array.\n\nArguments:\n  string                  string to split\n\nOptions:\n  --first                 display just the first substring\n  -s, --separator <char>  separator character (default: \",\")\n  -h, --help              display help for command\n\n$ node string-util.js split --separator=/ a/b/c\n[ 'a', 'b', 'c' ]\n```\n\nMore samples can be found in the [examples](https://github.com/tj/commander.js/tree/master/examples) directory.\n\n## Declaring _program_ variable\n\nCommander exports a global object which is convenient for quick programs.\nThis is used in the examples in this README for brevity.\n\n```js\n// CommonJS (.cjs)\nconst { program } = require('commander');\n```\n\nFor larger programs which may use commander in multiple ways, including unit testing, it is better to create a local Command object to use.\n\n```js\n// CommonJS (.cjs)\nconst { Command } = require('commander');\nconst program = new Command();\n```\n\n```js\n// ECMAScript (.mjs)\nimport { Command } from 'commander';\nconst program = new Command();\n```\n\n```ts\n// TypeScript (.ts)\nimport { Command } from 'commander';\nconst program = new Command();\n```\n\n## Options\n\nOptions are defined with the `.option()` method, also serving as documentation for the options. Each option can have a short flag (single character) and a long name, separated by a comma or space or vertical bar ('|').\n\nThe parsed options can be accessed by calling `.opts()` on a `Command` object, and are passed to the action handler.\n\nMulti-word options such as \"--template-engine\" are camel-cased, becoming `program.opts().templateEngine` etc.\n\nAn option and its option-argument can be separated by a space, or combined into the same argument. The option-argument can follow the short option directly or follow an `=` for a long option.\n\n```sh\nserve -p 80\nserve -p80\nserve --port 80\nserve --port=80\n```\n\nYou can use `--` to indicate the end of the options, and any remaining arguments will be used without being interpreted.\n\nBy default, options on the command line are not positional, and can be specified before or after other arguments.\n\nThere are additional related routines for when `.opts()` is not enough:\n\n- `.optsWithGlobals()` returns merged local and global option values\n- `.getOptionValue()` and `.setOptionValue()` work with a single option value\n- `.getOptionValueSource()` and `.setOptionValueWithSource()` include where the option value came from\n\n### Common option types, boolean and value\n\nThe two most used option types are a boolean option, and an option which takes its value\nfrom the following argument (declared with angle brackets like `--expect <value>`). Both are `undefined` unless specified on command line.\n\nExample file: [options-common.js](./examples/options-common.js)\n\n```js\nprogram\n  .option('-d, --debug', 'output extra debugging')\n  .option('-s, --small', 'small pizza size')\n  .option('-p, --pizza-type <type>', 'flavour of pizza');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.debug) console.log(options);\nconsole.log('pizza details:');\nif (options.small) console.log('- small pizza size');\nif (options.pizzaType) console.log(`- ${options.pizzaType}`);\n```\n\n```console\n$ pizza-options -p\nerror: option '-p, --pizza-type <type>' argument missing\n$ pizza-options -d -s -p vegetarian\n{ debug: true, small: true, pizzaType: 'vegetarian' }\npizza details:\n- small pizza size\n- vegetarian\n$ pizza-options --pizza-type=cheese\npizza details:\n- cheese\n```\n\nMultiple boolean short options may be combined following the dash, and may be followed by a single short option taking a value.\nFor example `-d -s -p cheese` may be written as `-ds -p cheese` or even `-dsp cheese`.\n\nOptions with an expected option-argument are greedy and will consume the following argument whatever the value.\nSo `--id -xyz` reads `-xyz` as the option-argument.\n\n`program.parse(arguments)` processes the arguments, leaving any args not consumed by the program options in the `program.args` array. The parameter is optional and defaults to `process.argv`.\n\n### Default option value\n\nYou can specify a default value for an option.\n\nExample file: [options-defaults.js](./examples/options-defaults.js)\n\n```js\nprogram\n  .option('-c, --cheese <type>', 'add the specified type of cheese', 'blue');\n\nprogram.parse();\n\nconsole.log(`cheese: ${program.opts().cheese}`);\n```\n\n```console\n$ pizza-options\ncheese: blue\n$ pizza-options --cheese stilton\ncheese: stilton\n```\n\n### Other option types, negatable boolean and boolean|value\n\nYou can define a boolean option long name with a leading `no-` to set the option value to false when used.\nDefined alone this also makes the option true by default.\n\nIf you define `--foo` first, adding `--no-foo` does not change the default value from what it would\notherwise be.\n\nExample file: [options-negatable.js](./examples/options-negatable.js)\n\n```js\nprogram\n  .option('--no-sauce', 'Remove sauce')\n  .option('--cheese <flavour>', 'cheese flavour', 'mozzarella')\n  .option('--no-cheese', 'plain with no cheese')\n  .parse();\n\nconst options = program.opts();\nconst sauceStr = options.sauce ? 'sauce' : 'no sauce';\nconst cheeseStr = (options.cheese === false) ? 'no cheese' : `${options.cheese} cheese`;\nconsole.log(`You ordered a pizza with ${sauceStr} and ${cheeseStr}`);\n```\n\n```console\n$ pizza-options\nYou ordered a pizza with sauce and mozzarella cheese\n$ pizza-options --sauce\nerror: unknown option '--sauce'\n$ pizza-options --cheese=blue\nYou ordered a pizza with sauce and blue cheese\n$ pizza-options --no-sauce --no-cheese\nYou ordered a pizza with no sauce and no cheese\n```\n\nYou can specify an option which may be used as a boolean option but may optionally take an option-argument\n(declared with square brackets like `--optional [value]`).\n\nExample file: [options-boolean-or-value.js](./examples/options-boolean-or-value.js)\n\n```js\nprogram\n  .option('-c, --cheese [type]', 'Add cheese with optional type');\n\nprogram.parse(process.argv);\n\nconst options = program.opts();\nif (options.cheese === undefined) console.log('no cheese');\nelse if (options.cheese === true) console.log('add cheese');\nelse console.log(`add cheese type ${options.cheese}`);\n```\n\n```console\n$ pizza-options\nno cheese\n$ pizza-options --cheese\nadd cheese\n$ pizza-options --cheese mozzarella\nadd cheese type mozzarella\n```\n\nOptions with an optional option-argument are not greedy and will ignore arguments starting with a dash.\nSo `id` behaves as a boolean option for `--id -5`, but you can use a combined form if needed like `--id=-5`.\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-in-depth.md).\n\n### Required option\n\nYou may specify a required (mandatory) option using `.requiredOption()`. The option must have a value after parsing, usually specified on the command line, or perhaps from a default value (say from environment). The method is otherwise the same as `.option()` in format, taking flags and description, and optional default value or custom processing.\n\nExample file: [options-required.js](./examples/options-required.js)\n\n```js\nprogram\n  .requiredOption('-c, --cheese <type>', 'pizza must have cheese');\n\nprogram.parse();\n```\n\n```console\n$ pizza\nerror: required option '-c, --cheese <type>' not specified\n```\n\n### Variadic option\n\nYou may make an option variadic by appending `...` to the value placeholder when declaring the option. On the command line you\ncan then specify multiple option-arguments, and the parsed option value will be an array. The extra arguments\nare read until the first argument starting with a dash. The special argument `--` stops option processing entirely. If a value\nis specified in the same argument as the option then no further values are read.\n\nExample file: [options-variadic.js](./examples/options-variadic.js)\n\n```js\nprogram\n  .option('-n, --number <numbers...>', 'specify numbers')\n  .option('-l, --letter [letters...]', 'specify letters');\n\nprogram.parse();\n\nconsole.log('Options: ', program.opts());\nconsole.log('Remaining arguments: ', program.args);\n```\n\n```console\n$ collect -n 1 2 3 --letter a b c\nOptions:  { number: [ '1', '2', '3' ], letter: [ 'a', 'b', 'c' ] }\nRemaining arguments:  []\n$ collect --letter=A -n80 operand\nOptions:  { number: [ '80' ], letter: [ 'A' ] }\nRemaining arguments:  [ 'operand' ]\n$ collect --letter -n 1 -n 2 3 -- operand\nOptions:  { number: [ '1', '2', '3' ], letter: true }\nRemaining arguments:  [ 'operand' ]\n```\n\nFor information about possible ambiguous cases, see [options taking varying arguments](./docs/options-in-depth.md).\n\n### Version option\n\nThe optional `version` method adds handling for displaying the command version. The default option flags are `-V` and `--version`, and when present the command prints the version number and exits.\n\n```js\nprogram.version('0.0.1');\n```\n\n```console\n$ ./examples/pizza -V\n0.0.1\n```\n\nYou may change the flags and description by passing additional parameters to the `version` method, using\nthe same syntax for flags as the `option` method.\n\n```js\nprogram.version('0.0.1', '-v, --vers', 'output the current version');\n```\n\n### More configuration\n\nYou can add most options using the `.option()` method, but there are some additional features available\nby constructing an `Option` explicitly for less common cases.\n\nExample files: [options-extra.js](./examples/options-extra.js), [options-env.js](./examples/options-env.js), [options-conflicts.js](./examples/options-conflicts.js), [options-implies.js](./examples/options-implies.js)\n\n```js\nprogram\n  .addOption(new Option('-s, --secret').hideHelp())\n  .addOption(new Option('-t, --timeout <delay>', 'timeout in seconds').default(60, 'one minute'))\n  .addOption(new Option('-d, --drink <size>', 'drink size').choices(['small', 'medium', 'large']))\n  .addOption(new Option('-p, --port <number>', 'port number').env('PORT'))\n  .addOption(new Option('--donate [amount]', 'optional donation in dollars').preset('20').argParser(parseFloat))\n  .addOption(new Option('--disable-server', 'disables the server').conflicts('port'))\n  .addOption(new Option('--free-drink', 'small drink included free ').implies({ drink: 'small' }));\n```\n\n```console\n$ extra --help\nUsage: help [options]\n\nOptions:\n  -t, --timeout <delay>  timeout in seconds (default: one minute)\n  -d, --drink <size>     drink cup size (choices: \"small\", \"medium\", \"large\")\n  -p, --port <number>    port number (env: PORT)\n  --donate [amount]      optional donation in dollars (preset: \"20\")\n  --disable-server       disables the server\n  --free-drink           small drink included free\n  -h, --help             display help for command\n\n$ extra --drink huge\nerror: option '-d, --drink <size>' argument 'huge' is invalid. Allowed choices are small, medium, large.\n\n$ PORT=80 extra --donate --free-drink\nOptions:  { timeout: 60, donate: 20, port: '80', freeDrink: true, drink: 'small' }\n\n$ extra --disable-server --port 8000\nerror: option '--disable-server' cannot be used with option '-p, --port <number>'\n```\n\nSpecify a required (mandatory) option using the `Option` method `.makeOptionMandatory()`. This matches the `Command` method [.requiredOption()](#required-option).\n\n### Custom option processing\n\nYou may specify a function to do custom processing of option-arguments. The callback function receives two parameters,\nthe user specified option-argument and the previous value for the option. It returns the new value for the option.\n\nThis allows you to coerce the option-argument to the desired type, or accumulate values, or do entirely custom processing.\n\nYou can optionally specify the default/starting value for the option after the function parameter.\n\nExample file: [options-custom-processing.js](./examples/options-custom-processing.js)\n\n```js\nfunction myParseInt(value, dummyPrevious) {\n  // parseInt takes a string and a radix\n  const parsedValue = parseInt(value, 10);\n  if (isNaN(parsedValue)) {\n    throw new commander.InvalidArgumentError('Not a number.');\n  }\n  return parsedValue;\n}\n\nfunction increaseVerbosity(dummyValue, previous) {\n  return previous + 1;\n}\n\nfunction collect(value, previous) {\n  return previous.concat([value]);\n}\n\nfunction commaSeparatedList(value, dummyPrevious) {\n  return value.split(',');\n}\n\nprogram\n  .option('-f, --float <number>', 'float argument', parseFloat)\n  .option('-i, --integer <number>', 'integer argument', myParseInt)\n  .option('-v, --verbose', 'verbosity that can be increased', increaseVerbosity, 0)\n  .option('-c, --collect <value>', 'repeatable value', collect, [])\n  .option('-l, --list <items>', 'comma separated list', commaSeparatedList)\n;\n\nprogram.parse();\n\nconst options = program.opts();\nif (options.float !== undefined) console.log(`float: ${options.float}`);\nif (options.integer !== undefined) console.log(`integer: ${options.integer}`);\nif (options.verbose > 0) console.log(`verbosity: ${options.verbose}`);\nif (options.collect.length > 0) console.log(options.collect);\nif (options.list !== undefined) console.log(options.list);\n```\n\n```console\n$ custom -f 1e2\nfloat: 100\n$ custom --integer 2\ninteger: 2\n$ custom -v -v -v\nverbose: 3\n$ custom -c a -c b -c c\n[ 'a', 'b', 'c' ]\n$ custom --list x,y,z\n[ 'x', 'y', 'z' ]\n```\n\n## Commands\n\nYou can specify (sub)commands using `.command()` or `.addCommand()`. There are two ways these can be implemented: using an action handler attached to the command, or as a stand-alone executable file (described in more detail later). The subcommands may be nested ([example](./examples/nestedCommands.js)).\n\nIn the first parameter to `.command()` you specify the command name. You may append the command-arguments after the command name, or specify them separately using `.argument()`. The arguments may be `<required>` or `[optional]`, and the last argument may also be `variadic...`.\n\nYou can use `.addCommand()` to add an already configured subcommand to the program.\n\nFor example:\n\n```js\n// Command implemented using action handler (description is supplied separately to `.command`)\n// Returns new command for configuring.\nprogram\n  .command('clone <source> [destination]')\n  .description('clone a repository into a newly created directory')\n  .action((source, destination) => {\n    console.log('clone command called');\n  });\n\n// Command implemented using stand-alone executable file, indicated by adding description as second parameter to `.command`.\n// Returns `this` for adding more commands.\nprogram\n  .command('start <service>', 'start named service')\n  .command('stop [service]', 'stop named service, or all if no name supplied');\n\n// Command prepared separately.\n// Returns `this` for adding more commands.\nprogram\n  .addCommand(build.makeBuildCommand());\n```\n\nConfiguration options can be passed with the call to `.command()` and `.addCommand()`. Specifying `hidden: true` will\nremove the command from the generated help output. Specifying `isDefault: true` will run the subcommand if no other\nsubcommand is specified ([example](./examples/defaultCommand.js)).\n\nYou can add alternative names for a command with `.alias()`. ([example](./examples/alias.js))\n\n`.command()` automatically copies the inherited settings from the parent command to the newly created subcommand. This is only done during creation, any later setting changes to the parent are not inherited.\n\nFor safety, `.addCommand()` does not automatically copy the inherited settings from the parent command. There is a helper routine `.copyInheritedSettings()` for copying the settings when they are wanted.\n\n### Command-arguments\n\nFor subcommands, you can specify the argument syntax in the call to `.command()` (as shown above). This\nis the only method usable for subcommands implemented using a stand-alone executable, but for other subcommands\nyou can instead use the following method.\n\nTo configure a command, you can use `.argument()` to specify each expected command-argument.\nYou supply the argument name and an optional description. The argument may be `<required>` or `[optional]`.\nYou can specify a default value for an optional command-argument.\n\nExample file: [argument.js](./examples/argument.js)\n\n```js\nprogram\n  .version('0.1.0')\n  .argument('<username>', 'user to login')\n  .argument('[password]', 'password for user, if required', 'no password given')\n  .action((username, password) => {\n    console.log('username:', username);\n    console.log('password:', password);\n  });\n```\n\n The last argument of a command can be variadic, and only the last argument.  To make an argument variadic you\n append `...` to the argument name. A variadic argument is passed to the action handler as an array. For example:\n\n```js\nprogram\n  .version('0.1.0')\n  .command('rmdir')\n  .argument('<dirs...>')\n  .action(function (dirs) {\n    dirs.forEach((dir) => {\n      console.log('rmdir %s', dir);\n    });\n  });\n```\n\nThere is a convenience method to add multiple arguments at once, but without descriptions:\n\n```js\nprogram\n  .arguments('<username> <password>');\n```\n\n#### More configuration\n\nThere are some additional features available by constructing an `Argument` explicitly for less common cases.\n\nExample file: [arguments-extra.js](./examples/arguments-extra.js)\n\n```js\nprogram\n  .addArgument(new commander.Argument('<drink-size>', 'drink cup size').choices(['small', 'medium', 'large']))\n  .addArgument(new commander.Argument('[timeout]', 'timeout in seconds').default(60, 'one minute'))\n```\n\n#### Custom argument processing\n\nYou may specify a function to do custom processing of command-arguments (like for option-arguments).\nThe callback function receives two parameters, the user specified command-argument and the previous value for the argument.\nIt returns the new value for the argument.\n\nThe processed argument values are passed to the action handler, and saved as `.processedArgs`.\n\nYou can optionally specify the default/starting value for the argument after the function parameter.\n\nExample file: [arguments-custom-processing.js](./examples/arguments-custom-processing.js)\n\n```js\nprogram\n  .command('add')\n  .argument('<first>', 'integer argument', myParseInt)\n  .argument('[second]', 'integer argument', myParseInt, 1000)\n  .action((first, second) => {\n    console.log(`${first} + ${second} = ${first + second}`);\n  })\n;\n```\n\n### Action handler\n\nThe action handler gets passed a parameter for each command-argument you declared, and two additional parameters\nwhich are the parsed options and the command object itself.\n\nExample file: [thank.js](./examples/thank.js)\n\n```js\nprogram\n  .argument('<name>')\n  .option('-t, --title <honorific>', 'title to use before name')\n  .option('-d, --debug', 'display some debugging')\n  .action((name, options, command) => {\n    if (options.debug) {\n      console.error('Called %s with options %o', command.name(), options);\n    }\n    const title = options.title ? `${options.title} ` : '';\n    console.log(`Thank-you ${title}${name}`);\n  });\n```\n\nIf you prefer, you can work with the command directly and skip declaring the parameters for the action handler. The `this` keyword is set to the running command and can be used from a function expression (but not from an arrow function).\n\nExample file: [action-this.js](./examples/action-this.js)\n\n```js\nprogram\n  .command('serve')\n  .argument('<script>')\n  .option('-p, --port <number>', 'port number', 80)\n  .action(function() {\n    console.error('Run script %s on port %s', this.args[0], this.opts().port);\n  });\n```\n\nYou may supply an `async` action handler, in which case you call `.parseAsync` rather than `.parse`.\n\n```js\nasync function run() { /* code goes here */ }\n\nasync function main() {\n  program\n    .command('run')\n    .action(run);\n  await program.parseAsync(process.argv);\n}\n```\n\nA command's options and arguments on the command line are validated when the command is used. Any unknown options or missing arguments will be reported as an error. You can suppress the unknown option checks with `.allowUnknownOption()`. By default, it is not an error to\npass more arguments than declared, but you can make this an error with `.allowExcessArguments(false)`.\n\n### Stand-alone executable (sub)commands\n\nWhen `.command()` is invoked with a description argument, this tells Commander that you're going to use stand-alone executables for subcommands.\nCommander will search the files in the directory of the entry script for a file with the name combination `command-subcommand`, like `pm-install` or `pm-search` in the example below. The search includes trying common file extensions, like `.js`.\nYou may specify a custom name (and path) with the `executableFile` configuration option.\nYou may specify a custom search directory for subcommands with `.executableDir()`.\n\nYou handle the options for an executable (sub)command in the executable, and don't declare them at the top-level.\n\nExample file: [pm](./examples/pm)\n\n```js\nprogram\n  .name('pm')\n  .version('0.1.0')\n  .command('install [name]', 'install one or more packages')\n  .command('search [query]', 'search with optional query')\n  .command('update', 'update installed packages', { executableFile: 'myUpdateSubCommand' })\n  .command('list', 'list packages installed', { isDefault: true });\n\nprogram.parse(process.argv);\n```\n\nIf the program is designed to be installed globally, make sure the executables have proper modes, like `755`.\n\n### Life cycle hooks\n\nYou can add callback hooks to a command for life cycle events.\n\nExample file: [hook.js](./examples/hook.js)\n\n```js\nprogram\n  .option('-t, --trace', 'display trace statements for commands')\n  .hook('preAction', (thisCommand, actionCommand) => {\n    if (thisCommand.opts().trace) {\n      console.log(`About to call action handler for subcommand: ${actionCommand.name()}`);\n      console.log('arguments: %O', actionCommand.args);\n      console.log('options: %o', actionCommand.opts());\n    }\n  });\n```\n\nThe callback hook can be `async`, in which case you call `.parseAsync` rather than `.parse`. You can add multiple hooks per event.\n\nThe supported events are:\n\n| event name | when hook called | callback parameters |\n| :-- | :-- | :-- |\n| `preAction`, `postAction` |  before/after action handler for this command and its nested subcommands |   `(thisCommand, actionCommand)` |\n| `preSubcommand` | before parsing direct subcommand  | `(thisCommand, subcommand)` |\n\nFor an overview of the life cycle events see [parsing life cycle and hooks](./docs/parsing-and-hooks.md).\n\n## Automated help\n\nThe help information is auto-generated based on the information commander already knows about your program. The default\nhelp option is `-h,--help`.\n\nExample file: [pizza](./examples/pizza)\n\n```console\n$ node ./examples/pizza --help\nUsage: pizza [options]\n\nAn application for pizza ordering\n\nOptions:\n  -p, --peppers        Add peppers\n  -c, --cheese <type>  Add the specified type of cheese (default: \"marble\")\n  -C, --no-cheese      You do not want any cheese\n  -h, --help           display help for command\n```\n\nA `help` command is added by default if your command has subcommands. It can be used alone, or with a subcommand name to show\nfurther help for the subcommand. These are effectively the same if the `shell` program has implicit help:\n\n```sh\nshell help\nshell --help\n\nshell help spawn\nshell spawn --help\n```\n\nLong descriptions are wrapped to fit the available width. (However, a description that includes a line-break followed by whitespace is assumed to be pre-formatted and not wrapped.)\n\n### Custom help\n\nYou can add extra text to be displayed along with the built-in help.\n\nExample file: [custom-help](./examples/custom-help)\n\n```js\nprogram\n  .option('-f, --foo', 'enable some foo');\n\nprogram.addHelpText('after', `\n\nExample call:\n  $ custom-help --help`);\n```\n\nYields the following help output:\n\n```Text\nUsage: custom-help [options]\n\nOptions:\n  -f, --foo   enable some foo\n  -h, --help  display help for command\n\nExample call:\n  $ custom-help --help\n```\n\nThe positions in order displayed are:\n\n- `beforeAll`: add to the program for a global banner or header\n- `before`: display extra information before built-in help\n- `after`: display extra information after built-in help\n- `afterAll`: add to the program for a global footer (epilog)\n\nThe positions \"beforeAll\" and \"afterAll\" apply to the command and all its subcommands.\n\nThe second parameter can be a string, or a function returning a string. The function is passed a context object for your convenience. The properties are:\n\n- error: a boolean for whether the help is being displayed due to a usage error\n- command: the Command which is displaying the help\n\n### Display help after errors\n\nThe default behaviour for usage errors is to just display a short error message.\nYou can change the behaviour to show the full help or a custom help message after an error.\n\n```js\nprogram.showHelpAfterError();\n// or\nprogram.showHelpAfterError('(add --help for additional information)');\n```\n\n```console\n$ pizza --unknown\nerror: unknown option '--unknown'\n(add --help for additional information)\n```\n\nThe default behaviour is to suggest correct spelling after an error for an unknown command or option. You\ncan disable this.\n\n```js\nprogram.showSuggestionAfterError(false);\n```\n\n```console\n$ pizza --hepl\nerror: unknown option '--hepl'\n(Did you mean --help?)\n```\n\n### Display help from code\n\n`.help()`: display help information and exit immediately. You can optionally pass `{ error: true }` to display on stderr and exit with an error status.\n\n`.outputHelp()`: output help information without exiting. You can optionally pass `{ error: true }` to display on stderr.\n\n`.helpInformation()`: get the built-in command help information as a string for processing or displaying yourself.\n\n### .name\n\nThe command name appears in the help, and is also used for locating stand-alone executable subcommands.\n\nYou may specify the program name using `.name()` or in the Command constructor. For the program, Commander will\nfall back to using the script name from the full arguments passed into `.parse()`. However, the script name varies\ndepending on how your program is launched, so you may wish to specify it explicitly.\n\n```js\nprogram.name('pizza');\nconst pm = new Command('pm');\n```\n\nSubcommands get a name when specified using `.command()`. If you create the subcommand yourself to use with `.addCommand()`,\nthen set the name using `.name()` or in the Command constructor.\n\n### .usage\n\nThis allows you to customise the usage description in the first line of the help. Given:\n\n```js\nprogram\n  .name(\"my-command\")\n  .usage(\"[global options] command\")\n```\n\nThe help will start with:\n\n```Text\nUsage: my-command [global options] command\n```\n\n### .description and .summary\n\nThe description appears in the help for the command. You can optionally supply a shorter\nsummary to use when listed as a subcommand of the program.\n\n```js\nprogram\n  .command(\"duplicate\")\n  .summary(\"make a copy\")\n  .description(`Make a copy of the current project.\nThis may require additional disk space.\n  `);\n```\n\n### .helpOption(flags, description)\n\nBy default, every command has a help option. You may change the default help flags and description. Pass false to disable the built-in help option.\n\n```js\nprogram\n  .helpOption('-e, --HELP', 'read more information');\n```\n\n(Or use `.addHelpOption()` to add an option you construct yourself.)\n\n### .helpCommand()\n\nA help command is added by default if your command has subcommands. You can explicitly turn on or off the implicit help command with `.helpCommand(true)` and `.helpCommand(false)`.\n\nYou can both turn on and customise the help command by supplying the name and description:\n\n```js\nprogram.helpCommand('assist [command]', 'show assistance');\n```\n\n(Or use `.addHelpCommand()` to add a command you construct yourself.)\n\n### More configuration\n\nThe built-in help is formatted using the Help class.\nYou can configure the Help behaviour by modifying data properties and methods using `.configureHelp()`, or by subclassing using `.createHelp()` if you prefer.\n\nThe data properties are:\n\n- `helpWidth`: specify the wrap width, useful for unit tests\n- `sortSubcommands`: sort the subcommands alphabetically\n- `sortOptions`: sort the options alphabetically\n- `showGlobalOptions`: show a section with the global options from the parent command(s)\n\nYou can override any method on the [Help](./lib/help.js) class. There are methods getting the visible lists of arguments, options, and subcommands. There are methods for formatting the items in the lists, with each item having a _term_ and _description_. Take a look at `.formatHelp()` to see how they are used.\n\nExample file: [configure-help.js](./examples/configure-help.js)\n\n```js\nprogram.configureHelp({\n  sortSubcommands: true,\n  subcommandTerm: (cmd) => cmd.name() // Just show the name, instead of short usage.\n});\n```\n\n## Custom event listeners\n\nYou can execute custom actions by listening to command and option events.\n\n```js\nprogram.on('option:verbose', function () {\n  process.env.VERBOSE = this.opts().verbose;\n});\n```\n\n## Bits and pieces\n\n### .parse() and .parseAsync()\n\nThe first argument to `.parse` is the array of strings to parse. You may omit the parameter to implicitly use `process.argv`.\n\nIf the arguments follow different conventions than node you can pass a `from` option in the second parameter:\n\n- 'node': default, `argv[0]` is the application and `argv[1]` is the script being run, with user parameters after that\n- 'electron': `argv[1]` varies depending on whether the electron application is packaged\n- 'user': all of the arguments from the user\n\nFor example:\n\n```js\nprogram.parse(process.argv); // Explicit, node conventions\nprogram.parse(); // Implicit, and auto-detect electron\nprogram.parse(['-f', 'filename'], { from: 'user' });\n```\n\nIf you want to parse multiple times, create a new program each time. Calling parse does not clear out any previous state.\n\n### Parsing Configuration\n\nIf the default parsing does not suit your needs, there are some behaviours to support other usage patterns.\n\nBy default, program options are recognised before and after subcommands. To only look for program options before subcommands, use `.enablePositionalOptions()`. This lets you use\nan option for a different purpose in subcommands.\n\nExample file: [positional-options.js](./examples/positional-options.js)\n\nWith positional options, the `-b` is a program option in the first line and a subcommand option in the second line:\n\n```sh\nprogram -b subcommand\nprogram subcommand -b\n```\n\nBy default, options are recognised before and after command-arguments. To only process options that come\nbefore the command-arguments, use `.passThroughOptions()`. This lets you pass the arguments and following options through to another program\nwithout needing to use `--` to end the option processing.\nTo use pass through options in a subcommand, the program needs to enable positional options.\n\nExample file: [pass-through-options.js](./examples/pass-through-options.js)\n\nWith pass through options, the `--port=80` is a program option in the first line and passed through as a command-argument in the second line:\n\n```sh\nprogram --port=80 arg\nprogram arg --port=80\n```\n\nBy default, the option processing shows an error for an unknown option. To have an unknown option treated as an ordinary command-argument and continue looking for options, use `.allowUnknownOption()`. This lets you mix known and unknown options.\n\nBy default, the argument processing does not display an error for more command-arguments than expected.\nTo display an error for excess arguments, use`.allowExcessArguments(false)`.\n\n### Legacy options as properties\n\nBefore Commander 7, the option values were stored as properties on the command.\nThis was convenient to code, but the downside was possible clashes with\nexisting properties of `Command`. You can revert to the old behaviour to run unmodified legacy code by using `.storeOptionsAsProperties()`.\n\n```js\nprogram\n  .storeOptionsAsProperties()\n  .option('-d, --debug')\n  .action((commandAndOptions) => {\n    if (commandAndOptions.debug) {\n      console.error(`Called ${commandAndOptions.name()}`);\n    }\n  });\n```\n\n### TypeScript\n\nextra-typings: There is an optional project to infer extra type information from the option and argument definitions.\nThis adds strong typing to the options returned by `.opts()` and the parameters to `.action()`.\nSee [commander-js/extra-typings](https://github.com/commander-js/extra-typings) for more.\n\n```\nimport { Command } from '@commander-js/extra-typings';\n```\n\nts-node: If you use `ts-node` and stand-alone executable subcommands written as `.ts` files, you need to call your program through node to get the subcommands called correctly. e.g.\n\n```sh\nnode -r ts-node/register pm.ts\n```\n\n### createCommand()\n\nThis factory function creates a new command. It is exported and may be used instead of using `new`, like:\n\n```js\nconst { createCommand } = require('commander');\nconst program = createCommand();\n```\n\n`createCommand` is also a method of the Command object, and creates a new command rather than a subcommand. This gets used internally\nwhen creating subcommands using `.command()`, and you may override it to\ncustomise the new subcommand (example file [custom-command-class.js](./examples/custom-command-class.js)).\n\n### Node options such as `--harmony`\n\nYou can enable `--harmony` option in two ways:\n\n- Use `#! /usr/bin/env node --harmony` in the subcommands scripts. (Note Windows does not support this pattern.)\n- Use the `--harmony` option when call the command, like `node --harmony examples/pm publish`. The `--harmony` option will be preserved when spawning subcommand process.\n\n### Debugging stand-alone executable subcommands\n\nAn executable subcommand is launched as a separate child process.\n\nIf you are using the node inspector for [debugging](https://nodejs.org/en/docs/guides/debugging-getting-started/) executable subcommands using `node --inspect` et al.,\nthe inspector port is incremented by 1 for the spawned subcommand.\n\nIf you are using VSCode to debug executable subcommands you need to set the `\"autoAttachChildProcesses\": true` flag in your launch.json configuration.\n\n### npm run-script\n\nBy default, when you call your program using run-script, `npm` will parse any options on the command-line and they will not reach your program. Use\n `--` to stop the npm option parsing and pass through all the arguments.\n\n The synopsis for [npm run-script](https://docs.npmjs.com/cli/v9/commands/npm-run-script) explicitly shows the `--` for this reason:\n\n```console\nnpm run-script <command> [-- <args>]\n```\n\n### Display error\n\nThis routine is available to invoke the Commander error handling for your own error conditions. (See also the next section about exit handling.)\n\nAs well as the error message, you can optionally specify the `exitCode` (used with `process.exit`)\nand `code` (used with `CommanderError`).\n\n```js\nprogram.error('Password must be longer than four characters');\nprogram.error('Custom processing has failed', { exitCode: 2, code: 'my.custom.error' });\n```\n\n### Override exit and output handling\n\nBy default, Commander calls `process.exit` when it detects errors, or after displaying the help or version. You can override\nthis behaviour and optionally supply a callback. The default override throws a `CommanderError`.\n\nThe override callback is passed a `CommanderError` with properties `exitCode` number, `code` string, and `message`. The default override behaviour is to throw the error, except for async handling of executable subcommand completion which carries on. The normal display of error messages or version or help\nis not affected by the override which is called after the display.\n\n```js\nprogram.exitOverride();\n\ntry {\n  program.parse(process.argv);\n} catch (err) {\n  // custom processing...\n}\n```\n\nBy default, Commander is configured for a command-line application and writes to stdout and stderr.\nYou can modify this behaviour for custom applications. In addition, you can modify the display of error messages.\n\nExample file: [configure-output.js](./examples/configure-output.js)\n\n```js\nfunction errorColor(str) {\n  // Add ANSI escape codes to display text in red.\n  return `\\x1b[31m${str}\\x1b[0m`;\n}\n\nprogram\n  .configureOutput({\n    // Visibly override write routines as example!\n    writeOut: (str) => process.stdout.write(`[OUT] ${str}`),\n    writeErr: (str) => process.stdout.write(`[ERR] ${str}`),\n    // Highlight errors in color.\n    outputError: (str, write) => write(errorColor(str))\n  });\n```\n\n### Additional documentation\n\nThere is more information available about:\n\n- [deprecated](./docs/deprecated.md) features still supported for backwards compatibility\n- [options taking varying arguments](./docs/options-in-depth.md)\n- [parsing life cycle and hooks](./docs/parsing-and-hooks.md)\n\n## Support\n\nThe current version of Commander is fully supported on Long Term Support versions of Node.js, and requires at least v18.\n(For older versions of Node.js, use an older version of Commander.)\n\nThe main forum for free and community support is the project [Issues](https://github.com/tj/commander.js/issues) on GitHub.\n\n### Commander for enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of Commander and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-commander?utm_source=npm-commander&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n","type":"commonjs","types":"typings/index.d.ts","support":true,"readmeFilename":"Readme.md","gitHead":"90f3c8a4c99bd03e641ab23210fce8a3c989df8a","_nodeVersion":"20.10.0","_npmVersion":"10.2.3","_npmUser":{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},"maintainers":[{"name":"somekittens","email":"rkoutnik@gmail.com"},{"name":"tjholowaychuk","email":"tj@vision-media.ca"},{"name":"shadowspawn","email":"npm_j@ruru.gen.nz"},{"name":"abetomo","email":"abe@enzou.tokyo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/commander_12.0.0-1_1705695132845_0.046763212014158784"},"_hasShrinkwrap":false},"12.0.0":{"_id":"commander@12.0.0","name":"commander","description":"the complete solution for node.js command-line programs","version":"12.0.0","keywords":["commander","command","option","parser","cli","argument","args","argv"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca","url":""},"repository":{"type":"git","url":"git+https://github.com/tj/commander.js.git"},"license":"MIT","scripts":{"lint":"npm run lint:javascript && npm run lint:typescript","lint:javascript":"eslint index.js esm.mjs \"lib/*.js\" \"tests/**/*.js\"","lint:typescript":"eslint typings/*.ts tests/*.ts","test":"jest && npm run typecheck-ts","test-esm":"node ./tests/esm-imports-test.mjs","typecheck-ts":"tsd && tsc -p tsconfig.ts.json","typecheck-js":"tsc -p tsconfig.js.json","test-all":"npm run test && npm run lint && npm run typecheck-js && npm run test-esm"},"directories":null,"devDependencies":{"@types/jest":"^29.2.4","@types/node":"^20.2.5","@typescript-eslint/eslint-plugin":"^6.7.5","@typescript-eslint/parser":"^6.7.5","eslint":"^8.30.0","eslint-config-standard":"^17.0.0","eslint-config-standard-with-typescript":"^40.0.0","eslint-plugin-import":"^2.26.0","eslint-plugin-jest":"^27.1.7","eslint-plugin-n":"^16.2.0","eslint-plugin-promise":"^6.1.1","jest":"^29.3.1","ts-jest":"^29.0.3","tsd":"^0.30.4","typescript":"^5.0.4"},"engines":{"node":">=18"},"files":["index.js","lib/*.js","esm.mjs","typings/index.d.ts","typings/esm.d.mts","package-support.json"],"main":"./index.js","dist":{"shasum":"b929db6df8546080adfd004ab215ed48cf6f2592","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/commander/-/commander-12.0.0.tgz"},"type":"commonjs","types":"typings/index.d.ts","support":true}},"time":{"created":"2022-06-15T16:24:34Z","modified":"2024-03-19T17:46:36Z","0.0.1":"2022-06-15T16:24:34Z","0.0.3":"2022-06-15T16:24:34Z","0.0.4":"2022-06-15T16:24:34Z","0.0.5":"2022-06-15T16:24:34Z","0.1.0":"2022-06-15T16:24:34Z","0.2.0":"2022-06-15T16:24:34Z","0.2.1":"2022-06-15T16:24:34Z","0.3.0":"2022-06-15T16:24:34Z","0.3.1":"2022-06-15T16:24:34Z","0.3.2":"2022-06-15T16:24:34Z","0.3.3":"2022-06-15T16:24:34Z","0.4.0":"2022-06-15T16:24:34Z","0.4.1":"2022-06-15T16:24:34Z","0.4.2":"2022-06-15T16:24:34Z","0.4.3":"2022-06-15T16:24:34Z","0.5.0":"2022-06-15T16:24:34Z","0.5.1":"2022-06-15T16:24:34Z","0.5.2":"2022-06-15T16:24:34Z","0.6.0":"2022-06-15T16:24:34Z","0.6.1":"2022-06-15T16:24:34Z","1.0.0":"2022-06-15T16:24:34Z","1.0.1":"2022-06-15T16:24:34Z","1.0.2":"2022-06-15T16:24:34Z","1.0.3":"2022-06-15T16:24:34Z","1.0.4":"2022-06-15T16:24:34Z","1.0.5":"2022-06-15T16:24:34Z","1.1.0":"2022-06-15T16:24:34Z","1.1.1":"2022-06-15T16:24:34Z","1.2.0":"2022-06-15T16:24:34Z","1.3.0":"2022-06-15T16:24:34Z","1.3.1":"2022-06-15T16:24:34Z","1.3.2":"2022-06-15T16:24:34Z","2.0.0":"2022-06-15T16:24:34Z","2.1.0":"2022-06-15T16:24:34Z","2.2.0":"2022-06-15T16:24:34Z","2.3.0":"2022-06-15T16:24:34Z","2.4.0":"2022-06-15T16:24:34Z","2.5.0":"2022-06-15T16:24:34Z","2.5.1":"2022-06-15T16:24:34Z","2.6.0":"2022-06-15T16:24:34Z","2.7.0":"2022-06-15T16:24:34Z","2.7.1":"2022-06-15T16:24:34Z","2.8.0":"2022-06-15T16:24:34Z","2.8.1":"2022-06-15T16:24:34Z","2.9.0":"2023-08-07T20:04:53Z","2.10.0":"2022-06-15T16:24:34Z","2.11.0":"2022-06-15T16:24:34Z","2.12.0":"2022-06-15T16:24:34Z","2.12.1":"2022-09-16T16:52:50Z","2.12.2":"2022-06-15T16:24:34Z","2.13.0":"2022-06-15T16:24:34Z","2.14.0":"2022-06-15T16:24:34Z","2.14.1":"2022-06-15T16:24:34Z","2.15.0":"2022-06-15T16:24:34Z","2.15.1":"2022-07-14T22:14:00Z","2.16.0":"2022-06-15T16:24:34Z","2.17.0":"2022-06-15T16:24:34Z","2.17.1":"2022-06-15T16:34:27Z","2.18.0":"2022-06-15T16:24:34Z","2.19.0":"2022-06-15T16:24:34Z","2.20.0":"2022-06-15T16:24:34Z","2.20.1":"2022-06-15T16:24:34Z","2.20.3":"2022-06-15T16:34:30Z","3.0.0-0":"2022-06-15T16:24:34Z","3.0.0":"2022-06-15T16:24:34Z","3.0.1":"2022-06-15T16:24:34Z","3.0.2":"2022-06-15T16:24:34Z","4.0.0-0":"2022-06-15T16:24:34Z","4.0.0-1":"2022-06-15T16:24:34Z","4.0.0":"2022-06-15T16:24:34Z","4.0.1":"2022-06-15T16:24:34Z","4.1.0":"2022-06-15T16:24:34Z","4.1.1":"2022-06-15T16:24:34Z","5.0.0-0":"2022-06-15T16:24:34Z","5.0.0-1":"2022-06-15T16:24:34Z","5.0.0-2":"2022-06-15T16:24:34Z","5.0.0-3":"2022-06-15T16:24:34Z","5.0.0-4":"2022-06-15T16:24:34Z","5.0.0":"2022-06-15T16:24:34Z","5.1.0":"2023-09-04T17:40:58Z","6.0.0-0":"2022-06-15T16:24:34Z","6.0.0":"2022-06-15T16:24:34Z","6.1.0":"2022-06-15T16:24:34Z","6.2.0":"2022-06-15T16:24:34Z","6.2.1":"2022-08-24T22:56:42Z","7.0.0-0":"2022-06-15T16:24:34Z","7.0.0-1":"2022-06-15T16:24:34Z","7.0.0-2":"2022-06-15T16:24:34Z","7.0.0":"2022-06-15T16:24:34Z","7.1.0":"2022-06-15T16:24:34Z","7.2.0":"2022-06-28T23:24:01Z","8.0.0-0":"2022-06-15T16:24:34Z","8.0.0-1":"2022-06-15T16:24:34Z","8.0.0-2":"2022-06-15T16:24:34Z","8.0.0":"2022-06-15T16:24:34Z","8.1.0":"2022-06-15T16:24:34Z","8.2.0":"2022-06-15T16:24:34Z","8.3.0":"2022-08-24T21:01:38Z","9.0.0-0":"2022-06-15T16:24:34Z","9.0.0-1":"2022-06-15T16:24:34Z","9.0.0":"2022-06-15T16:24:34Z","9.1.0":"2022-06-15T16:24:34Z","9.2.0":"2022-06-15T16:24:34Z","9.3.0":"2022-06-15T16:24:34Z","9.4.0":"2022-07-15T08:40:14Z","9.4.1":"2022-11-10T05:08:32Z","9.5.0":"2023-01-12T10:44:07Z","10.0.0":"2023-01-26T22:05:20Z","10.0.1":"2023-05-17T17:37:47Z","11.0.0":"2023-06-16T02:41:24Z","11.1.0":"2023-10-13T05:53:17Z","12.0.0-0":"2023-11-11T08:57:42Z","12.0.0-1":"2024-01-19T23:53:09Z","12.0.0":"2024-03-19T17:46:36Z"}}