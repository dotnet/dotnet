{"_id":"jsdoc-type-pratt-parser","_rev":"e6704744-cf29-415a-8f13-dc415ca0dba5","name":"jsdoc-type-pratt-parser","dist-tags":{"alpha":"1.0.0-alpha.24","latest":"4.0.0","dev":"3.2.0-dev.3"},"versions":{"1.0.0-alpha.1":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.1","name":"jsdoc-type-pratt-parser","description":"This project is parser for jsdoc types. It is heavily inspired by http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/, https://github.com/hegemonic/catharsis and https://github.com/jsdoctypeparser/jsdoctypeparser.","version":"1.0.0-alpha.1","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha -r ts-node/register test/**/*.spec.ts","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","postpublish":"./deploy.sh"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@types/chai":"^4.2.14","@types/lodash":"^4.14.168","@types/mocha":"^8.2.0","chai":"^4.3.0","lodash":"^4.17.20","mocha":"^8.2.1","rollup":"^2.39.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24"},"dependencies":{"typescript":"^4.1.3"},"main":"dist/index.js","dist":{"shasum":"c36df85fc7026aa4bbc59c52f1890cf1d97c4f69","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.1.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"gitHead":"851cfbfc40a5e00d0bbf4399a6ae8a9460fe09aa","_nodeVersion":"14.15.4","_npmVersion":"6.14.10","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.1_1613827826173_0.7499068604510712"},"_hasShrinkwrap":false},"1.0.0-alpha.2":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.2","name":"jsdoc-type-pratt-parser","description":"This project is parser for jsdoc types. It is heavily inspired by http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/, https://github.com/hegemonic/catharsis and https://github.com/jsdoctypeparser/jsdoctypeparser.","version":"1.0.0-alpha.2","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha -r ts-node/register test/**/*.spec.ts","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","postpublish":"./deploy.sh"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@types/chai":"^4.2.14","@types/lodash":"^4.14.168","@types/mocha":"^8.2.0","chai":"^4.3.0","lodash":"^4.17.20","mocha":"^8.2.1","rollup":"^2.39.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24"},"dependencies":{"typescript":"^4.1.3"},"main":"dist/index.js","dist":{"shasum":"f9c5db467a52d804782c88a59f7b7f788f79c471","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.2.tgz"},"readme":"This project is parser for jsdoc types. It is heavily inspired by http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/, https://github.com/hegemonic/catharsis and https://github.com/jsdoctypeparser/jsdoctypeparser.\n\nLive Demo\n---------\n\nSimple live demo can be found at: https://simonseyock.github.io/jsdoc-type-pratt-parser/\n\nGetting started\n---------------\n\nThe usage is not perfect for now as it is not published as a package for now. Dependening on your needs you might want to run `npm run build` before using. An `index.js` in umd format will be built. All exports from `index.ts` should be available. \n\n```\nimport { Parser } from 'src/index'\n\nconst parser = new Parser({\n  mode: 'closure'\n})\n\nconst result = parser.parse('myType.<string>')\n```\n\nCatharsis compat mode:\n\n```\nimport { Parser, catharsisTransform } from 'src/index'\n\nconst parser = new Parser({\n  mode: 'closure'\n})\n\nconst result = catharsisTransform(parser.parse('myType.<string>'))\n```\n\nAvailable Grammars\n------------------\n\nAt the moment there are 3 modes supported: 'jsdoc', 'closure', 'typescipt' where 'jsdoc' is a superset of 'closure'\n\nTests Status\n------------\n\nThis parser runs most tests of https://github.com/hegemonic/catharsis and also some of the typescript tests of https://github.com/jsdoctypeparser/jsdoctypeparser\n\nIt adds an increasing number of tests on its own, especially the tests to assure the differences between the modes.\n\nThe current status can be checked in the github action results: https://github.com/simonseyock/jsdoc-type-pratt-parser/actions\n\nAPI Documentation\n-----------------\nA simple api doc can be found here: https://simonseyock.github.io/jsdoc-type-pratt-parser/docs/\n","types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"readmeFilename":"README.md","gitHead":"0029bbee28c0ca05cf33b5d04edc5b3d88b70943","_nodeVersion":"14.15.4","_npmVersion":"6.14.10","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.2_1613828755561_0.07891350844204781"},"_hasShrinkwrap":false},"1.0.0-alpha.3.0":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.3.0","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.3.0","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","postpublish":"./deploy.sh"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@types/chai":"^4.2.14","@types/lodash":"^4.14.168","@types/mocha":"^8.2.0","@types/node":"^14.14.31","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","lodash":"^4.17.20","mocha":"^8.2.1","rollup":"^2.39.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","dist":{"shasum":"4f7e35b0eab55b70bfa2314246cb785d2d78b123","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.3.0.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"gitHead":"10df8ae75a262883dc7314d6e12687c0b988b265","_nodeVersion":"14.15.4","_npmVersion":"6.14.10","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.3.0_1621075865709_0.8827779382566154"},"_hasShrinkwrap":false},"1.0.0-alpha.4.0":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.4.0","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.4.0","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","postpublish":"./deploy.sh"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@types/chai":"^4.2.14","@types/lodash":"^4.14.168","@types/mocha":"^8.2.0","@types/node":"^14.14.31","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","lodash":"^4.17.20","mocha":"^8.2.1","rollup":"^2.39.0","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","dist":{"shasum":"c089d1ccbefa080ccb37b0eae68993f7418de085","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.4.0.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"gitHead":"33dbf7e2068ab02ca0f34bb9be9926a170be141d","_nodeVersion":"14.15.4","_npmVersion":"6.14.10","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.4.0_1621089069237_0.7985247718358135"},"_hasShrinkwrap":false},"1.0.0-alpha.6.0":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.6.0","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.6.0","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","postpublish":"./deploy.sh"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@types/chai":"^4.2.14","@types/lodash":"^4.14.168","@types/mocha":"^8.2.0","@types/node":"^14.14.31","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","lodash":"^4.17.20","mocha":"^8.2.1","rollup":"^2.39.0","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","dist":{"shasum":"1783baa9022d689514de69c5d6995ac119ef2a45","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.6.0.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"gitHead":"62ba474fae051bcae38bef182f1f1b2fe020c238","_nodeVersion":"14.15.4","_npmVersion":"6.14.10","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.6.0_1621089686473_0.6247221916421251"},"_hasShrinkwrap":false},"1.0.0-alpha.7.0":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.7.0","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.7.0","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublish":"npm run build","postpublish":"./deploy.sh"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@types/chai":"^4.2.14","@types/lodash":"^4.14.168","@types/mocha":"^8.2.0","@types/node":"^14.14.31","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","lodash":"^4.17.20","mocha":"^8.2.1","rollup":"^2.39.0","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","dist":{"shasum":"e7a279a5121853c546e22d1c46b6272450c97ad6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.7.0.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"gitHead":"23383f90ef43cf50ce1065dc3f7a71ed3c264af5","_nodeVersion":"14.15.4","_npmVersion":"6.14.10","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.7.0_1621099758187_0.6881436768746068"},"_hasShrinkwrap":false},"1.0.0-alpha.8.0":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.8.0","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.8.0","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublish":"npm run build","postpublish":"./deploy.sh"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","rollup":"^2.39.0","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","dist":{"shasum":"c606d1a707b5c0547459149400dbf207a6ff1b5b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.8.0.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"gitHead":"7dd9f1ec0020229034edb75ca177bcf123019ead","_nodeVersion":"14.15.4","_npmVersion":"6.14.10","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.8.0_1621114239910_0.42059501061505267"},"_hasShrinkwrap":false},"1.0.0-alpha.9.0":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.9.0","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.9.0","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublish":"npm run build","postpublish":"./deploy.sh"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","rollup":"^2.39.0","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","dist":{"shasum":"4cd13e361fcc2024f451190e40deddba3be845aa","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.9.0.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"gitHead":"cc40086a49e275cc515db799b2130997ae896ad9","_nodeVersion":"14.15.4","_npmVersion":"6.14.10","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.9.0_1621150110040_0.4631653437961323"},"_hasShrinkwrap":false},"1.0.0-alpha.10.0":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.10.0","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.10.0","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublish":"npm run build","postpublish":"./deploy.sh"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","rollup":"^2.39.0","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","dist":{"shasum":"9109b7e6d43341d9f48505492aa37d531c20ea03","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.10.0.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"gitHead":"bea1292c0bb0e3f3cb837d055dfdcc2dd23e00c5","_nodeVersion":"14.15.4","_npmVersion":"6.14.10","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.10.0_1621163940557_0.6755338681295606"},"_hasShrinkwrap":false},"1.0.0-alpha.11.0":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.11.0","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.11.0","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublish":"npm run build","postpublish":"./deploy.sh"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","rollup":"^2.39.0","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","dist":{"shasum":"782e6f4d9aa524a04f90f21a285546ab844ba217","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.11.0.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"gitHead":"4584f05c967b13e7315aa7aa1502fb833bcd31ec","_nodeVersion":"14.15.4","_npmVersion":"6.14.10","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.11.0_1621167106409_0.4790135543487397"},"_hasShrinkwrap":false},"1.0.0-alpha.12.0":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.12.0","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.12.0","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublish":"npm run build","postpublish":"./deploy.sh"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","rollup":"^2.39.0","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","dist":{"shasum":"518eb94ef430d16b442ea0d00a3e258a308d5a3e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.12.0.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"gitHead":"fd20845d694848ceef0b0de4e87a720b6c0d8d8f","_nodeVersion":"14.15.4","_npmVersion":"6.14.10","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.12.0_1621174349683_0.2813582534777579"},"_hasShrinkwrap":false},"1.0.0-alpha.13":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.13","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.13","homepage":"https://github.com/simonseyock/jsdoc-type-pratt-parser#readme","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"repository":{"type":"git","url":"git+https://github.com/simonseyock/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/simonseyock/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","postpublish":"./deploy.sh","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"2cdedc9c36d69d1cc939fd052150f1ab9165b90c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.13.tgz"},"readme":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain)\n[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser)\n[![Code Style](https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript)](https://github.com/standard/ts-standard)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n\nThis project is a parser for jsdoc types. It is heavily inspired by the existing libraries catharsis and\n jsdoctypeparser, but does not use PEG.js, instead it is written as a pratt parser. \n* https://github.com/hegemonic/catharsis\n* https://github.com/jsdoctypeparser/jsdoctypeparser\n* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n\nLive Demo\n---------\n\nSimple live demo can be found at: https://simonseyock.github.io/jsdoc-type-pratt-parser/\n\nGetting started\n---------------\n\n```\nnpm install jsdoc-type-pratt-parser\n```\n\n\n```js\nimport { parse } from 'jsdoc-type-pratt-parser'\n\nconst result = parse('myType.<string>', 'closure')\n```\n\nThis library supports compatibility modes for catharsis and jsdoctypeparser. The provided transform functions attempt to\n transform the output to the expected output of the target library. This will not always be the same as some types are\n parsed differently. These modes are thought to make transition easier, but it is advised to use the native output as\n this will be more uniform and will contain more information.\n \nCatharsis compat mode:\n\n```js\nimport { parse, catharsisTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = catharsisTransform(parse('myType.<string>', 'closure'))\n```\n\nJsdoctypeparser compat mode:\n\n```js\nimport { parse, jtpTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = jtpTransform(parse('myType.<string>', 'closure'))\n```\n\nStringify:\n\n```js\nimport { stringify } from 'jsdoc-type-pratt-parser'\n\nconst val = stringify({ type: 'NAME', value: 'name'}) // -> 'name'\n```\n\nYou can customize the stringification by using `stringifyRules` and `transform`:\n\n```js\nimport { stringifyRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst rules = stringifyRules()\n\n// `result` is the current node and `transform` is a function to transform child nodes.\nrules.NAME = (result, transform) => 'something else'\n\nconst val = transform(rules, { type: 'NAME', value: 'name'}) // -> 'something else'\n```\n\nYou can traverse a result tree with the `traverse` function:\n\n```js\nimport { traverse } from 'jsdoc-type-pratt-parser'\n\n// property is the name of the property on parent that contains node\nfunction onEnter(node, parent, property) {\n    console.log(node.type)\n}\n\n// an onEnter and/or an onLeave function can be supplied\ntraverse({ type: 'NAME', value: 'name'}, onEnter, console.log)\n```\n\nYou can also build your own transform rules by implementing the `TransformRules<TransformResultType>` interface or you\ncan build upon the identity ruleset like this:\n\n```js\nimport { identityTransformRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst myRules = identityTransformRules()\nmyRules.NAME = () => ({ type: 'NAME', value: 'funky' })\n\nconst val = transform(myRules, result)\n```\n\nAvailable Grammars\n------------------\n\nThree different modes (grammars) are supported: `'jsdoc'`, `'closure'` and `'typescript'`\n\nTests Status\n------------\n\nThis parser runs most tests of https://github.com/hegemonic/catharsis and\n https://github.com/jsdoctypeparser/jsdoctypeparser. It compares the results of the different parsing libraries. If you\n want to find out where the output differs, look in the tests for the comments `// This seems to be an error of ...` or\n the `differ` keyword which indicates that differing results are produced.\n\nAPI Documentation\n-----------------\nAn API documentation can be found here: https://simonseyock.github.io/jsdoc-type-pratt-parser/docs/modules.html\n\nPerformance\n-----------\n\nA simple performance [comparision](benchmark/benchmark.js) using [Benchmark.js](https://benchmarkjs.com/) produced the following results:\n```\nTesting expression: Name\ncatharsis x 10,194 ops/sec ±22.98% (58 runs sampled)\njsdoc-type-pratt-parser x 238,233 ops/sec ±2.11% (84 runs sampled)\njsdoctypeparser x 29,201 ops/sec ±15.65% (76 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: Array<number>\ncatharsis x 5,063 ops/sec ±2.89% (82 runs sampled)\njsdoc-type-pratt-parser x 84,744 ops/sec ±5.34% (77 runs sampled)\njsdoctypeparser x 10,964 ops/sec ±24.98% (52 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: { keyA: Type<A | \"string val\" >, keyB: function(string, B): A }\ncatharsis x 206 ops/sec ±17.93% (59 runs sampled)\njsdoc-type-pratt-parser x 7,706 ops/sec ±12.20% (54 runs sampled)\njsdoctypeparser x 2,456 ops/sec ±22.06% (49 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\n```\n\ncatharsis was used without cache, as this is just a simple lookup table that could easily be implemented for any parser.\n \n","types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["stable",{"name":"main","prerelease":"alpha","channel":"alpha"}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"d74e6d9cf7b4c42eb2b354e9dfd6b1b5eb165f9e","readmeFilename":"README.md","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.13_1621427287926_0.8933546490286763"},"_hasShrinkwrap":false},"1.0.0-alpha.14":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.14","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.14","homepage":"https://github.com/simonseyock/jsdoc-type-pratt-parser#readme","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"repository":{"type":"git","url":"git+https://github.com/simonseyock/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/simonseyock/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","postpublish":"./deploy.sh","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"e94c2d6598e08aecae6ecf979e7c3e245057ce6e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.14.tgz"},"readme":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain)\n[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser)\n[![Code Style](https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript)](https://github.com/standard/ts-standard)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n\nThis project is a parser for jsdoc types. It is heavily inspired by the existing libraries catharsis and\n jsdoctypeparser, but does not use PEG.js, instead it is written as a pratt parser. \n* https://github.com/hegemonic/catharsis\n* https://github.com/jsdoctypeparser/jsdoctypeparser\n* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n\nLive Demo\n---------\n\nSimple live demo can be found at: https://simonseyock.github.io/jsdoc-type-pratt-parser/\n\nGetting started\n---------------\n\n```\nnpm install jsdoc-type-pratt-parser\n```\n\n\n```js\nimport { parse } from 'jsdoc-type-pratt-parser'\n\nconst result = parse('myType.<string>', 'closure')\n```\n\nThis library supports compatibility modes for catharsis and jsdoctypeparser. The provided transform functions attempt to\n transform the output to the expected output of the target library. This will not always be the same as some types are\n parsed differently. These modes are thought to make transition easier, but it is advised to use the native output as\n this will be more uniform and will contain more information.\n \nCatharsis compat mode:\n\n```js\nimport { parse, catharsisTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = catharsisTransform(parse('myType.<string>', 'closure'))\n```\n\nJsdoctypeparser compat mode:\n\n```js\nimport { parse, jtpTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = jtpTransform(parse('myType.<string>', 'closure'))\n```\n\nStringify:\n\n```js\nimport { stringify } from 'jsdoc-type-pratt-parser'\n\nconst val = stringify({ type: 'NAME', value: 'name'}) // -> 'name'\n```\n\nYou can customize the stringification by using `stringifyRules` and `transform`:\n\n```js\nimport { stringifyRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst rules = stringifyRules()\n\n// `result` is the current node and `transform` is a function to transform child nodes.\nrules.NAME = (result, transform) => 'something else'\n\nconst val = transform(rules, { type: 'NAME', value: 'name'}) // -> 'something else'\n```\n\nYou can traverse a result tree with the `traverse` function:\n\n```js\nimport { traverse } from 'jsdoc-type-pratt-parser'\n\n// property is the name of the property on parent that contains node\nfunction onEnter(node, parent, property) {\n    console.log(node.type)\n}\n\n// an onEnter and/or an onLeave function can be supplied\ntraverse({ type: 'NAME', value: 'name'}, onEnter, console.log)\n```\n\nYou can also build your own transform rules by implementing the `TransformRules<TransformResultType>` interface or you\ncan build upon the identity ruleset like this:\n\n```js\nimport { identityTransformRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst myRules = identityTransformRules()\nmyRules.NAME = () => ({ type: 'NAME', value: 'funky' })\n\nconst val = transform(myRules, result)\n```\n\nAvailable Grammars\n------------------\n\nThree different modes (grammars) are supported: `'jsdoc'`, `'closure'` and `'typescript'`\n\nTests Status\n------------\n\nThis parser runs most tests of https://github.com/hegemonic/catharsis and\n https://github.com/jsdoctypeparser/jsdoctypeparser. It compares the results of the different parsing libraries. If you\n want to find out where the output differs, look in the tests for the comments `// This seems to be an error of ...` or\n the `differ` keyword which indicates that differing results are produced.\n\nAPI Documentation\n-----------------\nAn API documentation can be found here: https://simonseyock.github.io/jsdoc-type-pratt-parser/docs/modules.html\n\nPerformance\n-----------\n\nA simple performance [comparision](benchmark/benchmark.js) using [Benchmark.js](https://benchmarkjs.com/) produced the following results:\n```\nTesting expression: Name\ncatharsis x 10,194 ops/sec ±22.98% (58 runs sampled)\njsdoc-type-pratt-parser x 238,233 ops/sec ±2.11% (84 runs sampled)\njsdoctypeparser x 29,201 ops/sec ±15.65% (76 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: Array<number>\ncatharsis x 5,063 ops/sec ±2.89% (82 runs sampled)\njsdoc-type-pratt-parser x 84,744 ops/sec ±5.34% (77 runs sampled)\njsdoctypeparser x 10,964 ops/sec ±24.98% (52 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: { keyA: Type<A | \"string val\" >, keyB: function(string, B): A }\ncatharsis x 206 ops/sec ±17.93% (59 runs sampled)\njsdoc-type-pratt-parser x 7,706 ops/sec ±12.20% (54 runs sampled)\njsdoctypeparser x 2,456 ops/sec ±22.06% (49 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\n```\n\ncatharsis was used without cache, as this is just a simple lookup table that could easily be implemented for any parser.\n \n","types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["stable",{"name":"main","prerelease":"alpha","channel":"alpha"}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"6f265d8f47a9ce68732e4c843880dc2ea6d18dd3","readmeFilename":"README.md","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.14_1621428060472_0.9469121096588717"},"_hasShrinkwrap":false},"1.0.0-alpha.15":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.15","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.15","homepage":"https://github.com/simonseyock/jsdoc-type-pratt-parser#readme","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"repository":{"type":"git","url":"git+https://github.com/simonseyock/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/simonseyock/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"e5e461b410f2beed87e5a5690fac558a627218b9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.15.tgz"},"readme":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain)\n[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser)\n[![Code Style](https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript)](https://github.com/standard/ts-standard)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n\nThis project is a parser for jsdoc types. It is heavily inspired by the existing libraries catharsis and\n jsdoctypeparser, but does not use PEG.js, instead it is written as a pratt parser. \n* https://github.com/hegemonic/catharsis\n* https://github.com/jsdoctypeparser/jsdoctypeparser\n* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n\nLive Demo\n---------\n\nSimple live demo can be found at: https://simonseyock.github.io/jsdoc-type-pratt-parser/\n\nGetting started\n---------------\n\n```\nnpm install jsdoc-type-pratt-parser\n```\n\n\n```js\nimport { parse } from 'jsdoc-type-pratt-parser'\n\nconst result = parse('myType.<string>', 'closure')\n```\n\nThis library supports compatibility modes for catharsis and jsdoctypeparser. The provided transform functions attempt to\n transform the output to the expected output of the target library. This will not always be the same as some types are\n parsed differently. These modes are thought to make transition easier, but it is advised to use the native output as\n this will be more uniform and will contain more information.\n \nCatharsis compat mode:\n\n```js\nimport { parse, catharsisTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = catharsisTransform(parse('myType.<string>', 'closure'))\n```\n\nJsdoctypeparser compat mode:\n\n```js\nimport { parse, jtpTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = jtpTransform(parse('myType.<string>', 'closure'))\n```\n\nStringify:\n\n```js\nimport { stringify } from 'jsdoc-type-pratt-parser'\n\nconst val = stringify({ type: 'NAME', value: 'name'}) // -> 'name'\n```\n\nYou can customize the stringification by using `stringifyRules` and `transform`:\n\n```js\nimport { stringifyRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst rules = stringifyRules()\n\n// `result` is the current node and `transform` is a function to transform child nodes.\nrules.NAME = (result, transform) => 'something else'\n\nconst val = transform(rules, { type: 'NAME', value: 'name'}) // -> 'something else'\n```\n\nYou can traverse a result tree with the `traverse` function:\n\n```js\nimport { traverse } from 'jsdoc-type-pratt-parser'\n\n// property is the name of the property on parent that contains node\nfunction onEnter(node, parent, property) {\n    console.log(node.type)\n}\n\n// an onEnter and/or an onLeave function can be supplied\ntraverse({ type: 'NAME', value: 'name'}, onEnter, console.log)\n```\n\nYou can also build your own transform rules by implementing the `TransformRules<TransformResultType>` interface or you\ncan build upon the identity ruleset like this:\n\n```js\nimport { identityTransformRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst myRules = identityTransformRules()\nmyRules.NAME = () => ({ type: 'NAME', value: 'funky' })\n\nconst val = transform(myRules, result)\n```\n\nAvailable Grammars\n------------------\n\nThree different modes (grammars) are supported: `'jsdoc'`, `'closure'` and `'typescript'`\n\nTests Status\n------------\n\nThis parser runs most tests of https://github.com/hegemonic/catharsis and\n https://github.com/jsdoctypeparser/jsdoctypeparser. It compares the results of the different parsing libraries. If you\n want to find out where the output differs, look in the tests for the comments `// This seems to be an error of ...` or\n the `differ` keyword which indicates that differing results are produced.\n\nAPI Documentation\n-----------------\nAn API documentation can be found here: https://simonseyock.github.io/jsdoc-type-pratt-parser/docs/modules.html\n\nPerformance\n-----------\n\nA simple performance [comparision](benchmark/benchmark.js) using [Benchmark.js](https://benchmarkjs.com/) produced the following results:\n```\nTesting expression: Name\ncatharsis x 10,194 ops/sec ±22.98% (58 runs sampled)\njsdoc-type-pratt-parser x 238,233 ops/sec ±2.11% (84 runs sampled)\njsdoctypeparser x 29,201 ops/sec ±15.65% (76 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: Array<number>\ncatharsis x 5,063 ops/sec ±2.89% (82 runs sampled)\njsdoc-type-pratt-parser x 84,744 ops/sec ±5.34% (77 runs sampled)\njsdoctypeparser x 10,964 ops/sec ±24.98% (52 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: { keyA: Type<A | \"string val\" >, keyB: function(string, B): A }\ncatharsis x 206 ops/sec ±17.93% (59 runs sampled)\njsdoc-type-pratt-parser x 7,706 ops/sec ±12.20% (54 runs sampled)\njsdoctypeparser x 2,456 ops/sec ±22.06% (49 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\n```\n\ncatharsis was used without cache, as this is just a simple lookup table that could easily be implemented for any parser.\n \n","types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["stable",{"name":"main","prerelease":"alpha","channel":"alpha"}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"5d756c4091773f20c9837520a590581d6aa2918d","readmeFilename":"README.md","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.15_1621429718784_0.49996527401797675"},"_hasShrinkwrap":false},"1.0.0-alpha.16":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.16","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.16","homepage":"https://github.com/simonseyock/jsdoc-type-pratt-parser#readme","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"repository":{"type":"git","url":"git+https://github.com/simonseyock/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/simonseyock/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"27b858655dcc4405f2b83ffbc65977b64c27b3d5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.16.tgz"},"readme":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain)\n[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser)\n[![Code Style](https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript)](https://github.com/standard/ts-standard)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n\nThis project is a parser for jsdoc types. It is heavily inspired by the existing libraries catharsis and\n jsdoctypeparser, but does not use PEG.js, instead it is written as a pratt parser. \n* https://github.com/hegemonic/catharsis\n* https://github.com/jsdoctypeparser/jsdoctypeparser\n* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n\nLive Demo\n---------\n\nSimple live demo can be found at: https://simonseyock.github.io/jsdoc-type-pratt-parser/\n\nGetting started\n---------------\n\n```\nnpm install jsdoc-type-pratt-parser\n```\n\n\n```js\nimport { parse } from 'jsdoc-type-pratt-parser'\n\nconst result = parse('myType.<string>', 'closure')\n```\n\nThis library supports compatibility modes for catharsis and jsdoctypeparser. The provided transform functions attempt to\n transform the output to the expected output of the target library. This will not always be the same as some types are\n parsed differently. These modes are thought to make transition easier, but it is advised to use the native output as\n this will be more uniform and will contain more information.\n \nCatharsis compat mode:\n\n```js\nimport { parse, catharsisTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = catharsisTransform(parse('myType.<string>', 'closure'))\n```\n\nJsdoctypeparser compat mode:\n\n```js\nimport { parse, jtpTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = jtpTransform(parse('myType.<string>', 'closure'))\n```\n\nStringify:\n\n```js\nimport { stringify } from 'jsdoc-type-pratt-parser'\n\nconst val = stringify({ type: 'NAME', value: 'name'}) // -> 'name'\n```\n\nYou can customize the stringification by using `stringifyRules` and `transform`:\n\n```js\nimport { stringifyRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst rules = stringifyRules()\n\n// `result` is the current node and `transform` is a function to transform child nodes.\nrules.NAME = (result, transform) => 'something else'\n\nconst val = transform(rules, { type: 'NAME', value: 'name'}) // -> 'something else'\n```\n\nYou can traverse a result tree with the `traverse` function:\n\n```js\nimport { traverse } from 'jsdoc-type-pratt-parser'\n\n// property is the name of the property on parent that contains node\nfunction onEnter(node, parent, property) {\n    console.log(node.type)\n}\n\n// an onEnter and/or an onLeave function can be supplied\ntraverse({ type: 'NAME', value: 'name'}, onEnter, console.log)\n```\n\nYou can also build your own transform rules by implementing the `TransformRules<TransformResultType>` interface or you\ncan build upon the identity ruleset like this:\n\n```js\nimport { identityTransformRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst myRules = identityTransformRules()\nmyRules.NAME = () => ({ type: 'NAME', value: 'funky' })\n\nconst val = transform(myRules, result)\n```\n\nAvailable Grammars\n------------------\n\nThree different modes (grammars) are supported: `'jsdoc'`, `'closure'` and `'typescript'`\n\nTests Status\n------------\n\nThis parser runs most tests of https://github.com/hegemonic/catharsis and\n https://github.com/jsdoctypeparser/jsdoctypeparser. It compares the results of the different parsing libraries. If you\n want to find out where the output differs, look in the tests for the comments `// This seems to be an error of ...` or\n the `differ` keyword which indicates that differing results are produced.\n\nAPI Documentation\n-----------------\nAn API documentation can be found here: https://simonseyock.github.io/jsdoc-type-pratt-parser/docs/modules.html\n\nPerformance\n-----------\n\nA simple performance [comparision](benchmark/benchmark.js) using [Benchmark.js](https://benchmarkjs.com/) produced the following results:\n```\nTesting expression: Name\ncatharsis x 10,194 ops/sec ±22.98% (58 runs sampled)\njsdoc-type-pratt-parser x 238,233 ops/sec ±2.11% (84 runs sampled)\njsdoctypeparser x 29,201 ops/sec ±15.65% (76 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: Array<number>\ncatharsis x 5,063 ops/sec ±2.89% (82 runs sampled)\njsdoc-type-pratt-parser x 84,744 ops/sec ±5.34% (77 runs sampled)\njsdoctypeparser x 10,964 ops/sec ±24.98% (52 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: { keyA: Type<A | \"string val\" >, keyB: function(string, B): A }\ncatharsis x 206 ops/sec ±17.93% (59 runs sampled)\njsdoc-type-pratt-parser x 7,706 ops/sec ±12.20% (54 runs sampled)\njsdoctypeparser x 2,456 ops/sec ±22.06% (49 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\n```\n\ncatharsis was used without cache, as this is just a simple lookup table that could easily be implemented for any parser.\n \n","types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["stable",{"name":"main","prerelease":"alpha","channel":"alpha"}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"40d983e2cd9e25d9925032f608fe947142374877","readmeFilename":"README.md","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.16_1621430220127_0.7102679689439444"},"_hasShrinkwrap":false},"1.0.0-alpha.17":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.17","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.17","homepage":"https://github.com/simonseyock/jsdoc-type-pratt-parser#readme","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"repository":{"type":"git","url":"git+https://github.com/simonseyock/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/simonseyock/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"f514646634315cee9e7ae6f7826c6199f08b511f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.17.tgz"},"readme":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain)\n[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser)\n[![Code Style](https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript)](https://github.com/standard/ts-standard)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n\nThis project is a parser for jsdoc types. It is heavily inspired by the existing libraries catharsis and\n jsdoctypeparser, but does not use PEG.js, instead it is written as a pratt parser. \n* https://github.com/hegemonic/catharsis\n* https://github.com/jsdoctypeparser/jsdoctypeparser\n* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n\nLive Demo\n---------\n\nSimple live demo can be found at: https://simonseyock.github.io/jsdoc-type-pratt-parser/\n\nGetting started\n---------------\n\n```\nnpm install jsdoc-type-pratt-parser\n```\n\n\n```js\nimport { parse } from 'jsdoc-type-pratt-parser'\n\nconst result = parse('myType.<string>', 'closure')\n```\n\nThis library supports compatibility modes for catharsis and jsdoctypeparser. The provided transform functions attempt to\n transform the output to the expected output of the target library. This will not always be the same as some types are\n parsed differently. These modes are thought to make transition easier, but it is advised to use the native output as\n this will be more uniform and will contain more information.\n \nCatharsis compat mode:\n\n```js\nimport { parse, catharsisTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = catharsisTransform(parse('myType.<string>', 'closure'))\n```\n\nJsdoctypeparser compat mode:\n\n```js\nimport { parse, jtpTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = jtpTransform(parse('myType.<string>', 'closure'))\n```\n\nStringify:\n\n```js\nimport { stringify } from 'jsdoc-type-pratt-parser'\n\nconst val = stringify({ type: 'NAME', value: 'name'}) // -> 'name'\n```\n\nYou can customize the stringification by using `stringifyRules` and `transform`:\n\n```js\nimport { stringifyRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst rules = stringifyRules()\n\n// `result` is the current node and `transform` is a function to transform child nodes.\nrules.NAME = (result, transform) => 'something else'\n\nconst val = transform(rules, { type: 'NAME', value: 'name'}) // -> 'something else'\n```\n\nYou can traverse a result tree with the `traverse` function:\n\n```js\nimport { traverse } from 'jsdoc-type-pratt-parser'\n\n// property is the name of the property on parent that contains node\nfunction onEnter(node, parent, property) {\n    console.log(node.type)\n}\n\n// an onEnter and/or an onLeave function can be supplied\ntraverse({ type: 'NAME', value: 'name'}, onEnter, console.log)\n```\n\nYou can also build your own transform rules by implementing the `TransformRules<TransformResultType>` interface or you\ncan build upon the identity ruleset like this:\n\n```js\nimport { identityTransformRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst myRules = identityTransformRules()\nmyRules.NAME = () => ({ type: 'NAME', value: 'funky' })\n\nconst val = transform(myRules, result)\n```\n\nAvailable Grammars\n------------------\n\nThree different modes (grammars) are supported: `'jsdoc'`, `'closure'` and `'typescript'`\n\nTests Status\n------------\n\nThis parser runs most tests of https://github.com/hegemonic/catharsis and\n https://github.com/jsdoctypeparser/jsdoctypeparser. It compares the results of the different parsing libraries. If you\n want to find out where the output differs, look in the tests for the comments `// This seems to be an error of ...` or\n the `differ` keyword which indicates that differing results are produced.\n\nAPI Documentation\n-----------------\nAn API documentation can be found here: https://simonseyock.github.io/jsdoc-type-pratt-parser/docs/modules.html\n\nPerformance\n-----------\n\nA simple performance [comparision](benchmark/benchmark.js) using [Benchmark.js](https://benchmarkjs.com/) produced the following results:\n```\nTesting expression: Name\ncatharsis x 10,194 ops/sec ±22.98% (58 runs sampled)\njsdoc-type-pratt-parser x 238,233 ops/sec ±2.11% (84 runs sampled)\njsdoctypeparser x 29,201 ops/sec ±15.65% (76 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: Array<number>\ncatharsis x 5,063 ops/sec ±2.89% (82 runs sampled)\njsdoc-type-pratt-parser x 84,744 ops/sec ±5.34% (77 runs sampled)\njsdoctypeparser x 10,964 ops/sec ±24.98% (52 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: { keyA: Type<A | \"string val\" >, keyB: function(string, B): A }\ncatharsis x 206 ops/sec ±17.93% (59 runs sampled)\njsdoc-type-pratt-parser x 7,706 ops/sec ±12.20% (54 runs sampled)\njsdoctypeparser x 2,456 ops/sec ±22.06% (49 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\n```\n\ncatharsis was used without cache, as this is just a simple lookup table that could easily be implemented for any parser.\n \n","types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["stable",{"name":"main","prerelease":"alpha","channel":"alpha"}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"0487ee72c0037c78099e551f3c165a536877921e","readmeFilename":"README.md","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.17_1621430503489_0.2514761370855523"},"_hasShrinkwrap":false},"1.0.0-alpha.18":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.18","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.18","homepage":"https://github.com/simonseyock/jsdoc-type-pratt-parser#readme","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"repository":{"type":"git","url":"git+https://github.com/simonseyock/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/simonseyock/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"95b9b3dd2302bc901945e0e8049c6df026719af1","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.18.tgz"},"readme":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain)\n[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser)\n[![Code Style](https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript)](https://github.com/standard/ts-standard)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n\nThis project is a parser for jsdoc types. It is heavily inspired by the existing libraries catharsis and\n jsdoctypeparser, but does not use PEG.js, instead it is written as a pratt parser. \n* https://github.com/hegemonic/catharsis\n* https://github.com/jsdoctypeparser/jsdoctypeparser\n* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n\nLive Demo\n---------\n\nSimple live demo can be found at: https://simonseyock.github.io/jsdoc-type-pratt-parser/\n\nGetting started\n---------------\n\n```\nnpm install jsdoc-type-pratt-parser\n```\n\n\n```js\nimport { parse } from 'jsdoc-type-pratt-parser'\n\nconst result = parse('myType.<string>', 'closure')\n```\n\nThis library supports compatibility modes for catharsis and jsdoctypeparser. The provided transform functions attempt to\n transform the output to the expected output of the target library. This will not always be the same as some types are\n parsed differently. These modes are thought to make transition easier, but it is advised to use the native output as\n this will be more uniform and will contain more information.\n \nCatharsis compat mode:\n\n```js\nimport { parse, catharsisTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = catharsisTransform(parse('myType.<string>', 'closure'))\n```\n\nJsdoctypeparser compat mode:\n\n```js\nimport { parse, jtpTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = jtpTransform(parse('myType.<string>', 'closure'))\n```\n\nStringify:\n\n```js\nimport { stringify } from 'jsdoc-type-pratt-parser'\n\nconst val = stringify({ type: 'NAME', value: 'name'}) // -> 'name'\n```\n\nYou can customize the stringification by using `stringifyRules` and `transform`:\n\n```js\nimport { stringifyRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst rules = stringifyRules()\n\n// `result` is the current node and `transform` is a function to transform child nodes.\nrules.NAME = (result, transform) => 'something else'\n\nconst val = transform(rules, { type: 'NAME', value: 'name'}) // -> 'something else'\n```\n\nYou can traverse a result tree with the `traverse` function:\n\n```js\nimport { traverse } from 'jsdoc-type-pratt-parser'\n\n// property is the name of the property on parent that contains node\nfunction onEnter(node, parent, property) {\n    console.log(node.type)\n}\n\n// an onEnter and/or an onLeave function can be supplied\ntraverse({ type: 'NAME', value: 'name'}, onEnter, console.log)\n```\n\nYou can also build your own transform rules by implementing the `TransformRules<TransformResultType>` interface or you\ncan build upon the identity ruleset like this:\n\n```js\nimport { identityTransformRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst myRules = identityTransformRules()\nmyRules.NAME = () => ({ type: 'NAME', value: 'funky' })\n\nconst val = transform(myRules, result)\n```\n\nAvailable Grammars\n------------------\n\nThree different modes (grammars) are supported: `'jsdoc'`, `'closure'` and `'typescript'`\n\nTests Status\n------------\n\nThis parser runs most tests of https://github.com/hegemonic/catharsis and\n https://github.com/jsdoctypeparser/jsdoctypeparser. It compares the results of the different parsing libraries. If you\n want to find out where the output differs, look in the tests for the comments `// This seems to be an error of ...` or\n the `differ` keyword which indicates that differing results are produced.\n\nAPI Documentation\n-----------------\nAn API documentation can be found here: https://simonseyock.github.io/jsdoc-type-pratt-parser/docs/modules.html\n\nPerformance\n-----------\n\nA simple performance [comparision](benchmark/benchmark.js) using [Benchmark.js](https://benchmarkjs.com/) produced the following results:\n```\nTesting expression: Name\ncatharsis x 10,194 ops/sec ±22.98% (58 runs sampled)\njsdoc-type-pratt-parser x 238,233 ops/sec ±2.11% (84 runs sampled)\njsdoctypeparser x 29,201 ops/sec ±15.65% (76 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: Array<number>\ncatharsis x 5,063 ops/sec ±2.89% (82 runs sampled)\njsdoc-type-pratt-parser x 84,744 ops/sec ±5.34% (77 runs sampled)\njsdoctypeparser x 10,964 ops/sec ±24.98% (52 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: { keyA: Type<A | \"string val\" >, keyB: function(string, B): A }\ncatharsis x 206 ops/sec ±17.93% (59 runs sampled)\njsdoc-type-pratt-parser x 7,706 ops/sec ±12.20% (54 runs sampled)\njsdoctypeparser x 2,456 ops/sec ±22.06% (49 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\n```\n\ncatharsis was used without cache, as this is just a simple lookup table that could easily be implemented for any parser.\n \n","types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["stable",{"name":"main","prerelease":"alpha","channel":"alpha"}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"2f9fd0e21998991b044f200a1f314d06af3d450e","readmeFilename":"README.md","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.18_1621430951997_0.2855737149397257"},"_hasShrinkwrap":false},"1.0.0-alpha.19":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.19","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.19","homepage":"https://github.com/simonseyock/jsdoc-type-pratt-parser#readme","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"repository":{"type":"git","url":"git+https://github.com/simonseyock/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/simonseyock/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"65a40854c86c752b35255998b496fa7bf0b6d0bc","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.19.tgz"},"readme":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/node.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain)\n[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser/alpha)](https://www.npmjs.com/package/jsdoc-type-pratt-parser)\n[![Code Style](https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript)](https://github.com/standard/ts-standard)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n\nThis project is a parser for jsdoc types. It is heavily inspired by the existing libraries catharsis and\n jsdoctypeparser, but does not use PEG.js, instead it is written as a pratt parser. \n* https://github.com/hegemonic/catharsis\n* https://github.com/jsdoctypeparser/jsdoctypeparser\n* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n\nLive Demo\n---------\n\nSimple live demo can be found at: https://simonseyock.github.io/jsdoc-type-pratt-parser/\n\nGetting started\n---------------\n\n```\nnpm install jsdoc-type-pratt-parser@alpha\n```\n\n\n```js\nimport { parse } from 'jsdoc-type-pratt-parser'\n\nconst result = parse('myType.<string>', 'closure')\n```\n\nThis library supports compatibility modes for catharsis and jsdoctypeparser. The provided transform functions attempt to\n transform the output to the expected output of the target library. This will not always be the same as some types are\n parsed differently. These modes are thought to make transition easier, but it is advised to use the native output as\n this will be more uniform and will contain more information.\n \nCatharsis compat mode:\n\n```js\nimport { parse, catharsisTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = catharsisTransform(parse('myType.<string>', 'closure'))\n```\n\nJsdoctypeparser compat mode:\n\n```js\nimport { parse, jtpTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = jtpTransform(parse('myType.<string>', 'closure'))\n```\n\nStringify:\n\n```js\nimport { stringify } from 'jsdoc-type-pratt-parser'\n\nconst val = stringify({ type: 'NAME', value: 'name'}) // -> 'name'\n```\n\nYou can customize the stringification by using `stringifyRules` and `transform`:\n\n```js\nimport { stringifyRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst rules = stringifyRules()\n\n// `result` is the current node and `transform` is a function to transform child nodes.\nrules.NAME = (result, transform) => 'something else'\n\nconst val = transform(rules, { type: 'NAME', value: 'name'}) // -> 'something else'\n```\n\nYou can traverse a result tree with the `traverse` function:\n\n```js\nimport { traverse } from 'jsdoc-type-pratt-parser'\n\n// property is the name of the property on parent that contains node\nfunction onEnter(node, parent, property) {\n    console.log(node.type)\n}\n\n// an onEnter and/or an onLeave function can be supplied\ntraverse({ type: 'NAME', value: 'name'}, onEnter, console.log)\n```\n\nYou can also build your own transform rules by implementing the `TransformRules<TransformResultType>` interface or you\ncan build upon the identity ruleset like this:\n\n```js\nimport { identityTransformRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst myRules = identityTransformRules()\nmyRules.NAME = () => ({ type: 'NAME', value: 'funky' })\n\nconst val = transform(myRules, result)\n```\n\nAvailable Grammars\n------------------\n\nThree different modes (grammars) are supported: `'jsdoc'`, `'closure'` and `'typescript'`\n\nTests Status\n------------\n\nThis parser runs most tests of https://github.com/hegemonic/catharsis and\n https://github.com/jsdoctypeparser/jsdoctypeparser. It compares the results of the different parsing libraries. If you\n want to find out where the output differs, look in the tests for the comments `// This seems to be an error of ...` or\n the `differ` keyword which indicates that differing results are produced.\n\nAPI Documentation\n-----------------\nAn API documentation can be found here: https://simonseyock.github.io/jsdoc-type-pratt-parser/docs/modules.html\n\nPerformance\n-----------\n\nA simple performance [comparision](benchmark/benchmark.js) using [Benchmark.js](https://benchmarkjs.com/) produced the following results:\n```\nTesting expression: Name\ncatharsis x 10,194 ops/sec ±22.98% (58 runs sampled)\njsdoc-type-pratt-parser x 238,233 ops/sec ±2.11% (84 runs sampled)\njsdoctypeparser x 29,201 ops/sec ±15.65% (76 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: Array<number>\ncatharsis x 5,063 ops/sec ±2.89% (82 runs sampled)\njsdoc-type-pratt-parser x 84,744 ops/sec ±5.34% (77 runs sampled)\njsdoctypeparser x 10,964 ops/sec ±24.98% (52 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: { keyA: Type<A | \"string val\" >, keyB: function(string, B): A }\ncatharsis x 206 ops/sec ±17.93% (59 runs sampled)\njsdoc-type-pratt-parser x 7,706 ops/sec ±12.20% (54 runs sampled)\njsdoctypeparser x 2,456 ops/sec ±22.06% (49 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\n```\n\ncatharsis was used without cache, as this is just a simple lookup table that could easily be implemented for any parser.\n \n","types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["stable",{"name":"main","prerelease":"alpha","channel":"alpha"}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"017ccdc03bc6042c9f3f7a4dfa40f38ac5810455","readmeFilename":"README.md","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.19_1621431534652_0.8761659875660561"},"_hasShrinkwrap":false},"1.0.0-alpha.20":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.20","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.20","homepage":"https://github.com/simonseyock/jsdoc-type-pratt-parser#readme","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"repository":{"type":"git","url":"git+https://github.com/simonseyock/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/simonseyock/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"2e7cb67dbe71ced90b0fb1b4ba7f1719b873adba","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.20.tgz"},"readme":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain)\n[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser/alpha)](https://www.npmjs.com/package/jsdoc-type-pratt-parser)\n[![Code Style](https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript)](https://github.com/standard/ts-standard)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n\nThis project is a parser for jsdoc types. It is heavily inspired by the existing libraries catharsis and\n jsdoctypeparser, but does not use PEG.js, instead it is written as a pratt parser. \n* https://github.com/hegemonic/catharsis\n* https://github.com/jsdoctypeparser/jsdoctypeparser\n* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n\nLive Demo\n---------\n\nSimple live demo can be found at: https://simonseyock.github.io/jsdoc-type-pratt-parser/\n\nGetting started\n---------------\n\n```\nnpm install jsdoc-type-pratt-parser@alpha\n```\n\n\n```js\nimport { parse } from 'jsdoc-type-pratt-parser'\n\nconst result = parse('myType.<string>', 'closure')\n```\n\nThis library supports compatibility modes for catharsis and jsdoctypeparser. The provided transform functions attempt to\n transform the output to the expected output of the target library. This will not always be the same as some types are\n parsed differently. These modes are thought to make transition easier, but it is advised to use the native output as\n this will be more uniform and will contain more information.\n \nCatharsis compat mode:\n\n```js\nimport { parse, catharsisTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = catharsisTransform(parse('myType.<string>', 'closure'))\n```\n\nJsdoctypeparser compat mode:\n\n```js\nimport { parse, jtpTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = jtpTransform(parse('myType.<string>', 'closure'))\n```\n\nStringify:\n\n```js\nimport { stringify } from 'jsdoc-type-pratt-parser'\n\nconst val = stringify({ type: 'NAME', value: 'name'}) // -> 'name'\n```\n\nYou can customize the stringification by using `stringifyRules` and `transform`:\n\n```js\nimport { stringifyRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst rules = stringifyRules()\n\n// `result` is the current node and `transform` is a function to transform child nodes.\nrules.NAME = (result, transform) => 'something else'\n\nconst val = transform(rules, { type: 'NAME', value: 'name'}) // -> 'something else'\n```\n\nYou can traverse a result tree with the `traverse` function:\n\n```js\nimport { traverse } from 'jsdoc-type-pratt-parser'\n\n// property is the name of the property on parent that contains node\nfunction onEnter(node, parent, property) {\n    console.log(node.type)\n}\n\n// an onEnter and/or an onLeave function can be supplied\ntraverse({ type: 'NAME', value: 'name'}, onEnter, console.log)\n```\n\nYou can also build your own transform rules by implementing the `TransformRules<TransformResultType>` interface or you\ncan build upon the identity ruleset like this:\n\n```js\nimport { identityTransformRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst myRules = identityTransformRules()\nmyRules.NAME = () => ({ type: 'NAME', value: 'funky' })\n\nconst val = transform(myRules, result)\n```\n\nAvailable Grammars\n------------------\n\nThree different modes (grammars) are supported: `'jsdoc'`, `'closure'` and `'typescript'`\n\nTests Status\n------------\n\nThis parser runs most tests of https://github.com/hegemonic/catharsis and\n https://github.com/jsdoctypeparser/jsdoctypeparser. It compares the results of the different parsing libraries. If you\n want to find out where the output differs, look in the tests for the comments `// This seems to be an error of ...` or\n the `differ` keyword which indicates that differing results are produced.\n\nAPI Documentation\n-----------------\nAn API documentation can be found here: https://simonseyock.github.io/jsdoc-type-pratt-parser/docs/modules.html\n\nPerformance\n-----------\n\nA simple performance [comparision](benchmark/benchmark.js) using [Benchmark.js](https://benchmarkjs.com/) produced the following results:\n```\nTesting expression: Name\ncatharsis x 10,194 ops/sec ±22.98% (58 runs sampled)\njsdoc-type-pratt-parser x 238,233 ops/sec ±2.11% (84 runs sampled)\njsdoctypeparser x 29,201 ops/sec ±15.65% (76 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: Array<number>\ncatharsis x 5,063 ops/sec ±2.89% (82 runs sampled)\njsdoc-type-pratt-parser x 84,744 ops/sec ±5.34% (77 runs sampled)\njsdoctypeparser x 10,964 ops/sec ±24.98% (52 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: { keyA: Type<A | \"string val\" >, keyB: function(string, B): A }\ncatharsis x 206 ops/sec ±17.93% (59 runs sampled)\njsdoc-type-pratt-parser x 7,706 ops/sec ±12.20% (54 runs sampled)\njsdoctypeparser x 2,456 ops/sec ±22.06% (49 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\n```\n\ncatharsis was used without cache, as this is just a simple lookup table that could easily be implemented for any parser.\n \n","types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["stable",{"name":"main","prerelease":"alpha","channel":"alpha"}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"d56093133e367aa69b0239ecdc8536f1c7a98e86","readmeFilename":"README.md","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.20_1621434110911_0.89978361956"},"_hasShrinkwrap":false},"1.0.0-alpha.21":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.21","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.21","homepage":"https://github.com/simonseyock/jsdoc-type-pratt-parser#readme","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"repository":{"type":"git","url":"git+https://github.com/simonseyock/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/simonseyock/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"d0e2e619fb907132beb4d033c7a3d1607ad2f89d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.21.tgz"},"readme":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain)\n[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser/alpha)](https://www.npmjs.com/package/jsdoc-type-pratt-parser)\n[![Code Style](https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript)](https://github.com/standard/ts-standard)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n\nThis project is a parser for jsdoc types. It is heavily inspired by the existing libraries catharsis and\n jsdoctypeparser, but does not use PEG.js, instead it is written as a pratt parser. \n* https://github.com/hegemonic/catharsis\n* https://github.com/jsdoctypeparser/jsdoctypeparser\n* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n\nLive Demo\n---------\n\nA simple live demo to test expressions can be found at: https://simonseyock.github.io/jsdoc-type-pratt-parser/\n\nGetting started\n---------------\n\n```\nnpm install jsdoc-type-pratt-parser@alpha\n```\n\n```js\nimport { parse } from 'jsdoc-type-pratt-parser'\n\nconst result = parse('myType.<string>', 'closure')\n```\n\nThis library supports compatibility modes for catharsis and jsdoctypeparser. The provided transform functions attempt to\n transform the output to the expected output of the target library. This will not always be the same as some types are\n parsed differently. These modes are thought to make transition easier, but it is advised to use the native output as\n this will be more uniform and will contain more information.\n \nCatharsis compat mode:\n\n```js\nimport { parse, catharsisTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = catharsisTransform(parse('myType.<string>', 'closure'))\n```\n\nJsdoctypeparser compat mode:\n\n```js\nimport { parse, jtpTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = jtpTransform(parse('myType.<string>', 'closure'))\n```\n\nStringify:\n\n```js\nimport { stringify } from 'jsdoc-type-pratt-parser'\n\nconst val = stringify({ type: 'NAME', value: 'name'}) // -> 'name'\n```\n\nYou can customize the stringification by using `stringifyRules` and `transform`:\n\n```js\nimport { stringifyRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst rules = stringifyRules()\n\n// `result` is the current node and `transform` is a function to transform child nodes.\nrules.NAME = (result, transform) => 'something else'\n\nconst val = transform(rules, { type: 'NAME', value: 'name'}) // -> 'something else'\n```\n\nYou can traverse a result tree with the `traverse` function:\n\n```js\nimport { traverse } from 'jsdoc-type-pratt-parser'\n\n// property is the name of the property on parent that contains node\nfunction onEnter(node, parent, property) {\n    console.log(node.type)\n}\n\n// an onEnter and/or an onLeave function can be supplied\ntraverse({ type: 'NAME', value: 'name'}, onEnter, console.log)\n```\n\nYou can also build your own transform rules by implementing the `TransformRules<TransformResultType>` interface or you\ncan build upon the identity ruleset like this:\n\n```js\nimport { identityTransformRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst myRules = identityTransformRules()\nmyRules.NAME = () => ({ type: 'NAME', value: 'funky' })\n\nconst val = transform(myRules, result)\n```\n\nAvailable Grammars\n------------------\n\nThree different modes (grammars) are supported: `'jsdoc'`, `'closure'` and `'typescript'`\n\nTests Status\n------------\n\nThis parser runs most tests of https://github.com/hegemonic/catharsis and\n https://github.com/jsdoctypeparser/jsdoctypeparser. It compares the results of the different parsing libraries. If you\n want to find out where the output differs, look in the tests for the comments `// This seems to be an error of ...` or\n the `differ` keyword which indicates that differing results are produced.\n\nAPI Documentation\n-----------------\nAn API documentation can be found here: https://simonseyock.github.io/jsdoc-type-pratt-parser/docs/modules.html\n\nPerformance\n-----------\n\nA simple performance [comparision](benchmark/benchmark.js) using [Benchmark.js](https://benchmarkjs.com/) produced the following results:\n```\nTesting expression: Name\ncatharsis x 10,194 ops/sec ±22.98% (58 runs sampled)\njsdoc-type-pratt-parser x 238,233 ops/sec ±2.11% (84 runs sampled)\njsdoctypeparser x 29,201 ops/sec ±15.65% (76 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: Array<number>\ncatharsis x 5,063 ops/sec ±2.89% (82 runs sampled)\njsdoc-type-pratt-parser x 84,744 ops/sec ±5.34% (77 runs sampled)\njsdoctypeparser x 10,964 ops/sec ±24.98% (52 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: { keyA: Type<A | \"string val\" >, keyB: function(string, B): A }\ncatharsis x 206 ops/sec ±17.93% (59 runs sampled)\njsdoc-type-pratt-parser x 7,706 ops/sec ±12.20% (54 runs sampled)\njsdoctypeparser x 2,456 ops/sec ±22.06% (49 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\n```\n\ncatharsis was used without cache, as this is just a simple lookup table that could easily be implemented for any parser.\n \n","types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["stable",{"name":"main","prerelease":"alpha","channel":"alpha"}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"a7f15c4c79a03ac36e02577bf98c9bf532e8174d","readmeFilename":"README.md","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.21_1621777099231_0.9342182558320584"},"_hasShrinkwrap":false},"1.0.0-alpha.22":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.22","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.22","homepage":"https://github.com/simonseyock/jsdoc-type-pratt-parser#readme","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"repository":{"type":"git","url":"git+https://github.com/simonseyock/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/simonseyock/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"9280e8224a12bfa002c8f344a46e817545e54b8c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.22.tgz"},"readme":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain)\n[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser/alpha)](https://www.npmjs.com/package/jsdoc-type-pratt-parser)\n[![Code Style](https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript)](https://github.com/standard/ts-standard)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n\nThis project is a parser for jsdoc types. It is heavily inspired by the existing libraries catharsis and\n jsdoctypeparser, but does not use PEG.js, instead it is written as a pratt parser. \n* https://github.com/hegemonic/catharsis\n* https://github.com/jsdoctypeparser/jsdoctypeparser\n* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n\nLive Demo\n---------\n\nA simple live demo to test expressions can be found at: https://simonseyock.github.io/jsdoc-type-pratt-parser/\n\nGetting started\n---------------\n\n```\nnpm install jsdoc-type-pratt-parser@alpha\n```\n\n```js\nimport { parse } from 'jsdoc-type-pratt-parser'\n\nconst result = parse('myType.<string>', 'closure')\n```\n\nThis library supports compatibility modes for catharsis and jsdoctypeparser. The provided transform functions attempt to\n transform the output to the expected output of the target library. This will not always be the same as some types are\n parsed differently. These modes are thought to make transition easier, but it is advised to use the native output as\n this will be more uniform and will contain more information.\n \nCatharsis compat mode:\n\n```js\nimport { parse, catharsisTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = catharsisTransform(parse('myType.<string>', 'closure'))\n```\n\nJsdoctypeparser compat mode:\n\n```js\nimport { parse, jtpTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = jtpTransform(parse('myType.<string>', 'closure'))\n```\n\nStringify:\n\n```js\nimport { stringify } from 'jsdoc-type-pratt-parser'\n\nconst val = stringify({ type: 'JsdocTypeName', value: 'name'}) // -> 'name'\n```\n\nYou can customize the stringification by using `stringifyRules` and `transform`:\n\n```js\nimport { stringifyRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst rules = stringifyRules()\n\n// `result` is the current node and `transform` is a function to transform child nodes.\nrules.NAME = (result, transform) => 'something else'\n\nconst val = transform(rules, { type: 'JsdocTypeName', value: 'name'}) // -> 'something else'\n```\n\nYou can traverse a result tree with the `traverse` function:\n\n```js\nimport { traverse } from 'jsdoc-type-pratt-parser'\n\n// property is the name of the property on parent that contains node\nfunction onEnter(node, parent, property) {\n    console.log(node.type)\n}\n\n// an onEnter and/or an onLeave function can be supplied\ntraverse({ type: 'JsdocTypeName', value: 'name'}, onEnter, console.log)\n```\n\nYou can also build your own transform rules by implementing the `TransformRules<TransformResultType>` interface or you\ncan build upon the identity ruleset like this:\n\n```js\nimport { identityTransformRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst myRules = identityTransformRules()\nmyRules.NAME = () => ({ type: 'JsdocTypeName', value: 'funky' })\n\nconst val = transform(myRules, result)\n```\n\nAvailable Grammars\n------------------\n\nThree different modes (grammars) are supported: `'jsdoc'`, `'closure'` and `'typescript'`\n\nTests Status\n------------\n\nThis parser runs most tests of https://github.com/hegemonic/catharsis and\n https://github.com/jsdoctypeparser/jsdoctypeparser. It compares the results of the different parsing libraries. If you\n want to find out where the output differs, look in the tests for the comments `// This seems to be an error of ...` or\n the `differ` keyword which indicates that differing results are produced.\n\nAPI Documentation\n-----------------\nAn API documentation can be found here: https://simonseyock.github.io/jsdoc-type-pratt-parser/docs/modules.html\n\nPerformance\n-----------\n\nA simple performance [comparision](benchmark/benchmark.js) using [Benchmark.js](https://benchmarkjs.com/) produced the following results:\n```\nTesting expression: Name\ncatharsis x 10,194 ops/sec ±22.98% (58 runs sampled)\njsdoc-type-pratt-parser x 238,233 ops/sec ±2.11% (84 runs sampled)\njsdoctypeparser x 29,201 ops/sec ±15.65% (76 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: Array<number>\ncatharsis x 5,063 ops/sec ±2.89% (82 runs sampled)\njsdoc-type-pratt-parser x 84,744 ops/sec ±5.34% (77 runs sampled)\njsdoctypeparser x 10,964 ops/sec ±24.98% (52 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: { keyA: Type<A | \"string val\" >, keyB: function(string, B): A }\ncatharsis x 206 ops/sec ±17.93% (59 runs sampled)\njsdoc-type-pratt-parser x 7,706 ops/sec ±12.20% (54 runs sampled)\njsdoctypeparser x 2,456 ops/sec ±22.06% (49 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\n```\n\ncatharsis was used without cache, as this is just a simple lookup table that could easily be implemented for any parser.\n \n","types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["stable",{"name":"main","prerelease":"alpha","channel":"alpha"}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"fa0b093eced358b2c52196e1dd24e4cc35cfc59c","readmeFilename":"README.md","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.22_1621804751400_0.733628148388038"},"_hasShrinkwrap":false},"1.0.0-alpha.23":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.23","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.23","homepage":"https://github.com/simonseyock/jsdoc-type-pratt-parser#readme","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"repository":{"type":"git","url":"git+https://github.com/simonseyock/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/simonseyock/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"01c232d92b99b7e7ef52235ab8c9115137426639","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.23.tgz"},"readme":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain)\n[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser/alpha)](https://www.npmjs.com/package/jsdoc-type-pratt-parser)\n[![Code Style](https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript)](https://github.com/standard/ts-standard)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n\nThis project is a parser for jsdoc types. It is heavily inspired by the existing libraries catharsis and\n jsdoctypeparser, but does not use PEG.js, instead it is written as a pratt parser. \n* https://github.com/hegemonic/catharsis\n* https://github.com/jsdoctypeparser/jsdoctypeparser\n* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n\nLive Demo\n---------\n\nA simple live demo to test expressions can be found at: https://simonseyock.github.io/jsdoc-type-pratt-parser/\n\nGetting started\n---------------\n\n```\nnpm install jsdoc-type-pratt-parser@alpha\n```\n\n```js\nimport { parse } from 'jsdoc-type-pratt-parser'\n\nconst result = parse('myType.<string>', 'closure')\n```\n\nThis library supports compatibility modes for catharsis and jsdoctypeparser. The provided transform functions attempt to\n transform the output to the expected output of the target library. This will not always be the same as some types are\n parsed differently. These modes are thought to make transition easier, but it is advised to use the native output as\n this will be more uniform and will contain more information.\n \nCatharsis compat mode:\n\n```js\nimport { parse, catharsisTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = catharsisTransform(parse('myType.<string>', 'closure'))\n```\n\nJsdoctypeparser compat mode:\n\n```js\nimport { parse, jtpTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = jtpTransform(parse('myType.<string>', 'closure'))\n```\n\nStringify:\n\n```js\nimport { stringify } from 'jsdoc-type-pratt-parser'\n\nconst val = stringify({ type: 'JsdocTypeName', value: 'name'}) // -> 'name'\n```\n\nYou can customize the stringification by using `stringifyRules` and `transform`:\n\n```js\nimport { stringifyRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst rules = stringifyRules()\n\n// `result` is the current node and `transform` is a function to transform child nodes.\nrules.NAME = (result, transform) => 'something else'\n\nconst val = transform(rules, { type: 'JsdocTypeName', value: 'name'}) // -> 'something else'\n```\n\nYou can traverse a result tree with the `traverse` function:\n\n```js\nimport { traverse } from 'jsdoc-type-pratt-parser'\n\n// property is the name of the property on parent that contains node\nfunction onEnter(node, parent, property) {\n    console.log(node.type)\n}\n\n// an onEnter and/or an onLeave function can be supplied\ntraverse({ type: 'JsdocTypeName', value: 'name'}, onEnter, console.log)\n```\n\nYou can also build your own transform rules by implementing the `TransformRules<TransformResultType>` interface or you\ncan build upon the identity ruleset like this:\n\n```js\nimport { identityTransformRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst myRules = identityTransformRules()\nmyRules.NAME = () => ({ type: 'JsdocTypeName', value: 'funky' })\n\nconst val = transform(myRules, result)\n```\n\nAvailable Grammars\n------------------\n\nThree different modes (grammars) are supported: `'jsdoc'`, `'closure'` and `'typescript'`\n\nTests Status\n------------\n\nThis parser runs most tests of https://github.com/hegemonic/catharsis and\n https://github.com/jsdoctypeparser/jsdoctypeparser. It compares the results of the different parsing libraries. If you\n want to find out where the output differs, look in the tests for the comments `// This seems to be an error of ...` or\n the `differ` keyword which indicates that differing results are produced.\n\nAPI Documentation\n-----------------\nAn API documentation can be found here: https://simonseyock.github.io/jsdoc-type-pratt-parser/docs/modules.html\n\nPerformance\n-----------\n\nA simple performance [comparision](benchmark/benchmark.js) using [Benchmark.js](https://benchmarkjs.com/) produced the following results:\n```\nTesting expression: Name\ncatharsis x 36,338 ops/sec ±1.10% (1071 runs sampled)\njsdoc-type-pratt-parser x 400,260 ops/sec ±0.87% (1070 runs sampled)\njsdoctypeparser x 61,847 ops/sec ±1.18% (1071 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: Array<number>\ncatharsis x 7,969 ops/sec ±1.05% (1079 runs sampled)\njsdoc-type-pratt-parser x 159,001 ops/sec ±0.95% (1074 runs sampled)\njsdoctypeparser x 42,278 ops/sec ±1.01% (1070 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: { keyA: Type<A | \"string val\" >, keyB: function(string, B): A }\ncatharsis x 933 ops/sec ±1.15% (1070 runs sampled)\njsdoc-type-pratt-parser x 29,596 ops/sec ±0.90% (1068 runs sampled)\njsdoctypeparser x 16,206 ops/sec ±1.38% (1055 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n```\n\nthe test uses catharsis without cache, as this is just a simple lookup table that could easily be implemented for any parser.\n \n","types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["stable",{"name":"main","prerelease":"alpha","channel":"alpha"}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"98d0e39833524a4d5db9dd71a0ef72a60fef8387","readmeFilename":"README.md","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.23_1621850169726_0.33921176634469496"},"_hasShrinkwrap":false},"1.0.0-alpha.24":{"_id":"jsdoc-type-pratt-parser@1.0.0-alpha.24","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0-alpha.24","homepage":"https://github.com/simonseyock/jsdoc-type-pratt-parser#readme","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"repository":{"type":"git","url":"git+https://github.com/simonseyock/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/simonseyock/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"1504e70d2a1ab61575fd546a4a989d715b108d9f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0-alpha.24.tgz"},"readme":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain)\n[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser/alpha)](https://www.npmjs.com/package/jsdoc-type-pratt-parser)\n[![Code Style](https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript)](https://github.com/standard/ts-standard)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n\nThis project is a parser for jsdoc types. It is heavily inspired by the existing libraries catharsis and\n jsdoctypeparser, but does not use PEG.js, instead it is written as a pratt parser. \n* https://github.com/hegemonic/catharsis\n* https://github.com/jsdoctypeparser/jsdoctypeparser\n* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n\nLive Demo\n---------\n\nA simple live demo to test expressions can be found at: https://simonseyock.github.io/jsdoc-type-pratt-parser/\n\nGetting started\n---------------\n\n```\nnpm install jsdoc-type-pratt-parser@alpha\n```\n\n```js\nimport { parse } from 'jsdoc-type-pratt-parser'\n\nconst result = parse('myType.<string>', 'closure')\n```\n\nThis library supports compatibility modes for catharsis and jsdoctypeparser. The provided transform functions attempt to\n transform the output to the expected output of the target library. This will not always be the same as some types are\n parsed differently. These modes are thought to make transition easier, but it is advised to use the native output as\n this will be more uniform and will contain more information.\n \nCatharsis compat mode:\n\n```js\nimport { parse, catharsisTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = catharsisTransform(parse('myType.<string>', 'closure'))\n```\n\nJsdoctypeparser compat mode:\n\n```js\nimport { parse, jtpTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = jtpTransform(parse('myType.<string>', 'closure'))\n```\n\nStringify:\n\n```js\nimport { stringify } from 'jsdoc-type-pratt-parser'\n\nconst val = stringify({ type: 'JsdocTypeName', value: 'name'}) // -> 'name'\n```\n\nYou can customize the stringification by using `stringifyRules` and `transform`:\n\n```js\nimport { stringifyRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst rules = stringifyRules()\n\n// `result` is the current node and `transform` is a function to transform child nodes.\nrules.NAME = (result, transform) => 'something else'\n\nconst val = transform(rules, { type: 'JsdocTypeName', value: 'name'}) // -> 'something else'\n```\n\nYou can traverse a result tree with the `traverse` function:\n\n```js\nimport { traverse } from 'jsdoc-type-pratt-parser'\n\n// property is the name of the property on parent that contains node\nfunction onEnter(node, parent, property) {\n    console.log(node.type)\n}\n\n// an onEnter and/or an onLeave function can be supplied\ntraverse({ type: 'JsdocTypeName', value: 'name'}, onEnter, console.log)\n```\n\nYou can also build your own transform rules by implementing the `TransformRules<TransformResultType>` interface or you\ncan build upon the identity ruleset like this:\n\n```js\nimport { identityTransformRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst myRules = identityTransformRules()\nmyRules.NAME = () => ({ type: 'JsdocTypeName', value: 'funky' })\n\nconst val = transform(myRules, result)\n```\n\nAvailable Grammars\n------------------\n\nThree different modes (grammars) are supported: `'jsdoc'`, `'closure'` and `'typescript'`\n\nTests Status\n------------\n\nThis parser runs most tests of https://github.com/hegemonic/catharsis and\n https://github.com/jsdoctypeparser/jsdoctypeparser. It compares the results of the different parsing libraries. If you\n want to find out where the output differs, look in the tests for the comments `// This seems to be an error of ...` or\n the `differ` keyword which indicates that differing results are produced.\n\nAPI Documentation\n-----------------\nAn API documentation can be found here: https://simonseyock.github.io/jsdoc-type-pratt-parser/docs/modules.html\n\nPerformance\n-----------\n\nA simple performance [comparision](benchmark/benchmark.js) using [Benchmark.js](https://benchmarkjs.com/) produced the following results:\n```\nTesting expression: Name\ncatharsis x 36,338 ops/sec ±1.10% (1071 runs sampled)\njsdoc-type-pratt-parser x 400,260 ops/sec ±0.87% (1070 runs sampled)\njsdoctypeparser x 61,847 ops/sec ±1.18% (1071 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: Array<number>\ncatharsis x 7,969 ops/sec ±1.05% (1079 runs sampled)\njsdoc-type-pratt-parser x 159,001 ops/sec ±0.95% (1074 runs sampled)\njsdoctypeparser x 42,278 ops/sec ±1.01% (1070 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: { keyA: Type<A | \"string val\" >, keyB: function(string, B): A }\ncatharsis x 933 ops/sec ±1.15% (1070 runs sampled)\njsdoc-type-pratt-parser x 29,596 ops/sec ±0.90% (1068 runs sampled)\njsdoctypeparser x 16,206 ops/sec ±1.38% (1055 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n```\n\nthe test uses catharsis without cache, as this is just a simple lookup table that could easily be implemented for any parser.\n \n","types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["stable",{"name":"main","prerelease":"alpha","channel":"alpha"}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"c1672e325422b7b42cd26f369c303e23111c9af1","readmeFilename":"README.md","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0-alpha.24_1622279728745_0.9918198365242421"},"_hasShrinkwrap":false},"1.0.0":{"_id":"jsdoc-type-pratt-parser@1.0.0","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.0","homepage":"https://github.com/simonseyock/jsdoc-type-pratt-parser#readme","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"repository":{"type":"git","url":"git+https://github.com/simonseyock/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/simonseyock/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"a35e76edcc70fd4c399d3e7cbcd570c8fadd4da1","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.0.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main"],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"a22d7218010e75da1827bf34ff3dcc4c5689749a","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.0_1622374944690_0.14066145284696185"},"_hasShrinkwrap":false},"1.0.1":{"_id":"jsdoc-type-pratt-parser@1.0.1","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.1","homepage":"https://github.com/simonseyock/jsdoc-type-pratt-parser#readme","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"repository":{"type":"git","url":"git+https://github.com/simonseyock/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/simonseyock/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"7926c40b17f41a95c8cd2dad52169b2209eb198b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.1.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main"],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"bff9e760aa350012dac2472e9228bae322f3c664","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.1_1622441043002_0.8693696855214978"},"_hasShrinkwrap":false},"1.0.2":{"_id":"jsdoc-type-pratt-parser@1.0.2","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.2","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/simonseyock/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/simonseyock/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/simonseyock/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","eslint-config-standard-with-typescript":"^20.0.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","nyc":"^15.1.0","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"956b4723eef47c28b8c7f4a890bcdf73e0b5b629","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.2.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main"],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"9cf48a69622af17d6b180358f9658bd0a269bda2","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.2_1622493981675_0.49138551092690497"},"_hasShrinkwrap":false},"1.0.3":{"_id":"jsdoc-type-pratt-parser@1.0.3","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.3","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/simonseyock/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/simonseyock/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/simonseyock/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","eslint-config-standard-with-typescript":"^20.0.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","nyc":"^15.1.0","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"01493a5220a183d304054fc4e490a8c67751290e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.3.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main"],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"59426110174920c570a3f841f01f668d4fefe193","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.3_1622528003021_0.22306313696232882"},"_hasShrinkwrap":false},"1.0.4":{"_id":"jsdoc-type-pratt-parser@1.0.4","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.4","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/simonseyock/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/simonseyock/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/simonseyock/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","eslint-config-standard-with-typescript":"^20.0.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","nyc":"^15.1.0","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"5750d2d32ffb001866537d3baaedea7cf84c7036","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.4.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main"],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"266370d57472e27b4d8c4e6578399765abd06abd","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"simonseyock","email":"simonseyock@googlemail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.4_1622629681735_0.6972501870892092"},"_hasShrinkwrap":false},"1.0.6":{"_id":"jsdoc-type-pratt-parser@1.0.6","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.6","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","eslint-config-standard-with-typescript":"^20.0.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","nyc":"^15.1.0","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"cbcb69c06a7cabc39f250fdffa5b1bcc5939a4e5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.6.tgz"},"readme":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain)\n[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser/alpha)](https://www.npmjs.com/package/jsdoc-type-pratt-parser)\n[![Code Style](https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript)](https://github.com/standard/ts-standard)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n\nThis project is a parser for jsdoc types. It is heavily inspired by the existing libraries catharsis and\n jsdoctypeparser, but does not use PEG.js, instead it is written as a pratt parser. \n* https://github.com/hegemonic/catharsis\n* https://github.com/jsdoctypeparser/jsdoctypeparser\n* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n\nLive Demo\n---------\n\nA simple live demo to test expressions can be found at: https://simonseyock.github.io/jsdoc-type-pratt-parser/\n\nGetting started\n---------------\n\n```\nnpm install jsdoc-type-pratt-parser@alpha\n```\n\n```js\nimport { parse } from 'jsdoc-type-pratt-parser'\n\nconst result = parse('myType.<string>', 'closure')\n```\n\nThis library supports compatibility modes for catharsis and jsdoctypeparser. The provided transform functions attempt to\n transform the output to the expected output of the target library. This will not always be the same as some types are\n parsed differently. These modes are thought to make transition easier, but it is advised to use the native output as\n this will be more uniform and will contain more information.\n \nCatharsis compat mode:\n\n```js\nimport { parse, catharsisTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = catharsisTransform(parse('myType.<string>', 'closure'))\n```\n\nJsdoctypeparser compat mode:\n\n```js\nimport { parse, jtpTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = jtpTransform(parse('myType.<string>', 'closure'))\n```\n\nStringify:\n\n```js\nimport { stringify } from 'jsdoc-type-pratt-parser'\n\nconst val = stringify({ type: 'JsdocTypeName', value: 'name'}) // -> 'name'\n```\n\nYou can customize the stringification by using `stringifyRules` and `transform`:\n\n```js\nimport { stringifyRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst rules = stringifyRules()\n\n// `result` is the current node and `transform` is a function to transform child nodes.\nrules.NAME = (result, transform) => 'something else'\n\nconst val = transform(rules, { type: 'JsdocTypeName', value: 'name'}) // -> 'something else'\n```\n\nYou can traverse a result tree with the `traverse` function:\n\n```js\nimport { traverse } from 'jsdoc-type-pratt-parser'\n\n// property is the name of the property on parent that contains node\nfunction onEnter(node, parent, property) {\n    console.log(node.type)\n}\n\n// an onEnter and/or an onLeave function can be supplied\ntraverse({ type: 'JsdocTypeName', value: 'name'}, onEnter, console.log)\n```\n\nYou can also build your own transform rules by implementing the `TransformRules<TransformResultType>` interface or you\ncan build upon the identity ruleset like this:\n\n```js\nimport { identityTransformRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst myRules = identityTransformRules()\nmyRules.NAME = () => ({ type: 'JsdocTypeName', value: 'funky' })\n\nconst val = transform(myRules, result)\n```\n\nAvailable Grammars\n------------------\n\nThree different modes (grammars) are supported: `'jsdoc'`, `'closure'` and `'typescript'`\n\nTests Status\n------------\n\nThis parser runs most tests of https://github.com/hegemonic/catharsis and\n https://github.com/jsdoctypeparser/jsdoctypeparser. It compares the results of the different parsing libraries. If you\n want to find out where the output differs, look in the tests for the comments `// This seems to be an error of ...` or\n the `differ` keyword which indicates that differing results are produced.\n\nAPI Documentation\n-----------------\nAn API documentation can be found here: https://simonseyock.github.io/jsdoc-type-pratt-parser/docs/modules.html\n\nPerformance\n-----------\n\nA simple performance [comparision](benchmark/benchmark.js) using [Benchmark.js](https://benchmarkjs.com/) produced the following results:\n```\nTesting expression: Name\ncatharsis x 36,338 ops/sec ±1.10% (1071 runs sampled)\njsdoc-type-pratt-parser x 400,260 ops/sec ±0.87% (1070 runs sampled)\njsdoctypeparser x 61,847 ops/sec ±1.18% (1071 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: Array<number>\ncatharsis x 7,969 ops/sec ±1.05% (1079 runs sampled)\njsdoc-type-pratt-parser x 159,001 ops/sec ±0.95% (1074 runs sampled)\njsdoctypeparser x 42,278 ops/sec ±1.01% (1070 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: { keyA: Type<A | \"string val\" >, keyB: function(string, B): A }\ncatharsis x 933 ops/sec ±1.15% (1070 runs sampled)\njsdoc-type-pratt-parser x 29,596 ops/sec ±0.90% (1068 runs sampled)\njsdoctypeparser x 16,206 ops/sec ±1.38% (1055 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n```\n\nthe test uses catharsis without cache, as this is just a simple lookup table that could easily be implemented for any parser.\n \n","types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main","dev"],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"fc5add82c4ffa6ba880fe0035501944b3be7da84","readmeFilename":"README.md","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"},{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.6_1622633082646_0.8038974746164784"},"_hasShrinkwrap":false},"1.0.7":{"_id":"jsdoc-type-pratt-parser@1.0.7","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.7","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","eslint-config-standard-with-typescript":"^20.0.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","nyc":"^15.1.0","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"50f83f0c1acbdde55df39c28b58de7667df9fed3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.7.tgz"},"readme":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain)\n[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser/alpha)](https://www.npmjs.com/package/jsdoc-type-pratt-parser)\n[![Code Style](https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript)](https://github.com/standard/ts-standard)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n\nThis project is a parser for jsdoc types. It is heavily inspired by the existing libraries catharsis and\n jsdoctypeparser, but does not use PEG.js, instead it is written as a pratt parser. \n* https://github.com/hegemonic/catharsis\n* https://github.com/jsdoctypeparser/jsdoctypeparser\n* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n\nLive Demo\n---------\n\nA simple live demo to test expressions can be found at: https://simonseyock.github.io/jsdoc-type-pratt-parser/\n\nGetting started\n---------------\n\n```\nnpm install jsdoc-type-pratt-parser@alpha\n```\n\n```js\nimport { parse } from 'jsdoc-type-pratt-parser'\n\nconst result = parse('myType.<string>', 'closure')\n```\n\nThis library supports compatibility modes for catharsis and jsdoctypeparser. The provided transform functions attempt to\n transform the output to the expected output of the target library. This will not always be the same as some types are\n parsed differently. These modes are thought to make transition easier, but it is advised to use the native output as\n this will be more uniform and will contain more information.\n \nCatharsis compat mode:\n\n```js\nimport { parse, catharsisTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = catharsisTransform(parse('myType.<string>', 'closure'))\n```\n\nJsdoctypeparser compat mode:\n\n```js\nimport { parse, jtpTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = jtpTransform(parse('myType.<string>', 'closure'))\n```\n\nStringify:\n\n```js\nimport { stringify } from 'jsdoc-type-pratt-parser'\n\nconst val = stringify({ type: 'JsdocTypeName', value: 'name'}) // -> 'name'\n```\n\nYou can customize the stringification by using `stringifyRules` and `transform`:\n\n```js\nimport { stringifyRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst rules = stringifyRules()\n\n// `result` is the current node and `transform` is a function to transform child nodes.\nrules.NAME = (result, transform) => 'something else'\n\nconst val = transform(rules, { type: 'JsdocTypeName', value: 'name'}) // -> 'something else'\n```\n\nYou can traverse a result tree with the `traverse` function:\n\n```js\nimport { traverse } from 'jsdoc-type-pratt-parser'\n\n// property is the name of the property on parent that contains node\nfunction onEnter(node, parent, property) {\n    console.log(node.type)\n}\n\n// an onEnter and/or an onLeave function can be supplied\ntraverse({ type: 'JsdocTypeName', value: 'name'}, onEnter, console.log)\n```\n\nYou can also build your own transform rules by implementing the `TransformRules<TransformResultType>` interface or you\ncan build upon the identity ruleset like this:\n\n```js\nimport { identityTransformRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst myRules = identityTransformRules()\nmyRules.NAME = () => ({ type: 'JsdocTypeName', value: 'funky' })\n\nconst val = transform(myRules, result)\n```\n\nAvailable Grammars\n------------------\n\nThree different modes (grammars) are supported: `'jsdoc'`, `'closure'` and `'typescript'`\n\nTests Status\n------------\n\nThis parser runs most tests of https://github.com/hegemonic/catharsis and\n https://github.com/jsdoctypeparser/jsdoctypeparser. It compares the results of the different parsing libraries. If you\n want to find out where the output differs, look in the tests for the comments `// This seems to be an error of ...` or\n the `differ` keyword which indicates that differing results are produced.\n\nAPI Documentation\n-----------------\nAn API documentation can be found here: https://simonseyock.github.io/jsdoc-type-pratt-parser/docs/modules.html\n\nPerformance\n-----------\n\nA simple performance [comparision](benchmark/benchmark.js) using [Benchmark.js](https://benchmarkjs.com/) produced the following results:\n```\nTesting expression: Name\ncatharsis x 36,338 ops/sec ±1.10% (1071 runs sampled)\njsdoc-type-pratt-parser x 400,260 ops/sec ±0.87% (1070 runs sampled)\njsdoctypeparser x 61,847 ops/sec ±1.18% (1071 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: Array<number>\ncatharsis x 7,969 ops/sec ±1.05% (1079 runs sampled)\njsdoc-type-pratt-parser x 159,001 ops/sec ±0.95% (1074 runs sampled)\njsdoctypeparser x 42,278 ops/sec ±1.01% (1070 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: { keyA: Type<A | \"string val\" >, keyB: function(string, B): A }\ncatharsis x 933 ops/sec ±1.15% (1070 runs sampled)\njsdoc-type-pratt-parser x 29,596 ops/sec ±0.90% (1068 runs sampled)\njsdoctypeparser x 16,206 ops/sec ±1.38% (1055 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n```\n\nthe test uses catharsis without cache, as this is just a simple lookup table that could easily be implemented for any parser.\n \n","types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main","dev"],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"ff27437b99c4b8684a08d4837af011c4a6d491ea","readmeFilename":"README.md","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"},{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.7_1622634521750_0.5906480844751636"},"_hasShrinkwrap":false},"1.0.8":{"_id":"jsdoc-type-pratt-parser@1.0.8","name":"jsdoc-type-pratt-parser","description":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain) [![Npm Package](https://badgen.net/npm/v/jsdoc","version":"1.0.8","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","eslint-config-standard-with-typescript":"^20.0.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","nyc":"^15.1.0","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"cf253eed7f415ddce25d1198208382149769eb7d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.0.8.tgz"},"readme":"[![Test Status](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions/workflows/test.js.yml/badge.svg?branch=main)](https://github.com/simonseyock/jsdoc-type-pratt-parser/actions?query=branch%3Amain)\n[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser/alpha)](https://www.npmjs.com/package/jsdoc-type-pratt-parser)\n[![Code Style](https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript)](https://github.com/standard/ts-standard)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n\nThis project is a parser for jsdoc types. It is heavily inspired by the existing libraries catharsis and\n jsdoctypeparser, but does not use PEG.js, instead it is written as a pratt parser. \n* https://github.com/hegemonic/catharsis\n* https://github.com/jsdoctypeparser/jsdoctypeparser\n* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n\nLive Demo\n---------\n\nA simple live demo to test expressions can be found at: https://simonseyock.github.io/jsdoc-type-pratt-parser/\n\nGetting started\n---------------\n\n```\nnpm install jsdoc-type-pratt-parser@alpha\n```\n\n```js\nimport { parse } from 'jsdoc-type-pratt-parser'\n\nconst result = parse('myType.<string>', 'closure')\n```\n\nThis library supports compatibility modes for catharsis and jsdoctypeparser. The provided transform functions attempt to\n transform the output to the expected output of the target library. This will not always be the same as some types are\n parsed differently. These modes are thought to make transition easier, but it is advised to use the native output as\n this will be more uniform and will contain more information.\n \nCatharsis compat mode:\n\n```js\nimport { parse, catharsisTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = catharsisTransform(parse('myType.<string>', 'closure'))\n```\n\nJsdoctypeparser compat mode:\n\n```js\nimport { parse, jtpTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = jtpTransform(parse('myType.<string>', 'closure'))\n```\n\nStringify:\n\n```js\nimport { stringify } from 'jsdoc-type-pratt-parser'\n\nconst val = stringify({ type: 'JsdocTypeName', value: 'name'}) // -> 'name'\n```\n\nYou can customize the stringification by using `stringifyRules` and `transform`:\n\n```js\nimport { stringifyRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst rules = stringifyRules()\n\n// `result` is the current node and `transform` is a function to transform child nodes.\nrules.NAME = (result, transform) => 'something else'\n\nconst val = transform(rules, { type: 'JsdocTypeName', value: 'name'}) // -> 'something else'\n```\n\nYou can traverse a result tree with the `traverse` function:\n\n```js\nimport { traverse } from 'jsdoc-type-pratt-parser'\n\n// property is the name of the property on parent that contains node\nfunction onEnter(node, parent, property) {\n    console.log(node.type)\n}\n\n// an onEnter and/or an onLeave function can be supplied\ntraverse({ type: 'JsdocTypeName', value: 'name'}, onEnter, console.log)\n```\n\nYou can also build your own transform rules by implementing the `TransformRules<TransformResultType>` interface or you\ncan build upon the identity ruleset like this:\n\n```js\nimport { identityTransformRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst myRules = identityTransformRules()\nmyRules.NAME = () => ({ type: 'JsdocTypeName', value: 'funky' })\n\nconst val = transform(myRules, result)\n```\n\nAvailable Grammars\n------------------\n\nThree different modes (grammars) are supported: `'jsdoc'`, `'closure'` and `'typescript'`\n\nTests Status\n------------\n\nThis parser runs most tests of https://github.com/hegemonic/catharsis and\n https://github.com/jsdoctypeparser/jsdoctypeparser. It compares the results of the different parsing libraries. If you\n want to find out where the output differs, look in the tests for the comments `// This seems to be an error of ...` or\n the `differ` keyword which indicates that differing results are produced.\n\nAPI Documentation\n-----------------\nAn API documentation can be found here: https://simonseyock.github.io/jsdoc-type-pratt-parser/docs/modules.html\n\nPerformance\n-----------\n\nA simple performance [comparision](benchmark/benchmark.js) using [Benchmark.js](https://benchmarkjs.com/) produced the following results:\n```\nTesting expression: Name\ncatharsis x 36,338 ops/sec ±1.10% (1071 runs sampled)\njsdoc-type-pratt-parser x 400,260 ops/sec ±0.87% (1070 runs sampled)\njsdoctypeparser x 61,847 ops/sec ±1.18% (1071 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: Array<number>\ncatharsis x 7,969 ops/sec ±1.05% (1079 runs sampled)\njsdoc-type-pratt-parser x 159,001 ops/sec ±0.95% (1074 runs sampled)\njsdoctypeparser x 42,278 ops/sec ±1.01% (1070 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: { keyA: Type<A | \"string val\" >, keyB: function(string, B): A }\ncatharsis x 933 ops/sec ±1.15% (1070 runs sampled)\njsdoc-type-pratt-parser x 29,596 ops/sec ±0.90% (1068 runs sampled)\njsdoctypeparser x 16,206 ops/sec ±1.38% (1055 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n```\n\nthe test uses catharsis without cache, as this is just a simple lookup table that could easily be implemented for any parser.\n \n","types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main","dev"],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"ab1830117a60204b938763ba948ed2cf2221c703","readmeFilename":"README.md","_nodeVersion":"12.22.1","_npmVersion":"7.13.0","_npmUser":{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"},{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.0.8_1622636205187_0.8761755500527004"},"_hasShrinkwrap":false},"1.1.1":{"_id":"jsdoc-type-pratt-parser@1.1.1","name":"jsdoc-type-pratt-parser","description":"[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser) [![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)]","version":"1.1.1","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","test:coveralls":"nyc report --reporter=lcov && coveralls","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","coveralls":"^3.1.0","eslint-config-standard-with-typescript":"^20.0.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","nyc":"^15.1.0","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"10fe5e409ba38de22a48b555598955a26ff0160f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.1.1.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main",{"name":"dev","prerelease":true}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"fc8bf267c93e4912e0d1930a21fc7c325377344d","_nodeVersion":"12.22.3","_npmVersion":"7.13.0","_npmUser":{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"},{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.1.1_1627405806348_0.20136555931746147"},"_hasShrinkwrap":false},"1.2.0":{"_id":"jsdoc-type-pratt-parser@1.2.0","name":"jsdoc-type-pratt-parser","description":"[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser) [![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)]","version":"1.2.0","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","test:coveralls":"nyc report --reporter=lcov && coveralls","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","coveralls":"^3.1.0","eslint-config-standard-with-typescript":"^20.0.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","nyc":"^15.1.0","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"3482a3833b74a88c95a6ba7253f0c0de3b77b9f5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-1.2.0.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main",{"name":"dev","prerelease":true}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"4dceaa208cdb631bca5bf07fa3f9fbac7f5a082e","_nodeVersion":"12.22.6","_npmVersion":"7.13.0","_npmUser":{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"},{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_1.2.0_1633186013250_0.9067549408153925"},"_hasShrinkwrap":false},"2.0.0":{"_id":"jsdoc-type-pratt-parser@2.0.0","name":"jsdoc-type-pratt-parser","description":"[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser) [![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)]","version":"2.0.0","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","test:coveralls":"nyc report --reporter=lcov && coveralls","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","@types/sinon-chai":"^3.2.5","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","coveralls":"^3.1.0","eslint-config-standard-with-typescript":"^20.0.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","nyc":"^15.1.0","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","sinon-chai":"^3.7.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"ec739a0868922515fcb179852e990e89b52b9044","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-2.0.0.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main",{"name":"dev","prerelease":true}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"efda425ed36fa5cd0b434e2d9e1e7662757a9829","_nodeVersion":"12.22.6","_npmVersion":"7.13.0","_npmUser":{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"},{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_2.0.0_1634317405561_0.0882337808245457"},"_hasShrinkwrap":false},"2.0.1":{"_id":"jsdoc-type-pratt-parser@2.0.1","name":"jsdoc-type-pratt-parser","description":"[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser) [![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)]","version":"2.0.1","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","test:coveralls":"nyc report --reporter=lcov && coveralls","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","@types/sinon-chai":"^3.2.5","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","coveralls":"^3.1.0","eslint-config-standard-with-typescript":"^20.0.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","nyc":"^15.1.0","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","sinon-chai":"^3.7.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"92392ef353fb98067ca3af7a9bfa794b13e14320","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-2.0.1.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main",{"name":"dev","prerelease":true}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"7d968419b9abd876d43064e5a5a49d2b14e83591","_nodeVersion":"12.22.8","_npmVersion":"7.13.0","_npmUser":{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"},{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_2.0.1_1640699920200_0.5333772573922164"},"_hasShrinkwrap":false},"2.0.2":{"_id":"jsdoc-type-pratt-parser@2.0.2","name":"jsdoc-type-pratt-parser","description":"[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser) [![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)]","version":"2.0.2","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","test:coveralls":"nyc report --reporter=lcov && coveralls","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.1.1","@semantic-release/changelog":"^5.0.1","@semantic-release/git":"^9.0.0","@types/chai":"^4.2.14","@types/mocha":"^8.2.0","@types/node":"^14.14.31","@types/sinon":"^10.0.0","@types/sinon-chai":"^3.2.5","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.0","coveralls":"^3.1.0","eslint-config-standard-with-typescript":"^20.0.0","jsdoctypeparser":"^9.0.0","mocha":"^8.2.1","nyc":"^15.1.0","rollup":"^2.39.0","semantic-release":"^17.4.3","sinon":"^10.0.0","sinon-chai":"^3.7.0","ts-node":"^9.1.1","ts-standard":"^10.0.0","typedoc":"^0.20.24","typescript":"^4.1.3"},"dependencies":{},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"5cb2542c6ed6c527b170a43b4f247e2d6237e158","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-2.0.2.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main",{"name":"dev","prerelease":true}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"0dad1b0d0c767586496df1eacdcee07ac060d905","_nodeVersion":"12.22.8","_npmVersion":"7.13.0","_npmUser":{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"},{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_2.0.2_1640702572350_0.4178656882245906"},"_hasShrinkwrap":false},"2.1.0":{"_id":"jsdoc-type-pratt-parser@2.1.0","name":"jsdoc-type-pratt-parser","description":"[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser) [![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)]","version":"2.1.0","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","test:coveralls":"nyc report --reporter=lcov && coveralls","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.3.0","@semantic-release/changelog":"^6.0.1","@semantic-release/git":"^10.0.1","@types/chai":"^4.3.0","@types/mocha":"^9.0.0","@types/node":"^17.0.5","@types/sinon":"^10.0.6","@types/sinon-chai":"^3.2.7","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.4","coveralls":"^3.1.1","eslint-config-standard-with-typescript":"^21.0.1","jsdoctypeparser":"^9.0.0","mocha":"^9.1.3","npm-upgrade":"^3.0.0","nyc":"^15.1.0","rollup":"^2.62.0","semantic-release":"^18.0.1","sinon":"^12.0.1","sinon-chai":"^3.7.0","ts-node":"^10.4.0","ts-standard":"^11.0.0","typedoc":"^0.22.10","typescript":"^4.5.4"},"dependencies":{},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"31dff5021cc1d7c28dc2c81ba74a79f1151b2f58","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-2.1.0.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main",{"name":"dev","prerelease":true}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"476d074b30b2aa77305e8553c2b2695beb5932ba","_nodeVersion":"16.13.1","_npmVersion":"7.24.2","_npmUser":{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"},{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_2.1.0_1641635870542_0.9078752074474139"},"_hasShrinkwrap":false},"2.2.0":{"_id":"jsdoc-type-pratt-parser@2.2.0","name":"jsdoc-type-pratt-parser","description":"[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser) [![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)]","version":"2.2.0","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","test:coveralls":"nyc report --reporter=lcov && coveralls","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.3.0","@semantic-release/changelog":"^6.0.1","@semantic-release/git":"^10.0.1","@types/chai":"^4.3.0","@types/mocha":"^9.0.0","@types/node":"^17.0.5","@types/sinon":"^10.0.6","@types/sinon-chai":"^3.2.7","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.4","coveralls":"^3.1.1","eslint-config-standard-with-typescript":"^21.0.1","jsdoctypeparser":"^9.0.0","mocha":"^9.1.3","npm-upgrade":"^3.0.0","nyc":"^15.1.0","rollup":"^2.62.0","semantic-release":"^18.0.1","sinon":"^12.0.1","sinon-chai":"^3.7.0","ts-node":"^10.4.0","ts-standard":"^11.0.0","typedoc":"^0.22.10","typescript":"^4.5.4"},"dependencies":{},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"733f87727d142aef17c5bc1e90ebf6eface653d9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-2.2.0.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main",{"name":"dev","prerelease":true}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"890f709e184784f9c4aa2c8dbc852e099f5b13ad","_nodeVersion":"16.13.1","_npmVersion":"7.24.2","_npmUser":{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"},{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_2.2.0_1641725990443_0.44338444733481763"},"_hasShrinkwrap":false},"2.2.1":{"_id":"jsdoc-type-pratt-parser@2.2.1","name":"jsdoc-type-pratt-parser","description":"[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser) [![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)]","version":"2.2.1","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","test:coveralls":"nyc report --reporter=lcov && coveralls","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc src/index.ts --out docs","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release","benchmark":"npm run build && node benchmark/benchmark.js"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.3.0","@semantic-release/changelog":"^6.0.1","@semantic-release/git":"^10.0.1","@types/chai":"^4.3.0","@types/mocha":"^9.0.0","@types/node":"^17.0.5","@types/sinon":"^10.0.6","@types/sinon-chai":"^3.2.7","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.4","coveralls":"^3.1.1","eslint-config-standard-with-typescript":"^21.0.1","jsdoctypeparser":"^9.0.0","mocha":"^9.1.3","npm-upgrade":"^3.0.0","nyc":"^15.1.0","rollup":"^2.62.0","semantic-release":"^18.0.1","sinon":"^12.0.1","sinon-chai":"^3.7.0","ts-node":"^10.4.0","ts-standard":"^11.0.0","typedoc":"^0.22.10","typescript":"^4.5.4"},"dependencies":{},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"08c6d1740a9e468ac6993985ae1d0d6981c50537","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-2.2.1.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main",{"name":"dev","prerelease":true}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"832202c912c69977a0b9eb6075847e019fc04bd2","_nodeVersion":"16.13.1","_npmVersion":"7.24.2","_npmUser":{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"},{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_2.2.1_1641736442451_0.13018069566855894"},"_hasShrinkwrap":false},"2.2.2":{"_id":"jsdoc-type-pratt-parser@2.2.2","name":"jsdoc-type-pratt-parser","description":"[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser) [![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)]","version":"2.2.2","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","test:coveralls":"nyc report --reporter=lcov && coveralls","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc --options typedoc.json","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release","benchmark":"npm run build && node benchmark/benchmark.js"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.3.0","@semantic-release/changelog":"^6.0.1","@semantic-release/git":"^10.0.1","@types/chai":"^4.3.0","@types/mocha":"^9.0.0","@types/node":"^17.0.5","@types/sinon":"^10.0.6","@types/sinon-chai":"^3.2.7","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.4","coveralls":"^3.1.1","eslint-config-standard-with-typescript":"^21.0.1","jsdoctypeparser":"^9.0.0","mocha":"^9.1.3","npm-upgrade":"^3.0.0","nyc":"^15.1.0","rollup":"^2.62.0","semantic-release":"^18.0.1","sinon":"^12.0.1","sinon-chai":"^3.7.0","ts-node":"^10.4.0","ts-standard":"^11.0.0","typedoc":"^0.22.10","typedoc-plugin-merge-modules":"^3.1.0","typescript":"^4.5.4"},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"a85e407ac502b444dc23333aa4d6d0dc83f76187","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-2.2.2.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main",{"name":"dev","prerelease":true}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"74fc71fb882e0a8a4c25205d781e29c48db89df7","_nodeVersion":"16.13.2","_npmVersion":"7.24.2","_npmUser":{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"},{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_2.2.2_1642423493909_0.826318716464268"},"_hasShrinkwrap":false},"2.2.3":{"_id":"jsdoc-type-pratt-parser@2.2.3","name":"jsdoc-type-pratt-parser","description":"[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser) [![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)]","version":"2.2.3","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","test:coveralls":"nyc report --reporter=lcov && coveralls","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc --options typedoc.json","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release","benchmark":"npm run build && node benchmark/benchmark.js"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.3.0","@semantic-release/changelog":"^6.0.1","@semantic-release/git":"^10.0.1","@types/chai":"^4.3.0","@types/mocha":"^9.0.0","@types/node":"^17.0.5","@types/sinon":"^10.0.6","@types/sinon-chai":"^3.2.7","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.4","coveralls":"^3.1.1","eslint-config-standard-with-typescript":"^21.0.1","jsdoctypeparser":"^9.0.0","mocha":"^9.1.3","npm-upgrade":"^3.0.0","nyc":"^15.1.0","rollup":"^2.62.0","semantic-release":"^18.0.1","sinon":"^12.0.1","sinon-chai":"^3.7.0","ts-node":"^10.4.0","ts-standard":"^11.0.0","typedoc":"^0.22.10","typedoc-plugin-merge-modules":"^3.1.0","typescript":"^4.5.4"},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"3910cd0120054a512a73942d644ef1eb5a9df6e9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-2.2.3.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main",{"name":"dev","prerelease":true}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"cdfc42f5d827b6fff6a4de945172d4d2422e793b","_nodeVersion":"16.13.2","_npmVersion":"7.24.2","_npmUser":{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"},{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_2.2.3_1644670574408_0.4951436552892423"},"_hasShrinkwrap":false},"2.2.4":{"_id":"jsdoc-type-pratt-parser@2.2.4","name":"jsdoc-type-pratt-parser","description":"[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser) [![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)]","version":"2.2.4","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","test:coveralls":"nyc report --reporter=lcov && coveralls","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc --options typedoc.json","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release","benchmark":"npm run build && node benchmark/benchmark.js"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.3.0","@semantic-release/changelog":"^6.0.1","@semantic-release/git":"^10.0.1","@types/chai":"^4.3.0","@types/mocha":"^9.0.0","@types/node":"^17.0.5","@types/sinon":"^10.0.6","@types/sinon-chai":"^3.2.7","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.4","coveralls":"^3.1.1","eslint-config-standard-with-typescript":"^21.0.1","jsdoctypeparser":"^9.0.0","mocha":"^9.1.3","npm-upgrade":"^3.0.0","nyc":"^15.1.0","rollup":"^2.62.0","semantic-release":"^18.0.1","sinon":"^12.0.1","sinon-chai":"^3.7.0","ts-node":"^10.4.0","ts-standard":"^11.0.0","typedoc":"^0.22.10","typedoc-plugin-merge-modules":"^3.1.0","typescript":"^4.5.4"},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"492bfcf1f166e4c8b5c7628b8b8674baee6bfb9c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-2.2.4.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main",{"name":"dev","prerelease":true}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"fd14bee4a9c41a6f5fff7c02732a2496a022bbd5","_nodeVersion":"16.14.0","_npmVersion":"7.24.2","_npmUser":{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"},{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_2.2.4_1646986977444_0.04054874112189544"},"_hasShrinkwrap":false},"2.2.5":{"_id":"jsdoc-type-pratt-parser@2.2.5","name":"jsdoc-type-pratt-parser","description":"","version":"2.2.5","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","email":"","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir","email":"","url":""}],"repository":{"type":"git","url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","test:coveralls":"nyc report --reporter=lcov && coveralls","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc --options typedoc.json","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release","benchmark":"npm run build && node benchmark/benchmark.js"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.3.0","@semantic-release/changelog":"^6.0.1","@semantic-release/git":"^10.0.1","@types/chai":"^4.3.0","@types/mocha":"^9.0.0","@types/node":"^17.0.5","@types/sinon":"^10.0.6","@types/sinon-chai":"^3.2.7","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.4","coveralls":"^3.1.1","eslint-config-standard-with-typescript":"^21.0.1","jsdoctypeparser":"^9.0.0","mocha":"^9.1.3","npm-upgrade":"^3.0.0","nyc":"^15.1.0","rollup":"^2.62.0","semantic-release":"^18.0.1","sinon":"^12.0.1","sinon-chai":"^3.7.0","ts-node":"^10.4.0","ts-standard":"^11.0.0","typedoc":"^0.22.10","typedoc-plugin-merge-modules":"^3.1.0","typescript":"^4.5.4"},"engines":{"node":">=12.0.0"},"files":["dist/**/*","src/**/*"],"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"c9f93afac7ee4b5ed4432fe3f09f7d36b05ed0ff","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-2.2.5.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main",{"name":"dev","prerelease":true}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]}},"3.0.0":{"_id":"jsdoc-type-pratt-parser@3.0.0","name":"jsdoc-type-pratt-parser","description":"[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser) [![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)]","version":"3.0.0","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","test:coveralls":"nyc report --reporter=lcov && coveralls","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc --options typedoc.json","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release","benchmark":"npm run build && node benchmark/benchmark.js"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.3.0","@semantic-release/changelog":"^6.0.1","@semantic-release/git":"^10.0.1","@types/chai":"^4.3.0","@types/mocha":"^9.0.0","@types/node":"^17.0.5","@types/sinon":"^10.0.6","@types/sinon-chai":"^3.2.7","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.4","coveralls":"^3.1.1","eslint-config-standard-with-typescript":"^21.0.1","jsdoctypeparser":"^9.0.0","mocha":"^9.1.3","npm-upgrade":"^3.0.0","nyc":"^15.1.0","rollup":"^2.62.0","semantic-release":"^18.0.1","sinon":"^12.0.1","sinon-chai":"^3.7.0","ts-node":"^10.4.0","ts-standard":"^11.0.0","typedoc":"^0.22.10","typedoc-plugin-merge-modules":"^3.1.0","typescript":"^4.5.4"},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"340d8f31f5b2e59446f7a366af8537a6112ceb57","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-3.0.0.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main",{"name":"dev","prerelease":true}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"4c544b4dabd01aaf2fdbe29dbe87549739234d51","_nodeVersion":"16.14.2","_npmVersion":"7.24.2","_npmUser":{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"},{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_3.0.0_1650371394516_0.19739551009251577"},"_hasShrinkwrap":false},"3.0.1":{"_id":"jsdoc-type-pratt-parser@3.0.1","name":"jsdoc-type-pratt-parser","description":"[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser) [![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)]","version":"3.0.1","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","test:coveralls":"nyc report --reporter=lcov && coveralls","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc --options typedoc.json","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release","benchmark":"npm run build && node benchmark/benchmark.js"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.3.0","@semantic-release/changelog":"^6.0.1","@semantic-release/git":"^10.0.1","@types/chai":"^4.3.0","@types/mocha":"^9.0.0","@types/node":"^17.0.5","@types/sinon":"^10.0.6","@types/sinon-chai":"^3.2.7","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.4","coveralls":"^3.1.1","eslint-config-standard-with-typescript":"^21.0.1","jsdoctypeparser":"^9.0.0","mocha":"^9.1.3","npm-upgrade":"^3.0.0","nyc":"^15.1.0","rollup":"^2.62.0","semantic-release":"^18.0.1","sinon":"^12.0.1","sinon-chai":"^3.7.0","ts-node":"^10.4.0","ts-standard":"^11.0.0","typedoc":"^0.22.10","typedoc-plugin-merge-modules":"^3.1.0","typescript":"^4.5.4"},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"ccbc7a4180bc8748af64d2cc431aaa92f88175bb","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-3.0.1.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main",{"name":"dev","prerelease":true}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"gitHead":"cee4c4560145d3c81fa568492e4d653d4c1ca7b4","_nodeVersion":"16.14.2","_npmVersion":"7.24.2","_npmUser":{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"},{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_3.0.1_1650378220551_0.8989755314106973"},"_hasShrinkwrap":false},"3.1.0":{"_id":"jsdoc-type-pratt-parser@3.1.0","name":"jsdoc-type-pratt-parser","description":"","version":"3.1.0","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","email":"","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir","email":"","url":""}],"repository":{"type":"git","url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","test:coveralls":"nyc report --reporter=lcov && coveralls","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc --options typedoc.json","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release","benchmark":"npm run build && node benchmark/benchmark.js"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^8.3.0","@semantic-release/changelog":"^6.0.1","@semantic-release/git":"^10.0.1","@types/chai":"^4.3.0","@types/mocha":"^9.0.0","@types/node":"^17.0.5","@types/sinon":"^10.0.6","@types/sinon-chai":"^3.2.7","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.4","coveralls":"^3.1.1","eslint-config-standard-with-typescript":"^21.0.1","jsdoctypeparser":"^9.0.0","mocha":"^9.1.3","npm-upgrade":"^3.0.0","nyc":"^15.1.0","rollup":"^2.62.0","semantic-release":"^18.0.1","sinon":"^12.0.1","sinon-chai":"^3.7.0","ts-node":"^10.4.0","ts-standard":"^11.0.0","typedoc":"^0.22.10","typedoc-plugin-merge-modules":"^3.1.0","typescript":"^4.5.4"},"engines":{"node":">=12.0.0"},"files":["dist/**/*","src/**/*"],"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"a4a56bdc6e82e5865ffd9febc5b1a227ff28e67e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-3.1.0.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main",{"name":"dev","prerelease":true}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]}},"3.2.0-dev.1":{"_id":"jsdoc-type-pratt-parser@3.2.0-dev.1","name":"jsdoc-type-pratt-parser","description":"[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser) [![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)]","version":"3.2.0-dev.1","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","test:coveralls":"nyc report --reporter=lcov && coveralls","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc --options typedoc.json","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release","benchmark":"npm run build && node benchmark/benchmark.js","upgrade":"npm-upgrade"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^11.0.0","@semantic-release/changelog":"^6.0.2","@semantic-release/git":"^10.0.1","@types/chai":"^4.3.4","@types/mocha":"^10.0.1","@types/node":"^18.15.1","@types/sinon":"^10.0.13","@types/sinon-chai":"^3.2.9","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.7","coveralls":"^3.1.1","eslint-config-standard-with-typescript":"^34.0.0","jsdoctypeparser":"^9.0.0","mocha":"^10.2.0","npm-upgrade":"^3.1.0","nyc":"^15.1.0","rollup":"^3.19.1","semantic-release":"^20.1.1","sinon":"^15.0.2","sinon-chai":"^3.7.0","ts-node":"^10.9.1","ts-standard":"^12.0.2","typedoc":"^0.23.26","typedoc-plugin-merge-modules":"^4.0.1","typescript":"^4.9.5"},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"f583bb69da2abe0fc2e4f38012e8e559394313fd","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-3.2.0-dev.1.tgz"},"readme":"[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser)\n[![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions?query=branch%3Amain)\n[![Coverage Status](https://coveralls.io/repos/github/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/badge.svg?branch=main)](https://coveralls.io/github/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser?branch=main)\n[![Code Style](https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript)](https://github.com/standard/ts-standard)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n# Jsdoc Type Pratt Parser\n\nThis project is a parser for jsdoc types. It takes jsdoc type expressions like `Array<string>` and creates an abstract\nsyntax tree (AST) out of it. It is heavily inspired by the existing libraries [catharsis](https://github.com/hegemonic/catharsis) and [jsdoctypeparser](https://github.com/jsdoctypeparser/jsdoctypeparser), but does\nnot use [PEG.js](https://pegjs.org/), instead it is written as a pratt parser.\n\nYou can find some more information about pratt parsers here:\n* https://en.wikipedia.org/wiki/Operator-precedence_parser#Pratt_parsing\n* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n* https://matklad.github.io/2020/04/13/simple-but-powerful-pratt-parsing.html\n\n## Table of Contents\n* [Live Demo](#live-demo)\n* [Getting Started](#getting-started)\n* [API Documentation](#api-documentation)\n* [Available Grammars](#available-grammars)\n* [Transforms](#transforms)\n* [Traverse](#traverse)\n* [Tests Status](#tests-status)\n* [Performance](#performance)\n* [Development](#development)\n\n## Live Demo\n\nA simple live demo to test expressions can be found at: https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/\n\n## Getting started\n\n```\nnpm install jsdoc-type-pratt-parser@alpha\n```\n\n```js\nimport { parse } from 'jsdoc-type-pratt-parser'\n\nconst result = parse('SomeType<string>', 'typescript')\n```\n\n## API Documentation\n\nAn API documentation can be found [here](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/).\nIt is incomplete, but a good starting point. Please create issues or PRs if you don't find what you expect.\n\n## Available Grammars\n\nThree different modes (grammars) are supported: `'jsdoc'`, `'closure'` and `'typescript'`\n\n## Transforms\n\nA common task to do on ASTs are transforms, for example a stringification. This library includes some transform and\nutilities to implement your own.\n\n[`stringify`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#stringify):\n\n```js\nimport { stringify } from 'jsdoc-type-pratt-parser'\n\nconst val = stringify({ type: 'JsdocTypeName', value: 'name'}) // -> 'name'\n```\n\nYou can customize the stringification by using [`stringifyRules`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#stringifyRules)\nand [`transform`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#transform):\n\n```js\nimport { stringifyRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst rules = stringifyRules()\n\n// `result` is the current node and `transform` is a function to transform child nodes.\nrules.NAME = (result, transform) => 'something else'\n\nconst val = transform(rules, { type: 'JsdocTypeName', value: 'name'}) // -> 'something else'\n```\n\nYou can also build your own transform rules by implementing the [`TransformRules<TransformResultType>`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#TransformRules) interface or you\ncan build upon the [identity ruleset](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#identityTransformRules) like this:\n\n```js\nimport { identityTransformRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst myRules = identityTransformRules()\nmyRules.NAME = () => ({ type: 'JsdocTypeName', value: 'funky' })\n\nconst val = transform(myRules, result)\n```\n\nThis library also supports compatibility modes for catharsis and jsdoctypeparser. The provided transform functions attempt to\n transform the output to the expected output of the target library. This will not always be the same as some types are\n parsed differently. These modes are thought to make transition easier, but it is advised to use the native output as\n this will be more uniform and will contain more information.\n \n[Catharsis compat mode](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#catharsisTransform):\n\n```js\nimport { parse, catharsisTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = catharsisTransform(parse('myType.<string>', 'closure'))\n```\n\n[Jsdoctypeparser compat mode](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#jtpTransform):\n\n```js\nimport { parse, jtpTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = jtpTransform(parse('myType.<string>', 'closure'))\n```\n\n## Traverse\n\nYou can traverse an AST with the [`traverse`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#traverse) function:\n\n```js\nimport { traverse } from 'jsdoc-type-pratt-parser'\n\n// property is the name of the property on parent that contains node\nfunction onEnter(node, parent, property) {\n    console.log(node.type)\n}\n\n// an onEnter and/or an onLeave function can be supplied\ntraverse({ type: 'JsdocTypeName', value: 'name'}, onEnter, console.log)\n```\n\n## Tests Status\n\nThis parser runs most tests of [catharsis](https://github.com/hegemonic/catharsis) and\n[jsdoctypeparser](https://github.com/jsdoctypeparser/jsdoctypeparser). It compares the results of the different parsing libraries. If you\nwant to find out where the output differs, look in the tests for the comments `// This seems to be an error of ...` or\nthe `differ` keyword which indicates that differing results are produced.\n\n## Performance\n\nA simple [performance comparison](benchmark/benchmark.js) using [Benchmark.js](https://benchmarkjs.com/) produced the following results:\n```\nTesting expression: Name\ncatharsis x 37,816 ops/sec ±1.22% (1086 runs sampled)\njsdoc-type-pratt-parser x 602,617 ops/sec ±0.16% (1090 runs sampled)\njsdoctypeparser x 53,256 ops/sec ±0.73% (1081 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: Array<number>\ncatharsis x 10,124 ops/sec ±0.56% (1084 runs sampled)\njsdoc-type-pratt-parser x 228,660 ops/sec ±0.40% (1084 runs sampled)\njsdoctypeparser x 42,365 ops/sec ±0.60% (1070 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: { keyA: Type<A | \"string val\" >, keyB: function(string, B): A }\ncatharsis x 1,138 ops/sec ±0.66% (1087 runs sampled)\njsdoc-type-pratt-parser x 46,535 ops/sec ±0.47% (1090 runs sampled)\njsdoctypeparser x 18,291 ops/sec ±0.71% (1084 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n```\n\nThe benchmark test uses catharsis without cache.\n \n## Development\n\nIf you want to contribute see the [Development Guide](DEVELOPMENT.md) to get some pointers. Feel free to create issues if\nthere is information missing.\n","types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main",{"name":"dev","prerelease":true}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"readmeFilename":"README.md","gitHead":"a7d2bd48d4e4476726257f24948d2c986b6f4cd9","_nodeVersion":"18.14.2","_npmVersion":"8.19.4","_npmUser":{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"},{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_3.2.0-dev.1_1678725973582_0.9135639041461685"},"_hasShrinkwrap":false},"3.2.0-dev.2":{"_id":"jsdoc-type-pratt-parser@3.2.0-dev.2","name":"jsdoc-type-pratt-parser","description":"[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser) [![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)]","version":"3.2.0-dev.2","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","test:coveralls":"nyc report --reporter=lcov && coveralls","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc --options typedoc.json","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release","benchmark":"npm run build && node benchmark/benchmark.js","upgrade":"npm-upgrade"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^11.0.0","@semantic-release/changelog":"^6.0.2","@semantic-release/git":"^10.0.1","@types/chai":"^4.3.4","@types/mocha":"^10.0.1","@types/node":"^18.15.1","@types/sinon":"^10.0.13","@types/sinon-chai":"^3.2.9","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.7","coveralls":"^3.1.1","eslint-config-standard-with-typescript":"^34.0.0","jsdoctypeparser":"^9.0.0","mocha":"^10.2.0","npm-upgrade":"^3.1.0","nyc":"^15.1.0","rollup":"^3.19.1","semantic-release":"^20.1.1","sinon":"^15.0.2","sinon-chai":"^3.7.0","ts-node":"^10.9.1","ts-standard":"^12.0.2","typedoc":"^0.23.26","typedoc-plugin-merge-modules":"^4.0.1","typescript":"^4.9.5"},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"bb39973f53743d93c24235e387ab8d1e468882ed","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-3.2.0-dev.2.tgz"},"readme":"[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser)\n[![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions?query=branch%3Amain)\n[![Coverage Status](https://coveralls.io/repos/github/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/badge.svg?branch=main)](https://coveralls.io/github/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser?branch=main)\n[![Code Style](https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript)](https://github.com/standard/ts-standard)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n# Jsdoc Type Pratt Parser\n\nThis project is a parser for jsdoc types. It takes jsdoc type expressions like `Array<string>` and creates an abstract\nsyntax tree (AST) out of it. It is heavily inspired by the existing libraries [catharsis](https://github.com/hegemonic/catharsis) and [jsdoctypeparser](https://github.com/jsdoctypeparser/jsdoctypeparser), but does\nnot use [PEG.js](https://pegjs.org/), instead it is written as a pratt parser.\n\nYou can find some more information about pratt parsers here:\n* https://en.wikipedia.org/wiki/Operator-precedence_parser#Pratt_parsing\n* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n* https://matklad.github.io/2020/04/13/simple-but-powerful-pratt-parsing.html\n\n## Table of Contents\n* [Live Demo](#live-demo)\n* [Getting Started](#getting-started)\n* [API Documentation](#api-documentation)\n* [Available Grammars](#available-grammars)\n* [Transforms](#transforms)\n* [Traverse](#traverse)\n* [Tests Status](#tests-status)\n* [Performance](#performance)\n* [Development](#development)\n\n## Live Demo\n\nA simple live demo to test expressions can be found at: https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/\n\n## Getting started\n\n```\nnpm install jsdoc-type-pratt-parser@alpha\n```\n\n```js\nimport { parse } from 'jsdoc-type-pratt-parser'\n\nconst result = parse('SomeType<string>', 'typescript')\n```\n\n## API Documentation\n\nAn API documentation can be found [here](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/).\nIt is incomplete, but a good starting point. Please create issues or PRs if you don't find what you expect.\n\n## Available Grammars\n\nThree different modes (grammars) are supported: `'jsdoc'`, `'closure'` and `'typescript'`\n\n## Transforms\n\nA common task to do on ASTs are transforms, for example a stringification. This library includes some transform and\nutilities to implement your own.\n\n[`stringify`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#stringify):\n\n```js\nimport { stringify } from 'jsdoc-type-pratt-parser'\n\nconst val = stringify({ type: 'JsdocTypeName', value: 'name'}) // -> 'name'\n```\n\nYou can customize the stringification by using [`stringifyRules`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#stringifyRules)\nand [`transform`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#transform):\n\n```js\nimport { stringifyRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst rules = stringifyRules()\n\n// `result` is the current node and `transform` is a function to transform child nodes.\nrules.NAME = (result, transform) => 'something else'\n\nconst val = transform(rules, { type: 'JsdocTypeName', value: 'name'}) // -> 'something else'\n```\n\nYou can also build your own transform rules by implementing the [`TransformRules<TransformResultType>`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#TransformRules) interface or you\ncan build upon the [identity ruleset](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#identityTransformRules) like this:\n\n```js\nimport { identityTransformRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst myRules = identityTransformRules()\nmyRules.NAME = () => ({ type: 'JsdocTypeName', value: 'funky' })\n\nconst val = transform(myRules, result)\n```\n\nThis library also supports compatibility modes for catharsis and jsdoctypeparser. The provided transform functions attempt to\n transform the output to the expected output of the target library. This will not always be the same as some types are\n parsed differently. These modes are thought to make transition easier, but it is advised to use the native output as\n this will be more uniform and will contain more information.\n \n[Catharsis compat mode](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#catharsisTransform):\n\n```js\nimport { parse, catharsisTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = catharsisTransform(parse('myType.<string>', 'closure'))\n```\n\n[Jsdoctypeparser compat mode](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#jtpTransform):\n\n```js\nimport { parse, jtpTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = jtpTransform(parse('myType.<string>', 'closure'))\n```\n\n## Traverse\n\nYou can traverse an AST with the [`traverse`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#traverse) function:\n\n```js\nimport { traverse } from 'jsdoc-type-pratt-parser'\n\n// property is the name of the property on parent that contains node\nfunction onEnter(node, parent, property) {\n    console.log(node.type)\n}\n\n// an onEnter and/or an onLeave function can be supplied\ntraverse({ type: 'JsdocTypeName', value: 'name'}, onEnter, console.log)\n```\n\n## Tests Status\n\nThis parser runs most tests of [catharsis](https://github.com/hegemonic/catharsis) and\n[jsdoctypeparser](https://github.com/jsdoctypeparser/jsdoctypeparser). It compares the results of the different parsing libraries. If you\nwant to find out where the output differs, look in the tests for the comments `// This seems to be an error of ...` or\nthe `differ` keyword which indicates that differing results are produced.\n\n## Performance\n\nA simple [performance comparison](benchmark/benchmark.js) using [Benchmark.js](https://benchmarkjs.com/) produced the following results:\n```\nTesting expression: Name\ncatharsis x 37,816 ops/sec ±1.22% (1086 runs sampled)\njsdoc-type-pratt-parser x 602,617 ops/sec ±0.16% (1090 runs sampled)\njsdoctypeparser x 53,256 ops/sec ±0.73% (1081 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: Array<number>\ncatharsis x 10,124 ops/sec ±0.56% (1084 runs sampled)\njsdoc-type-pratt-parser x 228,660 ops/sec ±0.40% (1084 runs sampled)\njsdoctypeparser x 42,365 ops/sec ±0.60% (1070 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: { keyA: Type<A | \"string val\" >, keyB: function(string, B): A }\ncatharsis x 1,138 ops/sec ±0.66% (1087 runs sampled)\njsdoc-type-pratt-parser x 46,535 ops/sec ±0.47% (1090 runs sampled)\njsdoctypeparser x 18,291 ops/sec ±0.71% (1084 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n```\n\nThe benchmark test uses catharsis without cache.\n \n## Development\n\nIf you want to contribute see the [Development Guide](DEVELOPMENT.md) to get some pointers. Feel free to create issues if\nthere is information missing.\n","types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main",{"name":"dev","prerelease":true}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"readmeFilename":"README.md","gitHead":"8c7adb3c742a0214f513cd5b68cb368bceb6ebd5","_nodeVersion":"18.14.2","_npmVersion":"8.19.4","_npmUser":{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"},{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_3.2.0-dev.2_1678731112616_0.8630087982019747"},"_hasShrinkwrap":false},"3.2.0-dev.3":{"_id":"jsdoc-type-pratt-parser@3.2.0-dev.3","name":"jsdoc-type-pratt-parser","description":"[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser) [![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)]","version":"3.2.0-dev.3","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir"}],"repository":{"type":"git","url":"git+https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","test:coveralls":"nyc report --reporter=lcov && coveralls","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc --options typedoc.json","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release","benchmark":"npm run build && node benchmark/benchmark.js","upgrade":"npm-upgrade"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^11.0.0","@semantic-release/changelog":"^6.0.2","@semantic-release/git":"^10.0.1","@types/chai":"^4.3.4","@types/mocha":"^10.0.1","@types/node":"^18.15.1","@types/sinon":"^10.0.13","@types/sinon-chai":"^3.2.9","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.7","coveralls":"^3.1.1","eslint-config-standard-with-typescript":"^34.0.0","jsdoctypeparser":"^9.0.0","mocha":"^10.2.0","npm-upgrade":"^3.1.0","nyc":"^15.1.0","rollup":"^3.19.1","semantic-release":"^20.1.1","sinon":"^15.0.2","sinon-chai":"^3.7.0","ts-node":"^10.9.1","ts-standard":"^12.0.2","typedoc":"^0.23.26","typedoc-plugin-merge-modules":"^4.0.1","typescript":"^4.9.5"},"engines":{"node":">=12.0.0"},"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"7e5aa21d0ace4fe50d810c791945e854c0981b27","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-3.2.0-dev.3.tgz"},"readme":"[![Npm Package](https://badgen.net/npm/v/jsdoc-type-pratt-parser)](https://www.npmjs.com/package/jsdoc-type-pratt-parser)\n[![Test Status](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions/workflows/test.yml/badge.svg?branch=main)](https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/actions?query=branch%3Amain)\n[![Coverage Status](https://coveralls.io/repos/github/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/badge.svg?branch=main)](https://coveralls.io/github/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser?branch=main)\n[![Code Style](https://badgen.net/badge/code%20style/ts-standard/blue?icon=typescript)](https://github.com/standard/ts-standard)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n# Jsdoc Type Pratt Parser\n\nThis project is a parser for jsdoc types. It takes jsdoc type expressions like `Array<string>` and creates an abstract\nsyntax tree (AST) out of it. It is heavily inspired by the existing libraries [catharsis](https://github.com/hegemonic/catharsis) and [jsdoctypeparser](https://github.com/jsdoctypeparser/jsdoctypeparser), but does\nnot use [PEG.js](https://pegjs.org/), instead it is written as a pratt parser.\n\nYou can find some more information about pratt parsers here:\n* https://en.wikipedia.org/wiki/Operator-precedence_parser#Pratt_parsing\n* http://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/\n* https://matklad.github.io/2020/04/13/simple-but-powerful-pratt-parsing.html\n\n## Table of Contents\n* [Live Demo](#live-demo)\n* [Getting Started](#getting-started)\n* [API Documentation](#api-documentation)\n* [Available Grammars](#available-grammars)\n* [Transforms](#transforms)\n* [Traverse](#traverse)\n* [Tests Status](#tests-status)\n* [Performance](#performance)\n* [Development](#development)\n\n## Live Demo\n\nA simple live demo to test expressions can be found at: https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/\n\n## Getting started\n\n```\nnpm install jsdoc-type-pratt-parser@alpha\n```\n\n```js\nimport { parse } from 'jsdoc-type-pratt-parser'\n\nconst result = parse('SomeType<string>', 'typescript')\n```\n\n## API Documentation\n\nAn API documentation can be found [here](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/).\nIt is incomplete, but a good starting point. Please create issues or PRs if you don't find what you expect.\n\n## Available Grammars\n\nThree different modes (grammars) are supported: `'jsdoc'`, `'closure'` and `'typescript'`\n\n## Transforms\n\nA common task to do on ASTs are transforms, for example a stringification. This library includes some transform and\nutilities to implement your own.\n\n[`stringify`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#stringify):\n\n```js\nimport { stringify } from 'jsdoc-type-pratt-parser'\n\nconst val = stringify({ type: 'JsdocTypeName', value: 'name'}) // -> 'name'\n```\n\nYou can customize the stringification by using [`stringifyRules`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#stringifyRules)\nand [`transform`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#transform):\n\n```js\nimport { stringifyRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst rules = stringifyRules()\n\n// `result` is the current node and `transform` is a function to transform child nodes.\nrules.NAME = (result, transform) => 'something else'\n\nconst val = transform(rules, { type: 'JsdocTypeName', value: 'name'}) // -> 'something else'\n```\n\nYou can also build your own transform rules by implementing the [`TransformRules<TransformResultType>`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#TransformRules) interface or you\ncan build upon the [identity ruleset](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#identityTransformRules) like this:\n\n```js\nimport { identityTransformRules, transform } from 'jsdoc-type-pratt-parser'\n\nconst myRules = identityTransformRules()\nmyRules.NAME = () => ({ type: 'JsdocTypeName', value: 'funky' })\n\nconst val = transform(myRules, result)\n```\n\nThis library also supports compatibility modes for catharsis and jsdoctypeparser. The provided transform functions attempt to\n transform the output to the expected output of the target library. This will not always be the same as some types are\n parsed differently. These modes are thought to make transition easier, but it is advised to use the native output as\n this will be more uniform and will contain more information.\n \n[Catharsis compat mode](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#catharsisTransform):\n\n```js\nimport { parse, catharsisTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = catharsisTransform(parse('myType.<string>', 'closure'))\n```\n\n[Jsdoctypeparser compat mode](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#jtpTransform):\n\n```js\nimport { parse, jtpTransform } from 'jsdoc-type-pratt-parser'\n\nconst result = jtpTransform(parse('myType.<string>', 'closure'))\n```\n\n## Traverse\n\nYou can traverse an AST with the [`traverse`](https://jsdoc-type-pratt-parser.github.io/jsdoc-type-pratt-parser/docs/index.html#traverse) function:\n\n```js\nimport { traverse } from 'jsdoc-type-pratt-parser'\n\n// property is the name of the property on parent that contains node\nfunction onEnter(node, parent, property) {\n    console.log(node.type)\n}\n\n// an onEnter and/or an onLeave function can be supplied\ntraverse({ type: 'JsdocTypeName', value: 'name'}, onEnter, console.log)\n```\n\n## Tests Status\n\nThis parser runs most tests of [catharsis](https://github.com/hegemonic/catharsis) and\n[jsdoctypeparser](https://github.com/jsdoctypeparser/jsdoctypeparser). It compares the results of the different parsing libraries. If you\nwant to find out where the output differs, look in the tests for the comments `// This seems to be an error of ...` or\nthe `differ` keyword which indicates that differing results are produced.\n\n## Performance\n\nA simple [performance comparison](benchmark/benchmark.js) using [Benchmark.js](https://benchmarkjs.com/) produced the following results:\n```\nTesting expression: Name\ncatharsis x 37,816 ops/sec ±1.22% (1086 runs sampled)\njsdoc-type-pratt-parser x 602,617 ops/sec ±0.16% (1090 runs sampled)\njsdoctypeparser x 53,256 ops/sec ±0.73% (1081 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: Array<number>\ncatharsis x 10,124 ops/sec ±0.56% (1084 runs sampled)\njsdoc-type-pratt-parser x 228,660 ops/sec ±0.40% (1084 runs sampled)\njsdoctypeparser x 42,365 ops/sec ±0.60% (1070 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n\nTesting expression: { keyA: Type<A | \"string val\" >, keyB: function(string, B): A }\ncatharsis x 1,138 ops/sec ±0.66% (1087 runs sampled)\njsdoc-type-pratt-parser x 46,535 ops/sec ±0.47% (1090 runs sampled)\njsdoctypeparser x 18,291 ops/sec ±0.71% (1084 runs sampled)\nThe fastest was jsdoc-type-pratt-parser\n```\n\nThe benchmark test uses catharsis without cache.\n \n## Development\n\nIf you want to contribute see the [Development Guide](DEVELOPMENT.md) to get some pointers. Feel free to create issues if\nthere is information missing.\n","types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main",{"name":"dev","prerelease":true}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]},"readmeFilename":"README.md","gitHead":"97e7f38682f0e2ce5d56d762d84c545710dbbf03","_nodeVersion":"18.14.2","_npmVersion":"8.19.4","_npmUser":{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"},"maintainers":[{"name":"simonseyock","email":"simonseyock@googlemail.com"},{"name":"jsdoc-type-pratt-parser","email":"simonseyock+jtpp@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/jsdoc-type-pratt-parser_3.2.0-dev.3_1678732839379_0.21262055057968343"},"_hasShrinkwrap":false},"4.0.0":{"_id":"jsdoc-type-pratt-parser@4.0.0","name":"jsdoc-type-pratt-parser","description":"","version":"4.0.0","keywords":["jsdoc","pratt","parser"],"homepage":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser","author":{"name":"Simon Seyock","email":"","url":"https://github.com/simonseyock"},"contributors":[{"name":"Brett Zamir","email":"","url":""}],"repository":{"type":"git","url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser.git"},"bugs":{"url":"https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues"},"license":"MIT","scripts":{"test":"npm run typecheck && npm run lint && npm run test:spec","test:spec":"mocha","test:coverage":"nyc --all npm run test:spec","test:coveralls":"nyc report --reporter=lcov && coveralls","lint":"ts-standard","typecheck":"tsc --noEmit","build":"rollup -c","apidoc":"typedoc --options typedoc.json","preversion":"npm test","prepublishOnly":"npm run build","semantic-release":"semantic-release","benchmark":"npm run build && node benchmark/benchmark.js","upgrade":"npm-upgrade"},"directories":{},"devDependencies":{"@rollup/plugin-typescript":"^11.0.0","@semantic-release/changelog":"^6.0.2","@semantic-release/git":"^10.0.1","@types/chai":"^4.3.4","@types/mocha":"^10.0.1","@types/node":"^18.15.1","@types/sinon":"^10.0.13","@types/sinon-chai":"^3.2.9","benchmark":"^2.1.4","catharsis":"^0.9.0","chai":"^4.3.7","coveralls":"^3.1.1","eslint-config-standard-with-typescript":"^34.0.0","jsdoctypeparser":"^9.0.0","mocha":"^10.2.0","npm-upgrade":"^3.1.0","nyc":"^15.1.0","rollup":"^3.19.1","semantic-release":"^20.1.1","sinon":"^15.0.2","sinon-chai":"^3.7.0","ts-node":"^10.9.1","ts-standard":"^12.0.2","typedoc":"^0.23.26","typedoc-plugin-merge-modules":"^4.0.1","typescript":"^4.9.5"},"engines":{"node":">=12.0.0"},"files":["dist/**/*","src/**/*"],"main":"dist/index.js","publishConfig":{"access":"public"},"dist":{"shasum":"136f0571a99c184d84ec84662c45c29ceff71114","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/jsdoc-type-pratt-parser/-/jsdoc-type-pratt-parser-4.0.0.tgz"},"types":"dist/src/index.d.ts","ts-standard":{"ignore":["/submodules/","/build/","/pages/"]},"release":{"branches":["main",{"name":"dev","prerelease":true}],"plugins":["@semantic-release/commit-analyzer","@semantic-release/github","@semantic-release/npm","@semantic-release/release-notes-generator","@semantic-release/changelog","@semantic-release/git"]}}},"time":{"created":"2022-09-07T20:06:02Z","modified":"2023-11-02T08:25:08Z","1.0.0-alpha.1":"2022-09-07T20:06:02Z","1.0.0-alpha.2":"2022-09-07T20:06:02Z","1.0.0-alpha.3.0":"2022-09-07T20:06:02Z","1.0.0-alpha.4.0":"2022-09-07T20:06:02Z","1.0.0-alpha.6.0":"2022-09-07T20:06:02Z","1.0.0-alpha.7.0":"2022-09-07T20:06:02Z","1.0.0-alpha.8.0":"2022-09-07T20:06:02Z","1.0.0-alpha.9.0":"2022-09-07T20:06:02Z","1.0.0-alpha.10.0":"2022-09-07T20:06:02Z","1.0.0-alpha.11.0":"2022-09-07T20:06:02Z","1.0.0-alpha.12.0":"2022-09-07T20:06:02Z","1.0.0-alpha.13":"2022-09-07T20:06:02Z","1.0.0-alpha.14":"2022-09-07T20:06:02Z","1.0.0-alpha.15":"2022-09-07T20:06:02Z","1.0.0-alpha.16":"2022-09-07T20:06:02Z","1.0.0-alpha.17":"2022-09-07T20:06:02Z","1.0.0-alpha.18":"2022-09-07T20:06:02Z","1.0.0-alpha.19":"2022-09-07T20:06:02Z","1.0.0-alpha.20":"2022-09-07T20:06:02Z","1.0.0-alpha.21":"2022-09-07T20:06:02Z","1.0.0-alpha.22":"2022-09-07T20:06:02Z","1.0.0-alpha.23":"2022-09-07T20:06:02Z","1.0.0-alpha.24":"2022-09-07T20:06:02Z","1.0.0":"2022-09-07T20:06:02Z","1.0.1":"2022-09-07T20:06:02Z","1.0.2":"2022-09-07T20:06:02Z","1.0.3":"2022-09-07T20:06:02Z","1.0.4":"2022-09-07T20:06:02Z","1.0.6":"2022-09-07T20:06:02Z","1.0.7":"2022-09-07T20:06:02Z","1.0.8":"2022-09-07T20:06:02Z","1.1.1":"2022-09-07T20:06:02Z","1.2.0":"2022-09-07T20:06:02Z","2.0.0":"2022-09-07T20:06:02Z","2.0.1":"2022-09-07T20:06:02Z","2.0.2":"2022-09-07T20:06:02Z","2.1.0":"2022-09-07T20:06:02Z","2.2.0":"2022-09-07T20:06:02Z","2.2.1":"2022-09-07T20:06:02Z","2.2.2":"2022-09-07T20:06:02Z","2.2.3":"2022-09-07T20:06:02Z","2.2.4":"2022-09-07T20:06:02Z","2.2.5":"2022-09-07T20:06:03Z","3.0.0":"2022-09-07T20:06:02Z","3.0.1":"2022-09-07T20:06:02Z","3.1.0":"2022-11-21T18:12:19Z","3.2.0-dev.1":"2023-03-13T17:56:56Z","3.2.0-dev.2":"2023-03-13T20:48:06Z","3.2.0-dev.3":"2023-03-13T20:48:06Z","4.0.0":"2023-11-02T08:25:08Z"}}