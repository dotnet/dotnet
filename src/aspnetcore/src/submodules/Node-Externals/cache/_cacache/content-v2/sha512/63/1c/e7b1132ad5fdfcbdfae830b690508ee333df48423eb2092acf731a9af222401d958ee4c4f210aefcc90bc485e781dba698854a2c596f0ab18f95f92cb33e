{"_id":"watchpack","_rev":"7446acd3-5f27-4a12-86b7-910f25dafe9e","name":"watchpack","dist-tags":{"latest":"2.4.1","beta":"2.0.0-beta.15","watchpack-1":"1.7.5"},"versions":{"0.1.0":{"_id":"watchpack@0.1.0","name":"watchpack","description":"","version":"0.1.0","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"test":"mocha -R spec"},"directories":{},"devDependencies":{"mocha":"^1.20.1","rimraf":"^2.2.8","should":"^4.0.4"},"dependencies":{"async":"^0.9.0","chokidar":"^0.8.2","graceful-fs":"^3.0.2"},"main":"./lib/watchpack.js","dist":{"shasum":"11e051ddf66305c9b7aff9e419d1454ce5121890","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-0.1.0.tgz"},"gitHead":"b6421901758bc4abfd8e9310202aab2be57e8931","_from":".","_npmVersion":"1.4.16","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}]},"0.1.1":{"_id":"watchpack@0.1.1","name":"watchpack","description":"","version":"0.1.1","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"test":"mocha -R spec"},"directories":{},"devDependencies":{"mocha":"^1.20.1","rimraf":"^2.2.8","should":"^4.0.4"},"dependencies":{"async":"^0.9.0","chokidar":"^0.10.3","graceful-fs":"^3.0.2"},"main":"./lib/watchpack.js","dist":{"shasum":"bccd2c170297827a12bf2741492ef48a85befcea","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-0.1.1.tgz"},"gitHead":"2683b410383c7fda52906a17a3acf67465a42512","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}]},"0.1.2":{"_id":"watchpack@0.1.2","name":"watchpack","description":"","version":"0.1.2","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"test":"mocha -R spec"},"directories":{},"devDependencies":{"mocha":"^1.20.1","rimraf":"^2.2.8","should":"^4.0.4"},"dependencies":{"async":"^0.9.0","chokidar":"^0.10.3","graceful-fs":"^3.0.2"},"main":"./lib/watchpack.js","dist":{"shasum":"361dc9e8577d60ad588ebfd815aed22e533d35ae","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-0.1.2.tgz"},"gitHead":"07acc8baea30dc0056a7d95f8b64b37d01e96796","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}]},"0.1.3":{"_id":"watchpack@0.1.3","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"0.1.3","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"test":"mocha -R spec"},"directories":{},"devDependencies":{"mocha":"^1.20.1","rimraf":"^2.2.8","should":"^4.0.4"},"dependencies":{"async":"^0.9.0","chokidar":"^0.11.0","graceful-fs":"^3.0.2"},"main":"./lib/watchpack.js","dist":{"shasum":"c2f7b545c1d0d4a2243507f06dbd5efc68b06453","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-0.1.3.tgz"},"gitHead":"8b395bada828075f943b14e6bc1b9ba954e783d0","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}]},"0.2.0":{"_id":"watchpack@0.2.0","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"0.2.0","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"test":"mocha -R spec"},"directories":{},"devDependencies":{"mocha":"^2.1.0","rimraf":"^2.2.8","should":"^4.6.0"},"dependencies":{"async":"^0.9.0","chokidar":"^0.12.0","graceful-fs":"^3.0.2"},"main":"./lib/watchpack.js","dist":{"shasum":"2c70c3d2d76b9aa50405f314c877db0a20daecf8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-0.2.0.tgz"},"gitHead":"3be750c81dc0921127869d245c772600b3f02596","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}]},"0.2.1":{"_id":"watchpack@0.2.1","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"0.2.1","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"test":"mocha -R spec"},"directories":{},"devDependencies":{"mocha":"^2.1.0","rimraf":"^2.2.8","should":"^4.6.0"},"dependencies":{"async":"^0.9.0","chokidar":"^0.12.0","graceful-fs":"^3.0.2"},"main":"./lib/watchpack.js","dist":{"shasum":"e8b5850595eec9f001a61f41bc50e639aa66ea60","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-0.2.1.tgz"},"gitHead":"a75b264bf47d419e9ea11c011d5ebbf27e73476e","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}]},"0.2.2":{"_id":"watchpack@0.2.2","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"0.2.2","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"test":"mocha -R spec"},"directories":{},"devDependencies":{"mocha":"^2.1.0","rimraf":"^2.2.8","should":"^4.6.0"},"dependencies":{"async":"^0.9.0","chokidar":"git+https://github.com/paulmillr/chokidar#f4c49296b708c6901429a6497b31a8b907bdd8c0","graceful-fs":"^3.0.2"},"main":"./lib/watchpack.js","dist":{"shasum":"3f2610f8112f54263a1b8b51d05fc1914fa2d715","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-0.2.2.tgz"},"gitHead":"2040030bb362253765b3b9aa906f2ec2f03d08f5","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}]},"0.2.3":{"_id":"watchpack@0.2.3","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"0.2.3","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"test":"mocha -R spec"},"directories":{},"devDependencies":{"mocha":"^2.1.0","rimraf":"^2.2.8","should":"^4.6.0"},"dependencies":{"async":"^0.9.0","chokidar":"^1.0.0-rc2","graceful-fs":"^3.0.2"},"main":"./lib/watchpack.js","dist":{"shasum":"b9a5342327ee34a9ff1dfb42762be3a9c08ac214","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-0.2.3.tgz"},"gitHead":"85798b20364ff909f2a745071be27015d577780e","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}]},"0.2.4":{"_id":"watchpack@0.2.4","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"0.2.4","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"test":"mocha -R spec"},"directories":{},"devDependencies":{"mocha":"^2.1.0","rimraf":"^2.2.8","should":"^4.6.0"},"dependencies":{"async":"^0.9.0","chokidar":"^1.0.0","graceful-fs":"^3.0.2"},"main":"./lib/watchpack.js","dist":{"shasum":"4af6c10f756e731b001645d34e637aa9201e97e8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-0.2.4.tgz"},"gitHead":"60b90e68cf2aa2446879bc874f85928e2b6d98cc","_from":".","_npmVersion":"1.4.23","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}]},"0.2.5":{"_id":"watchpack@0.2.5","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"0.2.5","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^2.11.2","eslint":"^0.20.0","istanbul":"^0.3.13","mocha":"^2.1.0","rimraf":"^2.2.8","should":"^6.0.1"},"dependencies":{"async":"^0.9.0","chokidar":"^1.0.0","graceful-fs":"^3.0.2"},"main":"./lib/watchpack.js","dist":{"shasum":"47665449aa94e7ef859d7d042d6eb6bd8c0b853f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-0.2.5.tgz"},"gitHead":"a2b8ac066e90ad2e23edeb18205c13556d6a6e49","_from":".","_npmVersion":"2.9.0","_nodeVersion":"0.12.2","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}]},"0.2.6":{"_id":"watchpack@0.2.6","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"0.2.6","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^2.11.2","eslint":"^0.20.0","istanbul":"^0.3.13","mocha":"^2.1.0","rimraf":"^2.2.8","should":"^6.0.1"},"dependencies":{"async":"^0.9.0","chokidar":"^1.0.0","graceful-fs":"^3.0.2"},"main":"./lib/watchpack.js","dist":{"shasum":"9f87bf550a93cdc1f31f45fc771593e6f682e023","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-0.2.6.tgz"},"gitHead":"b29336bf25942563fa5bdcb3bec28299a0861020","_from":".","_npmVersion":"2.9.0","_nodeVersion":"0.12.2","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}]},"0.2.7":{"_id":"watchpack@0.2.7","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"0.2.7","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^2.11.2","eslint":"^0.20.0","istanbul":"^0.3.13","mocha":"^2.1.0","rimraf":"^2.2.8","should":"^6.0.1"},"dependencies":{"async":"^0.9.0","chokidar":"^1.0.0","graceful-fs":"^3.0.2"},"main":"./lib/watchpack.js","dist":{"shasum":"958c566522f150d7bedbc00ddc1c4997dd45dd99","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-0.2.7.tgz"},"gitHead":"4a50e7edcd94e885420717c2c3cb730d679cd75b","_from":".","_npmVersion":"2.9.0","_nodeVersion":"0.12.2","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}]},"0.2.8":{"_id":"watchpack@0.2.8","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"0.2.8","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^2.11.2","eslint":"^0.20.0","istanbul":"^0.3.13","mocha":"^2.1.0","rimraf":"^2.2.8","should":"^6.0.1"},"dependencies":{"async":"^0.9.0","chokidar":"^1.0.0","graceful-fs":"^3.0.2"},"main":"./lib/watchpack.js","dist":{"shasum":"3234d3648e72a43f25c225fb8ff12877d3f4ac47","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-0.2.8.tgz"},"gitHead":"3f5ec9863c36dbee8b5e3d9a2a730c1f3d02b993","_from":".","_npmVersion":"2.9.0","_nodeVersion":"0.12.2","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}]},"0.2.9":{"_id":"watchpack@0.2.9","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"0.2.9","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^2.11.2","eslint":"^0.20.0","istanbul":"^0.3.13","mocha":"^2.1.0","rimraf":"^2.2.8","should":"^6.0.1"},"dependencies":{"async":"^0.9.0","chokidar":"^1.0.0","graceful-fs":"^4.1.2"},"main":"./lib/watchpack.js","dist":{"shasum":"62eaa4ab5e5ba35fdfc018275626e3c0f5e3fb0b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-0.2.9.tgz"},"gitHead":"8f3ae3e9700ed68a690de6d19e3581d50bd02d3a","_from":".","_npmVersion":"3.3.3","_nodeVersion":"4.0.0","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}]},"1.0.0":{"_id":"watchpack@1.0.0","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"1.0.0","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^2.11.2","eslint":"^0.20.0","istanbul":"^0.3.13","mocha":"^2.1.0","rimraf":"^2.2.8","should":"^6.0.1"},"dependencies":{"async":"^0.9.0","chokidar":"^1.0.0","graceful-fs":"^4.1.2"},"main":"./lib/watchpack.js","dist":{"shasum":"ae2bff6640f3d90961176f7afb87221aa9dd1cf4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-1.0.0.tgz"},"gitHead":"b0482e92d0c3c323ce6c8d181721066d48b48f23","_from":".","_npmVersion":"3.3.3","_nodeVersion":"5.4.1","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"packages-6-west.internal.npmjs.com","tmp":"tmp/watchpack-1.0.0.tgz_1455046184077_0.8447235701605678"}},"1.0.1":{"_id":"watchpack@1.0.1","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"1.0.1","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^2.11.2","eslint":"^0.20.0","istanbul":"^0.3.13","mocha":"^2.1.0","rimraf":"^2.2.8","should":"^6.0.1"},"dependencies":{"async":"^0.9.0","chokidar":"^1.0.0","graceful-fs":"^4.1.2"},"main":"./lib/watchpack.js","dist":{"shasum":"3e37162267624543da11d9cf4cce5d0f455841e6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-1.0.1.tgz"},"gitHead":"7efdd93aff0c991a766af886ccc16324401a202f","_from":".","_npmVersion":"3.3.3","_nodeVersion":"5.4.1","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"packages-9-west.internal.npmjs.com","tmp":"tmp/watchpack-1.0.1.tgz_1455047872595_0.11300681042484939"}},"1.1.0":{"_id":"watchpack@1.1.0","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"1.1.0","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^2.11.2","eslint":"^2.9.0","istanbul":"^0.4.3","mocha":"^2.1.0","rimraf":"^2.2.8","should":"^8.3.1"},"dependencies":{"async":"2.0.0-rc.4","chokidar":"^1.4.3","graceful-fs":"^4.1.2"},"main":"./lib/watchpack.js","dist":{"shasum":"42d44627464a2fadffc9308c0f7562cfde795f24","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-1.1.0.tgz"},"gitHead":"2ba154a81dd151a0f1857ea5395954a7d9891ed7","_from":".","_npmVersion":"3.8.1","_nodeVersion":"6.1.0","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/watchpack-1.1.0.tgz_1462538539308_0.10082799079827964"}},"1.2.0":{"_id":"watchpack@1.2.0","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"1.2.0","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"codecov.io":"^0.1.6","coveralls":"^2.11.2","eslint":"^2.9.0","istanbul":"^0.4.3","mocha":"^2.1.0","rimraf":"^2.2.8","should":"^8.3.1"},"dependencies":{"async":"^2.1.2","chokidar":"^1.4.3","graceful-fs":"^4.1.2"},"files":["lib/"],"main":"./lib/watchpack.js","dist":{"shasum":"15d4620f1e7471f13fcb551d5c030d2c3eb42dbb","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-1.2.0.tgz"},"gitHead":"08d4759606262c4216bf3b966163debb08553189","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/watchpack-1.2.0.tgz_1483085918631_0.4026371533982456"}},"1.2.1":{"_id":"watchpack@1.2.1","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"1.2.1","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"codecov.io":"^0.1.6","coveralls":"^2.11.2","eslint":"^2.9.0","istanbul":"^0.4.3","mocha":"^2.1.0","rimraf":"^2.2.8","should":"^8.3.1"},"dependencies":{"async":"^2.1.2","chokidar":"^1.4.3","graceful-fs":"^4.1.2"},"files":["lib/"],"main":"./lib/watchpack.js","dist":{"shasum":"01efa80c5c29e5c56ba55d6f5470a35b6402f0b2","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-1.2.1.tgz"},"gitHead":"13094190b0cc01f421146488a6944ab3690ed804","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/watchpack-1.2.1.tgz_1486982952212_0.46486362465657294"}},"1.3.0":{"_id":"watchpack@1.3.0","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"1.3.0","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"codecov.io":"^0.1.6","coveralls":"^2.11.2","eslint":"^2.9.0","istanbul":"^0.4.3","mocha":"^2.1.0","rimraf":"~2.5.0","should":"^8.3.1"},"dependencies":{"async":"^2.1.2","chokidar":"^1.4.3","graceful-fs":"^4.1.2"},"files":["lib/"],"main":"./lib/watchpack.js","dist":{"shasum":"5164d4faabb88dcf277f17c8a3b16bfd3da8bee3","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-1.3.0.tgz"},"gitHead":"4bc933c56836e25032bebc9f6996f2659377e6a6","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/watchpack-1.3.0.tgz_1487771855130_0.006241896189749241"}},"1.3.1":{"_id":"watchpack@1.3.1","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"1.3.1","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"codecov.io":"^0.1.6","coveralls":"^2.11.2","eslint":"^2.9.0","istanbul":"^0.4.3","mocha":"^2.1.0","rimraf":"~2.5.0","should":"^8.3.1"},"dependencies":{"async":"^2.1.2","chokidar":"^1.4.3","graceful-fs":"^4.1.2"},"files":["lib/"],"main":"./lib/watchpack.js","dist":{"shasum":"7d8693907b28ce6013e7f3610aa2a1acf07dad87","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-1.3.1.tgz"},"gitHead":"ebcdc813100168af1a61189403a8b1abfa5338a3","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/watchpack-1.3.1.tgz_1487784283426_0.4386741276830435"}},"1.4.0":{"_id":"watchpack@1.4.0","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"1.4.0","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"codecov.io":"^0.1.6","coveralls":"^2.11.2","eslint":"^2.9.0","istanbul":"^0.4.3","mocha":"^2.1.0","rimraf":"~2.5.0","should":"^8.3.1"},"dependencies":{"async":"^2.1.2","chokidar":"^1.7.0","graceful-fs":"^4.1.2"},"files":["lib/"],"main":"./lib/watchpack.js","dist":{"shasum":"4a1472bcbb952bd0a9bb4036801f954dfb39faac","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-1.4.0.tgz"},"gitHead":"9fc9be000ebd3377418c33be21764867e7a5cbcb","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.8.0","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack-1.4.0.tgz_1500111148832_0.024017252027988434"}},"1.5.0":{"_id":"watchpack@1.5.0","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"1.5.0","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"codecov.io":"^0.1.6","coveralls":"^3.0.0","eslint":"^4.18.1","istanbul":"^0.4.3","mocha":"^5.0.1","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"chokidar":"^2.0.2","graceful-fs":"^4.1.2","neo-async":"^2.5.0"},"files":["lib/"],"main":"./lib/watchpack.js","dist":{"shasum":"231e783af830a22f8966f65c4c4bacc814072eed","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-1.5.0.tgz"},"gitHead":"94a1a6b3fa76541fcca97faf33581e55b79e8564","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_1.5.0_1519831898485_0.3368980087892852"},"_hasShrinkwrap":false},"1.6.0":{"_id":"watchpack@1.6.0","name":"watchpack","description":"","version":"1.6.0","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra","email":"","url":""},"repository":{"type":"git","url":"https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"codecov.io":"^0.1.6","coveralls":"^3.0.0","eslint":"^4.18.1","istanbul":"^0.4.3","mocha":"^5.0.1","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"chokidar":"^2.0.2","graceful-fs":"^4.1.2","neo-async":"^2.5.0"},"files":["lib/"],"main":"./lib/watchpack.js","dist":{"shasum":"4bc12c2ebe8aa277a71f1d3f14d685c7b446cd00","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-1.6.0.tgz"}},"1.6.1":{"_id":"watchpack@1.6.1","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"1.6.1","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"codecov.io":"^0.1.6","coveralls":"^3.0.0","eslint":"^4.18.1","istanbul":"^0.4.3","mocha":"^5.0.1","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"chokidar":"^2.1.8","graceful-fs":"^4.1.2","neo-async":"^2.5.0"},"main":"./lib/watchpack.js","dist":{"shasum":"280da0a8718592174010c078c7585a74cd8cd0e2","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-1.6.1.tgz"},"gitHead":"4097e48e307b10c4dc3619edfcc4eafd7833fef9","_nodeVersion":"13.7.0","_npmVersion":"6.13.6","maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_1.6.1_1585251448358_0.8897295029765113"},"_hasShrinkwrap":false},"1.7.1":{"_id":"watchpack@1.7.1","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"1.7.1","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"codecov.io":"^0.1.6","coveralls":"^3.0.0","eslint":"^4.18.1","istanbul":"^0.4.3","mocha":"^5.0.1","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"graceful-fs":"^4.1.2","neo-async":"^2.5.0","chokidar":"^3.4.0","chokidar2":"file:./chokidar2"},"optionalDependencies":{"chokidar":"^3.4.0","chokidar2":"file:./chokidar2"},"main":"./lib/watchpack.js","dist":{"shasum":"54b27a197e74b785128cef78e4333e5f52ea729d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-1.7.1.tgz"},"gitHead":"d5b9c58c323c5aac4d5ab3ba0be87721b75070e8","_nodeVersion":"14.0.0","_npmVersion":"6.14.4","maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_1.7.1_1589639745410_0.8030501874206455"},"_hasShrinkwrap":false},"1.7.2":{"_id":"watchpack@1.7.2","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"1.7.2","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"codecov.io":"^0.1.6","coveralls":"^3.0.0","eslint":"^4.18.1","istanbul":"^0.4.3","mocha":"^5.0.1","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"graceful-fs":"^4.1.2","neo-async":"^2.5.0","chokidar":"^3.4.0","watchpack-chokidar2":"^2.0.0"},"optionalDependencies":{"chokidar":"^3.4.0","watchpack-chokidar2":"^2.0.0"},"main":"./lib/watchpack.js","dist":{"shasum":"c02e4d4d49913c3e7e122c3325365af9d331e9aa","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-1.7.2.tgz"},"gitHead":"8d207e733d5d03062fda298ffe49f3e3c3d35594","_nodeVersion":"14.0.0","_npmVersion":"6.14.4","maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_1.7.2_1589640607781_0.28246862884922463"},"_hasShrinkwrap":false},"1.7.3":{"_id":"watchpack@1.7.3","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"1.7.3","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"codecov.io":"^0.1.6","coveralls":"^3.0.0","eslint":"^4.18.1","istanbul":"^0.4.3","mocha":"^5.0.1","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"graceful-fs":"^4.1.2","neo-async":"^2.5.0","chokidar":"^3.4.1","watchpack-chokidar2":"^2.0.0"},"optionalDependencies":{"chokidar":"^3.4.1","watchpack-chokidar2":"^2.0.0"},"main":"./lib/watchpack.js","dist":{"shasum":"4034cb29070238c4d68094742e461923047bbaf6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-1.7.3.tgz"},"gitHead":"0276211c4453cbb0664e52b333c141bfd620b3bf","_nodeVersion":"14.5.0","_npmVersion":"6.14.5","maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_1.7.3_1595606807193_0.8809784191100587"},"_hasShrinkwrap":false},"1.7.4":{"_id":"watchpack@1.7.4","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"1.7.4","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"codecov.io":"^0.1.6","coveralls":"^3.0.0","eslint":"^4.18.1","istanbul":"^0.4.3","mocha":"^5.0.1","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"graceful-fs":"^4.1.2","neo-async":"^2.5.0","chokidar":"^3.4.1","watchpack-chokidar2":"^2.0.0"},"optionalDependencies":{"chokidar":"^3.4.1","watchpack-chokidar2":"^2.0.0"},"main":"./lib/watchpack.js","dist":{"shasum":"6e9da53b3c80bb2d6508188f5b200410866cd30b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-1.7.4.tgz"},"gitHead":"f7ef8e0a5266f78242abe21faa34c5d56eecd21f","_nodeVersion":"14.5.0","_npmVersion":"6.14.5","maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_1.7.4_1595606883251_0.4268026864790653"},"_hasShrinkwrap":false},"1.7.5":{"_id":"watchpack@1.7.5","name":"watchpack","description":"","version":"1.7.5","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra","email":"","url":""},"repository":{"type":"git","url":"https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"npm run lint","test":"mocha","travis":"npm run cover -- --report lcovonly","lint":"eslint lib","precover":"npm run lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"codecov.io":"^0.1.6","coveralls":"^3.0.0","eslint":"^4.18.1","istanbul":"^0.4.3","mocha":"^5.0.1","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"graceful-fs":"^4.1.2","neo-async":"^2.5.0","chokidar":"^3.4.1","watchpack-chokidar2":"^2.0.1"},"optionalDependencies":{"chokidar":"^3.4.1","watchpack-chokidar2":"^2.0.1"},"files":["lib/"],"main":"./lib/watchpack.js","dist":{"shasum":"1267e6c55e0b9b5be44c2023aed5437a2c26c453","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-1.7.5.tgz"}},"2.0.0-beta.0":{"_id":"watchpack@2.0.0-beta.0","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.0.0-beta.0","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","istanbul":"^0.4.3","mocha":"^5.0.1","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"graceful-fs":"^4.1.2","neo-async":"^2.5.0"},"engines":{"node":">=6.11.5"},"main":"./lib/watchpack.js","dist":{"shasum":"b94d7639340a966029940d07648e72de1ee435a9","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.0.0-beta.0.tgz"},"readme":"# watchpack\n\nWrapper library for directory and file watching.\n\n[![Build Status](https://travis-ci.org/webpack/watchpack.svg?branch=master)](https://travis-ci.org/webpack/watchpack) [![Build status](https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true)](https://ci.appveyor.com/project/sokra/watchpack/branch/master) [![Test coverage][coveralls-image]][coveralls-url] [![codecov](https://codecov.io/gh/webpack/watchpack/branch/master/graph/badge.svg)](https://codecov.io/gh/webpack/watchpack)\n\n## Concept\n\nwatchpack high level API doesn't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\n\n* The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\n* A user-faced `Watcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\n* Reference-counting is used on the `DirectoryWatcher` and `Watcher` to decide when to close them.\n* The real watchers are created by the `DirectoryWatcher`.\n* Files are never watched directly. This should keep the watcher count low.\n* Watching can be started in the past. This way watching can start after file reading.\n* Symlinks are not followed, instead the symlink is watched.\n\n## API\n\n``` javascript\nvar Watchpack = require(\"watchpack\");\n\nvar wp = new Watchpack({\n\t// options:\n\taggregateTimeout: 1000\n\t// fire \"aggregated\" event when after a change for 1000ms no additional change occurred\n\t// aggregated defaults to undefined, which doesn't fire an \"aggregated\" event\n\n\tpoll: true\n\t// poll: true - use polling with the default interval\n\t// poll: 10000 - use polling with an interval of 10s\n\t// poll defaults to undefined, which prefer native watching methods\n\t// Note: enable polling when watching on a network path\n\t// When WATCHPACK_POLLING environment variable is set it will override this option\n});\n\n// Watchpack.prototype.watch(files: string[], directories: string[], startTime?: number)\nwp.watch(listOfFiles, listOfDirectories, Date.now() - 10000);\n// starts watching these files and directories\n// calling this again will override the files and directories\n\nwp.on(\"change\", function(filePath, mtime) {\n\t// filePath: the changed file\n\t// mtime: last modified time for the changed file (null if file was removed)\n\t// for folders it's a time before that all changes in the directory happened\n});\n\nwp.on(\"aggregated\", function(changes, removals) {\n\t// changes: a Set of all changed files\n\t// removals: a Set of all removed files\n});\n\n// Watchpack.prototype.pause()\nwp.pause();\n// stops emitting events, but keeps watchers open\n// next \"watch\" call can reuse the watchers\n\n// Watchpack.prototype.close()\nwp.close();\n// stops emitting events and closes all watchers\n\n// Watchpack.prototype.getTimeInfoEntries()\nvar fileTimes = wp.getTimeInfoEntries();\n// returns a Map with all known time info objects for files and directories\n// this include info from files not directly watched\n// key: absolute path, value: object with { safeTime, timestamp }\n// safeTime: the time before that all changes happened\n// timestamp: only for files, the mtime timestamp of the file\n\n// (deprecated)\n// Watchpack.prototype.getTimes()\nvar fileTimes = wp.getTimes();\n// returns an object with all known change times for files\n// this include timestamps from files not directly watched\n// key: absolute path, value: timestamp as number\n```\n\n[coveralls-url]: https://coveralls.io/r/webpack/watchpack/\n[coveralls-image]: https://img.shields.io/coveralls/webpack/watchpack.svg\n","readmeFilename":"README.md","gitHead":"80ffc552b6c13468189bb669013d987b58ef3bb8","_npmVersion":"6.4.1","_nodeVersion":"10.12.0","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.0.0-beta.0_1546952757672_0.7579133625929286"},"_hasShrinkwrap":false},"2.0.0-beta.1":{"_id":"watchpack@2.0.0-beta.1","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.0.0-beta.1","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","istanbul":"^0.4.3","mocha":"^5.0.1","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"graceful-fs":"^4.1.2","neo-async":"^2.5.0"},"engines":{"node":">=6.11.5"},"main":"./lib/watchpack.js","dist":{"shasum":"9f15e00a24cc65faec4ba633f7c77db060a241ab","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.0.0-beta.1.tgz"},"readme":"# watchpack\n\nWrapper library for directory and file watching.\n\n[![Build Status](https://travis-ci.org/webpack/watchpack.svg?branch=master)](https://travis-ci.org/webpack/watchpack) [![Build status](https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true)](https://ci.appveyor.com/project/sokra/watchpack/branch/master) [![Test coverage][coveralls-image]][coveralls-url] [![codecov](https://codecov.io/gh/webpack/watchpack/branch/master/graph/badge.svg)](https://codecov.io/gh/webpack/watchpack)\n\n## Concept\n\nwatchpack high level API doesn't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\n\n* The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\n* A user-faced `Watcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\n* Reference-counting is used on the `DirectoryWatcher` and `Watcher` to decide when to close them.\n* The real watchers are created by the `DirectoryWatcher`.\n* Files are never watched directly. This should keep the watcher count low.\n* Watching can be started in the past. This way watching can start after file reading.\n* Symlinks are not followed, instead the symlink is watched.\n\n## API\n\n``` javascript\nvar Watchpack = require(\"watchpack\");\n\nvar wp = new Watchpack({\n\t// options:\n\taggregateTimeout: 1000\n\t// fire \"aggregated\" event when after a change for 1000ms no additional change occurred\n\t// aggregated defaults to undefined, which doesn't fire an \"aggregated\" event\n\n\tpoll: true\n\t// poll: true - use polling with the default interval\n\t// poll: 10000 - use polling with an interval of 10s\n\t// poll defaults to undefined, which prefer native watching methods\n\t// Note: enable polling when watching on a network path\n\t// When WATCHPACK_POLLING environment variable is set it will override this option\n});\n\n// Watchpack.prototype.watch(files: string[], directories: string[], startTime?: number)\nwp.watch(listOfFiles, listOfDirectories, Date.now() - 10000);\n// starts watching these files and directories\n// calling this again will override the files and directories\n\nwp.on(\"change\", function(filePath, mtime) {\n\t// filePath: the changed file\n\t// mtime: last modified time for the changed file (null if file was removed)\n\t// for folders it's a time before that all changes in the directory happened\n});\n\nwp.on(\"aggregated\", function(changes, removals) {\n\t// changes: a Set of all changed files\n\t// removals: a Set of all removed files\n});\n\n// Watchpack.prototype.pause()\nwp.pause();\n// stops emitting events, but keeps watchers open\n// next \"watch\" call can reuse the watchers\n\n// Watchpack.prototype.close()\nwp.close();\n// stops emitting events and closes all watchers\n\n// Watchpack.prototype.getTimeInfoEntries()\nvar fileTimes = wp.getTimeInfoEntries();\n// returns a Map with all known time info objects for files and directories\n// this include info from files not directly watched\n// key: absolute path, value: object with { safeTime, timestamp }\n// safeTime: the time before that all changes happened\n// timestamp: only for files, the mtime timestamp of the file\n\n// (deprecated)\n// Watchpack.prototype.getTimes()\nvar fileTimes = wp.getTimes();\n// returns an object with all known change times for files\n// this include timestamps from files not directly watched\n// key: absolute path, value: timestamp as number\n```\n\n[coveralls-url]: https://coveralls.io/r/webpack/watchpack/\n[coveralls-image]: https://img.shields.io/coveralls/webpack/watchpack.svg\n","readmeFilename":"README.md","gitHead":"76b0e4adab98c8f6e64affb65161e0b212197b5c","_npmVersion":"6.4.1","_nodeVersion":"10.12.0","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.0.0-beta.1_1547036543408_0.016629539584378294"},"_hasShrinkwrap":false},"2.0.0-beta.2":{"_id":"watchpack@2.0.0-beta.2","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.0.0-beta.2","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","istanbul":"^0.4.3","mocha":"^5.0.1","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"graceful-fs":"^4.1.2","neo-async":"^2.5.0"},"engines":{"node":">=6.11.5"},"main":"./lib/watchpack.js","dist":{"shasum":"357ed627767dd16ed80500f49c5d4029b49248cb","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.0.0-beta.2.tgz"},"readme":"# watchpack\n\nWrapper library for directory and file watching.\n\n[![Build Status](https://travis-ci.org/webpack/watchpack.svg?branch=master)](https://travis-ci.org/webpack/watchpack) [![Build status](https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true)](https://ci.appveyor.com/project/sokra/watchpack/branch/master) [![Test coverage][coveralls-image]][coveralls-url] [![codecov](https://codecov.io/gh/webpack/watchpack/branch/master/graph/badge.svg)](https://codecov.io/gh/webpack/watchpack)\n\n## Concept\n\nwatchpack high level API doesn't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\n\n* The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\n* A user-faced `Watcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\n* Reference-counting is used on the `DirectoryWatcher` and `Watcher` to decide when to close them.\n* The real watchers are created by the `DirectoryWatcher`.\n* Files are never watched directly. This should keep the watcher count low.\n* Watching can be started in the past. This way watching can start after file reading.\n* Symlinks are not followed, instead the symlink is watched.\n\n## API\n\n``` javascript\nvar Watchpack = require(\"watchpack\");\n\nvar wp = new Watchpack({\n\t// options:\n\taggregateTimeout: 1000\n\t// fire \"aggregated\" event when after a change for 1000ms no additional change occurred\n\t// aggregated defaults to undefined, which doesn't fire an \"aggregated\" event\n\n\tpoll: true\n\t// poll: true - use polling with the default interval\n\t// poll: 10000 - use polling with an interval of 10s\n\t// poll defaults to undefined, which prefer native watching methods\n\t// Note: enable polling when watching on a network path\n\t// When WATCHPACK_POLLING environment variable is set it will override this option\n});\n\n// Watchpack.prototype.watch(files: string[], directories: string[], startTime?: number)\nwp.watch(listOfFiles, listOfDirectories, Date.now() - 10000);\n// starts watching these files and directories\n// calling this again will override the files and directories\n\nwp.on(\"change\", function(filePath, mtime) {\n\t// filePath: the changed file\n\t// mtime: last modified time for the changed file (null if file was removed)\n\t// for folders it's a time before that all changes in the directory happened\n});\n\nwp.on(\"aggregated\", function(changes, removals) {\n\t// changes: a Set of all changed files\n\t// removals: a Set of all removed files\n});\n\n// Watchpack.prototype.pause()\nwp.pause();\n// stops emitting events, but keeps watchers open\n// next \"watch\" call can reuse the watchers\n\n// Watchpack.prototype.close()\nwp.close();\n// stops emitting events and closes all watchers\n\n// Watchpack.prototype.getTimeInfoEntries()\nvar fileTimes = wp.getTimeInfoEntries();\n// returns a Map with all known time info objects for files and directories\n// this include info from files not directly watched\n// key: absolute path, value: object with { safeTime, timestamp }\n// safeTime: the time before that all changes happened\n// timestamp: only for files, the mtime timestamp of the file\n\n// (deprecated)\n// Watchpack.prototype.getTimes()\nvar fileTimes = wp.getTimes();\n// returns an object with all known change times for files\n// this include timestamps from files not directly watched\n// key: absolute path, value: timestamp as number\n```\n\n[coveralls-url]: https://coveralls.io/r/webpack/watchpack/\n[coveralls-image]: https://img.shields.io/coveralls/webpack/watchpack.svg\n","readmeFilename":"README.md","gitHead":"9e8152b850a2492cb27f624e8a898ea23fde199f","_npmVersion":"6.4.1","_nodeVersion":"10.15.0","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.0.0-beta.2_1547041299927_0.15293273802178775"},"_hasShrinkwrap":false},"2.0.0-beta.3":{"_id":"watchpack@2.0.0-beta.3","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.0.0-beta.3","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","istanbul":"^0.4.3","mocha":"^5.0.1","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"graceful-fs":"^4.1.2","neo-async":"^2.5.0"},"engines":{"node":">=6.11.5"},"main":"./lib/watchpack.js","dist":{"shasum":"deec81c4244bf4898633cbf887415d5f84747bed","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.0.0-beta.3.tgz"},"readme":"# watchpack\n\nWrapper library for directory and file watching.\n\n[![Build Status](https://travis-ci.org/webpack/watchpack.svg?branch=master)](https://travis-ci.org/webpack/watchpack) [![Build status](https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true)](https://ci.appveyor.com/project/sokra/watchpack/branch/master) [![Test coverage][coveralls-image]][coveralls-url] [![codecov](https://codecov.io/gh/webpack/watchpack/branch/master/graph/badge.svg)](https://codecov.io/gh/webpack/watchpack)\n\n## Concept\n\nwatchpack high level API doesn't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\n\n* The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\n* A user-faced `Watcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\n* Reference-counting is used on the `DirectoryWatcher` and `Watcher` to decide when to close them.\n* The real watchers are created by the `DirectoryWatcher`.\n* Files are never watched directly. This should keep the watcher count low.\n* Watching can be started in the past. This way watching can start after file reading.\n* Symlinks are not followed, instead the symlink is watched.\n\n## API\n\n``` javascript\nvar Watchpack = require(\"watchpack\");\n\nvar wp = new Watchpack({\n\t// options:\n\taggregateTimeout: 1000\n\t// fire \"aggregated\" event when after a change for 1000ms no additional change occurred\n\t// aggregated defaults to undefined, which doesn't fire an \"aggregated\" event\n\n\tpoll: true\n\t// poll: true - use polling with the default interval\n\t// poll: 10000 - use polling with an interval of 10s\n\t// poll defaults to undefined, which prefer native watching methods\n\t// Note: enable polling when watching on a network path\n\t// When WATCHPACK_POLLING environment variable is set it will override this option\n});\n\n// Watchpack.prototype.watch(files: string[], directories: string[], startTime?: number)\nwp.watch(listOfFiles, listOfDirectories, Date.now() - 10000);\n// starts watching these files and directories\n// calling this again will override the files and directories\n\nwp.on(\"change\", function(filePath, mtime) {\n\t// filePath: the changed file\n\t// mtime: last modified time for the changed file (null if file was removed)\n\t// for folders it's a time before that all changes in the directory happened\n});\n\nwp.on(\"aggregated\", function(changes, removals) {\n\t// changes: a Set of all changed files\n\t// removals: a Set of all removed files\n});\n\n// Watchpack.prototype.pause()\nwp.pause();\n// stops emitting events, but keeps watchers open\n// next \"watch\" call can reuse the watchers\n\n// Watchpack.prototype.close()\nwp.close();\n// stops emitting events and closes all watchers\n\n// Watchpack.prototype.getTimeInfoEntries()\nvar fileTimes = wp.getTimeInfoEntries();\n// returns a Map with all known time info objects for files and directories\n// this include info from files not directly watched\n// key: absolute path, value: object with { safeTime, timestamp }\n// safeTime: the time before that all changes happened\n// timestamp: only for files, the mtime timestamp of the file\n\n// (deprecated)\n// Watchpack.prototype.getTimes()\nvar fileTimes = wp.getTimes();\n// returns an object with all known change times for files\n// this include timestamps from files not directly watched\n// key: absolute path, value: timestamp as number\n```\n\n[coveralls-url]: https://coveralls.io/r/webpack/watchpack/\n[coveralls-image]: https://img.shields.io/coveralls/webpack/watchpack.svg\n","readmeFilename":"README.md","gitHead":"5b838e8bea8904a2edbb5487bdb271d9b9cf5726","_npmVersion":"6.4.1","_nodeVersion":"10.15.1","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.0.0-beta.3_1557317445762_0.9440228102240684"},"_hasShrinkwrap":false},"2.0.0-beta.4":{"_id":"watchpack@2.0.0-beta.4","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.0.0-beta.4","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"eslint-config-prettier":"^4.3.0","glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2","neo-async":"^2.5.0"},"engines":{"node":">=6.11.5"},"main":"./lib/watchpack.js","dist":{"shasum":"54570138581a6da2247c64fd0947561c0a60cf3b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.0.0-beta.4.tgz"},"readme":"# watchpack\n\nWrapper library for directory and file watching.\n\n[![Build Status](https://travis-ci.org/webpack/watchpack.svg?branch=master)](https://travis-ci.org/webpack/watchpack) [![Build status](https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true)](https://ci.appveyor.com/project/sokra/watchpack/branch/master) [![Test coverage][coveralls-image]][coveralls-url] [![codecov](https://codecov.io/gh/webpack/watchpack/branch/master/graph/badge.svg)](https://codecov.io/gh/webpack/watchpack)\n\n## Concept\n\nwatchpack high level API doesn't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\n\n* The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\n* A user-faced `Watcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\n* Reference-counting is used on the `DirectoryWatcher` and `Watcher` to decide when to close them.\n* The real watchers are created by the `DirectoryWatcher`.\n* Files are never watched directly. This should keep the watcher count low.\n* Watching can be started in the past. This way watching can start after file reading.\n* Symlinks are not followed, instead the symlink is watched.\n\n## API\n\n``` javascript\nvar Watchpack = require(\"watchpack\");\n\nvar wp = new Watchpack({\n\t// options:\n\taggregateTimeout: 1000\n\t// fire \"aggregated\" event when after a change for 1000ms no additional change occurred\n\t// aggregated defaults to undefined, which doesn't fire an \"aggregated\" event\n\n\tpoll: true\n\t// poll: true - use polling with the default interval\n\t// poll: 10000 - use polling with an interval of 10s\n\t// poll defaults to undefined, which prefer native watching methods\n\t// Note: enable polling when watching on a network path\n\t// When WATCHPACK_POLLING environment variable is set it will override this option\n\n\tignored: \"**/.git\",\n\t// ignored: \"string\" - a glob pattern for files or folders that should not be watched\n\t// ignored: [\"string\", \"string\"] - multiple glob patterns that should be ignored\n\t// All subdirectories are ignored too\n});\n\n// Watchpack.prototype.watch(files: string[], directories: string[], startTime?: number)\nwp.watch(listOfFiles, listOfDirectories, Date.now() - 10000);\n// starts watching these files and directories\n// calling this again will override the files and directories\n\nwp.on(\"change\", function(filePath, mtime) {\n\t// filePath: the changed file\n\t// mtime: last modified time for the changed file (null if file was removed)\n\t// for folders it's a time before that all changes in the directory happened\n});\n\nwp.on(\"aggregated\", function(changes, removals) {\n\t// changes: a Set of all changed files\n\t// removals: a Set of all removed files\n});\n\n// Watchpack.prototype.pause()\nwp.pause();\n// stops emitting events, but keeps watchers open\n// next \"watch\" call can reuse the watchers\n\n// Watchpack.prototype.close()\nwp.close();\n// stops emitting events and closes all watchers\n\n// Watchpack.prototype.getTimeInfoEntries()\nvar fileTimes = wp.getTimeInfoEntries();\n// returns a Map with all known time info objects for files and directories\n// this include info from files not directly watched\n// key: absolute path, value: object with { safeTime, timestamp }\n// safeTime: the time before that all changes happened\n// timestamp: only for files, the mtime timestamp of the file\n\n// (deprecated)\n// Watchpack.prototype.getTimes()\nvar fileTimes = wp.getTimes();\n// returns an object with all known change times for files\n// this include timestamps from files not directly watched\n// key: absolute path, value: timestamp as number\n```\n\n[coveralls-url]: https://coveralls.io/r/webpack/watchpack/\n[coveralls-image]: https://img.shields.io/coveralls/webpack/watchpack.svg\n","readmeFilename":"README.md","gitHead":"cd0e45bd3e616b0bdec97ba46af8a00393fc3b41","_npmVersion":"6.4.1","_nodeVersion":"10.15.1","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.0.0-beta.4_1558036635822_0.26703855016733846"},"_hasShrinkwrap":false},"2.0.0-beta.5":{"_id":"watchpack@2.0.0-beta.5","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.0.0-beta.5","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2","neo-async":"^2.5.0"},"engines":{"node":">=6.11.5"},"main":"./lib/watchpack.js","dist":{"shasum":"c005db39570d81d9d34334870abc0f548901b880","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.0.0-beta.5.tgz"},"readme":"# watchpack\n\nWrapper library for directory and file watching.\n\n[![Build Status][build-status]][build-status-url]\n[![Build status][build-status-veyor]][build-status-veyor-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![codecov][codecov]][codecov-url]\n[![downloads][downloads]][downloads-url]\n[![Github contributors][contributors]][contributors-url]\n\n## Concept\n\nwatchpack high level API doesn't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\n\n- The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\n- A user-faced `Watcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\n- Reference-counting is used on the `DirectoryWatcher` and `Watcher` to decide when to close them.\n- The real watchers are created by the `DirectoryWatcher`.\n- Files are never watched directly. This should keep the watcher count low.\n- Watching can be started in the past. This way watching can start after file reading.\n- Symlinks are not followed, instead the symlink is watched.\n\n## API\n\n```javascript\nvar Watchpack = require(\"watchpack\");\n\nvar wp = new Watchpack({\n\t// options:\n\taggregateTimeout: 1000\n\t// fire \"aggregated\" event when after a change for 1000ms no additional change occurred\n\t// aggregated defaults to undefined, which doesn't fire an \"aggregated\" event\n\n\tpoll: true\n\t// poll: true - use polling with the default interval\n\t// poll: 10000 - use polling with an interval of 10s\n\t// poll defaults to undefined, which prefer native watching methods\n\t// Note: enable polling when watching on a network path\n\t// When WATCHPACK_POLLING environment variable is set it will override this option\n\n\tignored: \"**/.git\",\n\t// ignored: \"string\" - a glob pattern for files or folders that should not be watched\n\t// ignored: [\"string\", \"string\"] - multiple glob patterns that should be ignored\n\t// All subdirectories are ignored too\n});\n\n// Watchpack.prototype.watch(files: string[], directories: string[], startTime?: number)\nwp.watch(listOfFiles, listOfDirectories, Date.now() - 10000);\n// starts watching these files and directories\n// calling this again will override the files and directories\n\nwp.on(\"change\", function(filePath, mtime) {\n\t// filePath: the changed file\n\t// mtime: last modified time for the changed file (null if file was removed)\n\t// for folders it's a time before that all changes in the directory happened\n});\n\nwp.on(\"aggregated\", function(changes, removals) {\n\t// changes: a Set of all changed files\n\t// removals: a Set of all removed files\n});\n\n// Watchpack.prototype.pause()\nwp.pause();\n// stops emitting events, but keeps watchers open\n// next \"watch\" call can reuse the watchers\n\n// Watchpack.prototype.close()\nwp.close();\n// stops emitting events and closes all watchers\n\n// Watchpack.prototype.getTimeInfoEntries()\nvar fileTimes = wp.getTimeInfoEntries();\n// returns a Map with all known time info objects for files and directories\n// this include info from files not directly watched\n// key: absolute path, value: object with { safeTime, timestamp }\n// safeTime: the time before that all changes happened\n// timestamp: only for files, the mtime timestamp of the file\n\n// (deprecated)\n// Watchpack.prototype.getTimes()\nvar fileTimes = wp.getTimes();\n// returns an object with all known change times for files\n// this include timestamps from files not directly watched\n// key: absolute path, value: timestamp as number\n```\n\n[build-status]: https://travis-ci.org/webpack/watchpack.svg?branch=master\n[build-status-url]: https://travis-ci.org/webpack/watchpack\n[build-status-veyor]: https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true\n[build-status-veyor-url]: https://ci.appveyor.com/project/sokra/watchpack/branch/master\n[coveralls-url]: https://coveralls.io/r/webpack/watchpack/\n[coveralls-image]: https://img.shields.io/coveralls/webpack/watchpack.svg\n[codecov]: https://codecov.io/gh/webpack/watchpack/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/webpack/watchpack\n[downloads]: https://img.shields.io/npm/dm/watchpack.svg\n[downloads-url]: https://www.npmjs.com/package/watchpack\n[contributors]: https://img.shields.io/github/contributors/webpack/watchpack.svg\n[contributors-url]: https://github.com/webpack/watchpack/graphs/contributors\n","readmeFilename":"README.md","gitHead":"cffd574e0b0c9f133dc5c850651434b835617a6d","_nodeVersion":"12.4.0","_npmVersion":"6.9.0","maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.0.0-beta.5_1561963600047_0.5974950465446014"},"_hasShrinkwrap":false},"2.0.0-beta.6":{"_id":"watchpack@2.0.0-beta.6","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.0.0-beta.6","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2","neo-async":"^2.5.0"},"engines":{"node":">=6.11.5"},"main":"./lib/watchpack.js","dist":{"shasum":"19dcb5bfebd2c580b05ed8991140b3fb46ab449c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.0.0-beta.6.tgz"},"readme":"# watchpack\n\nWrapper library for directory and file watching.\n\n[![Build Status][build-status]][build-status-url]\n[![Build status][build-status-veyor]][build-status-veyor-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![codecov][codecov]][codecov-url]\n[![downloads][downloads]][downloads-url]\n[![Github contributors][contributors]][contributors-url]\n\n## Concept\n\nwatchpack high level API doesn't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\n\n- The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\n- A user-faced `Watcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\n- Reference-counting is used on the `DirectoryWatcher` and `Watcher` to decide when to close them.\n- The real watchers are created by the `DirectoryWatcher`.\n- Files are never watched directly. This should keep the watcher count low.\n- Watching can be started in the past. This way watching can start after file reading.\n- Symlinks are not followed, instead the symlink is watched.\n\n## API\n\n```javascript\nvar Watchpack = require(\"watchpack\");\n\nvar wp = new Watchpack({\n\t// options:\n\taggregateTimeout: 1000\n\t// fire \"aggregated\" event when after a change for 1000ms no additional change occurred\n\t// aggregated defaults to undefined, which doesn't fire an \"aggregated\" event\n\n\tpoll: true\n\t// poll: true - use polling with the default interval\n\t// poll: 10000 - use polling with an interval of 10s\n\t// poll defaults to undefined, which prefer native watching methods\n\t// Note: enable polling when watching on a network path\n\t// When WATCHPACK_POLLING environment variable is set it will override this option\n\n\tignored: \"**/.git\",\n\t// ignored: \"string\" - a glob pattern for files or folders that should not be watched\n\t// ignored: [\"string\", \"string\"] - multiple glob patterns that should be ignored\n\t// All subdirectories are ignored too\n});\n\n// Watchpack.prototype.watch(files: string[], directories: string[], startTime?: number)\nwp.watch(listOfFiles, listOfDirectories, Date.now() - 10000);\n// starts watching these files and directories\n// calling this again will override the files and directories\n\nwp.on(\"change\", function(filePath, mtime) {\n\t// filePath: the changed file\n\t// mtime: last modified time for the changed file (null if file was removed)\n\t// for folders it's a time before that all changes in the directory happened\n});\n\nwp.on(\"aggregated\", function(changes, removals) {\n\t// changes: a Set of all changed files\n\t// removals: a Set of all removed files\n});\n\n// Watchpack.prototype.pause()\nwp.pause();\n// stops emitting events, but keeps watchers open\n// next \"watch\" call can reuse the watchers\n\n// Watchpack.prototype.close()\nwp.close();\n// stops emitting events and closes all watchers\n\n// Watchpack.prototype.getTimeInfoEntries()\nvar fileTimes = wp.getTimeInfoEntries();\n// returns a Map with all known time info objects for files and directories\n// this include info from files not directly watched\n// key: absolute path, value: object with { safeTime, timestamp }\n// safeTime: the time before that all changes happened\n// timestamp: only for files, the mtime timestamp of the file\n\n// (deprecated)\n// Watchpack.prototype.getTimes()\nvar fileTimes = wp.getTimes();\n// returns an object with all known change times for files\n// this include timestamps from files not directly watched\n// key: absolute path, value: timestamp as number\n```\n\n[build-status]: https://travis-ci.org/webpack/watchpack.svg?branch=master\n[build-status-url]: https://travis-ci.org/webpack/watchpack\n[build-status-veyor]: https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true\n[build-status-veyor-url]: https://ci.appveyor.com/project/sokra/watchpack/branch/master\n[coveralls-url]: https://coveralls.io/r/webpack/watchpack/\n[coveralls-image]: https://img.shields.io/coveralls/webpack/watchpack.svg\n[codecov]: https://codecov.io/gh/webpack/watchpack/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/webpack/watchpack\n[downloads]: https://img.shields.io/npm/dm/watchpack.svg\n[downloads-url]: https://www.npmjs.com/package/watchpack\n[contributors]: https://img.shields.io/github/contributors/webpack/watchpack.svg\n[contributors-url]: https://github.com/webpack/watchpack/graphs/contributors\n","readmeFilename":"README.md","gitHead":"4c128b9b31e01b4af74f3cd9722659a7c66e7381","_nodeVersion":"12.4.0","_npmVersion":"6.9.0","maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.0.0-beta.6_1562279984327_0.9694446104214227"},"_hasShrinkwrap":false},"2.0.0-beta.7":{"_id":"watchpack@2.0.0-beta.7","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.0.0-beta.7","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2","neo-async":"^2.5.0"},"engines":{"node":">=6.11.5"},"main":"./lib/watchpack.js","dist":{"shasum":"7233e896f679f6ad2c74034124d1962849c03a45","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.0.0-beta.7.tgz"},"readme":"# watchpack\n\nWrapper library for directory and file watching.\n\n[![Build Status][build-status]][build-status-url]\n[![Build status][build-status-veyor]][build-status-veyor-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![codecov][codecov]][codecov-url]\n[![downloads][downloads]][downloads-url]\n[![Github contributors][contributors]][contributors-url]\n\n## Concept\n\nwatchpack high level API doesn't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\n\n- The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\n- A user-faced `Watcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\n- Reference-counting is used on the `DirectoryWatcher` and `Watcher` to decide when to close them.\n- The real watchers are created by the `DirectoryWatcher`.\n- Files are never watched directly. This should keep the watcher count low.\n- Watching can be started in the past. This way watching can start after file reading.\n- Symlinks are not followed, instead the symlink is watched.\n\n## API\n\n```javascript\nvar Watchpack = require(\"watchpack\");\n\nvar wp = new Watchpack({\n\t// options:\n\taggregateTimeout: 1000,\n\t// fire \"aggregated\" event when after a change for 1000ms no additional change occurred\n\t// aggregated defaults to undefined, which doesn't fire an \"aggregated\" event\n\n\tpoll: true,\n\t// poll: true - use polling with the default interval\n\t// poll: 10000 - use polling with an interval of 10s\n\t// poll defaults to undefined, which prefer native watching methods\n\t// Note: enable polling when watching on a network path\n\t// When WATCHPACK_POLLING environment variable is set it will override this option\n\n\tfollowSymlinks: true,\n\t// true: follows symlinks and watches symlinks and real files\n\t//   (This makes sense when symlinks has not been resolved yet, comes with a performance hit)\n\t// false (default): watches only specified item they may be real files or symlinks\n\t//   (This makes sense when symlinks has already been resolved)\n\n\tignored: \"**/.git\"\n\t// ignored: \"string\" - a glob pattern for files or folders that should not be watched\n\t// ignored: [\"string\", \"string\"] - multiple glob patterns that should be ignored\n\t// All subdirectories are ignored too\n});\n\n// Watchpack.prototype.watch(files: string[], directories: string[], startTime?: number)\nwp.watch(listOfFiles, listOfDirectories, Date.now() - 10000);\n// starts watching these files and directories\n// calling this again will override the files and directories\n\nwp.on(\"change\", function(filePath, mtime) {\n\t// filePath: the changed file\n\t// mtime: last modified time for the changed file (null if file was removed)\n\t// for folders it's a time before that all changes in the directory happened\n});\n\nwp.on(\"aggregated\", function(changes, removals) {\n\t// changes: a Set of all changed files\n\t// removals: a Set of all removed files\n});\n\n// Watchpack.prototype.pause()\nwp.pause();\n// stops emitting events, but keeps watchers open\n// next \"watch\" call can reuse the watchers\n\n// Watchpack.prototype.close()\nwp.close();\n// stops emitting events and closes all watchers\n\n// Watchpack.prototype.getTimeInfoEntries()\nvar fileTimes = wp.getTimeInfoEntries();\n// returns a Map with all known time info objects for files and directories\n// this include info from files not directly watched\n// key: absolute path, value: object with { safeTime, timestamp }\n// safeTime: the time before that all changes happened\n// timestamp: only for files, the mtime timestamp of the file\n\n// (deprecated)\n// Watchpack.prototype.getTimes()\nvar fileTimes = wp.getTimes();\n// returns an object with all known change times for files\n// this include timestamps from files not directly watched\n// key: absolute path, value: timestamp as number\n```\n\n[build-status]: https://travis-ci.org/webpack/watchpack.svg?branch=master\n[build-status-url]: https://travis-ci.org/webpack/watchpack\n[build-status-veyor]: https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true\n[build-status-veyor-url]: https://ci.appveyor.com/project/sokra/watchpack/branch/master\n[coveralls-url]: https://coveralls.io/r/webpack/watchpack/\n[coveralls-image]: https://img.shields.io/coveralls/webpack/watchpack.svg\n[codecov]: https://codecov.io/gh/webpack/watchpack/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/webpack/watchpack\n[downloads]: https://img.shields.io/npm/dm/watchpack.svg\n[downloads-url]: https://www.npmjs.com/package/watchpack\n[contributors]: https://img.shields.io/github/contributors/webpack/watchpack.svg\n[contributors-url]: https://github.com/webpack/watchpack/graphs/contributors\n","readmeFilename":"README.md","gitHead":"a6eb53ae6301a8f33a5ded74fa13b8909f8638d6","_nodeVersion":"12.4.0","_npmVersion":"6.9.0","maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.0.0-beta.7_1562782846910_0.5273020667361288"},"_hasShrinkwrap":false},"2.0.0-beta.8":{"_id":"watchpack@2.0.0-beta.8","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.0.0-beta.8","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2","neo-async":"^2.5.0"},"engines":{"node":">=6.11.5"},"main":"./lib/watchpack.js","dist":{"shasum":"456e6bfff56e489186196de7c91b55c861cbc987","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.0.0-beta.8.tgz"},"readme":"# watchpack\n\nWrapper library for directory and file watching.\n\n[![Build Status][build-status]][build-status-url]\n[![Build status][build-status-veyor]][build-status-veyor-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![codecov][codecov]][codecov-url]\n[![downloads][downloads]][downloads-url]\n[![Github contributors][contributors]][contributors-url]\n\n## Concept\n\nwatchpack high level API doesn't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\n\n- The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\n- A user-faced `Watcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\n- Reference-counting is used on the `DirectoryWatcher` and `Watcher` to decide when to close them.\n- The real watchers are created by the `DirectoryWatcher`.\n- Files are never watched directly. This should keep the watcher count low.\n- Watching can be started in the past. This way watching can start after file reading.\n- Symlinks are not followed, instead the symlink is watched.\n\n## API\n\n```javascript\nvar Watchpack = require(\"watchpack\");\n\nvar wp = new Watchpack({\n\t// options:\n\taggregateTimeout: 1000,\n\t// fire \"aggregated\" event when after a change for 1000ms no additional change occurred\n\t// aggregated defaults to undefined, which doesn't fire an \"aggregated\" event\n\n\tpoll: true,\n\t// poll: true - use polling with the default interval\n\t// poll: 10000 - use polling with an interval of 10s\n\t// poll defaults to undefined, which prefer native watching methods\n\t// Note: enable polling when watching on a network path\n\t// When WATCHPACK_POLLING environment variable is set it will override this option\n\n\tfollowSymlinks: true,\n\t// true: follows symlinks and watches symlinks and real files\n\t//   (This makes sense when symlinks has not been resolved yet, comes with a performance hit)\n\t// false (default): watches only specified item they may be real files or symlinks\n\t//   (This makes sense when symlinks has already been resolved)\n\n\tignored: \"**/.git\"\n\t// ignored: \"string\" - a glob pattern for files or folders that should not be watched\n\t// ignored: [\"string\", \"string\"] - multiple glob patterns that should be ignored\n\t// All subdirectories are ignored too\n});\n\n// Watchpack.prototype.watch(files: Iterable<string>, directories: Iterable<string>, startTime?: number)\nwp.watch(listOfFiles, listOfDirectories, Date.now() - 10000);\n// starts watching these files and directories\n// calling this again will override the files and directories\n\nwp.on(\"change\", function(filePath, mtime) {\n\t// filePath: the changed file\n\t// mtime: last modified time for the changed file (null if file was removed)\n\t// for folders it's a time before that all changes in the directory happened\n});\n\nwp.on(\"aggregated\", function(changes, removals) {\n\t// changes: a Set of all changed files\n\t// removals: a Set of all removed files\n\t// watchpack gives up ownership on these Sets.\n});\n\n// Watchpack.prototype.pause()\nwp.pause();\n// stops emitting events, but keeps watchers open\n// next \"watch\" call can reuse the watchers\n\n// Watchpack.prototype.close()\nwp.close();\n// stops emitting events and closes all watchers\n\n// Watchpack.prototype.getTimeInfoEntries()\nvar fileTimes = wp.getTimeInfoEntries();\n// returns a Map with all known time info objects for files and directories\n// this include info from files not directly watched\n// key: absolute path, value: object with { safeTime, timestamp }\n// safeTime: a point in time at which it is safe to say all changes happened before that\n// timestamp: only for files, the mtime timestamp of the file\n\n// (deprecated)\n// Watchpack.prototype.getTimes()\nvar fileTimes = wp.getTimes();\n// returns an object with all known change times for files\n// this include timestamps from files not directly watched\n// key: absolute path, value: timestamp as number\n```\n\n[build-status]: https://travis-ci.org/webpack/watchpack.svg?branch=master\n[build-status-url]: https://travis-ci.org/webpack/watchpack\n[build-status-veyor]: https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true\n[build-status-veyor-url]: https://ci.appveyor.com/project/sokra/watchpack/branch/master\n[coveralls-url]: https://coveralls.io/r/webpack/watchpack/\n[coveralls-image]: https://img.shields.io/coveralls/webpack/watchpack.svg\n[codecov]: https://codecov.io/gh/webpack/watchpack/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/webpack/watchpack\n[downloads]: https://img.shields.io/npm/dm/watchpack.svg\n[downloads-url]: https://www.npmjs.com/package/watchpack\n[contributors]: https://img.shields.io/github/contributors/webpack/watchpack.svg\n[contributors-url]: https://github.com/webpack/watchpack/graphs/contributors\n","readmeFilename":"README.md","gitHead":"54b7e8b1e9cb97eb57597f6b1f817df3791208a5","_npmVersion":"6.4.1","_nodeVersion":"10.15.3","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.0.0-beta.8_1571664707395_0.573121964718684"},"_hasShrinkwrap":false},"2.0.0-beta.9":{"_id":"watchpack@2.0.0-beta.9","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.0.0-beta.9","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2","neo-async":"^2.5.0"},"engines":{"node":">=10.13.0"},"main":"./lib/watchpack.js","dist":{"shasum":"c9a2d25af677203c5a0727803d72239d8f60499d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.0.0-beta.9.tgz"},"readme":"# watchpack\n\nWrapper library for directory and file watching.\n\n[![Build Status][build-status]][build-status-url]\n[![Build status][build-status-veyor]][build-status-veyor-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![codecov][codecov]][codecov-url]\n[![downloads][downloads]][downloads-url]\n[![Github contributors][contributors]][contributors-url]\n\n## Concept\n\nwatchpack high level API doesn't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\n\n- The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\n- A user-faced `Watcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\n- Reference-counting is used on the `DirectoryWatcher` and `Watcher` to decide when to close them.\n- The real watchers are created by the `DirectoryWatcher`.\n- Files are never watched directly. This should keep the watcher count low.\n- Watching can be started in the past. This way watching can start after file reading.\n- Symlinks are not followed, instead the symlink is watched.\n\n## API\n\n```javascript\nvar Watchpack = require(\"watchpack\");\n\nvar wp = new Watchpack({\n\t// options:\n\taggregateTimeout: 1000,\n\t// fire \"aggregated\" event when after a change for 1000ms no additional change occurred\n\t// aggregated defaults to undefined, which doesn't fire an \"aggregated\" event\n\n\tpoll: true,\n\t// poll: true - use polling with the default interval\n\t// poll: 10000 - use polling with an interval of 10s\n\t// poll defaults to undefined, which prefer native watching methods\n\t// Note: enable polling when watching on a network path\n\t// When WATCHPACK_POLLING environment variable is set it will override this option\n\n\tfollowSymlinks: true,\n\t// true: follows symlinks and watches symlinks and real files\n\t//   (This makes sense when symlinks has not been resolved yet, comes with a performance hit)\n\t// false (default): watches only specified item they may be real files or symlinks\n\t//   (This makes sense when symlinks has already been resolved)\n\n\tignored: \"**/.git\"\n\t// ignored: \"string\" - a glob pattern for files or folders that should not be watched\n\t// ignored: [\"string\", \"string\"] - multiple glob patterns that should be ignored\n\t// All subdirectories are ignored too\n});\n\n// Watchpack.prototype.watch(files: Iterable<string>, directories: Iterable<string>, startTime?: number)\nwp.watch(listOfFiles, listOfDirectories, Date.now() - 10000);\n// starts watching these files and directories\n// calling this again will override the files and directories\n\nwp.on(\"change\", function(filePath, mtime) {\n\t// filePath: the changed file\n\t// mtime: last modified time for the changed file (null if file was removed)\n\t// for folders it's a time before that all changes in the directory happened\n});\n\nwp.on(\"aggregated\", function(changes, removals) {\n\t// changes: a Set of all changed files\n\t// removals: a Set of all removed files\n\t// watchpack gives up ownership on these Sets.\n});\n\n// Watchpack.prototype.pause()\nwp.pause();\n// stops emitting events, but keeps watchers open\n// next \"watch\" call can reuse the watchers\n\n// Watchpack.prototype.close()\nwp.close();\n// stops emitting events and closes all watchers\n\n// Watchpack.prototype.getTimeInfoEntries()\nvar fileTimes = wp.getTimeInfoEntries();\n// returns a Map with all known time info objects for files and directories\n// this include info from files not directly watched\n// key: absolute path, value: object with { safeTime, timestamp }\n// safeTime: a point in time at which it is safe to say all changes happened before that\n// timestamp: only for files, the mtime timestamp of the file\n\n// (deprecated)\n// Watchpack.prototype.getTimes()\nvar fileTimes = wp.getTimes();\n// returns an object with all known change times for files\n// this include timestamps from files not directly watched\n// key: absolute path, value: timestamp as number\n```\n\n[build-status]: https://travis-ci.org/webpack/watchpack.svg?branch=master\n[build-status-url]: https://travis-ci.org/webpack/watchpack\n[build-status-veyor]: https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true\n[build-status-veyor-url]: https://ci.appveyor.com/project/sokra/watchpack/branch/master\n[coveralls-url]: https://coveralls.io/r/webpack/watchpack/\n[coveralls-image]: https://img.shields.io/coveralls/webpack/watchpack.svg\n[codecov]: https://codecov.io/gh/webpack/watchpack/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/webpack/watchpack\n[downloads]: https://img.shields.io/npm/dm/watchpack.svg\n[downloads-url]: https://www.npmjs.com/package/watchpack\n[contributors]: https://img.shields.io/github/contributors/webpack/watchpack.svg\n[contributors-url]: https://github.com/webpack/watchpack/graphs/contributors\n","readmeFilename":"README.md","gitHead":"4b97ddd449cfa7b28f506a3fbbfd1bb5f7887ba9","_npmVersion":"6.4.1","_nodeVersion":"10.15.3","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.0.0-beta.9_1572328823168_0.9144453552428942"},"_hasShrinkwrap":false},"2.0.0-beta.10":{"_id":"watchpack@2.0.0-beta.10","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.0.0-beta.10","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2","neo-async":"^2.5.0"},"engines":{"node":">=10.13.0"},"main":"./lib/watchpack.js","dist":{"shasum":"6e4a5b16bda08a5a3ce9851f166a45a8860066bb","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.0.0-beta.10.tgz"},"readme":"# watchpack\n\nWrapper library for directory and file watching.\n\n[![Build Status][build-status]][build-status-url]\n[![Build status][build-status-veyor]][build-status-veyor-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![codecov][codecov]][codecov-url]\n[![downloads][downloads]][downloads-url]\n[![Github contributors][contributors]][contributors-url]\n\n## Concept\n\nwatchpack high level API doesn't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\n\n- The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\n- A user-faced `Watcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\n- Reference-counting is used on the `DirectoryWatcher` and `Watcher` to decide when to close them.\n- The real watchers are created by the `DirectoryWatcher`.\n- Files are never watched directly. This should keep the watcher count low.\n- Watching can be started in the past. This way watching can start after file reading.\n- Symlinks are not followed, instead the symlink is watched.\n\n## API\n\n```javascript\nvar Watchpack = require(\"watchpack\");\n\nvar wp = new Watchpack({\n\t// options:\n\taggregateTimeout: 1000,\n\t// fire \"aggregated\" event when after a change for 1000ms no additional change occurred\n\t// aggregated defaults to undefined, which doesn't fire an \"aggregated\" event\n\n\tpoll: true,\n\t// poll: true - use polling with the default interval\n\t// poll: 10000 - use polling with an interval of 10s\n\t// poll defaults to undefined, which prefer native watching methods\n\t// Note: enable polling when watching on a network path\n\t// When WATCHPACK_POLLING environment variable is set it will override this option\n\n\tfollowSymlinks: true,\n\t// true: follows symlinks and watches symlinks and real files\n\t//   (This makes sense when symlinks has not been resolved yet, comes with a performance hit)\n\t// false (default): watches only specified item they may be real files or symlinks\n\t//   (This makes sense when symlinks has already been resolved)\n\n\tignored: \"**/.git\"\n\t// ignored: \"string\" - a glob pattern for files or folders that should not be watched\n\t// ignored: [\"string\", \"string\"] - multiple glob patterns that should be ignored\n\t// All subdirectories are ignored too\n});\n\n// Watchpack.prototype.watch({\n//   files: Iterable<string>,\n//   directories: Iterable<string>,\n//   missing: Iterable<string>,\n//   startTime?: number\n// })\nwp.watch({\n\tfiles: listOfFiles,\n\tdirectories: listOfDirectories,\n\tmissing: listOfNotExistingItems,\n\tstartTime: Date.now() - 10000\n});\n// starts watching these files and directories\n// calling this again will override the files and directories\n// files: can be files or directories, for files: content and existance changes are tracked\n//        for directories: only existance and timestamp changes are tracked\n// directories: only directories, directory content (and content of children, ...) and\n//              existance changes are tracked.\n//              assumed to exist, when directory is not found without futher information a remove event is emitted\n// missing: can be files or directores,\n//          only existance changes are tracked\n//          expected to not exist, no remove event is emitted when not found initially\n// files and directories are assumed to exist, when they are not found without futher information a remove event is emitted\n// missing is assumed to not exist and no remove event is emitted\n\nwp.on(\"change\", function(filePath, mtime, explanation) {\n\t// filePath: the changed file\n\t// mtime: last modified time for the changed file\n\t// explanation: textual information how this change was detected\n});\n\nwp.on(\"remove\", function(filePath, explanation) {\n\t// filePath: the removed file or directory\n\t// explanation: textual information how this change was detected\n});\n\nwp.on(\"aggregated\", function(changes, removals) {\n\t// changes: a Set of all changed files\n\t// removals: a Set of all removed files\n\t// watchpack gives up ownership on these Sets.\n});\n\n// Watchpack.prototype.pause()\nwp.pause();\n// stops emitting events, but keeps watchers open\n// next \"watch\" call can reuse the watchers\n\n// Watchpack.prototype.close()\nwp.close();\n// stops emitting events and closes all watchers\n\n// Watchpack.prototype.getTimeInfoEntries()\nvar fileTimes = wp.getTimeInfoEntries();\n// returns a Map with all known time info objects for files and directories\n// this include info from files not directly watched\n// key: absolute path, value: object with { safeTime, timestamp }\n// safeTime: a point in time at which it is safe to say all changes happened before that\n// timestamp: only for files, the mtime timestamp of the file\n\n// (deprecated)\n// Watchpack.prototype.getTimes()\nvar fileTimes = wp.getTimes();\n// returns an object with all known change times for files\n// this include timestamps from files not directly watched\n// key: absolute path, value: timestamp as number\n```\n\n[build-status]: https://travis-ci.org/webpack/watchpack.svg?branch=master\n[build-status-url]: https://travis-ci.org/webpack/watchpack\n[build-status-veyor]: https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true\n[build-status-veyor-url]: https://ci.appveyor.com/project/sokra/watchpack/branch/master\n[coveralls-url]: https://coveralls.io/r/webpack/watchpack/\n[coveralls-image]: https://img.shields.io/coveralls/webpack/watchpack.svg\n[codecov]: https://codecov.io/gh/webpack/watchpack/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/webpack/watchpack\n[downloads]: https://img.shields.io/npm/dm/watchpack.svg\n[downloads-url]: https://www.npmjs.com/package/watchpack\n[contributors]: https://img.shields.io/github/contributors/webpack/watchpack.svg\n[contributors-url]: https://github.com/webpack/watchpack/graphs/contributors\n","readmeFilename":"README.md","gitHead":"355ed563608c2d09d847e9f696abc76f69d3c6bb","_npmVersion":"6.4.1","_nodeVersion":"10.15.3","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.0.0-beta.10_1573060159817_0.9849676364423097"},"_hasShrinkwrap":false},"2.0.0-beta.11":{"_id":"watchpack@2.0.0-beta.11","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.0.0-beta.11","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2","neo-async":"^2.5.0"},"engines":{"node":">=10.13.0"},"main":"./lib/watchpack.js","dist":{"shasum":"70b47e770359fbb9cef108e83ade020087a42c6e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.0.0-beta.11.tgz"},"readme":"# watchpack\n\nWrapper library for directory and file watching.\n\n[![Build Status][build-status]][build-status-url]\n[![Build status][build-status-veyor]][build-status-veyor-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![codecov][codecov]][codecov-url]\n[![downloads][downloads]][downloads-url]\n[![Github contributors][contributors]][contributors-url]\n\n## Concept\n\nwatchpack high level API doesn't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\n\n- The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\n- A user-faced `Watcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\n- Reference-counting is used on the `DirectoryWatcher` and `Watcher` to decide when to close them.\n- The real watchers are created by the `DirectoryWatcher`.\n- Files are never watched directly. This should keep the watcher count low.\n- Watching can be started in the past. This way watching can start after file reading.\n- Symlinks are not followed, instead the symlink is watched.\n\n## API\n\n```javascript\nvar Watchpack = require(\"watchpack\");\n\nvar wp = new Watchpack({\n\t// options:\n\taggregateTimeout: 1000,\n\t// fire \"aggregated\" event when after a change for 1000ms no additional change occurred\n\t// aggregated defaults to undefined, which doesn't fire an \"aggregated\" event\n\n\tpoll: true,\n\t// poll: true - use polling with the default interval\n\t// poll: 10000 - use polling with an interval of 10s\n\t// poll defaults to undefined, which prefer native watching methods\n\t// Note: enable polling when watching on a network path\n\t// When WATCHPACK_POLLING environment variable is set it will override this option\n\n\tfollowSymlinks: true,\n\t// true: follows symlinks and watches symlinks and real files\n\t//   (This makes sense when symlinks has not been resolved yet, comes with a performance hit)\n\t// false (default): watches only specified item they may be real files or symlinks\n\t//   (This makes sense when symlinks has already been resolved)\n\n\tignored: \"**/.git\"\n\t// ignored: \"string\" - a glob pattern for files or folders that should not be watched\n\t// ignored: [\"string\", \"string\"] - multiple glob patterns that should be ignored\n\t// ignored: /regexp/ - a regular expression for files or folders that should not be watched\n\t// All subdirectories are ignored too\n});\n\n// Watchpack.prototype.watch({\n//   files: Iterable<string>,\n//   directories: Iterable<string>,\n//   missing: Iterable<string>,\n//   startTime?: number\n// })\nwp.watch({\n\tfiles: listOfFiles,\n\tdirectories: listOfDirectories,\n\tmissing: listOfNotExistingItems,\n\tstartTime: Date.now() - 10000\n});\n// starts watching these files and directories\n// calling this again will override the files and directories\n// files: can be files or directories, for files: content and existance changes are tracked\n//        for directories: only existance and timestamp changes are tracked\n// directories: only directories, directory content (and content of children, ...) and\n//              existance changes are tracked.\n//              assumed to exist, when directory is not found without futher information a remove event is emitted\n// missing: can be files or directores,\n//          only existance changes are tracked\n//          expected to not exist, no remove event is emitted when not found initially\n// files and directories are assumed to exist, when they are not found without futher information a remove event is emitted\n// missing is assumed to not exist and no remove event is emitted\n\nwp.on(\"change\", function(filePath, mtime, explanation) {\n\t// filePath: the changed file\n\t// mtime: last modified time for the changed file\n\t// explanation: textual information how this change was detected\n});\n\nwp.on(\"remove\", function(filePath, explanation) {\n\t// filePath: the removed file or directory\n\t// explanation: textual information how this change was detected\n});\n\nwp.on(\"aggregated\", function(changes, removals) {\n\t// changes: a Set of all changed files\n\t// removals: a Set of all removed files\n\t// watchpack gives up ownership on these Sets.\n});\n\n// Watchpack.prototype.pause()\nwp.pause();\n// stops emitting events, but keeps watchers open\n// next \"watch\" call can reuse the watchers\n\n// Watchpack.prototype.close()\nwp.close();\n// stops emitting events and closes all watchers\n\n// Watchpack.prototype.getTimeInfoEntries()\nvar fileTimes = wp.getTimeInfoEntries();\n// returns a Map with all known time info objects for files and directories\n// this include info from files not directly watched\n// key: absolute path, value: object with { safeTime, timestamp }\n// safeTime: a point in time at which it is safe to say all changes happened before that\n// timestamp: only for files, the mtime timestamp of the file\n\n// (deprecated)\n// Watchpack.prototype.getTimes()\nvar fileTimes = wp.getTimes();\n// returns an object with all known change times for files\n// this include timestamps from files not directly watched\n// key: absolute path, value: timestamp as number\n```\n\n[build-status]: https://travis-ci.org/webpack/watchpack.svg?branch=master\n[build-status-url]: https://travis-ci.org/webpack/watchpack\n[build-status-veyor]: https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true\n[build-status-veyor-url]: https://ci.appveyor.com/project/sokra/watchpack/branch/master\n[coveralls-url]: https://coveralls.io/r/webpack/watchpack/\n[coveralls-image]: https://img.shields.io/coveralls/webpack/watchpack.svg\n[codecov]: https://codecov.io/gh/webpack/watchpack/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/webpack/watchpack\n[downloads]: https://img.shields.io/npm/dm/watchpack.svg\n[downloads-url]: https://www.npmjs.com/package/watchpack\n[contributors]: https://img.shields.io/github/contributors/webpack/watchpack.svg\n[contributors-url]: https://github.com/webpack/watchpack/graphs/contributors\n","readmeFilename":"README.md","gitHead":"97f713d25079c743f257f352bb458775d836cf96","_nodeVersion":"12.13.0","_npmVersion":"6.12.0","maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.0.0-beta.11_1578392535691_0.15516420149840227"},"_hasShrinkwrap":false},"2.0.0-beta.12":{"_id":"watchpack@2.0.0-beta.12","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.0.0-beta.12","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1","write-file-atomic":"^3.0.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2"},"engines":{"node":">=10.13.0"},"main":"./lib/watchpack.js","dist":{"shasum":"bed6878b020c8f43f5b88b7031dfb2b2092755f5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.0.0-beta.12.tgz"},"readme":"# watchpack\n\nWrapper library for directory and file watching.\n\n[![Build Status][build-status]][build-status-url]\n[![Build status][build-status-veyor]][build-status-veyor-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![codecov][codecov]][codecov-url]\n[![downloads][downloads]][downloads-url]\n[![Github contributors][contributors]][contributors-url]\n\n## Concept\n\nwatchpack high level API doesn't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\n\n- The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\n- A user-faced `Watcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\n- Reference-counting is used on the `DirectoryWatcher` and `Watcher` to decide when to close them.\n- The real watchers are created by the `DirectoryWatcher`.\n- Files are never watched directly. This should keep the watcher count low.\n- Watching can be started in the past. This way watching can start after file reading.\n- Symlinks are not followed, instead the symlink is watched.\n\n## API\n\n```javascript\nvar Watchpack = require(\"watchpack\");\n\nvar wp = new Watchpack({\n\t// options:\n\taggregateTimeout: 1000,\n\t// fire \"aggregated\" event when after a change for 1000ms no additional change occurred\n\t// aggregated defaults to undefined, which doesn't fire an \"aggregated\" event\n\n\tpoll: true,\n\t// poll: true - use polling with the default interval\n\t// poll: 10000 - use polling with an interval of 10s\n\t// poll defaults to undefined, which prefer native watching methods\n\t// Note: enable polling when watching on a network path\n\t// When WATCHPACK_POLLING environment variable is set it will override this option\n\n\tfollowSymlinks: true,\n\t// true: follows symlinks and watches symlinks and real files\n\t//   (This makes sense when symlinks has not been resolved yet, comes with a performance hit)\n\t// false (default): watches only specified item they may be real files or symlinks\n\t//   (This makes sense when symlinks has already been resolved)\n\n\tignored: \"**/.git\"\n\t// ignored: \"string\" - a glob pattern for files or folders that should not be watched\n\t// ignored: [\"string\", \"string\"] - multiple glob patterns that should be ignored\n\t// ignored: /regexp/ - a regular expression for files or folders that should not be watched\n\t// All subdirectories are ignored too\n});\n\n// Watchpack.prototype.watch({\n//   files: Iterable<string>,\n//   directories: Iterable<string>,\n//   missing: Iterable<string>,\n//   startTime?: number\n// })\nwp.watch({\n\tfiles: listOfFiles,\n\tdirectories: listOfDirectories,\n\tmissing: listOfNotExistingItems,\n\tstartTime: Date.now() - 10000\n});\n// starts watching these files and directories\n// calling this again will override the files and directories\n// files: can be files or directories, for files: content and existance changes are tracked\n//        for directories: only existance and timestamp changes are tracked\n// directories: only directories, directory content (and content of children, ...) and\n//              existance changes are tracked.\n//              assumed to exist, when directory is not found without futher information a remove event is emitted\n// missing: can be files or directores,\n//          only existance changes are tracked\n//          expected to not exist, no remove event is emitted when not found initially\n// files and directories are assumed to exist, when they are not found without futher information a remove event is emitted\n// missing is assumed to not exist and no remove event is emitted\n\nwp.on(\"change\", function(filePath, mtime, explanation) {\n\t// filePath: the changed file\n\t// mtime: last modified time for the changed file\n\t// explanation: textual information how this change was detected\n});\n\nwp.on(\"remove\", function(filePath, explanation) {\n\t// filePath: the removed file or directory\n\t// explanation: textual information how this change was detected\n});\n\nwp.on(\"aggregated\", function(changes, removals) {\n\t// changes: a Set of all changed files\n\t// removals: a Set of all removed files\n\t// watchpack gives up ownership on these Sets.\n});\n\n// Watchpack.prototype.pause()\nwp.pause();\n// stops emitting events, but keeps watchers open\n// next \"watch\" call can reuse the watchers\n\n// Watchpack.prototype.close()\nwp.close();\n// stops emitting events and closes all watchers\n\n// Watchpack.prototype.getTimeInfoEntries()\nvar fileTimes = wp.getTimeInfoEntries();\n// returns a Map with all known time info objects for files and directories\n// this include info from files not directly watched\n// key: absolute path, value: object with { safeTime, timestamp }\n// safeTime: a point in time at which it is safe to say all changes happened before that\n// timestamp: only for files, the mtime timestamp of the file\n\n// (deprecated)\n// Watchpack.prototype.getTimes()\nvar fileTimes = wp.getTimes();\n// returns an object with all known change times for files\n// this include timestamps from files not directly watched\n// key: absolute path, value: timestamp as number\n```\n\n[build-status]: https://travis-ci.org/webpack/watchpack.svg?branch=master\n[build-status-url]: https://travis-ci.org/webpack/watchpack\n[build-status-veyor]: https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true\n[build-status-veyor-url]: https://ci.appveyor.com/project/sokra/watchpack/branch/master\n[coveralls-url]: https://coveralls.io/r/webpack/watchpack/\n[coveralls-image]: https://img.shields.io/coveralls/webpack/watchpack.svg\n[codecov]: https://codecov.io/gh/webpack/watchpack/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/webpack/watchpack\n[downloads]: https://img.shields.io/npm/dm/watchpack.svg\n[downloads-url]: https://www.npmjs.com/package/watchpack\n[contributors]: https://img.shields.io/github/contributors/webpack/watchpack.svg\n[contributors-url]: https://github.com/webpack/watchpack/graphs/contributors\n","readmeFilename":"README.md","gitHead":"24ad42f8f87a45d0b37591948c810b91be4ed224","_nodeVersion":"12.13.0","_npmVersion":"6.12.0","maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.0.0-beta.12_1579095885710_0.9610838921937237"},"_hasShrinkwrap":false},"2.0.0-beta.13":{"_id":"watchpack@2.0.0-beta.13","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.0.0-beta.13","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1","write-file-atomic":"^3.0.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2"},"engines":{"node":">=10.13.0"},"main":"./lib/watchpack.js","dist":{"shasum":"9d9b0c094b8402139333e04eb6194643c8384f55","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.0.0-beta.13.tgz"},"readme":"# watchpack\n\nWrapper library for directory and file watching.\n\n[![Build Status][build-status]][build-status-url]\n[![Build status][build-status-veyor]][build-status-veyor-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![codecov][codecov]][codecov-url]\n[![downloads][downloads]][downloads-url]\n[![Github contributors][contributors]][contributors-url]\n\n## Concept\n\nwatchpack high level API doesn't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\n\n- The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\n- A user-faced `Watcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\n- Reference-counting is used on the `DirectoryWatcher` and `Watcher` to decide when to close them.\n- The real watchers are created by the `DirectoryWatcher`.\n- Files are never watched directly. This should keep the watcher count low.\n- Watching can be started in the past. This way watching can start after file reading.\n- Symlinks are not followed, instead the symlink is watched.\n\n## API\n\n```javascript\nvar Watchpack = require(\"watchpack\");\n\nvar wp = new Watchpack({\n\t// options:\n\taggregateTimeout: 1000,\n\t// fire \"aggregated\" event when after a change for 1000ms no additional change occurred\n\t// aggregated defaults to undefined, which doesn't fire an \"aggregated\" event\n\n\tpoll: true,\n\t// poll: true - use polling with the default interval\n\t// poll: 10000 - use polling with an interval of 10s\n\t// poll defaults to undefined, which prefer native watching methods\n\t// Note: enable polling when watching on a network path\n\t// When WATCHPACK_POLLING environment variable is set it will override this option\n\n\tfollowSymlinks: true,\n\t// true: follows symlinks and watches symlinks and real files\n\t//   (This makes sense when symlinks has not been resolved yet, comes with a performance hit)\n\t// false (default): watches only specified item they may be real files or symlinks\n\t//   (This makes sense when symlinks has already been resolved)\n\n\tignored: \"**/.git\"\n\t// ignored: \"string\" - a glob pattern for files or folders that should not be watched\n\t// ignored: [\"string\", \"string\"] - multiple glob patterns that should be ignored\n\t// ignored: /regexp/ - a regular expression for files or folders that should not be watched\n\t// All subdirectories are ignored too\n});\n\n// Watchpack.prototype.watch({\n//   files: Iterable<string>,\n//   directories: Iterable<string>,\n//   missing: Iterable<string>,\n//   startTime?: number\n// })\nwp.watch({\n\tfiles: listOfFiles,\n\tdirectories: listOfDirectories,\n\tmissing: listOfNotExistingItems,\n\tstartTime: Date.now() - 10000\n});\n// starts watching these files and directories\n// calling this again will override the files and directories\n// files: can be files or directories, for files: content and existance changes are tracked\n//        for directories: only existance and timestamp changes are tracked\n// directories: only directories, directory content (and content of children, ...) and\n//              existance changes are tracked.\n//              assumed to exist, when directory is not found without futher information a remove event is emitted\n// missing: can be files or directores,\n//          only existance changes are tracked\n//          expected to not exist, no remove event is emitted when not found initially\n// files and directories are assumed to exist, when they are not found without futher information a remove event is emitted\n// missing is assumed to not exist and no remove event is emitted\n\nwp.on(\"change\", function(filePath, mtime, explanation) {\n\t// filePath: the changed file\n\t// mtime: last modified time for the changed file\n\t// explanation: textual information how this change was detected\n});\n\nwp.on(\"remove\", function(filePath, explanation) {\n\t// filePath: the removed file or directory\n\t// explanation: textual information how this change was detected\n});\n\nwp.on(\"aggregated\", function(changes, removals) {\n\t// changes: a Set of all changed files\n\t// removals: a Set of all removed files\n\t// watchpack gives up ownership on these Sets.\n});\n\n// Watchpack.prototype.pause()\nwp.pause();\n// stops emitting events, but keeps watchers open\n// next \"watch\" call can reuse the watchers\n\n// Watchpack.prototype.close()\nwp.close();\n// stops emitting events and closes all watchers\n\n// Watchpack.prototype.getTimeInfoEntries()\nvar fileTimes = wp.getTimeInfoEntries();\n// returns a Map with all known time info objects for files and directories\n// this include info from files not directly watched\n// key: absolute path, value: object with { safeTime, timestamp }\n// safeTime: a point in time at which it is safe to say all changes happened before that\n// timestamp: only for files, the mtime timestamp of the file\n\n// (deprecated)\n// Watchpack.prototype.getTimes()\nvar fileTimes = wp.getTimes();\n// returns an object with all known change times for files\n// this include timestamps from files not directly watched\n// key: absolute path, value: timestamp as number\n```\n\n[build-status]: https://travis-ci.org/webpack/watchpack.svg?branch=master\n[build-status-url]: https://travis-ci.org/webpack/watchpack\n[build-status-veyor]: https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true\n[build-status-veyor-url]: https://ci.appveyor.com/project/sokra/watchpack/branch/master\n[coveralls-url]: https://coveralls.io/r/webpack/watchpack/\n[coveralls-image]: https://img.shields.io/coveralls/webpack/watchpack.svg\n[codecov]: https://codecov.io/gh/webpack/watchpack/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/webpack/watchpack\n[downloads]: https://img.shields.io/npm/dm/watchpack.svg\n[downloads-url]: https://www.npmjs.com/package/watchpack\n[contributors]: https://img.shields.io/github/contributors/webpack/watchpack.svg\n[contributors-url]: https://github.com/webpack/watchpack/graphs/contributors\n","readmeFilename":"README.md","gitHead":"ea6390fcb7649a8dfe5849e800f59e27cf03c994","_nodeVersion":"13.7.0","_npmVersion":"6.13.6","maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.0.0-beta.13_1582092983118_0.21048755222853388"},"_hasShrinkwrap":false},"2.0.0-beta.14":{"_id":"watchpack@2.0.0-beta.14","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.0.0-beta.14","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1","write-file-atomic":"^3.0.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2"},"engines":{"node":">=10.13.0"},"main":"./lib/watchpack.js","dist":{"shasum":"6135804571e4bc6792d44e4df6a97f07e7d40272","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.0.0-beta.14.tgz"},"readme":"# watchpack\n\nWrapper library for directory and file watching.\n\n[![Build Status][build-status]][build-status-url]\n[![Build status][build-status-veyor]][build-status-veyor-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![codecov][codecov]][codecov-url]\n[![downloads][downloads]][downloads-url]\n[![Github contributors][contributors]][contributors-url]\n\n## Concept\n\nwatchpack high level API doesn't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\n\n- The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\n- A user-faced `Watcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\n- Reference-counting is used on the `DirectoryWatcher` and `Watcher` to decide when to close them.\n- The real watchers are created by the `DirectoryWatcher`.\n- Files are never watched directly. This should keep the watcher count low.\n- Watching can be started in the past. This way watching can start after file reading.\n- Symlinks are not followed, instead the symlink is watched.\n\n## API\n\n```javascript\nvar Watchpack = require(\"watchpack\");\n\nvar wp = new Watchpack({\n\t// options:\n\taggregateTimeout: 1000,\n\t// fire \"aggregated\" event when after a change for 1000ms no additional change occurred\n\t// aggregated defaults to undefined, which doesn't fire an \"aggregated\" event\n\n\tpoll: true,\n\t// poll: true - use polling with the default interval\n\t// poll: 10000 - use polling with an interval of 10s\n\t// poll defaults to undefined, which prefer native watching methods\n\t// Note: enable polling when watching on a network path\n\t// When WATCHPACK_POLLING environment variable is set it will override this option\n\n\tfollowSymlinks: true,\n\t// true: follows symlinks and watches symlinks and real files\n\t//   (This makes sense when symlinks has not been resolved yet, comes with a performance hit)\n\t// false (default): watches only specified item they may be real files or symlinks\n\t//   (This makes sense when symlinks has already been resolved)\n\n\tignored: \"**/.git\"\n\t// ignored: \"string\" - a glob pattern for files or folders that should not be watched\n\t// ignored: [\"string\", \"string\"] - multiple glob patterns that should be ignored\n\t// ignored: /regexp/ - a regular expression for files or folders that should not be watched\n\t// All subdirectories are ignored too\n});\n\n// Watchpack.prototype.watch({\n//   files: Iterable<string>,\n//   directories: Iterable<string>,\n//   missing: Iterable<string>,\n//   startTime?: number\n// })\nwp.watch({\n\tfiles: listOfFiles,\n\tdirectories: listOfDirectories,\n\tmissing: listOfNotExistingItems,\n\tstartTime: Date.now() - 10000\n});\n// starts watching these files and directories\n// calling this again will override the files and directories\n// files: can be files or directories, for files: content and existence changes are tracked\n//        for directories: only existence and timestamp changes are tracked\n// directories: only directories, directory content (and content of children, ...) and\n//              existence changes are tracked.\n//              assumed to exist, when directory is not found without further information a remove event is emitted\n// missing: can be files or directorees,\n//          only existence changes are tracked\n//          expected to not exist, no remove event is emitted when not found initially\n// files and directories are assumed to exist, when they are not found without further information a remove event is emitted\n// missing is assumed to not exist and no remove event is emitted\n\nwp.on(\"change\", function(filePath, mtime, explanation) {\n\t// filePath: the changed file\n\t// mtime: last modified time for the changed file\n\t// explanation: textual information how this change was detected\n});\n\nwp.on(\"remove\", function(filePath, explanation) {\n\t// filePath: the removed file or directory\n\t// explanation: textual information how this change was detected\n});\n\nwp.on(\"aggregated\", function(changes, removals) {\n\t// changes: a Set of all changed files\n\t// removals: a Set of all removed files\n\t// watchpack gives up ownership on these Sets.\n});\n\n// Watchpack.prototype.pause()\nwp.pause();\n// stops emitting events, but keeps watchers open\n// next \"watch\" call can reuse the watchers\n\n// Watchpack.prototype.close()\nwp.close();\n// stops emitting events and closes all watchers\n\n// Watchpack.prototype.getTimeInfoEntries()\nvar fileTimes = wp.getTimeInfoEntries();\n// returns a Map with all known time info objects for files and directories\n// this include info from files not directly watched\n// key: absolute path, value: object with { safeTime, timestamp }\n// safeTime: a point in time at which it is safe to say all changes happened before that\n// timestamp: only for files, the mtime timestamp of the file\n\n// (deprecated)\n// Watchpack.prototype.getTimes()\nvar fileTimes = wp.getTimes();\n// returns an object with all known change times for files\n// this include timestamps from files not directly watched\n// key: absolute path, value: timestamp as number\n```\n\n[build-status]: https://travis-ci.org/webpack/watchpack.svg?branch=master\n[build-status-url]: https://travis-ci.org/webpack/watchpack\n[build-status-veyor]: https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true\n[build-status-veyor-url]: https://ci.appveyor.com/project/sokra/watchpack/branch/master\n[coveralls-url]: https://coveralls.io/r/webpack/watchpack/\n[coveralls-image]: https://img.shields.io/coveralls/webpack/watchpack.svg\n[codecov]: https://codecov.io/gh/webpack/watchpack/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/webpack/watchpack\n[downloads]: https://img.shields.io/npm/dm/watchpack.svg\n[downloads-url]: https://www.npmjs.com/package/watchpack\n[contributors]: https://img.shields.io/github/contributors/webpack/watchpack.svg\n[contributors-url]: https://github.com/webpack/watchpack/graphs/contributors\n","readmeFilename":"README.md","gitHead":"ce3b818757845e37e2c0203b8f7d3b3d6c5995f7","_nodeVersion":"14.5.0","_npmVersion":"6.14.5","maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.0.0-beta.14_1596719720170_0.8200506757462036"},"_hasShrinkwrap":false},"2.0.0-beta.15":{"_id":"watchpack@2.0.0-beta.15","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.0.0-beta.15","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1","write-file-atomic":"^3.0.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2"},"engines":{"node":">=10.13.0"},"main":"./lib/watchpack.js","dist":{"shasum":"0e69c8e5d680c7b4c181db3f70e500ca84cef794","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.0.0-beta.15.tgz"},"readme":"# watchpack\n\nWrapper library for directory and file watching.\n\n[![Build Status][build-status]][build-status-url]\n[![Build status][build-status-veyor]][build-status-veyor-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![codecov][codecov]][codecov-url]\n[![downloads][downloads]][downloads-url]\n[![Github contributors][contributors]][contributors-url]\n\n## Concept\n\nwatchpack high level API doesn't map directly to watchers. Instead a three level architecture ensures that for each directory only a single watcher exists.\n\n- The high level API requests `DirectoryWatchers` from a `WatcherManager`, which ensures that only a single `DirectoryWatcher` per directory is created.\n- A user-faced `Watcher` can be obtained from a `DirectoryWatcher` and provides a filtered view on the `DirectoryWatcher`.\n- Reference-counting is used on the `DirectoryWatcher` and `Watcher` to decide when to close them.\n- The real watchers are created by the `DirectoryWatcher`.\n- Files are never watched directly. This should keep the watcher count low.\n- Watching can be started in the past. This way watching can start after file reading.\n- Symlinks are not followed, instead the symlink is watched.\n\n## API\n\n```javascript\nvar Watchpack = require(\"watchpack\");\n\nvar wp = new Watchpack({\n\t// options:\n\taggregateTimeout: 1000,\n\t// fire \"aggregated\" event when after a change for 1000ms no additional change occurred\n\t// aggregated defaults to undefined, which doesn't fire an \"aggregated\" event\n\n\tpoll: true,\n\t// poll: true - use polling with the default interval\n\t// poll: 10000 - use polling with an interval of 10s\n\t// poll defaults to undefined, which prefer native watching methods\n\t// Note: enable polling when watching on a network path\n\t// When WATCHPACK_POLLING environment variable is set it will override this option\n\n\tfollowSymlinks: true,\n\t// true: follows symlinks and watches symlinks and real files\n\t//   (This makes sense when symlinks has not been resolved yet, comes with a performance hit)\n\t// false (default): watches only specified item they may be real files or symlinks\n\t//   (This makes sense when symlinks has already been resolved)\n\n\tignored: \"**/.git\"\n\t// ignored: \"string\" - a glob pattern for files or folders that should not be watched\n\t// ignored: [\"string\", \"string\"] - multiple glob patterns that should be ignored\n\t// ignored: /regexp/ - a regular expression for files or folders that should not be watched\n\t// All subdirectories are ignored too\n});\n\n// Watchpack.prototype.watch({\n//   files: Iterable<string>,\n//   directories: Iterable<string>,\n//   missing: Iterable<string>,\n//   startTime?: number\n// })\nwp.watch({\n\tfiles: listOfFiles,\n\tdirectories: listOfDirectories,\n\tmissing: listOfNotExistingItems,\n\tstartTime: Date.now() - 10000\n});\n// starts watching these files and directories\n// calling this again will override the files and directories\n// files: can be files or directories, for files: content and existence changes are tracked\n//        for directories: only existence and timestamp changes are tracked\n// directories: only directories, directory content (and content of children, ...) and\n//              existence changes are tracked.\n//              assumed to exist, when directory is not found without further information a remove event is emitted\n// missing: can be files or directorees,\n//          only existence changes are tracked\n//          expected to not exist, no remove event is emitted when not found initially\n// files and directories are assumed to exist, when they are not found without further information a remove event is emitted\n// missing is assumed to not exist and no remove event is emitted\n\nwp.on(\"change\", function(filePath, mtime, explanation) {\n\t// filePath: the changed file\n\t// mtime: last modified time for the changed file\n\t// explanation: textual information how this change was detected\n});\n\nwp.on(\"remove\", function(filePath, explanation) {\n\t// filePath: the removed file or directory\n\t// explanation: textual information how this change was detected\n});\n\nwp.on(\"aggregated\", function(changes, removals) {\n\t// changes: a Set of all changed files\n\t// removals: a Set of all removed files\n\t// watchpack gives up ownership on these Sets.\n});\n\n// Watchpack.prototype.pause()\nwp.pause();\n// stops emitting events, but keeps watchers open\n// next \"watch\" call can reuse the watchers\n\n// Watchpack.prototype.close()\nwp.close();\n// stops emitting events and closes all watchers\n\n// Watchpack.prototype.getTimeInfoEntries()\nvar fileTimes = wp.getTimeInfoEntries();\n// returns a Map with all known time info objects for files and directories\n// this include info from files not directly watched\n// key: absolute path, value: object with { safeTime, timestamp }\n// safeTime: a point in time at which it is safe to say all changes happened before that\n// timestamp: only for files, the mtime timestamp of the file\n\n// (deprecated)\n// Watchpack.prototype.getTimes()\nvar fileTimes = wp.getTimes();\n// returns an object with all known change times for files\n// this include timestamps from files not directly watched\n// key: absolute path, value: timestamp as number\n```\n\n[build-status]: https://travis-ci.org/webpack/watchpack.svg?branch=master\n[build-status-url]: https://travis-ci.org/webpack/watchpack\n[build-status-veyor]: https://ci.appveyor.com/api/projects/status/e5u2qvmugtv0r647/branch/master?svg=true\n[build-status-veyor-url]: https://ci.appveyor.com/project/sokra/watchpack/branch/master\n[coveralls-url]: https://coveralls.io/r/webpack/watchpack/\n[coveralls-image]: https://img.shields.io/coveralls/webpack/watchpack.svg\n[codecov]: https://codecov.io/gh/webpack/watchpack/branch/master/graph/badge.svg\n[codecov-url]: https://codecov.io/gh/webpack/watchpack\n[downloads]: https://img.shields.io/npm/dm/watchpack.svg\n[downloads-url]: https://www.npmjs.com/package/watchpack\n[contributors]: https://img.shields.io/github/contributors/webpack/watchpack.svg\n[contributors-url]: https://github.com/webpack/watchpack/graphs/contributors\n","readmeFilename":"README.md","gitHead":"39d556d5f25e5a2d47e465044a0437874ae84348","_nodeVersion":"14.5.0","_npmVersion":"6.14.5","maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.0.0-beta.15_1598570959973_0.4551952346710084"},"_hasShrinkwrap":false},"2.0.0":{"_id":"watchpack@2.0.0","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.0.0","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1","write-file-atomic":"^3.0.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2"},"engines":{"node":">=10.13.0"},"main":"./lib/watchpack.js","dist":{"shasum":"b12248f32f0fd4799b7be0802ad1f6573a45955c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.0.0.tgz"},"gitHead":"c42f62580c27393f2b4843fccb62acc121ba367b","_nodeVersion":"14.9.0","_npmVersion":"6.14.8","maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.0.0_1600387148547_0.28928170297762845"},"_hasShrinkwrap":false},"2.0.1":{"_id":"watchpack@2.0.1","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.0.1","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1","write-file-atomic":"^3.0.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2"},"engines":{"node":">=10.13.0"},"main":"./lib/watchpack.js","dist":{"shasum":"2f2192c542c82a3bcde76acd3411470c120426a8","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.0.1.tgz"},"gitHead":"c4ecbe816e41ae0418192df729b2ff753762f3ba","_nodeVersion":"14.9.0","_npmVersion":"6.14.8","maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.0.1_1604147865282_0.3004950103842232"},"_hasShrinkwrap":false},"2.1.0":{"_id":"watchpack@2.1.0","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.1.0","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1","write-file-atomic":"^3.0.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2"},"engines":{"node":">=10.13.0"},"main":"./lib/watchpack.js","dist":{"shasum":"e63194736bf3aa22026f7b191cd57907b0f9f696","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.1.0.tgz"},"gitHead":"310cb277e391ca31be2873605ad22c34b572695f","_nodeVersion":"14.15.1","_npmVersion":"6.14.8","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.1.0_1607424760984_0.5594497566689356"},"_hasShrinkwrap":false},"2.1.1":{"_id":"watchpack@2.1.1","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.1.1","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1","write-file-atomic":"^3.0.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2"},"engines":{"node":">=10.13.0"},"main":"./lib/watchpack.js","dist":{"shasum":"e99630550fca07df9f90a06056987baa40a689c7","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.1.1.tgz"},"gitHead":"f1b5e2da2d5dfd46f99b9b405c97b9d6441687d5","_nodeVersion":"15.8.0","_npmVersion":"7.5.1","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.1.1_1612715791608_0.8735668749043415"},"_hasShrinkwrap":false},"2.2.0":{"_id":"watchpack@2.2.0","name":"watchpack","description":"","version":"2.2.0","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra","email":"","url":""},"repository":{"type":"git","url":"https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1","write-file-atomic":"^3.0.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2"},"engines":{"node":">=10.13.0"},"files":["lib/"],"main":"./lib/watchpack.js","dist":{"shasum":"47d78f5415fe550ecd740f99fe2882323a58b1ce","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.2.0.tgz"}},"2.3.0":{"_id":"watchpack@2.3.0","name":"watchpack","description":"Wrapper library for directory and file watching.","version":"2.3.0","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra"},"repository":{"type":"git","url":"git+https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1","write-file-atomic":"^3.0.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2"},"engines":{"node":">=10.13.0"},"main":"./lib/watchpack.js","dist":{"shasum":"a41bca3da6afaff31e92a433f4c856a0c25ea0c4","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.3.0.tgz"},"gitHead":"b903dd384da582ae5f1e6ca71586fed3d991de7f","_nodeVersion":"16.13.0","_npmVersion":"7.22.0","_npmUser":{"name":"sokra","email":"tobias.koppers@googlemail.com"},"maintainers":[{"name":"sokra","email":"tobias.koppers@googlemail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/watchpack_2.3.0_1637777526274_0.024048646907871563"},"_hasShrinkwrap":false},"2.3.1":{"_id":"watchpack@2.3.1","name":"watchpack","description":"","version":"2.3.1","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra","email":"","url":""},"repository":{"type":"git","url":"https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1","write-file-atomic":"^3.0.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2"},"engines":{"node":">=10.13.0"},"files":["lib/"],"main":"./lib/watchpack.js","dist":{"shasum":"4200d9447b401156eeca7767ee610f8809bc9d25","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.3.1.tgz"}},"2.4.0":{"_id":"watchpack@2.4.0","name":"watchpack","description":"","version":"2.4.0","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra","email":"","url":""},"repository":{"type":"git","url":"https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretest":"yarn lint","test":"mocha","lint":"eslint lib","precover":"yarn lint","pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","cover":"istanbul cover node_modules/mocha/bin/_mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1","write-file-atomic":"^3.0.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2"},"engines":{"node":">=10.13.0"},"files":["lib/"],"main":"./lib/watchpack.js","dist":{"shasum":"fa33032374962c78113f93c7f2fb4c54c9862a5d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.4.0.tgz"}},"2.4.1":{"_id":"watchpack@2.4.1","name":"watchpack","description":"","version":"2.4.1","homepage":"https://github.com/webpack/watchpack","author":{"name":"Tobias Koppers @sokra","email":"","url":""},"repository":{"type":"git","url":"https://github.com/webpack/watchpack.git"},"bugs":{"url":"https://github.com/webpack/watchpack/issues"},"license":"MIT","scripts":{"pretty-files":"prettier \"lib/**.*\" \"test/**/*.js\" --write","lint":"eslint lib","test:only":"mocha","test:coverage":"istanbul cover node_modules/mocha/bin/_mocha","pretest":"yarn lint","test":"mocha"},"directories":{},"devDependencies":{"coveralls":"^3.0.0","eslint":"^5.11.1","eslint-config-prettier":"^4.3.0","eslint-plugin-prettier":"^3.1.0","istanbul":"^0.4.3","mocha":"^5.0.1","prettier":"^1.11.0","rimraf":"^2.6.2","should":"^8.3.1","write-file-atomic":"^3.0.1"},"dependencies":{"glob-to-regexp":"^0.4.1","graceful-fs":"^4.1.2"},"engines":{"node":">=10.13.0"},"files":["lib/"],"main":"./lib/watchpack.js","dist":{"shasum":"29308f2cac150fa8e4c92f90e0ec954a9fed7fff","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/watchpack/-/watchpack-2.4.1.tgz"}}},"time":{"created":"2022-06-15T16:25:22Z","modified":"2024-03-21T14:47:45Z","0.1.0":"2022-06-15T16:25:22Z","0.1.1":"2022-06-15T16:25:22Z","0.1.2":"2022-06-15T16:25:22Z","0.1.3":"2022-06-15T16:25:22Z","0.2.0":"2022-06-15T16:25:22Z","0.2.1":"2022-06-15T16:25:22Z","0.2.2":"2022-06-15T16:25:22Z","0.2.3":"2022-06-15T16:25:22Z","0.2.4":"2022-06-15T16:25:22Z","0.2.5":"2022-06-15T16:25:22Z","0.2.6":"2022-06-15T16:25:22Z","0.2.7":"2022-06-15T16:25:22Z","0.2.8":"2022-06-15T16:25:22Z","0.2.9":"2022-06-15T16:25:22Z","1.0.0":"2022-06-15T16:25:22Z","1.0.1":"2022-06-15T16:25:22Z","1.1.0":"2022-06-15T16:25:22Z","1.2.0":"2022-06-15T16:25:22Z","1.2.1":"2022-06-15T16:25:22Z","1.3.0":"2022-06-15T16:25:22Z","1.3.1":"2022-06-15T16:25:22Z","1.4.0":"2022-06-15T16:25:22Z","1.5.0":"2022-06-15T16:25:22Z","1.6.0":"2022-06-15T16:33:48Z","1.6.1":"2022-06-15T16:25:22Z","1.7.1":"2022-06-15T16:25:22Z","1.7.2":"2022-06-15T16:25:22Z","1.7.3":"2022-06-15T16:25:22Z","1.7.4":"2022-06-15T16:25:22Z","1.7.5":"2022-08-22T21:30:59Z","2.0.0-beta.0":"2022-06-15T16:25:22Z","2.0.0-beta.1":"2022-06-15T16:25:22Z","2.0.0-beta.2":"2022-06-15T16:25:22Z","2.0.0-beta.3":"2022-06-15T16:25:22Z","2.0.0-beta.4":"2022-06-15T16:25:22Z","2.0.0-beta.5":"2022-06-15T16:25:22Z","2.0.0-beta.6":"2022-06-15T16:25:22Z","2.0.0-beta.7":"2022-06-15T16:25:22Z","2.0.0-beta.8":"2022-06-15T16:25:22Z","2.0.0-beta.9":"2022-06-15T16:25:22Z","2.0.0-beta.10":"2022-06-15T16:25:22Z","2.0.0-beta.11":"2022-06-15T16:25:22Z","2.0.0-beta.12":"2022-06-15T16:25:22Z","2.0.0-beta.13":"2022-06-15T16:25:22Z","2.0.0-beta.14":"2022-06-15T16:25:22Z","2.0.0-beta.15":"2022-06-15T16:25:22Z","2.0.0":"2022-06-15T16:25:22Z","2.0.1":"2022-06-15T16:25:22Z","2.1.0":"2022-06-15T16:25:22Z","2.1.1":"2022-06-15T16:25:22Z","2.2.0":"2022-07-15T17:00:29Z","2.3.0":"2022-06-15T16:25:22Z","2.3.1":"2022-06-29T18:21:39Z","2.4.0":"2022-06-28T23:23:54Z","2.4.1":"2024-03-21T14:47:45Z"}}