{"_id":"buffer-crc32","_rev":"6fed9020-869b-4a1c-b448-89318d2d4413","name":"buffer-crc32","dist-tags":{"latest":"1.0.0","next":"1.0.0-RC9"},"versions":{"0.1.0":{"_id":"buffer-crc32@0.1.0","name":"buffer-crc32","description":"A CRC32 algorithm that works with buffers and is cool with unicode.","version":"0.1.0","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com","url":"http://bjb.io"},"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"scripts":{"test":"tap tests/*.test.js"},"directories":null,"devDependencies":{},"dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"main":"index.js","dist":{"shasum":"aaf375a949dea411fa2b39b41e808f9543224e3f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-0.1.0.tgz"},"_npmUser":{"name":"brianloveswords","email":"brian@nyhacker.org"},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.8.1","_defaultsLoaded":true,"maintainers":[{"name":"brianloveswords","email":"brian@nyhacker.org"}]},"0.1.1":{"_id":"buffer-crc32@0.1.1","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"0.1.1","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com","url":"http://bjb.io"},"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"scripts":{"test":"./node_modules/.bin/tap tests/*.test.js"},"directories":null,"devDependencies":{"tap":"~0.2.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"main":"index.js","dist":{"shasum":"7e110dc9953908ab7c32acdc70c9f945b1cbc526","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-0.1.1.tgz"},"_npmUser":{"name":"brianloveswords","email":"brian@nyhacker.org"},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.8.1","_defaultsLoaded":true,"maintainers":[{"name":"brianloveswords","email":"brian@nyhacker.org"}]},"0.2.0":{"_id":"buffer-crc32@0.2.0","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"0.2.0","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com","url":"http://bjb.io"},"contributors":[{"name":"mistakster","email":"","url":""}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"scripts":{"test":"./node_modules/.bin/tap tests/*.test.js"},"directories":null,"devDependencies":{"tap":"~0.2.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"main":"index.js","dist":{"shasum":"bdd04c663eb5cad999bd272dfcf2ea51a2ab0a3e","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-0.2.0.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"brianloveswords","email":"brian@nyhacker.org"},"maintainers":[{"name":"brianloveswords","email":"brian@nyhacker.org"}]},"0.2.1":{"_id":"buffer-crc32@0.2.1","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"0.2.1","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com","url":"http://bjb.io"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"scripts":{"test":"./node_modules/.bin/tap tests/*.test.js"},"directories":null,"devDependencies":{"tap":"~0.2.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"main":"index.js","dist":{"shasum":"be3e5382fc02b6d6324956ac1af98aa98b08534c","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-0.2.1.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"brianloveswords","email":"brian@nyhacker.org"},"maintainers":[{"name":"brianloveswords","email":"brian@nyhacker.org"}]},"0.2.3":{"_id":"buffer-crc32@0.2.3","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"0.2.3","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com","url":"http://bjb.io"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"bugs":{"url":"https://github.com/brianloveswords/buffer-crc32/issues"},"scripts":{"test":"tap tests/*.test.js"},"directories":null,"devDependencies":{"tap":"~0.2.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"main":"index.js","dist":{"shasum":"bb54519e95d107cbd2400e76d0cab1467336d921","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-0.2.3.tgz"},"gitHead":"f06dc30bccbad685af30666268c6fd2670805998","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"brianloveswords","email":"brianloveswords@gmail.com"},"maintainers":[{"name":"brianloveswords","email":"brian@nyhacker.org"}]},"0.2.4":{"_id":"buffer-crc32@0.2.4","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"0.2.4","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com","url":"http://bjb.io"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"bugs":{"url":"https://github.com/brianloveswords/buffer-crc32/issues"},"license":"MIT","scripts":{"test":"tap tests/*.test.js"},"directories":null,"devDependencies":{"tap":"~0.2.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"main":"index.js","dist":{"shasum":"f729c4c5d2eb39ba49f29422175cc20b0bf1b96f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-0.2.4.tgz"},"gitHead":"1906667eedde5fdb5c9c98f91b743518c2d7469c","_from":".","_npmVersion":"1.4.14","_npmUser":{"name":"brianloveswords","email":"brianloveswords@gmail.com"},"maintainers":[{"name":"brianloveswords","email":"brian@nyhacker.org"}]},"0.2.5":{"_id":"buffer-crc32@0.2.5","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"0.2.5","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com","url":"http://bjb.io"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"bugs":{"url":"https://github.com/brianloveswords/buffer-crc32/issues"},"license":"MIT","scripts":{"test":"tap tests/*.test.js"},"directories":null,"devDependencies":{"tap":"~0.2.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"main":"index.js","dist":{"shasum":"db003ac2671e62ebd6ece78ea2c2e1b405736e91","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-0.2.5.tgz"},"licenses":[{"type":"MIT","url":"https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"}],"gitHead":"beb976670f2ea6414e4cce4764d0213e5f9d7cbc","_from":".","_npmVersion":"2.1.11","_nodeVersion":"0.10.33","_npmUser":{"name":"brianloveswords","email":"brianloveswords@gmail.com"},"maintainers":[{"name":"brianloveswords","email":"brian@nyhacker.org"}]},"0.2.6":{"_id":"buffer-crc32@0.2.6","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"0.2.6","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com","url":"http://bjb.io"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"bugs":{"url":"https://github.com/brianloveswords/buffer-crc32/issues"},"license":"MIT","scripts":{"test":"tap tests/*.test.js"},"directories":null,"devDependencies":{"tap":"~0.2.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"main":"index.js","dist":{"shasum":"612b318074fc6c4c30504b297247a1f91641253b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-0.2.6.tgz"},"licenses":[{"type":"MIT","url":"https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"}],"gitHead":"16fce71a69a5a2dd7b095b55496e11831c5e6e01","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"brianloveswords","email":"brianloveswords@gmail.com"},"maintainers":[{"name":"brianloveswords","email":"brian@nyhacker.org"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/buffer-crc32-0.2.6.tgz_1479485867929_0.5437697607558221"}},"0.2.7":{"_id":"buffer-crc32@0.2.7","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"0.2.7","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com","url":"http://bjb.io"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"bugs":{"url":"https://github.com/brianloveswords/buffer-crc32/issues"},"license":"MIT","scripts":{"test":"tap tests/*.test.js"},"directories":null,"devDependencies":{"tap":"~0.2.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"main":"index.js","dist":{"shasum":"1b9152ced5bc28eced319a29f53ca2f366a61585","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-0.2.7.tgz"},"licenses":[{"type":"MIT","url":"https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"}],"gitHead":"70b8acfea031bf3c60a61d8e74c393ccd8417ac1","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"brianloveswords","email":"brianloveswords@gmail.com"},"maintainers":[{"name":"brianloveswords","email":"brian@nyhacker.org"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/buffer-crc32-0.2.7.tgz_1479748032437_0.43503195815719664"}},"0.2.8":{"_id":"buffer-crc32@0.2.8","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"0.2.8","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"bugs":{"url":"https://github.com/brianloveswords/buffer-crc32/issues"},"license":"MIT","scripts":{"test":"tap tests/*.test.js"},"directories":null,"devDependencies":{"tap":"~0.2.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":">=6.0.0"},"main":"index.js","dist":{"shasum":"f5de1a797f1e1db8d4b1f5a0d7b499965b516cd6","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-0.2.8.tgz"},"licenses":[{"type":"MIT","url":"https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"}],"gitHead":"3753329fd18f96631a14d12aede70494a130f2e4","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"brianloveswords","email":"brianloveswords@gmail.com"},"maintainers":[{"name":"brianloveswords","email":"brian@nyhacker.org"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/buffer-crc32-0.2.8.tgz_1479748295648_0.4060637867078185"}},"0.2.9":{"_id":"buffer-crc32@0.2.9","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"0.2.9","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com","url":"http://bjb.io"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"bugs":{"url":"https://github.com/brianloveswords/buffer-crc32/issues"},"license":"MIT","scripts":{"test":"tap tests/*.test.js"},"directories":null,"devDependencies":{"tap":"~0.2.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"main":"index.js","dist":{"shasum":"3b09f0738e981546a3dcb36589b7918cba7bb65d","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-0.2.9.tgz"},"licenses":[{"type":"MIT","url":"https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"}],"gitHead":"bcf3edb304d0932dbdcd7f161a99f06957fe3fd1","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"brianloveswords","email":"brianloveswords@gmail.com"},"maintainers":[{"name":"brianloveswords","email":"brian@nyhacker.org"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/buffer-crc32-0.2.9.tgz_1479753671598_0.5003868564963341"}},"0.2.10":{"_id":"buffer-crc32@0.2.10","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"0.2.10","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com","url":"http://bjb.io"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"bugs":{"url":"https://github.com/brianloveswords/buffer-crc32/issues"},"license":"MIT","scripts":{"test":"tap tests/*.test.js"},"directories":null,"devDependencies":{"tap":"~0.2.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"main":"index.js","dist":{"shasum":"17a84bcefec579b634f5da3b92f75a6a4d5db565","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-0.2.10.tgz"},"licenses":[{"type":"MIT","url":"https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"}],"gitHead":"79e536bd43e1bebb0e4d89c085822e87bcafb722","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"brianloveswords","email":"brianloveswords@gmail.com"},"maintainers":[{"name":"brianloveswords","email":"brian@nyhacker.org"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/buffer-crc32-0.2.10.tgz_1479754279084_0.9421022920869291"}},"0.2.11":{"_id":"buffer-crc32@0.2.11","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"0.2.11","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"bugs":{"url":"https://github.com/brianloveswords/buffer-crc32/issues"},"license":"MIT","scripts":{"test":"tap tests/*.test.js"},"directories":null,"devDependencies":{"tap":"~0.2.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":">=6.0.0"},"main":"index.js","dist":{"shasum":"4d3903772a1f1c7f28d9c72a4127a638338e2ed5","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-0.2.11.tgz"},"licenses":[{"type":"MIT","url":"https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"}],"gitHead":"6ed04b8cfea47374d20eddb6e864a8fa194f2621","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"brianloveswords","email":"brianloveswords@gmail.com"},"maintainers":[{"name":"brianloveswords","email":"brian@nyhacker.org"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/buffer-crc32-0.2.11.tgz_1479763691716_0.7032775871921331"}},"0.2.12":{"_id":"buffer-crc32@0.2.12","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"0.2.12","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"bugs":{"url":"https://github.com/brianloveswords/buffer-crc32/issues"},"license":"MIT","scripts":{"test":"tap tests/*.test.js"},"directories":null,"devDependencies":{"tap":"~0.2.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":">=6.0.0"},"files":["index.js"],"main":"index.js","dist":{"shasum":"4d5df19d1d49227b84e9a7ca8940c738448e0879","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-0.2.12.tgz"},"licenses":[{"type":"MIT","url":"https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"}],"gitHead":"fd2e84fdf4fe43388722ad0cbc31e89f2bfda535","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"brianloveswords","email":"brianloveswords@gmail.com"},"maintainers":[{"name":"brianloveswords","email":"brian@nyhacker.org"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/buffer-crc32-0.2.12.tgz_1479766357312_0.3505246720742434"}},"0.2.13":{"_id":"buffer-crc32@0.2.13","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"0.2.13","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com","url":""},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"license":"MIT","scripts":{"test":"./node_modules/.bin/tap tests/*.test.js"},"directories":null,"devDependencies":{"tap":"~0.2.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":"*"},"files":["index.js"],"main":"index.js","dist":{"shasum":"0d333e3f00eac50aa1454abd30ef8c2a5d9a7242","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-0.2.13.tgz"},"licenses":[{"type":"MIT","url":"https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"}]},"1.0.0-RC1":{"_id":"buffer-crc32@1.0.0-RC1","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"1.0.0-RC1","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"bugs":{"url":"https://github.com/brianloveswords/buffer-crc32/issues"},"license":"MIT","scripts":{"test":"tap tests/*.test.js --reporter classic","build":"npx unbuild@2.0.0","prepublishOnly":"npm run build","format":"prettier --write --log-level warn \"**/*.{json,md,js}\""},"directories":{},"devDependencies":{"prettier":"^3.2.4","tap":"~11.1.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":">=8.0.0"},"main":"./dist/index.cjs","dist":{"shasum":"0dd52cdf907869ba67d69738ad99dfcb243cb126","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-1.0.0-RC1.tgz"},"readme":"# buffer-crc32\n\n[![Build Status](https://secure.travis-ci.org/brianloveswords/buffer-crc32.png?branch=master)](http://travis-ci.org/brianloveswords/buffer-crc32)\n\ncrc32 that works with binary data and fancy character sets, outputs\nbuffer, signed or unsigned data and has tests.\n\nDerived from the sample CRC implementation in the PNG specification: http://www.w3.org/TR/PNG/#D-CRCAppendix\n\nThis package requires Node 8+ to work.\n\n# install\n\n```\nnpm install buffer-crc32\n```\n\n# example\n\n```js\nvar crc32 = require('buffer-crc32');\n// works with buffers\nvar buf = Buffer([0x00, 0x73, 0x75, 0x70, 0x20, 0x62, 0x72, 0x6f, 0x00]);\ncrc32(buf); // -> <Buffer 94 5a ab 4a>\n\n// has convenience methods for getting signed or unsigned ints\ncrc32.signed(buf); // -> -1805997238\ncrc32.unsigned(buf); // -> 2488970058\n\n// will cast to buffer if given a string, so you can\n// directly use foreign characters safely\ncrc32('自動販売機'); // -> <Buffer cb 03 1a c5>\n\n// and works in append mode too\nvar partialCrc = crc32('hey');\nvar partialCrc = crc32(' ', partialCrc);\nvar partialCrc = crc32('sup', partialCrc);\nvar partialCrc = crc32(' ', partialCrc);\nvar finalCrc = crc32('bros', partialCrc); // -> <Buffer 47 fa 55 70>\n```\n\n# tests\n\nThis was tested against the output of zlib's crc32 method. You can run\nthe tests with`npm test` (requires tap)\n\n# see also\n\nhttps://github.com/alexgorbatchev/node-crc, `crc.buffer.crc32` also\nsupports buffer inputs and return unsigned ints (thanks @tjholowaychuk).\n\n# license\n\nMIT/X11\n","licenses":[{"type":"MIT","url":"https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"}],"readmeFilename":"README.md","gitHead":"78060e0713b17c28972b46180957ca1c180eac99","_nodeVersion":"21.5.0","_npmVersion":"10.2.4","_npmUser":{"name":"kibertoad","email":"iselwin@gmail.com"},"maintainers":[{"name":"brianloveswords","email":"brianloveswords@gmail.com"},{"name":"kibertoad","email":"iselwin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/buffer-crc32_1.0.0-RC1_1706916503977_0.6517348121567454"},"_hasShrinkwrap":false},"1.0.0-RC2":{"_id":"buffer-crc32@1.0.0-RC2","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"1.0.0-RC2","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"bugs":{"url":"https://github.com/brianloveswords/buffer-crc32/issues"},"license":"MIT","scripts":{"test":"tap tests/*.test.js --reporter classic","build":"npx unbuild@2.0.0","prepublishOnly":"npm run build","format":"prettier --write --log-level warn \"**/*.{json,md,js}\""},"directories":{},"devDependencies":{"prettier":"^3.2.4","tap":"~11.1.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":">=8.0.0"},"main":"./dist/index.cjs","dist":{"shasum":"7a4aa2580b28adc4e98fbc1eb79fe784975cc665","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-1.0.0-RC2.tgz"},"readme":"# buffer-crc32\n\n[![Build Status](https://secure.travis-ci.org/brianloveswords/buffer-crc32.png?branch=master)](http://travis-ci.org/brianloveswords/buffer-crc32)\n\ncrc32 that works with binary data and fancy character sets, outputs\nbuffer, signed or unsigned data and has tests.\n\nDerived from the sample CRC implementation in the PNG specification: http://www.w3.org/TR/PNG/#D-CRCAppendix\n\nThis package requires Node 8+ to work.\n\n# install\n\n```\nnpm install buffer-crc32\n```\n\n# example\n\n```js\nvar crc32 = require('buffer-crc32');\n// works with buffers\nvar buf = Buffer([0x00, 0x73, 0x75, 0x70, 0x20, 0x62, 0x72, 0x6f, 0x00]);\ncrc32(buf); // -> <Buffer 94 5a ab 4a>\n\n// has convenience methods for getting signed or unsigned ints\ncrc32.signed(buf); // -> -1805997238\ncrc32.unsigned(buf); // -> 2488970058\n\n// will cast to buffer if given a string, so you can\n// directly use foreign characters safely\ncrc32('自動販売機'); // -> <Buffer cb 03 1a c5>\n\n// and works in append mode too\nvar partialCrc = crc32('hey');\nvar partialCrc = crc32(' ', partialCrc);\nvar partialCrc = crc32('sup', partialCrc);\nvar partialCrc = crc32(' ', partialCrc);\nvar finalCrc = crc32('bros', partialCrc); // -> <Buffer 47 fa 55 70>\n```\n\n# tests\n\nThis was tested against the output of zlib's crc32 method. You can run\nthe tests with`npm test` (requires tap)\n\n# see also\n\nhttps://github.com/alexgorbatchev/node-crc, `crc.buffer.crc32` also\nsupports buffer inputs and return unsigned ints (thanks @tjholowaychuk).\n\n# license\n\nMIT/X11\n","licenses":[{"type":"MIT","url":"https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"}],"type":"commonjs","readmeFilename":"README.md","gitHead":"78060e0713b17c28972b46180957ca1c180eac99","types":"./dist/index.d.ts","_nodeVersion":"21.5.0","_npmVersion":"10.2.4","_npmUser":{"name":"kibertoad","email":"iselwin@gmail.com"},"maintainers":[{"name":"brianloveswords","email":"brianloveswords@gmail.com"},{"name":"kibertoad","email":"iselwin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/buffer-crc32_1.0.0-RC2_1706916761735_0.23582097806846036"},"_hasShrinkwrap":false},"1.0.0-RC3":{"_id":"buffer-crc32@1.0.0-RC3","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"1.0.0-RC3","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"bugs":{"url":"https://github.com/brianloveswords/buffer-crc32/issues"},"license":"MIT","scripts":{"test":"tap tests/*.test.js --reporter classic","build":"npx unbuild@2.0.0","prepublishOnly":"npm run build","format":"prettier --write --log-level warn \"**/*.{json,md,js}\""},"directories":{},"devDependencies":{"prettier":"^3.2.4","tap":"~11.1.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":">=8.0.0"},"main":"./dist/index.cjs","dist":{"shasum":"54f6f520c6cb3a8e7cc055c3b58a72db6ded2070","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-1.0.0-RC3.tgz"},"readme":"# buffer-crc32\n\n[![Build Status](https://secure.travis-ci.org/brianloveswords/buffer-crc32.png?branch=master)](http://travis-ci.org/brianloveswords/buffer-crc32)\n\ncrc32 that works with binary data and fancy character sets, outputs\nbuffer, signed or unsigned data and has tests.\n\nDerived from the sample CRC implementation in the PNG specification: http://www.w3.org/TR/PNG/#D-CRCAppendix\n\nThis package requires Node 8+ to work.\n\n# install\n\n```\nnpm install buffer-crc32\n```\n\n# example\n\n```js\nvar crc32 = require('buffer-crc32');\n// works with buffers\nvar buf = Buffer([0x00, 0x73, 0x75, 0x70, 0x20, 0x62, 0x72, 0x6f, 0x00]);\ncrc32(buf); // -> <Buffer 94 5a ab 4a>\n\n// has convenience methods for getting signed or unsigned ints\ncrc32.signed(buf); // -> -1805997238\ncrc32.unsigned(buf); // -> 2488970058\n\n// will cast to buffer if given a string, so you can\n// directly use foreign characters safely\ncrc32('自動販売機'); // -> <Buffer cb 03 1a c5>\n\n// and works in append mode too\nvar partialCrc = crc32('hey');\nvar partialCrc = crc32(' ', partialCrc);\nvar partialCrc = crc32('sup', partialCrc);\nvar partialCrc = crc32(' ', partialCrc);\nvar finalCrc = crc32('bros', partialCrc); // -> <Buffer 47 fa 55 70>\n```\n\n# tests\n\nThis was tested against the output of zlib's crc32 method. You can run\nthe tests with`npm test` (requires tap)\n\n# see also\n\nhttps://github.com/alexgorbatchev/node-crc, `crc.buffer.crc32` also\nsupports buffer inputs and return unsigned ints (thanks @tjholowaychuk).\n\n# license\n\nMIT/X11\n","licenses":[{"type":"MIT","url":"https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"}],"type":"commonjs","types":"./dist/index.d.cts","readmeFilename":"README.md","gitHead":"78060e0713b17c28972b46180957ca1c180eac99","_nodeVersion":"21.5.0","_npmVersion":"10.2.4","_npmUser":{"name":"kibertoad","email":"iselwin@gmail.com"},"maintainers":[{"name":"brianloveswords","email":"brianloveswords@gmail.com"},{"name":"kibertoad","email":"iselwin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/buffer-crc32_1.0.0-RC3_1706917333429_0.5334103667271359"},"_hasShrinkwrap":false},"1.0.0-RC4":{"_id":"buffer-crc32@1.0.0-RC4","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"1.0.0-RC4","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"bugs":{"url":"https://github.com/brianloveswords/buffer-crc32/issues"},"license":"MIT","scripts":{"test":"tap tests/*.test.js --reporter classic","build":"npx unbuild@2.0.0","prepublishOnly":"npm run build","format":"prettier --write --log-level warn \"**/*.{json,md,js}\""},"directories":{},"devDependencies":{"prettier":"^3.2.4","tap":"~11.1.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":">=8.0.0"},"main":"./dist/index.cjs","dist":{"shasum":"ec13f8dadbb9af15e45b73e7f3f82837933f4202","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-1.0.0-RC4.tgz"},"readme":"# buffer-crc32\n\n[![Build Status](https://secure.travis-ci.org/brianloveswords/buffer-crc32.png?branch=master)](http://travis-ci.org/brianloveswords/buffer-crc32)\n\ncrc32 that works with binary data and fancy character sets, outputs\nbuffer, signed or unsigned data and has tests.\n\nDerived from the sample CRC implementation in the PNG specification: http://www.w3.org/TR/PNG/#D-CRCAppendix\n\nThis package requires Node 8+ to work.\n\n# install\n\n```\nnpm install buffer-crc32\n```\n\n# example\n\n```js\nvar crc32 = require('buffer-crc32');\n// works with buffers\nvar buf = Buffer([0x00, 0x73, 0x75, 0x70, 0x20, 0x62, 0x72, 0x6f, 0x00]);\ncrc32(buf); // -> <Buffer 94 5a ab 4a>\n\n// has convenience methods for getting signed or unsigned ints\ncrc32.signed(buf); // -> -1805997238\ncrc32.unsigned(buf); // -> 2488970058\n\n// will cast to buffer if given a string, so you can\n// directly use foreign characters safely\ncrc32('自動販売機'); // -> <Buffer cb 03 1a c5>\n\n// and works in append mode too\nvar partialCrc = crc32('hey');\nvar partialCrc = crc32(' ', partialCrc);\nvar partialCrc = crc32('sup', partialCrc);\nvar partialCrc = crc32(' ', partialCrc);\nvar finalCrc = crc32('bros', partialCrc); // -> <Buffer 47 fa 55 70>\n```\n\n# tests\n\nThis was tested against the output of zlib's crc32 method. You can run\nthe tests with`npm test` (requires tap)\n\n# see also\n\nhttps://github.com/alexgorbatchev/node-crc, `crc.buffer.crc32` also\nsupports buffer inputs and return unsigned ints (thanks @tjholowaychuk).\n\n# license\n\nMIT/X11\n","licenses":[{"type":"MIT","url":"https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"}],"type":"commonjs","types":"./index.d.ts","readmeFilename":"README.md","gitHead":"78060e0713b17c28972b46180957ca1c180eac99","_nodeVersion":"21.5.0","_npmVersion":"10.2.4","_npmUser":{"name":"kibertoad","email":"iselwin@gmail.com"},"maintainers":[{"name":"brianloveswords","email":"brianloveswords@gmail.com"},{"name":"kibertoad","email":"iselwin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/buffer-crc32_1.0.0-RC4_1706917453971_0.8111580156661269"},"_hasShrinkwrap":false},"1.0.0-RC5":{"_id":"buffer-crc32@1.0.0-RC5","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"1.0.0-RC5","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"bugs":{"url":"https://github.com/brianloveswords/buffer-crc32/issues"},"license":"MIT","scripts":{"test":"tap tests/*.test.js --reporter classic","build":"npx unbuild@2.0.0","prepublishOnly":"npm run build","format":"prettier --write --log-level warn \"**/*.{json,md,js}\""},"directories":{},"devDependencies":{"prettier":"^3.2.4","tap":"~11.1.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":">=8.0.0"},"main":"./dist/index.cjs","dist":{"shasum":"7bdefc106b8265e0efc2be0883a7f791f918717b","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-1.0.0-RC5.tgz"},"readme":"# buffer-crc32\n\n[![Build Status](https://secure.travis-ci.org/brianloveswords/buffer-crc32.png?branch=master)](http://travis-ci.org/brianloveswords/buffer-crc32)\n\ncrc32 that works with binary data and fancy character sets, outputs\nbuffer, signed or unsigned data and has tests.\n\nDerived from the sample CRC implementation in the PNG specification: http://www.w3.org/TR/PNG/#D-CRCAppendix\n\nThis package requires Node 8+ to work.\n\n# install\n\n```\nnpm install buffer-crc32\n```\n\n# example\n\n```js\nvar crc32 = require('buffer-crc32');\n// works with buffers\nvar buf = Buffer([0x00, 0x73, 0x75, 0x70, 0x20, 0x62, 0x72, 0x6f, 0x00]);\ncrc32(buf); // -> <Buffer 94 5a ab 4a>\n\n// has convenience methods for getting signed or unsigned ints\ncrc32.signed(buf); // -> -1805997238\ncrc32.unsigned(buf); // -> 2488970058\n\n// will cast to buffer if given a string, so you can\n// directly use foreign characters safely\ncrc32('自動販売機'); // -> <Buffer cb 03 1a c5>\n\n// and works in append mode too\nvar partialCrc = crc32('hey');\nvar partialCrc = crc32(' ', partialCrc);\nvar partialCrc = crc32('sup', partialCrc);\nvar partialCrc = crc32(' ', partialCrc);\nvar finalCrc = crc32('bros', partialCrc); // -> <Buffer 47 fa 55 70>\n```\n\n# tests\n\nThis was tested against the output of zlib's crc32 method. You can run\nthe tests with`npm test` (requires tap)\n\n# see also\n\nhttps://github.com/alexgorbatchev/node-crc, `crc.buffer.crc32` also\nsupports buffer inputs and return unsigned ints (thanks @tjholowaychuk).\n\n# license\n\nMIT/X11\n","licenses":[{"type":"MIT","url":"https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"}],"type":"commonjs","types":"./index.d.ts","readmeFilename":"README.md","gitHead":"78060e0713b17c28972b46180957ca1c180eac99","_nodeVersion":"21.5.0","_npmVersion":"10.2.4","_npmUser":{"name":"kibertoad","email":"iselwin@gmail.com"},"maintainers":[{"name":"brianloveswords","email":"brianloveswords@gmail.com"},{"name":"kibertoad","email":"iselwin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/buffer-crc32_1.0.0-RC5_1706917546892_0.07498775466262919"},"_hasShrinkwrap":false},"1.0.0-RC7":{"_id":"buffer-crc32@1.0.0-RC7","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"1.0.0-RC7","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"bugs":{"url":"https://github.com/brianloveswords/buffer-crc32/issues"},"license":"MIT","scripts":{"test":"tap tests/*.test.js --reporter classic","build":"npx unbuild@2.0.0 && npx cpy-cli index.d.ts dist --rename=index.d.cts && npx cpy-cli index.d.ts dist --rename=index.d.mts","prepublishOnly":"npm run build","format":"prettier --write --log-level warn \"**/*.{json,md,js}\""},"directories":{},"devDependencies":{"prettier":"^3.2.4","tap":"~11.1.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":">=8.0.0"},"main":"./dist/index.cjs","dist":{"shasum":"25213579c299a1e046e39eac0f7cbfa01969da4f","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-1.0.0-RC7.tgz"},"readme":"# buffer-crc32\n\n[![Build Status](https://secure.travis-ci.org/brianloveswords/buffer-crc32.png?branch=master)](http://travis-ci.org/brianloveswords/buffer-crc32)\n\ncrc32 that works with binary data and fancy character sets, outputs\nbuffer, signed or unsigned data and has tests.\n\nDerived from the sample CRC implementation in the PNG specification: http://www.w3.org/TR/PNG/#D-CRCAppendix\n\nThis package requires Node 8+ to work.\n\n# install\n\n```\nnpm install buffer-crc32\n```\n\n# example\n\n```js\nvar crc32 = require('buffer-crc32');\n// works with buffers\nvar buf = Buffer([0x00, 0x73, 0x75, 0x70, 0x20, 0x62, 0x72, 0x6f, 0x00]);\ncrc32(buf); // -> <Buffer 94 5a ab 4a>\n\n// has convenience methods for getting signed or unsigned ints\ncrc32.signed(buf); // -> -1805997238\ncrc32.unsigned(buf); // -> 2488970058\n\n// will cast to buffer if given a string, so you can\n// directly use foreign characters safely\ncrc32('自動販売機'); // -> <Buffer cb 03 1a c5>\n\n// and works in append mode too\nvar partialCrc = crc32('hey');\nvar partialCrc = crc32(' ', partialCrc);\nvar partialCrc = crc32('sup', partialCrc);\nvar partialCrc = crc32(' ', partialCrc);\nvar finalCrc = crc32('bros', partialCrc); // -> <Buffer 47 fa 55 70>\n```\n\n# tests\n\nThis was tested against the output of zlib's crc32 method. You can run\nthe tests with`npm test` (requires tap)\n\n# see also\n\nhttps://github.com/alexgorbatchev/node-crc, `crc.buffer.crc32` also\nsupports buffer inputs and return unsigned ints (thanks @tjholowaychuk).\n\n# license\n\nMIT/X11\n","licenses":[{"type":"MIT","url":"https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"}],"type":"commonjs","types":"./dist/index.d.cts","readmeFilename":"README.md","gitHead":"78060e0713b17c28972b46180957ca1c180eac99","_nodeVersion":"21.5.0","_npmVersion":"10.2.4","_npmUser":{"name":"kibertoad","email":"iselwin@gmail.com"},"maintainers":[{"name":"brianloveswords","email":"brianloveswords@gmail.com"},{"name":"kibertoad","email":"iselwin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/buffer-crc32_1.0.0-RC7_1706918246290_0.4032307779579041"},"_hasShrinkwrap":false},"1.0.0-RC8":{"_id":"buffer-crc32@1.0.0-RC8","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"1.0.0-RC8","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"bugs":{"url":"https://github.com/brianloveswords/buffer-crc32/issues"},"license":"MIT","scripts":{"test":"tap tests/*.test.js --reporter classic","build":"npx unbuild@2.0.0 && npx cpy-cli index.d.ts dist --rename=index.d.cts && npx cpy-cli index.d.ts dist --rename=index.d.mts","prepublishOnly":"npm run build","format":"prettier --write --log-level warn \"**/*.{json,md,js}\""},"directories":{},"devDependencies":{"prettier":"^3.2.4","tap":"~11.1.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":">=8.0.0"},"main":"./dist/index.cjs","dist":{"shasum":"41c3aa00df7effff95ea896f5ebf2b41eb3919af","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-1.0.0-RC8.tgz"},"readme":"# buffer-crc32\n\n[![Build Status](https://secure.travis-ci.org/brianloveswords/buffer-crc32.png?branch=master)](http://travis-ci.org/brianloveswords/buffer-crc32)\n\ncrc32 that works with binary data and fancy character sets, outputs\nbuffer, signed or unsigned data and has tests.\n\nDerived from the sample CRC implementation in the PNG specification: http://www.w3.org/TR/PNG/#D-CRCAppendix\n\nThis package requires Node 8+ to work.\n\n# install\n\n```\nnpm install buffer-crc32\n```\n\n# example\n\n```js\nvar crc32 = require('buffer-crc32');\n// works with buffers\nvar buf = Buffer([0x00, 0x73, 0x75, 0x70, 0x20, 0x62, 0x72, 0x6f, 0x00]);\ncrc32(buf); // -> <Buffer 94 5a ab 4a>\n\n// has convenience methods for getting signed or unsigned ints\ncrc32.signed(buf); // -> -1805997238\ncrc32.unsigned(buf); // -> 2488970058\n\n// will cast to buffer if given a string, so you can\n// directly use foreign characters safely\ncrc32('自動販売機'); // -> <Buffer cb 03 1a c5>\n\n// and works in append mode too\nvar partialCrc = crc32('hey');\nvar partialCrc = crc32(' ', partialCrc);\nvar partialCrc = crc32('sup', partialCrc);\nvar partialCrc = crc32(' ', partialCrc);\nvar finalCrc = crc32('bros', partialCrc); // -> <Buffer 47 fa 55 70>\n```\n\n# tests\n\nThis was tested against the output of zlib's crc32 method. You can run\nthe tests with`npm test` (requires tap)\n\n# see also\n\nhttps://github.com/alexgorbatchev/node-crc, `crc.buffer.crc32` also\nsupports buffer inputs and return unsigned ints (thanks @tjholowaychuk).\n\n# license\n\nMIT/X11\n","licenses":[{"type":"MIT","url":"https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"}],"type":"commonjs","types":"./index.d.ts","readmeFilename":"README.md","gitHead":"78060e0713b17c28972b46180957ca1c180eac99","_nodeVersion":"21.5.0","_npmVersion":"10.2.4","_npmUser":{"name":"kibertoad","email":"iselwin@gmail.com"},"maintainers":[{"name":"brianloveswords","email":"brianloveswords@gmail.com"},{"name":"kibertoad","email":"iselwin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/buffer-crc32_1.0.0-RC8_1706918326221_0.2029735301484017"},"_hasShrinkwrap":false},"1.0.0-RC9":{"_id":"buffer-crc32@1.0.0-RC9","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"1.0.0-RC9","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"bugs":{"url":"https://github.com/brianloveswords/buffer-crc32/issues"},"license":"MIT","scripts":{"test":"tap tests/*.test.js --reporter classic","build":"npx unbuild@2.0.0 && npx cpy-cli index.d.ts dist --rename=index.d.cts && npx cpy-cli index.d.ts dist --rename=index.d.mts","prepublishOnly":"npm run build","format":"prettier --write --log-level warn \"**/*.{json,md,js}\""},"directories":{},"devDependencies":{"prettier":"^3.2.4","tap":"~11.1.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":">=8.0.0"},"main":"./dist/index.cjs","dist":{"shasum":"dd06101eb6d21def8d54ee21592497cbad20d5fc","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-1.0.0-RC9.tgz"},"readme":"# buffer-crc32\n\n[![Build Status](https://secure.travis-ci.org/brianloveswords/buffer-crc32.png?branch=master)](http://travis-ci.org/brianloveswords/buffer-crc32)\n\ncrc32 that works with binary data and fancy character sets, outputs\nbuffer, signed or unsigned data and has tests.\n\nDerived from the sample CRC implementation in the PNG specification: http://www.w3.org/TR/PNG/#D-CRCAppendix\n\nThis package requires Node 8+ to work.\n\n# install\n\n```\nnpm install buffer-crc32\n```\n\n# example\n\n```js\nvar crc32 = require('buffer-crc32');\n// works with buffers\nvar buf = Buffer([0x00, 0x73, 0x75, 0x70, 0x20, 0x62, 0x72, 0x6f, 0x00]);\ncrc32(buf); // -> <Buffer 94 5a ab 4a>\n\n// has convenience methods for getting signed or unsigned ints\ncrc32.signed(buf); // -> -1805997238\ncrc32.unsigned(buf); // -> 2488970058\n\n// will cast to buffer if given a string, so you can\n// directly use foreign characters safely\ncrc32('自動販売機'); // -> <Buffer cb 03 1a c5>\n\n// and works in append mode too\nvar partialCrc = crc32('hey');\nvar partialCrc = crc32(' ', partialCrc);\nvar partialCrc = crc32('sup', partialCrc);\nvar partialCrc = crc32(' ', partialCrc);\nvar finalCrc = crc32('bros', partialCrc); // -> <Buffer 47 fa 55 70>\n```\n\n# tests\n\nThis was tested against the output of zlib's crc32 method. You can run\nthe tests with`npm test` (requires tap)\n\n# see also\n\nhttps://github.com/alexgorbatchev/node-crc, `crc.buffer.crc32` also\nsupports buffer inputs and return unsigned ints (thanks @tjholowaychuk).\n\n# license\n\nMIT/X11\n","licenses":[{"type":"MIT","url":"https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"}],"type":"commonjs","types":"./index.d.ts","readmeFilename":"README.md","gitHead":"78060e0713b17c28972b46180957ca1c180eac99","_nodeVersion":"21.5.0","_npmVersion":"10.2.4","_npmUser":{"name":"kibertoad","email":"iselwin@gmail.com"},"maintainers":[{"name":"brianloveswords","email":"brianloveswords@gmail.com"},{"name":"kibertoad","email":"iselwin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/buffer-crc32_1.0.0-RC9_1706918399444_0.6232004938034224"},"_hasShrinkwrap":false},"1.0.0":{"_id":"buffer-crc32@1.0.0","name":"buffer-crc32","description":"A pure javascript CRC32 algorithm that plays nice with binary data","version":"1.0.0","homepage":"https://github.com/brianloveswords/buffer-crc32","author":{"name":"Brian J. Brennan","email":"brianloveswords@gmail.com"},"contributors":[{"name":"Vladimir Kuznetsov"}],"repository":{"type":"git","url":"git://github.com/brianloveswords/buffer-crc32.git"},"bugs":{"url":"https://github.com/brianloveswords/buffer-crc32/issues"},"license":"MIT","scripts":{"test":"tap tests/*.test.js --reporter classic","build":"npx unbuild@2.0.0 && npx cpy-cli index.d.ts dist --rename=index.d.cts && npx cpy-cli index.d.ts dist --rename=index.d.mts","prepublishOnly":"npm run build","format":"prettier --write --log-level warn \"**/*.{json,md,js}\""},"directories":{},"devDependencies":{"prettier":"^3.2.4","tap":"~11.1.5"},"dependencies":{},"optionalDependencies":{},"engines":{"node":">=8.0.0"},"main":"./dist/index.cjs","dist":{"shasum":"a10993b9055081d55304bd9feb4a072de179f405","tarball":"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public-npm/npm/registry/buffer-crc32/-/buffer-crc32-1.0.0.tgz"},"licenses":[{"type":"MIT","url":"https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"}],"type":"commonjs","types":"./index.d.ts","gitHead":"fc79b0d9e490dee637d02107b93b88dc9c26dc69","_nodeVersion":"21.5.0","_npmVersion":"10.2.4","_npmUser":{"name":"kibertoad","email":"iselwin@gmail.com"},"maintainers":[{"name":"brianloveswords","email":"brianloveswords@gmail.com"},{"name":"kibertoad","email":"iselwin@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/buffer-crc32_1.0.0_1707242286713_0.9201286026324527"},"_hasShrinkwrap":false}},"time":{"created":"2022-08-22T21:30:25Z","modified":"2024-02-06T23:46:25Z","0.1.0":"2022-08-22T21:30:25Z","0.1.1":"2022-08-22T21:30:25Z","0.2.0":"2022-08-22T21:30:25Z","0.2.1":"2022-08-22T21:30:25Z","0.2.3":"2022-08-22T21:30:25Z","0.2.4":"2022-08-22T21:30:25Z","0.2.5":"2022-08-22T21:30:25Z","0.2.6":"2022-08-22T21:30:25Z","0.2.7":"2022-08-22T21:30:25Z","0.2.8":"2022-08-22T21:30:25Z","0.2.9":"2022-08-22T21:30:25Z","0.2.10":"2022-08-22T21:30:25Z","0.2.11":"2022-08-22T21:30:25Z","0.2.12":"2022-08-22T21:30:25Z","0.2.13":"2022-08-22T21:30:52Z","1.0.0-RC1":"2024-02-03T02:44:46Z","1.0.0-RC2":"2024-02-03T02:44:46Z","1.0.0-RC3":"2024-02-03T02:44:46Z","1.0.0-RC4":"2024-02-03T02:44:46Z","1.0.0-RC5":"2024-02-03T02:44:46Z","1.0.0-RC7":"2024-02-03T05:53:32Z","1.0.0-RC8":"2024-02-03T05:53:32Z","1.0.0-RC9":"2024-02-03T05:53:32Z","1.0.0":"2024-02-06T23:46:25Z"}}