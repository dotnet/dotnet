parameters:

- name: pool_Linux
  type: object

- name: pool_LinuxArm64
  type: object

# Scope of jobs which are executed
- name: scope
  type: string
  values:
  # run several legs e.g. stage1/stage2 for basic testing
  - lite
  # run everything
  - full

- name: useMicrosoftBuildAssetsForTests
  type: boolean
  default: true

# True when build is running from dotnet/dotnet directly
- name: isBuiltFromVmr
  type: boolean
  default: true

- name: desiredFinalVersionKind
  type: string
  default: ''

# List of verifications to run during PRs.
- name: verifications
  type: object
  default: []

stages:
- ${{ if or(in(parameters.scope, 'full') , contains(join(';', parameters.verifications), 'source-build-')) }}:
  - template: source-build-and-validate.yml
    parameters:
      pool_Linux: ${{ parameters.pool_Linux }}
      pool_LinuxArm64: ${{ parameters.pool_LinuxArm64 }}
      useMicrosoftBuildAssetsForTests: ${{ parameters.useMicrosoftBuildAssetsForTests }}
      isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
      desiredFinalVersionKind: ${{ parameters.desiredFinalVersionKind }}
      
      # Description of the source build legs to run.
      # This is described here as a parameter to allow two separate stages to be produced from this list (one for building
      # and one for validation). Because this template is not directly within a pipeline, stage, or job, we can't reference
      # variables as template expressions. So we can't do things like '${{ format('{0}_Online_MsftSdk', variables.centOSStreamName) }}'.
      # The variable value will be empty in that case. Instead, each leg defines a distro name that source-build-and-validate.yml uses
      # to determine which variable to use for determining the various parameter values which are based on variables.
      #
      # Changing the build name requires updating the referenced name in the source-build-sdk-diff-tests.yml pipeline
      legs:

        ### Source-build verification legs ###

        # Stage 1 leg is built in full scope, or lite when any of the `source-build-` verifications are requested.
        - buildNameFormat: '{0}_Online_MsftSdk'
          distro: centos
          targetArchitecture: x64
          buildFromArchive: false            # ðŸš«
          enablePoison: false                # ðŸš«
          runOnline: true                    # âœ…
          useMonoRuntime: false              # ðŸš«
          withPreviousSDK: false             # ðŸš«

        - ${{ if containsValue(parameters.verifications, 'source-build-stage2') }}:

          - buildNameFormat: '{0}_Offline_CurrentSourceBuiltSdk'
            distro: centos
            targetArchitecture: x64
            buildFromArchive: false            # ðŸš«
            enablePoison: false                # ðŸš«
            runOnline: false                   # ðŸš«
            useMonoRuntime: false              # ðŸš«
            withPreviousSDK: false             # ðŸš«
            reuseBuildArtifactsFrom: '{0}_Online_MsftSdk_x64'

        ### Additional legs for full build ###
        - ${{ if in(parameters.scope, 'full') }}:

          - buildNameFormat: '{0}_Offline_MsftSdk'
            distro: ubuntu
            targetArchitecture: x64
            buildFromArchive: false            # ðŸš«
            enablePoison: false                # ðŸš«
            excludeOmniSharpTests: false       # ðŸš«
            runOnline: false                   # ðŸš«
            useMonoRuntime: false              # ðŸš«
            withPreviousSDK: false             # ðŸš«

          - buildNameFormat: '{0}_Offline_PreviousSourceBuiltSdk'
            distro: centos
            targetArchitecture: x64
            buildFromArchive: false            # ðŸš«
            enablePoison: true                 # âœ…
            runOnline: false                   # ðŸš«
            useMonoRuntime: false              # ðŸš«
            withPreviousSDK: true              # âœ…

          - buildNameFormat: '{0}_Offline_MsftSdk'
            distro: almalinux
            targetArchitecture: x64
            buildFromArchive: false            # ðŸš«
            enablePoison: false                # ðŸš«
            runOnline: false                   # ðŸš«
            useMonoRuntime: false              # ðŸš«
            withPreviousSDK: false             # ðŸš«

          - buildNameFormat: '{0}_Offline_MsftSdk'
            distro: alpine
            targetArchitecture: x64
            buildFromArchive: false            # ðŸš«
            enablePoison: false                # ðŸš«
            runOnline: false                   # ðŸš«
            useMonoRuntime: false              # ðŸš«
            withPreviousSDK: false             # ðŸš«

          - buildNameFormat: '{0}_Offline_MsftSdk'
            distro: centos
            targetArchitecture: x64
            buildFromArchive: true             # âœ…
            enablePoison: false                # ðŸš«
            runOnline: false                   # ðŸš«
            useMonoRuntime: false              # ðŸš«
            withPreviousSDK: false             # ðŸš«

          - buildNameFormat: '{0}_Online_PreviousSourceBuiltSdk'
            distro: centos
            targetArchitecture: x64
            buildFromArchive: false            # ðŸš«
            enablePoison: false                # ðŸš«
            runOnline: true                    # âœ…
            useMonoRuntime: false              # ðŸš«
            withPreviousSDK: true              # âœ…

          - buildNameFormat: '{0}_Mono_Offline_MsftSdk'
            distro: centos
            targetArchitecture: x64
            buildFromArchive: true             # âœ…
            enablePoison: false                # ðŸš«
            runOnline: false                   # ðŸš«
            useMonoRuntime: true               # âœ…
            withPreviousSDK: false             # ðŸš«

          - buildNameFormat: '{0}_Offline_MsftSdk'
            distro: fedora
            targetArchitecture: x64
            buildFromArchive: true             # âœ…
            enablePoison: false                # ðŸš«
            runOnline: false                   # ðŸš«
            useMonoRuntime: false              # ðŸš«
            withPreviousSDK: false             # ðŸš«

          - buildNameFormat: '{0}Arm64_Offline_MsftSdk'
            distro: ubuntu
            targetArchitecture: arm64
            buildFromArchive: false            # ðŸš«
            enablePoison: false                # ðŸš«
            runOnline: false                   # ðŸš«
            useMonoRuntime: false              # ðŸš«
            withPreviousSDK: false             # ðŸš«

          - buildNameFormat: '{0}_Offline_CurrentSourceBuiltSdk'
            distro: fedora
            targetArchitecture: x64
            buildFromArchive: false            # ðŸš«
            enablePoison: false                # ðŸš«
            runOnline: false                   # ðŸš«
            useMonoRuntime: false              # ðŸš«
            withPreviousSDK: false             # ðŸš«
            reuseBuildArtifactsFrom: '{0}_Offline_MsftSdk_x64'

          - buildNameFormat: '{0}_Mono_Offline_CurrentSourceBuiltSdk'
            distro: centos
            targetArchitecture: x64
            buildFromArchive: true             # âœ…
            enablePoison: false                # ðŸš«
            runOnline: false                   # ðŸš«
            useMonoRuntime: true               # âœ…
            withPreviousSDK: false             # ðŸš«
            reuseBuildArtifactsFrom: '{0}_Mono_Offline_MsftSdk_x64'
