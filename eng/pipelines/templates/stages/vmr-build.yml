### This stage builds https://github.com/dotnet/dotnet with varying parameters
### If run in a PR, new changes are applied to a local copy of the VMR, then it is built and tested

parameters:
- name: desiredSigning
  type: string
  default: ''

- name: desiredIbc
  type: string
  default: ''

- name: desiredFinalVersionKind
  type: string
  default: ''

# Scope of jobs which are executed
- name: scope
  type: string
  values:
  # run several legs e.g. win/linux/mac for basic testing
  - lite
  # run everything
  - full

# True when build is running from dotnet/dotnet directly
- name: isBuiltFromVmr
  type: boolean
  default: true

# List of verifications to run during PRs.
- name: verifications
  type: object
  default:
  - source-build-stage1
  - source-build-stage2
  - unified-build-android-arm64
  - unified-build-browser-wasm
  - unified-build-iossimulator-arm64
  - unified-build-linux-buildtests
  - unified-build-windows-buildtests
  - unified-build-windows-x64
  - unified-build-windows-x86

# These are not expected to be passed it but rather just object variables reused below
- name: pool_Linux
  type: object
  default:
    name: $(defaultPoolName)
    image: $(poolImage_Linux)
    demands: ImageOverride -equals $(poolImage_Linux)
    os: linux

- name: pool_Windows
  type: object
  default:
    name: $(defaultPoolName)
    image: $(poolImage_Windows)
    demands: ImageOverride -equals $(poolImage_Windows)
    os: windows

- name: pool_LinuxArm64
  type: object
  default:
    name: $(poolName_LinuxArm64)
    image: $(poolImage_LinuxArm64)
    demands: ImageOverride -equals $(poolImage_LinuxArm64)
    hostArchitecture: Arm64
    os: linux

- name: pool_Mac
  type: object
  default:
    name: Azure Pipelines
    vmImage: $(poolImage_Mac)
    os: macOS


- name: pool_Linux_Shortstack
  type: object
  default:
    name: $(shortStackPoolName)
    image: $(poolImage_Linux)
    demands: ImageOverride -equals $(poolImage_Linux)
    os: linux

stages:
- template: vmr-verticals.yml
  parameters:
    desiredSigning: ${{ parameters.desiredSigning }}
    desiredIbc: ${{ parameters.desiredIbc }}
    desiredFinalVersionKind: ${{ parameters.desiredFinalVersionKind }}
    isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
    scope: ${{ parameters.scope }}
    verifications: ${{ parameters.verifications }}

- ${{ if and(parameters.isBuiltFromVmr, eq(variables['System.TeamProject'], 'internal'), ne(variables['Build.Reason'], 'PullRequest')) }}:
  - stage: Publish_Build_Assets
    displayName: Publish Assets
    dependsOn: VMR_Vertical_Build
    jobs:
    - template: /eng/common/templates-official/job/publish-build-assets.yml
      parameters:
        publishUsingPipelines: true
        publishAssetsImmediately: true
        pool: ${{ parameters.pool_Linux }}
        symbolPublishingAdditionalParameters: '/p:PublishSpecialClrFiles=true'
        publishingVersion: 4
        assetManifestsPattern: |
          **/manifests/**/*.xml
          !*Sdk_*_Artifacts/**/VerticalManifest.xml

  - template: vmr-validation.yml
    parameters:
      desiredSigning: ${{ parameters.desiredSigning }}

- template: source-build-stages.yml
  parameters:
    pool_Linux: ${{ parameters.pool_Linux }}
    pool_LinuxArm64: ${{ parameters.pool_LinuxArm64 }}
    scope: ${{ parameters.scope }}
    isBuiltFromVmr: ${{ parameters.isBuiltFromVmr }}
    desiredFinalVersionKind: ${{ parameters.desiredFinalVersionKind }}
    verifications: ${{ parameters.verifications }}
    ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      # For PR builds, we don't rely on Microsoft build assets for testing because not all of the required assets
      # are available from the subset of jobs that get build in PRs compared to the full build. Instead, we run
      # the tests in the same job as the build and filter out some of the tests that can't be executed in this state.
      useMicrosoftBuildAssetsForTests: false
