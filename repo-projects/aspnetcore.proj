<Project Sdk="Microsoft.Build.NoTargets">

  <PropertyGroup>
    <!-- AspNetCore doesn't have a root build script but one under the eng folder. -->
    <BuildScript>$(ProjectDirectory)eng\build$(ShellExtension)</BuildScript>

    <BuildActions Condition="'$(DotNetBuildSourceOnly)' != 'true'">$(FlagParameterPrefix)restore $(FlagParameterPrefix)all $(FlagParameterPrefix)pack $(FlagParameterPrefix)publish</BuildActions>
    <BuildActions Condition="'$(DotNetBuildSign)' == 'true'">$(BuildActions) $(FlagParameterPrefix)sign</BuildActions>
    <!-- On windows, native tooling (JDK) is pre-installed on the machine. -->
    <BuildActions Condition="'$(BuildOS)' == 'windows'">$(BuildActions) -NativeToolsOnMachine</BuildActions>
    <!-- On non-windows, we don't have the JDK available and don't need to build those projects anyway because they are not consumed downstream. -->
    <BuildActions Condition="'$(BuildOS)' != 'windows'">$(BuildActions) $(FlagParameterPrefix)no-build-java</BuildActions>
    <!-- Enable building installers on Windows and Linux. ASP.NET Core doesn't produce installers on Mac -->
    <BuildActions Condition="'$(BuildOS)' == 'windows'">$(BuildActions) $(FlagParameterPrefix)BuildInstallers</BuildActions>
    <BuildActions Condition="'$(BuildOS)' == 'linux'">$(BuildActions) $(FlagParameterPrefix)build-installers</BuildActions>
    <!-- In a source-only build, we don't pass -all, so we need to explicitly opt-in to managed components here. -->
    <BuildActions Condition="'$(DotNetBuildSourceOnly)' == 'true' and '$(BuildOS)' == 'linux'">$(BuildActions) $(FlagParameterPrefix)build-managed</BuildActions>

    <!-- aspnetcore must be built with desktop msbuild but defaults to dotnet build. -->
    <BuildArgs Condition="'$(BuildOS)' == 'windows'">$(BuildArgs) -msbuildEngine vs</BuildArgs>
    <ForceDotNetMSBuildEngine>false</ForceDotNetMSBuildEngine>

    <!-- May stabilize. -->
    <AllowDotNetFinalVersionKindOverride>true</AllowDotNetFinalVersionKindOverride>

    <!-- Pass TargetArchitecture in as a CLI switch, instead of an msbuild property. -->
    <SkipSetTargetArchitecture>true</SkipSetTargetArchitecture>
    <BuildArgs>$(BuildArgs) $(FlagParameterPrefix)arch $(TargetArchitecture)</BuildArgs>

    <BuildArgs>$(BuildArgs) /p:TargetRuntimeIdentifier=$(TargetRid)</BuildArgs>
    <BuildArgs>$(BuildArgs) /p:PublicBaseURL=file:%2F%2F$(ArtifactsAssetsDir)</BuildArgs>
    <BuildArgs>$(BuildArgs) /p:CrossArchitectureInstallerBasePath=$(ArtifactsAssetsDir)</BuildArgs>
    <BuildArgs Condition="'$(PgoInstrument)' == 'true'">$(BuildArgs) /p:PgoInstrument=true</BuildArgs>

    <!-- PackageValidation fails with desktop msbuild: https://github.com/dotnet/sdk/issues/45004. -->
    <BuildArgs>$(BuildArgs) /p:EnablePackageValidation=false</BuildArgs>

    <!-- Tests are failing to build: https://github.com/dotnet/aspnetcore/issues/60095 -->
    <DotNetBuildTestsOptOut>true</DotNetBuildTestsOptOut>
  </PropertyGroup>

  <ItemGroup>
    <RepositoryReference Include="arcade" />
    <RepositoryReference Include="runtime" />
    <RepositoryReference Include="xdt" />
  </ItemGroup>

  <ItemGroup Condition="'$(DotNetBuildSourceOnly)' == 'true'">
    <RepositoryReference Include="nuget-client" />
    <RepositoryReference Include="roslyn" />
    <RepositoryReference Include="source-build-reference-packages" />
    <RepositoryReference Include="symreader" />
  </ItemGroup>

  <ItemGroup Condition="'$(DotNetBuildSourceOnly)' != 'true'">
    <RepositoryReference Include="efcore" />
  </ItemGroup>

  <ItemGroup Condition="'$(DotNetBuildSourceOnly)' == 'true' and '$(OfficialBuild)' == 'true'">
    <!--
      From aspnetcore Versions.props:
          Versions of Microsoft.CodeAnalysis packages referenced by analyzers shipped in the SDK.
          This need to be pinned since they're used in 3.1 apps and need to be loadable in VS 2019.
      In source-build these don't need to be pinned and can use the source-built versions since it doesn't
      need to support VS 2019.
    -->
    <ExtraPackageVersionPropsPackageInfo Include="Analyzer_MicrosoftCodeAnalysisCSharpVersion" Version="%24(MicrosoftCodeAnalysisCSharpVersion)" />
    <ExtraPackageVersionPropsPackageInfo Include="Analyzer_MicrosoftCodeAnalysisCSharpWorkspacesVersion" Version="%24(MicrosoftCodeAnalysisCSharpWorkspacesVersion)" />
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftCodeAnalysisVersion_LatestVS" Version="%24(MicrosoftCodeAnalysisCommonVersion)" />
  </ItemGroup>

  <!-- For non-official builds, use the Roslyn version contained in the N-1 build because ASP.NET Core needs to build and execute
      a source generator which must be built targeting a version of Roslyn contained in the executing SDK. Otherwise, because of how
      Arcade works for non-official builds, M.CA will get an assembly version of 42.42.42.42 and the source generator would target that
      version leading to an error like the following: 
        CSC error CS9057: Analyzer assembly '/repos/dotnet/src/aspnetcore/artifacts/bin/Microsoft.AspNetCore.Http.RequestDelegateGenerator/Release/netstandard2.0/Microsoft.AspNetCore.Http.RequestDelegateGenerator.dll' cannot be used because it references version '42.42.42.42' of the compiler, which is newer than the currently running version '5.0.0.0'.
      By not lifting the M.CA version to the current version and instead using the N-1 version, we guarantee that it will match the version
      containing in the executed SDK and avoiding this error.
  -->
  <ItemGroup Condition="'$(DotNetBuildSourceOnly)' == 'true' and '$(OfficialBuild)' != 'true'">
    <ExtraPackageVersionPropsPackageInfo Include="Analyzer_MicrosoftCodeAnalysisCSharpVersion" Version="%24(MicrosoftCodeAnalysisCSharpPreviousVersion)" />
    <ExtraPackageVersionPropsPackageInfo Include="Analyzer_MicrosoftCodeAnalysisCSharpWorkspacesVersion" Version="%24(MicrosoftCodeAnalysisCSharpWorkspacesPreviousVersion)" />
    <ExtraPackageVersionPropsPackageInfo Include="MicrosoftCodeAnalysisVersion_LatestVS" Version="%24(MicrosoftCodeAnalysisCommonPreviousVersion)" />
  </ItemGroup>

</Project>
